<?php
//namespace WebservicesFunction;
date_default_timezone_set("Asia/Kolkata");
include_once "Custom.php";


class WebservicesFunction
{


    public static function addUserStaticToJson($fileName, $user_id, $thin_app_id, $mobile, $module_name, $module_sub_name, $service_name)
    {
        if (empty($fileName)) {
            $fileName = $file_name = date('Y-m-d') . "_" . $user_id;
        }
        if (!empty($fileName) && !empty($user_id) && !empty($thin_app_id) && !empty($mobile) && !empty($module_name)) {
            $dir = LOCAL_PATH . 'app/webroot/statics_cache/';
            if (!is_dir($dir)) {
                mkdir($dir, 0777, true);
            }
            $file_name = $fileName . '.json';
            $file_path = LOCAL_PATH . 'app/webroot/statics_cache/' . $file_name;
            $data_array = array(
                'thinapp_id' => (int)$thin_app_id,
                'mobile' => (string)$mobile,
                'user_id' => (int)$user_id,
                'module_name' => (string)$module_name,
                'module_sub_name' => (string)$module_sub_name,
                'service_name' => (string)$service_name,
                'access_date_time' => date('Y-m-d H:i:s')
            );
            if (file_exists($file_path)) {
                $data_array = "##" . json_encode($data_array);
                file_put_contents($file_path, $data_array, FILE_APPEND | LOCK_EX);
            } else {
                $data_array = json_encode($data_array);
                file_put_contents($file_path, $data_array);
            }
        }
    }


    public static function addUserLogToJson($user_id, $thin_app_id, $device_id)
    {
        $fileName = $file_name = date('Y-m-d') . "_" . $user_id . "_" . $thin_app_id;
        if (!empty($fileName) && !empty($user_id) && !empty($thin_app_id) && !empty($device_id)) {
            $dir = LOCAL_PATH . 'app/webroot/visitor_cache/';
            if (!is_dir($dir)) {
                mkdir($dir, 0777, true);
            }
            $file_name = $fileName . '.json';
            $file_path = LOCAL_PATH . 'app/webroot/visitor_cache/' . $file_name;
            $data_array = array(
                'thin_app_id' => (int)$thin_app_id,
                'user_id' => (int)$user_id,
                'device_id' => $device_id,
                'created' => Custom::created()
            );
            if (file_exists($file_path)) {
                $data_array = "##" . json_encode($data_array);
                return file_put_contents($file_path, $data_array, FILE_APPEND | LOCK_EX);
            } else {
                $data_array = json_encode($data_array);
                return file_put_contents($file_path, $data_array);
            }
        }
    }


    public static function deleteJson($fileNameArray, $folder = null)
    {

        if (!empty($folder)) {
            $file_path = LOCAL_PATH . "app/webroot/cache/" . $folder . "/";
        } else {
            $file_path = LOCAL_PATH . 'app/webroot/cache/';
        }
        if (!empty($fileNameArray)) {
            foreach ($fileNameArray as $key => $name) {
                $file = $file_path . $name . '.json';
                if (file_exists($file)) {
                    unlink($file);
                }
            }
        }
    }


    public static function createJson($fileName, $data, $operation, $folder = null, $append_data_string = false)
    {

        if (!empty($folder)) {
            $dir = LOCAL_PATH . "app/webroot/cache/" . $folder . "/";
            if (!is_dir($dir)) {
                mkdir($dir, 0777, true);
            }
            $fileUrl = LOCAL_PATH . "app/webroot/cache/" . $folder . "/" . $fileName . '.json';
        } else {
            $fileUrl = LOCAL_PATH . "app/webroot/cache/" . $fileName . '.json';
        }
        if ($append_data_string === false) {
            if ($operation == "CREATE") {
                $data = json_encode($data);
                file_put_contents($fileUrl, $data);
            } else if ($operation == "APPEND") {
                $data = json_encode($data);
                file_put_contents($fileUrl, $data);
            }

            if (file_exists($fileUrl)) {
                return json_decode(file_get_contents($fileUrl), true);
            } else {
                return false;
            }

        } else {
            if (file_exists($fileUrl)) {
                $data_array = "," . $data;
                file_put_contents($fileUrl, $data_array, FILE_APPEND | LOCK_EX);
            } else {
                file_put_contents($fileUrl, $data);
            }


        }

    }

    public static function delete_channel_subscriber_cache($channel_id)
    {
        $connection = ConnectionUtil::getConnection();
        $query = "select concat('get_subscriber_list_app',app_id,'_user',app_user_id) as file_name from subscribers sub where sub.channel_id =" . $channel_id;
        $channel_count = $connection->query($query);
        $subscriber = array();
        if ($channel_count->num_rows) {
            $subscriber = array_column(mysqli_fetch_all($channel_count, MYSQLI_ASSOC), 'file_name');
            WebservicesFunction::deleteJson($subscriber);
        }
    }

    public static function readJson($fileName, $folder = null, $json_decode = true)
    {
        if (!empty($folder)) {
            $file_path = LOCAL_PATH . "app/webroot/cache/" . $folder . "/" . $fileName . '.json';
        } else {
            $file_path = LOCAL_PATH . "app/webroot/cache/" . $fileName . '.json';
        }
        if (file_exists($file_path)) {
            if ($json_decode === true) {
                return json_decode(file_get_contents($file_path), true);
            } else {
                return file_get_contents($file_path);
            }
        } else {
            return false;
        }
    }

    public static function get_app_enabled_functionality($data = null)
    {
        $return_type = true;
        if (empty($data)) {
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);
            $return_type = false;
        }

        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $role_id = isset($data['role_id']) ? $data['role_id'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $d_width = isset($data['d_width']) ? $data['d_width'] : "";
            /* this code check for update 2.5 version release for update dialoge open*/
            $has_app_version_name = array_key_exists('app_version_name', $data) ? $data['app_version_name'] : false;
            $has_main_app_category = array_key_exists('main_app_category', $data) ? $data['main_app_category'] : false;
            $d_height = isset($data['d_height']) ? $data['d_height'] : "";

            $app_category = "OTHER";
            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else {


                $user_role_data = Custom::get_user_by_mobile($thin_app_id, $mobile);
                $role_id = !empty($user_role_data) ? $user_role_data['role_id'] : $role_id;


                if (!$response = WebservicesFunction::readJson('get_app_enabled_functionality_' . $thin_app_id, 'permission')) {
                    /* work for app functionlary*/
                    $connection = ConnectionUtil::getConnection();
                    /* app functionlity  */
                    $app_fun_type_data = $connection->query("SELECT * FROM `app_functionality_types` WHERE `status` = 'Y'");
                    if ($app_fun_type_data->num_rows) {
                        $app_enable_fun = mysqli_fetch_all($app_fun_type_data);
                    }

                    $app_enable_fun = $connection->query("SELECT app_functionality_type_id FROM `app_enable_functionalities` WHERE `thinapp_id` =" . $thin_app_id);
                    if ($app_enable_fun->num_rows) {
                        $app_enable_fun = array_column(mysqli_fetch_all($app_enable_fun), 0);
                    }


                    $features = array();
                    foreach ($app_fun_type_data as $key => $value) {
                        $features[$value['label_key']] = (in_array($value['id'], $app_enable_fun)) ? 'YES' : "NO";
                    }

                    /* work for user functionlary*/
                    $fun_type_data = $connection->query("SELECT uft.*, aft.label_key AS function_key FROM `user_functionality_types` AS uft JOIN app_functionality_types AS aft ON  uft.app_functionality_type_id = aft.id  WHERE uft.status = 'Y'");
                    if ($fun_type_data->num_rows) {
                        $fun_type_data = mysqli_fetch_all($fun_type_data, MYSQLI_ASSOC);
                    }
                    $enable_fun = $connection->query("SELECT * FROM `user_enabled_fun_permissions` WHERE `thinapp_id` =" . $thin_app_id);
                    $enable_fun_column = array();
                    if ($enable_fun->num_rows) {
                        $enable_fun = mysqli_fetch_all($enable_fun, MYSQLI_ASSOC);
                        $enable_fun_column = array_column($enable_fun, 'permission', 'user_functionality_type_id');
                    }

                    foreach ($fun_type_data as $key => $value) {
                        /* MUST CHANGE ***********************************CHANGE THIS YES PARAMETER TO NO */

                        if ($value['label_key'] != "AUTOMATIC_FOLDER_SHARE") {
                            $features[$value['label_key']] = (array_key_exists($value['id'], $enable_fun_column)) ? $enable_fun_column[$value['id']] : "NO";
                        } else {

                            $features[$value['label_key']] = (array_key_exists($value['id'], $enable_fun_column)) ? $enable_fun_column[$value['id']] : "YES";

                        }
                    
                    	 if($value['function_key'] == "ALERT_DIALOG"){
                            $response['data'][$value['label_key']] = $value['description'];
                        }
                    }


                    $enable_fun = $connection->query("SELECT category_name, status, version_name FROM thinapps WHERE id =$thin_app_id");
                    $response['data']['app_status'] = "INACTIVE";
                    $response['data']['version'] = "0";
                    if ($enable_fun->num_rows) {
                        $app_status = mysqli_fetch_assoc($enable_fun);
                        $response['data']['app_status'] = $app_status['status'];
                        $response['data']['version'] = $app_status['version_name'];
                        $app_category = $app_status['category_name'];

                    }
                    $response['status'] = 1;
                    $response['data']['features'] = $features;
                    $response['data']['features']['APP_CATEGORY'] = $app_category;
                    $response['data']['features']['DEFAULT_CHANNEL_ID'] = Custom::get_app_default_channel_id($thin_app_id);
                    if($response['data']['app_status']=="INACTIVE"){
                        $response['status'] = 1;
                        $response['message'] = "Sorry, this app has been unpublished by developers";
                    }else{
                        $response['message'] = "App features list found";
                    }
                    WebservicesFunction::createJson('get_app_enabled_functionality_' . $thin_app_id, $response, 'CREATE', 'permission');
                }

                if ($has_app_version_name === false && $has_main_app_category === false) {
                    $response['data']['features']['APP_CATEGORY'] = 'DOCTOR';
                }

                $response['data']['thin_app_id']= $thin_app_id;
                $response['data']['features']['API_ENCRYPT'] = AWS_POOL_ID;
                $response['data']['features']['API_END_ENCRYPT'] = AWS_END_POINT;
                $response['data']['features']['API_ACCOUNT_ENCRYPT'] = AWS_ACCOUNT_ID;
                $response['data']['features']['API_AUTH_ENCRYPT'] = AWS_ARN_AUTH_ROLE_NAME;
                $response['data']['features']['API_UNAUTH_ENCRYPT'] = AWS_ARN_UNAUTH_ROLE_NAME;
                $response['data']['features']['GAPI_ENCRYPT'] = GAPI_ENCRYPT;
                $response['data']['jira_username'] = JIRA__USERNAME;
                $response['data']['jira_password'] = JIRA__PASSWORD;
                $response['data']['features']['SHOW_APPOINTMENT_TO_USER'] = 'NO';//Custom::user_is_collaboraotr($user_id,$thin_app_id);
                $response['data']['features']['IS_COLLABORAOTR'] = 'NO';//Custom::user_is_collaboraotr($user_id,$thin_app_id);
                $connection = ConnectionUtil::getConnection();
                $response['data']['quick_appointment'] = Custom::check_module_enable_permission($thin_app_id, 'QUICK_APPOINTMENT');
                $response['data']['enabled_dashboard_doc_cms'] = array('EMERGENCY' => 'NO', 'HEALTH_TIP' => 'NO');
                if (!$response['data']['enabled_dashboard_doc_cms'] = WebservicesFunction::readJson('health_tip_category')) {
                    $dashboardCmsDocSql = "SELECT DISTINCT category FROM cms_doc_dashboards WHERE status = 'ACTIVE' AND thinapp_id = $thin_app_id";
                    if ($dashboardCmsDocSql = $connection->query($dashboardCmsDocSql)) {
                        $dashboardCmsDocData = mysqli_fetch_all($dashboardCmsDocSql, MYSQLI_ASSOC);
                        $res = array();
                        foreach ($dashboardCmsDocData as $value) {
                            $res = $response['data']['enabled_dashboard_doc_cms'][$value['category']] = 'YES';
                        }
                        if (!empty($res)) {
                            WebservicesFunction::createJson('health_tip_category', $res, 'CREATE');
                        }
                    }
                }

                /* this method check for vaccination app master config or not */
                if (!$vac_config = WebservicesFunction::readJson("vaccination_configure_status_$thin_app_id", 'vaccination')) {
                    $res = Custom::clone_master_vaccination($thin_app_id);
                    $res_arr = array('Configure' => "YES");
                    WebservicesFunction::createJson("vaccination_configure_status_$thin_app_id", $res_arr, 'CREATE', 'vaccination');
                }


                if (!$response['data']['social_setting'] = WebservicesFunction::readJson('social_setting_' . $thin_app_id, 'social_setting')) {

                    // $query = "select twitter_usename, IF(SUBSTRING(facebook_url,1,8)='https://' OR facebook_url ='',facebook_url,CONCAT('https://',facebook_url)) as facebook_url, IF(SUBSTRING(website_url,1,7)='http://' OR website_url ='' ,website_url,CONCAT('http://',website_url)) as website_url, IF(SUBSTRING(twitter_url,1,8)='https://' OR twitter_url ='' ,twitter_url,CONCAT('https://',twitter_url)) as twitter_url, IF(SUBSTRING(youtube_url,1,8)='https://' OR youtube_url ='' ,youtube_url,CONCAT('https://',youtube_url)) as youtube_url, IF(SUBSTRING(pinterest_url,1,8)='https://' OR pinterest_url ='',pinterest_url,CONCAT('https://',pinterest_url)) as pinterest_url, IF(SUBSTRING(linkedin_url,1,8)='https://' OR linkedin_url ='',linkedin_url,CONCAT('https://',linkedin_url)) as linkedin_url, IF(SUBSTRING(instagram_url,1,8)='https://' OR instagram_url ='',instagram_url,CONCAT('https://',instagram_url)) as instagram_url  from thinapps where id = $thin_app_id limit 1";
                    $query = "select twitter_usename, facebook_url,  website_url,  twitter_url,  youtube_url,  pinterest_url,  linkedin_url,  instagram_url  from thinapps where id = $thin_app_id limit 1";
                    $connection = ConnectionUtil::getConnection();
                    $message_list = $connection->query($query);
                    $response['data']['social_setting'] = $res = mysqli_fetch_assoc($message_list);
                    WebservicesFunction::createJson('social_setting_' . $thin_app_id, $res, 'CREATE', 'social_setting');

                }


                $response['data']['features']['appointment_user_role'] = 'USER';
                if (!empty($mobile) && !empty($role_id)) {
                    if ($response['data']['features']['APP_CATEGORY'] == "HOSPITAL") {
                        $response['data']['features']['appointment_user_role'] = Custom::hospital_get_user_role($mobile, $thin_app_id, $role_id);
                    } else {
                        $response['data']['features']['appointment_user_role'] = Custom::get_appointment_role($mobile, $thin_app_id, $role_id);
                    }
                }


                if ($response['data']['features']['appointment_user_role'] == 'USER') {
                    $response['data']['features']['doctor_id'] = Custom::get_thin_app_default_doctor_id($thin_app_id);
                } else {
                    $response['data']['features']['doctor_id'] = WebservicesFunction::get_staff_id_by_mobile($mobile, $thin_app_id);
                }

                $currTime = date('Y-m-d H:i ');
                $contestQuery = "SELECT COUNT(`id`) AS `total_contests` FROM `contests` WHERE `open_status` = 'OPEN' AND `start_time` <= '" . $currTime . "' AND `status` = 'ACTIVE'";
                $contestData = mysqli_fetch_assoc($connection->query($contestQuery));
                $response['data']['contest_count'] = $contestData['total_contests'];

                /* this code add banner image array */
                $icon = Custom::get_app_icons($thin_app_id);
                if(!empty($icon)){
                    $response['data']['ic_launcher'] = $icon['ic_launcher'];
                    $response['data']['logo'] = $icon['logo'];
                    $response['data']['left_drawer_bar'] = $icon['left_drawer_bar'];
                }else{
                    $response['data']['ic_launcher'] = 'https://s3-ap-south-1.amazonaws.com/mengage/logo/app_logo_134.png';
                    $response['data']['logo'] = 'https://s3-ap-south-1.amazonaws.com/mengage/logo/app_logo_134.png';
                    $response['data']['left_drawer_bar'] = 'https://s3-ap-south-1.amazonaws.com/mengage/logo/app_logo_134.png';
                }

                $tmp_array = Custom::get_app_cms_list($thin_app_id);
                $response['data']['custom_icon'] = $tmp_array;
                $response['data']['banner'] = $banner = Custom::get_app_banners($thin_app_id);
                if (empty($banner)) {
                    $response['data']['banner'] = array();
                }


                if (!$response['data']['prescription_layout'] = WebservicesFunction::readJson('layout_' . $thin_app_id)) {
                    // $query = "select twitter_usename, IF(SUBSTRING(facebook_url,1,8)='https://' OR facebook_url ='',facebook_url,CONCAT('https://',facebook_url)) as facebook_url, IF(SUBSTRING(website_url,1,7)='http://' OR website_url ='' ,website_url,CONCAT('http://',website_url)) as website_url, IF(SUBSTRING(twitter_url,1,8)='https://' OR twitter_url ='' ,twitter_url,CONCAT('https://',twitter_url)) as twitter_url, IF(SUBSTRING(youtube_url,1,8)='https://' OR youtube_url ='' ,youtube_url,CONCAT('https://',youtube_url)) as youtube_url, IF(SUBSTRING(pinterest_url,1,8)='https://' OR pinterest_url ='',pinterest_url,CONCAT('https://',pinterest_url)) as pinterest_url, IF(SUBSTRING(linkedin_url,1,8)='https://' OR linkedin_url ='',linkedin_url,CONCAT('https://',linkedin_url)) as linkedin_url, IF(SUBSTRING(instagram_url,1,8)='https://' OR instagram_url ='',instagram_url,CONCAT('https://',instagram_url)) as instagram_url  from thinapps where id = $thin_app_id limit 1";
                    $query = "select prescription_layout_images  from thinapps where id = $thin_app_id limit 1";
                    $connection = ConnectionUtil::getConnection();
                    $layout = $connection->query($query);
                    if ($layout->num_rows) {
                        $layout = mysqli_fetch_assoc($layout);
                        if (!empty($layout['prescription_layout_images'])) {
                            $response['data']['prescription_layout'] = $res = unserialize($layout['prescription_layout_images']);
                        } else {
                            $response['data']['prescription_layout'] = $res = Custom::set_layout_array();
                        }
                        WebservicesFunction::createJson('layout_' . $thin_app_id, $res, 'CREATE', 'prescription');
                    } else {
                        $response['data']['prescription_layout'] = Custom::set_layout_array();
                    }
                }

                $doctor_id = $response['data']['features']['doctor_id'];


                $sig_file = 'signature_' . $thin_app_id . "_$doctor_id";
                if (!$response['data']['doctor_signature'] = WebservicesFunction::readJson($sig_file)) {
                    $response['data']['doctor_signature'] = "";
                    $query = "select preview  from prescription_layouts where appointment_staff_id = $doctor_id and type = 'SIGNATURE' AND status = 'ACTIVE' limit 1";
                    $connection = ConnectionUtil::getConnection();
                    $layout = $connection->query($query);
                    if ($layout->num_rows) {
                        $layout = mysqli_fetch_assoc($layout);
                        if (!empty($layout['preview'])) {
                            $response['data']['doctor_signature'] = $res = $layout['preview'];
                            WebservicesFunction::createJson($sig_file, $res, 'CREATE', 'signature');
                        }
                    }
                }

                /* check user is parent of child or not when vaccination module is on*/

                $response['data']['is_parent'] = "YES";
                if ($response['data']['features']['VACCINATION'] == "YES") {
                    $user_role = $response['data']['features']['appointment_user_role'];
                    if(in_array($user_role,array('ADMIN','DOCTOR'))){
                        $response['data']['is_parent'] = "YES";
                    }
                }

                $response['data']['float_resolution'] = Custom::calculate_prescription_resolution($d_width, $d_height, $thin_app_id, $role_id);
                $lab_user = Custom::get_lab_user_static_data($thin_app_id, $mobile, $role_id);
                $response['data']['features']['lab_user_role'] = $lab_user['lab_user_role'];
                $response['data']['features']['lab_user_id'] = $lab_user['lab_user_id'];

                $response['data']['features']['single_doctor_array'] = Custom::single_doctor_appointment_ids($thin_app_id);



                $sqlDoc = "SELECT `id` FROM `appointment_staffs` WHERE `thinapp_id` = '" . $thin_app_id . "' AND `user_id` = '" . $user_id . "' AND `status` = 'ACTIVE' AND `staff_type` = 'DOCTOR'";
                $docRS = $connection->query($sqlDoc);

                if ($docRS->num_rows) {
                    $docData = mysqli_fetch_assoc($docRS);
                    $response['data']['is_doctor'] = 'YES';
                    $response['data']['tele_doctor_id'] = $docData['id'];
                } else {
                    $response['data']['is_doctor'] = 'NO';
                    $response['data']['tele_doctor_id'] = 0;
                }

                /* code for EHCC HOSPITAL */
                $response['data']['ehcc']['dialog'] = "NO";
                if ($thin_app_id == '613' && $response['data']['features']['appointment_user_role'] == 'USER') {
                    $get_doctor = Custom::get_doctor_by_id(712, 613);
                    if (!empty($get_doctor)) {
                        $ehcc = array(
                            'dialog' => 'YES',
                            'header' => 'Book Appointment',
                            'title' => 'To Book an Appointment with Renowned Cardiologist ' . $get_doctor['name'],
                            'image' => $get_doctor['profile_photo'],
                            'doctor_id' => $get_doctor['id'],
                            'mobile' => $get_doctor['mobile']
                        );
                        $response['data']['ehcc'] = $ehcc;
                    }
                }

                $alertSql = "SELECT IFNULL(`user_enabled_fun_permissions`.`description`,'') AS text,`user_functionality_types`.`label_key` FROM `user_functionality_types` LEFT JOIN `user_enabled_fun_permissions` ON (`user_enabled_fun_permissions`.`user_functionality_type_id` = `user_functionality_types`.`id` AND `thinapp_id` = '".$thin_app_id."') LEFT JOIN `app_functionality_types` ON (`app_functionality_types`.`id` = `user_functionality_types`.`app_functionality_type_id`) WHERE `app_functionality_types`.`label_key` = 'ALERT_DIALOG'";
                $alertRS = $connection->query($alertSql);
                $alertData = mysqli_fetch_all($alertRS, MYSQLI_ASSOC);
                foreach($alertData AS $dilog){
                    $response['data'][$dilog['label_key']] = $dilog['text'];
                }



                $response['data']['booking_convenience_fee'] = 0;
                $response['data']['take_booking_convenience_fee'] = 'NO';
            	$response['data']['load_custom_dialog'] = '';
            	$file_name ="app_dialog_$thin_app_id";
                if($content = json_decode(WebservicesFunction::readJson($file_name,"dialog_message"),true)){
                    $response['data']['load_custom_dialog'] = SITE_PATH."tracker/app_dialog/$thin_app_id";
                }
            
                if (Custom::check_app_enable_permission($thin_app_id, 'SMART_CLINIC')) {
                        $thinappSql = "SELECT `booking_convenience_fee` FROM `thinapps` WHERE `id` = '".$thin_app_id."' LIMIT 1";
                        $thinappRS = $connection->query($thinappSql);
                        $thinappData = mysqli_fetch_assoc($thinappRS);
                        if($thinappData['booking_convenience_fee'] > 0)
                        {
                            $response['data']['booking_convenience_fee'] = $thinappData['booking_convenience_fee'];
                            $response['data']['take_booking_convenience_fee'] = 'YES';
                        }
                }




            }
        } else {
            $response['status'] = 0;
            $response['message'] = "Invalid request";
        }
        if ($return_type === true) {
            return json_encode($response);
        } else {
            echo json_encode($response);
        }


        die;
    }

    public static function cms_pages()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $app_key = $data['app_key'];
            $user_id = $data['user_id'];
            $thin_app_id = $data['thin_app_id'];
            $response = array();
            if ($user_id != '' && $app_key != '' && $thin_app_id != '') {
                if (!$response = WebservicesFunction::readJson('cms_pages_' . $thin_app_id)) {
                    $connection = ConnectionUtil::getConnection();
                    $cmspages = $connection->query("SELECT * FROM `cms_pages` WHERE `thinapp_id` =" . $thin_app_id . " AND status= 'ACTIVE'");
                    if ($cmspages->num_rows) {
                        $cmspages = mysqli_fetch_all($cmspages, MYSQLI_ASSOC);
                        $response['status'] = 1;
                        $response['message'] = "Pages Found";
                        foreach ($cmspages as $key => $page) {
                            $response['data']['pages'][$key]['id'] = $page['id'];
                            $response['data']['pages'][$key]['title'] = $page['title'];
                            //$response['data']['pages'][$key]['description'] = $page['description'];
                            $response['data']['pages'][$key]['description'] = SITE_PATH . "app_admin/view_cms/" . base64_encode($page['id']);

                        }
                        WebservicesFunction::createJson('cms_pages_' . $thin_app_id, $response, 'CREATE');
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Pages Not Found";
                    }
                }

            } else {
                $response['status'] = 0;
                $response['message'] = "Invalid request parameter";
            }
            $response['education'] = Custom::get_user_education($user_id);
            echo json_encode($response);
            die;
        }
    }


    /* api repairing ================================*/


    public static function SubscribeDefaultChannelsSignIn($app_user_id = null, $mobile = null, $thin_app_id = null)
    {

        //Custom::send_process_to_background();
        $connection = ConnectionUtil::getConnection();
        $created = Custom::created();
        $query = "select u.*, t.name as app_name, t.category_name from users as u join thinapps as t on t.id = u.thinapp_id where u.id = $app_user_id  limit 1";
        $user_data = $connection->query($query);
        if ($user_data->num_rows) {
            $user_data = mysqli_fetch_assoc($user_data);
            $query = "select c.id, c.topic_name, c.app_id, c.user_id from channels as c  where c.channel_status = 'DEFAULT' and c.app_id = $thin_app_id limit 1";
            $channel_data = $connection->query($query);
            if (!$channel_data->num_rows && $user_data['role_id'] == 5) {

                $description = "This is first channel";
                $default = "Y";
                $channel_status = "DEFAULT";
                $sql = "INSERT INTO channels (user_id, channel_name, channel_desc, app_id, is_searchable, is_publish_mbroadcast, channel_status, created, modified ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)";
                $stmt = $connection->prepare($sql);
                $stmt->bind_param('sssssssss', $app_user_id, $user_data['app_name'], $description, $thin_app_id, $default, $default, $channel_status, $created, $created);
                if ($stmt->execute()) {
                    $last_inser_id = $stmt->insert_id;
                    $topic_name = Custom::create_topic_name($last_inser_id);
                    $sql = "UPDATE channels set topic_name = ? where id = ?";
                    $stmt = $connection->prepare($sql);
                    $stmt->bind_param('ss', $topic_name, $last_inser_id);
                    $stmt->execute();

                    $status = 'SUBSCRIBED';
                    $sql = "INSERT INTO subscribers (channel_id, user_id, app_user_id, mobile, app_id, status, created, modified) VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
                    $stmt = $connection->prepare($sql);
                    $stmt->bind_param('ssssssss', $last_inser_id, $user_data['id'], $user_data['id'], $user_data['mobile'], $thin_app_id, $status, $created, $created);
                    if ($stmt->execute()) {
                        $response_data[] = WebservicesFunction::fun_get_subscriber_list($thin_app_id, $app_user_id, PAGINATION_LIMIT, 0);
                        WebservicesFunction::createJson('get_subscriber_list_app' . $thin_app_id . "_user" . $app_user_id, $response_data, 'CREATE', 'subscriber');


                    }
                }


            } else {

                /* update topic token for user */

                $channel_data = mysqli_fetch_assoc($channel_data);
                $mobile = $user_data['mobile'];
                $ch_id = $channel_data['id'];
                $query = "select id from subscribers as s where s.channel_id = $ch_id and s.mobile = '$mobile' and s.app_id = $thin_app_id limit 1";
                $sub_data = $connection->query($query);
                if (!$sub_data->num_rows) {
                    $status = 'SUBSCRIBED';
                    $sql = "INSERT INTO subscribers (channel_id, user_id, app_user_id, mobile, app_id, status,created, modified) VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
                    $stmt = $connection->prepare($sql);
                    $stmt->bind_param('ssssssss', $channel_data['id'], $channel_data['user_id'], $app_user_id, $user_data['mobile'], $thin_app_id, $status, $created, $created);
                    if ($stmt->execute()) {
                        $response_data[] = WebservicesFunction::fun_get_subscriber_list($thin_app_id, $app_user_id, PAGINATION_LIMIT, 0);
                        WebservicesFunction::createJson('get_subscriber_list_app' . $thin_app_id . "_user" . $app_user_id, $response_data, 'CREATE', 'subscriber');
                    }

                    /* send notification to admin when user login first time*/
                    $admin_data = Custom::get_thinapp_admin_data($thin_app_id);
                    if (!empty($admin_data)) {
                        $admin_firebase_token = $admin_data['firebase_token'];
                        $login_date = date('d M Y h:i A', strtotime($user_data['created']));
                        //$day_label  = Custom::get_date_label($login_date);
                        $message = "New Download - " . $user_data['username'] . " (" . $user_data['mobile'] . ") has downloaded your app on , " . $login_date;
                        $option = array(
                            'thinapp_id' => $thin_app_id,
                            'customer_id' => 0,
                            'staff_id' => 0,
                            'service_id' => 0,
                            'channel_id' => 0,
                            'role' => "STAFF",
                            'flag' => 'NEW_USER_LOGIN',
                            'title' => "New User Login",
                            'message' => mb_strimwidth($message, 0, 250, '...'),
                            'description' => mb_strimwidth($message, 0, 250, '...'),
                            'chat_reference' => '',
                            'module_type' => 'SUBSCRIBER_LIST',
                            'module_type_id' => $user_data['id'],
                            'firebase_reference' => ""
                        );
                        Custom::send_notification_via_token($option, array($admin_firebase_token), $thin_app_id);

                    }


                }


            }


            /* this cod add  update subscriber user_id */
            $con_app_user = 0;
            $status = 'SUBSCRIBED';
            $sql = "UPDATE subscribers SET  app_user_id = ?, modified = ? where  app_user_id = ? and  mobile = ? and app_id = ? and status = ?";
            $stmt = $connection->prepare($sql);
            $stmt->bind_param('ssssss', $app_user_id, $created, $con_app_user, $mobile, $thin_app_id, $status);
            $stmt->execute();


            /*update id to appointment staff table */
            $sql = "UPDATE appointment_staffs SET  user_id = ?, modified = ? where mobile = ? and thinapp_id = ?";
            $stmt = $connection->prepare($sql);
            $stmt->bind_param('ssss', $user_data['id'], $created, $mobile, $thin_app_id);
            $stmt->execute();


            /*update id to appointment staff table */
            $sql = "UPDATE chat_users SET  to_username = ?, created = ? where ( from_mobile = ? OR to_mobile = ? ) and thinapp_id = ?";
            $stmt = $connection->prepare($sql);
            $stmt->bind_param('sssss', $user_data['username'], $created, $mobile, $mobile, $thin_app_id);
            $stmt->execute();


            /*start this code check autogenrated folder name and modifed on username chenged*/


            /* add staff memeber to admin */

            if ($user_data['role_id'] == 5) {

                /* this condition check for admin added as staff*/
                /* $query = "select id from app_staffs where mobile = '".$user_data['mobile']."'  and thinapp_id = ".$user_data['thinapp_id']." limit 1";
                $sub_data = $connection->query($query);
                if (!$sub_data->num_rows) {
                    $designation = !empty($user_data['education'])?$user_data['education']:"Doctor";
                    $sql = "INSERT INTO app_staffs (thinapp_id, fullname, email, mobile, alt_mobile, designation, image, description, address, created, modified) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                    $stmt = $connection->prepare($sql);
                    $stmt->bind_param('sssssssssss', $user_data['thinapp_id'], $user_data['username'], $user_data['email'], $user_data['mobile'], $user_data['mobile'], $designation, $user_data['image'], $user_data['about_user'], $user_data['address'], $created, $created);
                    $stmt->execute();

                }*/

                /* this condition check for admin added as staff*/
                if ($user_data['category_name'] == 'DOCTOR') {



                        /* this condition check for admin added as staff*/
                        $con = ConnectionUtil::getConnection();
                        $query = "select id from appointment_staffs where mobile = '" . $user_data['mobile'] . "' and thinapp_id = " . $user_data['thinapp_id'] . " limit 1";
                        $sub_data = $con->query($query);
                        if (!$sub_data->num_rows && (Custom::is_allowed_add_doc($thin_app_id) == 0) ) {
                            $con->autocommit(false);
                            $country_code = "+91";
                            $sql = "INSERT INTO appointment_staffs (thinapp_id, user_id, name, sub_title, profile_photo, mobile, country_code, description, address, experience, created, modified) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                            $stmt = $con->prepare($sql);
                            $stmt->bind_param('ssssssssssss', $user_data['thinapp_id'], $user_data['id'], $user_data['username'], $user_data['education'], $user_data['image'], $user_data['mobile'], $country_code, $user_data['about_user'], $user_data['address'], $user_data['experience'], $created, $created);
                            if ($stmt->execute()) {
                                $doctor_id = $stmt->insert_id;
                                $res = Custom::create_doctor_hours($con, $user_data['thinapp_id'], $doctor_id, $user_data['id']);
                                if ($res == 1) {
                                    $con->commit();
                                } else {
                                    $con->rollback();
                                }
                            }
                        }


                        $circle_data = Custom::get_circle_data($user_data['thinapp_id'], $user_data['thinapp_id']);
                        if (!$circle_data) {
                            $sql = "INSERT INTO app_circles (thinapp_id, with_app_id) VALUES (?, ?)";
                            $stmt = $connection->prepare($sql);
                            $stmt->bind_param('ss', $thin_app_id, $add_with_id);
                            $stmt->execute();
                        }

                }


            } else if ($user_data['role_id'] == 1) {

                /* this code add admin rights folder and sare with user */

                if (!Custom::has_patient_by_number($thin_app_id, $mobile) && Custom::check_user_permission($thin_app_id, 'AUTOMATIC_FOLDER_SHARE', true)=="YES" ) {
                        $auto_share_folder = true;
                        $customer = array();
                        $customer['app_key'] = APP_KEY;
                        $customer['thin_app_id'] = $thin_app_id;
                        $customer['user_id'] = $user_data['id'];
                        $customer['first_name'] = $user_data['username'];
                        $customer['mobile'] = $user_data['mobile'];
                        $customer['country_code'] = "+91";
                        $result = WebservicesFunction::appointment_add_customer($customer, $auto_share_folder);
                }

                /*update id to appointment customer table */
                $sql = "UPDATE drive_folders SET  folder_name = ?, modified = ? where folder_add_from_number = ? and thinapp_id = ? and folder_name = ?";
                $stmt = $connection->prepare($sql);
                $stmt->bind_param('sssss', $user_data['username'], $created, $mobile, $thin_app_id,$mobile);
                $stmt->execute();
                /*end  this code check autogenrated folder name and modifed on username chenged*/

            }
        }

    }

    public static function getUserData($connection, $user_id)
    {
        $query = "select u.is_support_user, t.name as app_name, u.firebase_token, u.thinapp_id, u.mobile,u.id, u.status, u.is_verified, u.username, u.email, u.address, u.occupation, u.image, u.role_id, u.role_id, u.firebase_chat_email, u.firebase_chat_password, t.website_url, t.facebook_url from users as u join thinapps as t on u.thinapp_id = t.id where u.id= $user_id  limit 1 offset 0";
        $user_data = $connection->query($query);
        if ($user_data->num_rows) {
            $user_data = mysqli_fetch_assoc($user_data);
            $response['is_exist'] = 0;
            $response['user_id'] = $user_id;
            $response['mbroadcast_app_id'] = MBROADCAST_APP_ID;
            $response['username'] = $user_data['username'];
            $response['app_name'] = $user_data['app_name'];
            $response['role_id'] = $user_data['role_id'];
            $response['thinapp_id'] = $response['thin_app_id'] = $user_data['thinapp_id'];

            $response['firebase_token'] = $user_data['firebase_token'];
            $response['firebase_chat_email'] = $user_data['firebase_chat_email'];
            $response['firebase_chat_password'] = $user_data['firebase_chat_password'];
            $response['website_url'] = $user_data['website_url'];
            $response['facebook_url'] = $user_data['facebook_url'];
            $response['is_support_user'] = $user_data['is_support_user'];
            $response['mobile'] = $user_data['mobile'];
            $response['admin_firebase_chat_email'] = $user_data['firebase_chat_email'];;

            $response['address'] = $user_data['address'];
            $response['email'] = $user_data['email'];
            $response['occupation'] = $user_data['occupation'];
            $response['image'] = $user_data['image'];

            return $response;
        } else {
            return false;
        }
    }


    public static function signup_revised()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $HASH_KEY = isset($data['HASH_KEY']) ? $data['HASH_KEY'] : "";
            $device_unique_id = isset($data['device_unique_id']) ? $data['device_unique_id'] : "";
            $package_name = isset($data['package_name']) ? $data['package_name'] : "";
            $username = isset($data['username']) ? trim($data['username']) : "Guest";
            $login_from = isset($data['login_from']) ? trim($data['login_from']) : "DOCTOR_APP";
            $firebase_token = isset($data['firebase_token']) ? trim($data['firebase_token']) : "";
            $switch_thin_app_id = isset($data['switch_thin_app_id']) ? trim($data['switch_thin_app_id']) : "";
        	$automation_request = isset($data['automation']) ? trim($data['automation']) : "";
            $verfication_data = array();
            $switch_success = false;
            if ($login_from == "MENGAGE" && !empty($switch_thin_app_id)) {
                $switch_app_data = Custom::getThinAppData($switch_thin_app_id);
                $package_name = $switch_app_data['package_name'];
            }

            if($thin_app_id == MENGAGE_CLINIC){
                $admin_app_data = Custom::get_admin_app_data_by_mobile($mobile);
                if(!empty($admin_app_data)){
                    $thin_app_id = $admin_app_data['id'];
                }
            }

            if($thin_app_id == MENGAGE_CLINIC){
                $response['status'] = 0;
                $response['message'] = 'Mobile number not register';
                Custom::sendResponse($response);
            }else{


            if (($login_from == "MENGAGE" && empty($switch_thin_app_id)) ||  ($login_from != 'PHARMA' && empty($thin_app_id)) )
            {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter mobile number id';
            } else if (empty($package_name)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid package name';
            } else if (empty($device_unique_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid device';
            } else {
				$send_otp_sms =true;
                try {

                    if ($login_from == "MENGAGE") {

                        $connection = ConnectionUtil::getConnection();
                        $query = "select u.id, u.status, u.is_verified, u.username, u.role_id, u.firebase_chat_email, u.firebase_chat_password, t.package_name, t.website_url, t.facebook_url from users as u join thinapps as t on u.thinapp_id = t.id where u.mobile= '$mobile' and u.thinapp_id = $switch_thin_app_id and (u.role_id = 1 OR u.role_id = 5) limit 1 ";
                        $user_data = $connection->query($query);
                        if (!$user_data->num_rows) {
                            if (Custom::is_app_admin_login_first_time($switch_thin_app_id)) {
                                $connection->autocommit(FALSE);

                                $role_id = 1;
                                $created = Custom::created();
                                $verification_code = Custom::getRandomString(4);
                                $app_status = "INSTALLED";
                                $login_from = "MENGAGE";
                                $is_verified = "Y";

                                $sql = "INSERT INTO users (firebase_token, is_verified, login_from, signup_from, app_installed_status, role_id, username, mobile, verification_code, firebase_chat_email, firebase_chat_password, app_key, thinapp_id,  device_unique_id, created, modified) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                                $stmt = $connection->prepare($sql);
                                $stmt->bind_param('ssssssssssssssss', $firebase_token, $is_verified, $login_from, $login_from, $app_status, $role_id, $username, $mobile, $verification_code, $mobile, $mobile, $app_key, $switch_thin_app_id, $device_unique_id, $created, $created);
                                if ($stmt->execute()) {
                                    $last_id = $stmt->insert_id;
                                    if (Custom::updateCoins('REGISTER', $last_id, $last_id, 0, $switch_thin_app_id, 0)) {
                                        $user_data = WebservicesFunction::getUserData($connection, $last_id);
                                        if (!empty($user_data)) {
                                            WebservicesFunction::addUserStaticToJson('', $last_id, $switch_thin_app_id, $mobile, "LOGIN", "SEND OTP", 'signup_revised');
                                            $response['status'] = 1;
                                            $response['message'] = "Signup successfully";
                                            $return_array[0] = $user_data;
                                            $return_array[1] = Custom::get_app_functionality_data($user_data['thinapp_id'], $user_data['id'], $user_data['mobile']);
                                            $response['data'] = array_merge($return_array[0], $return_array[1]);

                                            $connection->commit();
                                            Custom::configWalletForFirstTime($last_id, $switch_thin_app_id);
                                            $switch_success = true;

                                            $option = array(
                                                'username' => $username,
                                                'mobile' => $mobile,
                                                'verification' => $verification_code,
                                                'thinapp_id' => $switch_thin_app_id,
                                                'user_id' => $user_data['user_id'],
                                                'HASH_KEY' => $HASH_KEY
                                            );
                                            $verification_data = $option;

                                        } else {
                                            $connection->rollback();
                                            $response['status'] = 0;
                                            $response['message'] = "Sorry user could not register";
                                        }
                                    } else {
                                        $connection->rollback();
                                        $response['status'] = 0;
                                        $response['message'] = "Sorry user could not register";
                                    }


                                } else {
                                    $connection->rollback();
                                    $response['status'] = 0;
                                    $response['message'] = "Sorry user could not register";
                                }
                            } else {
                                $response['status'] = 0;
                                $response['message'] = "Sorry you cannot register right now. Please try later";
                            }
                        } else {

                            $user_data = mysqli_fetch_assoc($user_data);
                            $firebase_token = empty($firebase_token) ? $user_data['firebase_token'] : $firebase_token;

                            $verification_code = Custom::getRandomString(4);

                            $app_status = "INSTALLED";
                            $login_from = "MENGAGE";
                            $is_verified = "Y";
                            $sql = "UPDATE users SET firebase_token = ?, app_installed_status =?, is_verified = ?, login_from = ? where id = ?";
                            $stmt = $connection->prepare($sql);
                            $stmt->bind_param('sssss', $firebase_token, $app_status, $is_verified, $login_from, $user_data['id']);
                            if ($stmt->execute()) {
                                $user_data = WebservicesFunction::getUserData($connection, $user_data['id']);
                                if (!empty($user_data)) {
                                    Custom::deleteUserCache($user_data['is_support_user'], $user_data['user_id'], $mobile, $switch_thin_app_id);
                                    WebservicesFunction::addUserStaticToJson('', $user_data['user_id'], $switch_thin_app_id, $mobile, "LOGIN", "SEND OTP", 'signup_revised');
                                    $response['status'] = 1;
                                    $response['message'] = "Login successfully";
                                    $return_array[0] = $user_data;
                                    $return_array[1] = Custom::get_app_functionality_data($user_data['thinapp_id'], $user_data['user_id'], $user_data['mobile']);
                                    $response['data'] = array_merge($return_array[0], $return_array[1]);


                                    $switch_success = true;
                                    $option = array(
                                        'username' => $username,
                                        'mobile' => $mobile,
                                        'verification' => $verification_code,
                                        'thinapp_id' => $switch_thin_app_id,
                                        'user_id' => $user_data['user_id'],
                                        'HASH_KEY' => $HASH_KEY
                                    );
                                    $verification_data = $option;

                                } else {
                                    $connection->rollback();
                                    $response['status'] = 0;
                                    $response['message'] = "Sorry user could not login";
                                }

                            } else {
                                $response['status'] = 1;
                                $response['message'] = "Sorry login fail";
                            }
                        }


                    } else {

                        $connection = ConnectionUtil::getConnection();
                        if($login_from == 'PHARMA')
                        {
                            $lab_pharma_reg_no = isset($data['lab_pharma_reg_no']) ? trim($data['lab_pharma_reg_no']) : "";
                            $lab_pharma_id = isset($data['lab_pharma_id']) ? trim($data['lab_pharma_id']) : "";

                            $sqlLabPharmaUser = "SELECT `lab_pharmacy_users`.`thinapp_id`,`users`.`username`  FROM `lab_pharmacy_users` LEFT JOIN `users` ON (`lab_pharmacy_users`.`user_id` = `users`.`id`) WHERE `lab_pharmacy_users`.`mobile` = '".$mobile."' AND `lab_pharmacy_users`.`lab_pharma_id` = '".$lab_pharma_id."' AND `lab_pharmacy_users`.`lab_pharma_reg_no` = '".$lab_pharma_reg_no."' AND `lab_pharmacy_users`.`status` = 'ACTIVE' LIMIT 1";
                            $sqlLabPharmaUserData = $connection->query($sqlLabPharmaUser);
                            if (!$sqlLabPharmaUserData->num_rows) {
                                $response['status'] = 0;
                                $response['message'] = ($login_from == 'PHARMA')?"This user is not registered":"Sorry user could not register";
                                Custom::sendResponse($response); die;
                            }
                            else
                            {
                                $labPharmaUserData = mysqli_fetch_assoc($sqlLabPharmaUserData);
                                $thin_app_id = $labPharmaUserData['thinapp_id'];
                                $username = $labPharmaUserData['username'];
                            }

                        }

                        $factoryThinappID = 134;
                        $user_data = array();

                        $query = "select u.id, u.status, u.is_verified, u.username, u.role_id, u.firebase_chat_email, u.firebase_chat_password, t.package_name, t.website_url, t.facebook_url from users as u join thinapps as t on u.thinapp_id = t.id where u.mobile= '$mobile' and u.thinapp_id = $thin_app_id and (u.role_id = 1 OR u.role_id = 5) limit 1 ";
                        $user_data = $connection->query($query);
                        if (!$user_data->num_rows) {
                            if (Custom::is_app_admin_login_first_time($thin_app_id)) {
                                $connection->autocommit(FALSE);
                                $role_id = 1;
                                $created = Custom::created();
                                $verification_code = Custom::getRandomString(4);
                                if($thin_app_id ==134 && $role_id == 5 && $mobile =="+918955004050"){
                                    $verification_code = date('md');
                                	$send_otp_sms=false;
                                }else if($mobile =="+918955004050"){
                                    $verification_code = '9860';
                                    $send_otp_sms=false;
                                }else if($automation_request=="YES" || ($thin_app_id ==788 && $user_data['role_id'] == 5 && $mobile =="+918890720687")){
                                $verification_code = 1703;
                                $send_otp_sms=false;
                            }


                                $app_status = "UNINSTALLED";
                                $sql = "INSERT INTO users (app_installed_status, role_id, username, mobile, verification_code, firebase_chat_email, firebase_chat_password, app_key, thinapp_id,  device_unique_id, created, modified) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                                $stmt = $connection->prepare($sql);
                                $stmt->bind_param('ssssssssssss', $app_status, $role_id, $username, $mobile, $verification_code, $mobile, $mobile, $app_key, $thin_app_id, $device_unique_id, $created, $created);
                                if ($stmt->execute()) {
                                    $last_id = $stmt->insert_id;
                                    if (Custom::updateCoins('REGISTER', $last_id, $last_id, 0, $thin_app_id, 0)) {
                                        $user_data = WebservicesFunction::getUserData($connection, $last_id);
                                        if (!empty($user_data)) {
                                            WebservicesFunction::addUserStaticToJson('', $last_id, $thin_app_id, $mobile, "LOGIN", "SEND OTP", 'signup_revised');

                                            $response['status'] = 1;
                                            $response['message'] = "Signup successfully";
                                            $response['data'] = $user_data;
                                            $connection->commit();
                                            $option = array(
                                                'username' => $username,
                                                'mobile' => $mobile,
                                                'verification' => $verification_code,
                                                'thinapp_id' => $thin_app_id,
                                                'HASH_KEY' => $HASH_KEY
                                            );
                                            $verification_data = $option;
                                            Custom::configWalletForFirstTime($last_id, $thin_app_id);


                                        } else {
                                            $connection->rollback();
                                            $response['status'] = 0;
                                            $response['message'] = ($login_from == 'PHARMA')?"This user is not registered":"Sorry user could not register";;
                                        }
                                    } else {
                                        $connection->rollback();
                                        $response['status'] = 0;
                                        $response['message'] = ($login_from == 'PHARMA')?"This user is not registered":"Sorry user could not register";;
                                    }
                                } else {
                                    $connection->rollback();
                                    $response['status'] = 0;
                                    $response['message'] = ($login_from == 'PHARMA')?"This user is not registered":"Sorry user could not register";;
                                }
                            } else {
                                $response['status'] = 0;
                                $response['message'] = "Sorry you cannot register right now. Please try letter";
                            }
                        } else {
                            $user_data = mysqli_fetch_assoc($user_data);
                            $verification_code = Custom::getRandomString(4);
                            if($thin_app_id ==134 && $user_data['role_id'] == 5 && $mobile =="+918955004050"){
                                $verification_code = date('md');
                                $send_otp_sms=false;
                            }else if($automation_request=='YES' || ($thin_app_id ==788 && $user_data['role_id'] == 5 && $mobile =="+918890720687")){
                                $verification_code = 1703;
                                $send_otp_sms=false;
                            }
                            $app_status = "UNINSTALLED";
                            $login_from = "DOCTOR_APP";
                            $sql = "UPDATE users SET login_from=?, app_installed_status =?, verification_code = ? where id = ?";
                            $stmt = $connection->prepare($sql);
                            $stmt->bind_param('ssss', $login_from, $app_status, $verification_code, $user_data['id']);
                            if ($stmt->execute()) {
                                $user_data = WebservicesFunction::getUserData($connection, $user_data['id']);
                                if (!empty($user_data)) {

                                    Custom::deleteUserCache($user_data['is_support_user'], $user_data['user_id'], $mobile, $thin_app_id);
                                    WebservicesFunction::addUserStaticToJson('', $user_data['user_id'], $thin_app_id, $mobile, "LOGIN", "SEND OTP", 'signup_revised');

                                    $response['status'] = 1;
                                    $response['message'] = "Login successfully";
                                	
                                    $response['data'] = $user_data;
                                    $response['data']['username'] = $username;
                                    $option = array(
                                        'username' => $user_data['username'],
                                        'mobile' => $mobile,
                                        'verification' => $verification_code,
                                        'thinapp_id' => $thin_app_id,
                                        'HASH_KEY' => $HASH_KEY
                                    );
                                    $verification_data = $option;

                                } else {
                                    $connection->rollback();
                                    $response['status'] = 0;
                                    $response['message'] = "Sorry user could not login";
                                }

                            } else {
                                $response['status'] = 1;
                                $response['message'] = "Sorry login fail";
                            }
                        }

                    }


                } catch (Exception $e) {
                    $connection->rollback();
                }

            }

            Custom::sendResponse($response);
            if (!empty($verification_data) && $login_from == "DOCTOR_APP") {
                /* this function send otp and send process in backround*/
                Custom::send_process_to_background();
            	if($send_otp_sms===true){
                    Custom::send_otp($verification_data);
                }

                /*if (!empty($package_name) && isset($user_data['role_id']) && $user_data['role_id'] == 5) {
                    $sql = "UPDATE thinapps SET package_name = ?, apk_url = ? where id = ?";
                    $apk_url = Custom::create_playstor_url($package_name);
                    $stmt = $connection->prepare($sql);
                    $stmt->bind_param('sss', $package_name, $apk_url, $thin_app_id);
                    $stmt->execute();
                    $connection->commit();
                    WebservicesFunction::deleteJson(array("get_app_enabled_functionality_$thin_app_id"), 'permission');
                }*/
            }
            if (!empty($verification_data) && $switch_success === true && $login_from == "MENGAGE") {
                /* this function send otp and send process in backround*/
                Custom::send_process_to_background();

                if (!empty($package_name) && isset($user_data['role_id']) && $user_data['role_id'] == 5) {
                    $sql = "UPDATE thinapps SET package_name = ?, apk_url = ? where id = ?";
                    $apk_url = Custom::create_playstor_url($package_name,$thin_app_id);
                    $stmt = $connection->prepare($sql);
                    $stmt->bind_param('sss', $package_name, $apk_url, $thin_app_id);
                    $stmt->execute();
                    $connection->commit();
                    WebservicesFunction::deleteJson(array("get_app_enabled_functionality_$thin_app_id"), 'permission');
                }

                $res = Custom::update_topic_token($thin_app_id, $switch_thin_app_id, $user_data['firebase_token']);
                if (!empty($verification_data)) {
                    WebservicesFunction::SubscribeDefaultChannelsSignIn($verification_data['user_id'], $verification_data['mobile'], $verification_data['thinapp_id']);
                }

            }

            }
        }
        exit();
    }

    public static function verify_account()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $code = isset($data['code']) ? $data['code'] : "";
            $mobile = isset($data['mobile']) ? Custom::create_mobile_number($data['mobile']) : "";
            $device_token = isset($data['device_token']) ? $data['device_token'] : "";
            $device_type = isset($data['device_type']) ? $data['device_type'] : "";
            $firebase_token = isset($data['firebase_token']) ? $data['firebase_token'] : "";
            $device_unique_id = isset($data['device_unique_id']) ? $data['device_unique_id'] : "";
            $username = isset($data['username']) ? $data['username'] : "";
            $main_app_category = isset($data['main_app_category']) ? $data['main_app_category'] : "";
            $d_width = isset($data['d_width']) ? $data['d_width'] : "";
            $d_height = isset($data['d_height']) ? $data['d_height'] : "";

            $verification_data = array();
            $doctor_circle_notification = $mengage_clinic_token =false;

            $app_name = "";
            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user';
            } else if (empty($code)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid code';
            } else if (empty($device_token)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid device token';
            } else if (empty($device_type)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid device type';
            } else if (empty($firebase_token)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid firebase token';
            } else if (empty($username)) {
                $response['status'] = 0;
                $response['message'] = 'Enter username';
            } else {
                try {
                    $connection = ConnectionUtil::getConnection();
                    $query = "select u.firebase_token, u.is_support_user, u.mobile, u.is_verified, u.registration_number, u.education, u.id, u.role_id, u.mobile, u.thinapp_id, u.verification_code,  u.username, u.email, u.image, t.status as app_status , t.name as app_name from users as u join thinapps as t on u.thinapp_id = t.id where u.id =$user_id limit 1 offset 0";
                    $user_data = $connection->query($query);
                    if ($user_data->num_rows) {


                        $user_data = mysqli_fetch_assoc($user_data);

                        $app_name = $user_data['app_name'];

                        if($thin_app_id ==  MENGAGE_CLINIC){
                            $thin_app_id = $user_data['thinapp_id'];
                            $mengage_clinic_token = $firebase_token;
                            $firebase_token = $user_data['firebase_token'];
                        }

                        if ($user_data['app_status'] == 'ACTIVE') {
                            if (($user_data['verification_code'] == $code) || ($user_data['mobile'] == "+917412991122" && $code == "3344")) {
                                $status = 'Y';
                                $install_status = "INSTALLED";
                                $sql = "UPDATE users SET  username =?, is_verified = ?, app_installed_status = ?, device_type =? , device_token = ?, firebase_token=?, device_unique_id =? where  id = ?";
                                $stmt = $connection->prepare($sql);
                                $stmt->bind_param('ssssssss', $username, $status, $install_status, $device_type, $device_token, $firebase_token, $device_unique_id, $user_id);
                                if ($stmt->execute()) {

                                    Custom::deleteUserCache($user_data['is_support_user'], $user_data['id'], $user_data['mobile'], $user_data['thinapp_id']);
                                    WebservicesFunction::addUserStaticToJson('', $user_id, $thin_app_id, $user_data['mobile'], "OTP", "VERIFY OTP", 'verify_account');

                                    $response['status'] = 1;
                                    $response['message'] = "Verification successful";
                                    $response['data']['add_profile'] = "NO";
                                    $response['data']['jira_username'] = JIRA__USERNAME;
                                    $response['data']['jira_password'] = JIRA__PASSWORD;
                                    /*get app functionality data */

                                    $app_data =Custom::get_admin_app_data_by_mobile($user_data['mobile']);
                                    if(!empty($app_data)){
                                        $response['data']['owner_app_name'] = $app_data['name'];
                                        $response['data']['owner_app_logo'] = $app_data['logo'];
                                    }

                                    if($thin_app_id==KIOSK_THINAPP_ID){
                                        if(!empty($app_data['id']) && !empty($app_data['user_id']) && !empty($app_data['category_name'])){
                                            $thin_app_id= $app_data['id'];
                                            $user_id= $app_data['user_id'];
                                            $main_app_category= $app_data['category_name'];
                                            $new_user_data = Custom::get_user_by_id($user_id);
                                            $user_data = !empty($new_user_data)?$new_user_data:$user_data;
                                        }
                                    }
                                    


                                    $response['data']['app_data'] = Custom::get_app_functionality_data($thin_app_id, $user_id, $user_data['mobile'],$main_app_category,$d_height,$d_width);
                                    /*get app functionality data*/


                                    if ($user_data['role_id'] == 5) {
                                        if (empty($user_data['registration_number']) || empty($user_data['education'])) {
                                            if ($main_app_category != "HOSPITAL") {
                                                $response['data']['add_profile'] = "YES";
                                            }
                                        }
                                        if ($user_data['is_verified'] == "N") {
                                            $doctor_circle_notification = true;
                                        }
                                        $response['data']['add_profile'] = "YES";
                                    }


                                    $response['data']['appointment_user_role'] = Custom::get_appointment_role($user_data['mobile'], $user_data['thinapp_id'], $user_data['role_id']);
                                    $response['data']['doctor_id'] = WebservicesFunction::get_staff_id_by_mobile($user_data['mobile'], $user_data['thinapp_id']);
                                    $response['data']['thin_app_id'] = $user_data['thinapp_id'];
                                  
                                    $verification_data = array(
                                        'user_id' => $user_data['id'],
                                        'mobile' => $user_data['mobile'],
                                        'thinapp_id' => $user_data['thinapp_id']
                                    );
                                } else {
                                    $response['status'] = 0;
                                    $response['message'] = "Verification fail";
                                }
                            } else {
                                $response['status'] = 0;
                                $response['message'] = "Unauthentic code";
                            }
                        } else {
                            $response['status'] = 0;
                            $response['message'] = "Invalid app";
                        }
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Invalid user";
                    }

                } catch (Exception $e) {
                    $connection->rollback();
                }
            }

            Custom::sendResponse($response);
            Custom::send_process_to_background();




            if (!empty($verification_data)) {


                $created = Custom::created();
                if(!empty($mengage_clinic_token) && !empty($mobile)){
                    $connection = ConnectionUtil::getConnection();
                    $query = "select id from mengage_clinic_user_tokens as mcut where mcut.user_id =$user_id limit 1";
                    $token_data = $connection->query($query);
                    if ($token_data->num_rows) {
                            $id = mysqli_fetch_assoc($token_data)['id'];
                            $sql = "UPDATE mengage_clinic_user_tokens SET  firebase_token=?, modified =? where  id = ?";
                            $stmt = $connection->prepare($sql);
                            $stmt->bind_param('sss', $mengage_clinic_token, $created, $id);
                            $stmt->execute();
                    }else{
                        $sql = "INSERT INTO mengage_clinic_user_tokens (thinapp_id,  user_id, firebase_token, mobile, created, modified) VALUES (?, ?, ?, ?, ?, ?)";
                        $stmt = $connection->prepare($sql);
                        $stmt->bind_param('ssssss', $thin_app_id, $user_id, $mengage_clinic_token, $mobile, $created, $created);
                        $stmt->execute();
                    }
                }
                if(!empty($user_data)){
                    Custom::delete_user_cache($user_data['mobile'],$user_data['thinapp_id']);
                    Custom::deleteUserCache($user_data['is_support_user'], $user_data['id'], $user_data['mobile'], $user_data['thinapp_id']);
                }

                WebservicesFunction::SubscribeDefaultChannelsSignIn($verification_data['user_id'], $verification_data['mobile'], $verification_data['thinapp_id']);
            }



        }
        exit();
    }


    public static function resend_code()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $resend_by = isset($data['resend_by']) ? $data['resend_by'] : "SMS";
            $HASH_KEY = isset($data['HASH_KEY']) ? $data['HASH_KEY'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid  device ';
            } else {
                $user_data = Custom::get_user_by_mobile($thin_app_id, $mobile);
                if (!empty($user_data)) {
                    $option = array(
                        'username' => $user_data['username'],
                        'mobile' => $mobile,
                        'verification' => $user_data['verification_code'],
                        'thinapp_id' => $thin_app_id,
                        'HASH_KEY' => $HASH_KEY
                    );
                    if (Custom::send_otp($option, $resend_by)) {
                        WebservicesFunction::addUserStaticToJson('', $user_data['id'], $thin_app_id, $mobile, "OTP", "RESEND OTP", 'resend_code');

                        $response['status'] = 1;
                        $response['message'] = "Verification code resent successfully";
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Verification code could not resent";
                    }
                } else {
                    $response['status'] = 0;
                    $response['message'] = "Invalid user";
                }
            }
            Custom::sendResponse($response);

        }
        exit();

    }


    public static function refresh_subscriber_topic_login()
    {
        ignore_user_abort(true);
        set_time_limit(0);
        $response['status'] = 1;
        $response['message'] = "Success";
        echo json_encode($response);
        Custom::send_process_to_background();
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $role_id = isset($data['role_id']) ? $data['role_id'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else if (empty($role_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid role';
            } else {

                if ($role_id == 1) {
                    $response = $response_data = array();
                    $connection = ConnectionUtil::getConnection();
                    $query = "select c.status, c.topic_name, u.firebase_token, t.firebase_server_key from subscribers as sub join channels as c on c.id = sub.channel_id join users as u on sub.app_user_id = u.id join thinapps as t on t.id = sub.app_id where sub.app_user_id = $user_id and sub.mobile = '$mobile' and sub.status = 'SUBSCRIBED' and c.status = 'Y' and sub.app_id =$thin_app_id group by c.id";
                    $subscriber = $connection->query($query);
                    if ($subscriber->num_rows) {
                        $topic_name_list = mysqli_fetch_all($subscriber, MYSQLI_ASSOC);
                        $filed = array();
                        if (!empty($topic_name_list)) {
                            $mh = curl_multi_init();
                            $handles = array();
                            foreach ($topic_name_list as $key => $subscriber) {
                                if (!empty(FIREBASE_KEY) && !empty($subscriber['firebase_token'])) {
                                    $server_key = FIREBASE_KEY;
                                    $path_to_firebase_cm = 'https://iid.googleapis.com/iid/v1:batchAdd';
                                    $fields = array(
                                        'to' => '/topics/' . $subscriber['topic_name'],
                                        'registration_tokens' => array($subscriber['firebase_token']),
                                    );
                                    $headers = array(
                                        'Authorization:key=' . $server_key,
                                        'Content-Type:application/json'
                                    );
                                    $ch = curl_init();
                                    $handles[] = $ch;
                                    curl_setopt($ch, CURLOPT_URL, $path_to_firebase_cm);
                                    curl_setopt($ch, CURLOPT_POST, true);
                                    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
                                    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
                                    curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($fields));
                                    curl_multi_add_handle($mh, $ch);
                                }
                            }
                            $running = null;
                            do {
                                curl_multi_exec($mh, $running);
                            } while ($running);

                            foreach ($handles as $ch) {
                                $result = curl_multi_getcontent($ch);
                                curl_multi_remove_handle($mh, $ch);
                                curl_close($ch);
                            }

                            $response['status'] = 1;
                            $response['message'] = "Token Refresh";

                        }


                    } else {
                        $response['status'] = 0;
                        $response['message'] = "No address list found";
                    }
                }
            }
            echo json_encode($response);
            die;
        } else {
            exit();
        }
    }

    public static function check_app_version()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
        	$role_id = isset($data['role_id']) ? $data['role_id'] : "0";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $version_name = isset($data['version_name']) ? $data['version_name'] : "";
            $app_version_name = isset($data['app_version_name']) ? $data['app_version_name'] : "";
            $device_id = $device_unique_id = isset($data['device_id']) ? $data['device_id'] : "";
            $is_data_insert = isset($data['is_data_insert']) ? $data['is_data_insert'] : "NO";
            $check_active_status = isset($data['check_active_status']) ? $data['check_active_status'] : "NO";
            $modal_name = isset($data['modal_name']) ? $data['modal_name'] : "";
            $imei = isset($data['imei']) ? $data['imei'] : "";
            $os = isset($data['os']) ? $data['os'] : "";
            $operator_name = isset($data['operator_name']) ? $data['operator_name'] : "";
            $cpu = isset($data['cpu']) ? $data['cpu'] : "";
            $ram = isset($data['ram']) ? $data['ram'] : "";
            $google_email = isset($data['google_email']) ? $data['google_email'] : "";
            $mobile_number = isset($data['mobile_number']) ? $data['mobile_number'] : "";
            $brand_name = isset($data['brand_name']) ? $data['brand_name'] : "";
        	$mengage_app = isset($data['mengage_app']) ? $data['mengage_app'] : "NO";


            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($version_name)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid version';
            } else {
                try {

                    /* the valid app mean code to check grater than 2.5.0 version apps */
                    $valid_app = ($app_version_name >= '2.5.0') ? true : false;
                    $connection = ConnectionUtil::getConnection();
                    if ($valid_app === true && !empty($device_unique_id) && $is_data_insert == 'YES') {
                        $login_device_id = 0;
                        $device_data = Custom::get_device_data($device_unique_id);
                        $created = Custom::created();
                        if (empty($device_data)) {
                            $sql = "INSERT INTO user_devices (email, mobile, brand_name, device_id, imei, modal_name, os, cpu, ram, operator_name, created, modified) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                            $stmt_ms = $connection->prepare($sql);
                            $stmt_ms->bind_param('ssssssssssss', $google_email, $mobile_number, $brand_name, $device_unique_id, $imei, $modal_name, $os, $cpu, $ram, $operator_name, $created, $created);
                            if ($stmt_ms->execute()) {
                                $login_device_id = $stmt_ms->insert_id;
                            }
                        } else {
                            $login_device_id = $device_data['id'];
                            $sql = "UPDATE user_devices SET  email=?, mobile=?, brand_name=?, imei =?, modal_name = ?, os = ?, cpu =? , ram = ?, operator_name=?, modified =? where  id = ?";
                            $stmt = $connection->prepare($sql);
                            $stmt->bind_param('sssssssssss', $google_email, $mobile_number, $brand_name, $imei, $modal_name, $os, $cpu, $ram, $operator_name, $created, $login_device_id);
                            $stmt->execute();

                        }
                        if (!empty($login_device_id) && $login_device_id > 0) {
                            $user_data = Custom::get_user_by_id($user_id);
                            $status = 'INACTIVE';
                            $sql = "UPDATE user_login_device_stats SET  status =?, modified =? where  user_device_id =? AND thinapp_id = ?";
                            $stmt = $connection->prepare($sql);
                            $stmt->bind_param('ssss', $status, $created, $login_device_id, $thin_app_id);
                            $stmt->execute();

                            $sql = "INSERT INTO user_login_device_stats (thinapp_id, user_device_id, role_id, user_id, firebase_token, created, modified) VALUES (?, ?, ?, ?, ?, ?, ?)";
                            $stmt_ms = $connection->prepare($sql);
                            $stmt_ms->bind_param('sssssss', $thin_app_id, $login_device_id, $user_data['role_id'], $user_id, $user_data['firebase_token'], $created, $created);
                            $stmt_ms->execute();
                        }
                    }

                    if (!$user_data = json_decode(WebservicesFunction::readJson('app_version_' . $thin_app_id, 'version'), true)) {

                        $query = "select t.version_name from thinapps as t where t.id =$thin_app_id limit 1";
                        $user_data = $connection->query($query);
                        if ($user_data->num_rows) {
                            $user_data = mysqli_fetch_assoc($user_data);
                            WebservicesFunction::createJson('app_version_' . $thin_app_id, json_encode($user_data), "CREATE", 'version');
                        }
                    }

                    if (!$support_data = json_decode(WebservicesFunction::readJson('support_user'), true)) {

                        $query = "select id from users  where is_support_user = 'YES' AND thinapp_id = " . DOCTOR_FACTORY_APP_ID;
                        $support_data = $connection->query($query);
                        if ($support_data->num_rows) {
                            $support_data = array_column(mysqli_fetch_all($support_data, MYSQLI_ASSOC), 'id');
                            WebservicesFunction::createJson('support_user', json_encode($support_data), "CREATE");
                        }else{
                        	$support_data = array();
                        }
                    }
                    $response['is_support_user'] = "NO";
                    $response['chat_reference'] = "SUPPORT_" . $thin_app_id;
                    if (!empty($support_data) && in_array($user_id, $support_data) && $thin_app_id == DOCTOR_FACTORY_APP_ID) {
                        $response['is_support_user'] = "YES";
                    }

                    $response['active_login'] = "ACTIVE";
                    if ($valid_app === true && $check_active_status == 'YES') {
                        $login_user_data = Custom::get_user_by_id($user_id);
                        if (!empty($login_user_data) && $login_user_data['login_from'] == "DOCTOR_APP") {
                            $file = "active_" . $user_id . "_" . $device_id;
                            if (!$valid_data = json_decode(WebservicesFunction::readJson($file, 'login_users'), true)) {
                                $query = "select ulds.thinapp_id, ud.device_id, ulds.status from user_login_device_stats as ulds join user_devices as ud on ud.id = ulds.user_device_id and ud.device_id='$device_id' where ulds.status ='ACTIVE' and ulds.user_id = $user_id and  ulds.thinapp_id = $thin_app_id";
                                $valid_user_data = $connection->query($query);
                                if ($valid_user_data->num_rows) {
                                    $valid_data = mysqli_fetch_assoc($valid_user_data);
                                    WebservicesFunction::createJson($file, json_encode($valid_data), "CREATE", 'login_users');
                                    $response['active_login'] = "ACTIVE";
                                } else {
                                    $response['active_login'] = "INACTIVE";
                                }
                            } else {
                                $response['active_login'] = "ACTIVE";
                            }
                        }
                    }


                    if (!empty($user_data)) {
                    	$check_version = $user_data['version_name'];
                        if($mengage_app=="YES"){
                            $menage_thin_app = MENGAGE_APP_ID;
                            if (!$menage_app_data = json_decode(WebservicesFunction::readJson('app_version_' . $menage_thin_app, 'version'), true)) {
                                $query = "select t.version_name from thinapps as t where t.id =$menage_thin_app limit 1";
                                $menage_app_data = $connection->query($query);
                                if ($menage_app_data->num_rows) {
                                    $menage_app_data = mysqli_fetch_assoc($menage_app_data);
                                    $check_version = $menage_app_data['version_name'];
                                    WebservicesFunction::createJson('app_version_' . $menage_thin_app, json_encode($menage_app_data), "CREATE", 'version');
                                }
                            }else{
                                $check_version = $menage_app_data['version_name'];
                            }
                        }
                        if ($check_version == $version_name) {
                            $response['status'] = 1;
                            $response['data']['status'] = 1;
                            $response['message'] = "App is up to date";
                        } else {
                            $response['status'] = 1;
                            $response['data']['status'] = 0;
                            $response['message'] = "Your app is not updated";
                        }
                    } else {
                        $response['status'] = 0;
                        $response['data']['status'] = 0;
                        $response['message'] = "Invalid app";
                    }
                } catch (Exception $e) {
                    $connection->rollback();
                }

            }


            $app_status = 'ACTIVE';
            if (!$app_data = WebservicesFunction::readJson('get_app_enabled_functionality_' . $thin_app_id, 'permission')) {
                $connection = ConnectionUtil::getConnection();
                $query = "select status from thinapps where id =  $thin_app_id";
                $app = $connection->query($query);
                if ($app->num_rows) {
                    $app_status = mysqli_fetch_assoc($app)['status'];
                }
            }else{
                $app_status = $app_data['data']['app_status'];
            }

            if($app_status=='INACTIVE'){
                $response['is_maintenance'] = 'YES';
                $response['maintenance_message'] = 'Sorry this app has been unpublished by developers';
            }else{
                $response['is_maintenance'] = SERVICE_ON_MAINTENANCE;
                $response['maintenance_message'] = MAINTENANCE_MESSAGE;
            }



            Custom::sendResponse($response);
        }
        exit();
    }


    public static function add_subscriber_revised($data = null, $return_type = false)
    {
        if (empty($data)) {
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);
        }


        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $country_code = isset($data['country_code']) ? $data['country_code'] : "";
            $channel_id = isset($data['channel_id']) ? $data['channel_id'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $contacts = isset($data['contacts']) ? $data['contacts'] : "";
            $names = isset($data['names']) ? $data['names'] : array();
            $email = isset($data['email']) ? $data['email'] : array();
            $background_data = array();

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($channel_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid channel id';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($contacts)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid contacts';
            } else if (empty($country_code)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid country code';
            } else {
                try {
                    $number_list = $name_list = $email_list = array();
                    $total_invalid_number = $total_duplicate_number = $total_csv_duplicate_number = 0;
                    foreach ($contacts as $key => $mobile) {
                        $mobile = Custom::create_mobile_number($mobile, $country_code);
                        if ($mobile) {
                            $number_list[] = $mobile;
                            $name_list[$mobile] = @$names[$key] . '###' . @$email[$key];

                        } else {
                            $total_invalid_number++;
                        }
                    }
                    if (!empty($number_list)) {
                        unset($contacts);
                        $contacts = implode(",", $number_list);
                        $connection = ConnectionUtil::getConnection();
                        $subscriber_list = array();
                        $subscriber_data_list = array();
                        $already_user_list = array();

                        /* get subscriber list for this channel and app*/
                        $query = "select s.id, s.status, s.mobile from subscribers as s  where s.mobile IN ( $contacts ) and s.channel_id = $channel_id and s.app_id = $thin_app_id";
                        $subscriber_data = $connection->query($query);
                        $connection->autocommit(FALSE);
                        if ($subscriber_data->num_rows) {
                            $subscriber_data = mysqli_fetch_all($subscriber_data, MYSQLI_ASSOC);
                            $subscriber_list = array_column($subscriber_data, 'id', 'mobile');
                        }

                        /* get register user id from number */
                        $query = "select u.id, u.mobile from users as u  where u.mobile IN ( $contacts ) and u.thinapp_id = $thin_app_id";
                        $user_data = $connection->query($query);
                        $connection->autocommit(FALSE);
                        if ($user_data->num_rows) {
                            $user_data = mysqli_fetch_all($user_data, MYSQLI_ASSOC);
                            $already_user_list = array_column($user_data, 'id', 'mobile');
                        }

                        $channel_data = WebservicesFunction::get_channel_by_id($channel_id);
                        $total_record_insert = 0;
                        $list_array = array();
                        $send_sms_number = array();
                        $send_notification_user_ids = array();
                        foreach ($number_list as $key => $mobile) {

                            $app_user_id = 0;
                            if (array_key_exists($mobile, $already_user_list)) {
                                $app_user_id = $already_user_list[$mobile];
                            }
                            $status = "SUBSCRIBED";
                            $created = Custom::created();
                            if (!array_key_exists($mobile, $subscriber_list)) {
                                if (!in_array($mobile, $send_sms_number)) {
                                    $tmp = explode('###', $name_list[$mobile]);
                                    $name = $tmp[0];
                                    $email = $tmp[1];

                                    $sql = "INSERT INTO subscribers (email,name,channel_id, user_id, app_user_id, app_id, mobile, status, created, modified) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                                    $stmt = $connection->prepare($sql);
                                    $stmt->bind_param('ssssssssss', $email, $name, $channel_id, $channel_data['user_id'], $app_user_id, $thin_app_id, $mobile, $status, $created, $created);
                                    $stmt->execute();
                                    $send_sms_number[] = $mobile;
                                    if ($app_user_id > 0) {
                                        $send_notification_user_ids[] = $app_user_id;
                                        $list_array[$total_record_insert]['username'] = "";
                                        $list_array[$total_record_insert]['user_image'] = "";
                                        $list_array[$total_record_insert]['user_id'] = $app_user_id;
                                    }
                                    $list_array[$total_record_insert]['subscriber_id'] = $stmt->insert_id;
                                    $list_array[$total_record_insert]['channel_id'] = $channel_id;
                                    $list_array[$total_record_insert]['channel_name'] = $channel_data['channel_name'];
                                    $list_array[$total_record_insert]['channel_image'] = $channel_data['image'];
                                    $total_record_insert++;
                                } else {
                                    $total_csv_duplicate_number++;
                                }

                            } else {
                                $send_notification_user_ids[] = $app_user_id;
                                $sql = "UPDATE  subscribers SET status = ?, modified = ? where id = ?";
                                $stmt = $connection->prepare($sql);
                                $stmt->bind_param('sss', $status, $created, $subscriber_list[$mobile]);
                                $stmt->execute();
                                if ($app_user_id == 0) {
                                    $send_sms_number[] = $mobile;
                                } else {
                                    $send_notification_user_ids[] = $app_user_id;
                                    $list_array[$total_record_insert]['username'] = "";
                                    $list_array[$total_record_insert]['user_image'] = "";
                                    $list_array[$total_record_insert]['user_id'] = $app_user_id;
                                }
                                $list_array[$total_record_insert]['subscriber_id'] = $stmt->insert_id;
                                $list_array[$total_record_insert]['channel_id'] = $channel_id;
                                $list_array[$total_record_insert]['channel_name'] = $channel_data['channel_name'];
                                $list_array[$total_record_insert]['channel_image'] = $channel_data['image'];
                                $total_duplicate_number++;

                            }

                        }
                        if ($total_record_insert > 0) {
                            $app_data = Custom::getThinAppData($thin_app_id);

                            $message = "Welcome to " . $app_data['name'] . " app !\nApp Features :-\n* Book appointment\n* Upload and share medical reports\n* Chat with doctor\n* Get news letter from doctor\n * Daily health tips";
                            if (Custom::check_module_enable_permission($thin_app_id, 'VACCINATION') == "YES") {
                                $message .= "\n* Get vaccination reminder of your child \n* Track your child growth";
                            }

                            $message .= "\n For more ";
                            $background_data['message'] = $message;
                            $background_data['mobile'] = $send_sms_number;
                            $background_data['user_id'] = $user_id;
                            $background_data['thinapp_id'] = $thin_app_id;


                            $option = array(
                                'thinapp_id' => $thin_app_id,
                                'channel_id' => $channel_id,
                                'role' => "USER",
                                'flag' => 'SUBSCRIBE',
                                'title' => "New Subscriber Request",
                                'message' => mb_strimwidth("Subscriber - " . $message, 0, 80, '...'),
                                'description' => mb_strimwidth($message, 0, 250, '...'),
                                'chat_reference' => '',
                                'module_type' => 'SUBSCRIBE',
                                'module_type_id' => 0,
                                'firebase_reference' => ""
                            );

                            $background_data['notification']['data'] = $option;
                            $background_data['notification']['user_ids'] = $send_notification_user_ids;
                            $background_data['notification']['topic_name'] = $channel_data['topic_name'];


                            $response['status'] = 1;
                            $message = "";
                            if ($total_record_insert > 0) {
                                $numb_lbl = ($total_record_insert > 1) ? " numbers " : " number ";
                                $message = " Total $total_record_insert new $numb_lbl subscribed ";
                            }
                            if ($total_duplicate_number > 0) {
                                $comma = !empty($message) ? "," : "";
                                $dup_lbl = ($total_duplicate_number > 1) ? " numbers " : " number ";
                                $message .= "$comma $total_duplicate_number $dup_lbl already subscribed ";
                            }

                            if ($total_invalid_number > 0) {
                                $comma = !empty($message) ? "," : "";
                                $inb_lbl = ($total_invalid_number > 1) ? " numbers " : " number ";
                                $message .= "$comma $total_invalid_number $inb_lbl not in correct format ";
                            }

                            if ($total_csv_duplicate_number > 0) {
                                $comma = !empty($message) ? "," : "";
                                $csv_lbl = ($total_csv_duplicate_number > 1) ? " numbers " : " number ";
                                $message .= "$comma $total_csv_duplicate_number $csv_lbl found duplicate into csv ";
                            }

                            $response['message'] = $message;
                            $connection->commit();

                            WebservicesFunction::addUserStaticToJson('', $user_id, $thin_app_id, $mobile, "SUBSCRIBER", "ADD SUBSCRIBER", 'add_subscriber_revised');

                        } else {
                            $response['status'] = 0;
                            if (count($number_list) == 1) {
                                $response['message'] = "Number already subscribed";
                            } else if (count($number_list) == 2) {
                                $response['message'] = "Both numbers are already subscribed";
                            } else {
                                $response['message'] = "All numbers are already subscribed";
                            }

                        }

                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Invalid number list";
                    }
                } catch (Exception $e) {
                    $connection->rollback();
                }

            }

            if (!empty($background_data)) {
                Custom::SendBlukSmsToNumbers($background_data['thinapp_id'], $background_data['message'], $background_data['mobile'], $background_data['user_id']);
                if (!empty($send_notification_user_ids)) {
                    $user_ids = $background_data['notification']['user_ids'];
                    //Custom::send_notification_by_user_id($background_data['notification']['data'], $user_ids, $thin_app_id);
                    //Custom::add_subscribers_to_topic($background_data['notification']['topic_name'], array(), $send_notification_user_ids);
                    foreach ($user_ids as $key => $id) {
                        $file_name_array[] = "get_subscriber_list_app" . $thin_app_id . "_user" . $id;
                    }
                    WebservicesFunction::deleteJson($file_name_array);
                }
            }

            if ($return_type == true) {
                return json_encode($response);
            } else {
                Custom::sendResponse($response);
            }

        }
        exit();

    }


    public static function update_subscription_status_revised()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $channel_id = isset($data['channel_id']) ? $data['channel_id'] : "";
            $app_user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $status = isset($data['status']) ? $data['status'] : "";
            $background_data = array();

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($channel_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid channel id';
            } else if (empty($app_user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else if (empty($status)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid status';
            } else {
                try {


                    $connection = ConnectionUtil::getConnection();
                    $query = "select s.id, s.app_user_id from subscribers as s  where s.app_user_id = $app_user_id and s.channel_id = $channel_id and s.app_id = $thin_app_id limit 1";
                    $subscriber_data = $connection->query($query);
                    $channel_data = Custom::get_channel_and_subscriber_count($channel_id);
                    if (!empty($channel_data)) {
                        if (!$subscriber_data->num_rows) {
                            $status = "SUBSCRIBED";
                            $created = Custom::created();
                            $sql = "INSERT INTO subscribers (channel_id, user_id, app_user_id, app_id, mobile, status, created, modified) VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
                            $stmt = $connection->prepare($sql);
                            $stmt->bind_param('ssssssss', $channel_id, $channel_data['user_id'], $app_user_id, $thin_app_id, $mobile, $status, $created, $created);
                            if ($stmt->execute()) {
                                $response_data[] = WebservicesFunction::fun_get_subscriber_list($thin_app_id, $app_user_id, PAGINATION_LIMIT, 0);
                                WebservicesFunction::createJson('get_subscriber_list_app' . $thin_app_id . "_user" . $app_user_id, $response_data, 'CREATE', 'subscriber');
                                $response['status'] = 1;
                                $response['message'] = "Subscriber add successfully";
                                $background_data['user_id'] = $app_user_id;
                                $background_data['status'] = $status;
                                $background_data['topic_name'] = $channel_data['topic_name'];
                            }
                        } else {
                            $subscriber_data = mysqli_fetch_assoc($subscriber_data);
                            $created = Custom::created();
                            $sql = "UPDATE  subscribers SET status = ?, modified = ? where id = ?";
                            $stmt = $connection->prepare($sql);
                            $stmt->bind_param('sss', $status, $created, $subscriber_data['id']);
                            if ($stmt->execute()) {
                                $response['status'] = 1;
                                if ($status == "SUBSCRIBED") {
                                    $response['message'] = "Subscribered  successfully";
                                } else {
                                    $response['message'] = "Unsubscribered successfully";
                                }
                                $background_data['user_id'] = $app_user_id;
                                $background_data['status'] = $status;
                                $background_data['topic_name'] = $channel_data['topic_name'];
                                $response_data[] = WebservicesFunction::fun_get_subscriber_list($thin_app_id, $app_user_id, PAGINATION_LIMIT, 0);
                                WebservicesFunction::createJson('get_subscriber_list_app' . $thin_app_id . "_user" . $app_user_id, $response_data, 'CREATE', 'subscriber');
                            }
                        }
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Invalid channel";
                    }

                } catch (Exception $e) {
                    $connection->rollback();
                }

            }
            Custom::sendResponse($response);
            if (!empty($background_data)) {
                Custom::send_process_to_background();
                if ($background_data['status'] == 'SUBSCRIBED') {
                    Custom::add_subscribers_to_topic($background_data['topic_name'], array(), array($background_data['user_id']));
                } else if ($background_data['status'] == 'UNSUBSCRIBED') {
                    Custom::remove_subscribers_from_topic($background_data['topic_name'], array(), array($background_data['user_id']));
                }
            }

        }
        exit();

    }


    public static function add_message_revised($data = null)
    {

        if (empty($data)) {
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);
        }


        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $channel_id = isset($data['channel_id']) ? $data['channel_id'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $role_id = isset($data['role_id']) ? $data['role_id'] : "";
            $title = isset($data['title']) ? $data['title'] : "";
            $message = isset($data['message']) ? $data['message'] : "";
            $text_color = isset($data['text_color']) ? $data['text_color'] : 0;
            $background_color = isset($data['background_color']) ? $data['background_color'] : 0;
            $original_filename = isset($data['original_filename']) ? $data['original_filename'] : "";
            $message_type = isset($data['message_type']) ? $data['message_type'] : "";
            $message_file_url = isset($data['message_file_url']) ? $data['message_file_url'] : "";
            $short_url = isset($data['short_url']) ? $data['short_url'] : "";
            $thumb_url = isset($data['thumb_url']) ? $data['thumb_url'] : "";
            $app_category = isset($data['main_app_category']) ? $data['main_app_category'] : "";
            $tags = isset($data['tags']) ? $data['tags'] : "";
            $sendPnTo = isset($data['send_pn_to']) ? $data['send_pn_to'] : "";


            $background_data = array();

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($channel_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid channel id';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($message) && empty($message_file_url)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid message';
            } else if (empty($message_type)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid message type';
            } else {
                try {
                    $send_message = true;
                    $is_collaborator = false;
                    $first_image_url = "";
                    $channel_data_with_sub_count = Custom::get_channel_and_subscriber_count($channel_id);
                    if (!empty($channel_data_with_sub_count)) {

                        if ($app_category == "HOSPITAL") {
                            $send_message = true;
                        } else {
                            if ($channel_data_with_sub_count['user_id'] != $user_id) {
                                $is_collaborator = Custom::is_collobrator_for_channel($user_id, $channel_id, $thin_app_id);
                                if (!$is_collaborator) {
                                    $send_message = false;
                                }
                            }
                        }


                        if ($send_message === true) {

                            $connection = ConnectionUtil::getConnection();
                            $connection->autocommit(FALSE);
                            $created = Custom::created();
                            $multiple_image = "NO";
                            $tmp_array = array();
                            if (is_array($message_file_url)) {
                                if (count($message_file_url) <= 1) {
                                    if (!empty($message_file_url[0]['message_file_url'])) {
                                        $message_file_url = $first_image_url=  Custom::check_image_path_string($message_file_url[0]['message_file_url']);
                                    } else {
                                        $message_file_url = "";
                                    }
                                } else {
                                    $tmp_array = array();
                                    foreach ($message_file_url as $key => $file) {
                                        $path = $file['message_file_url'];
                                        if (Custom::check_image_path_string($path)) {
                                            if($key==0){
                                                $first_image_url = $path;
                                            }
                                            $original_filename = $file['original_filename'];
                                            $type = Custom::getFileType($path);
                                            $tmp_array[] = $type . "##" . $original_filename . "##" . $path;
                                        }
                                    }
                                    if (count($message_file_url) == count($tmp_array)) {
                                        $message_file_url = implode(",", $tmp_array);
                                        $message_type = 'IMAGE';
                                        $multiple_image = "YES";
                                    } else {
                                        $message_file_url = false;
                                    }

                                }
                            }
                            if ($message_file_url !== false) {

                                $sql = "INSERT INTO messages (title, text_color, background_color,  owner_user_id, channel_id, message, original_filename,  message_type, message_file_url, short_url, thumb_url, thinapp_id, multiple_image, created, modified) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                                $stmt = $connection->prepare($sql);
                                $stmt->bind_param('sssssssssssssss', $title, $text_color, $background_color, $user_id, $channel_id, $message, $original_filename, $message_type, $message_file_url, $short_url, $thumb_url, $thin_app_id, $multiple_image, $created, $created);
                                if ($stmt->execute()) {
                                    $message_id = $stmt->insert_id;
                                    /* add messge to channel Message table*/
                                    $sql = "INSERT INTO channel_messages (message_id, channel_id, created, modified) VALUES (?, ?, ?, ?)";
                                    $cm_stmt = $connection->prepare($sql);
                                    $cm_stmt->bind_param('ssss', $message_id, $channel_id, $created, $created);

                                    /* add row to message sttice table*/
                                    $sql = "INSERT INTO message_statics (message_id) VALUES (?)";
                                    $ms_stmt = $connection->prepare($sql);
                                    $ms_stmt->bind_param('s', $message_id);

                                    /* this code update coins for this user */
                                    $updateCoin = Custom::updateCoins('POST', $user_id, $user_id, $message_id, $thin_app_id, 0);

                                    if ($cm_stmt->execute() && $ms_stmt->execute() && $updateCoin) {
                                        $response['status'] = 1;
                                        $response['message'] = "Message add successfully";
                                        $connection->commit();
                                        WebservicesFunction::addUserStaticToJson('', $user_id, $thin_app_id, $mobile, "DOCTORS BLOG", "POST_MESSAGE", 'add_message_revised');

                                        $channel_name = $channel_data_with_sub_count['channel_name'];
                                        if (empty(trim($message))) {
                                            $message = " New Message by " . $channel_name;
                                        } else {

                                            if ($message_type != "TEXT") {
                                                $message = " New Message by " . $channel_name;
                                            }
                                        }
                                        /* send notification to channel subscriber*/
                                        if (!empty($first_image_url)) {
                                            $message_file_url = $first_image_url;
                                        }
                                        $sendArray = array(
                                            'channel_id' => $channel_id,
                                            'thinapp_id' => $thin_app_id,
                                            'flag' => 'NEWPOST',
                                            'title' => 'New Message by ' . $channel_name,
                                            'message' => mb_strimwidth($title, 0, 250, '...'),
                                            'description' => '',
                                            'chat_reference' => '',
                                            'type' => $message_type,
                                            'file_path_url' => $first_image_url,
                                            'module_type' => 'MESSAGE',
                                            'module_type_id' => $message_id,
                                            'firebase_reference' => ""
                                        );
                                        $background_data['notification']['data'] = $sendArray;
                                        $background_data['notification']['topic_name'] = $channel_data_with_sub_count['topic_name'];
                                        $total_sms = Custom::get_total_sms_thinapp($thin_app_id, 'T');
                                        //$subscriber_count = $channel_data_with_sub_count['subscriber_count'];
                                        $subscriber_count = Custom::get_thin_app_follower_number_by_tags($thin_app_id,$tags,$sendPnTo,$channel_id);
                                        if (sizeof($subscriber_count) <= $total_sms) {
                                            $sms_message = $message;
                                            $user_role = $channel_data_with_sub_count['owner_role_id'];
                                            $is_permission = Custom::check_user_permission($thin_app_id, 'POST_SEND_NOTIFICATION_VIA_SMS');
                                            if ($user_role == 5 || $is_permission == "YES" || $is_collaborator !== false) {
                                                if (empty(trim($message))) {
                                                    $sms_message = $channel_name . " - New Message";
                                                } else {

                                                    if ($message_type != "TEXT") {
                                                        $sms_message = $channel_name . " - New Message " . $message_file_url . " ";
                                                    }
                                                }
                                                $sms_message = mb_strimwidth($sms_message, 0, 250, ' for more ');
                                                $background_data['sms']['message'] = $sms_message;
                                                $background_data['sms']['channel_id'] = $channel_id;
                                                $background_data['sms']['user_id'] = $user_id;
                                                $background_data['sms']['thinapp_id'] = $thin_app_id;
                                            }
                                        }

                                    } else {
                                        $response['status'] = 0;
                                        $response['message'] = "Unable to post message";
                                        $connection->rollback();
                                    }
                                } else {
                                    $response['status'] = 0;
                                    $response['message'] = "Unable to post message";
                                }
                            } else {
                                $response['status'] = 0;
                                $response['message'] = "File could not upload";
                            }

                        } else {
                            $response['status'] = 0;
                            $response['message'] = "Sorry, you are not authorized to post";
                        }
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Invalid channel";
                    }


                } catch (Exception $e) {
                    $connection->rollback();
                }
            }
            Custom::sendResponse($response);
            if (!empty($background_data)) {
                Custom::send_process_to_background();




                if (array_key_exists("notification", $background_data)) {
                    $all_tokens =array();
                    $follower_token = Custom::get_thin_app_follower_user_token_by_tags($thin_app_id, $tags, $sendPnTo);
                    if (!empty($follower_token)) {
                        $all_tokens = $follower_token;
                    }
                    $active_tokens = Custom::get_app_active_token($thin_app_id);
                    if (!empty($active_tokens)) {
                        $all_tokens = array_unique(array_merge($all_tokens,$active_tokens));
                    }

                    if(!empty($all_tokens)){
                        Custom::send_notification_via_token($background_data['notification']['data'], $all_tokens, $thin_app_id, false);
                    }

                   // Custom::send_topic_notification($background_data['notification']['data'], $background_data['notification']['topic_name'], $thin_app_id);

                }

                WebservicesFunction::delete_channel_subscriber_cache($channel_id);
                if (array_key_exists("sms", $background_data)) {
                    $data = $background_data['sms'];
                    $mobile_list = $subscriber_count;
                    //Custom::get_unregistered_subscriber_number_new($data['channel_id'], $data['thinapp_id']);
                    if (!empty($mobile_list)) {
                        Custom::SendBlukSmsToNumbers($data['thinapp_id'], $data['message'], $mobile_list, $data['user_id']);
                    }
                }




            }
        }
        exit();

    }


    public static function delete_subscriber()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $subscriber_id = isset($data['subscriber_id']) ? $data['subscriber_id'] : "";
            $app_user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $background_data = array();

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($subscriber_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid subscriber id';
            } else if (empty($app_user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else {
                try {

                    $connection = ConnectionUtil::getConnection();
                    $status = "UNSUBSCRIBED";
                    $query = "select s.id, s.app_user_id from subscribers as s where s.id = $subscriber_id limit 1";
                    $subscriber_data = $connection->query($query);
                    if ($subscriber_data->num_rows) {
                        $subscriber_data = mysqli_fetch_assoc($subscriber_data);
                        $created = Custom::created();
                        $sql = "UPDATE  subscribers SET status = ?, modified = ? where id = ?";
                        $stmt = $connection->prepare($sql);
                        $stmt->bind_param('sss', $status, $created, $subscriber_data['id']);
                        if ($stmt->execute()) {
                            $app_user_id = $subscriber_data['app_user_id'];
                            $response_data[] = WebservicesFunction::fun_get_subscriber_list($thin_app_id, $app_user_id, PAGINATION_LIMIT, 0);
                            WebservicesFunction::createJson('get_subscriber_list_app' . $thin_app_id . "_user" . $app_user_id, $response_data, 'CREATE', 'subscriber');
                            $response['status'] = 1;
                            $response['message'] = "Subscriber deleted successfully";
                        }
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Invalid subscriber";
                    }
                } catch (Exception $e) {
                    $connection->rollback();
                }

            }
            Custom::sendResponse($response);
        }
        exit();

    }

    public static function get_admin_subscriber_list()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $channel_id = isset($data['channel_id']) ? $data['channel_id'] : "";


            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($channel_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid channel ';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else {
                try {
                    // $query = "select if((select username from users as u where u.id = s.app_user_id limit 1) <> '', (select username from users as u where u.id = s.app_user_id limit 1 ), s.mobile) as name, s.id, s.mobile from subscribers as s where s.app_id = $thin_app_id and s.channel_id = $channel_id and s.status = 'SUBSCRIBED'";
                    $query = "select  @temp:=(select username from users as u where u.id = s.app_user_id limit 1) as name, if( @temp <> '', @temp, s.mobile) as name , s.id, s.mobile from subscribers as s where s.app_id = $thin_app_id and s.channel_id = $channel_id and s.status = 'SUBSCRIBED'";
                    $connection = ConnectionUtil::getConnection();
                    $message_list = $connection->query($query);
                    if ($message_list->num_rows) {
                        $response['status'] = 1;
                        $response['message'] = "Subscriber list found";
                        $list_array = mysqli_fetch_all($message_list, MYSQLI_ASSOC);
                        /*foreach($list_array as $key => $value ){
                            if(empty($list_array[$key]['name'])){
                                $list_array[$key]['name']=$value['mobile'];
                            }
                        }*/
                        $response['data']['subscriber_list'] = $list_array;
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Sorry no subscriber list found";
                    }
                    $channel_owner = Custom::get_channel_owner_id($channel_id);
                    $response['is_owner'] = ($channel_owner == $user_id) ? "YES" : "NO";
                } catch (Exception $e) {

                }
            }
            Custom::sendResponse($response);
        }
        exit();
    }


    public static function channel_delete()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $channel_id = isset($data['channel_id']) ? $data['channel_id'] : "";
            $app_user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $background_data = array();

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($channel_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid channel id';
            } else if (empty($app_user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else {
                try {

                    $connection = ConnectionUtil::getConnection();
                    $status = "N";
                    $query = "select c.id, c.user_id from channels as c where c.id = $channel_id limit 1";
                    $channel_data = $connection->query($query);
                    if ($channel_data->num_rows) {
                        $channel_data = mysqli_fetch_assoc($channel_data);
                        $created = Custom::created();
                        $sql = "UPDATE  channels SET status = ?, modified = ? where id = ?";
                        $stmt = $connection->prepare($sql);
                        $stmt->bind_param('sss', $status, $created, $channel_id);
                        if ($stmt->execute()) {
                            $background_data['app_user_id'] = $channel_data['user_id'];
                            $response['status'] = 1;
                            $response['message'] = "Channel deleted successfully";

                        }
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Invalid subscriber";
                    }
                } catch (Exception $e) {
                    $connection->rollback();
                }

            }
            Custom::sendResponse($response);
            if (!empty($background_data)) {
                Custom::send_process_to_background();
                WebservicesFunction::delete_channel_subscriber_cache($channel_id);
                /************UPDATED BY VISHWAJEET**********/
                $fileName = 'get_my_channel_list_app' . $thin_app_id . '_user' . $app_user_id;
                $file_path = 'cache/' . $fileName . '.json';
                if (file_exists($file_path)) {
                    unlink($file_path);
                }
                $collaboratorList = Custom::collaborator_list_for_channel($channel_id);
                if (!empty($collaboratorList)) {
                    foreach ($collaboratorList as $collaborator) {
                        $fileName = 'get_my_channel_list_app' . $collaborator['thinapp_id'] . '_user' . $collaborator['user_id'];
                        $file_path = 'cache/' . $fileName . '.json';
                        if (file_exists($file_path)) {
                            unlink($file_path);
                        }
                    }
                }
            }
        }
        exit();

    }


    public static function add_channel()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $channel_name = isset($data['channel_name']) ? trim($data['channel_name']) : "";
            $channel_desc = isset($data['channel_desc']) ? trim($data['channel_desc']) : null;
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $allow_sms = isset($data['allow_sms']) ? $data['allow_sms'] : "";
            $image_path = isset($data['image_path']) ? $data['image_path'] : null;
            $is_searchable = isset($data['is_searchable']) ? $data['is_searchable'] : "";
            $is_publish_mbroadcast = isset($data['is_publish_mbroadcast']) ? $data['is_publish_mbroadcast'] : "";
            $record_id = isset($data['record_id']) ? $data['record_id'] : 0;
            $background_data = array();


            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($channel_name)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid channel name';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($allow_sms)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid sms param';
            } else if (empty($is_searchable)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid serachable param';
            } else if (empty($is_publish_mbroadcast)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid publish param';
            } else {
                try {

                    $query = "select id from channels  where  channel_name = '$channel_name' and app_id = $thin_app_id";
                    $connection = ConnectionUtil::getConnection();
                    $service_message_list = $connection->query($query);
                    if (!$service_message_list->num_rows) {
                        $user_data = Custom::get_user_by_id($user_id);
                        $mbroadcast_app_id = MBROADCAST_APP_ID;
                        if ($user_data['role_id'] == 5 || $thin_app_id == $mbroadcast_app_id) {
                            $connection->autocommit(FALSE);
                            $created = Custom::created();
                            $sql = "INSERT INTO channels ( user_id, channel_name, channel_desc, image,  app_id, is_searchable, is_publish_mbroadcast, created, modified ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)";
                            $stmt = $connection->prepare($sql);
                            $stmt->bind_param('sssssssss', $user_id, $channel_name, $channel_desc, $image_path, $thin_app_id, $is_searchable, $is_publish_mbroadcast, $created, $created);
                            if ($stmt->execute()) {
                                $channel_id = $stmt->insert_id;

                                $topic_name = Custom::create_topic_name($channel_id);
                                $sql = "UPDATE  channels SET topic_name = ? where id = ?";
                                $stmt_ch = $connection->prepare($sql);
                                $stmt_ch->bind_param('ss', $topic_name, $channel_id);

                                $status = "SUBSCRIBED";
                                $created = Custom::created();
                                $sql = "INSERT INTO subscribers (channel_id, user_id, app_user_id, app_id, mobile, status, created, modified) VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
                                $stmt_sub = $connection->prepare($sql);
                                $stmt_sub->bind_param('ssssssss', $channel_id, $user_id, $user_id, $thin_app_id, $user_data['mobile'], $status, $created, $created);

                                if ($stmt_ch->execute() && $stmt_sub->execute()) {
                                    $response['status'] = 1;
                                    $response['message'] = "Channel added Successfully";
                                    $connection->commit();
                                    $background_data = true;
                                    $channel_data = Custom::get_channel_by_id($channel_id);
                                    if (!empty($channel_data)) {
                                        $response['data']['user_id'] = $channel_data['user_id'];
                                        $response['data']['channel_id'] = $channel_data['id'];
                                        $response['data']['channel_name'] = $channel_data['channel_name'];
                                        $response['data']['channel_desc'] = $channel_data['channel_desc'];
                                        $response['data']['channel_image'] = $channel_data['image'];
                                        $response['data']['record_id'] = $record_id;
                                        $response['data']['pending_status'] = "1";
                                        $response['data']['topic_name'] = $topic_name;
                                        $response['data']['modified'] = $channel_data['modified'];
                                        $response['data']['added_on'] = $channel_data['created'];

                                    } else {
                                        $response['status'] = 0;
                                        $response['message'] = "Unable to create channel";
                                        $connection->rollback();
                                    }

                                } else {
                                    $response['status'] = 0;
                                    $response['message'] = "Unable to create channel";
                                    $connection->rollback();
                                }
                            } else {
                                $response['status'] = 0;
                                $response['message'] = "Unable to create channel";
                            }
                        } else {
                            $response['status'] = 0;
                            $response['message'] = "Sorry you can not create channel";
                        }
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Channel already registered with same name";
                    }
                } catch (Exception $e) {
                    $connection->rollback();
                }
            }
            Custom::sendResponse($response);
            if ($background_data === true) {
                Custom::send_process_to_background();

                $response_data[] = WebservicesFunction::fun_get_subscriber_list($thin_app_id, $user_id, PAGINATION_LIMIT, 0);
                WebservicesFunction::createJson('get_subscriber_list_app' . $thin_app_id . "_user" . $user_id, $response_data, 'CREATE', 'subscriber');

                $fileName = 'get_my_channel_list_app' . $thin_app_id . '_user' . $user_id;
                $file_path = 'cache/' . $fileName . '.json';
                if (file_exists($file_path)) {
                    unlink($file_path);
                }

            }

        }
        exit();

    }


    public static function broadcast_message()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $channel_id = isset($data['action_at_channel_id']) ? ($data['action_at_channel_id']) : "";
            $message_id = isset($data['message_id']) ? ($data['message_id']) : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $background_data = array();

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($channel_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid channel';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($message_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid message param';
            } else {
                try {

                    $query = "select id from channel_messages  where  broadcast_by = $user_id and message_id = $message_id and channel_id = $channel_id and post_type_status = 'BROADCAST' limit 1";
                    $connection = ConnectionUtil::getConnection();
                    $service_message_list = $connection->query($query);
                    if (!$service_message_list->num_rows) {

                        $connection->autocommit(FALSE);
                        $created = Custom::created();
                        $post_type_status = "BROADCAST";
                        $sql = "INSERT INTO message_actions ( action_at_channel_id, action_by, message_id, list_message_type ) VALUES (?, ?, ?, ?)";
                        $stmt = $connection->prepare($sql);
                        $stmt->bind_param('ssss', $channel_id, $user_id, $message_id, $post_type_status);
                        if ($stmt->execute()) {


                            $created = Custom::created();
                            $sql = "INSERT INTO channel_messages (message_id, channel_id, post_type_status, broadcast_by, created, modified) VALUES (?, ?, ?, ?, ?, ?)";
                            $stmt_cm = $connection->prepare($sql);
                            $stmt_cm->bind_param('ssssss', $message_id, $channel_id, $post_type_status, $user_id, $created, $created);


                            $list_message_type = 'BROADCAST';
                            $increment = 1;
                            $sql = "UPDATE  message_statics SET total_broadcast_share = total_broadcast_share + ? where message_id = ?";
                            $stmt_ms = $connection->prepare($sql);
                            $stmt_ms->bind_param('ss', $increment, $message_id);

                            if ($stmt_cm->execute() && $stmt_ms->execute()) {
                                $response['status'] = 1;
                                $response['message'] = "Message broadcast successfully";
                                $connection->commit();
                            } else {
                                $response['status'] = 0;
                                $response['message'] = "Unable to create channel";
                                $connection->rollback();
                            }
                        } else {
                            $response['status'] = 0;
                            $response['message'] = "Unable to broadcast message";
                        }
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "You have already broadcast this message in this channel";
                    }
                } catch (Exception $e) {
                    $connection->rollback();
                }
            }
            Custom::sendResponse($response);
        }
        exit();

    }


    public static function get_messages_static_data()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $list_message_type = isset($data['list_message_type']) ? $data['list_message_type'] : "";
            $message_id = isset($data['message_id']) ? $data['message_id'] : "";
            $background_data = array();

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($message_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid message id';
            } else if (empty($list_message_type)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid param';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else {
                try {
                    $connection = ConnectionUtil::getConnection();
                    $query = "select * from message_statics  where message_id = $message_id and list_message_type = '$list_message_type' limit 1";
                    $message_list = $connection->query($query);
                    if ($message_list->num_rows) {
                        $message_list = mysqli_fetch_assoc($message_list);
                        $response['status'] = 1;
                        $response['message'] = "Message static found";
                        $response['data']['message']['total_likes'] = $message_list['total_likes'];
                        $response['data']['message']['total_super_like'] = $message_list['total_super_like'];
                        $response['data']['message']['total_excellent_like'] = $message_list['total_excellent_like'];
                        $response['data']['message']['total_mindblowing_like'] = $message_list['total_mindblowing_like'];
                        $response['data']['message']['total_wow_like'] = $message_list['total_wow_like'];
                        $response['data']['message']['total_fb_share'] = $message_list['total_fb_share'];
                        $response['data']['message']['total_twitter_share'] = $message_list['total_twitter_share'];
                        $response['data']['message']['total_gplus_share'] = $message_list['total_gplus_share'];
                        $response['data']['message']['total_whatsapp_share'] = $message_list['total_whatsapp_share'];
                        $response['data']['message']['total_other_share'] = $message_list['total_other_share'];
                        $response['data']['message']['total_broadcast_share'] = $message_list['total_broadcast_share'];
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Sorry message not found";
                    }
                } catch (Exception $e) {
                    $connection->rollback();
                }

            }
            Custom::sendResponse($response);
        }
        exit();

    }

    public static function get_channel_dropdown_list()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $background_data = array();

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else {
                try {
                    if ($thin_app_id == MBROADCAST_APP_ID) {
                        $query = "select id as channel_id, channel_name from channels  where app_id = $thin_app_id and status = 'Y' and user_id = $user_id";
                    } else {
                        $query = "select id as channel_id, channel_name from channels  where app_id = $thin_app_id and status = 'Y' and user_id = $user_id";
                    }
                    $connection = ConnectionUtil::getConnection();
                    $message_list = $connection->query($query);
                    if ($message_list->num_rows) {
                        $channel_list = mysqli_fetch_all($message_list, MYSQLI_ASSOC);
                        $response['status'] = 1;
                        $response['message'] = "Channels list found";
                        $response['data']['channels'] = $channel_list;
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Sorry you have no channel!";
                    }
                } catch (Exception $e) {

                }
            }
            Custom::sendResponse($response);
        }
        exit();
    }

    public static function get_channel_for_losefound_list()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $background_data = array();

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else {
                try {
                    if ($thin_app_id == MBROADCAST_APP_ID) {
                        $query = "select id as channel_id, channel_name from channels  where app_id = $thin_app_id and status = 'Y' and user_id = $user_id";
                    } else {
                        $query = "select id as channel_id, channel_name from channels  where app_id = $thin_app_id and status = 'Y' and user_id = $user_id";
                    }
                    $connection = ConnectionUtil::getConnection();
                    $message_list = $connection->query($query);
                    if ($message_list->num_rows) {
                        $channel_list = mysqli_fetch_all($message_list, MYSQLI_ASSOC);
                        $response['status'] = 1;
                        $response['message'] = "Channels list found";
                        $response['data']['channels'] = $channel_list;
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Sorry you have no channel!";
                    }
                } catch (Exception $e) {
                    $connection->rollback();
                }
            }
            Custom::sendResponse($response);
        }
        exit();
    }

    public static function update_subscription_favourite()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $channel_id = isset($data['channel_id']) ? $data['channel_id'] : "";
            $app_user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $status = isset($data['status']) ? $data['status'] : "";
            $background_data = array();

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($channel_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid channel id';
            } else if (empty($app_user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else if (empty($status)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid status';
            } else {
                try {
                    $connection = ConnectionUtil::getConnection();
                    $created = Custom::created();
                    $sql = "UPDATE  subscribers SET is_favourite = ?, modified = ? where mobile = ? and channel_id = ? and app_id = ?";
                    $stmt = $connection->prepare($sql);
                    $stmt->bind_param('sssss', $status, $created, $mobile, $channel_id, $thin_app_id);
                    if ($stmt->execute()) {
                        $background_data = true;
                        $response['status'] = 1;
                        if ($status == "Y") {
                            $response['message'] = "Favourite successfully";
                        } else if ($status == "N") {
                            $response['message'] = "Unfavourite successfully";
                        }
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Please try leter";
                    }
                } catch (Exception $e) {
                    $connection->rollback();
                }

            }
            Custom::sendResponse($response);
            if ($background_data === true) {
                Custom::send_process_to_background();
                WebservicesFunction::deleteJson(array('get_subscriber_list_app' . $thin_app_id . '_user' . $app_user_id), 'subscriber');
            }
        }
        exit();

    }

    public static function send_collaborator_request()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $channel_id = isset($data['channel_id']) ? $data['channel_id'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $col_mobile = isset($data['col_mobile']) ? $data['col_mobile'] : "";


            $background_data = array();

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($channel_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid channel id';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($col_mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else {
                try {
                    $col_mobile = Custom::create_mobile_number($col_mobile);
                    if ($col_mobile) {

                        $total_sms = Custom::get_total_sms_thinapp($thin_app_id, "T");
                        if ($total_sms > 0) {

                            $col_user_id = 0;
                            $query = "select id from users  where thinapp_id = $thin_app_id and mobile = '$col_mobile' limit 1";
                            $connection = ConnectionUtil::getConnection();
                            $message_list = $connection->query($query);
                            if ($message_list->num_rows) {
                                $col_user_id = mysqli_fetch_assoc($message_list)['id'];
                            }

                            if ($col_user_id == 0 || ($col_user_id != $user_id)) {

                                $query = "select status from collaborators  where channel_id = $channel_id and thinapp_id = $thin_app_id and mobile = '$col_mobile' limit 1";
                                $connection = ConnectionUtil::getConnection();
                                $message_list = $connection->query($query);
                                $col_status = 'NEW';
                                if ($message_list->num_rows) {
                                    $col_status = mysqli_fetch_assoc($message_list)['status'];
                                }
                                if ($col_status == 'NEW' || $col_status == 'CANCELED') {
                                    $role = "USER";
                                    $created = Custom::created();
                                    $sql = "INSERT INTO collaborators (user_id, channel_id, mobile, role, collaborator_added_by, thinapp_id, created, modified) VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
                                    $stmt_cm = $connection->prepare($sql);
                                    $stmt_cm->bind_param('ssssssss', $col_user_id, $channel_id, $col_mobile, $role, $user_id, $thin_app_id, $created, $created);
                                    if ($stmt_cm->execute()) {
                                        $response['status'] = 1;
                                        $response['message'] = "Collaborator request send successfully";
                                        $response['data']['collaborator'] = array();
                                        $query = "select id as col_id, mobile as col_mobile, status as col_status, role as col_role from collaborators  where thinapp_id = $thin_app_id and channel_id = $channel_id";
                                        $connection = ConnectionUtil::getConnection();
                                        $col_list = $connection->query($query);
                                        if ($col_list->num_rows) {
                                            $col_list = mysqli_fetch_all($col_list, MYSQLI_ASSOC);
                                            $response['data']['collaborator'] = $col_list;
                                        }
                                        $background_data['channel_id'] = $channel_id;
                                        $background_data['col_user_id'] = $col_user_id;
                                        $background_data['collaborator_id'] = $stmt_cm->insert_id;
                                        $background_data['col_mobile'] = $col_mobile;

                                    } else {
                                        $response['status'] = 0;
                                        $response['message'] = "Sorry collaborator request not send";
                                    }
                                } else {
                                    $response['status'] = 0;
                                    $response['message'] = "This request status is : " . $col_status;
                                }
                            } else {
                                $response['status'] = 0;
                                $response['message'] = "Sorry you can not send collaborator request this number";
                            }

                        } else {
                            $response['status'] = 0;
                            $response['message'] = "System error found. Please try later";
                        }
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Sorry invalid collaborator mobile number";
                    }


                } catch (Exception $e) {
                    $connection->rollback();
                }
            }
            Custom::sendResponse($response);
            if (!empty($background_data)) {
                Custom::send_process_to_background();
                /* this function send otp and send process in backround*/
                $col_user_id = $background_data['col_user_id'];
                $collaborator_id = $background_data['collaborator_id'];
                $col_mobile = $background_data['col_mobile'];
                $channel_data = Custom::get_channel_by_id($background_data['channel_id']);
                if (!empty($col_user_id)) {
                    $message = "you are inviated as collaborator";
                    $message = $channel_data['channel_name'] . ' Request - ' . $message;
                    $option = array(
                        'thinapp_id' => $thin_app_id,
                        'channel_id' => $channel_id,
                        'role' => "USER",
                        'flag' => 'COLL',
                        'title' => mb_strimwidth($message, 0, 250, '...'),
                        'message' => mb_strimwidth($message, 0, 250, '...'),
                        'description' => "",
                        'chat_reference' => '',
                        'module_type' => 'COLL',
                        'module_type_id' => $collaborator_id,
                        'firebase_reference' => ""
                    );
                    Custom::send_notification_by_user_id($option, array($col_user_id), $thin_app_id);

                }

                if (!empty($col_mobile)) {
                    $app_data = Custom::getThinAppData($thin_app_id);
                    $message = " invited you as collaborator into " . $channel_data['channel_name'] . " channel ";
                    $message = $app_data['name'] . $message . ' for more download app ' . $app_data['apk_url'];
                    Custom::send_single_sms($col_mobile, ($message), $thin_app_id);

                }

            }
        }
        exit();

    }

    public static function get_collaborator_list()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $channel_id = isset($data['channel_id']) ? $data['channel_id'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";


            $background_data = array();

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($channel_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid channel';
            } else {
                try {

                    $query = "select id as col_id, mobile as col_mobile, status as col_status, role as col_role from collaborators  where collaborator_added_by = $user_id and status != 'CANCELED' and thinapp_id = $thin_app_id and channel_id = $channel_id";
                    $connection = ConnectionUtil::getConnection();
                    $col_list = $connection->query($query);
                    if ($col_list->num_rows) {
                        $response['status'] = 1;
                        $response['message'] = "Collaborator request send successfully";
                        $col_list = mysqli_fetch_all($col_list, MYSQLI_ASSOC);
                        $response['data']['collaborator'] = $col_list;
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Sorry no collaborator list found";

                    }

                } catch (Exception $e) {
                    $connection->rollback();
                }
            }
            Custom::sendResponse($response);

        }
        exit();

    }

    public static function user_as_collaborator_list()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $channel_id = isset($data['channel_id']) ? $data['channel_id'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";


            $background_data = array();

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else {
                try {

                    $query = "select c.channel_name, col.id as col_id, col.mobile as col_mobile, col.status as col_status, col.role as col_role from collaborators as col join channels as c on col.channel_id = c.id where col.user_id = $user_id and col.status != 'CANCELED' and col.thinapp_id = $thin_app_id";
                    $connection = ConnectionUtil::getConnection();
                    $col_list = $connection->query($query);
                    if ($col_list->num_rows) {
                        $response['status'] = 1;
                        $response['message'] = "Collaborator request send successfully";
                        $col_list = mysqli_fetch_all($col_list, MYSQLI_ASSOC);
                        $response['data']['collaborator'] = $col_list;
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Sorry no collaborator list found";
                    }

                } catch (Exception $e) {

                    $connection->rollback();
                }
            }
            Custom::sendResponse($response);

        }
        exit();


    }


    public static function accept_collaborator_request()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $response = array();


            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $col_id = isset($data['col_id']) ? $data['col_id'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $status = isset($data['status']) ? $data['status'] : "";

            $background_data = array();

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($col_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid Collaborator';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($status)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid status';
            } else {
                try {


                    $query = "select col.collaborator_added_by, u.firebase_token,c.channel_name, c.id as channel_id, c.app_id as channel_app_id, c.topic_name, u.id as user_id, u.mobile, col.id as col_id, col.mobile as col_mobile, col.status as col_status, col.role as col_role from collaborators as col join channels as c on col.channel_id = c.id join users as u on u.id = col.user_id where col.id = $col_id  and col.thinapp_id = $thin_app_id limit 1";
                    $connection = ConnectionUtil::getConnection();
                    $col_list = $connection->query($query);
                    if ($col_list->num_rows) {
                        $col_data = mysqli_fetch_assoc($col_list);
                        $created = Custom::created();
                        $connection->autocommit(FALSE);
                        $sql = "UPDATE collaborators SET status = ?, user_id = ?, modified = ? where id = ?";
                        $stmt = $connection->prepare($sql);
                        $stmt->bind_param('ssss', $status, $user_id, $created, $col_id);
                        if ($stmt->execute()) {
                            $response['status'] = 1;
                            if ($status == "ACTIVE") {
                                $query = "select id from subscribers where channel_id = " . $col_data['channel_id'] . " and app_user_id = " . $col_data['user_id'] . "  and app_id = $thin_app_id limit 1";
                                $col_list = $connection->query($query);
                                if (!$col_list->num_rows) {
                                    $status = 'SUBSCRIBED';
                                    $sql = "INSERT INTO subscribers (channel_id, user_id, app_user_id, app_id, mobile, status, created, modified) VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
                                    $stmt_sub = $connection->prepare($sql);
                                    $stmt_sub->bind_param('ssssssss', $col_data['channel_id'], $user_id, $col_data['user_id'], $thin_app_id, $col_data['col_mobile'], $status, $created, $created);
                                    if ($stmt_sub->execute()) {

                                        $connection->commit();
                                        $background_data['subscriber']['topic_name'] = $col_data['topic_name'];
                                        $background_data['subscriber']['firebase_token'] = $col_data['firebase_token'];
                                        $response_data[] = WebservicesFunction::fun_get_subscriber_list($thin_app_id, $col_data['user_id'], PAGINATION_LIMIT, 0);
                                        WebservicesFunction::createJson('get_subscriber_list_app' . $thin_app_id . "_user" . $col_data['user_id'], $response_data, 'CREATE', 'subscriber');

                                        $message = "Collaborator requested accepted by " . $col_data['mobile'] . " for channel " . $col_data['channel_name'];
                                        $response['message'] = "Collaborator request  accepted successfully";
                                        /************UPDATED BY VISHWAJEET**********/
                                        $file_name = 'get_my_channel_list_app' . $thin_app_id . '_user' . $user_id;
                                        WebservicesFunction::deleteJson(array($file_name));

                                    } else {
                                        $connection->rollback();
                                        $response['status'] = 0;
                                        $response['message'] = "Sorry collaborator request not found";
                                    }
                                } else {
                                    $connection->commit();
                                    $message = "Collaborator requested accepted by " . $col_data['mobile'] . " for channel " . $col_data['channel_name'];
                                    $response['message'] = "Collaborator request  accepted successfully";
                                }

                            } else {
                                $connection->commit();
                                $message = "Collaborator requested decline by " . $col_data['mobile'] . " for channel " . $col_data['channel_name'];
                                $response['message'] = "Collaborator request  decline successfully";
                            }

                            $option = array(
                                'thinapp_id' => $thin_app_id,
                                'channel_id' => $col_data['channel_id'],
                                'role' => "ADMIN",
                                'flag' => 'COLL',
                                'title' => mb_strimwidth($message, 0, 250, '...'),
                                'message' => mb_strimwidth($message, 0, 250, '...'),
                                'description' => "",
                                'chat_reference' => '',
                                'module_type' => 'COLL',
                                'module_type_id' => $col_id,
                                'firebase_reference' => ""
                            );
                            $background_data['notification']['option'] = $option;
                            $background_data['notification']['user_id'] = $col_data['collaborator_added_by'];

                        } else {
                            $response['status'] = 0;
                            $response['message'] = "Sorry collaborator request not accepted";
                        }

                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Sorry collaborator request not found";
                    }

                } catch (Exception $e) {
                    $connection->rollback();
                }

            }
            Custom::sendResponse($response);
            if (!empty($background_data)) {
                Custom::send_process_to_background();
                if (isset($background_data['subscriber'])) {
                    $token = $background_data['subscriber']['firebase_token'];
                    $topic_name = $background_data['subscriber']['topic_name'];
                    Custom::add_subscribers_to_topic($topic_name, array($token));
                }
                if (isset($background_data['notification'])) {
                    $option = $background_data['notification']['option'];
                    $user_id = $background_data['notification']['user_id'];
                    Custom::send_notification_by_user_id($option, array($user_id), $thin_app_id);
                }

            }
        }
        exit();

    }


    public static function change_collaborator_role()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $col_id = isset($data['col_id']) ? $data['col_id'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $role = isset($data['role']) ? strtoupper($data['role']) : "";
            $background_data = array();
            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($col_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid Collaborator';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($role)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid role';
            } else {
                try {
                    $query = "select col.collaborator_added_by, u.firebase_token,c.channel_name, c.id as channel_id, c.app_id as channel_app_id, c.topic_name, u.id as user_id, u.mobile, col.id as col_id, col.mobile as col_mobile, col.status as col_status, col.role as col_role from collaborators as col join channels as c on col.channel_id = c.id join users as u on u.id = col.user_id where col.id = $col_id  and col.thinapp_id = $thin_app_id limit 1";
                    $connection = ConnectionUtil::getConnection();
                    $col_list = $connection->query($query);
                    if ($col_list->num_rows) {
                        $col_data = mysqli_fetch_assoc($col_list);
                        $connection = ConnectionUtil::getConnection();
                        $created = Custom::created();
                        $sql = "UPDATE collaborators SET role = ?, modified = ? where id = ?";
                        $stmt = $connection->prepare($sql);
                        $stmt->bind_param('sss', $status, $created, $col_id);
                        if ($stmt->execute()) {
                            $response['status'] = 1;
                            $response['message'] = "Collaborator role changed successfully";
                            /************UPDATED BY VISHWAJEET**********/
                            $collUserID = $col_data['user_id'];
                            $fileName = 'get_my_channel_list_app' . $thin_app_id . '_user' . $collUserID;
                            $file_path = 'cache/' . $fileName . '.json';
                            if (file_exists($file_path)) {
                                unlink($file_path);
                            }
                        } else {
                            $response['status'] = 0;
                            $response['message'] = "Sorry collaborator role could not changed";
                        }
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Sorry collaborator request not found";
                    }
                } catch (Exception $e) {
                    $connection->rollback();
                }
            }
            Custom::sendResponse($response);
        }
        exit();
    }


    public static function cancel_collaborator_request()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $response = array();


            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $col_id = isset($data['col_id']) ? $data['col_id'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";

            $background_data = array();

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($col_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid Collaborator';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else {
                try {

                    $query = "select col.collaborator_added_by, u.firebase_token,c.channel_name, c.id as channel_id, c.app_id as channel_app_id, c.topic_name, u.id as user_id, u.mobile, col.id as col_id, col.mobile as col_mobile, col.status as col_status, col.role as col_role from collaborators as col join channels as c on col.channel_id = c.id join users as u on u.id = col.user_id where col.id = $col_id  and col.thinapp_id = $thin_app_id limit 1";
                    $connection = ConnectionUtil::getConnection();
                    $col_list = $connection->query($query);
                    if ($col_list->num_rows) {
                        $col_data = mysqli_fetch_assoc($col_list);
                        $connection = ConnectionUtil::getConnection();
                        $created = Custom::created();
                        $status = 'CANCELED';
                        $sql = "UPDATE collaborators SET status = ?, user_id = ?, modified = ? where id = ?";
                        $stmt = $connection->prepare($sql);
                        $stmt->bind_param('ssss', $status, $user_id, $created, $col_id);
                        if ($stmt->execute()) {
                            $message = "you are not authorized as collaborator";
                            $message = $col_data['channel_name'] . ' Request - ' . $message;
                            $option = array(
                                'thinapp_id' => $thin_app_id,
                                'channel_id' => $col_data['channel_id'],
                                'role' => "USER",
                                'flag' => 'COLL',
                                'title' => mb_strimwidth($message, 0, 250, '...'),
                                'message' => mb_strimwidth($message, 0, 250, '...'),
                                'description' => "",
                                'chat_reference' => '',
                                'module_type' => 'COLL',
                                'module_type_id' => $col_id,
                                'firebase_reference' => ""
                            );
                            $background_data['notification']['option'] = $option;
                            $background_data['notification']['user_id'] = $col_data['user_id'];

                            $response['status'] = 1;
                            $response['message'] = "Collaborator request remove successfully";
                            /************UPDATED BY VISHWAJEET**********/
                            $collUserID = $col_data['user_id'];
                            $fileName = 'get_my_channel_list_app' . $thin_app_id . '_user' . $collUserID;
                            $file_path = 'cache/' . $fileName . '.json';
                            if (file_exists($file_path)) {
                                unlink($file_path);
                            }

                        } else {
                            $response['status'] = 0;
                            $response['message'] = "Sorry collaborator role could not remove";
                        }

                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Sorry collaborator request not found";
                    }

                } catch (Exception $e) {
                    $connection->rollback();
                }

            }
            Custom::sendResponse($response);
            if (!empty($background_data)) {
                Custom::send_process_to_background();
                if (isset($background_data['notification'])) {
                    $option = $background_data['notification']['option'];
                    $user_id = $background_data['notification']['user_id'];
                    Custom::send_notification_by_user_id($option, array($user_id), $thin_app_id);
                }
            }
        }
        exit();

    }


    /* ticket module strat from here */


    public static function add_ticket()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $title = isset($data['title']) ? $data['title'] : "";
            $description = isset($data['description']) ? $data['description'] : "";
            $media = isset($data['media']) ? $data['media'] : "";
            $ticket_type = isset($data['ticket_type']) ? $data['ticket_type'] : "";
            $type = isset($data['type']) ? $data['type'] : "";
            $background_data = array();


            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($title)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid title';
            } else if (empty($ticket_type)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid ticket type';
            } else if (empty($description)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid description';
            } else if (empty($type)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid type';
            } else {
                try {

                    $connection = ConnectionUtil::getConnection();
                    $connection->autocommit(FALSE);
                    $created = Custom::created();
                    $sql = "INSERT INTO tickets (app_id, created_by_user_id, title, description, media, query_type, type, created, modified) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)";
                    $stmt = $connection->prepare($sql);
                    $stmt->bind_param('sssssssss', $thin_app_id, $user_id, $title, $description, $media, $ticket_type, $type, $created, $created);
                    if ($stmt->execute()) {
                        $last_inser_id = $stmt->insert_id;
                        $status = 'OPEN';
                        /* add messge to channel Message table*/
                        $sql = "INSERT INTO ticket_comments (ticket_id, ticket_status, created, modified) VALUES (?, ?, ?, ?)";
                        $cm_stmt = $connection->prepare($sql);
                        $cm_stmt->bind_param('ssss', $last_inser_id, $status, $created, $created);
                        if ($cm_stmt->execute()) {
                            $connection->commit();
                            $response['status'] = 1;
                            $response['message'] = "Complain add successfully";
                            $message = "Ticket Open  - " . $description;
                            $option = array(
                                'thinapp_id' => $thin_app_id,
                                'channel_id' => 0,
                                'flag' => 'TICKET',
                                'title' => "Ticket Update",
                                'message' => mb_strimwidth($message, 0, 50, '...'),
                                'description' => "",
                                'chat_reference' => '',
                                'module_type' => 'TICKET',
                                'module_type_id' => $last_inser_id,
                                'firebase_reference' => ""
                            );
                            $background_data['notification']['data'] = $option;

                        } else {
                            $response['status'] = 0;
                            $response['message'] = "Sorry ticket could not created";
                            $connection->rollback();
                        }
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Sorry ticket could not created";
                    }

                } catch (Exception $e) {
                    $connection->rollback();
                }
            }
            Custom::sendResponse($response);
            if (!empty($background_data)) {
                Custom::send_process_to_background();
                /* this function send otp and send process in backround*/
                if (array_key_exists("notification", $background_data)) {
                    $admin_data = Custom::get_thinapp_admin_data($thin_app_id);
                    Custom::send_notification_by_user_id($background_data['notification']['data'], array($admin_data['id']), $thin_app_id);
                }
            }
        }
        exit();

    }

    public static function get_ticket_process_count()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else {
                try {

                    $connection = ConnectionUtil::getConnection();
                    $response['status'] = 1;
                    $response['message'] = "Total count found";
                    $condition = "tickets.app_id = " . $thin_app_id;
                    $status_list = Custom::get_enum_values('tickets', 'status');
                    $type_list = Custom::get_enum_values('tickets', 'type');
                    $final_array = array_merge($status_list, $type_list);
                    $thin_app_admin = Custom::get_thinapp_admin_data($thin_app_id);
                    if ($thin_app_admin['id'] != $user_id) {
                        $condition .= " AND created_by_user_id = " . $user_id;
                    }
                    $query = "SELECT status as title, COUNT(*) as cnt FROM   tickets  WHERE " . $condition . " GROUP  BY tickets.status LIMIT 10 UNION ALL SELECT type as title, COUNT(*) as cnt FROM   tickets  WHERE " . $condition . " GROUP  BY tickets.type LIMIT 10";
                    $lost_count = $connection->query($query);
                    $lost_count = mysqli_fetch_all($lost_count, MYSQLI_ASSOC);
                    $count_array = array();
                    foreach ($lost_count as $key => $value) {
                        $count_array[$value['title']] = $value['cnt'];
                    }
                    foreach ($final_array as $key => $value) {
                        if (isset($count_array[$value])) {
                            $response['data']['tickets_counts'][$value] = $count_array[$value];
                        } else {
                            $response['data']['tickets_counts'][$value] = 0;
                        }
                    }
                } catch (Exception $e) {
                    $connection->rollback();
                }
            }
            Custom::sendResponse($response);

        }
        exit();

    }

    public static function get_ticket_list()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);

        if (isset($data['app_key'])) {
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $type = isset($data['type']) ? $data['type'] : "";
            $status = isset($data['status']) ? $data['status'] : "";
            $search = isset($data['search']) ? $data['search'] : "";
            $offset = isset($data['offset']) ? $data['offset'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter user id';
            } else if (empty($type)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid type';
            } else if (empty($status)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid status';
            } else if (empty($offset) && $offset != 0) {
                $response['status'] = 0;
                $response['message'] = 'Please enter offset';
            } else {

                $limit = PAGINATION_LIMIT;
                $offset = ($offset * PAGINATION_LIMIT);
                $extra_condition = " t.app_id =" . $thin_app_id;
                $thin_app_admin = Custom::get_thinapp_admin_data($thin_app_id);
                $admin_id = $thin_app_admin['id'];
                $is_app_owner = "YES";
                if ($admin_id != $user_id) {
                    $extra_condition .= " and t.created_by_user_id =" . $user_id;
                    $is_app_owner = "NO";
                }

                if ($type != "TYPE") {
                    $extra_condition .= " and t.type = '" . $type . "'";
                }
                if ($status != "STATUS") {
                    if ($status == "FAVOURITE") {
                        $extra_condition .= " and t.is_favourite = 'Y'";
                    } else {
                        $extra_condition .= " and t.status ='" . $status . "'";
                    }

                }
                if (!empty($search)) {
                    $extra_condition .= " and t.description like '%" . $search . "%'";
                }

                $query = "select t.*, u.mobile from tickets as t join users as u on t.created_by_user_id = u.id where $extra_condition order by t.id desc limit $limit offset $offset";
                $connection = ConnectionUtil::getConnection();
                $ticket_list = $connection->query($query);
                if ($ticket_list->num_rows) {

                    $ticket_list = mysqli_fetch_all($ticket_list, MYSQLI_ASSOC);
                    foreach ($ticket_list as $key => $quest_data) {
                        $channels_arr[$key]['id'] = $quest_data['id'];
                        $channels_arr[$key]['title'] = $quest_data['title'];
                        $channels_arr[$key]['description'] = mb_strimwidth($quest_data['description'], 0, 1000, '...');
                        $channels_arr[$key]['image'] = $quest_data['media'];
                        $channels_arr[$key]['is_favourite'] = ($quest_data['is_favourite'] == 'Y') ? "YES" : "NO";
                        $channels_arr[$key]['type'] = $quest_data['type'];
                        $channels_arr[$key]['status'] = $quest_data['status'];
                        $channels_arr[$key]['date'] = date("d M y H:i", strtotime($quest_data['created']));
                        $channels_arr[$key]['created_by'] = Custom::hide_number($quest_data['mobile']);
                        $channels_arr[$key]['is_app_owner'] = $is_app_owner;
                        if ($quest_data['created_by_user_id'] == $user_id) {
                            $channels_arr[$key]['is_owner'] = "YES";
                        } else {
                            $channels_arr[$key]['is_owner'] = "NO";
                        }
                    }
                    $response['status'] = 1;
                    $response['message'] = "Complain list found";
                    $response['data']['ticket_list'] = $channels_arr;
                } else {
                    $response['status'] = 0;
                    $response['message'] = "There is no complain";
                }
            }
            echo json_encode($response);
            exit;
        }
    }

    public static function get_ticket_detail()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);

        if (isset($data['app_key'])) {
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $ticket_id = isset($data['ticket_id']) ? $data['ticket_id'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter user id';
            } else if (empty($ticket_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid ticket';
            } else {

                $query = "select t.*, u.mobile from tickets as t join users as u on t.created_by_user_id = u.id where t.id = $ticket_id limit 1";
                $connection = ConnectionUtil::getConnection();
                $ticket_list = $connection->query($query);
                if ($ticket_list->num_rows) {
                    $ticket_data = mysqli_fetch_assoc($ticket_list);
                    $channels_arr['id'] = $ticket_data['id'];
                    $channels_arr['title'] = $ticket_data['title'];
                    $channels_arr['description'] = $ticket_data['description'];
                    $channels_arr['image'] = $ticket_data['media'];
                    $channels_arr['is_favourite'] = ($ticket_data['is_favourite'] == 'Y') ? "YES" : "NO";
                    $channels_arr['type'] = $ticket_data['type'];
                    $channels_arr['status'] = $ticket_data['status'];
                    $channels_arr['latitude'] = $ticket_data['latitude'];
                    $channels_arr['longitude'] = $ticket_data['longitude'];
                    $channels_arr['created'] = Custom::timeElapsedString(($ticket_data['created'])) . " ago";
                    /*$channels_arr['comments'] = array();
                    $query = "select comment,media_path from ticket_comments where ticket_id = $ticket_id order by id desc";
                    $connection = ConnectionUtil::getConnection();
                    $ticket_list = $connection->query($query);
                    if ($ticket_list->num_rows) {
                        $channels_arr['comments'] = mysqli_fetch_all($ticket_list,MYSQLI_ASSOC);
                    }*/

                    $response['status'] = 1;
                    $response['message'] = "Ticket found";
                    $response['data']['ticket_list'] = $channels_arr;
                } else {
                    $response['status'] = 0;
                    $response['message'] = "There is no ticket";
                }
            }
            echo json_encode($response);
            exit;
        }
    }

    /* poll section start from here */


    public static function update_ticket_status()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $ticket_id = isset($data['ticket_id']) ? $data['ticket_id'] : "";
            $status = isset($data['status']) ? $data['status'] : "";
            $comment = isset($data['comment']) ? $data['comment'] : "";
            $media_path = isset($data['media_path']) ? $data['media_path'] : "";
            $background_data = array();

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($ticket_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid ticket';
            } else if (empty($status)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid ticket status';
            } else {
                try {

                    $connection = ConnectionUtil::getConnection();
                    $query = "select t.created_by_user_id, t.description, u.mobile from tickets as t join users as u on t.created_by_user_id = u.id where t.id = $ticket_id limit 1";
                    $connection = ConnectionUtil::getConnection();
                    $ticket_list = $connection->query($query);
                    if ($ticket_list->num_rows) {
                        $ticket_data = mysqli_fetch_assoc($ticket_list);
                        $connection->autocommit(false);
                        $created = Custom::created();
                        $sql = "UPDATE  tickets SET status = ?, modified = ? where id = ?";
                        $stmt = $connection->prepare($sql);
                        $stmt->bind_param('sss', $status, $created, $ticket_id);

                        $sql = "INSERT INTO ticket_comments (ticket_id, ticket_status, app_admin_id, comment, media_path, created, modified) VALUES (?, ?, ?, ?, ?, ?, ?)";
                        $stmt_com = $connection->prepare($sql);
                        $stmt_com->bind_param('sssssss', $ticket_id, $status, $user_id, $comment, $media_path, $created, $created);
                        if ($stmt->execute() && $stmt_com->execute()) {
                            $connection->commit();
                            $last_insert_id = $stmt_com->insert_id;
                            $response['status'] = 1;
                            $response['message'] = "Complain add successfully";
                            $message = "Complain " . ucfirst($status) . " - " . $ticket_data['description'];
                            if (!empty($comment)) {
                                $message = "Complain " . ucfirst($status) . " - " . $comment;
                            }
                            $option = array(
                                'thinapp_id' => $thin_app_id,
                                'channel_id' => 0,
                                'flag' => 'TICKET',
                                'title' => "Complain Update",
                                'message' => mb_strimwidth($message, 0, 50, '...'),
                                'description' => "",
                                'chat_reference' => '',
                                'module_type' => 'TICKET',
                                'module_type_id' => $last_insert_id,
                                'firebase_reference' => ""
                            );
                            $background_data['notification']['data'] = $option;
                            $background_data['notification']['user_id'] = $ticket_data['created_by_user_id'];
                            $response['status'] = 1;
                            $response['message'] = "Status update successfully";
                        } else {
                            $response['status'] = 0;
                            $response['message'] = "Sorry ticket could not created";
                        }

                    } else {
                        $response['status'] = 0;
                        $response['message'] = "There is no complain";
                    }
                    $connection->close();
                } catch (Exception $e) {
                    $connection->rollback();
                }
            }
            Custom::sendResponse($response);
            if (!empty($background_data)) {
                Custom::send_process_to_background();
                /* this function send otp and send process in backround*/
                if (array_key_exists("notification", $background_data)) {
                    //$admin_data = Custom::get_thinapp_admin_data($thin_app_id);
                    Custom::send_notification_by_user_id($background_data['notification']['data'], array($background_data['notification']['user_id']), $thin_app_id);
                }
            }
        }
        exit();

    }

    public static function delete_ticket()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $ticket_id = isset($data['ticket_id']) ? $data['ticket_id'] : "";
            $background_data = array();

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($ticket_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid ticket';
            } else {
                try {

                    $connection = ConnectionUtil::getConnection();
                    $query = "select t.created_by_user_id, t.description, u.mobile from tickets as t join users as u on t.created_by_user_id = u.id where t.id = $ticket_id limit 1";
                    $connection = ConnectionUtil::getConnection();
                    $ticket_list = $connection->query($query);
                    if ($ticket_list->num_rows) {
                        $ticket_data = mysqli_fetch_assoc($ticket_list);
                        $sql = "delete from   tickets  where id = ?";
                        $stmt = $connection->prepare($sql);
                        $stmt->bind_param('s', $ticket_id);
                        if ($stmt->execute()) {

                            $sql = "delete from   ticket_comments  where ticket_id = ?";
                            $stmt = $connection->prepare($sql);
                            $stmt->bind_param('s', $ticket_id);
                            $stmt->execute();

                            $response['status'] = 1;
                            $response['message'] = "Complain delete successfully";
                            $message = "Complain for - " . $ticket_data['description'] . " has been removed by user";
                            $option = array(
                                'thinapp_id' => $thin_app_id,
                                'channel_id' => 0,
                                'flag' => 'TICKET',
                                'title' => "Complain Update",
                                'message' => mb_strimwidth($message, 0, 50, '...'),
                                'description' => "",
                                'chat_reference' => '',
                                'module_type' => 'TICKET',
                                'module_type_id' => 0,
                                'firebase_reference' => ""
                            );
                            $background_data['notification']['data'] = $option;

                        } else {
                            $response['status'] = 1;
                            $response['message'] = "Unable to  delete complain";
                        }

                    } else {
                        $response['status'] = 0;
                        $response['message'] = "There is no complain";
                    }
                    $connection->close();
                } catch (Exception $e) {
                    $connection->rollback();
                }
            }
            Custom::sendResponse($response);
            if (!empty($background_data)) {
                Custom::send_process_to_background();
                /* this function send otp and send process in backround*/
                if (array_key_exists("notification", $background_data)) {
                    $admin_data = Custom::get_thinapp_admin_data($thin_app_id);
                    Custom::send_notification_by_user_id($background_data['notification']['data'], array($admin_data['id']), $thin_app_id);
                }
            }
        }
        exit();

    }

    /* ticket module end from here */

    public static function get_poll_type_list()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);

        if (isset($data['app_key'])) {
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter user id';
            } else {
                $site_path = SITE_PATH . "/thinapp_images/";
                $query = "select id, name, CONCAT('$site_path',icon) as image from action_types";
                $connection = ConnectionUtil::getConnection();
                $ticket_list = $connection->query($query);
                if ($ticket_list->num_rows) {
                    $list_array = mysqli_fetch_all($ticket_list, MYSQLI_ASSOC);
                    $response['status'] = 1;
                    $response['message'] = "Poll list found";
                    $response['data']['poll_list'] = $list_array;
                } else {
                    $response['status'] = 0;
                    $response['message'] = "Sorry no poll list found";
                }
                $connection->close();
            }
            echo json_encode($response);
            exit;
        }
    }


    public static function create_poll()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $question = isset($data['question']) ? $data['question'] : "";
            $is_mandatory = isset($data['is_mandatory']) ? $data['is_mandatory'] : "";
            $question_option = isset($data['option']) ? $data['option'] : "";
            $share_on_mbroadcast = isset($data['share_on_mbroadcast']) ? $data['share_on_mbroadcast'] : "";
            $poll_publish = isset($data['poll_publish']) ? $data['poll_publish'] : "";
            $poll_duration = isset($data['poll_duration']) ? $data['poll_duration'] : "";
            $action_type_id = isset($data['action_type_id']) ? $data['action_type_id'] : "";
            $share_on = isset($data['share_on']) ? $data['share_on'] : "";
            $flag = true;

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($question)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid question';
            } else if (empty($is_mandatory)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mandatory';
            } else if (empty($share_on_mbroadcast)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid share param';
            } else if (empty($poll_publish)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid publish param';
            } else if (empty($action_type_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid action type';
            } else if (empty($poll_duration)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid duration';
            } else if (empty($share_on)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid share on';
            } else {
                try {
                    if (empty($question)) {
                        $response['status'] = 0;
                        $response['message'] = "Please enter your question";
                        $flag = false;
                    } else if (($action_type_id == 3 || $action_type_id == 1 || $action_type_id == 7 || $action_type_id == 8 || $action_type_id == 6) && empty($question_option)) {
                        $response['status'] = 0;
                        $response['message'] = "Please add your choices";
                        $flag = false;
                    } else if (($action_type_id == 3 || $action_type_id == 1 || $action_type_id == 7 || $action_type_id == 8 || $action_type_id == 6) && !empty($question_option)) {
                        $optionArray = explode("\n", $question_option);
                        $optionArray = array_filter($optionArray, create_function('$value', 'return trim($value) != "";'));
                        if (count($optionArray) <= 1) {
                            $response['status'] = 0;
                            $response['message'] = "Please add minimum two choices";
                            $flag = false;
                        }
                    }

                    if ($flag === true) {
                        if ($share_on == "CHANNEL") {
                            $share_on = "CHANNEL";
                        } else {
                            $share_on = "POLLFACTORY";
                        }
                        $current_date = date('Y-m-d H:i:s');
                        $end_time = date('Y-m-d H:i:s', strtotime($current_date . "+" . $poll_duration));
                        $connection = ConnectionUtil::getConnection();
                        $connection->autocommit(FALSE);
                        $created = Custom::created();
                        $sql = "INSERT INTO action_questions (user_id, thinapp_id, poll_publish, is_mandatory, poll_duration, share_on_mbroadcast, question_text, action_type_id, share_on, end_time, created, modified) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                        $stmt = $connection->prepare($sql);
                        $stmt->bind_param('ssssssssssss', $user_id, $thin_app_id, $poll_publish, $is_mandatory, $poll_duration, $share_on_mbroadcast, $question, $action_type_id, $share_on, $end_time, $created, $created);
                        if ($stmt->execute()) {
                            $question_id = $stmt->insert_id;
                            $optionArray = array();
                            if (!empty($question_option)) {
                                $optionArray = explode("\n", $question_option);
                                $optionArray = array_filter($optionArray, create_function('$value', 'return trim($value) != "";'));
                            }
                            $option = Custom::createOpitonArray($action_type_id, $question_id, $thin_app_id, $optionArray);
                            $save_choice = 0;
                            foreach ($option as $key => $value) {
                                $sql = "INSERT INTO question_choices (choices, action_question_id, thinapp_id) VALUES (?, ?, ?)";
                                $stmt = $connection->prepare($sql);
                                $stmt->bind_param('sss', $value['choices'], $value['action_question_id'], $value['thinapp_id']);
                                $stmt->execute();
                                $save_choice++;
                            }
                            if ($save_choice > 0) {
                                $connection->commit();
                                $response['status'] = 1;
                                $response['message'] = "Poll add  successfully";
                                $response['data']['question_id'] = $question_id;
                            } else {
                                $connection->rollback();
                                $response['status'] = 0;
                                $response['message'] = "Sorry poll could not add";
                            }
                        } else {
                            $response['status'] = 0;
                            $response['message'] = "Sorry poll could not add";
                        }
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Invalid option param";
                    }
                } catch (Exception $e) {
                    $connection->rollback();
                }
            }
            Custom::sendResponse($response);
        }
        exit();
    }

    public static function share_poll()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $question_id = isset($data['question_id']) ? $data['question_id'] : "";
            $channel_id = isset($data['channel_id']) ? $data['channel_id'] : "";
            $background_data = array();
            $flag = true;

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($question_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid question';
            } else if (empty($channel_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid channel';
            } else {
                try {

                    $query = "select id from channel_messages where channel_id = $channel_id and message_id = $question_id and post_type_status = 'POLL' LIMIT 1";
                    $connection = ConnectionUtil::getConnection();
                    $ticket_list = $connection->query($query);
                    if (!$ticket_list->num_rows) {
                        $connection->autocommit(FALSE);
                        $created = Custom::created();
                        $sql = "UPDATE  action_questions set channel_id =?, modified = ? where id = ?";
                        $stmt_ac = $connection->prepare($sql);
                        $stmt_ac->bind_param('sss', $channel_id, $created, $question_id);


                        $type = 'POLL';
                        $sql = "INSERT INTO channel_messages (channel_id, message_id, post_type_status, created, modified) VALUES (?, ?, ?, ?, ?)";
                        $stmt_cm = $connection->prepare($sql);
                        $stmt_cm->bind_param('sssss', $channel_id, $question_id, $type, $created, $created);

                        $sql = "INSERT INTO message_statics (message_id, list_message_type) VALUES (?, ?)";
                        $stmt_ms = $connection->prepare($sql);
                        $stmt_ms->bind_param('ss', $question_id, $type);

                        if ($stmt_ac->execute() && $stmt_cm->execute() && $stmt_ms->execute()) {
                            $total_par = Custom::totalSubscriberForChannel($channel_id);;
                            $sql = "UPDATE  action_questions set participates_count = ? where id = ?";
                            $stmt_aq = $connection->prepare($sql);
                            $stmt_aq->bind_param('ss', $total_par, $question_id);
                            if ($stmt_aq->execute()) {
                                $connection->commit();
                                $response['status'] = 1;
                                $response['message'] = "Poll shared successfully";

                                $query = "select aq.question_text, c.topic_name from action_questions as aq join channels as c on c.id = aq.channel_id where aq.id = $question_id LIMIT 1";
                                $connection = ConnectionUtil::getConnection();
                                $que_data = $connection->query($query);
                                $que_data = mysqli_fetch_assoc($que_data);

                                $option = array(
                                    'thinapp_id' => $thin_app_id,
                                    'channel_id' => $channel_id,
                                    'question_id' => $question_id,
                                    'flag' => 'POLL',
                                    'title' => mb_strimwidth("Poll - " . $que_data['question_text'], 0, 50, '...'),
                                    'message' => mb_strimwidth("Poll - " . $que_data['question_text'], 0, 50, '...'),
                                    'description' => '',
                                    'chat_reference' => '',
                                    'module_type' => 'POLL',
                                    'module_type_id' => $question_id,
                                    'firebase_reference' => ""
                                );
                                $background_data['notification']['data'] = $option;
                                $background_data['notification']['topic_name'] = $que_data['topic_name'];
                                $background_data['sms'] = true;


                            } else {
                                $response['status'] = 0;
                                $response['message'] = "Sorry poll could not shared";
                            }
                        } else {
                            $response['status'] = 0;
                            $response['message'] = "Sorry poll could not shared";
                        }
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Sorry poll already shared into this channel";
                    }
                } catch (Exception $e) {
                    $connection->rollback();
                }
            }
            Custom::sendResponse($response);
            if (!empty($background_data)) {
                Custom::send_process_to_background();
                /* this function send otp and send process in backround*/
                if (array_key_exists("notification", $background_data)) {
                    Custom::send_topic_notification($background_data['notification']['data'], $background_data['notification']['topic_name'], $thin_app_id);
                }
                if (array_key_exists("sms", $background_data)) {
                    $user_role = Custom::get_user_role_id($user_id);
                    $is_permission = Custom::check_user_permission($thin_app_id, 'POLL_SEND_NOTIFICATION_VIA_SMS');
                    if ($user_role == 5 || $is_permission == "YES") {
                        Custom::sendPollMessage($channel_id, $question_id, $thin_app_id, $user_id);
                    }
                }
            }

        }
        exit();
    }


   public static function send_chat_notification($data = null)
    {

        if (empty($data)) {
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);
        }
        $response = array();
        $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
        $app_key = isset($data['app_key']) ? $data['app_key'] : "";

        $to_firebase_token = isset($data['firebase_token']) ? $data['firebase_token'] : "";
        $owner_firebase_token = isset($data['owner_firebase_token']) ? $data['owner_firebase_token'] : "";
        $firebase_reference = isset($data['firebase_reference']) ? $data['firebase_reference'] : "";
        $from_number = isset($data['from_number']) ? $data['from_number'] : "";
        $to_number = isset($data['to_number']) ? $data['to_number'] : "";
        $to_username = isset($data['to_username']) ? $data['to_username'] : "";
        $message = isset($data['message']) ? $data['message'] : "";
        $notification_for = isset($data['notification_for']) ? $data['notification_for'] : "CHAT";
        $patient_id = isset($data['patient_id']) ? $data['patient_id'] : "0";
        $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : "0";
        $chat_visit_id = isset($data['chat_visit_id']) ? $data['chat_visit_id'] : "0";

        if (empty($thin_app_id)) {
            $response['status'] = 0;
            $response['message'] = 'Invalid thinapp id';
        } else if (empty($app_key)) {
            $response['status'] = 0;
            $response['message'] = 'Invalid app key';
        } else if (empty($to_firebase_token)) {
            $response['status'] = 0;
            $response['message'] = 'Invalid token';
        } else if (empty($from_number)) {
            $response['status'] = 0;
            $response['message'] = 'Invalid number';
        } else if (empty($to_number)) {
            $response['status'] = 0;
            $response['message'] = 'Invalid number';
        } else if (empty($to_username)) {
            $response['status'] = 0;
            $response['message'] = 'Invalid username';
        } else if (empty($firebase_reference)) {
            $response['status'] = 0;
            $response['message'] = 'Invalid refrence';
        } else {


            $user_data = Custom::get_user_by_mobile($thin_app_id, $to_number);


            if (!empty($user_data)) {

                $username = $to_username;
                if (empty($to_number)) {
                    $username = "Chat";
                }


                //if($notification_for=="POST_VISIT"){
                //    $username = $to_username;
                //}else{
                //    $reciver_data = Custom::get_user_by_mobile($thin_app_id, $from_number);
                //    $username = "Chat";
                //    if (!empty($reciver_data)) {
                //        $username = $reciver_data['username'];
                //    }
                //}


                if (empty($message)) {
                    $message = "You have received a new message by $username";
                } else {
                    $message = "$username - " . $message;
                }


                $send_array = array(
                    'title' => 'New Message',
                    'thinapp_id' => $thin_app_id,
                    'message' => mb_strimwidth($message, 0, 50, '...'),
                    'flag' => 'FCHAT',
                    'firebase_reference' => $firebase_reference,
                    'firebase_token' => $owner_firebase_token,
                    'from_number' => $from_number,
                    'to_number' => $to_number,
                    'to_username' => $to_username,
                    'description' => '',
                    'chat_reference' => $firebase_reference,
                    'module_type' => $notification_for,
                    'notification_for' => $notification_for,
                    'patient_id' => $patient_id,
                    'doctor_id' => $doctor_id,
                    'chat_visit_id' => $chat_visit_id,
                    'module_type_id' => 0,
                );
                $response['status'] = 1;
                $response['message'] = "Notification send";
                $response['message_id'] = 1;
            } else {
                $response['status'] = 0;
                $response['message'] = "Invalid request parameter";
            }
        }
        echo json_encode($response);
        if (!empty($user_data) && !empty($send_array)) {
            Custom::send_process_to_background();
            Custom::send_notification_via_token($send_array, [$to_firebase_token], $thin_app_id);
        }
        exit;

    }


    /* poll section end from here */


    public static function create_poll_question_screen()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);

        if (isset($data['app_key'])) {
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $question_id = isset($data['question_id']) ? $data['question_id'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter user id';
            } else if (empty($question_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid question';
            } else {
                $query = "select aq.id as question_id, aq.question_text as question, aq.poll_publish, at.name as action_name, at.id as action_type_id from action_questions as aq join action_types as at on aq.action_type_id = at.id  where aq.id = $question_id and aq.thinapp_id = $thin_app_id limit 1";
                $connection = ConnectionUtil::getConnection();
                $ticket_list = $connection->query($query);
                if ($ticket_list->num_rows) {
                    $ticket_data = mysqli_fetch_assoc($ticket_list);
                    $ticket_data['option'] = Custom::get_question_choice($question_id);
                    $response = $ticket_data;
                    $response['status'] = 1;
                    $response['message'] = "Poll found";
                } else {
                    $response['status'] = 0;
                    $response['message'] = "Sorry no poll found";
                }
            }
            echo json_encode($response);
            exit;
        }
    }


    public static function testFlutterFirebase(){
        $user = Custom::get_user_by_id(2401);
        print_r($user);
        die;
    }


    public static function test()
    {
        $staff_id = "12345";
        $address_id = "67890";
        $thin_app_id = "123789";
        $file_name = "staff_address".$staff_id."_" .$address_id;
        if(!$data = json_decode(WebservicesFunction::readJson($file_name,"doctor"),true)){
            $connection = ConnectionUtil::getConnection();
            $query = "select aa.id as id , aa.address, asa.from_time, asa.to_time from appointment_addresses as aa join appointment_staff_addresses as asa on asa.appointment_address_id = aa.id where asa.appointment_staff_id = $staff_id and asa.appointment_address_id = $address_id AND aa.status = 'ACTIVE' and asa.thinapp_id = $thin_app_id limit 1";
            $connection = ConnectionUtil::getConnection();
            $service_message_list = $connection->query($query);
            if ($service_message_list->num_rows) {
                $data = mysqli_fetch_assoc($service_message_list);
                WebservicesFunction::createJson($file_name,json_encode($data),"CREATE","doctor");
            }
        }
        if (!empty($data)) {
            echo "success";
            return $data;
        }else{
            echo "false";
            return false;
        }                      
    }

    public static function fun_get_subscriber_list($thin_app_id, $user_id, $limit, $offset)
    {

        $connection = ConnectionUtil::getConnection();
        $query = "SELECT  ( select count(sub.id)  from subscribers as sub where sub.channel_id = ch.id and  sub.status = 'SUBSCRIBED' ) as sub_cnt, sub.is_favourite, ch.* FROM subscribers as sub right join channels as ch on sub.channel_id=ch.id WHERE ch.status = 'Y' AND sub.app_id =$thin_app_id AND sub.status ='SUBSCRIBED' and sub.app_user_id=$user_id order by sub.modified desc limit $limit offset $offset";
        $subscriber = $connection->query($query);
        $channel_array = array();
        if ($subscriber->num_rows) {
            $subscriber = mysqli_fetch_all($subscriber, MYSQLI_ASSOC);
            foreach ($subscriber as $key => $channel_data) {
                $channels_arr = array();
                $channels_arr['user_id'] = $channel_data['user_id'];
                $channels_arr['mbroadcast_app_id'] = MBROADCAST_APP_ID;
                $channels_arr['channel_id'] = $channel_data['id'];
                $channels_arr['channel_name'] = $channel_data['channel_name'];
                $channels_arr['channel_image'] = $channel_data['image'];
                $channels_arr['channel_desc'] = $channel_data['channel_desc'];
                $channels_arr['added_on'] = $channel_data['created'];
                $channels_arr['topic_name'] = $channel_data['topic_name'];
                $channels_arr['modified'] = $channel_data['modified'];
                $channels_arr['is_searchable'] = $channel_data['is_searchable'];
                $channels_arr['is_publish_mbroadcast'] = $channel_data['is_publish_mbroadcast'];
                $channels_arr['pending_status'] = "1";
                $channels_arr['subscriber_count'] = (int)$channel_data['sub_cnt'];
                $channels_arr['is_subscribe'] = 1;
                $channels_arr['channel_status'] = $channel_data['channel_status'];
                $channels_arr['is_favourite'] = $channel_data['is_favourite'];
                $channels_arr['is_owner'] = ($channel_data['user_id'] == $user_id) ? "YES" : "NO";
                $channel_array[] = $channels_arr;
            }
        }
        return $channel_array;
    }

    public static function get_subscriber_list()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $app_key = $data['app_key'];
            $mobile = $data['mobile'];
            $user_id = $data['user_id'];
            $thin_app_id = $data['thin_app_id'];
            $offsetAA = $data['offset'];
            $offset = ($data['offset'] * PAGINATION_LIMIT);
            $limit = PAGINATION_LIMIT;
            $response = $response_data = array();
            if ($user_id != '' && $app_key != '' && $thin_app_id != '') {
                $fileName = 'get_subscriber_list_app' . $thin_app_id . '_user' . $user_id;
                $fileData = WebservicesFunction::readJson($fileName);

                $response = array();
                if ($fileData && !empty($fileData)) {
                    $connection = ConnectionUtil::getConnection();
                    $response = array();
                    $query = "select count(sub.id) as sub_count ,sub.channel_id from subscribers sub where sub.channel_id IN (select channel_id from subscribers AS sub_ch  where app_user_id = $user_id  AND  status = 'SUBSCRIBED') group by sub.channel_id";
                    $channel_count = $connection->query($query);
                    if ($channel_count->num_rows) {
                        $channel_count = array_column(mysqli_fetch_all($channel_count, MYSQLI_ASSOC), 'sub_count', 'channel_id');
                        $sliceData = isset($fileData[$offsetAA]) ? $fileData[$offsetAA] : array();
                        if (count($sliceData) == PAGINATION_LIMIT) {
                            /**************SHOW DATA FROM FILE ************/
                            foreach ($sliceData as $key => $subData) {
                                $channel_array[$key] = $subData;
                                $channel_array[$key]['subscriber_count'] = $channel_count[$subData['channel_id']];
                            }
                            $response['status'] = 1;
                            $response['message'] = "Subscribed channels list found";
                            $response['data']['channels'] = $channel_array;
                            $response['list_end'] = false;
                            /**************SHOW DATA FROM FILE END************/
                        } else {
                            $response_data = WebservicesFunction::fun_get_subscriber_list($thin_app_id, $user_id, $limit, $offset);

                            if (!empty($response_data)) {
                                $fileData[$offsetAA] = $response_data;
                                $response['data']['channels'] = $response_data;
                                $response['status'] = 1;
                                $response['message'] = "Subscribed channels list found";
                                if (count($response_data) == PAGINATION_LIMIT) {
                                    $response['list_end'] = false;
                                } else {
                                    $response['list_end'] = true;
                                }
                                WebservicesFunction::createJson($fileName, $fileData, 'CREATE');
                            } else {
                                $response['status'] = 0;
                                $response['message'] = "Subscriber list not found";
                            }
                        }

                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Subscriber list not found";
                    }
                } else {
                    $response_data = WebservicesFunction::fun_get_subscriber_list($thin_app_id, $user_id, $limit, $offset);
                    if (!empty($response_data)) {
                        $fileData[$offsetAA] = $response_data;
                        $response['data']['channels'] = $response_data;
                        $response['status'] = 1;
                        $response['message'] = "Subscribed channels list found";
                        if (count($response_data) == PAGINATION_LIMIT) {
                            $response['list_end'] = false;
                        } else {
                            $response['list_end'] = true;
                        }
                        WebservicesFunction::createJson($fileName, $fileData, 'CREATE');
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Subscriber list not found";
                    }
                }
            } else {
                $response['status'] = 0;
                $response['message'] = "Invalid request parameter";
            }
            echo json_encode($response);
            die;
        }
    }


    public static function fun_get_channel_factory_list($thin_app_id, $user_id, $limit, $offset)
    {
        $connection = ConnectionUtil::getConnection();
        $query = "select  ( select count(sub.id)  from subscribers as sub where sub.channel_id = ch.id and  sub.status = 'SUBSCRIBED' ) as sub_cnt,ch.*  from channels as ch join subscribers as sub on ch.id=sub.channel_id where sub.status and  ch.status='Y' AND ( (ch.channel_status='PUBLIC') OR  (ch.is_searchable='Y' AND ch.app_id = $thin_app_id )) AND ch.id NOT IN (select in_sub.channel_id from subscribers as in_sub where in_sub.app_user_id = $user_id and in_sub.channel_id = ch.id and in_sub.status = 'SUBSCRIBED' ) GROUP BY ch.id order by ch.id desc limit $limit offset $offset";
        $subscriber = $connection->query($query);
        $channel_array = array();
        if ($subscriber->num_rows) {
            $subscriber = mysqli_fetch_all($subscriber, MYSQLI_ASSOC);
            foreach ($subscriber as $key => $channel_data) {
                $channels_arr = array();
                $channels_arr['user_id'] = $channel_data['user_id'];
                $channels_arr['mbroadcast_app_id'] = MBROADCAST_APP_ID;
                $channels_arr['channel_id'] = $channel_data['id'];
                $channels_arr['channel_name'] = $channel_data['channel_name'];
                $channels_arr['channel_image'] = $channel_data['image'];
                $channels_arr['channel_desc'] = $channel_data['channel_desc'];
                $channels_arr['added_on'] = $channel_data['created'];
                $channels_arr['topic_name'] = $channel_data['topic_name'];
                $channels_arr['modified'] = $channel_data['modified'];
                $channels_arr['is_searchable'] = $channel_data['is_searchable'];
                $channels_arr['is_publish_mbroadcast'] = $channel_data['is_publish_mbroadcast'];
                $channels_arr['pending_status'] = "1";
                $channels_arr['subscriber_count'] = (int)$channel_data['sub_cnt'];
                $channels_arr['is_subscribe'] = 1;
                $channels_arr['channel_status'] = $channel_data['channel_status'];
                $channels_arr['is_favourite'] = 'N';//$channel_data['is_favourite'];
                $channels_arr['is_owner'] = ($channel_data['user_id'] == $user_id) ? "YES" : "NO";
                $channel_array[] = $channels_arr;
            }


        }
        return $channel_array;
    }

    public static function get_channel_factory_list_WTIH_CACHE_FILE()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $app_key = $data['app_key'];
            $mobile = $data['mobile'];
            $user_id = $data['user_id'];
            $thin_app_id = $data['thin_app_id'];
            $offsetAA = $data['offset'];
            $offset = ($data['offset'] * PAGINATION_LIMIT);
            $limit = PAGINATION_LIMIT;
            $response = $response_data = array();
            if ($user_id != '' && $app_key != '' && $thin_app_id != '') {
                $fileName = 'get_channel_factory_list' . $thin_app_id . '_user' . $user_id;
                $fileData = WebservicesFunction::readJson($fileName);

                $response = array();
                if ($fileData && !empty($fileData)) {
                    $connection = ConnectionUtil::getConnection();
                    $response = array();
                    $query = "select count(sub.id) as sub_count ,sub.channel_id from subscribers sub where sub.channel_id IN (select ch.id from channels as ch where ch.status='Y' AND ( (ch.channel_status=\"PUBLIC\") OR  (ch.is_searchable='Y' AND ch.app_id = $thin_app_id ))) group by sub.channel_id";
                    $channel_count = $connection->query($query);
                    if ($channel_count->num_rows) {
                        $channel_count = array_column(mysqli_fetch_all($channel_count, MYSQLI_ASSOC), 'sub_count', 'channel_id');
                        $sliceData = isset($fileData[$offsetAA]) ? $fileData[$offsetAA] : array();
                        if (count($sliceData) == PAGINATION_LIMIT) {
                            /**************SHOW DATA FROM FILE ************/
                            foreach ($sliceData as $key => $subData) {
                                $channel_array[$key] = $subData;
                                $channel_array[$key]['subscriber_count'] = $channel_count[$subData['channel_id']];
                            }
                            $response['status'] = 1;
                            $response['message'] = "Factory channels list found";
                            $response['data']['channels'] = $channel_array;
                            $response['list_end'] = false;
                            /**************SHOW DATA FROM FILE END************/
                        } else {
                            $response_data = WebservicesFunction::fun_get_channel_factory_list($thin_app_id, $user_id, $limit, $offset);

                            if (!empty($response_data)) {
                                $fileData[$offsetAA] = $response_data;
                                $response['data']['channels'] = $response_data;
                                $response['status'] = 1;
                                $response['message'] = "Factory channels list found";
                                if (count($response_data) == PAGINATION_LIMIT) {
                                    $response['list_end'] = false;
                                } else {
                                    $response['list_end'] = true;
                                }
                                WebservicesFunction::createJson($fileName, $fileData, 'CREATE');
                            } else {
                                $response['status'] = 0;
                                $response['message'] = "Factory list not found";
                            }
                        }

                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Factory list not found";
                    }
                } else {
                    $response_data = WebservicesFunction::fun_get_channel_factory_list($thin_app_id, $user_id, $limit, $offset);
                    if (!empty($response_data)) {
                        $fileData[$offsetAA] = $response_data;
                        $response['data']['channels'] = $response_data;
                        $response['status'] = 1;
                        $response['message'] = "Factory channels list found";
                        if (count($response_data) == PAGINATION_LIMIT) {
                            $response['list_end'] = false;
                        } else {
                            $response['list_end'] = true;
                        }
                        WebservicesFunction::createJson($fileName, $fileData, 'CREATE');
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Factory list not found";
                    }
                }
            } else {
                $response['status'] = 0;
                $response['message'] = "Invalid request parameter";
            }
            echo json_encode($response);
            die;
        }
    }

    public static function get_channel_factory_list()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $app_key = $data['app_key'];
            $user_id = $data['user_id'];
            $thin_app_id = $data['thin_app_id'];
            $offsetAA = $data['offset'];
            $offset = ($data['offset'] * PAGINATION_LIMIT);
            $limit = PAGINATION_LIMIT;
            $response = $response_data = array();
            if ($user_id != '' && $app_key != '' && $thin_app_id != '') {
                $response = array();
                $connection = ConnectionUtil::getConnection();
                $response = array();
                $response_data = WebservicesFunction::fun_get_channel_factory_list($thin_app_id, $user_id, $limit, $offset);
                if (!empty($response_data)) {
                    $fileData[$offsetAA] = $response_data;
                    $response['data']['channels'] = $response_data;
                    $response['status'] = 1;
                    $response['message'] = "Factory channels list found";
                    if (count($response_data) == PAGINATION_LIMIT) {
                        $response['list_end'] = false;
                    } else {
                        $response['list_end'] = true;
                    }
                } else {
                    $response['status'] = 0;
                    $response['message'] = "Factory list not found";
                }

            } else {
                $response['status'] = 0;
                $response['message'] = "Invalid request parameter";
            }
            echo json_encode($response);
            die;
        }
    }


    public static function fun_get_poll_list($thin_app_id, $user_id, $role_id, $limit, $offset)
    {

        $connection = ConnectionUtil::getConnection();
        $condition_str = "aq.status ='Y'";
        if ($role_id == 5) {
            $condition_str .= " AND aq.thinapp_id = " . $thin_app_id;
        } else {
            $condition_str .= " AND aq.thinapp_id = " . $thin_app_id . " AND aq.share_on='POLLFACTORY'";
        }
        $condition_str .= " AND  end_time > '" . date("Y-m-d H:i:s") . "'";
        $query = "select aq.*, at.name from action_questions as aq join action_types as at on aq.action_type_id= at.id where $condition_str order by id desc limit $limit offset $offset";

        $poll_list = $connection->query($query);
        $response = array();
        if ($poll_list->num_rows) {
            $poll_list = mysqli_fetch_all($poll_list, MYSQLI_ASSOC);
            foreach ($poll_list as $key => $list) {
                $response[$key]['id'] = $list['id'];
                $response[$key]['question_text'] = $list['question_text'];
                $response[$key]['action_type_id'] = $list['action_type_id'];
                $response[$key]['poll_publish'] = $list['poll_publish'];
                $response[$key]['share_on_mbroadcast'] = $list['share_on_mbroadcast'];
                $response[$key]['poll_duration'] = $list['poll_duration'];
                $left_days = explode(" ", $list['poll_duration']);
                $response[$key]['left_time_string'] = ucwords(strtolower($left_days[1]));
                $response[$key]['left_time_int'] = $left_days[0];
                $response[$key]['participates_count'] = $list['participates_count'];
                $response[$key]['response_count'] = $list['response_count'];
                $response[$key]['end_time'] = date('d-m-Y H:i', strtotime($list['end_time']));
                $response[$key]['action_type'] = $list['name'];
            }
        }
        return $response;
    }

    public static function get_poll_list()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $app_key = $data['app_key'];
            $user_id = $data['user_id'];
            $role_id = $data['role_id'];
            $thin_app_id = $data['thin_app_id'];
            $offsetAA = $data['offset'];
            $offset = ($data['offset'] * PAGINATION_LIMIT);
            $limit = PAGINATION_LIMIT;
            $response = $response_data = array();
            if ($user_id != '' && $app_key != '' && $thin_app_id != '') {
                $response = array();
                $response_data = WebservicesFunction::fun_get_poll_list($thin_app_id, $user_id, $role_id, $limit, $offset);
                if (!empty($response_data)) {
                    $fileData[$offsetAA] = $response_data;
                    $response['data']['poll'] = $response_data;
                    $response['status'] = 1;
                    $response['message'] = "Poll list found";
                    if (count($response_data) == PAGINATION_LIMIT) {
                        $response['list_end'] = false;
                    } else {
                        $response['list_end'] = true;
                    }
                } else {
                    $response['status'] = 0;
                    $response['message'] = "Poll list not found";
                }

            } else {
                $response['status'] = 0;
                $response['message'] = "Invalid request parameter";
            }
            echo json_encode($response);
            die;
        }
    }


    public static function fun_get_channel_messages_list($thin_app_id, $user_id, $channel_id, $limit, $offset, $message_id = null, $search = null)
    {

        $connection = ConnectionUtil::getConnection();
        $condition_str = "";

        //$condition_str .= " AND  end_time > '" . date("Y-m-d H:i:s")."'";

        if (!empty($search)) {
            $search = " AND ( m.title like '%$search%' OR m.message like '%$search%') ";
        }
        if (!empty($message_id)) {
            $query = "select cm.* from channel_messages as cm left join messages as m on m.id = cm.message_id and cm.post_type_status ='POST'   where cm.status = 'ACTIVE' AND cm.channel_id = $channel_id and cm.message_id = $message_id $search";

        } else {
            $query = "select cm.* from channel_messages as cm  left join messages as m on m.id = cm.message_id and cm.post_type_status ='POST'  where cm.status = 'ACTIVE' AND cm.channel_id = $channel_id $search order by cm.id desc LIMIT  $offset, $limit";

        }


        $channel_message_list = $connection->query($query);
        $filter_array = array();
        $final_array = array();
        $condition_array = array();
        if ($channel_message_list->num_rows) {
            $channel_message_list = mysqli_fetch_all($channel_message_list, MYSQLI_ASSOC);

            foreach ($channel_message_list as $key => $value) {
                $filter_array[$value['id']]['post_type_status'] = $value['post_type_status'];
                $filter_array[$value['id']]['message_id'] = $value['message_id'];
            }


            //$filter_array = array_column($channel_message_list, 'post_type_status', 'message_id');

            foreach ($filter_array as $key => $value) {
                $condition_array[$value['post_type_status']][] = $value['message_id'];
            }

            if (!empty($condition_array)) {
                $data_array = array();


                foreach ($condition_array as $key => $value) {

                    $limit_cnt = count($value);
                    $value = implode(",", $value);
                    if ($key == "POST" || $key == "BROADCAST") {


                        $post_data_array = array();
                        $query = "select t.name as app_name, ms.*, (ms.total_fb_share+ms.total_twitter_share+ms.total_gplus_share+ms.total_whatsapp_share+ms.total_other_share) as total_share, msg.*, msg.id as msg_id from messages AS msg  join message_statics as ms on msg.id=ms.message_id and ms.list_message_type='$key'  join thinapps as t on t.id = msg.thinapp_id where  msg.id IN ($value) order by msg_id desc limit " . $limit_cnt;
                        $list_query = $connection->query($query);
                        if ($list_query->num_rows) {
                            $post_data_array = mysqli_fetch_all($list_query, MYSQLI_ASSOC);
                            foreach ($post_data_array as $key2 => $post_data) {
                                $data_array[] = WebservicesFunction::channel_message_list_param($key, $post_data, $channel_id, $thin_app_id, $user_id);
                            }

                        }


                    } else if ($key == "POLL") {
                        $query = "select ms.*, aq.*, aq.id as msg_id from action_questions AS aq join message_statics as ms on aq.id=ms.message_id and ms.list_message_type='$key' where aq.id IN ($value) order by msg_id desc limit " . $limit_cnt;
                        $list_query = $connection->query($query);
                        $post_data_array = mysqli_fetch_all($list_query, MYSQLI_ASSOC);
                        foreach ($post_data_array as $key2 => $post_data)
                            $data_array[] = WebservicesFunction::channel_message_list_param($key, $post_data, $channel_id, $thin_app_id, $user_id);

                    } else if ($key == "QUEST" || $key == "BUY" || $key == "BORROW" || $key == "RENT") {
                        $query = "select ms.*, qst.*, qst.id as msg_id from quests AS qst join message_statics as ms on qst.id=ms.message_id and ms.list_message_type='$key' where qst.id IN ($value) order by msg_id desc limit " . $limit_cnt;
                        $list_query = $connection->query($query);
                        $post_data_array = mysqli_fetch_all($list_query, MYSQLI_ASSOC);
                        foreach ($post_data_array as $key2 => $post_data)
                            $data_array[] = WebservicesFunction::channel_message_list_param($key, $post_data, $channel_id, $thin_app_id, $user_id);

                    } else if ($key == "EVENT") {
                        $query = "select ms.*, ev.*, ev.id as msg_id, em.media_path from events AS ev join message_statics as ms on ev.id=ms.message_id and ms.list_message_type='$key' join event_media as em on ev.id=em.event_id and em.is_cover_image='YES' where ev.id IN ($value) order by msg_id desc limit " . $limit_cnt;
                        $list_query = $connection->query($query);
                        $post_data_array = mysqli_fetch_all($list_query, MYSQLI_ASSOC);
                        foreach ($post_data_array as $key2 => $post_data)
                            $data_array[] = WebservicesFunction::channel_message_list_param($key, $post_data, $channel_id, $thin_app_id, $user_id);

                    } else if ($key == "LOSS_FOUND") {
                        $query = "select ms.*, lose.*, lose.id as msg_id from lose_objects AS lose join message_statics as ms on lose.id=ms.message_id and ms.list_message_type='$key' where lose.id IN ($value) order by msg_id desc limit " . $limit_cnt;
                        $list_query = $connection->query($query);
                        $post_data_array = mysqli_fetch_all($list_query, MYSQLI_ASSOC);
                        foreach ($post_data_array as $key2 => $post_data)
                            $data_array[] = WebservicesFunction::channel_message_list_param($key, $post_data, $channel_id, $thin_app_id, $user_id);

                    } else if ($key == "CONFERENCE") {
                        $query = "select ms.*, conf.*, conf.id as msg_id from conferences AS conf join message_statics as ms on conf.id=ms.message_id and ms.list_message_type='$key' where conf.id IN ($value) order by msg_id desc limit " . $limit_cnt;
                        $list_query = $connection->query($query);
                        $post_data_array = mysqli_fetch_all($list_query, MYSQLI_ASSOC);
                        foreach ($post_data_array as $key2 => $post_data)
                            $data_array[] = WebservicesFunction::channel_message_list_param($key, $post_data, $channel_id, $thin_app_id, $user_id);

                    } else if ($key == "SELL") {
                        $query = "select ms.*, sell.*, sell.id as msg_id from sell_items AS sell  join message_statics as ms on sell.id=ms.message_id and ms.list_message_type='$key' join sell_images as si on sell.id = si.sell_item_id and si.is_cover_image='YES' where sell.id IN ($value) order by msg_id desc limit " . $limit_cnt;
                        $list_query = $connection->query($query);
                        $post_data_array = mysqli_fetch_all($list_query, MYSQLI_ASSOC);
                        foreach ($post_data_array as $key2 => $post_data)
                            $data_array[] = WebservicesFunction::channel_message_list_param($key, $post_data, $channel_id, $thin_app_id, $user_id);
                    }

                }
                $new_array = array();
                /* $count =0;
                foreach($filter_array as $key =>$value){
                    $status  = $data_array[$count]['list_message_type'];
                    $message_id  = $data_array[$count]['message_type_id'];
                    if($value['post_type_status'] == $status  && $value['message_id'] == $message_id ){
                        $new_array[] = $data_array[$count];
                    }else{
                        $new_array[] = $data_array[$count];
                    }
                    $count++;
                }*/

                $final_array = $data_array;


            } else {

            }
        }

        return $final_array;
    }

    public static function get_channel_messages_list($data = null)
    {
        $return = true;
        if (empty($data)) {
            $return = false;
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);

        }


        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $app_key = $data['app_key'];
            $user_id = $data['user_id'];
            $channel_id = $data['channel_id'];
            $thin_app_id = $data['thin_app_id'];
            $offsetAA = $data['offset'];
            $offset = ($data['offset'] * PAGINATION_LIMIT);
            $limit = PAGINATION_LIMIT;
            $search = isset($data['search']) ? $data['search'] : "";
            $response = $response_data = array();
            if ($user_id != '' && $app_key != '' && $thin_app_id != '' && $channel_id != 0) {

                $response = array();
                $response_data = WebservicesFunction::fun_get_channel_messages_list($thin_app_id, $user_id, $channel_id, $limit, $offset, null, $search);
                if (!empty($response_data)) {
                    $response['status'] = 1;
                    $response['message'] = "Message list found";
                    $response['data']['message'] = $response_data;
                    /* creadentiona perams */

                } else {
                    $response['status'] = 0;
                    $response['message'] = "No message list found";
                }

                $channel_data = Custom::get_channel_and_subscriber_count($channel_id);
                $channels_arr['channel_id'] = $channel_data['id'];
                $channels_arr['channel_name'] = $channel_data['channel_name'];
                $channels_arr['channel_image'] = $channel_data['image'];
                $channels_arr['channel_desc'] = $channel_data['channel_desc'];
                $channels_arr['subscriber_count'] = $channel_data['subscriber_count'];
                $channels_arr['channel_status'] = $channel_data['channel_status'];
                $channels_arr['subscriber_id'] = ($channel_data['user_id'] == $user_id) ? 1 : 0;
                $response['channel_data'] = $channels_arr;
                $response['permission']['is_owner'] = ($channel_data['user_id'] == $user_id) ? "YES" : "NO";
                $response['permission']['is_collobrator'] = 'NO';
                $response['permission']['coll_role'] = "USER";


            } else {
                $response['status'] = 0;
                $response['message'] = "Invalid request parameter";
            }
            if ($return === true) {
                return json_encode($response);
            } else {
                echo json_encode($response);
            }
            die;
        }
    }


    public static function channel_message_default_param()
    {
        $param_array = array();
        $param_array['short_url'] = null;
        $param_array['message_status'] = null;
        $param_array['thumb_url'] = null;
        $param_array['sent_via'] = null;
        $param_array['message_type'] = null;
        $param_array['db_message_type'] = null;
        $param_array['owner_user_id'] = 0;
        $param_array['is_like'] = null;
        $param_array['total_likes'] = 0;
        $param_array['original_filename'] = null;
        $param_array['total_fb_share'] = 0;
        $param_array['total_twitter_share'] = 0;
        $param_array['total_gplus_share'] = 0;
        $param_array['total_whatsapp_share'] = 0;
        $param_array['total_other_share'] = 0;
        $param_array['total_broadcast_share'] = 0;
        $param_array['total_super_like'] = 0;
        $param_array['total_excellent_like'] = 0;
        $param_array['total_mindblowing_like'] = 0;
        $param_array['total_wow_like'] = 0;
        $param_array['like_type'] = null;
        $param_array['status'] = null;
        $param_array['modified'] = null;
        $param_array['title'] = null;
        $param_array['description'] = null;
        $param_array['event_date'] = null;
        $param_array['venue'] = null;
        return $param_array;
    }


    public static function get_file_name($path)
    {
        if (!empty($path)) {
            $str_array = explode("/", $path);
            $count = count($str_array);
            //return $str_array[$count - 2] . "/" . end($str_array);
            return end($str_array);
        } else {
            return null;
        }
    }


    public static function check_messasge_liked($message_id = null, $user_id = null, $list_type)
    {
        $connection = ConnectionUtil::getConnection();
        $query = "select * from message_actions as ma  where ma.like = 'Y' AND ma.action_by = $user_id AND ma.message_id = $message_id AND ma.list_message_type='$list_type'";
        $channel_message_list = $connection->query($query);
        if ($channel_message_list->num_rows == 1) {
            $row = mysqli_fetch_assoc($channel_message_list);
            return $row['like_type'];
        } else {
            return false;
        }

    }

    public static function is_post_liked($thin_app_id, $action_type, $user_id, $message_id)
    {
        $action_array = Custom::get_message_stats_array($thin_app_id, $user_id, $message_id, $action_type);
        $action_value = $action_type . '-' . $user_id;
        if (!empty($action_array)) {
            if (in_array($action_value, $action_array)) {
                return true;
            } else {
                return false;
            }
        } else {
            return false;
        }
    }


    public static function is_collobrator_for_channel($user_id = null, $channel_id = null, $thinapp_id = null)
    {
        $connection = ConnectionUtil::getConnection();
        $query = "select * from collaborators as coll  where coll.user_id=$user_id AND coll.channel_id = $channel_id AND coll.thinapp_id = $thinapp_id AND coll.status='ACTIVE'";
        $channel_message_list = $connection->query($query);
        if ($channel_message_list->num_rows == 1) {
            return mysqli_fetch_assoc($channel_message_list);
        } else {
            return false;
        }
    }

    public static function getChannelOwner($channel_id)
    {
        $connection = ConnectionUtil::getConnection();
        $query = "select user_id from channels where id=$channel_id";
        $channel_message_list = $connection->query($query);
        if ($channel_message_list->num_rows == 1) {
            $data = mysqli_fetch_assoc($channel_message_list);
            return $data['user_id'];
        } else {
            return 0;
        }
    }

    public static function message_static_param($param_array, $post_data, $user_id, $list_message_type)
    {

        $param_array['msg_id'] = $post_data['id'];
        $param_array['total_likes'] = $post_data['total_likes'];
        $param_array['total_super_like'] = $post_data['total_super_like'];
        $param_array['total_excellent_like'] = $post_data['total_excellent_like'];
        $param_array['total_mindblowing_like'] = $post_data['total_mindblowing_like'];
        $param_array['total_wow_like'] = $post_data['total_wow_like'];
        $param_array['total_fb_share'] = $post_data['total_fb_share'];
        $param_array['total_twitter_share'] = $post_data['total_twitter_share'];
        $param_array['total_gplus_share'] = $post_data['total_gplus_share'];
        $param_array['total_whatsapp_share'] = $post_data['total_whatsapp_share'];
        $param_array['total_other_share'] = $post_data['total_other_share'];
        $param_array['total_broadcast_share'] = $post_data['total_broadcast_share'];
        $like_type = WebservicesFunction::is_post_liked($post_data['thinapp_id'], "LIKE", $user_id, $post_data['id']);
        if ($like_type === true) {
            $param_array['is_like'] = 'Y';
            $param_array['like_type'] = 'LIKE';
        } else {
            $param_array['is_like'] = 'N';
            $param_array['like_type'] = 'DISLIKE';
        }
        return $param_array;

    }

    public static function channel_message_list_param($list_message_type, $post_data, $channel_id, $thinapp_id, $user_id)
    {

        $param_array = array();
        $param_array = WebservicesFunction::channel_message_default_param();
        switch ($list_message_type) {
            case ($list_message_type == 'POST' || $list_message_type == 'BROADCAST'):
                $param_array = $post_data;
                $app_name = $post_data['app_name'];
                $message = $param_array['message'];
                $message .= "\n\nPosted By -\n$app_name";
                $param_array['message'] = ($message);


                $param_array['message_type'] = Custom::checkMessageType($param_array["message_file_url"], $param_array["message_type"]);
                $param_array['channel_id'] = $channel_id;
                $param_array['list_message_type'] = $list_message_type;
                $param_array['message_type_id'] = $post_data['msg_id'];
                $param_array['is_owner'] = ($post_data['owner_user_id'] == $user_id) ? "YES" : "NO";
                $param_array['db_message_type'] = $post_data['message_type'];
                $param_array['multiple_image'] = $post_data['multiple_image'];
                $param_array['created'] = Custom::messageDateFormat($post_data['created']);
                if ($post_data['multiple_image'] == "YES") {
                    $tmp_array = explode(",", $post_data['message_file_url']);
                    $file_array = Custom::getMessageMultiImageData($post_data['message_file_url']);
                    $param_array['message_file_array'] = $file_array;
                    $param_array['message_file_url'] = '';
                    $param_array['db_message_type'] = "MULTI_IMAGE";
                } else {
                    $param_array['file_name'] = WebservicesFunction::get_file_name($post_data['message_file_url']);
                }


                $param_array = WebservicesFunction::message_static_param($param_array, $post_data, $user_id, $list_message_type);
                $is_colobrator = WebservicesFunction::is_collobrator_for_channel($user_id, $channel_id, $thinapp_id);
                if (!empty($is_colobrator)) {
                    $param_array['is_collobrator'] = 'Y';
                    $param_array['coll_role'] = $is_colobrator['role'];
                } else {
                    $param_array['is_collobrator'] = 'N';
                    $param_array['coll_role'] = $is_colobrator;
                }
                break;

            case ($list_message_type == 'QUEST' || $list_message_type == 'BORROW' || $list_message_type == 'BUY' || $list_message_type == 'RENT'):

                $param_array['list_message_type'] = $list_message_type;
                $param_array['message_type_id'] = $post_data['id'];
                $param_array['channel_id'] = $channel_id;
                $param_array['thinapp_id'] = $thinapp_id;
                $param_array['message'] = $post_data['question'];
                $param_array['is_owner'] = ($post_data['user_id'] == $user_id) ? "YES" : "NO";
                $param_array['file_name'] = WebservicesFunction::get_file_name($post_data['image']);
                if (!empty($post_data['image'])) {
                    $param_array['message_type'] = 'IMAGE';
                }
                $param_array['message_file_url'] = $post_data['image'];
                $param_array['created'] = Custom::messageDateFormat($post_data['created']);
                $param_array['created'] = $post_data['created'];
                $param_array = WebservicesFunction::message_static_param($param_array, $post_data, $user_id, $list_message_type);
                $param_array['message_type'] = Custom::checkMessageType($param_array["message_file_url"], $param_array["message_type"]);

                break;

            case ($list_message_type == 'EVENT'):
                $param_array['list_message_type'] = $list_message_type;
                $param_array['message_type_id'] = $post_data['id'];
                $param_array['channel_id'] = $channel_id;
                $param_array['thinapp_id'] = $thinapp_id;
                $param_array['message'] = $post_data['title'];
                $param_array['message_type'] = 'IMAGE';
                $param_array['title'] = $post_data['title'];
                $param_array['description'] = $post_data['description'];
                $param_array['venue'] = $post_data['venue'];
                $param_array['message_file_url'] = $post_data['media_path'];
                $day = date('d', strtotime($post_data['start_datetime']));
                $month = date('M', strtotime($post_data['start_datetime']));
                $param_array['event_date'] = $day . "##" . $month;;
                $param_array['created'] = Custom::messageDateFormat($post_data['created']);
                $param_array['is_owner'] = ($post_data['user_id'] == $user_id) ? "YES" : "NO";
                $param_array['file_name'] = WebservicesFunction::get_file_name($post_data['media_path']);
                $param_array = WebservicesFunction::message_static_param($param_array, $post_data, $user_id, $list_message_type);
                $param_array['message_type'] = Custom::checkMessageType($param_array["message_file_url"], $param_array["message_type"]);

                break;
            case ($list_message_type == 'SELL'):
                $param_array['list_message_type'] = $list_message_type;
                $param_array['message_type_id'] = $post_data['id'];
                $param_array['channel_id'] = $channel_id;
                $param_array['thinapp_id'] = $thinapp_id;
                $param_array['message'] = $post_data['item_name'];
                $param_array['message_type'] = 'IMAGE';
                $image = isset($post_data['path']) ? $post_data['path'] : null;
                $param_array['message_file_url'] = $image;
                $param_array['created'] = Custom::messageDateFormat($post_data['created']);
                $param_array['is_owner'] = ($post_data['user_id'] == $user_id) ? "YES" : "NO";
                $param_array['file_name'] = WebservicesFunction::get_file_name($image);
                $param_array = WebservicesFunction::message_static_param($param_array, $post_data, $user_id, $list_message_type);
                $param_array['message_type'] = Custom::checkMessageType($param_array["message_file_url"], $param_array["message_type"]);

                break;

            case ($list_message_type == 'POLL'):
                $param_array['list_message_type'] = $list_message_type;
                $param_array['message_type_id'] = $post_data['id'];
                $param_array['channel_id'] = $channel_id;
                $param_array['thinapp_id'] = $thinapp_id;
                $param_array['message'] = $post_data['question_text'];
                if (!empty($post_data['question_file_path'])) {
                    $param_array['message_type'] = 'IMAGE';
                }
                $param_array['message_file_url'] = $post_data['question_file_path'];
                $param_array['created'] = Custom::messageDateFormat($post_data['created']);
                $param_array['is_owner'] = ($post_data['user_id'] == $user_id) ? "YES" : "NO";
                $param_array['file_name'] = WebservicesFunction::get_file_name($post_data['question_file_path']);
                $param_array = WebservicesFunction::message_static_param($param_array, $post_data, $user_id, $list_message_type);
                $param_array['message_type'] = Custom::checkMessageType($param_array["message_file_url"], $param_array["message_type"]);

                break;

            case ($list_message_type == 'CONFERENCE'):
                $param_array['list_message_type'] = $list_message_type;
                $param_array['message_type_id'] = $post_data['id'];
                $param_array['channel_id'] = $channel_id;
                $param_array['thinapp_id'] = $thinapp_id;
                $param_array['message'] = $post_data['title'];
                $param_array['message_file_url'] = null;
                $param_array['created'] = $post_data['created'];
                $param_array['is_owner'] = ($post_data['user_id'] == $user_id) ? "YES" : "NO";
                $param_array['file_name'] = null;
                $param_array = WebservicesFunction::message_static_param($param_array, $post_data, $user_id, $list_message_type);
                $param_array['message_type'] = Custom::checkMessageType($param_array["message_file_url"], $param_array["message_type"]);

                break;
            case ($list_message_type == 'LOSS_FOUND'):
                $param_array['list_message_type'] = $list_message_type;
                $param_array['message_type_id'] = $post_data['id'];
                $param_array['channel_id'] = $channel_id;
                $param_array['thinapp_id'] = $thinapp_id;
                $param_array['message'] = $post_data['title'];
                $param_array['message_file_url'] = $post_data['image_url'];
                $param_array['created'] = Custom::messageDateFormat($post_data['created']);
                $param_array['is_owner'] = ($post_data['user_id'] == $user_id) ? "YES" : "NO";
                $param_array['file_name'] = WebservicesFunction::get_file_name($post_data['image_url']);
                $param_array = WebservicesFunction::message_static_param($param_array, $post_data, $user_id, $list_message_type);
                $param_array['message_type'] = Custom::checkMessageType($param_array["message_file_url"], $param_array["message_type"]);

                break;

            default:
                $data = array();
                break;
        }
        return $param_array;
    }


    /* function created by vishu */
    public static function get_my_channel_list()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);

        if (isset($data['app_key'])) {


            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $role_id = isset($data['role_id']) ? $data['role_id'] : "";
            $offsetAA = isset($data['offset']) ? $data['offset'] : "";


            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else if (empty($role_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid role';
            } else if (empty($offsetAA) && $offsetAA != 0) {
                $response['status'] = 0;
                $response['message'] = 'Please enter offset';
            } else {

                $offset = ($data['offset'] * PAGINATION_LIMIT);
                $fileName = 'get_my_channel_list_app' . $thin_app_id . '_user' . $user_id;
                $fileData = WebservicesFunction::readJson($fileName);

                if ($user_id != '' && $app_key != '' && $mobile != '' && $role_id != '' && ($app_key == APP_KEY)) {

                    $response = array();
                    if ($fileData && !empty($fileData)) {
                        $sliceData = isset($fileData[$offsetAA]) ? $fileData[$offsetAA] : array();
                        if (count($sliceData) == PAGINATION_LIMIT) {
                            /**************SHOW DATA FROM FILE ************/
                            $channel = $sliceData;
                            $channel_array = array();
                            $IDs = array_column($channel, 'channel_id');
                            $IDstring = implode("','", $IDs);
                            $IDstring = "'" . $IDstring . "'";
                            $connection = ConnectionUtil::getConnection();
                            $query = "SELECT `channel_id`,count(`id`) AS `subscriber_count` FROM `subscribers` WHERE `channel_id` IN (" . $IDstring . ") and status = 'SUBSCRIBED' GROUP BY `channel_id`";
                            $subscriberRS = $connection->query($query);
                            $subscriberData = mysqli_fetch_all($subscriberRS, MYSQLI_ASSOC);

                            foreach ($channel as $key => $channelData) {
                                $keyID = array_search($channelData['channel_id'], array_column($subscriberData, 'channel_id'));
                                $channel_array[$key] = $channelData;
                                $channel_array[$key]['subscriber_count'] = $subscriberData[$keyID]['subscriber_count'];
                            }
                            $response['status'] = 1;
                            $response['message'] = "Channels list found";
                            $response['data']['channels'] = $channel_array;
                            $response['list_end'] = false;

                            /**************SHOW DATA FROM FILE END************/
                        } else {
                            $response = WebservicesFunction::getMyChannelDbData($app_key, $mobile, $user_id, $thin_app_id, $role_id, $offset, $fileName);

                            if (count($response) == PAGINATION_LIMIT) {
                                $response['list_end'] = false;
                            } else {
                                $response['list_end'] = true;
                            }

                            if (isset($response['data']['channels'])) {
                                $channels_arr = $response['data']['channels'];
                                /****CREATE JSON****/
                                $dataToUpdate = array();
                                foreach ($channels_arr as $dataArr) {
                                    $dataArr['subscriber_count'] = '';
                                    $dataToUpdate[] = $dataArr;
                                }
                                $fileData[$offsetAA] = $dataToUpdate;
                                WebservicesFunction::createJson($fileName, $fileData, 'CREATE');
                                /****CREATE JSON END****/
                            }


                        }
                    } else {
                        $response = WebservicesFunction::getMyChannelDbData($app_key, $mobile, $user_id, $thin_app_id, $role_id, $offset, $fileName);
                        $response['list_end'] = false;
                        if (isset($response['data']['channels'])) {
                            $channels_arr = $response['data']['channels'];
                            /****CREATE JSON****/
                            $dataToUpdate = array();
                            foreach ($channels_arr as $dataArr) {
                                $dataArr['subscriber_count'] = '';
                                $dataUpdate[] = $dataArr;
                            }
                            $dataToUpdate[$offsetAA] = $dataUpdate;
                            WebservicesFunction::createJson($fileName, $dataToUpdate, 'CREATE');
                            /****CREATE JSON END****/
                        }
                    }

                } else {
                    $response['status'] = 0;
                    $response['message'] = "Invalid request parameter";
                    $response['list_end'] = false;
                }
            }
            echo json_encode($response);
            exit;
        }
    }

    /* function created by vishu */
    public static function getMyChannelDbData($app_key, $mobile, $user_id, $thin_app_id, $role_id, $offset, $fileName)
    {

        $mbroadcast_app_id = MBROADCAST_APP_ID;
        if ($role_id == 5 || $thin_app_id == $mbroadcast_app_id) {
            $connection = ConnectionUtil::getConnection();
            /* app functionlity  */
            $channelRS = $connection->query("SELECT ( SELECT count(id) FROM subscribers as s WHERE channel_id =c.id and s.status = 'SUBSCRIBED' ) AS subscriber_count, c.* FROM channels as c WHERE c.user_id = '$user_id' AND c.status = 'Y' ORDER BY c.id DESC LIMIT " . PAGINATION_LIMIT . " OFFSET $offset");
            $channel = mysqli_fetch_all($channelRS, MYSQLI_ASSOC);
            $channel_array = array();
            if (!empty($channel)) {

                foreach ($channel as $key => $channel_data) {
                    $channels_arr[$key]['user_id'] = $channel_data['user_id'];
                    $channels_arr[$key]['mbroadcast_app_id'] = $mbroadcast_app_id;
                    $channels_arr[$key]['channel_id'] = $channel_data['id'];
                    $channels_arr[$key]['channel_name'] = $channel_data['channel_name'];
                    $channels_arr[$key]['channel_image'] = $channel_data['image'];
                    $channels_arr[$key]['channel_desc'] = $channel_data['channel_desc'];
                    $channels_arr[$key]['added_on'] = $channel_data['created'];
                    $channels_arr[$key]['topic_name'] = $channel_data['topic_name'];
                    $channels_arr[$key]['modified'] = $channel_data['modified'];
                    $channels_arr[$key]['is_searchable'] = $channel_data['is_searchable'];
                    $channels_arr[$key]['is_publish_mbroadcast'] = $channel_data['is_publish_mbroadcast'];
                    $channels_arr[$key]['pending_status'] = "1";
                    $channels_arr[$key]['subscriber_count'] = $channel_data['subscriber_count'];
                    $channels_arr[$key]['is_subscribe'] = 1;
                    $channels_arr[$key]['channel_status'] = $channel_data['channel_status'];
                    $channels_arr[$key]['is_favourite'] = 'N';
                }
                $response['status'] = 1;
                $response['message'] = "Channels list found";
                $response['data']['channels'] = $channels_arr;

            } else {
                $response['status'] = 0;
                $response['message'] = "Sorry you have no channel!";
            }
        } else {
            /* this channel list show list if this user colobroator for this */

            $connection = ConnectionUtil::getConnection();
            /* app functionlity  */
            $collaboratorRS = $connection->query("SELECT `channel_id`,`role` FROM `collaborators` WHERE `user_id` = '$user_id' AND `thinapp_id` = '$thin_app_id' AND `status` = 'ACTIVE' LIMIT " . PAGINATION_LIMIT . " OFFSET $offset");
            $collaborator_channel_list = mysqli_fetch_all($collaboratorRS, MYSQLI_ASSOC);

            if (!empty($collaborator_channel_list)) {
                $channelIds = array_column($collaborator_channel_list, 'channel_id');
                $channelIdsString = implode("','", $channelIds);
                $channelIdsString = "'" . $channelIdsString . "'";

                $channelRole = array_column($collaborator_channel_list, 'role');
                $channelRoleArr = array_combine($channelIds, $channelRole);

                $channelRS = $connection->query("SELECT * FROM `channels` WHERE `id` IN (" . $channelIdsString . ") AND `status` = 'Y'");
                $channel = mysqli_fetch_all($channelRS, MYSQLI_ASSOC);
                $channel_array = array();
                if (!empty($channel)) {

                    $IDs = array_column($channel, 'id');
                    $IDstring = implode("','", $IDs);
                    $IDstring = "'" . $IDstring . "'";
                    $subscriberRS = $connection->query("SELECT `channel_id`,count(`id`) AS `subscriber_count` FROM `subscribers` WHERE `channel_id` IN (" . $IDstring . ") GROUP BY `channel_id`");
                    $subscriberData = mysqli_fetch_all($subscriberRS, MYSQLI_ASSOC);

                    foreach ($channel as $key => $channel_data) {
                        $channels_arr[$key]['user_id'] = $channel_data['user_id'];
                        $channels_arr[$key]['channel_id'] = $channel_data['id'];
                        $channels_arr[$key]['channel_name'] = $channel_data['channel_name'];
                        $channels_arr[$key]['channel_image'] = $channel_data['image'];
                        $channels_arr[$key]['channel_desc'] = $channel_data['channel_desc'];
                        $channels_arr[$key]['added_on'] = $channel_data['created'];
                        $channels_arr[$key]['topic_name'] = $channel_data['topic_name'];
                        $channels_arr[$key]['modified'] = $channel_data['modified'];
                        $channels_arr[$key]['is_searchable'] = $channel_data['is_searchable'];
                        $channels_arr[$key]['is_publish_mbroadcast'] = $channel_data['is_publish_mbroadcast'];
                        $channels_arr[$key]['pending_status'] = "1";
                        $keyID = array_search($channel_data['id'], array_column($subscriberData, 'channel_id'));
                        $channels_arr[$key]['subscriber_count'] = $subscriberData[$keyID]['subscriber_count'];
                        $channels_arr[$key]['is_subscribe'] = 1;
                        $channels_arr[$key]['channel_status'] = $channel_data['channel_status'];
                        $channels_arr[$key]['is_favourite'] = 'Y';
                        $channels_arr[$key]['is_collobrator'] = 'Y';
                        $channels_arr[$key]['coll_role'] = $channelRoleArr[$channel_data['id']];
                        $channels_arr[$key]['is_favourite'] = 'Y';
                    }
                    $response['status'] = 1;
                    $response['message'] = "Channels list found";
                    $response['data']['channels'] = $channels_arr;

                } else {
                    $response['status'] = 0;
                    $response['message'] = "Sorry you have no channel!";
                }
            } else {
                $response['status'] = 0;
                $response['message'] = "Sorry you have no channel!";
            }
        }

        return $response;


    }


    /* appointment services start here */

    /*public static function appointment_add_staff_profile()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $name = isset($data['name']) ? $data['name'] : "";
            $sub_title = isset($data['sub_title']) ? $data['sub_title'] : "";
            $profile_photo = isset($data['profile_photo']) ? $data['profile_photo'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $address = isset($data['address']) ? $data['address'] : "";
            $country_code = isset($data['country_code']) ? $data['country_code'] : "";
            $description = isset($data['description']) ? $data['description'] : "";
            $enable_chat = isset($data['enable_chat']) ? $data['enable_chat'] : "";
            $experience = isset($data['experience']) ? $data['experience'] : "";

            if (empty($name)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter name';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app';
            } else if (empty($sub_title)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter sub title';
            } else if (empty($profile_photo)) {
                $response['status'] = 0;
                $response['message'] = 'Please upload profile photo';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter mobile number';
            } else if (empty($country_code)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter country code';
            } else if (empty($enable_chat)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid enable chat option';
            } else {
                try {

                    $connection = ConnectionUtil::getConnection();
                    $connection->autocommit(FALSE);
                    $created = Custom::created();
                    $working_days = Custom::getAllAppointmentDay();
                    if(!empty($working_days)){
                        $is_staff_exist = WebservicesFunction::get_staff_id_by_mobile($mobile,$thin_app_id);
                        if(empty($is_staff_exist)){

                            $app_user_id = Custom::get_user_by_mobile($thin_app_id, $mobile);
                            $app_user_id = !empty($app_user_id)?$app_user_id['id']:0;
                            $profile_photo = Custom::check_image_path_string($profile_photo);
                            $sql = "INSERT INTO appointment_staffs (user_id, thinapp_id, experience, name,  sub_title, profile_photo, address, mobile, country_code, description, enable_chat, created, modified) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                            $stmt = $connection->prepare($sql);
                            $stmt->bind_param('sssssssssssss', $app_user_id, $thin_app_id, $experience, $name,  $sub_title, $profile_photo, $address, $mobile, $country_code, $description, $enable_chat, $created, $created);
                            if($stmt->execute()){
                                $app_staff_id = $stmt->insert_id;
                                $saved_hours =array();
                                foreach ($working_days as $key => $day) {
                                    $day_id = $day['id'];
                                    $time_from = APPOINTMENT_WORKING_START_TIME;
                                    $time_to = APPOINTMENT_WORKING_END_TIME;
                                    $sql = "INSERT INTO appointment_staff_hours (thinapp_id, user_id, appointment_staff_id, appointment_day_time_id,  time_from, time_to, created, modified) VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
                                    $stmt_hour = $connection->prepare($sql);
                                    $stmt_hour->bind_param('ssssssss', $thin_app_id, $user_id, $app_staff_id, $day_id,  $time_from, $time_to, $created, $created);
                                    $saved_hours[] = $stmt_hour->execute();
                                }
                                if (!in_array(false,$saved_hours)){
                                    $connection->commit();
                                    $response['status'] = 1;
                                    $response['message'] = "Doctor add successfully";
                                    $response['data']['staff_id'] = $app_staff_id;
                                } else {
                                    $response['status'] = 0;
                                    $response['message'] = "Sorry doctor could not add";
                                }
                            }else{
                                $response['status'] = 0;
                                $response['message'] = "Sorry doctor could not add";
                            }
                        }else{
                            $response['status'] = 0;
                            $response['message'] = "Doctor already registered";
                        }
                    }else{
                        $response['status'] = 0;
                        $response['message'] = "Sorry no working day available";
                    }

                } catch (Exception $e) {
                    $connection->rollback();
                }
            }
            Custom::sendResponse($response);
        }
        exit();

    }*/

    public static function load_quick_appointment($data = null, $return = false)
    {
        if (empty($data)) {
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);

        }
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $role_id = isset($data['role_id']) ? $data['role_id'] : "";
            $appointment_user_role = isset($data['appointment_user_role']) ? $data['appointment_user_role'] : "";
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : "";
            $branch_id = isset($data['branch_id']) ? $data['branch_id'] : 0;
            $app_main_category = isset($data['app_main_category']) ? $data['app_main_category'] : 'DOCTOR';
            $customer_list = isset($data['customer_list']) ? $data['customer_list'] : 'YES';
            $background = array();

            if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user';
            } else if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else if (empty($role_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid role';
            } else {

                $condition = $branch_condition = "";

                if (!empty($doctor_id)) {
                    $condition .= " AND ass.appointment_staff_id = " . $doctor_id;
                }

                if (!empty($branch_id) && $app_main_category == "HOSPITAL") {
                    $condition .= " AND aa.id = $branch_id";
                }
				$condition .= " AND app_staff.show_time_slot_to_patient = 'YES' ";

            	$emr_appointment = ($role_id==5)?"'YES' AS allow_emergency_appointment":"app_staff.allow_emergency_appointment";
                $sub_query = "(SELECT s.allow_block_appointment_slot FROM appointment_staffs AS s WHERE s.staff_type='RECEPTIONIST' AND s.STATUS='ACTIVE' AND s.user_id =$user_id AND s.thinapp_id = $thin_app_id LIMIT 1)";
                 $query = "select app_staff.allow_upcoming_days_booking, app_staff.show_appointment_time, app_staff.show_appointment_token, IFNULL($sub_query,'NO') as allow_block_appointment_slot, app_staff.is_audio_consulting, app_staff.is_chat_consulting, app_staff.is_online_consulting, app_staff.is_offline_consulting,  t.show_expire_token_slot, app_staff.emergency_appointment_fee, $emr_appointment,  app_ser.service_validity_time, app_staff.show_fees, app_ser.service_slot_duration, app_staff.id as doctor_id, app_staff.name as doctor_name,  app_staff.profile_photo, app_ser.name as service_name, SUBSTRING_INDEX(app_staff.experience,'.',1) as year ,SUBSTRING_INDEX(app_staff.experience,'.',-1) as month , app_ser.service_amount, app_ser.video_consulting_amount, app_ser.audio_consulting_amount, app_ser.chat_consulting_amount,  app_staff.sub_title as education, app_staff.registration_number  from appointment_staff_services as ass join appointment_services as app_ser on ass.appointment_service_id = app_ser.id and app_ser.status ='ACTIVE' join appointment_staffs as app_staff on app_staff.id = ass.appointment_staff_id AND app_staff.status ='ACTIVE' and app_staff.staff_type ='DOCTOR' join appointment_staff_addresses as asa on asa.appointment_staff_id = app_staff.id  join appointment_addresses as aa on aa.id = asa.appointment_address_id and aa.status ='ACTIVE'  JOIN thinapps AS t ON t.id = ass.thinapp_id where  ass.thinapp_id = $thin_app_id and app_staff.visible_for IN('BOTH','APP') $condition  group by app_staff.id";

				
                $connection = ConnectionUtil::getConnection();
                $list_obj = $connection->query($query);
                if ($list_obj->num_rows) {


                    $list = $new_list = mysqli_fetch_all($list_obj, MYSQLI_ASSOC);

                    $response['status'] = 1;
                    $response['message'] = "Data found";
                    $response['data']['doctor_list'] = $list;
                    $response['data']['address_list'] = array();
                    $response['data']['appointment_slot'] = array();
                    $show_expire_token_slot = $list[0]['show_expire_token_slot'];
                    $date_slot = array();

                    $appointment_user_role = !empty($appointment_user_role) ? $appointment_user_role : Custom::get_appointment_role($mobile, $thin_app_id, $role_id);
                    $expired_slots = ($show_expire_token_slot == "YES" && in_array($appointment_user_role, array('ADMIN', 'RECEPTIONIST', 'DOCTOR', 'STAFF'))) ? true : false;
                    $response['data']['customer_list']=array();
                    if ($customer_list == "YES") {
                    	$customer_limit = ($thin_app_id==588)?10:"";
                        $response['data']['customer_list'] = Custom::get_customer_list_by_mobile($thin_app_id, $mobile, $role_id, true,$customer_limit);
                    }
                    $address_id = 0;
                    foreach ($list as $key => $doctor) {
                        if ($doctor_id == 0) {
                            if ($key == 0) {
                                $doctor_id = $doctor['doctor_id'];
                                $address = Custom::get_staff_address_list($doctor_id, $thin_app_id);
                                $response['data']['address_list'] = !empty($address) ? $address : array();
                                foreach ($address as $add_key => $add_val) {
                                    if ($add_key == 0) {
                                        $booking_date = date('Y-m-d');
                                        $response['data']['appointment_date'] = $booking_date;
                                        $address_id = $add_val['address_id'];
                                        $response['data']['appointment_slot'] = Custom::load_doctor_slot_by_address($booking_date, $doctor_id, $doctor['service_slot_duration'], $thin_app_id, $add_val['address_id'], false, $appointment_user_role, true, $expired_slots);
                                        $blocked_array = Custom::get_doctor_blocked_slot($connection, $thin_app_id, $add_val['address_id'], $doctor_id, $booking_date);
                                        $response['data']['blocked_slot'] = !empty($blocked_array) ? implode(",", $blocked_array) : "";
                                    }
                                }
                            }
                        } else {
                            if ($doctor_id == $doctor['doctor_id']) {
                                $address = Custom::get_staff_address_list($doctor_id, $thin_app_id);
                                $response['data']['address_list'] = !empty($address) ? $address : array();
                                foreach ($address as $add_key => $add_val) {
                                    if ($add_key == 0) {
                                        $booking_date = date('Y-m-d');
                                        $response['data']['appointment_date'] = $booking_date;
                                        $address_id = $add_val['address_id'];
                                        $response['data']['appointment_slot'] = Custom::load_doctor_slot_by_address($booking_date, $doctor_id, $doctor['service_slot_duration'], $thin_app_id, $add_val['address_id'], false, $appointment_user_role, true, $expired_slots);
                                        $blocked_array = Custom::get_doctor_blocked_slot($connection, $thin_app_id, $add_val['address_id'], $doctor_id, $booking_date);
                                        $response['data']['blocked_slot'] = !empty($blocked_array) ? implode(",", $blocked_array) : "";
                                    }
                                }
                            }
                        }

                    }


                    $begin = new DateTime(date('Y-m-d'));
                	$allow_upcoming_days_booking = 15;
                    if(isset($list[0]['allow_upcoming_days_booking'])){
                        $allow_upcoming_days_booking = $list[0]['allow_upcoming_days_booking'];
                    }
                    $end = new DateTime(date('Y-m-d', strtotime("+$allow_upcoming_days_booking Days")));
                
                	
                	/* tmp condition for mirnal joshi doctor */
                    $currentDateObject = date('Y-m-d');
                    if($thin_app_id==904 && strtotime($currentDateObject) < strtotime("2023-04-18")){
                        $begin = new DateTime('2023-04-18');
                        $end = new DateTime('2023-04-24');
                    }
                
                
                
                    $block_date = Custom::get_doctor_blocked_date($thin_app_id, $address_id, $doctor_id, 50, $begin);

                    $daterange = new DatePeriod($begin, new DateInterval('P1D'), $end);
                    $current_date = date('d-D-M-Y');
                    foreach ($daterange as $key => $date) {
                        $new_date = $date->format("d-D-M-Y");
                        $date_slot[$key]['date'] = implode("##", explode("-", $new_date));
                        $date_slot[$key]['is_selected'] = ($new_date == $current_date) ? "YES" : "NO";
                        $date_slot[$key]['is_date_blocked'] = in_array($date->format("Y-m-d"), $block_date) ? "YES" : "NO";
                    }
                    $response['data']['day_list'] = $date_slot;

                } else {
                    $response['status'] = 0;
                    $response['message'] = "This slot is not available";
                }
            }
            if ($return === true) {
                return json_encode($response);
            } else {
                Custom::sendResponse($response);
            }


        }
        exit;
    }

    public static function load_quick_appointment_for_ivr($data = null, $return = false)
    {


        if (empty($data)) {
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);

        }

        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $code = isset($data['code']) ? $data['code'] : "";
            $role_id = isset($data['role_id']) ? $data['role_id'] : "";
            $appointment_user_role = isset($data['appointment_user_role']) ? $data['appointment_user_role'] : "";
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : "";
            $branch_id = isset($data['branch_id']) ? $data['branch_id'] : 0;
            $app_main_category = isset($data['app_main_category']) ? $data['app_main_category'] : 'DOCTOR';
            $customer_list = isset($data['customer_list']) ? $data['customer_list'] : 'YES';
            $background = array();

            if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user';
            } else if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else if (empty($role_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid role';
            } else {

                $condition = $branch_condition = "";

                if (!empty($doctor_id)) {
                    $condition .= " AND ass.appointment_staff_id = " . $doctor_id;
                }

                if (!empty($branch_id) && $app_main_category == "HOSPITAL") {
                    $condition .= " AND aa.id = $branch_id";
                }

                $query = "select app_ser.service_validity_time, app_staff.show_fees, app_ser.service_slot_duration, app_staff.id as doctor_id, app_staff.name as doctor_name,  app_staff.profile_photo, app_ser.name as service_name, SUBSTRING_INDEX(app_staff.experience,'.',1) as year ,SUBSTRING_INDEX(app_staff.experience,'.',-1) as month , app_ser.service_amount, app_staff.sub_title as education  from appointment_staff_services as ass join appointment_services as app_ser on ass.appointment_service_id = app_ser.id and app_ser.status ='ACTIVE' join appointment_staffs as app_staff on app_staff.id = ass.appointment_staff_id AND app_staff.status ='ACTIVE' and app_staff.staff_type ='DOCTOR' join appointment_staff_addresses as asa on asa.appointment_staff_id = app_staff.id  join appointment_addresses as aa on aa.id = asa.appointment_address_id and aa.status ='ACTIVE'  where  ass.thinapp_id = $thin_app_id $condition  group by app_staff.id";
            
         

                $connection = ConnectionUtil::getConnection();
                $list_obj = $connection->query($query);
                if ($list_obj->num_rows) {


                    $list = $new_list = mysqli_fetch_all($list_obj, MYSQLI_ASSOC);
                    if ($app_main_category == 'DOCTOR') {

                        foreach ($list as $key => $doctor) {
                            $new_list[$key] = $doctor;
                            if ($doctor['show_fees'] == 'NO') {
                                $new_list[$key]['service_amount'] = '***';
                            }
                        }
                        $list = $new_list;

                    }

                    $response['status'] = 1;
                    $response['message'] = "Data found";
                    $response['data']['doctor_list'] = $list;
                    $response['data']['address_list'] = array();
                    $response['data']['appointment_slot'] = array();
                    $date_slot = array();

                    $appointment_role = !empty($appointment_user_role) ? $appointment_user_role : Custom::get_appointment_role($mobile, $thin_app_id, $role_id);


                    if ($customer_list == "YES") {

                        $response['data']['customer_list'] = Custom::get_customer_list_by_mobile($thin_app_id, $mobile, $role_id, true);
                    }
                    $address_id = 0;
                    foreach ($list as $key => $doctor) {
                        if ($doctor_id == 0) {
                            if ($key == 0) {
                                $doctor_id = $doctor['doctor_id'];
                                $address = Custom::get_staff_address_list($doctor_id, $thin_app_id);
                                $response['data']['address_list'] = !empty($address) ? $address : array();
                                foreach ($address as $add_key => $add_val) {
                                    if ($add_key == 0) {
                                        $booking_date = date('Y-m-d');
                                        $response['data']['appointment_date'] = $booking_date;
                                        $address_id = $add_val['address_id'];
                                        $response['data']['appointment_slot'] = Custom::load_doctor_slot_by_address_for_ivr($code, $booking_date, $doctor_id, $doctor['service_slot_duration'], $thin_app_id, $add_val['address_id']);
                                        $blocked_array = Custom::get_doctor_blocked_slot($connection, $thin_app_id, $add_val['address_id'], $doctor_id, $booking_date);
                                        $response['data']['blocked_slot'] = !empty($blocked_array) ? implode(",", $blocked_array) : "";
                                    }
                                }
                            }
                        } else {
                            if ($doctor_id == $doctor['doctor_id']) {
                                $address = Custom::get_staff_address_list($doctor_id, $thin_app_id);
                                $response['data']['address_list'] = !empty($address) ? $address : array();
                                foreach ($address as $add_key => $add_val) {
                                    if ($add_key == 0) {
                                        $booking_date = date('Y-m-d');
                                        $response['data']['appointment_date'] = $booking_date;
                                        $address_id = $add_val['address_id'];
                                        $response['data']['appointment_slot'] = Custom::load_doctor_slot_by_address_for_ivr($code, $booking_date, $doctor_id, $doctor['service_slot_duration'], $thin_app_id, $add_val['address_id']);
                                        $blocked_array = Custom::get_doctor_blocked_slot($connection, $thin_app_id, $add_val['address_id'], $doctor_id, $booking_date);
                                        $response['data']['blocked_slot'] = !empty($blocked_array) ? implode(",", $blocked_array) : "";
                                    }
                                }
                            }
                        }

                    }


                    $begin = new DateTime(date('Y-m-d'));
                    $end = new DateTime(date('Y-m-d', strtotime("+15 Days")));
                    $block_date = Custom::get_doctor_blocked_date($thin_app_id, $address_id, $doctor_id, 15, $begin);

                    $daterange = new DatePeriod($begin, new DateInterval('P1D'), $end);
                    $current_date = date('d-D-M-Y');
                    foreach ($daterange as $key => $date) {
                        $new_date = $date->format("d-D-M-Y");
                        $date_slot[$key]['date'] = implode("##", explode("-", $new_date));
                        $date_slot[$key]['is_selected'] = ($new_date == $current_date) ? "YES" : "NO";
                        $date_slot[$key]['is_date_blocked'] = in_array($date->format("Y-m-d"), $block_date) ? "YES" : "NO";

                    }
                    $response['data']['day_list'] = $date_slot;

                } else {
                    $response['status'] = 0;
                    $response['message'] = "This slot is not available";
                }
            }


            if ($return === true) {
                return json_encode($response);
            } else {
                Custom::sendResponse($response);
            }

        }
        exit;
    }


    public static function load_doctor_schedule_appointment($data = null)
    {


        if (empty($data)) {
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);

        }

        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $role_id = isset($data['role_id']) ? $data['role_id'] : "";
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : "";
            $appointment_user_role = isset($data['appointment_user_role']) ? $data['appointment_user_role'] : "";
            $app_main_category = isset($data['app_main_category']) ? $data['app_main_category'] : "";
            $branch_id = isset($data['branch_id']) ? $data['branch_id'] : 0;
            $send_appointment_list = isset($data['send_appointment_list']) ? $data['send_appointment_list'] : 'YES';
            $background = array();

            if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user';
            } else if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else if (empty($role_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid role';
            } else {

                $condition = $branch_condition = "";
                if ($appointment_user_role == "STAFF") {
                    if (empty($doctor_id)) {
                        $doctor_id = WebservicesFunction::get_staff_id_by_mobile($mobile, $thin_app_id);
                    }
                    $condition = " AND ass.appointment_staff_id = " . $doctor_id;
                }


                if (!empty($branch_id) && $app_main_category == "HOSPITAL") {
                    $branch_condition = " AND asa.appointment_address_id = $branch_id";
                }
                $smart_clinic = (Custom::check_app_enable_permission($thin_app_id, 'SMART_CLINIC'))?"YES":"NO";
                $query = "select '$smart_clinic' AS smart_clinic, app_ser.service_slot_duration, app_staff.show_fees, app_staff.id as doctor_id, app_staff.name as doctor_name,  app_staff.profile_photo, app_ser.name as service_name, SUBSTRING_INDEX(app_staff.experience,'.',1) as year ,SUBSTRING_INDEX(app_staff.experience,'.',-1) as month , app_ser.service_amount, app_staff.sub_title as education  from appointment_staff_services as ass join appointment_services as app_ser on ass.appointment_service_id = app_ser.id and app_ser.status = 'ACTIVE' join appointment_staffs as app_staff on app_staff.id = ass.appointment_staff_id and app_staff.staff_type = 'DOCTOR' AND app_staff.status = 'ACTIVE' join appointment_staff_addresses as asa on asa.appointment_staff_id = app_staff.id join appointment_addresses as app_add on app_add.id = asa.appointment_address_id and app_add.status = 'ACTIVE' $branch_condition where  ass.thinapp_id = $thin_app_id $condition group by app_staff.id";
                $connection = ConnectionUtil::getConnection();
                $list_obj = $connection->query($query);
                if ($list_obj->num_rows) {
                    $list = mysqli_fetch_all($list_obj, MYSQLI_ASSOC);
                    $response['status'] = 1;
                    $response['message'] = "Data found";
                    $response['data']['doctor_list'] = $list;
                    $response['data']['address_list'] = array();
                    $response['data']['appointment_slot'] = array();
                    $response['data']['appointment_list'] = array();
                    $response['data']['appointment_counts'] = array();
                    $date_sloa = array();
                    $block_date_limit = 0;
                    $appointment_role = !empty($appointment_user_role) ? $appointment_user_role : Custom::get_appointment_role($mobile, $thin_app_id, $role_id);
                    if ($appointment_role == 'ADMIN' || $appointment_role == 'STAFF') {
                        $begin = new DateTime(date('Y-m-d', strtotime("-1 Months")));
                        $end = new DateTime(date('Y-m-d', strtotime("+2 Months")));
                        $block_date_limit = 90;
                    } else {
                        $begin = new DateTime(date('Y-m-d'));
                        $end = new DateTime(date('Y-m-d', strtotime("+15 Days")));
                        $block_date_limit = 15;
                    }

                    $address_id = 0;
                    foreach ($list as $key => $doctor) {
                        if ($doctor_id == 0) {
                            if ($key == 0) {
                                $doctor_id = $doctor['doctor_id'];
                                $address = Custom::get_staff_address_list($doctor_id, $thin_app_id);
                                $response['data']['address_list'] = !empty($address) ? $address : array();
                                foreach ($address as $add_key => $add_val) {
                                    if ($add_key == 0) {
                                        $booking_date = date('Y-m-d');
                                        $response['data']['appointment_date'] = $booking_date;
                                        $date_string = date("d-D-M-Y", strtotime($booking_date));
                                        $response['data']['date_string'] = implode("##", explode("-", $date_string));
                                        $address_id = $add_val['address_id'];
                                        $response['data']['appointment_slot'] = Custom::load_doctor_slot_by_address($booking_date, $doctor_id, $doctor['service_slot_duration'], $thin_app_id, $add_val['address_id']);
                                        if ($send_appointment_list == "YES") {
                                            $response['data']['appointment_list'] = Custom::get_doctor_appointment_list($connection, $thin_app_id, $doctor_id, $add_val['address_id'], $booking_date, "TOTAL",0,"CUSTOMER",null,null,$appointment_role);
                                        }

                                        $response['data']['appointment_counts'] = Custom::getDoctorAppointmentCountByAddress($connection, $thin_app_id, $doctor_id, $add_val['address_id'], $booking_date);
                                    }
                                }
                            }
                        } else {
                            if ($doctor_id == $doctor['doctor_id']) {
                                $doctor_id = $doctor['doctor_id'];
                                $address = Custom::get_staff_address_list($doctor_id, $thin_app_id);
                                $response['data']['address_list'] = !empty($address) ? $address : array();
                                foreach ($address as $add_key => $add_val) {
                                    if ($add_key == 0) {
                                        $booking_date = date('Y-m-d');
                                        $response['data']['appointment_date'] = $booking_date;
                                        $response['data']['appointment_date'] = $booking_date;
                                        $date_string = date("d-D-M-Y", strtotime($booking_date));
                                        $response['data']['date_string'] = implode("##", explode("-", $date_string));
                                        $address_id = $add_val['address_id'];
                                        $response['data']['appointment_slot'] = Custom::load_doctor_slot_by_address($booking_date, $doctor_id, $doctor['service_slot_duration'], $thin_app_id, $add_val['address_id']);
                                        if ($send_appointment_list == "YES") {
                                            $response['data']['appointment_list'] = Custom::get_doctor_appointment_list($connection, $thin_app_id, $doctor_id, $add_val['address_id'], $booking_date, "TOTAL",0,"CUSTOMER",null,null,$appointment_role);
                                        }
                                        $response['data']['appointment_counts'] = Custom::getDoctorAppointmentCountByAddress($connection, $thin_app_id, $doctor_id, $add_val['address_id'], $booking_date);
                                    }
                                }
                            }
                        }

                    }

                    $block_date = Custom::get_doctor_blocked_date($thin_app_id, $address_id, $doctor_id, $block_date_limit, $begin);
                    $daterange = new DatePeriod($begin, new DateInterval('P1D'), $end);
                    $current_date = date('d-D-M-Y');
                    foreach ($daterange as $key => $date) {
                        $new_date = $date->format("d-D-M-Y");

                        $date_sloa[$key]['date'] = implode("##", explode("-", $new_date));
                        $date_sloa[$key]['is_date_blocked'] = in_array($date->format("Y-m-d"), $block_date) ? "YES" : "NO";
                        $date_sloa[$key]['is_selected'] = ($new_date == $current_date) ? "YES" : "NO";

                    }
                    $response['data']['day_list'] = $date_sloa;

                } else {
                    $response['status'] = 0;
                    $response['message'] = "This slot is not available";
                }


            }
            Custom::sendResponse($response);
        }
        exit;
    }

    public static function get_customer_appointment_history($data = null)
    {


        if (empty($data)) {
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);

        }

        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $role_id = isset($data['role_id']) ? $data['role_id'] : "";
            $customer_id = isset($data['customer_id']) ? $data['customer_id'] : "";
            $user_type = isset($data['user_type']) ? $data['user_type'] : "";
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : "";
            $background = array();

            if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user';
            } else if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else if (empty($role_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid role';
            } else if (empty($customer_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid customer id';
            } else if (empty($doctor_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid doctor id';
            } else if ($user_type != "CUSTOMER" && $user_type != "CHILDREN") {
                $response['status'] = 0;
                $response['message'] = 'Invalid user type';
            } else {
                $connection = ConnectionUtil::getConnection();
                $data = Custom::get_doctor_appointment_list($connection, $thin_app_id, $doctor_id, 0, "", "TOTAL", $customer_id, $user_type);
                if (!empty($data)) {
                    $response['status'] = 1;
                    $response['message'] = "Customer appointment found";
                    $response['data']['appointment_list'] = $data;
                } else {
                    $response['status'] = 0;
                    $response['message'] = "This slot is not available";
                }
            }
            Custom::sendResponse($response);
        }
        exit;
    }

    public static function get_doctor_time_slot($data = null, $return = false)
    {


        if (empty($data)) {
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);

        }
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $role_id = isset($data['role_id']) ? $data['role_id'] : "";
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : "";
            $address_id = isset($data['address_id']) ? $data['address_id'] : "";
            $service_slot_duration = isset($data['service_slot_duration']) ? $data['service_slot_duration'] : "";
            $booking_date = isset($data['booking_date']) ? date("Y-m-d", strtotime($data['booking_date'])) : "";
            $service_id = isset($data['service_id']) ? $data['service_id'] : 0;
            $appointment_user_role = isset($data['appointment_user_role']) ? $data['appointment_user_role'] : "";
            $appointment_id = isset($data['appointment_id']) ? $data['appointment_id'] : 0;
            $load_doctor_list = isset($data['load_doctor_list']) ? $data['load_doctor_list'] : "NO";

            $background = array();

            if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user';
            } else if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else if (empty($role_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid role';
            } else if (empty($doctor_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid doctor';
            } else if (empty($booking_date)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid date';
            } else if (empty($service_slot_duration)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid slot duration';
            } else if (empty($address_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid address';
            } else {

                //$appointment_user_role = Custom::get_appointment_role($mobile,$thin_app_id,$role_id);

                $appointment_user_role = !empty($appointment_user_role) ? $appointment_user_role : Custom::get_appointment_role($mobile, $thin_app_id, $role_id);
                if (Custom::check_app_enable_permission($thin_app_id, 'QUICK_APPOINTMENT')) {
                    $service_data = Custom::get_doctor_service_data($doctor_id);
                    $show_expire_token_slot = !empty($service_data['show_expire_token_slot'])?$service_data['show_expire_token_slot']:"NO";
                    $expired_slots = ($show_expire_token_slot == "YES") ? true : false;
                    $service_slot_duration = $service_data['service_slot_duration'];
                    $slot_list = Custom::load_doctor_slot_by_address($booking_date, $doctor_id, $service_slot_duration, $thin_app_id, $address_id, false, $appointment_user_role,true,$expired_slots);
                } else {

                    $doctor_data = Custom::get_doctor_by_id($doctor_id, $thin_app_id);
                    if(in_array($appointment_user_role,array('ADMIN','RECEPTIONIST','DOCTOR','STAFF'))){
                        $app_data = Custom::getThinAppData($thin_app_id);
                        $show_expire_token_slot = !empty($app_data['show_expire_token_slot'])?$app_data['show_expire_token_slot']:"NO";
                        $expired_slots = ($show_expire_token_slot == "YES") ? true : false;
                    }else{
                        $expired_slots = false;
                    }

                    $slot_list = Custom::new_get_appointment_slot($thin_app_id, $doctor_id, $service_id, $address_id, @$doctor_data['appointment_setting_type'], $booking_date,false,false,$appointment_user_role,$expired_slots);
                    if (!empty($slot_list)) {
                        $tmp = array();
                        foreach ($slot_list as $key => $val) {
                            $val['queue_number'] = $val['token'];
                            $tmp[] = $val;
                        }
                        $slot_list = $tmp;
                    }

                }

                if (!empty($slot_list)) {
                    $response['status'] = 1;
                    $response['message'] = "Slot found";
                    $response['data']['slot_list'] = $slot_list;
                    $connection = ConnectionUtil::getConnection();
                    $blocked_array = Custom::get_doctor_blocked_slot($connection, $thin_app_id, $address_id, $doctor_id, $booking_date);
                    $response['data']['blocked_slot'] = !empty($blocked_array) ? implode(",", $blocked_array) : "";

                    $begin = new DateTime(date("Y-m-d"));
                    $block_limit = 0;
                    $appointment_role = Custom::get_appointment_role($mobile, $thin_app_id, $role_id);
                    if ($appointment_role == 'ADMIN' || $appointment_role == 'STAFF') {
                        //$begin = new DateTime(date('Y-m-d',strtotime("-1 Months")));
                        $end = new DateTime(date('Y-m-d', strtotime("+15 Days")));
                        $block_limit = 90;
                    } else {
                        $end = new DateTime(date('Y-m-d', strtotime("+15 Days")));
                        $block_limit = 15;
                    }

                    $daterange = new DatePeriod($begin, new DateInterval('P1D'), $end);
                    //$current_date =date('Y-m-d');
                    $block_date = Custom::get_doctor_blocked_date($thin_app_id, $address_id, $doctor_id, $block_limit, $begin);
                    foreach ($daterange as $key => $date) {
                        $new_date = $date->format("d-D-M-Y");
                        $compare_date = $date->format("Y-m-d");
                        $date_slot[$key]['date'] = implode("##", explode("-", $new_date));
                        $date_slot[$key]['is_selected'] = ($compare_date == $booking_date) ? "YES" : "NO";
                        $date_slot[$key]['is_date_blocked'] = in_array($compare_date, $block_date) ? "YES" : "NO";
                    }
                    $response['data']['day_list'] = $date_slot;

                } else {
                    $response['status'] = 0;
                    $response['message'] = "This slot is not available";
                }

                $response['data']['new_appointment'] = (Custom::check_app_enable_permission($thin_app_id, 'NEW_QUICK_APPOINTMENT'))?"YES":"NO";
                if(!empty($appointment_id) && $load_doctor_list =="YES"){
                    $request_param=array('doctor_id'=>$doctor_id,'address_id'=>$address_id,'service_id'=>$service_id);
                    $response['data']['doctor_list'] = Custom::get_doctor_appointment_setting_array($appointment_id,$request_param);
                }

            }

            if ($return === false) {
                Custom::sendResponse($response);
            } else {
                return json_encode($response);
            }
        }
        exit;
    }


    public static function get_doctor_address()
    {


        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : "";
            if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user';
            } else if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app';
            } else if (empty($doctor_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid doctor';
            } else {
                $address = Custom::get_staff_address_list($doctor_id, $thin_app_id);
                if ($address) {
                    $response['status'] = 0;
                    $response['data']['address_list'] = $address;
                    $response['message'] = "Address List Found";
                } else {
                    $response['status'] = 0;
                    $response['message'] = "No address found";
                }
            }
            Custom::sendResponse($response);
        }
        exit;
    }


    public static function get_doctor_appointment_list($data=null)
    {


        $return = true;
        if(empty($data)){
            $return =false;
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);
        }

        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $role_id = isset($data['role_id']) ? $data['role_id'] : "";
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : "";
            $address_id = isset($data['address_id']) ? $data['address_id'] : "";
            $booking_date = isset($data['booking_date']) ? date("Y-m-d", strtotime($data['booking_date'])) : "";
            $appointment_status = isset($data['appointment_status']) ? strtoupper(trim($data['appointment_status'])) : "TOTAL";
            $offset = isset($data['offset']) ? $data['offset'] : null;
            $search = isset($data['search']) ? $data['search'] : '';
            $total_pages = isset($data['total_pages']) ? $data['total_pages'] : 0;
            $appointment_user_role = isset($data['appointment_user_role']) ? $data['appointment_user_role'] : "";

            $background = array();


            if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user';
            } else if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else if (empty($role_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid role';
            } else if (empty($doctor_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid doctor';
            } else if (empty($booking_date)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid date';
            } else if (empty($address_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid address';
            } else {

                $connection = ConnectionUtil::getConnection();

                $response['data']['appointment_counts'] = array();
                $response['data']['total_pages'] = $total_pages;
                $appointment_list = Custom::get_doctor_appointment_list($connection, $thin_app_id, $doctor_id, $address_id, $booking_date, $appointment_status, 0, "CUSTOMER", $offset, $search,$appointment_user_role);
                if (empty($total_pages)) {
                    $response['data']['appointment_counts'] = Custom::getDoctorAppointmentCountByAddress($connection, $thin_app_id, $doctor_id, $address_id, $booking_date);
                    $total = @$response['data']['appointment_counts'][ucfirst(strtolower($appointment_status))];
                    $response['data']['total_pages'] = ceil($total / APP_PAGINATION_LIMIT);
                }
                if (!empty($search)) {
                    $response['data']['total_pages'] = 1;
                }
                $response['data']['pagination_limit'] = APP_PAGINATION_LIMIT;
                if (!empty($appointment_list)) {
                    $response['status'] = 1;
                    $response['message'] = "Appointment found";
                    $response['data']['appointment_list'] = $appointment_list;
                    $response['data']['booking_date'] = date("Y-M-d", strtotime($data['booking_date']));

                } else {
                    $response['status'] = 0;
                    $response['message'] = "No appointment found";
                }
            }

            if($return === true){
                return json_encode($response);
            }else{
                Custom::sendResponse($response);
            }

        }
        exit;
    }


    public static function add_new_appointment($data = null, $return = false, $booking_request_from = 'APP', $time_of_day = "")
    {

        if (empty($data)) {
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);
        }
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $fp = "";
            try {


                $response = array();
                $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
                $app_key = isset($data['app_key']) ? $data['app_key'] : "";
                $user_id = isset($data['user_id']) ? $data['user_id'] : "";
                $mobile = $login_mobile_number = isset($data['mobile']) ? $data['mobile'] : "";
                $booking_date = isset($data['booking_date']) ? date('Y-m-d',strtotime($data['booking_date'])): "";
                $slot_time = isset($data['slot_time']) ? $data['slot_time'] : "";
                $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : "";
                $customer_id = isset($data['customer_id']) ? $data['customer_id'] : "";
                $customer_name = isset($data['customer_name']) ? $data['customer_name'] : "";
                $customer_mobile = isset($data['customer_mobile']) ? $data['customer_mobile'] : "";
            	$role_id = isset($data['role_id']) ? $data['role_id'] : "";
            	if($booking_request_from=='APP' && $role_id == 1 && ($customer_mobile=='+919999999999' || $customer_mobile=='9999999999')){
                    $customer_mobile = $mobile;
                }
                $user_type = isset($data['user_type']) ? $data['user_type'] : "CUSTOMER";
                $children_id = isset($data['children_id']) ? $data['children_id'] : 0;
                $appointment_for = isset($data['appointment_for']) ? $data['appointment_for'] : "OTHER";
                $customer_dob = isset($data['customer_dob']) ? $data['customer_dob'] : "";
                $customer_year = isset($data['customer_year']) ? $data['customer_year'] : "";
                $customer_month = isset($data['customer_month']) ? $data['customer_month'] : "";
                $address_id = isset($data['address_id']) ? $data['address_id'] : "";
                $gender = isset($data['gender']) ? trim($data['gender']) : "";
                
                $payment_type = isset($data['payment_type']) ? $data['payment_type'] : "";
                $appointment_user_role = isset($data['appointment_user_role']) ? $data['appointment_user_role'] : "";
                $queue_number = $selected_token_number = isset($data['queue_number']) ? $data['queue_number'] : "0";
                $service_id = isset($data['service_id']) ? $data['service_id'] : 0;
                $has_token = isset($data['has_token']) ? $data['has_token'] : "YES";
                $custom_token = isset($data['custom_token']) ? $data['custom_token'] : "NO";
                $sub_token = isset($data['sub_token']) ? $data['sub_token'] : "NO";
                $reason_of_appointment = isset($data['reason_of_appointment']) ? $data['reason_of_appointment'] : "";
                $remark = isset($data['remark']) ? $data['remark'] : "";
                $age = isset($data['age']) ? $data['age'] : "";
                $marital_status = isset($data['marital_status']) ? $data['marital_status'] : "";
                $parents_name = isset($data['parents_name']) ? $data['parents_name'] : "";
                $parents_mobile = isset($data['parents_mobile']) ? $data['parents_mobile'] : "";
                $blood_group = isset($data['blood_group']) ? $data['blood_group'] : "";
                $referred_by = isset($data['referred_by']) ? $data['referred_by'] : "";
                $referred_by_mobile = isset($data['referred_by_mobile']) ? $data['referred_by_mobile'] : "";
                $email = isset($data['email']) ? $data['email'] : "";
                $address = isset($data['address']) ? $data['address'] : "";
                $appointment_type = isset($data['appointment_type']) ? $data['appointment_type'] : "AVAILABLE_TOKEN";
                $third_party_uhid = isset($data['third_party_uhid']) ? $data['third_party_uhid'] : "";
                $appointment_user_role = isset($data['appointment_user_role']) ? $data['appointment_user_role'] : "";
                $emergency_appointment = isset($data['emergency_appointment']) ? $data['emergency_appointment'] : "NO";
                $checked_in = isset($data['checked_in']) ? $data['checked_in'] : "NO";
            	$consulting_type = isset($data['consult_type']) ? $data['consult_type'] : "OFFLINE";

                $booking_convenience_fee_restrict_ivr = 'NO';

                $background = array();
                $appointment_booked = false;
                $booking_mobile_number = $mobile;
            
            	if ((empty($customer_dob) && $appointment_for == "CHILD")){
                } else if (empty($thin_app_id)) {
                	if($thin_app_id != "134"){
                    	$customer_dob = date('d-m-Y');
                    }
                    
                }
            
                if (empty($booking_date)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid appointment date';
                } else if (empty($user_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid user';
                } else if (empty($thin_app_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid thinapp';
                } else if (empty($app_key)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid app';
                } else if (empty($mobile)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid mobile';
                } else if (empty($slot_time)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid slot time';
                } else if (empty($doctor_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid doctor';
                } else if (empty($address_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid address';
                } else if (empty($role_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid role';
                } else if (empty($customer_id) && empty($customer_name) && $user_type == "CUSTOMER") {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid customer';
                } else if (empty($payment_type) && ($payment_type != "CASH" && $payment_type != "ONLINE")) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid payment type';
                } else if (($user_type != "CUSTOMER" && $user_type != "CHILDREN")) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid payment type';
                } else if (($appointment_for != "OTHER" && $appointment_for != "CHILD")) {
                    $response['status'] = 0;
                    $response['message'] = 'Select appointment for';
                } else if ((empty($customer_dob) && $appointment_for == "CHILD")) {
                    $response['status'] = 0;
                    $response['message'] = 'Please enter child dob';
                } else if ($appointment_for == "OTHER" && $user_type == "CHILDREN" && empty($children_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Please select child';
                }else if ($emergency_appointment != "YES" && $emergency_appointment != "NO") {
                    $response['status'] = 0;
                    $response['message'] = "Invalid emergency";
                } else if ($doctor_id == '1552' && $booking_request_from !='DIALER') {
                    $response['status'] = 0;
                    $response['message'] = 'Sorry, You can not book this slot';
                }else {

                
                	if($queue_number > "60" && in_array($thin_app_id,array('607')) ){
                        $response['status'] = 0;
                        $response['message'] = "Sorry, you can not book this token";

                    }else if($booking_request_from == 'APP' && $thin_app_id==607 && ($appointment_type == "ADD_MORE_TOKEN" || $custom_token == "YES")){
                        $response['status'] = 0;
                        $response['message'] = "Sorry, you can not book this token";
                    }else{	
                
                
                    $new_appointment_request = Custom::check_app_enable_permission($thin_app_id, 'NEW_QUICK_APPOINTMENT');
                    $appointment_user_role = !empty($appointment_user_role) ? $appointment_user_role : Custom::get_appointment_role($mobile, $thin_app_id, $role_id);
                    $expired_slots = in_array($appointment_user_role, array('ADMIN', 'RECEPTIONIST', 'DOCTOR', 'STAFF')) ? true : false;



                    if ($new_appointment_request === true) {

                        if (!empty($service_id)) {
                            $service_data = Custom::get_doctor_and_service_data($doctor_id, $service_id);
                            $expired_slots = ($service_data['show_expire_token_slot']=="YES") ? true : false;
                        } else {
                            $service_data = Custom::get_doctor_default_service_new_appointment($doctor_id);
                            $expired_slots = ($service_data['show_expire_token_slot']=="YES") ? true : false;
                            $service_id = @$service_data['id'];
                        }
                    } else {
                        if (!empty($service_id)) {
                            $service_data = Custom::get_doctor_and_service_data($doctor_id, $service_id);
                            $expired_slots = ($service_data['show_expire_token_slot']=="YES") ? true : false;
                        } else {
                            $service_data = Custom::get_doctor_service_data($doctor_id);
                            $expired_slots = ($service_data['show_expire_token_slot']=="YES") ? true : false;
                        	$service_id = $service_data['id'];
                        }
                    }




                    /* file read start */
                    $filename = LOCAL_PATH . "app/webroot/ivr/tmp_lock/" . $thin_app_id . "_" . $doctor_id . "_" . $address_id . "_" . @$service_data['id'] . ".json";
                    $fp = fopen($filename, "w+"); // open it for WRITING ("w")
                    $block = 1;
                    if (flock($fp, LOCK_EX, $block)) {
                        $validate_data = true;
                        $mobile = empty($customer_mobile) ? $mobile : $customer_mobile;
                        $mobile = Custom::create_mobile_number($mobile);
                        if (!empty($service_data)) {

                            if ($booking_request_from == "MQ_FORM" || $booking_request_from  == "ROBOT" || $booking_request_from == "THIRD_PARTY_API" || $booking_request_from == 'WEB' || $booking_request_from == "WEB_PRESCRIPTION") {
                                if ($appointment_type == "ADD_MORE_TOKEN") {
                                    $has_token = $custom_token = "YES";
                                    $validate_data = false;
                                    if ($new_appointment_request === true) {
                                        $custom_tokens = Custom::get_doctor_custom_tokens($doctor_id, $address_id, $booking_date, $service_id, $queue_number);
                                    } else {
                                        $custom_tokens = Custom::get_doctor_custom_tokens($doctor_id, $address_id, $booking_date, 0, $queue_number);
                                    }
                                    if (!empty($custom_tokens)) {
                                        $validate_data = true;
                                    }


                                } else if ($appointment_type == "SUB_TOKEN") {

                                    $count = Custom::get_sub_token_number($doctor_id, $service_id, $address_id, $slot_time, $booking_date);
                                    $queue_number = $queue_number + (($count + 1) / 10);
                                    $has_token = $sub_token = "YES";
                                    $custom_token = "NO";
                                    $validate_data = false;

                                } else if ($appointment_type == "WALK-IN") {
                                    $slot_time = !empty($slot_time)?$slot_time:date('h:i A');
                                    $queue_number = 0;
                                    $has_token = $custom_token = $sub_token = "NO";
                                    $validate_data = false;
                                } else {
                                    if ($new_appointment_request === true) {
                                        $setting_type = $service_data['appointment_setting_type'];
                                        $slot_array = Custom::new_get_appointment_slot($thin_app_id, $doctor_id, $service_id, $address_id, $setting_type, $booking_date, true, false, $appointment_user_role,$expired_slots);
                                        $queue_number = !empty($slot_array[$slot_time]['token']) ? $slot_array[$slot_time]['token'] : false;
                                    } else {
                                        $slot_array = Custom::load_doctor_slot_by_address($booking_date, $doctor_id, $service_data['service_slot_duration'], $thin_app_id, $address_id, true, $appointment_user_role, false, $expired_slots);
                                        $queue_number = !empty($slot_array[$slot_time]['queue_number']) ? $slot_array[$slot_time]['queue_number'] : false;
                                    		
                                    		
                                    
                                    }
                                }

                            } else {
                                /*THIS BLOCK WORK WHEN IVER TOKEN BOOKED AND CHECK NEW SLOT TIME WITH PROCESS */
                                if ($booking_request_from == 'IVR') {
                                    $is_booked = Custom::get_booked_token_id($thin_app_id, $doctor_id, $address_id, $service_id, $queue_number,$booking_date);
                                    if (!empty($is_booked)) {
                                        if ($booking_request_from == 'IVR') {
                                            $available = Custom::get_doctor_next_available_slot($thin_app_id, $doctor_id, $address_id, $booking_date, $time_of_day, 'USER');
                                            if ($available) {
                                                $slot_time = $available;
                                            }
                                        }
                                    }

                                }

                            }


                            /* -------------------------------------------------------- */
                            if ($has_token == "YES" && $booking_request_from != 'WEB' && $booking_request_from != 'ROBOT') {
                                if ($new_appointment_request === true) {

                                    if ($booking_request_from == "APP" && $custom_token == "YES") {
                                        $custom_tokens = Custom::get_doctor_custom_tokens($doctor_id, $address_id, $booking_date, $service_id, $queue_number);
                                        if (!empty($custom_tokens)) {
                                            $validate_data = true;
                                        }
                                    } else {
                                        $setting_type = $service_data['appointment_setting_type'];
                                        $slot_array = Custom::new_get_appointment_slot($thin_app_id, $doctor_id, $service_id, $address_id, $setting_type, $booking_date, true, false, $appointment_user_role,$expired_slots);
                                        if (isset($slot_array[$slot_time])) {
                                            $queue_number = $slot_array[$slot_time]['token'];
                                        } else {
                                            $available_slot = Custom::get_doctor_next_available_slot($thin_app_id, $doctor_id, $address_id, $booking_date, $time_of_day);
                                            $queue_number = !empty($slot_array[$available_slot]['token']) ? $slot_array[$available_slot]['token'] : false;
                                        }

                                    }

                                } else {
                                    if (($booking_request_from == "DIALER" || $booking_request_from == "MQ_FORM" || $booking_request_from == "THIRD_PARTY_API" || $booking_request_from == "FACE_READER_TAB" || $booking_request_from == "APP") && $custom_token == "YES") {
                                        $validate_data = false;
                                        $custom_tokens = Custom::get_doctor_custom_tokens($doctor_id, $address_id, $booking_date, 0, $queue_number);
                                        if (!empty($custom_tokens)) {
                                            $validate_data = true;
                                        }
                                    } else {
                                    
                                    	if($booking_request_from != "MQ_FORM" && $sub_token =='NO'){
                                        $slot_array = Custom::load_doctor_slot_by_address($booking_date, $doctor_id, $service_data['service_slot_duration'], $thin_app_id, $address_id, true, $appointment_user_role, false, $expired_slots);
                                        $queue_number = !empty($slot_array[$slot_time]['queue_number']) ? $slot_array[$slot_time]['queue_number'] : false;
                                        }
                                    }

                                }

                                if ($custom_token == "NO" && ($booking_request_from == "APP" || $booking_request_from == "FACE_READER_TAB" || $booking_request_from == "DIALER" )) {
                                    $allow_book = in_array($appointment_user_role, array('ADMIN', 'RECEPTIONIST', 'DOCTOR', 'STAFF')) ? true : false;
                                    if ($allow_book === true) {
                                        $validate_data = false;
                                    } else {
                                        $validate_data = true;
                                    }
                                } else {
                                    $validate_data = false;
                                }
                            }
                        
                        	 if($booking_request_from == 'ROBOT'){
                                $validate_data = false;
                            }

                            if($emergency_appointment=="YES"){
                                $slot_time = "06:00 AM";
                                $queue_number = "0";
                                $service_id = !empty($service_data)?$service_data['id']:0;
                                $count = Custom::get_sub_token_number($doctor_id, $service_id, $address_id, $slot_time, $booking_date);
                                $queue_number = $queue_number.".".($count+1);
                                $has_token = $sub_token = "YES";
                                $custom_token = "NO";
                                $validate_data = false;
                            }


                            if ($validate_data === false || $queue_number !== false) {

                                if ($validate_data === false || (!empty($slot_array) && (array_key_exists($slot_time, $slot_array) && $slot_array[$slot_time]['status'] == 'AVAILABLE'))) {

                                    /* START this cooe add new customer if customer */

                                    if ($appointment_for == "CHILD" || $appointment_for == "CHILDREN") {
                                        $user_type = "CHILDREN";
                                        $customer_name = trim($customer_name);
                                        $customer_data = Custom::create_child_by_name($thin_app_id, $mobile, $customer_name);
                                        if (empty($customer_data)) {
                                            $customer = array();
                                            $customer['app_key'] = $app_key;
                                            $customer['thin_app_id'] = $thin_app_id;
                                            $customer['user_id'] = $user_id;
                                            $customer['child_name'] = $customer_name;
                                            $customer['mobile'] = $mobile;
                                            $customer['gender'] = strtoupper($gender);
                                            $customer['dob'] = $customer_dob;
                                            $customer['add_vaccination'] = 'NO';
                                            if (!empty($customer_dob)) {
                                                try {
                                                    $tmp = explode('/', $customer_dob);
                                                    if (!empty($tmp)) {
                                                        $customer_dob = str_replace("/", "-", $customer_dob);
                                                        $cus_dob = DateTime::createFromFormat('d-m-Y', $customer_dob);
                                                        $customer['dob'] = $cus_dob->format('Y-m-d');
                                                    } else {
                                                        $cus_dob = DateTime::createFromFormat('d-m-Y', $customer_dob);
                                                        $customer['dob'] = $cus_dob->format('Y-m-d');
                                                    }
                                                } catch (Exception $e) {

                                                }
                                            }
                                            $result = WebservicesFunction::add_child($customer, true);
                                            $result = $customer_data = json_decode($result, true);
                                            if ($result['status'] == 1) {
                                                $children_id = $result['child_id'];
                                                $booking_mobile_number = $mobile;
                                            }
                                        } else {
                                            $children_id = $customer_data['id'];
                                        	$customer_name = $customer_data['child_name'];
                                        }

                                    } else {
                                        if ($customer_id == 0 && $user_type == "CUSTOMER") {
                                            $customer_name = trim($customer_name);
                                            $customer_data = Custom::search_customer_name($thin_app_id, $mobile, $customer_name);
                                            if (empty($customer_data)) {
                                                $customer = array();
                                                $customer['app_key'] = $app_key;
                                                $customer['thin_app_id'] = $thin_app_id;
                                                $customer['user_id'] = $user_id;
                                                $customer['first_name'] = $customer_name;
                                                $customer['email'] = $email;
                                                $customer['mobile'] = $mobile;
                                                $customer['country_code'] = "+91";
                                                $customer['gender'] = strtoupper($gender);
                                                $customer['dob'] = $customer_dob;
                                                $customer['blood_group'] = $blood_group;
                                                $customer['parents_name'] = $parents_name;
                                                $customer['parents_mobile'] = $parents_mobile;
                                                $customer['marital_status'] = $marital_status;
                                                $customer['address'] = $address;
                                                $customer['third_party_uhid'] = $third_party_uhid;
                                                if(!empty($age)){
                                                    $customer['age'] = $age;
                                                }

                                                if (!empty($customer_year)) {
                                                    $tmp = ($customer_year > 1) ? 'Year' : 'Years';
                                                    $age = $customer_year . '' . $tmp . ' ';
                                                }
                                                if (!empty($customer_month)) {
                                                    $tmp = ($customer_month > 1) ? 'Month' : 'Months ';
                                                    $age .= $customer_year . '' . $tmp;
                                                }
                                                $customer['age'] = $age;
                                                if (empty($customer_year) && empty($customer_month)) {
                                                    $customer['age'] = $age;
                                                }
                                                $result = WebservicesFunction::appointment_add_customer($customer);
                                                $result = $customer_data = json_decode($result, true);
                                                if ($result['status'] == 1) {
                                                    $customer_id = $result['customer_id'];
                                                    $booking_mobile_number = $mobile;
                                                } else {
                                                    if (!empty($result['customer_id'])) {
                                                        $customer_id = $result['customer_id'];
                                                    }
                                                }
                                            } else {
                                                $customer_id = $customer_data['id'];
                                            	$customer_name = $customer_data['first_name'];
                                            }

                                        }
                                    }

                                    if (!empty($customer_id) || !empty($children_id)) {

                                        if ($user_type == "CUSTOMER") {
                                            $children_id = 0;
                                            $pat_cus_id = $customer_id;
                                        } else if ($user_type == "CHILDREN") {
                                            $customer_id = 0;
                                            $pat_cus_id = $children_id;
                                        }

                                        /* this cooe add new customer if customer END*/
                                        $save_data = array();
                                        $booking_date = date('Y-m-d', strtotime($booking_date));
                                        $appointment_customer_id = $customer_id;
                                        $appointment_category_id = 0;
                                        $appointment_address_id = $address_id;
                                        $appointment_staff_id = $doctor_id;
                                        $appointment_service_id = $service_data['id'];
                                        $day_time_id = date('N', strtotime($booking_date));
                                        $appointment_day_time_id = $day_time_id;
                                        $booking_date = $booking_date;
                                        $date_time = date('Y-m-d H:i:s', strtotime($booking_date . ' ' . $slot_time));
                                        $appointment_datetime = $date_time;
                                        $slot_duration = $service_data['service_slot_duration'];
                                        $slot_time = $slot_time;
                                        $amount = $service_data['service_amount'];
                                    	if($consulting_type=='VIDEO'){
                                            $amount = $service_data['video_consulting_amount'];
                                        }else if($consulting_type=='AUDIO'){
                                            $amount = $service_data['audio_consulting_amount'];
                                        }else if($consulting_type=='CHAT'){
                                            $amount = $service_data['chat_consulting_amount'];
                                        }
                                        if($emergency_appointment=="YES"){
                                            $get_doctor_data= Custom::get_doctor_by_id($doctor_id);
                                            $amount = $get_doctor_data['emergency_appointment_fee'];
                                            $amount = (empty($amount))?0:$amount;
                                        }


                                        $get_appointment_user_role = !empty($appointment_user_role) ? $appointment_user_role : Custom::hospital_get_user_role($data['mobile'], $thin_app_id, $role_id);

                                        /*check user is blocked status start */
                                        $blocked_user = false;
                                        if ($get_appointment_user_role == "USER" && ( $booking_request_from == "APP" || $booking_request_from == "DOCTOR_PAGE")) {
                                            $pat_data = Custom::get_patient_detail($pat_cus_id, $user_type);
                                            $blocked_user = Custom::number_is_blocked($thin_app_id, @$pat_data['mobile'],$login_mobile_number);
                                        }
                                        /*check user is blocked status end*/



                                            $validity_attempt = Custom::get_appointment_validity_data($thin_app_id, $pat_cus_id, $address_id, $doctor_id, $booking_date, $service_data['id'], "NEW", $get_appointment_user_role, $user_type,$queue_number,$slot_time);

                                            if (($validity_attempt['allow_book_new_appointment'] == "YES" && $blocked_user === false)) {

                                                if ($validity_attempt['allow_add_free_appointment'] == "YES") {
                                                    $status = 'CONFIRM';
                                                    $payment_status = 'SUCCESS';
                                                    $parent_id = $validity_attempt['appointment_parent_id'];
                                                    $booking_validity_attempt = $validity_attempt['total_appointment'] + 1;
                                                    $amount = 0;


                                                } else {
                                                    $status = 'NEW';
                                                    $payment_status = 'PENDING';
                                                    $parent_id = 0;
                                                    $booking_validity_attempt = 1;
                                                }

                                                $category_id = $token_number = 0;
                                                $connection = ConnectionUtil::getConnection();
                                                $connection->autocommit(true);
                                                $created = Custom::created();

                                                $allow_add_appointment = true;
                                                /* this code check final duplicate token exsit or not*/
                                                if ($booking_request_from == 'IVR') {
                                                    $is_booked = Custom::get_booked_token_id($thin_app_id, $doctor_id, $address_id, $service_id, $queue_number,$booking_date);
                                                    if ($is_booked) {
                                                        $allow_add_appointment = false;
                                                    }
                                                }

                                                if ($allow_add_appointment === true) {


                                                    if ($has_token == "NO") {
                                                        $total_token = Custom::get_total_walk_in_appointment($appointment_staff_id, $appointment_address_id, $booking_date,$service_id,$slot_duration,$thin_app_id,$appointment_user_role,$slot_time);
                                                        if($total_token !== false){
                                                            $explode_token =explode('.',$total_token);
                                                            if(count($explode_token) ==2){
                                                                $explode_token[1] = $explode_token[1] + 1;
                                                                $queue_number = implode('.',$explode_token);
                                                            }else{
                                                                $queue_number = $explode_token[0] + 1;
                                                            }
                                                        }else{
                                                            $queue_number = 0;
                                                        }
                                                    }
                                                    $drive_folder_id = Custom::get_patient_folder_id($thin_app_id, $pat_cus_id, $user_type);
                                                    $drive_folder_id = !empty($drive_folder_id)?$drive_folder_id:0;


                                                    $is_paid_booking_convenience_fee = "NOT_APPLICABLE";
                                                    $booking_convenience_fee_restrict_ivr = 'NO';
                                                    $booking_convenience_fee = "0";
                                                    $booking_doctor_share_percentage = "0";
                                                    $booking_doctor_share_fee = "0";
                                                    $booking_payment_getway_fee_percentage = "0";
                                                    $booking_payment_getway_fee = "0";
                                                    $booking_mengage_share_fee = "0";

                                                    $sendPaymentLinkInSMS = false;


                                                    if (Custom::check_app_enable_permission($thin_app_id, 'SMART_CLINIC')) {

                                                        if ($booking_request_from == 'IVR' || $booking_request_from == 'APP' || $booking_request_from == 'DOCTOR_PAGE') {
                                                            $thinappData = Custom::getThinAppData($thin_app_id);
                                                            if ($thinappData['booking_convenience_fee'] > 0) {
                                                                $booking_convenience_fee_restrict_ivr = $thinappData['booking_convenience_fee_restrict_ivr'];
                                                                $is_paid_booking_convenience_fee = "NO";
                                                                $booking_convenience_fee = $thinappData['booking_convenience_fee'];
                                                                $booking_doctor_share_percentage = $thinappData['booking_doctor_share_percentage'];
                                                                $bookingDoctorShareFee = (($thinappData['booking_doctor_share_percentage'] / 100) * $booking_convenience_fee);
                                                                $booking_doctor_share_fee = round($bookingDoctorShareFee, 2);
                                                                $booking_payment_getway_fee_percentage = $thinappData['booking_payment_getway_fee_percentage'];
                                                                $bookingPaymentGetwayFee = (($thinappData['booking_payment_getway_fee_percentage'] / 100) * $booking_convenience_fee);
                                                                $booking_payment_getway_fee = round($bookingPaymentGetwayFee, 2);
                                                                $booking_mengage_share_fee = ($booking_convenience_fee - ($bookingPaymentGetwayFee + $bookingDoctorShareFee));
                                                                if ($booking_request_from == 'IVR') {
                                                                    $sendPaymentLinkInSMS = true;
                                                                }
                                                            }
                                                        }
                                                    }
                                                	
                                                	if(empty($customer_name)){
                                                        if(!empty($customer_id)){
                                                            $search_parent_id =$customer_id;
                                                            $search_parent_type ="CUSTOMER";
                                                        }else{
                                                            $search_parent_id =$children_id;
                                                            $search_parent_type ="CHILDREN";
                                                        }
                                                        $search_patient_data = Custom::get_patient_detail($search_parent_id,$search_parent_type);
                                                        $customer_name = !empty($search_patient_data)?$search_patient_data['patient_name']:'';
                                                    }
                                                	if($consulting_type=='ONLINE' || $thin_app_id == 777){
                                                        $consulting_type = 'VIDEO';
                                                    }
                                                	
                                                	if(in_array($consulting_type,array('VIDEO','AUDIO','CHAT'))){
                                                        $payment_type = 'ONLINE';
                                                    }
                                                
                                                	if($booking_request_from=='DOCTOR_PAGE' && !empty($selected_token_number) && empty($queue_number) ){
                                                        $queue_number = $selected_token_number;
                                                    }

                                                $reminder_message = "";
                                                    $autoAssignToken = Custom::check_app_enable_permission($thin_app_id, 'AUTO_ASSIGN_TOKEN_SYSTEM');
                                                    if($consulting_type=='OFFLINE' && $autoAssignToken && in_array($booking_request_from,array('APP','DOCTOR_PAGE'))){
                                                        $reminder_message = "TOKEN_PENDING";
                                                    }
                                                
                                                
                                                    $sql = "INSERT INTO appointment_customer_staff_services (reminder_message, consulting_type, appointment_patient_name,checked_in,emergency_appointment, drive_folder_id,custom_token, sub_token, created_by_user_id, appointment_booked_from, reason_of_appointment, notes, referred_by, referred_by_mobile,  has_token, booked_by, children_id, queue_number, appointment_parent_id, booking_validity_attempt, booking_payment_type,appointment_customer_id, appointment_category_id, appointment_address_id, thinapp_id, appointment_staff_id, appointment_service_id, appointment_day_time_id, booking_date, appointment_datetime, slot_duration, slot_time, amount, status, payment_status, created, modified,is_paid_booking_convenience_fee,booking_convenience_fee_restrict_ivr,booking_convenience_fee,booking_doctor_share_percentage,booking_doctor_share_fee,booking_payment_getway_fee_percentage,booking_payment_getway_fee,booking_mengage_share_fee) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                                                    $stmt_sub = $connection->prepare($sql);
                                                    $stmt_sub->bind_param('sssssssssssssssssssssssssssssssssssssssssssss', $reminder_message,  $consulting_type, $customer_name, $checked_in, $emergency_appointment, $drive_folder_id, $custom_token, $sub_token, $user_id, $booking_request_from, $reason_of_appointment, $remark, $referred_by, $referred_by_mobile, $has_token, $appointment_user_role, $children_id, $queue_number, $parent_id, $booking_validity_attempt, $payment_type, $appointment_customer_id, $appointment_category_id, $appointment_address_id, $thin_app_id, $appointment_staff_id, $appointment_service_id, $appointment_day_time_id, $booking_date, $appointment_datetime, $slot_duration, $slot_time, $amount, $status, $payment_status, $created, $created, $is_paid_booking_convenience_fee,$booking_convenience_fee_restrict_ivr, $booking_convenience_fee, $booking_doctor_share_percentage, $booking_doctor_share_fee, $booking_payment_getway_fee_percentage, $booking_payment_getway_fee, $booking_mengage_share_fee);

                                                    if ($stmt_sub->execute()) {
                                                        $appointment_id = $stmt_sub->insert_id;
                                                    
                                                    	
                                                    
						
                                                        if ($booking_validity_attempt > 1 && $booking_request_from != "MQ_FORM") {
                                                            $receitpID = Custom::addZeroOPDReceipt($appointment_id, $children_id, $appointment_customer_id, $appointment_address_id, $thin_app_id, $appointment_staff_id);
                                                            $sql1 = "UPDATE appointment_customer_staff_services set medical_product_order_id =? where id =?";
                                                            $stmt_sub1 = $connection->prepare($sql1);
                                                            $stmt_sub1->bind_param('ss', $receitpID, $appointment_id);
                                                            $stmt_sub1->execute();
                                                            $result = Custom::skip_late_payment_appointment($appointment_id,$user_id);
                                                        }
                                                        $token_number = $queue_number;
                                                        if ($parent_id == 0) {
                                                            $sql = "UPDATE appointment_customer_staff_services set appointment_parent_id =? where id =?";
                                                            $stmt_sub = $connection->prepare($sql);
                                                            $stmt_sub->bind_param('ss', $appointment_id, $appointment_id);
                                                            $stmt_sub->execute();
                                                        }
                                                    
                                                    	 $appointment_data = WebservicesFunction::get_appointment_all_data_id($appointment_id);
                                                        $doctor_id = $appointment_data['appointment_staff_id'];
                                                        $res = Custom::fortisUpdatePatientNameCurrentToken($thin_app_id,$doctor_id,$appointment_data,'UPDATE');




                                                    
                                                    
                                                    
                                                        if (!empty($appointment_data) && $payment_type == "CASH" && !($is_paid_booking_convenience_fee == "NO" && ($booking_request_from == 'APP' || $booking_request_from == 'DOCTOR_PAGE' || ($booking_request_from == 'IVR' && $booking_convenience_fee_restrict_ivr == 'YES') ))) {

                                                            $queue_number = Custom::create_queue_number($appointment_data);
                                                            $queue_number =  "Token Number : $queue_number";

                                                            $app_date = date('d/m/Y h:i A', strtotime($appointment_data['appointment_datetime']));
                                                            $app_time = date('h:i A', strtotime($appointment_data['appointment_datetime']));
                                                            $label_date = date('Y-m-d', strtotime($appointment_data['appointment_datetime']));
                                                            $day_label = Custom::get_date_label($label_date);

                                                            /* send appoinment notifincation to staff */
                                                            $staff_name = trim($appointment_data['staff_name']);
                                                            //$message = "New appointment scheduled on " . $appointment_data['appointment_datetime'] . ' for service ' . $appointment_data['service_name'];

                                                            if ($appointment_user_role == 'USER' || $get_appointment_user_role == "RECEPTIONIST") {

                                                                $day_label = (strtoupper($day_label) == "TODAY") ? $day_label . ', Time ' . $app_time : $day_label . ', ' . $app_date;

                                                                $message = "Hi " . Custom::get_doctor_first_name($staff_name) . ", appointment, $queue_number with patient " . Custom::get_string_first_name($appointment_data['cus_name']) . ', has been confirmed on ' . $day_label . '.';

                                                                $option = array(
                                                                    'thinapp_id' => $thin_app_id,
                                                                    'customer_id' => 0,
                                                                    'staff_id' => $appointment_data['appointment_staff_id'],
                                                                    'service_id' => $appointment_data['appointment_service_id'],
                                                                    'channel_id' => 0,
                                                                    'role' => "STAFF",
                                                                    'flag' => 'APPOINTMENT',
                                                                    'title' => "New Appointment Request",
                                                                    'message' => mb_strimwidth($message, 0, 250, '...'),
                                                                    'description' => "",
                                                                    'chat_reference' => '',
                                                                    'module_type' => 'APPOINTMENT',
                                                                    'module_type_id' => $appointment_id,
                                                                    'doctor_id' => $doctor_id,
                                                                    'firebase_reference' => ""
                                                                );
                                                                $background['notification'][0]['data'] = $option;
                                                                $background['notification'][0]['user_id'] = $appointment_data['staff_user_id'];
                                                                $background['notification'][0]['send_to'] = "DOCTOR";


                                                                $day_label = (strtoupper($day_label) == "TODAY") ? $day_label . ', Time ' . $app_time : $day_label . ', ' . $app_date;
                                                            	
                                                                //$message = "Hi " . Custom::get_string_first_name($appointment_data['cus_name']) . ", appointment, $queue_number with " . Custom::get_doctor_first_name($staff_name) . ', has been confirmed on ' . $day_label.'. Please plan to come 15 min before.';
                                                                $lbl_date = date('d-m-Y', strtotime($appointment_data['appointment_datetime']));
                                                                $lbl_time = date('h:i A', strtotime($appointment_data['appointment_datetime']));
                                                                $time_string = ($appointment_data['show_appointment_time'] == "YES" && $appointment_data['emergency_appointment']=="NO" && $appointment_data['custom_token']=="NO") ? " Time:$lbl_time," :"" ;
                                                                $queue_number = ($appointment_data['show_appointment_token'] == "NO") ? "" : $queue_number;


                                                                if ($thin_app_id == 635) {
                                                                    $message = "Token booked for " . Custom::get_string_first_name($appointment_data['cus_name']) . ".$queue_number, Date: $lbl_date."."";
                                                                } else {
                                                                    $message = "Token booked for " . Custom::get_string_first_name($appointment_data['cus_name']) . ".$queue_number,$time_string Date: $lbl_date.";
                                                                }

                                                                $option = array(
                                                                    'thinapp_id' => $thin_app_id,
                                                                    'staff_id' => 0,
                                                                    'customer_id' => $appointment_data['appointment_customer_id'],
                                                                    'service_id' => $appointment_data['appointment_service_id'],
                                                                    'channel_id' => 0,
                                                                    'role' => "CUSTOMER",
                                                                    'flag' => 'APPOINTMENT',
                                                                    'title' => "New Appointment Request",
                                                                    'message' => mb_strimwidth($message, 0, 250, '...'),
                                                                    'description' => "",
                                                                    'chat_reference' => '',
                                                                    'module_type' => 'APPOINTMENT',
                                                                    'module_type_id' => $appointment_id,
                                                                    'firebase_reference' => "",
                                                                    'doctor_id' => $doctor_id
                                                                );
                                                                $background['notification'][1]['data'] = $option;
                                                                $background['notification'][1]['user_id'] = $appointment_data['customer_user_id'];
                                                                $background['notification'][1]['send_to'] = "USER";


                                                                if($sendPaymentLinkInSMS == true){
                                                                	
                                                                	if($thin_app_id == 803){
                                                                        $uhid = $appointment_data['uhid'];;
                                                                        $track_url = Custom::short_url(SITE_PATH.'tracker/track_your_appointment/'.base64_encode($uhid).'/'.base64_encode($thin_app_id),$thin_app_id);
                                                                        $message .= "\nLive tracker status\n$track_url";
                                                                    }else{
                                                                        $url = SITE_PATH.'booking_convenience/?token='.base64_encode($appointment_id);
                                                                        $url =Custom::short_url($url,$thin_app_id);
                                                                        $attachMessage = "\nPay and confirm your token by clicking on this link ".$url;
                                                                        $message .= $attachMessage;
                                                                    }
                                                                
                                                                }


                                                                $background['sms'][] = array(
                                                                    'message' => $message,
                                                                    'mobile' => $appointment_data['customer_mobile'],
                                                                    'send_to' => "USER"
                                                                );
                                                            
                                                            	

                                                            }


                                                            if ($appointment_user_role == 'ADMIN' || $appointment_user_role == 'STAFF' || $appointment_user_role == 'DOCTOR') {
                                                                $day_label = (strtoupper($day_label) == "TODAY") ? $day_label . ', Approx ' . $app_time : $day_label . ', ' . $app_date;
                                                                //$message = "Hi " . Custom::get_string_first_name($appointment_data['cus_name']) . ", appointment, $queue_number with " . Custom::get_doctor_first_name($staff_name) . ', has been confirmed on ' . $day_label.'. Please plan to come 15 min before.';
                                                                $lbl_date = date('d-m-Y', strtotime($appointment_data['appointment_datetime']));
                                                                $lbl_time = date('h:i A', strtotime($appointment_data['appointment_datetime']));
                                                                $time_string = ($appointment_data['show_appointment_time'] == "YES" && $appointment_data['emergency_appointment']=="NO" && $appointment_data['custom_token']=="NO") ? " Time:$lbl_time," :"" ;
                                                                $queue_number = ($appointment_data['show_appointment_token'] == "NO") ? "" : $queue_number;


                                                                if ($thin_app_id == 635) {
                                                                    $message = "Token booked for " . Custom::get_string_first_name($appointment_data['cus_name']) . ".$queue_number, Date: $lbl_date.";
                                                                } else {
                                                                    $message = "Token booked for " . Custom::get_string_first_name($appointment_data['cus_name']) . ".$queue_number,$time_string Date: $lbl_date.";
                                                                }
                                                                if($custom_sms = Custom::create_custom_sms_from_template($appointment_id,"BOOKING")){
                                                                    $message = $custom_sms;
                                                                }
                                                                $option = array(
                                                                    'thinapp_id' => $thin_app_id,
                                                                    'staff_id' => 0,
                                                                    'customer_id' => $appointment_data['appointment_customer_id'],
                                                                    'service_id' => $appointment_data['appointment_service_id'],
                                                                    'channel_id' => 0,
                                                                    'role' => "CUSTOMER",
                                                                    'flag' => 'APPOINTMENT',
                                                                    'title' => "New Appointment Request",
                                                                    'message' => mb_strimwidth($message, 0, 250, '...'),
                                                                    'description' => "",
                                                                    'chat_reference' => '',
                                                                    'module_type' => 'APPOINTMENT',
                                                                    'module_type_id' => $appointment_id,
                                                                    'doctor_id' => $doctor_id,
                                                                    'firebase_reference' => ""
                                                                );
                                                                $background['notification'][0]['data'] = $option;
                                                                $background['notification'][0]['user_id'] = $appointment_data['customer_user_id'];
                                                                $background['notification'][0]['send_to'] = "USER";

                                                                if($sendPaymentLinkInSMS == true){
                                                                    $url = SITE_PATH.'booking_convenience/?token='.base64_encode($appointment_id);
                                                                   $attachMessage = "\nPay and confirm your token by clicking on this link ".$url;
                                                                    $message .= $attachMessage;
                                                                }

                                                                $background['sms'][] = array(
                                                                    'message' => $message,
                                                                    'mobile' => $appointment_data['customer_mobile'],
                                                                    'send_to' => "USER"
                                                                );

                                                            }

                                                        }
                                                        else if(!empty($appointment_data) && $payment_type == "CASH" && ($booking_request_from == 'IVR' && $booking_convenience_fee_restrict_ivr == 'YES')) {

                                                            $url = SITE_PATH.'phonepay/?token='.base64_encode($appointment_id);
                                                            $url =Custom::short_url($url,134);
                                                            $queue_number1 = Custom::create_queue_number($appointment_data);
                                                            $queue_number1 = ($appointment_data['show_appointment_token'] == "NO") ? "" : $queue_number1;

                                                           // $message = "To confirm your token no. ".$queue_number1." please pay booking convenience fee by clicking on the following link else token will get cancel in 10 min.\n ".$url;
                                                            $doctor_name = Custom::getThinAppData($thin_app_id)['name'];
                                                         //$message = "$doctor_name\nटोकन नंबर $queue_number1 को सुनिश्चित करने के लिए, निचे दिए गए लिंक पर क्लिक करके, सुविधा शुल्क का भुगतान करें, अन्यथा 5 मिनट में आपका टोकन निरस्त कर दिया जाएगा |\nभुगतान लिंक :- ".$url."\nडॉक्टर की फीस आपको हॉस्पिटल/क्लिनिक में ही जमा करवानी होगी |";
                                                        $message = "For confirm your token number $queue_number1, Please click on below link for payment token fee, otherwise your token will be canceled within 5 minutes\nPayment Link :- $url \nConsultation fee will be deposit into Hospital/Clinic\n- Sent by MEngage";
                                                            
                                                            Custom::send_single_sms($appointment_data['customer_mobile'], $message, 134, false, false);
                                                          //Custom::sendWhatsappSms($appointment_data['customer_mobile'],$message);

                                                        }


                                                        $appointment_booked = true;
                                                        $response['status'] = 1;
                                                        $response['data']['appointment_id'] = $appointment_id;
                                                        $booked_appointment_data =Custom::get_appointment_by_id($appointment_id,$thin_app_id);
                                                        $token_number =Custom::create_queue_number($booked_appointment_data);
                                                        $response['data']['token_number'] = $token_number;
                                                        $response['data']['time'] = $slot_time;
                                                        $response['data']['customer_id'] = $customer_id;
                                                        $response['data']['booking_validity_attempt'] = $booking_validity_attempt;
                                                        $response['data']['flag'] = ($service_data['service_amount'] == 0) ? "FREE" : "PAID";
                                                        $response['data']['customer_mobile'] = $customer_mobile;
                                                        if ($return === false) {
                                                            $response['data']['customer_list'] = Custom::get_customer_list_by_mobile($thin_app_id, $mobile, $role_id, true,20);
                                                        }
                                                    	
                                                    	if($booked_appointment_data['custom_token'] =="YES"){
                                                            $last_time = Custom::get_doctor_last_time_slot($appointment_id);
                                                            $response['data']['time'] = !empty($last_time)?$last_time:'';
                                                        }


                                                        $response['booking_convenience_fee'] = $booking_convenience_fee;
                                                        $response['is_paid_booking_convenience_fee'] = $is_paid_booking_convenience_fee;

                                                        $response['message'] = "Appointment $queue_number for " . $appointment_data['cus_name'] . ", " . $appointment_data['customer_mobile'] . " has been booked successfully";
                                                        WebservicesFunction::addUserStaticToJson('', $user_id, $thin_app_id, $mobile, "APPOINTMENT", "BOOK APPOINTMENT", 'add_new_appointment');


                                                    } else {
                                                        $response['status'] = 0;
                                                        $response['message'] = "Error when scheduled appointment";
                                                    }

                                                } else {
                                                    $response['status'] = 0;
                                                    $response['message'] = "Time slot not available or booked";
                                                }
                                            } else {
                                                $response['status'] = 0;
                                                if ($blocked_user === true) {
                                                    $response['message'] = "You have been blocked by the doctor";
                                                } else {
                                                    $response['message'] = $validity_attempt['message'];
                                                }

                                            }




                                    } else {
                                        $response['status'] = 0;
                                        $response['message'] = "Patient could not add";
                                    }
                                } else {
                                    $response['status'] = 0;
                                    $response['message'] = "Either ( $slot_time ) time slot not available or booked";
                                }
                            } else {
                                $response['status'] = 0;
                                if ($booking_request_from == 'IVR') {
                                    $response['message'] = "Doctor not available;";
                                } else {
                                    $response['message'] = "Your selected token number expired";
                                }

                            }

                        } else {
                            $response['status'] = 0;
                            $response['message'] = "Sorry this service not available";
                        }
                    }
                    flock($fp, LOCK_UN); // unlock the file
                    /* file lock end  */
                    
                    }

                }

            } catch (Exception $e) {
                flock($fp, LOCK_UN); // unlock the file
                $response['status'] = 0;
                $response['message'] = $e->getMessage();
            }


            $notification_data = array(
                'background' => $background,
                'thin_app_id' => $thin_app_id,
                'doctor_id' => $doctor_id,
                'user_type' => $user_type,
                'patient_id' => @$pat_cus_id,
                'booking_request_from'=>$booking_request_from,
                'address_id'=>$address_id,
                'appointment_id'=>@$appointment_id,
                'consulting_type'=>$consulting_type,
                'drive_folder_id'=>$drive_folder_id
            );

            if ( $return === false && !($booking_convenience_fee_restrict_ivr == 'YES' && $booking_request_from == 'IVR') ) {
                    Custom::sendResponse($response);
                    Custom::send_process_to_background();
                    $result = Custom::send_book_appointment_notification($notification_data);
                    $result = Custom::send_web_tracker_notification($thin_app_id);
                    if ($appointment_booked === true && $role_id == 1 && $payment_type == "CASH") {
                        $result =  Custom::send_appointment_tracker_on_booking($thin_app_id, $booking_mobile_number);
                    }
            }else if($booking_convenience_fee_restrict_ivr == 'NO' && $booking_request_from == 'IVR'){
            
            	if($return==true){
                    $response['notification_data'] = $notification_data;
                    return json_encode($response);
                }else{
            	Custom::sendResponse($response);
                Custom::send_process_to_background();
                if(!empty($background['sms'])){
                    foreach ($background['sms'] as $key => $val){
                        if($val['send_to']=='USER'){
                            $message = Custom::create_custom_sms_from_template($appointment_id,'BOOKING');
                            Custom::send_single_sms($val['mobile'],$message,$thin_app_id);
                        }
                    }
                }
                
                }
            
            
            
            } else {
                $response['notification_data'] = $notification_data;
                return json_encode($response);
            }

            exit;

        } else {
            exit();
        }


    }

 public static function lite_web_book_appointment($data = null, $return = false, $booking_request_from = 'APP', $time_of_day = "")
    {

        if (empty($data)) {
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);
        }
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $fp = "";
            try {
                $response = array();
                $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
                $app_key = isset($data['app_key']) ? $data['app_key'] : "";
                $user_id = isset($data['user_id']) ? $data['user_id'] : "";
                $mobile = $login_mobile_number = isset($data['mobile']) ? $data['mobile'] : "";
                $booking_date = isset($data['booking_date']) ? date('Y-m-d',strtotime($data['booking_date'])): "";
                $slot_time = isset($data['slot_time']) ? $data['slot_time'] : "";
                $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : "";
                $customer_id = isset($data['customer_id']) ? $data['customer_id'] : "";
                $customer_name = isset($data['customer_name']) ? $data['customer_name'] : "";
                $customer_mobile = isset($data['customer_mobile']) ? $data['customer_mobile'] : "";
                $role_id = isset($data['role_id']) ? $data['role_id'] : "";

                $user_type = isset($data['user_type']) ? $data['user_type'] : "CUSTOMER";
                $children_id = isset($data['children_id']) ? $data['children_id'] : 0;
                $appointment_for = isset($data['appointment_for']) ? $data['appointment_for'] : "OTHER";
                $customer_dob = isset($data['customer_dob']) ? $data['customer_dob'] : "";
                $address_id = isset($data['address_id']) ? $data['address_id'] : "";
                $payment_type = isset($data['payment_type']) ? $data['payment_type'] : "";
                $appointment_user_role = isset($data['appointment_user_role']) ? $data['appointment_user_role'] : "";
                $queue_number = $selected_token_number = isset($data['queue_number']) ? $data['queue_number'] : "0";
                $service_id = isset($data['service_id']) ? $data['service_id'] : 0;
                $has_token = isset($data['has_token']) ? $data['has_token'] : "YES";
                $custom_token = isset($data['custom_token']) ? $data['custom_token'] : "NO";
                $sub_token = isset($data['sub_token']) ? $data['sub_token'] : "NO";
                $reason_of_appointment = isset($data['reason_of_appointment']) ? $data['reason_of_appointment'] : "";
                $remark = isset($data['remark']) ? $data['remark'] : "";
                $referred_by = isset($data['referred_by']) ? $data['referred_by'] : "";
                $referred_by_mobile = isset($data['referred_by_mobile']) ? $data['referred_by_mobile'] : "";
                $appointment_user_role = isset($data['appointment_user_role']) ? $data['appointment_user_role'] : "";
                $emergency_appointment = isset($data['emergency_appointment']) ? $data['emergency_appointment'] : "NO";
                $checked_in = isset($data['checked_in']) ? $data['checked_in'] : "NO";
                $consulting_type = isset($data['consult_type']) ? $data['consult_type'] : "OFFLINE";
            	$appointment_type = isset($data['appointment_type']) ? $data['appointment_type'] : "";

                if ((empty($customer_dob) && $appointment_for == "CHILD")){

                } else if (empty($thin_app_id)) {
                    if($thin_app_id != "134"){
                        $customer_dob = date('d-m-Y');
                    }

                }

                if (empty($booking_date)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid appointment date';
                } else if (empty($user_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid user';
                } else if (empty($thin_app_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid thinapp';
                } else if (empty($app_key)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid app';
                } else if (empty($mobile)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid mobile';
                } else if (empty($slot_time)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid slot time';
                } else if (empty($doctor_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid doctor';
                } else if (empty($address_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid address';
                } else if (empty($role_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid role';
                } else if (empty($customer_id) && empty($customer_name) && $user_type == "CUSTOMER") {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid customer';
                } else if (empty($payment_type) && ($payment_type != "CASH" && $payment_type != "ONLINE")) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid payment type';
                } else if (($user_type != "CUSTOMER" && $user_type != "CHILDREN")) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid payment type';
                } else if (($appointment_for != "OTHER" && $appointment_for != "CHILD")) {
                    $response['status'] = 0;
                    $response['message'] = 'Select appointment for';
                } else if ((empty($customer_dob) && $appointment_for == "CHILD")) {
                    $response['status'] = 0;
                    $response['message'] = 'Please enter child dob';
                } else if ($appointment_for == "OTHER" && $user_type == "CHILDREN" && empty($children_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Please select child';
                }else if ($emergency_appointment != "YES" && $emergency_appointment != "NO") {
                    $response['status'] = 0;
                    $response['message'] = "Invalid emergency";
                } else if ($doctor_id == '1552' && $booking_request_from !='DIALER') {
                    $response['status'] = 0;
                    $response['message'] = 'Sorry, You can not book this slot';
                } else {

                    $service_data = Custom::get_doctor_service_data($doctor_id);
                    $appointment_user_role = !empty($appointment_user_role) ? $appointment_user_role : Custom::get_appointment_role($mobile, $thin_app_id, $role_id);

                    /* file read start */
                    $filename = LOCAL_PATH . "app/webroot/ivr/tmp_lock/" . $thin_app_id . "_" . $doctor_id . "_" . $address_id . "_" . @$service_data['id'] . ".json";
                    $fp = fopen($filename, "w+"); // open it for WRITING ("w")
                    $block = 1;
                    if (flock($fp, LOCK_EX, $block)) {


                        if ($appointment_type == "ADD_MORE_TOKEN") {
                            $has_token = $custom_token = "YES";
                        }else if($emergency_appointment=="YES"){
                            $slot_time = "06:00 AM";
                            $queue_number = "0";
                            $service_id = !empty($service_data)?$service_data['id']:0;
                            $count = Custom::get_sub_token_number($doctor_id, $service_id, $address_id, $slot_time, $booking_date);
                            $queue_number = $queue_number.".".($count+1);
                            $has_token = $sub_token = "YES";
                            $custom_token = "NO";
                            $validate_data = false;
                        }else if ($appointment_type == "SUB_TOKEN") {
                            $count = Custom::get_sub_token_number($doctor_id, $service_id, $address_id, $slot_time, $booking_date);
                            $queue_number = $queue_number + (($count + 1) / 10);
                            $has_token = $sub_token = "YES";
                            $custom_token = "NO";
                            $validate_data = false;
                        } else if ($appointment_type == "WALK-IN") {
                            $slot_time = !empty($slot_time)?$slot_time:date('h:i A');
                            $queue_number = 0;
                            $has_token = $custom_token = $sub_token = "NO";
                            $validate_data = false;
                        }
                        if (!empty($customer_id) || !empty($children_id)) {
                            if ($user_type == "CUSTOMER") {
                                $children_id = 0;
                                $pat_cus_id = $customer_id;
                            } else if ($user_type == "CHILDREN") {
                                $customer_id = 0;
                                $pat_cus_id = $children_id;
                            }
                            /* this cooe add new customer if customer END*/
                            $save_data = array();
                            $booking_date = date('Y-m-d', strtotime($booking_date));
                            $appointment_customer_id = $customer_id;
                            $appointment_category_id = 0;
                            $appointment_address_id = $address_id;
                            $appointment_staff_id = $doctor_id;
                            $appointment_service_id = $service_data['id'];
                            $day_time_id = date('N', strtotime($booking_date));
                            $appointment_day_time_id = $day_time_id;
                            $date_time = date('Y-m-d H:i:s', strtotime($booking_date . ' ' . $slot_time));
                            $appointment_datetime = $date_time;
                            $slot_duration = $service_data['service_slot_duration'];
                            $amount = $service_data['service_amount'];
                            if($emergency_appointment=="YES"){
                                $get_doctor_data= Custom::get_doctor_by_id($doctor_id);
                                $amount = $get_doctor_data['emergency_appointment_fee'];
                                $amount = (empty($amount))?0:$amount;
                            }
                            $get_appointment_user_role = !empty($appointment_user_role) ? $appointment_user_role : Custom::hospital_get_user_role($data['mobile'], $thin_app_id, $role_id);
                            $validity_attempt = Custom::get_appointment_validity_data($thin_app_id, $pat_cus_id, $address_id, $doctor_id, $booking_date, $service_data['id'], "NEW", $get_appointment_user_role, $user_type,$queue_number,$slot_time);
                            if ($validity_attempt['allow_book_new_appointment'] == "YES") {

                                if ($validity_attempt['allow_add_free_appointment'] == "YES") {
                                    $status = 'CONFIRM';
                                    $payment_status = 'SUCCESS';
                                    $parent_id = $validity_attempt['appointment_parent_id'];
                                    $booking_validity_attempt = $validity_attempt['total_appointment'] + 1;
                                    $amount = 0;
                                } else {
                                    $status = 'NEW';
                                    $payment_status = 'PENDING';
                                    $parent_id = 0;
                                    $booking_validity_attempt = 1;
                                }
                                $category_id = $token_number = 0;
                                $connection = ConnectionUtil::getConnection();
                                $connection->autocommit(true);
                                $created = Custom::created();
                                $allow_add_appointment = true;
                                /* this code check final duplicate token exsit or not*/
                                if ($allow_add_appointment === true) {
                                    if ($has_token == "NO") {
                                        $total_token = Custom::get_total_walk_in_appointment($appointment_staff_id, $appointment_address_id, $booking_date,$service_id,$slot_duration,$thin_app_id,$appointment_user_role,$slot_time);
                                        if($total_token !== false){
                                            $explode_token =explode('.',$total_token);
                                            if(count($explode_token) ==2){
                                                $explode_token[1] = $explode_token[1] + 1;
                                                $queue_number = implode('.',$explode_token);
                                            }else{
                                                $queue_number = $explode_token[0] + 1;
                                            }
                                        }else{
                                            $queue_number = 0;
                                        }
                                    }
                                    $drive_folder_id = Custom::get_patient_folder_id($thin_app_id, $pat_cus_id, $user_type);
                                    $drive_folder_id = !empty($drive_folder_id)?$drive_folder_id:0;


                                    $is_paid_booking_convenience_fee = "NOT_APPLICABLE";
                                    $booking_convenience_fee_restrict_ivr = 'NO';
                                    $booking_convenience_fee = "0";
                                    $booking_doctor_share_percentage = "0";
                                    $booking_doctor_share_fee = "0";
                                    $booking_payment_getway_fee_percentage = "0";
                                    $booking_payment_getway_fee = "0";
                                    $booking_mengage_share_fee = "0";
                                    $reminder_message = "";
                                    $sql = "INSERT INTO appointment_customer_staff_services (reminder_message,consulting_type, appointment_patient_name,checked_in,emergency_appointment, drive_folder_id,custom_token, sub_token, created_by_user_id, appointment_booked_from, reason_of_appointment, notes, referred_by, referred_by_mobile,  has_token, booked_by, children_id, queue_number, appointment_parent_id, booking_validity_attempt, booking_payment_type,appointment_customer_id, appointment_category_id, appointment_address_id, thinapp_id, appointment_staff_id, appointment_service_id, appointment_day_time_id, booking_date, appointment_datetime, slot_duration, slot_time, amount, status, payment_status, created, modified,is_paid_booking_convenience_fee,booking_convenience_fee_restrict_ivr,booking_convenience_fee,booking_doctor_share_percentage,booking_doctor_share_fee,booking_payment_getway_fee_percentage,booking_payment_getway_fee,booking_mengage_share_fee) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                                    $stmt_sub = $connection->prepare($sql);
                                    $stmt_sub->bind_param('sssssssssssssssssssssssssssssssssssssssssssss', $reminder_message, $consulting_type, $customer_name, $checked_in, $emergency_appointment, $drive_folder_id, $custom_token, $sub_token, $user_id, $booking_request_from, $reason_of_appointment, $remark, $referred_by, $referred_by_mobile, $has_token, $appointment_user_role, $children_id, $queue_number, $parent_id, $booking_validity_attempt, $payment_type, $appointment_customer_id, $appointment_category_id, $appointment_address_id, $thin_app_id, $appointment_staff_id, $appointment_service_id, $appointment_day_time_id, $booking_date, $appointment_datetime, $slot_duration, $slot_time, $amount, $status, $payment_status, $created, $created, $is_paid_booking_convenience_fee,$booking_convenience_fee_restrict_ivr, $booking_convenience_fee, $booking_doctor_share_percentage, $booking_doctor_share_fee, $booking_payment_getway_fee_percentage, $booking_payment_getway_fee, $booking_mengage_share_fee);
                                    if ($stmt_sub->execute()) {
                                        $appointment_id = $stmt_sub->insert_id;



                                        if ($booking_validity_attempt > 1 && $booking_request_from != "MQ_FORM") {
                                            $receitpID = Custom::addZeroOPDReceipt($appointment_id, $children_id, $appointment_customer_id, $appointment_address_id, $thin_app_id, $appointment_staff_id);
                                            $sql1 = "UPDATE appointment_customer_staff_services set medical_product_order_id =? where id =?";
                                            $stmt_sub1 = $connection->prepare($sql1);
                                            $stmt_sub1->bind_param('ss', $receitpID, $appointment_id);
                                            $stmt_sub1->execute();
                                            $result = Custom::skip_late_payment_appointment($appointment_id,$user_id);
                                        }
                                        $token_number = $queue_number;
                                        if ($parent_id == 0) {
                                            $sql = "UPDATE appointment_customer_staff_services set appointment_parent_id =? where id =?";
                                            $stmt_sub = $connection->prepare($sql);
                                            $stmt_sub->bind_param('ss', $appointment_id, $appointment_id);
                                            $stmt_sub->execute();
                                        }

                                        $appointment_data = WebservicesFunction::get_appointment_all_data_id($appointment_id);



                                        $appointment_booked = true;
                                        $response['status'] = 1;
                                        $response['data']['appointment_id'] = $appointment_id;
                                        $response['data']['booking_validity_attempt'] = $booking_validity_attempt;
                                        $response['message'] = "Appointment $queue_number for " . $appointment_data['cus_name'] . ", " . $appointment_data['customer_mobile'] . " has been booked successfully";

                                    } else {
                                        $response['status'] = 0;
                                        $response['message'] = "Error when scheduled appointment";
                                    }
                                } else {
                                    $response['status'] = 0;
                                    $response['message'] = "Time slot not available or booked";
                                }
                            } else {
                                $response['status'] = 0;
                                $response['message'] = $validity_attempt['message'];
                            }
                        } else {
                            $response['status'] = 0;
                            $response['message'] = "Patient could not add";
                        }
                    }
                    flock($fp, LOCK_UN); // unlock the file
                    /* file lock end  */

                }

            } catch (Exception $e) {
                flock($fp, LOCK_UN); // unlock the file
                $response['status'] = 0;
                $response['message'] = $e->getMessage();
            }
            return json_encode($response);

        } else {
            exit();
        }


    }
 

public static function web_add_new_appointment($data = null, $appointment_booked_from = "WEB")
    {

        $fp = "";
        try {
            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $booking_date = isset($data['booking_date']) ? $data['booking_date'] : "";
            $slot_time = isset($data['slot_time']) ? $data['slot_time'] : "";
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : "";
            $customer_id = isset($data['customer_id']) ? $data['customer_id'] : "";
            $customer_name = isset($data['customer_name']) ? $data['customer_name'] : "";
            $customer_mobile = isset($data['customer_mobile']) ? $data['customer_mobile'] : "";
            $user_type = isset($data['user_type']) ? $data['user_type'] : "CUSTOMER";
            $children_id = isset($data['children_id']) ? $data['children_id'] : 0;
            $address_id = isset($data['address_id']) ? $data['address_id'] : "";
            $service_id = isset($data['service_id']) ? $data['service_id'] : "";
            $gender = isset($data['gender']) ? $data['gender'] : "";
            $role_id = isset($data['role_id']) ? $data['role_id'] : "";
            $payment_type = isset($data['payment_type']) ? $data['payment_type'] : "";
            $appointment_user_role = isset($data['appointment_user_role']) ? $data['appointment_user_role'] : "";
            $queue_number = isset($data['queue_number']) ? $data['queue_number'] : "0";
            $reason_of_appointment = isset($data['reason_of_appointment']) ? $data['reason_of_appointment'] : "";
            $notes = isset($data['notes']) ? $data['notes'] : "";
            $referred_by_mobile = isset($data['referred_by_mobile']) ? $data['referred_by_mobile'] : "";
            $referred_by = isset($data['referred_by']) ? $data['referred_by'] : "";
            $isAddMore = isset($data['isAddMore']) ? $data['isAddMore'] : "NO";
            $custom_token = isset($data['custom_token']) ? $data['custom_token'] : "NO";


            $background = array();
            $appointment_booked = false;
            $booking_mobile_number = $mobile;
            if (empty($booking_date)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid appointment date';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user';
            } else if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else if (empty($slot_time)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid slot time';
            } else if (empty($doctor_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid doctor';
            } else if (empty($address_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid address';
            } else if (empty($role_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid role';
            } else if (empty($customer_id) && empty($customer_name) && $user_type == "CUSTOMER") {
                $response['status'] = 0;
                $response['message'] = 'Invalid customer';
            } else if (empty($payment_type) && ($payment_type != "CASH" && $payment_type != "ONLINE")) {
                $response['status'] = 0;
                $response['message'] = 'Invalid payment type';
            } else if (($user_type != "CUSTOMER" && $user_type != "CHILDREN")) {
                $response['status'] = 0;
                $response['message'] = 'Invalid payment type';
            } else if ($user_type == "CHILDREN" && empty($children_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please select child';
            } else {

                $new_appointment_request = Custom::check_app_enable_permission($thin_app_id, 'NEW_QUICK_APPOINTMENT');
                if (!empty($service_id)) {
                    $service_data = Custom::get_doctor_and_service_data($doctor_id, $service_id);
                } else {
                    $service_data = Custom::get_doctor_service_data($doctor_id);
                }


                /* file read start */
                $filename = LOCAL_PATH . "app/webroot/ivr/tmp_lock/" . $thin_app_id . "_" . $doctor_id . "_" . $address_id . "_" . @$service_data['id'] . ".json";
                $fp = fopen($filename, "w+"); // open it for WRITING ("w")
                $block = 1;
                if (flock($fp, LOCK_EX, $block)) {


                    $mobile = empty($customer_mobile) ? $mobile : $customer_mobile;

                    $mobile = Custom::create_mobile_number($mobile);

                    if (!empty($service_data)) {

                        if ($custom_token == "NO") {
                            if ($new_appointment_request === true) {
                                $setting_type = $service_data['appointment_setting_type'];
                                $slot_array = Custom::new_get_appointment_slot($thin_app_id, $doctor_id, $service_id, $address_id, $setting_type, $booking_date, true);
                                $queue_number = !empty($slot_array[$slot_time]['token']) ? $slot_array[$slot_time]['token'] : false;
                            } else {
                                $slot_array = Custom::load_doctor_slot_by_address($booking_date, $doctor_id, $service_data['service_slot_duration'], $thin_app_id, $address_id, true);
                                $queue_number = !empty($slot_array[$slot_time]['queue_number']) ? $slot_array[$slot_time]['queue_number'] : false;
                            }
                        }


                        if ($queue_number !== false) {

                            if ((!empty($slot_array) && (array_key_exists($slot_time, $slot_array) && ($slot_array[$slot_time]['status'] == 'AVAILABLE' || $isAddMore == 'YES'))) || $custom_token == "YES") {

                                /* START this cooe add new customer if customer */
                                if ($customer_id == 0 && $user_type == "CUSTOMER") {
                                    $customer_name = trim($customer_name);
                                    $customer_data = Custom::search_customer_name($thin_app_id, $mobile, $customer_name);
                                    if (empty($customer_data)) {
                                        $customer = array();
                                        $customer['app_key'] = $app_key;
                                        $customer['thin_app_id'] = $thin_app_id;
                                        $customer['user_id'] = $user_id;
                                        $customer['first_name'] = $customer_name;
                                        $customer['email'] = '';
                                        $customer['mobile'] = $mobile;
                                        $customer['country_code'] = "+91";
                                        $customer['gender'] = strtoupper($gender);
                                        $customer['address'] = "";
                                        $result = WebservicesFunction::appointment_add_customer($customer);
                                        $result = $customer_data = json_decode($result, true);
                                        if ($result['status'] == 1) {
                                            $customer_id = $result['customer_id'];
                                            $booking_mobile_number = $mobile;
                                        }
                                    } else {
                                        $customer_id = $customer_data['id'];
                                    }

                                }
                                if (!empty($customer_id) || !empty($children_id)) {

                                    if ($user_type == "CUSTOMER") {
                                        $children_id = 0;
                                        $pat_cus_id = $customer_id;
                                    } else if ($user_type == "CHILDREN") {
                                        $customer_id = 0;
                                        $pat_cus_id = $children_id;
                                    }

                                    /* this cooe add new customer if customer END*/
                                    $save_data = array();
                                    $booking_date = date('Y-m-d', strtotime($booking_date));
                                    $appointment_customer_id = $customer_id;
                                    $appointment_category_id = 0;
                                    $appointment_address_id = $address_id;
                                    $appointment_staff_id = $doctor_id;
                                    $appointment_service_id = $service_data['id'];
                                    $day_time_id = date('N', strtotime($booking_date));
                                    $appointment_day_time_id = $day_time_id;
                                    $booking_date = $booking_date;
                                    $date_time = date('Y-m-d H:i:s', strtotime($booking_date . ' ' . $slot_time));
                                    $appointment_datetime = $date_time;
                                    $slot_duration = $service_data['service_slot_duration'];
                                    $slot_time = $slot_time;
                                    $amount = $service_data['service_amount'];

                                    $get_appointment_user_role = !empty($appointment_user_role) ? $appointment_user_role : Custom::get_appointment_role($data['mobile'], $thin_app_id, $role_id);

                                    $validity_attempt = Custom::get_appointment_validity_data($thin_app_id, $pat_cus_id, $address_id, $doctor_id, $booking_date, $service_data['id'], "NEW", $get_appointment_user_role, $user_type);

                                    if ($validity_attempt['allow_book_new_appointment'] == "YES") {

                                        if ($validity_attempt['allow_add_free_appointment'] == "YES") {
                                            $status = 'CONFIRM';
                                            $payment_status = 'SUCCESS';
                                            $parent_id = $validity_attempt['appointment_parent_id'];
                                            $booking_validity_attempt = $validity_attempt['total_appointment'] + 1;
                                            $amount = 0;
                                        } else {
                                            $status = 'NEW';
                                            $payment_status = 'PENDING';
                                            $parent_id = 0;
                                            $booking_validity_attempt = 1;
                                        }

                                        $category_id = 0;
                                        $connection = ConnectionUtil::getConnection();
                                        $connection->autocommit(false);
                                        $created = Custom::created();


                                        $sub_token = "NO";
                                        if ($isAddMore == 'YES') {
                                            $sub_token = "YES";
                                            $maxTokenSearch = "SELECT MAX(`queue_number`) AS `max_num` FROM `appointment_customer_staff_services` WHERE `appointment_category_id` = '" . $appointment_category_id . "' AND `appointment_address_id` = '" . $appointment_address_id . "' AND `thinapp_id` = '" . $thin_app_id . "' AND `appointment_staff_id` = '" . $appointment_staff_id . "' AND `appointment_service_id` = '" . $appointment_service_id . "' AND `appointment_datetime` = '" . $appointment_datetime . "' AND `status` IN ('NEW','CONFIRM','RESCHEDULE','CLOSED') LIMIT 1";
                                            $maxTokenSearchRS = $connection->query($maxTokenSearch);
                                            if ($maxTokenSearchRS->num_rows) {
                                                $maxTokenSearchData = mysqli_fetch_assoc($maxTokenSearchRS);
                                                if ($maxTokenSearchData['max_num'] > 0) {
                                                    $queue_number = ($maxTokenSearchData['max_num'] + 0.1);
                                                } else {
                                                    $queue_number = ($queue_number + 0.1);
                                                }
                                            }


                                        }


                                        $sql = "INSERT INTO appointment_customer_staff_services (custom_token, created_by_user_id, appointment_booked_from, sub_token,referred_by_mobile, referred_by, reason_of_appointment, notes, booked_by, children_id, queue_number, appointment_parent_id, booking_validity_attempt, booking_payment_type,appointment_customer_id, appointment_category_id, appointment_address_id, thinapp_id, appointment_staff_id, appointment_service_id, appointment_day_time_id, booking_date, appointment_datetime, slot_duration, slot_time, amount, status, payment_status, created, modified) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                                        $stmt_sub = $connection->prepare($sql);
                                        $stmt_sub->bind_param('ssssssssssssssssssssssssssssss', $custom_token, $user_id, $appointment_booked_from, $sub_token, $referred_by_mobile, $referred_by, $reason_of_appointment, $notes, $appointment_user_role, $children_id, $queue_number, $parent_id, $booking_validity_attempt, $payment_type, $appointment_customer_id, $appointment_category_id, $appointment_address_id, $thin_app_id, $appointment_staff_id, $appointment_service_id, $appointment_day_time_id, $booking_date, $appointment_datetime, $slot_duration, $slot_time, $amount, $status, $payment_status, $created, $created);
                                        if ($stmt_sub->execute()) {
                                            $appointment_id = $stmt_sub->insert_id;

                                            if ($booking_validity_attempt > 1) {
                                                $receitpID = Custom::addZeroOPDReceipt($appointment_id, $children_id, $appointment_customer_id, $appointment_address_id, $thin_app_id, $appointment_staff_id);
                                                $sql1 = "UPDATE appointment_customer_staff_services set medical_product_order_id =? where id =?";
                                                $stmt_sub1 = $connection->prepare($sql1);
                                                $stmt_sub1->bind_param('ss', $receitpID, $appointment_id);
                                                $stmt_sub1->execute();
                                            }

                                            if ($parent_id == 0) {
                                                $sql = "UPDATE appointment_customer_staff_services set appointment_parent_id =? where id =?";
                                                $stmt_sub1 = $connection->prepare($sql);
                                                $stmt_sub1->bind_param('ss', $appointment_id, $appointment_id);
                                                $stmt_sub1->execute();
                                                $connection->commit();
                                            } else {
                                                $connection->commit();
                                            }

                                            $appointment_data = WebservicesFunction::get_appointment_all_data_id($appointment_id);
                                            if (!empty($appointment_data) && $payment_type == "CASH") {


                                                $queue_number = ($queue_number > 0) ? "Token : $queue_number" : "";

                                                $app_date = date('d/m/Y h:i A', strtotime($appointment_data['appointment_datetime']));
                                                $app_time = date('h:i A', strtotime($appointment_data['appointment_datetime']));

                                                $label_date = date('Y-m-d', strtotime($appointment_data['appointment_datetime']));
                                                $day_label = Custom::get_date_label($label_date);

                                                /* send appoinment notifincation to staff */
                                                $staff_name = Custom::get_doctor_first_name(trim($appointment_data['staff_name']));
                                                //$message = "New appointment scheduled on " . $appointment_data['appointment_datetime'] . ' for service ' . $appointment_data['service_name'];

                                                if ($appointment_user_role == 'USER' || $get_appointment_user_role == "RECEPTIONIST") {


                                                    $message = "Hi " . $staff_name . ", appointment, $queue_number with patient " . Custom::get_string_first_name($appointment_data['cus_name']) . ', has been confirmed on ' . $day_label . ', ' . $app_date;
                                                    $option = array(
                                                        'thinapp_id' => $thin_app_id,
                                                        'customer_id' => 0,
                                                        'staff_id' => $appointment_data['appointment_staff_id'],
                                                        'service_id' => $appointment_data['appointment_service_id'],
                                                        'channel_id' => 0,
                                                        'role' => "STAFF",
                                                        'flag' => 'APPOINTMENT',
                                                        'title' => "New Appointment Request",
                                                        'message' => mb_strimwidth($message, 0, 250, '...'),
                                                        'description' => "",
                                                        'chat_reference' => '',
                                                        'module_type' => 'APPOINTMENT',
                                                        'module_type_id' => $appointment_id,
                                                        'doctor_id' => $doctor_id,
                                                        'firebase_reference' => ""
                                                    );
                                                    $background['notification'][0]['data'] = $option;
                                                    $background['notification'][0]['user_id'] = $appointment_data['staff_user_id'];

                                                    $day_label = (strtoupper($day_label) == "TODAY") ? $day_label . ', Approx ' . $app_time : $day_label . ', ' . $app_date;

                                                    //$message = "Hi " . Custom::get_string_first_name($appointment_data['cus_name']) . ", you have an appointment, $queue_number booked with " . $staff_name . ',on ' . $day_label . '. Please plan to come 15 min before.';
                                                    $lbl_date = date('d-m-Y', strtotime($appointment_data['appointment_datetime']));
                                                    $lbl_time = date('h:i A', strtotime($appointment_data['appointment_datetime']));
                                                    $message = "Appointment booked for " . Custom::get_string_first_name($appointment_data['cus_name']) . ".$queue_number, Approx time:$lbl_time, Date: $lbl_date. Plan to come 15 min before.";

                                                    $option = array(
                                                        'thinapp_id' => $thin_app_id,
                                                        'staff_id' => 0,
                                                        'customer_id' => $appointment_data['appointment_customer_id'],
                                                        'service_id' => $appointment_data['appointment_service_id'],
                                                        'channel_id' => 0,
                                                        'role' => "CUSTOMER",
                                                        'flag' => 'APPOINTMENT',
                                                        'title' => "New Appointment Request",
                                                        'message' => mb_strimwidth($message, 0, 250, '...'),
                                                        'description' => "",
                                                        'chat_reference' => '',
                                                        'module_type' => 'APPOINTMENT',
                                                        'module_type_id' => $appointment_id,
                                                        'doctor_id' => $doctor_id,
                                                        'firebase_reference' => ""
                                                    );
                                                    $background['notification'][1]['data'] = $option;
                                                    $background['notification'][1]['user_id'] = $appointment_data['customer_user_id'];
                                                    if ($get_appointment_user_role == "RECEPTIONIST") {
                                                        $background['sms'][] = array(
                                                            'message' => $message,
                                                            'mobile' => $appointment_data['customer_mobile']
                                                        );
                                                    }

                                                }


                                                if ($appointment_user_role == 'ADMIN' || $appointment_user_role == 'STAFF') {

                                                    $day_label = (strtoupper($day_label) == "TODAY") ? $day_label . ', Approx ' . $app_time : $day_label . ', ' . $app_date;

                                                    //$message = "Hi " . Custom::get_string_first_name($appointment_data['cus_name']) . ", you have an appointment, $queue_number booked with " . $staff_name . ',on ' . $day_label .'. Please plan to come 15 min before.';

                                                    $lbl_date = date('d-m-Y', strtotime($appointment_data['appointment_datetime']));
                                                    $lbl_time = date('h:i A', strtotime($appointment_data['appointment_datetime']));
                                                    $message = "Appointment booked for " . Custom::get_string_first_name($appointment_data['cus_name']) . ".$queue_number, Approx time:$lbl_time, Date: $lbl_date. Plan to come 15 min before.";

                                                    $option = array(
                                                        'thinapp_id' => $thin_app_id,
                                                        'staff_id' => 0,
                                                        'customer_id' => $appointment_data['appointment_customer_id'],
                                                        'service_id' => $appointment_data['appointment_service_id'],
                                                        'channel_id' => 0,
                                                        'role' => "CUSTOMER",
                                                        'flag' => 'APPOINTMENT',
                                                        'title' => "New Appointment Request",
                                                        'message' => mb_strimwidth($message, 0, 250, '...'),
                                                        'description' => "",
                                                        'chat_reference' => '',
                                                        'module_type' => 'APPOINTMENT',
                                                        'module_type_id' => $appointment_id,
                                                        'doctor_id' => $doctor_id,
                                                        'firebase_reference' => ""
                                                    );
                                                    $background['notification'][0]['data'] = $option;
                                                    $background['notification'][0]['user_id'] = $appointment_data['customer_user_id'];
                                                    $background['sms'][] = array(
                                                        'message' => $message,
                                                        'mobile' => $appointment_data['customer_mobile']
                                                    );
                                                }

                                            }
                                            $appointment_booked = true;
                                            $response['status'] = 1;
                                            $response['data']['appointment_id'] = $appointment_id;
                                            $response['data']['customer_id'] = $customer_id;
                                            $response['data']['flag'] = ($service_data['service_amount'] == 0) ? "FREE" : "PAID";
                                            $response['data']['customer_mobile'] = $customer_mobile;
                                            $response['data']['customer_list'] = Custom::get_customer_list_by_mobile($thin_app_id, $mobile, $role_id, true);
                                            $response['message'] = "Appointment $queue_number for " . $appointment_data['cus_name'] . ", " . $appointment_data['customer_mobile'] . " has been booked successfully";
                                            WebservicesFunction::addUserStaticToJson('', $user_id, $thin_app_id, $mobile, "APPOINTMENT", "BOOK APPOINTMENT", 'add_new_appointment');

                                        } else {
                                            $response['status'] = 0;
                                            $response['message'] = "Error when scheduled appointment";
                                        }

                                    } else {
                                        $response['status'] = 0;
                                        $response['message'] = $validity_attempt['message'];
                                    }
                                } else {
                                    $response['status'] = 0;
                                    $response['message'] = "Customer could not add";
                                }
                            } else {
                                $response['status'] = 0;
                                $response['message'] = "Either ( $slot_time ) time slot not available or booked";
                            }
                        } else {
                            $response['status'] = 0;
                            $response['message'] = "Your selected token number expired";
                        }

                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Sorry this service not available";
                    }

                }
                flock($fp, LOCK_UN); // unlock the file
                /* file lock end  */
            }

        } catch (Exception $e) {
            flock($fp, LOCK_UN); // unlock the file
            /* file lock end  */
            $response['status'] = 0;
            $response['message'] = $e->getMessage();
        }

        if (!empty($background)) {
            if (isset($background['notification'])) {

                foreach ($background['notification'] as $key => $value) {
                    $option = $value['data'];
                    $user_id = $value['user_id'];
                    Custom::send_notification_by_user_id($option, array($user_id), $thin_app_id);
                }
            }

            if (isset($background['sms'])) {
                $doctor_data = Custom::get_doctor_by_id($doctor_id, $thin_app_id);
                foreach ($background['sms'] as $key => $value) {

                    $doctor_name = !empty($doctor_data) ? $doctor_data['name'] . "\n" : "";
                    $message = $doctor_name . $value['message'];
                    $message = str_replace("Plan to come 15 min before.", "", $message);
                    $mobile = $value['mobile'];
                    $cus_data = Custom::get_user_by_mobile($thin_app_id, $mobile);
                    if (empty($cus_data) || @$cus_data['app_installed_status'] == "UNINSTALLED") {
                        Custom::send_single_sms($mobile, $message, $thin_app_id);
                    }
                }
            }
        }


        $folder_id = 0;
        if ($user_type == "CUSTOMER") {
            if (!empty($customer_id)) {
                $folder_id = Custom::get_patient_folder_id($thin_app_id, $customer_id, $user_type);
            }

            if (!empty($customer_id) && empty($folder_id)) {
                $customer_data = Custom::get_customer_by_id($customer_id);
                if (!empty($customer_data)) {
                    $customer_mobile = $customer_data['mobile'];
                    $res = Custom::create_and_share_folder($thin_app_id, $customer_mobile, $customer_data['first_name'], 'CUSTOMER', $customer_id);
                    $res = json_decode($res, true);
                    $folder_id = $res['folder_id'];
                }
            }

            $doctor_data = Custom::get_doctor_by_id($doctor_id, $thin_app_id);
            $folder_data = Custom::get_folder_by_id($folder_id);
            if (!empty($doctor_data) && !empty($folder_data)) {
                $share_data = array();
                $drive_folder_id = $folder_data['id'];
                $share_data['thin_app_id'] = $thin_app_id;
                $share_data['user_id'] = $folder_data['user_id'];
                $share_data['app_key'] = APP_KEY;
                $share_with_mobile[0]['mobile'] = $doctor_data['mobile'];
                $share_data['share_with_mobile'] = $share_with_mobile;
                $share_data['share_from_mobile'] = $folder_data['mobile'];;
                $share_data['drive_file_id'] = 0;
                $share_data['drive_folder_id'] = $drive_folder_id;
                $share_data['channel_id'] = 0;
                $share_data['shared_object'] = 'FOLDER';
                $share_data['status'] = 'SHARED';

                $result = WebservicesFunction::add_share($share_data, false, true);
                $result = json_decode($result, true);

            }
        }

        if ($appointment_booked === true && $role_id == 1 && $payment_type == "CASH") {
            Custom::send_appointment_tracker_on_booking($thin_app_id, $booking_mobile_number);
        }


        return $response;

    }


   public static function check_appointment_validity($data = null, $return_type = false)
    {
        if (empty($data)) {
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);
        }

        if ($_SERVER['REQUEST_METHOD'] === 'POST' || $_SERVER['REQUEST_METHOD'] === 'PUT') {
            try {
                $response = array();
                $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
                $app_key = isset($data['app_key']) ? $data['app_key'] : "";
                $user_id = isset($data['user_id']) ? $data['user_id'] : "";
                $role_id = isset($data['role_id']) ? $data['role_id'] : "";
                $mobile = isset($data['mobile']) ? $data['mobile'] : "";
                $booking_date = isset($data['booking_date']) ? $data['booking_date'] : "";
                $slot_time = isset($data['slot_time']) ? $data['slot_time'] : "";
                $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : "";
                $customer_id = isset($data['customer_id']) ? $data['customer_id'] : "";
                $customer_name = isset($data['customer_name']) ? $data['customer_name'] : "";
                $customer_mobile = isset($data['customer_mobile']) ? $data['customer_mobile'] : "";
                $address_id = isset($data['address_id']) ? $data['address_id'] : "";
                $appointment_user_role = isset($data['appointment_user_role']) ? $data['appointment_user_role'] : "";
                $user_type = isset($data['user_type']) ? $data['user_type'] : "";
                $children_id = isset($data['children_id']) ? $data['children_id'] : "";
                $service_id = isset($data['service_id']) ? $data['service_id'] : 0;
                $consult_type = isset($data['consult_type']) ? $data['consult_type'] : "";
            	$emergency_appointment = isset($data['emergency_appointment']) ? $data['emergency_appointment'] : "NO";
                $app_version_name = isset($data['app_version_name']) ? $data['app_version_name'] : "WEB";
                $convenience_fee = $consulting_fee = 0;
            	$display_consultation_fee = 0;
            	$emergency_appointment = 'NO';
                if(strtoupper(strtolower($data['slot_time']))=='BLANK'){
                    $emergency_appointment = 'YES';
                }
            
            	
            
                if (empty($booking_date)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid appointment date';
                } else if (empty($user_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid user';
                } else if (empty($thin_app_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid thinapp';
                } else if (empty($app_key)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid app';
                } else if (empty($mobile)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid mobile';
                } else if (empty($slot_time)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid slot time';
                } else if (empty($doctor_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid doctor';
                } else if (empty($address_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid address';
                } else if (empty($role_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid role';
                } else if (empty($user_type)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid user_type';
                } else if (empty($customer_id) && empty($customer_name) && $user_type == "CUSTOMER") {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid customer';
                } else if (empty($children_id) && $user_type == "CHILDREN") {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid children id';
                } else {

                    $new_appointment_request = false;
                    if (empty($service_id)) {
                        $service_data = Custom::get_doctor_service_data($doctor_id);
                    } else {
                        $service_data = Custom::get_doctor_and_service_data($doctor_id, $service_id);
                        $new_appointment_request = true;
                    }


                    $total_attempt = 0;
                    $app_data = array();
                    $get_appointment_user_role = !empty($appointment_user_role) ? $appointment_user_role : Custom::get_appointment_role($mobile, $thin_app_id, $role_id);
                    $allow_add_appointment = false;
                    if (!empty($service_data)) {

                        if ($app_version_name == 'WEB' || ($service_data['version_name'] == $app_version_name)) {
                            if ($app_version_name == 'WEB' || $service_data['is_online_consulting'] == "YES" || $service_data['is_offline_consulting'] == "YES" || $service_data['is_audio_consulting'] == "YES" || $service_data['is_chat_consulting'] == "YES") {
                                if (!empty($customer_id) || !empty($children_id)) {
                                    $pat_id = ($user_type == "CUSTOMER") ? $customer_id : $children_id;
                                    $validity_attempt = Custom::get_appointment_validity_data($thin_app_id, $pat_id, $address_id, $doctor_id, $booking_date, $service_data['id'], "NEW", $get_appointment_user_role, $user_type);

                                } else {
                                    $mobile = Custom::create_mobile_number($customer_mobile);
                                    $customer_data = Custom::search_customer_name($thin_app_id, $mobile, $customer_name);
                                    if (!empty($customer_data)) {
                                        $customer_id = $customer_data['id'];
                                        $validity_attempt = Custom::get_appointment_validity_data($thin_app_id, $customer_id, $address_id, $doctor_id, $booking_date, $service_data['id'], "NEW", $get_appointment_user_role, 'CUSTOMER');
                                    } else {
                                        $allow_add_appointment = true;
                                    }
                                }
								$display_consultation_fee= Custom::getConsultingFee($consult_type,$service_data);
                                if($consult_type=='VIDEO' || $consult_type=='ONLINE'){
                                    $convenience_fee= $service_data['booking_convenience_fee_video'];
                                }else if($consult_type=='AUDIO'){
                                    $convenience_fee= $service_data['booking_convenience_fee_audio'];
                                }else if($consult_type=='CHAT'){
                                    $convenience_fee= $service_data['booking_convenience_fee_chat'];
                                }else{
                                    if($emergency_appointment=='YES'){
                                        $convenience_fee= $service_data['booking_convenience_fee_emergency'];
                                    	$display_consultation_fee= $service_data['emergency_appointment_fee'];
                                    }else{
                                        $convenience_fee= $service_data['booking_convenience_fee'];
                                    }
                                }

                                if (!empty($validity_attempt)) {
                                    if ($validity_attempt['allow_book_new_appointment'] == "YES") {
                                        $response['status'] = 1;
                                        $response['message'] = "Validity check successfully";

                                        $response['data']['payment_mode'] = $service_data['payment_mode'];
                                        if ($validity_attempt['allow_add_free_appointment'] == "YES") {
                                            $response['data']['total_booked_appointment'] = $validity_attempt['total_appointment'];
                                            $response['data']['convenience_fee'] = $convenience_fee;
                                        } else {
                                            $response['data']['total_booked_appointment'] = 0;

                                            if ((empty($consult_type) && $service_data['is_online_consulting'] == "YES") || in_array($consult_type,array('OFFLINE','ONLINE','VIDEO','AUDIO','CHAT'))) {
                                                $consulting_fee= $display_consultation_fee = Custom::getConsultingFee($consult_type,$service_data);
                                                if($emergency_appointment=='YES' ){
                                                    $consulting_fee= $display_consultation_fee= $service_data['emergency_appointment_fee'];
                                                }else{
                                                    $consulting_fee= $display_consultation_fee = Custom::getConsultingFee($consult_type,$service_data);
                                                    if($service_data['pay_clinic_visit_fee_online']=='NO'){
                                                        if ($consult_type=='OFFLINE' && Custom::check_app_enable_permission($thin_app_id, 'SMART_CLINIC')){
                                                            $consulting_fee =0;
                                                        }
                                                    }
                                                }

                                                $response['data']['convenience_fee'] = $convenience_fee + $consulting_fee;
                                            }else{
                                                $response['data']['convenience_fee'] =$convenience_fee= $service_data['booking_convenience_fee'];
                                            }

                                        }
                                    } else {
                                        $response['status'] = 0;
                                        $response['message'] = $validity_attempt['message'];
                                    }

                                } else if ($allow_add_appointment === true) {
                                    $response['status'] = 1;
                                    $response['message'] = "Validity check successfully";
                                    $response['data']['total_booked_appointment'] = 0;
                                    $response['data']['payment_mode'] = $service_data['payment_mode'];
                                    $response['data']['convenience_fee'] =$convenience_fee;
                                    if ((empty($consult_type) && $service_data['is_online_consulting'] == "YES") || in_array($consult_type,array('OFFLINE','ONLINE','VIDEO','AUDIO','CHAT'))) {
                                        $consulting_fee= $display_consultation_fee = Custom::getConsultingFee($consult_type,$service_data);
                                        if($emergency_appointment=='YES' ){
                                                    $consulting_fee= $display_consultation_fee = $service_data['emergency_appointment_fee'];
                                                }else{
                                                    $consulting_fee= $display_consultation_fee =Custom::getConsultingFee($consult_type,$service_data);
                                                    if ($consult_type=='OFFLINE' && Custom::check_app_enable_permission($thin_app_id, 'SMART_CLINIC')){
                                                        $consulting_fee =0;
                                                    }
                                                }
                                        $response['data']['convenience_fee'] = $convenience_fee + $consulting_fee;

                                    }

                                } else {
                                    $response['status'] = 0;
                                    $response['message'] = "Invalid appointment data";
                                }
                            } else {
                                $response['status'] = 0;
                                $response['message'] = "Sorry, Doctor not accepting appointment right now";
                            }
                        } else {
                            $response['status'] = 0;
                            $response['message'] = "YOU ARE USING OLDER VERSION OF THE APP PLEASE UPDATE FROM PLAYSTORE | आपकी ऍप का version बहुत पुराना है कृपया ऍप को प्लेस्टोर से अपडेट करे";
                        }

                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Sorry this service not available";
                    }
                }

            } catch (Exception $e) {

                $response['status'] = 0;
                $response['message'] = $e->getMessage();
            }
            $response['data']['label'] = '';
        	$response['data']['display_consultation_fee'] = $display_consultation_fee;
            $response['data']['display_convenience_fee'] = $convenience_fee;
            if(!empty($consulting_fee) || !empty($convenience_fee)){
                $label = "";
                if (!empty($consulting_fee)) {
                    if($service_data['category_name']=='TEMPLE'){
                        $label = "Darshan Charges - $consulting_fee Rs\n";
                    }else{
                        $label = "Consultation Charges - $consulting_fee Rs\n";
                    }
                }if (!empty($convenience_fee)) {
                    $label .= "Token Booking Convenience Charges - $convenience_fee Rs\n";
                }if (!empty($consulting_fee) && !empty($convenience_fee)) {
                    $total = $convenience_fee + $consulting_fee;
                    $label .= "Total Transaction Amount - $total Rs\n";
                }
                $response['data']['label'] = $label;
            }

            if ($return_type === true) {
                return $response;
            } else {
                Custom::sendResponse($response);
            }

        }
        exit();
    }

    public static function web_check_appointment_validity($data = null)
    {
        try {
            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $role_id = isset($data['role_id']) ? $data['role_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $booking_date = isset($data['booking_date']) ? $data['booking_date'] : "";
            $slot_time = isset($data['slot_time']) ? $data['slot_time'] : "";
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : "";
            $customer_id = isset($data['customer_id']) ? $data['customer_id'] : "";
            $customer_name = isset($data['customer_name']) ? $data['customer_name'] : "";
            $customer_mobile = isset($data['customer_mobile']) ? $data['customer_mobile'] : "";
            $address_id = isset($data['address_id']) ? $data['address_id'] : "";
            $appointment_user_role = isset($data['appointment_user_role']) ? $data['appointment_user_role'] : "";
            $user_type = isset($data['user_type']) ? $data['user_type'] : "";
            $children_id = isset($data['children_id']) ? $data['children_id'] : "";


            if (empty($booking_date)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid appointment date';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user';
            } else if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else if (empty($slot_time)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid slot time';
            } else if (empty($doctor_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid doctor';
            } else if (empty($address_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid address';
            } else if (empty($role_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid role';
            } else if (empty($user_type)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user_type';
            } else if (empty($customer_id) && empty($customer_name) && $user_type == "CUSTOMER") {
                $response['status'] = 0;
                $response['message'] = 'Invalid customer';
            } else if (empty($children_id) && $user_type == "CHILDREN") {
                $response['status'] = 0;
                $response['message'] = 'Invalid children id';
            } else {

                $service_data = Custom::get_doctor_service_data($doctor_id);
                $total_attempt = 0;
                $app_data = array();
                $get_appointment_user_role = !empty($appointment_user_role) ? $appointment_user_role : Custom::get_appointment_role($mobile, $thin_app_id, $role_id);
                $allow_add_appointment = false;
                if (!empty($service_data)) {
                    if (!empty($customer_id) || !empty($children_id)) {
                        $pat_id = ($user_type == "CUSTOMER") ? $customer_id : $children_id;
                        $validity_attempt = Custom::get_appointment_validity_data($thin_app_id, $pat_id, $address_id, $doctor_id, $booking_date, $service_data['id'], "NEW", $get_appointment_user_role, $user_type);

                    } else {
                        $mobile = Custom::create_mobile_number($customer_mobile);
                        $customer_data = Custom::search_customer_name($thin_app_id, $mobile, $customer_name);
                        if (!empty($customer_data)) {
                            $customer_id = $customer_data['id'];
                            $validity_attempt = Custom::get_appointment_validity_data($thin_app_id, $customer_id, $address_id, $doctor_id, $booking_date, $service_data['id'], "NEW", $get_appointment_user_role, 'CUSTOMER');
                        } else {
                            $allow_add_appointment = true;
                        }
                    }
                    if (!empty($validity_attempt)) {
                        if ($validity_attempt['allow_book_new_appointment'] == "YES") {
                            $response['status'] = 1;
                            $response['message'] = "Validity check successfully";
                            $response['data']['payment_mode'] = $service_data['payment_mode'];
                            if ($validity_attempt['allow_add_free_appointment'] == "YES") {
                                $response['data']['total_booked_appointment'] = $validity_attempt['total_appointment'];
                            } else {
                                $response['data']['total_booked_appointment'] = 0;
                            }
                        } else {
                            $response['status'] = 0;
                            $response['message'] = $validity_attempt['message'];
                        }

                    } else if ($allow_add_appointment === true) {
                        $response['status'] = 1;
                        $response['message'] = "Validity check successfully";
                        $response['data']['total_booked_appointment'] = 0;
                        $response['data']['payment_mode'] = $service_data['payment_mode'];

                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Invalid appointment data";
                    }

                } else {
                    $response['status'] = 0;
                    $response['message'] = "Sorry this service not available";
                }
            }

        } catch (Exception $e) {

            $response['status'] = 0;
            $response['message'] = $e->getMessage();
        }
        return $response;

    }


  public static function blocked_appointment_slot($data=null)
    {
        $return = true;
        if(empty($data)){
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);
            $return = false;
        }

        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            try {
                $response = array();
                $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
                $app_key = isset($data['app_key']) ? $data['app_key'] : "";
                $user_id = isset($data['user_id']) ? $data['user_id'] : "";
                $role_id = isset($data['role_id']) ? $data['role_id'] : "";
                $mobile = isset($data['mobile']) ? $data['mobile'] : "";
                $date = isset($data['date']) ? $data['date'] : "";
                $message = isset($data['message']) ? $data['message'] : "";
                $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : "";
                $slot_string = isset($data['slot_string']) ? $data['slot_string'] : "";
                $address_id = isset($data['address_id']) ? $data['address_id'] : "";
                $block_by = isset($data['block_by']) ? $data['block_by'] : "SLOT";
                $service_id = isset($data['service_id']) ? $data['service_id'] : 0;
                $action_from = isset($data['action_from']) ? $data['action_from'] : "APP";

                if (empty($date)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid appointment date';
                } else if (empty($user_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid user';
                } else if (empty($thin_app_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid thinapp';
                } else if (empty($mobile)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid mobile';
                } else if (empty($slot_string) && $block_by == 'SLOT') {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid slot time';
                } else if (empty($doctor_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid doctor';
                } else if (empty($address_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid address';
                } else if (empty($role_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid role';
                } else {
                    $connection = ConnectionUtil::getConnection();

                    if($action_from=="WEB"){
                        $date = DateTime::createFromFormat('d/m/Y', $date);
                        $date = $date->format('Y-m-d');
                    }else{
                        $date = date('Y-m-d', strtotime($date));
                    }


                    $appointment_user_role = Custom::get_appointment_role($mobile, $thin_app_id, $role_id);

                    $created = Custom::created();
                    $cancel_appointment = array();
                    $label = strtolower($block_by);
                    if (Custom::check_app_enable_permission($thin_app_id, 'NEW_QUICK_APPOINTMENT')) {
                        $new_appointment = "YES";
                        $query = "select id, slot from  appointment_bloked_slots  where thinapp_id = $thin_app_id and new_appointment = '$new_appointment' and doctor_id = $doctor_id and book_date = '$date' limit 1";
                    } else {
                        $new_appointment = "NO";
                        $query = "select id, slot from  appointment_bloked_slots  where thinapp_id = $thin_app_id and new_appointment = '$new_appointment' and doctor_id = $doctor_id and address_id = $address_id and book_date = '$date' limit 1";

                    }

                    $subscriber = $connection->query($query);
                    if (!$subscriber->num_rows) {
                        if ($slot_string != "CLEAR") {
                            $block_flag = true;
                            $is_date_blocked = 'NO';
                            if ($block_by == 'DATE') {
                                $is_date_blocked = 'YES';
                                if ($new_appointment == "YES") {
                                    $doctor_data = Custom::get_doctor_by_id($doctor_id, $thin_app_id);
                                    $doctor_slots = Custom::new_get_appointment_slot($thin_app_id, $doctor_id, $service_id, $address_id, $doctor_data['appointment_setting_type'], $date,false,true,$appointment_user_role);
                                    if ($doctor_slots) {
                                        $doctor_slots = array_column($doctor_slots, 'slot');
                                        $slot_string = implode(',', $doctor_slots);
                                    } else {
                                        $block_flag = false;
                                    }
                                } else {
                                    $doctor_service = Custom::get_doctor_service_data($doctor_id);
                                    if ($doctor_service) {
                                        $doctor_slots = Custom::load_doctor_slot_by_address($date, $doctor_id, $doctor_service['service_slot_duration'], $thin_app_id, $address_id,false,$appointment_user_role,true,true);
                                        if ($doctor_slots) {
                                            $doctor_slots = array_column($doctor_slots, 'slot');
                                            $slot_string = implode(',', $doctor_slots);
                                        } else {
                                            $block_flag = false;
                                        }
                                    } else {
                                        $block_flag = false;
                                    }
                                }


                            }
                            if ($block_flag === true) {
                                $slot_string = $last_string = Custom::create_block_slot_string($slot_string);
                                $slot_array = explode(",", json_decode($slot_string, true));
                                $sql = "INSERT INTO appointment_bloked_slots (created_by_user_id, new_appointment, service_id, is_date_blocked, thinapp_id, doctor_id, address_id, book_date, slot, message, created, modified) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                                $stmt_sub = $connection->prepare($sql);
                                $stmt_sub->bind_param('ssssssssssss', $user_id, $new_appointment, $service_id, $is_date_blocked, $thin_app_id, $doctor_id, $address_id, $date, $slot_string, $message, $created, $created);
                                if ($stmt_sub->execute()) {
                                    if($block_by=="YES"){
                                        $cancel_appointment = Custom::get_appointment_id_by_slot($doctor_id, $address_id, $date, array());
                                    }else{
                                        $cancel_appointment = Custom::get_appointment_id_by_slot($doctor_id, $address_id, $date, $slot_array);
                                    }

                                    $response['status'] = 1;
                                    $response['message'] = ucfirst($label) . " Blocked Successfully";
                                    WebservicesFunction::addUserStaticToJson('', $user_id, $thin_app_id, $mobile, "APPOINTMENT", "BLOCKED SLOT", 'blocked_appointment_slot');
                                } else {
                                    $response['status'] = 0;
                                    $response['message'] = "Sorry $label could not blocked";
                                }

                            } else {
                                $response['status'] = 0;
                                $response['message'] = "There is no slot to block for this date.";
                            }

                        } else {
                            $response['status'] = 0;
                            $response['message'] = "Invalid slot";
                        }
                    } else {


                        $block_data = mysqli_fetch_assoc($subscriber);
                        $blocked_id = $block_data['id'];

                        if ($slot_string != "CLEAR" && $block_by == 'SLOT') {

                            $last_string = $block_data['slot'];

                            $last_string_count = 0;
                            if (!empty($last_string)) {
                                $tmp = explode(",", $last_string);
                                $last_string_count = count($tmp);
                            }
                            $current_string_count = 0;
                            if (!empty($slot_string)) {
                                $tmp = explode(",", $slot_string);
                                $current_string_count = count($tmp);
                            }


                            $slot_string = Custom::create_block_slot_string($slot_string);
                            $slot_array = explode(",", json_decode($slot_string, true));
                            $is_date_blocked = "NO";
                            if ($new_appointment == "YES") {
                                $sql = "UPDATE  appointment_bloked_slots set  modify_by_user_id=?, slot=?, address_id =?, service_id =?, is_date_blocked =?, message = ?,  modified = ? where id = ?";
                                $stmt_sub = $connection->prepare($sql);
                                $stmt_sub->bind_param('ssssssss', $user_id, $slot_string, $address_id, $service_id, $is_date_blocked, $message, $created, $block_data['id']);
                            } else {
                                $sql = "UPDATE  appointment_bloked_slots set  modify_by_user_id=?, is_date_blocked =?, slot=?, message = ?,  modified = ? where id = ?";
                                $stmt_sub = $connection->prepare($sql);
                                $stmt_sub->bind_param('ssssss', $user_id, $is_date_blocked, $slot_string, $message, $created, $block_data['id']);
                            }


                            if ($stmt_sub->execute()) {

                                $cancel_appointment = Custom::get_appointment_id_by_slot($doctor_id, $address_id, $date, $slot_array);

                                $response['status'] = 1;
                                if ($last_string_count > $current_string_count) {
                                    $response['message'] = ucfirst($label) . " Unblocked Successfully";
                                } else if ($last_string_count < $current_string_count) {
                                    $response['message'] = ucfirst($label) . " Blocked Successfully";
                                } else {
                                    $response['message'] = ucfirst($label) . " Edit Successfully";
                                }
                                WebservicesFunction::addUserStaticToJson('', $user_id, $thin_app_id, $mobile, "APPOINTMENT", "BLOCKED SLOT", 'blocked_appointment_slot');

                            } else {
                                $response['status'] = 0;
                                $response['message'] = "Sorry $label could not blocked";
                            }
                        } else if ($slot_string != "CLEAR" && $block_by == 'DATE') {

                            if ($action_from == "APP" && !Custom::check_app_enable_permission($thin_app_id, 'NEW_QUICK_APPOINTMENT')) {
                                $service_data = Custom::get_doctor_service_data($doctor_id);
                                $slot_array = Custom::load_doctor_slot_by_address($date, $doctor_id, $service_data['service_slot_duration'], $thin_app_id, $address_id,false,false,false,true);
                                if (!empty($slot_array)) {
                                    $slot_string = '"' . implode(",", array_column($slot_array, 'slot')) . '"';
                                }
                            }else{
                                    $slot_string = isset($data['slot_string']) ? $data['slot_string'] : "";
                                    if($action_from == "WEB" && !empty($slot_string)){
                                        $slot_array = explode(",", $slot_string);
                                        $slot_string = '"' . implode(",", $slot_array) . '"';
                                    }

                            }


                            $is_date_blocked = "YES";
                            $sql = "UPDATE  appointment_bloked_slots set modify_by_user_id=?,  slot=?, address_id =?, service_id =?, is_date_blocked =?, message = ?,  modified = ? where id = ?";
                            $stmt_sub = $connection->prepare($sql);
                            $stmt_sub->bind_param('ssssssss', $user_id, $slot_string, $address_id, $service_id, $is_date_blocked, $message, $created, $blocked_id);
                            if ($stmt_sub->execute()) {
                                $cancel_appointment = Custom::get_appointment_id_by_slot($doctor_id, $address_id, $date, array());
                                $response['status'] = 1;
                                $response['message'] = "Date blocked successfully";
                            } else {
                                $response['status'] = 0;
                                $response['message'] = "Sorry date could not blocked";
                            }

                        } else {
                            $sql = "delete from appointment_bloked_slots  where id = ?";
                            $stmt_sub = $connection->prepare($sql);
                            $stmt_sub->bind_param('s', $blocked_id);
                            if ($stmt_sub->execute()) {
                                $response['status'] = 1;
                                $response['message'] = ucfirst($label) . " Unblock successfully";
                            } else {
                                $response['status'] = 0;
                                $response['message'] = "Sorry $label could not Unblock";
                            }
                        }
                    }

                }

            } catch (Exception $e) {

                $response['status'] = 0;
                $response['message'] = $e->getMessage();
            }
        	
        	$file_name = "block_list_".$date."_".$doctor_id."_".$address_id;
            WebservicesFunction::deleteJson(array($file_name),'appointment/blocked');
            if($return===true){
                $response['cancel_appointment'] = $cancel_appointment;
                return json_encode($response);

            }else{
                Custom::sendResponse($response);
                if (!empty($cancel_appointment)) {
                    Custom::send_process_to_background();
                    foreach ($cancel_appointment as $key => $app_data) {
                        $current_timestamp = strtotime(date('Y-m-d H:i'));
                        $app_timestamp = strtotime(date('Y-m-d H:i', strtotime($app_data['appointment_datetime'])));
                        if ($app_timestamp > $current_timestamp) {
                            $post = array();
                            $post['app_key'] = MBROADCAST_APP_NAME;
                            $post['user_id'] = $user_id;
                            $post['thin_app_id'] = $thin_app_id;
                            $post['appointment_id'] = $app_data['id'];
                            $post['message'] = $message;
                            $post['cancel_by'] = "DOCTOR";
                            $res = WebservicesFunction::cancel_appointment($post, false,false,"BLOCKED_SLOT");
                        }
                    }
                }
            }


        }
        exit();
    }


    public static function appointment_add_customer($data = null, $auto_share_folder = true)
    {

        $is_function_return = true;
        if (empty($data)) {
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);
            $is_function_return = false;
        }

        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            try {
                $response = array();
                $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
                $app_key = isset($data['app_key']) ? $data['app_key'] : "";
                $user_id = isset($data['user_id']) ? $data['user_id'] : "";
                $first_name = isset($data['first_name']) ? trim($data['first_name']) : "";
                $last_name = isset($data['last_name']) ? trim($data['last_name']) : "";
                $email = isset($data['email']) ? trim($data['email']) : "";
                $profile_photo = isset($data['profile_photo']) ? $data['profile_photo'] : "";
                $mobile = isset($data['mobile']) ? Custom::create_mobile_number($data['mobile']) : "";
                $country_code = isset($data['country_code']) ? $data['country_code'] : "";
                $dob = isset($data['dob']) ? $data['dob'] : "";
                $address = isset($data['address']) ? $data['address'] : "";
                $gender = isset($data['gender']) ? $data['gender'] : "";
                $age = isset($data['age']) ? $data['age'] : "";
                $parents_name = isset($data['parents_name']) ? $data['parents_name'] : "";
                $parents_mobile = isset($data['parents_mobile']) ? $data['parents_mobile'] : "";
                $medical_history = isset($data['medical_history']) ? $data['medical_history'] : "";
                $marital_status = isset($data['marital_status']) ? $data['marital_status'] : "";
                $blood_group = isset($data['blood_group']) ? $data['blood_group'] : "";
                $relation_prefix = isset($data['relation_prefix']) ? $data['relation_prefix'] : "";
                $height = isset($data['height']) ? $data['height'] : "";
                $weight = isset($data['weight']) ? $data['weight'] : "";
                $head_circumference = isset($data['head_circumference']) ? $data['head_circumference'] : "";
                $conceive_date = isset($data['conceive_date']) ? $data['conceive_date'] : "";
                $expected_date = isset($data['expected_date']) ? $data['expected_date'] : "";
                $third_party_uhid = isset($data['third_party_uhid']) ? $data['third_party_uhid'] : "";
                $bp_systolic = isset($data['bp_systolic']) ? $data['bp_systolic'] : "";
                $bp_diasystolic = isset($data['bp_diasystolic']) ? $data['bp_diasystolic'] : "";
                $bmi = isset($data['bmi']) ? $data['bmi'] : "";
                $bmi_status = isset($data['bmi_status']) ? $data['bmi_status'] : "";
                $temperature = isset($data['temperature']) ? $data['temperature'] : "";
                $third_party_uhid = isset($data['third_party_uhid']) ? $data['third_party_uhid'] : "";
                $o_saturation = isset($data['o_saturation']) ? $data['o_saturation'] : "";
                $field1 = isset($data['field1']) ? $data['field1'] : "";
                $field2 = isset($data['field2']) ? $data['field2'] : "";
                $field3 = isset($data['field3']) ? $data['field3'] : "";
                $field4 = isset($data['field4']) ? $data['field4'] : "";
                $field5 = isset($data['field5']) ? $data['field5'] : "";
                $field6 = isset($data['field5']) ? $data['field6'] : "";

                $country_id = isset($data['country_id']) ? $data['country_id'] : 0;
                $state_id = isset($data['state_id']) ? $data['state_id'] : 0;
                $city_id = isset($data['city_id']) ? $data['city_id'] : 0;
                $city_name = isset($data['city_name']) ? $data['city_name'] : "";
                $title = isset($data['title']) ? $data['title'] : "";
                $patient_category = isset($data['patient_category']) ? $data['patient_category'] : "";


                if (empty($first_name)) {
                    $response['status'] = 0;
                    $response['message'] = 'Please enter first name';
                } else if (empty($thin_app_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid thinapp';
                } else if (empty($app_key)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid app key';
                } else if (empty($user_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid user id';
                } else if (empty($mobile)) {
                    $response['status'] = 0;
                    $response['message'] = 'Please enter mobile number';
                } else if (empty($country_code)) {
                    $response['status'] = 0;
                    $response['message'] = 'Please enter country code';
                } else {
                    $is_customer = false;
                    if ($mobile != '+919999999999') {
                        $is_customer = Custom::search_customer_name($thin_app_id, $mobile,  $first_name);
                    }

                    if (!$is_customer) {
                        $app_user_id = Custom::get_user_by_mobile($thin_app_id, $mobile);
                        $app_user_id = !empty($app_user_id) ? $app_user_id['id'] : 0;
                        $profile_photo = Custom::check_image_path_string($profile_photo);
                        $dob = !empty($dob) ? date('Y-m-d', strtotime($dob)) : '';
                        $connection = ConnectionUtil::getConnection();
                        $connection->autocommit(false);
                        $created = Custom::created();
                        $sql = "INSERT INTO appointment_customers (patient_category, title, country_id, state_id, city_id, city_name, bp_systolic, bp_diasystolic, bmi, bmi_status, temperature, o_saturation, field1, field2, field3, field4, field5, field6, third_party_uhid, conceive_date, expected_date, height, weight, head_circumference, blood_group, marital_status, medical_history, relation_prefix, parents_mobile, parents_name, dob, age, gender, user_id, thinapp_id, customer_created_by, first_name, last_name, email, profile_photo, mobile, country_code, address, created, modified) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                        $stmt_sub = $connection->prepare($sql);
                        $stmt_sub->bind_param('sssssssssssssssssssssssssssssssssssssssssssss',  $patient_category, $title, $country_id, $state_id, $city_id, $city_name, $bp_systolic, $bp_diasystolic, $bmi, $bmi_status, $temperature, $o_saturation, $field1, $field2, $field3, $field4, $field5, $field6, $third_party_uhid, $conceive_date, $expected_date, $height, $weight, $head_circumference, $blood_group, $marital_status, $medical_history, $relation_prefix, $parents_mobile, $parents_name, $dob, $age, $gender, $app_user_id, $thin_app_id, $user_id, $first_name, $last_name, $email, $profile_photo, $mobile, $country_code, $address, $created, $created);
                        if ($stmt_sub->execute()) {
                            $connection->commit();
                            $app_staff_id = $stmt_sub->insert_id;
                            $response['status'] = 1;
                            $response['message'] = "Customer add successfully";
                            $response['customer_id'] = $app_staff_id;
                            $res = Custom::create_and_share_folder($thin_app_id, $mobile, $first_name, 'CUSTOMER', $app_staff_id, $auto_share_folder);
                        } else {
                            $response['status'] = 0;
                            $response['message'] = "Sorry customer could not add";
                        }
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Patient with name already registered";
                        $response['customer_id'] = $is_customer['id'];
                    }
                }
            } catch (Exception $e) {

                $response['status'] = 0;
                $response['message'] = $e->getMessage();
            }
            if ($is_function_return === false) {
                echo json_encode($response);
                exit;
            } else {
                return json_encode($response);;
            }


        } else {
            exit();
        }
    }

//

    public static function appointment_edit_staff_address()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {


            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $address_ids_array = isset($data['address_ids_array']) ? $data['address_ids_array'] : "";
            $staff_id = isset($data['staff_id']) ? $data['staff_id'] : "";
            if (empty($address_ids_array)) {
                $response['status'] = 0;
                $response['message'] = 'Enter address id';
            } else if (empty($staff_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter staff id';
            } else if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else {

                $connection = ConnectionUtil::getConnection();
                $connection->autocommit(false);
                $sql = "delete from appointment_staff_addresses where appointment_staff_id= ? AND thinapp_id=?";
                $stmt_sub = $connection->prepare($sql);
                $stmt_sub->bind_param('ss', $staff_id, $thin_app_id);
                if ($stmt_sub->execute()) {
                    $address_ids_array = array_unique($address_ids_array);
                    $result_array = array();
                    foreach ($address_ids_array as $key => $string_value) {
                        $sql = "INSERT INTO appointment_staff_addresses (thinapp_id, appointment_address_id, from_time, to_time, appointment_staff_id) VALUES (?, ?, ?, ?, ?)";
                        $stmt_add = $connection->prepare($sql);
                        /* string valeu 1##08:00 AM##06:00: PM   id ,fromtime,totime*/
                        $data_array = explode("##", $string_value);
                        $address_id = $data_array[0];
                        $from_time = (string)$data_array[1];
                        $to_time = (string)$data_array[2];
                        $stmt_add->bind_param('sssss', $thin_app_id, $address_id, $from_time, $to_time, $staff_id);
                        $result_array[] = $stmt_add->execute();
                    }
                    if (!in_array(false, $result_array)) {
                        $connection->commit();
                        $response['status'] = 1;
                        $response['message'] = "Address saved successfully";
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Sorry address could not save";
                    }
                } else {
                    $response['status'] = 0;
                    $response['message'] = "Sorry address could not save";
                }

            }
            Custom::sendResponse($response);

        }
        exit();
    }

    public static function appointment_edit_staff_service()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {


            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $services_id = isset($data['services_id']) ? $data['services_id'] : "";
            $staff_id = isset($data['staff_id']) ? $data['staff_id'] : "";
            if (empty($services_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please select service';
            } else if (empty($staff_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter staff id';
            } else if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else {

                $connection = ConnectionUtil::getConnection();
                $connection->autocommit(false);
                $sql = "delete from appointment_staff_services where appointment_staff_id= ? AND thinapp_id=?";
                $stmt_sub = $connection->prepare($sql);
                $stmt_sub->bind_param('ss', $staff_id, $thin_app_id);

                $sql = "INSERT INTO appointment_staff_services (thinapp_id, appointment_service_id, appointment_staff_id) VALUES (?, ?, ?)";
                $stmt_add = $connection->prepare($sql);
                $stmt_add->bind_param('sss', $thin_app_id, $services_id, $staff_id);
                if ($stmt_sub->execute() && $stmt_add->execute()) {
                    $connection->commit();
                    $response['status'] = 1;
                    $response['message'] = "Service saved successfully";
                } else {
                    $response['status'] = 0;
                    $response['message'] = "Sorry service could not save";
                }
            }
            Custom::sendResponse($response);

        }
        exit();
    }

    public static function appointment_edit_customer($data = null, $overwrite_remaining_fields = false)
    {

        $is_function_return = true;
        if (empty($data)) {
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);
            $is_function_return = false;
        }

        if ($_SERVER['REQUEST_METHOD'] === 'POST' || !empty($data)) {

            try {
                $response = array();
                $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
                $app_key = isset($data['app_key']) ? $data['app_key'] : "";
                $user_id = isset($data['user_id']) ? $data['user_id'] : "";
                $patient_name = isset($data['patient_name']) ? trim($data['patient_name']) : "";
                $email = isset($data['email']) ? trim($data['email']) : "";
                $profile_photo = isset($data['image']) ? $data['image'] : "";
                $mobile = isset($data['mobile']) ? $data['mobile'] : "";
                $patient_mobile = isset($data['patient_mobile']) ? Custom::create_mobile_number($data['patient_mobile']) : "";
                $country_code = isset($data['country_code']) ? $data['country_code'] : "+91";
                $address = isset($data['address']) ? $data['address'] : "";
                $patient_id = isset($data['patient_id']) ? $data['patient_id'] : "";
                $dob = isset($data['dob']) ? $data['dob'] : "";
                $age = isset($data['age']) ? $data['age'] : "";
                $gender = isset($data['gender']) ? $data['gender'] : "";
                $email = isset($data['email']) ? $data['email'] : "";
                $parents_name = isset($data['parents_name']) ? $data['parents_name'] : "";
                $parents_mobile = isset($data['parents_mobile']) ? $data['parents_mobile'] : "";
                $medical_history = isset($data['medical_history']) ? $data['medical_history'] : "";

                if (empty($patient_name)) {
                    $response['status'] = 0;
                    $response['message'] = 'Please enter  name';
                } else if (empty($thin_app_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid thinapp';
                } else if (empty($app_key)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid app key';
                } else if (empty($user_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid user id';
                } else if (empty($patient_mobile)) {
                    $response['status'] = 0;
                    $response['message'] = 'Please enter mobile number';
                } else if (empty($country_code)) {
                    $response['status'] = 0;
                    $response['message'] = 'Please enter country code';
                } else if (empty($patient_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Please enter patient id';
                } else {


                    $customer_data = Custom::get_customer_data($patient_id, $thin_app_id);
                    if ($customer_data) {

                        $search_customer_data = Custom::search_customer_name($thin_app_id, $patient_mobile, $patient_name);
                        if (!$search_customer_data || ($search_customer_data['id'] == $patient_id)) {
                            $app_user_id = Custom::get_user_by_mobile($thin_app_id, $patient_mobile);
                            $app_user_id = !empty($app_user_id) ? $app_user_id['id'] : 0;
                            if ($overwrite_remaining_fields === false) {
                                $profile_photo = !empty($profile_photo) ? Custom::check_image_path_string($profile_photo) : $customer_data['profile_photo'];
                                $medical_history = !empty($medical_history) ? $medical_history : $customer_data['medical_history'];
                            }

                            $connection = ConnectionUtil::getConnection();
                            $created = Custom::created();
                            $sql = "UPDATE  appointment_customers set user_id=?, first_name=?, email =?, profile_photo =?, mobile =?, country_code =?, address =?, dob =?, age=?, gender=?, parents_name=?, parents_mobile=?, medical_history =?, modified = ? where id = ?";
                            $stmt_sub = $connection->prepare($sql);
                            $stmt_sub->bind_param('sssssssssssssss', $app_user_id, $patient_name, $email, $profile_photo, $patient_mobile, $country_code, $address, $dob, $age, $gender, $parents_name, $parents_mobile, $medical_history, $created, $patient_id);
                            if ($stmt_sub->execute()) {
                                $response['status'] = 1;
                                $response['message'] = "Patient update successfully";
                                $response['customer_id'] = $patient_id;
                                $res = Custom::create_and_share_folder($thin_app_id, $patient_mobile, $patient_mobile, 'CUSTOMER', $patient_id);
                            } else {
                                $response['status'] = 0;
                                $response['message'] = "Sorry patient could not update";
                            }

                        } else {
                            $response['status'] = 0;
                            $response['message'] = "Number with patient name already registered";
                        }

                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Invalid customer";
                    }
                }
            } catch (Exception $e) {

                $response['status'] = 0;
                $response['message'] = $e->getMessage();
            }
            if ($is_function_return === false) {
                echo json_encode($response);
                exit;
            } else {
                return json_encode($response);;
            }
        } else {
            exit();
        }
    }


    public static function add_appointment_reminder()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $appointment_id = isset($data['appointment_id']) ? trim($data['appointment_id']) : "";
            $reminder_date = isset($data['reminder_date']) ? $data['reminder_date'] : "";
            $reminder_message = isset($data['reminder_message']) ? $data['reminder_message'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($appointment_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid  appointment. ';
            } else if (empty($reminder_date)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid  date ';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($reminder_message)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid message';
            } else {
                $app_data = Custom::get_appointment_by_id($appointment_id);
                if (!empty($app_data)) {
                    $connection = ConnectionUtil::getConnection();
                    $reminder_date = date("Y-m-d", strtotime($reminder_date));
                    $created = Custom::created();
                    $sql = "update appointment_customer_staff_services set reminder_add_by_id =?, reminder_date=?, reminder_message=?, modified =? where id =?";
                    $stmt_sub = $connection->prepare($sql);
                    $stmt_sub->bind_param('sssss', $user_id, $reminder_date, $reminder_message, $created, $appointment_id);
                    if ($stmt_sub->execute()) {
                        $response['status'] = 1;
                        $response['message'] = "Reminder scheduled successfully";
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Reminder could not scheduled";
                    }
                } else {
                    $response['status'] = 0;
                    $response['message'] = "Sorry this is invalid appointment";
                }
            }
            Custom::sendResponse($response);
        }
        exit();
    }

    public static function delete_appointment_reminder()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $appointment_id = isset($data['appointment_id']) ? trim($data['appointment_id']) : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($appointment_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid  appointment. ';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else {
                $connection = ConnectionUtil::getConnection();
                $reminder_date = null;
                $reminder_message = "";
                $created = Custom::created();
                $sql = "update appointment_customer_staff_services set reminder_add_by_id =?, reminder_date=?, reminder_message=?, modified =? where id =?";
                $stmt_sub = $connection->prepare($sql);
                $stmt_sub->bind_param('sssss', $user_id, $reminder_date, $reminder_message, $created, $appointment_id);
                if ($stmt_sub->execute()) {
                    $response['status'] = 1;
                    $response['message'] = "Reminder delete successfully";
                } else {
                    $response['status'] = 0;
                    $response['message'] = "Reminder could not delete";
                }

            }
            Custom::sendResponse($response);
        }
        exit();
    }


    public static function reschedule_appointment($data = null)
    {
        if (empty($data)) {
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);
        }
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            try {
                $response = array();
                $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
                $app_key = isset($data['app_key']) ? $data['app_key'] : "";
                $user_id = isset($data['user_id']) ? $data['user_id'] : "";
                $role_id = isset($data['role_id']) ? $data['role_id'] : "";
                $mobile = isset($data['mobile']) ? $data['mobile'] : "";
                $appointment_id = isset($data['appointment_id']) ? $data['appointment_id'] : "";
                $booking_date = isset($data['booking_date']) ? $data['booking_date'] : "";
                $slot_time = isset($data['slot_time']) ? $data['slot_time'] : "";
                $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : "";
                $appointment_user_role = isset($data['appointment_user_role']) ? $data['appointment_user_role'] : "";
                $reschedule_by = isset($data['reschedule_by']) ? strtoupper($data['reschedule_by']) : "DOCTOR";
                $queue_number = isset($data['queue_number']) ? $data['queue_number'] : "0";
                $new_appointment = isset($data['new_appointment']) ? $data['new_appointment'] : "NO";

                $new_address_id = isset($data['address_id']) ? $data['address_id'] : 0;
                $new_service_id = isset($data['service_id']) ? $data['service_id'] : 0;
                $new_doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : 0;





                $background = array();
                if (empty($appointment_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid appointment id';
                } else if (empty($booking_date)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid appointment date';
                } else if (empty($user_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Please enter user id';
                } else if (empty($thin_app_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid thinapp';
                } else if (empty($app_key)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid app';
                } else if (empty($slot_time)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid slot time';
                } else if (empty($doctor_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid doctor id';
                } else if (empty($role_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid role';
                } else if (empty($reschedule_by) || ($reschedule_by != 'DOCTOR' && $reschedule_by != "CUSTOMER")) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid reschedule  from';
                } else {

                     if( $appointment_user_role !='USER' && ($role_id == 5 || Custom::allow_receptionist_to_reschedule($user_id)) ){



                    $appointment_data = WebservicesFunction::get_appointment_all_data_id($appointment_id);
                    if (!empty($appointment_data)) {
                            if ($appointment_data['custom_token'] == "NO") {
                        $address_id = $appointment_data['address_id'];

                        $address_id = empty($new_address_id)?$appointment_data['appointment_address_id']:$new_address_id;
                        $doctor_id = empty($new_doctor_id)?$appointment_data['appointment_staff_id']:$new_doctor_id;
                        $service_id = empty($new_service_id)?$appointment_data['appointment_service_id']:$new_service_id;


                        if (Custom::check_app_enable_permission($thin_app_id, 'NEW_QUICK_APPOINTMENT')) {

                            $service_id = empty($service_id)?$appointment_data['appointment_service_id']:$service_id;
                            $doctor_data = Custom::get_doctor_by_id($doctor_id, $thin_app_id);

                            $app_data = Custom::getThinAppData($thin_app_id);
                            $expire_slot = ($app_data['show_expire_token_slot']=="YES")?true:false;

                            $slot_array = Custom::new_get_appointment_slot($thin_app_id, $doctor_id, $service_id, $address_id, @$doctor_data['appointment_setting_type'], $booking_date, true,false,$appointment_user_role,$expire_slot);

                            $queue_number = !empty($slot_array[$slot_time]['token']) ? $slot_array[$slot_time]['token'] : false;

                        } else {
                            $service_data = Custom::get_doctor_service_data($doctor_id);
                            $service_slot_duration = $service_data['service_slot_duration'];
                            $expire_slot = ($service_data['show_expire_token_slot']=="YES")?true:false;
                            $slot_array = Custom::load_doctor_slot_by_address($booking_date, $doctor_id, $service_slot_duration, $thin_app_id, $address_id, true,$appointment_user_role,false,$expire_slot);
                            $queue_number = !empty($slot_array[$slot_time]['queue_number']) ? $slot_array[$slot_time]['queue_number'] : false;

                        }

                        if ($queue_number !== false) {

                            if (!empty($slot_array) && (array_key_exists($slot_time, $slot_array) && $slot_array[$slot_time]['status'] == 'AVAILABLE')) {

                                $connection = ConnectionUtil::getConnection();
                                $connection->autocommit(false);
                                $booking_date = date('Y-m-d', strtotime($booking_date));


                                $customer_id = $appointment_data['appointment_customer_id'];


                                $appointment_attempt_number = $appointment_data['booking_validity_attempt'];
                                $last_payment_status = $appointment_data['payment_status'];
                                $get_appointment_user_role = !empty($appointment_user_role) ? $appointment_user_role : Custom::get_appointment_role($mobile, $thin_app_id, $role_id);
                                $user_type = ($appointment_data['appointment_customer_id'] > 0) ? "CUSTOMER" : "CHILDREN";
                                $pat_id = ($appointment_data['appointment_customer_id'] > 0) ? $appointment_data['appointment_customer_id'] : $appointment_data['children_id'];

                                $validity_attempt = Custom::get_appointment_validity_data($thin_app_id, $pat_id, $address_id, $doctor_id, $booking_date, $service_id, "RESCHEDULE", $get_appointment_user_role, $user_type,$queue_number,$slot_time);
                                if ($validity_attempt['allow_book_new_appointment'] == "YES") {

                                    if ($validity_attempt['allow_add_free_appointment'] == "YES") {
                                        $payment_status = 'SUCCESS';
                                        $appointment_parent_id = $validity_attempt['appointment_parent_id'];
                                        $last_app_date = date('Y-m-d', strtotime($appointment_data['appointment_datetime']));
                                        if (strtotime($last_app_date) != strtotime($booking_date)) {
                                            $booking_validity_attempt = $validity_attempt['booking_validity_attempt'];
                                        } else {
                                            $booking_validity_attempt = $appointment_data['booking_validity_attempt'];
                                        }

                                    } else {

                                        $appointment_parent_id = $appointment_id;
                                        $booking_validity_attempt = 1;
                                        $payment_status = 'PENDING';
                                    }


                                    $date_time = date('Y-m-d H:i:s', strtotime($booking_date . ' ' . $slot_time));
                                    $status = "RESCHEDULE";
                                    $created = Custom::created();
                                    $day_time_id = date('N', strtotime($booking_date));


                                    $sql = "UPDATE appointment_customer_staff_services SET last_assign_doctor_id=?, appointment_staff_id=?, appointment_service_id=?, appointment_address_id=?, queue_number=?, appointment_parent_id =?,  reschedule_by_user_id =?, booking_validity_attempt =?, appointment_day_time_id =?, appointment_datetime = ?, slot_time= ?, status =?,  modified = ? where id = ?";
                                    $stmt = $connection->prepare($sql);
                                    $stmt->bind_param('ssssssssssssss', $appointment_data['appointment_staff_id'], $doctor_id, $service_id, $address_id, $queue_number, $appointment_parent_id, $user_id, $booking_validity_attempt, $day_time_id, $date_time, $slot_time, $status, $created, $appointment_id);

                                    $sql = "update medical_product_orders set appointment_staff_id= ?, modified =? where appointment_customer_staff_service_id =?";
                                    $stmt_order = $connection->prepare($sql);
                                    $stmt_order->bind_param('sss', $doctor_id, $created, $appointment_id);

                                    $sql = "update medical_product_order_details set appointment_staff_id= ?, modified =? where appointment_customer_staff_service_id =?";
                                    $stmt_order_detail = $connection->prepare($sql);
                                    $stmt_order_detail->bind_param('sss', $doctor_id, $created, $appointment_id);

                                    if ($stmt->execute() && $stmt_order->execute() && $stmt_order_detail->execute()) {
                                        $connection->commit();

                                        $response['status'] = 1;
                                        $response['message'] = "Appointment rescheduled successfully";
                                        WebservicesFunction::addUserStaticToJson('', $user_id, $thin_app_id, $mobile, "APPOINTMENT", "RESCHEDULE APPOINTMENT", 'reschedule_appointment');


                                        $format = "d/m/Y h:i A";
                                        if($appointment_data['show_appointment_time']=='NO'){
                                            $format = "d/m/Y";
                                        }
                                        $app_date = date($format, strtotime($date_time));

                                        $label_date = date('Y-m-d', strtotime($date_time));
                                        $day_label = Custom::get_date_label($label_date);

                                        if($appointment_data['show_appointment_token']=='YES'){
                                            $queue_number = ($queue_number > 0) ? ", Token: $queue_number" : "";
                                        }else{
                                            $queue_number = "";
                                        }



                                        if ($appointment_data['customer_user_id'] != 0 && $reschedule_by == "DOCTOR") {
                                            /* send appoinment notifincation to staff */
                                            $message = "Hi " . Custom::get_string_first_name($appointment_data['cus_name']) . ", your appointment $queue_number with " . Custom::get_doctor_first_name($appointment_data['staff_name']) . ', has been reschedule on ' . $day_label . ', ' . $app_date;

                                            $option = array(
                                                'thinapp_id' => $thin_app_id,
                                                'customer_id' => $appointment_data['appointment_customer_id'],
                                                'service_id' => $appointment_data['appointment_service_id'],
                                                'channel_id' => 0,
                                                'role' => "CUSTOMER",
                                                'flag' => 'APPOINTMENT_RESCHEDULE',
                                                'title' => "Appointment rescheduled",
                                                'message' => mb_strimwidth($message, 0, 250, '...'),
                                                'description' => "",
                                                'chat_reference' => '',
                                                'module_type' => 'APPOINTMENT',
                                                'module_type_id' => $appointment_id,
                                                'doctor_id' => $doctor_id,
                                                'firebase_reference' => ""
                                            );
                                            $background['notification'][0]['data'] = $option;
                                            $background['notification'][0]['user_id'] = $appointment_data['customer_user_id'];
                                            $background['notification'][0]['send_to'] = "USER";


                                            $cus_data = Custom::get_user_by_mobile($thin_app_id, $appointment_data['customer_mobile']);
                                            if (empty($cus_data) || @$cus_data['app_installed_status'] == "UNINSTALLED") {
                                                $background['sms'][0]['message'] = $message;
                                                $background['sms'][0]['mobile'] = $appointment_data['customer_mobile'];
                                                $background['sms'][0]['send_to'] = "USER";

                                            }


                                        } else {


                                            if ($appointment_user_role == 'ADMIN' || $appointment_user_role == 'STAFF') {
                                                $message = "Hi " . Custom::get_string_first_name($appointment_data['cus_name']) . ", appointment $queue_number with " . Custom::get_doctor_first_name($appointment_data['staff_name']) . ', has been reschedule on ' . $day_label . ', ' . $app_date;
                                                $option = array(
                                                    'thinapp_id' => $thin_app_id,
                                                    'customer_id' => $appointment_data['appointment_customer_id'],
                                                    'service_id' => $appointment_data['appointment_service_id'],
                                                    'channel_id' => 0,
                                                    'role' => "CUSTOMER",
                                                    'flag' => 'APPOINTMENT_RESCHEDULE',
                                                    'title' => "Appointment rescheduled",
                                                    'message' => mb_strimwidth($message, 0, 250, '...'),
                                                    'description' => "",
                                                    'chat_reference' => '',
                                                    'module_type' => 'APPOINTMENT',
                                                    'module_type_id' => $appointment_id,
                                                    'doctor_id' => $doctor_id,
                                                    'firebase_reference' => ""
                                                );
                                                $background['notification'][0]['data'] = $option;
                                                $background['notification'][0]['user_id'] = $appointment_data['customer_user_id'];
                                                $background['notification'][0]['send_to'] = "USER";

                                                $cus_data = Custom::get_user_by_mobile($thin_app_id, $appointment_data['customer_mobile']);
                                                if (empty($cus_data) || @$cus_data['app_installed_status'] == "UNINSTALLED") {

                                                    $background['sms'][0]['message'] = $message;
                                                    $background['sms'][0]['mobile'] = $appointment_data['customer_mobile'];
                                                    $background['sms'][0]['send_to'] = "USER";

                                                }

                                            } else {
                                                /* send appoinment notifincation to staff */
                                                $message = "Hi " . Custom::get_doctor_first_name($appointment_data['staff_name']) . ", your appointment $queue_number with " . Custom::get_string_first_name($appointment_data['cus_name']) . ', has been reschedule on ' . $day_label . ', ' . $app_date;
                                                //$message = $appointment_data['cus_name'].", appointment with " . $appointment_data['staff_name']." on ". $last_date . ' for ' . $appointment_data['service_name'].' has been reschedule on '.$app_date;
                                                $option = array(
                                                    'thinapp_id' => $thin_app_id,
                                                    'customer_id' => $appointment_data['appointment_customer_id'],
                                                    'service_id' => $appointment_data['appointment_service_id'],
                                                    'channel_id' => 0,
                                                    'role' => "STAFF",
                                                    'flag' => 'APPOINTMENT_RESCHEDULE',
                                                    'title' => "Appointment rescheduled",
                                                    'message' => mb_strimwidth($message, 0, 250, '...'),
                                                    'description' => "",
                                                    'chat_reference' => '',
                                                    'module_type' => 'APPOINTMENT',
                                                    'module_type_id' => $appointment_id,
                                                    'doctor_id' => $doctor_id,
                                                    'firebase_reference' => ""
                                                );
                                                $background['notification'][1]['data'] = $option;
                                                $background['notification'][1]['user_id'] = $appointment_data['staff_user_id'];
                                                $background['notification'][1]['send_to'] = "DOCTOR";
                                                //$background['sms'][1]['message'] = $message;
                                                //$background['sms'][1]['mobile'] = $appointment_data['staff_mobile'];
                                            }


                                        }


                                    } else {
                                        $response['status'] = 0;
                                        $response['message'] = "Error when rescheduled appointment";
                                    }


                                } else {
                                    $response['status'] = 0;
                                    $response['message'] = $validity_attempt['message'];
                                }


                            } else {
                                $response['status'] = 0;
                                $response['message'] = "Sorry, this time slot is not available";
                            }

                        } else {
                            $response['status'] = 0;
                            $response['message'] = "Queue number not available";
                        }
                    } else {
                        $response['status'] = 0;
                                $response['message'] = "Rescheduling is not allow on this appointment";
                            }
                        } else {
                            $response['status'] = 0;
                        $response['message'] = "Sorry this is not valid appointment";
                    }
                    }else{
                        $response['status'] = 0;
                        $response['message'] = "You are not authorized";
                    }

                }

            } catch (Exception $e) {
                $response['status'] = 0;
                $response['message'] = $e->getMessage();
            }
            Custom::sendResponse($response);
            if (!empty($background)) {
                Custom::send_process_to_background();
                $customer_sms = Custom::create_custom_sms_from_template($appointment_id,'RESCHEDULE');
                if (isset($background['notification'])) {

                    foreach ($background['notification'] as $key => $value) {
                        $option = $value['data'];
                        $user_id = $value['user_id'];
                        if(!empty($customer_sms) && $value['send_to']=="USER"){
                            $option['message'] = $customer_sms;
                        }
                        Custom::send_notification_by_user_id($option, array($user_id), $thin_app_id);
                    }
                }

                if (isset($background['sms'])) {
                    foreach ($background['sms'] as $key => $value) {
                        $send_download_link = true;
                        $message = $value['message'];
                        $mobile = $value['mobile'];
                        if(!empty($customer_sms) && $value['send_to']=="USER"){
                            $message = $customer_sms;
                            $send_download_link = false;
                        }
                        Custom::send_single_sms($mobile, $message, $thin_app_id,false,$send_download_link);
                    }
                }
            }

            if (!empty($appointment_data)) {


                $token_array = Custom::get_upcoming_appointment_user_token($thin_app_id, $appointment_data['doctor_id'], $appointment_data['address_id'], $appointment_id);
                if (!empty($token_array)) {
                    $option = array(
                        'thinapp_id' => $thin_app_id,
                        'staff_id' => 0,
                        'customer_id' => 0,
                        'service_id' => 0,
                        'channel_id' => 0,
                        'role' => "CUSTOMER",
                        'flag' => 'APPOINTMENT_TRACKER',
                        'title' => "New Tracker Request",
                        'message' => "Your tracker message",
                        'description' => "Your tracker message",
                        'chat_reference' => '',
                        'module_type' => 'APPOINTMENT_TRACKER',
                        'module_type_id' => 0,
                        'firebase_reference' => ""
                    );
                    Custom::send_notification_via_token($option, $token_array, $thin_app_id);
                }
                $file_name = 'doctor_tracker_' . $appointment_data['appointment_staff_id'] . "_" . date('Ymd', strtotime($appointment_data['appointment_datetime']));
                WebservicesFunction::deleteJson(array($file_name), "tracker");

            }

            Custom::send_web_tracker_notification($thin_app_id);
            exit;

        } else {
            exit();
        }
    }


    public static function update_appointment_payment_status($data = null, $return = false)
    {
        /* this method will continue when user lost connection*/
        ignore_user_abort(true);
        set_time_limit(0);

        if (empty($data)) {
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);
        }

        if ($_SERVER['REQUEST_METHOD'] === 'POST') {


            try {
                $response = array();
                $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
                $app_key = isset($data['app_key']) ? $data['app_key'] : "";
                $user_id = isset($data['user_id']) ? $data['user_id'] : "";
                $mobile = isset($data['mobile']) ? $data['mobile'] : "";
                $payment_by_activity = isset($data['payment_by_activity']) ? $data['payment_by_activity'] : "";

                $appointment_id = isset($data['appointment_id']) ? $data['appointment_id'] : "";
                $status = isset($data['status']) ? $data['status'] : "";
                $transaction_id = isset($data['transaction_id']) ? $data['transaction_id'] : "CASH";
                $opd = isset($data['opd']) ? (float)$data['opd'] : 0;
                $ipd = isset($data['ipd']) ? (float)$data['ipd'] : 0;
                $vaccination = isset($data['vaccination']) ? (float)$data['vaccination'] : 0;
                $other = isset($data['other']) ? (float)$data['other'] : 0;
                $remember = isset($data['remember']) ? $data['remember'] : "NO";
                $wallet_deduct = isset($data['wallet_deduct']) ? $data['wallet_deduct'] : 0;
                $background = array();

                if (empty($appointment_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid appointment id';
                } else if (empty($status)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid status';
                } else if (empty($user_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Please enter user id';
                } else if (empty($thin_app_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid thinapp';
                } else if (empty($app_key)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid app';
                } else {

                    $status = strtoupper(strtolower($status));
                    $status_array = array('SUCCESS', 'FAILURE');
                    $send_appointment_tracker = false;

                    if (in_array($status, $status_array)) {
                        //$is_appointment = Custom::get_appointment_by_id($appointment_id);

                        $appointment_data = WebservicesFunction::get_appointment_all_data_id($appointment_id);

                        $customer_id = $appointment_data['customer_id'];

                        if ($appointment_data) {

                            $connection = ConnectionUtil::getConnection();
                            $opd = !empty($opd) ? $opd : $appointment_data['amount'];
                            if ($status == 'SUCCESS') {


                                if ($appointment_data['medical_product_order_id'] < 1) {

                                    $opdCharge = $opd;
                                    $appointmentCustomerStaffServiceID = $appointment_id;
                                    $appointment_staff_id = $appointment_data['appointment_staff_id'];
                                    $appointment_customer_id = $appointment_data['appointment_customer_id'];
                                    $children_id = $appointment_data['children_id'];
                                    $thinapp_id = $appointment_data['thinapp_id'];
                                    $total_amount = $opd;
                                    if ($transaction_id != "CASH") {
                                        $payment_type_name = 'ONLINE';
                                        $created_by_user_id = 0;
                                    } else {
                                        $payment_type_name = 'CASH';
                                        $created_by_user_id = $user_id;
                                    }


                                    $uniqueID = date("dmy") . $appointment_data['id'];
                                    $created = Custom::created();
                                    $sql = "INSERT INTO medical_product_orders (payment_type_name, created_by_user_id, unique_id, appointment_customer_staff_service_id, appointment_staff_id, appointment_customer_id, children_id, thinapp_id, total_amount,  created, modified) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                                    $stmt = $connection->prepare($sql);
                                    $stmt->bind_param('sssssssssss', $payment_type_name, $created_by_user_id, $uniqueID, $appointmentCustomerStaffServiceID, $appointment_staff_id, $appointment_customer_id, $children_id, $thin_app_id, $total_amount, $created, $created);
                                    if ($stmt->execute()) {
                                        $medicalProductOrderID = $stmt->insert_id;
                                        $service = 'OPD';
                                        $quantity = 1;
                                        $discount_type = 'PERCENTAGE';
                                        $discount_value = $discount_amount = 0;
                                        $sql = "INSERT INTO medical_product_order_details (medical_product_order_id, service, appointment_customer_staff_service_id, appointment_staff_id, appointment_customer_id, children_id, thinapp_id, product_price, quantity, discount_type, discount_value, discount_amount, amount, total_amount,  created, modified) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                                        $stmt = $connection->prepare($sql);
                                        $stmt->bind_param('ssssssssssssssss', $medicalProductOrderID, $service, $appointmentCustomerStaffServiceID, $appointment_staff_id, $appointment_customer_id, $children_id, $thinapp_id, $total_amount, $quantity, $discount_type, $discount_value, $discount_amount, $total_amount, $total_amount, $created, $created);
                                        $stmt->execute();
                                    }

                                } else {
                                    $medicalProductOrderID = $appointment_data['medical_product_order_id'];
                                }


                                $response['message'] = "Payment successfully done.";
                                if ($payment_by_activity == "quick_payment") {
                                    $response['message'] = "Appointment for " . $appointment_data['cus_name'] . ", " . $appointment_data['customer_mobile'] . " has been booked successfully";
                                }

                                $app_status = 'CONFIRM';
                            } else if ($status == 'FAILURE') {
                                $response['message'] = "Sorry, payment could not done";
                                if ($payment_by_activity == "quick_payment") {
                                    $app_status = 'CANCELED';
                                    $response['message'] = "Sorry, appointment for " . $appointment_data['cus_name'] . ", " . $appointment_data['customer_mobile'] . " could not booked due to payment failure";
                                } else {
                                    $app_status = $appointment_data['appointment_status'];
                                }

                            }
                            $created = Custom::created();
                        	
                        	/* update status when appointment cancel by crone and user payment done */
                        	if($appointment_data['appointment_status'] == 'CANCELED')
                            {
                                $appointmentStaffID = $appointment_data['doctor_id'];
                                $appointmentAddressID = $appointment_data['address_id'];
                                $appointmentServiceID = $appointment_data['appointment_service_id'];
                                $appointment_datetime = $appointment_data['appointment_datetime'];
                                $queue_number = $appointment_data['queue_number'];
                                $sub_token = $appointment_data['sub_token'];
                                $bookingDate = date('Y-m-d',strtotime($appointment_datetime));
                                $slotTime = date('h:i A',strtotime($appointment_datetime));
                                $chkUniqueSql = "SELECT acss.id FROM appointment_customer_staff_services AS acss WHERE acss.appointment_staff_id = $appointmentStaffID AND acss.appointment_address_id =$appointmentAddressID AND acss.appointment_service_id = $appointmentServiceID AND acss.queue_number = '$queue_number' AND acss.slot_time ='$slotTime' AND acss.status IN('NEW','CONFIRM','RESCHEDULE') AND DATE(acss.appointment_datetime) = '$bookingDate' AND acss.thinapp_id = $thin_app_id LIMIT 1";
                                $chkUniqueRS = $connection->query($chkUniqueSql);
                                if($chkUniqueRS->num_rows)
                                {
                                    $bookingDate = date('Y-m-d',strtotime($appointment_datetime));
                                    $count = Custom::get_sub_token_number($appointmentStaffID, $appointmentServiceID, $appointmentAddressID, $slotTime, $bookingDate);
                                    $queue_number = $queue_number + (($count + 1) / 10);
                                    $sub_token = 'YES';
                                }
                                $cancel_date_time="0000-00-00 00:00:00";
                                $cancel_by_user_id = 0;
                                $status = 'NEW';
                                $sql = "UPDATE appointment_customer_staff_services SET cancel_date_time =?, cancel_by_user_id =?, status =?, sub_token=?, queue_number=?  where id = ?";
                                $stmt = $connection->prepare($sql);
                                $stmt->bind_param('ssssss', $cancel_date_time,$cancel_by_user_id,$status,$sub_token,$queue_number, $appointment_id);
                                $result = $stmt->execute();
                            }

                            $sql = "UPDATE appointment_customer_staff_services SET booking_payment_type=?, amount =?, medical_product_order_id =?, transaction_id =?, payment_by_user_id =?,  status = ?, payment_status = ?,  modified = ?, ipd_procedure_amount = ?, vaccination_amount = ?, other_amount = ?, remember_payment = ? where id = ?";
                            $stmt = $connection->prepare($sql);
                            $stmt->bind_param('sssssssssssss', $payment_type_name, $opd, $medicalProductOrderID, $transaction_id, $user_id, $app_status, $status, $created, $ipd, $vaccination, $other, $remember, $appointment_id);
                            if ($stmt->execute()) {

                            	if($appointment_data['booking_validity_attempt'] > 1){
                                    $order_data = Custom::tab_get_medical_product_order($medicalProductOrderID);
                                    if(empty($order_data['created_by_user_id'])){
                                        $sql = "UPDATE medical_product_orders SET created_by_user_id =? where id = ?";
                                        $stmt = $connection->prepare($sql);
                                        $stmt->bind_param('ss', $user_id , $medicalProductOrderID);
                                        $stmt->execute();
                                    }
                                }
                            	
                                $response['status'] = 1;
                                $response['customer_id'] = $customer_id;

                                if ($payment_by_activity == "quick_payment") {
                                    $send_appointment_tracker = true;
                                }


                                if ($transaction_id != "CASH" && $status == 'SUCCESS') {
                                    $doctor_data = Custom::get_doctor_by_id($appointment_data['doctor_id']);
                                    if($doctor_data['is_online_consulting']=="NO"){
                                        WebservicesFunction:: wallet_book_appointment($appointment_id, $user_id, $wallet_deduct, $thin_app_id);
                                    }
                                }

                                if (!empty($appointment_data)) {

                                    $app_date = Custom::createAppoinmentDate($appointment_data['appointment_datetime'], $appointment_data['slot_time']);
                                    $app_date = date('d/m/Y h:i A', strtotime($appointment_data['appointment_datetime']));

                                    $label_date = date('Y-m-d', strtotime($appointment_data['appointment_datetime']));
                                    $day_label = Custom::get_date_label($label_date);

                                    if (!empty($appointment_data['queue_number'])) {
                                        $queue_number = ($appointment_data['queue_number'] > 0) ? " Token : " . $appointment_data['queue_number'] : "";
                                    } else {
                                        $queue_number = "";
                                    }


                                    $staff_name = $appointment_data['staff_name'];
                                    if ($transaction_id != "CASH") {
                                        if ($status == 'SUCCESS') {

                                            $message = "Hi " . $staff_name . ", your appointment $queue_number with " . $appointment_data['cus_name'] . ', has been confirmed  on ' . $day_label . ', ' . $app_date;
                                            $option = array(
                                                'thinapp_id' => $thin_app_id,
                                                'customer_id' => 0,
                                                'staff_id' => $appointment_data['appointment_staff_id'],
                                                'service_id' => $appointment_data['appointment_service_id'],
                                                'channel_id' => 0,
                                                'role' => "STAFF",
                                                'flag' => 'APPOINTMENT',
                                                'title' => "New Appointment Request",
                                                'message' => mb_strimwidth($message, 0, 250, '...'),
                                                'description' => "",
                                                'chat_reference' => '',
                                                'module_type' => 'APPOINTMENT',
                                                'module_type_id' => $appointment_id,
                                                'doctor_id' => $appointment_data['appointment_staff_id'],
                                                'firebase_reference' => ""
                                            );
                                            $background['notification'][0]['data'] = $option;
                                            $background['notification'][0]['user_id'] = $appointment_data['staff_user_id'];
                                            $background['sms'][] = array(
                                                'message' => $message,
                                                'mobile' => $appointment_data['staff_mobile'],
                                                'send_to' => 'DOCTOR'
                                            );

                                            $message = "Hi " . $appointment_data['cus_name'] . ", your appointment $queue_number with " . $staff_name . ', has been confirmed on ' . $day_label . ', ' . $app_date . " with successfully payment";
                                            $option = array(
                                                'thinapp_id' => $thin_app_id,
                                                'staff_id' => 0,
                                                'customer_id' => $appointment_data['appointment_customer_id'],
                                                'service_id' => $appointment_data['appointment_service_id'],
                                                'channel_id' => 0,
                                                'role' => "CUSTOMER",
                                                'flag' => 'APPOINTMENT',
                                                'title' => "New Appointment Request",
                                                'message' => mb_strimwidth($message, 0, 250, '...'),
                                                'description' => "",
                                                'chat_reference' => '',
                                                'module_type' => 'APPOINTMENT',
                                                'module_type_id' => $appointment_id,
                                                'doctor_id' => $appointment_data['appointment_staff_id'],
                                                'firebase_reference' => ""
                                            );
                                            $background['notification'][1]['data'] = $option;
                                            $background['notification'][1]['user_id'] = $appointment_data['customer_user_id'];
                                            $background['sms'][] = array(
                                                'message' => $message,
                                                'mobile' => $appointment_data['customer_mobile'],
                                                'send_to' => 'USER'
                                            );

                                            WebservicesFunction::addUserStaticToJson('', $user_id, $thin_app_id, $mobile, "APPOINTMENT", 'CONFIRM APPOINTMENT', 'update_appointment_payment_status');

                                        } else if ($status == 'FAILURE') {

                                            $message = "Hi " . $appointment_data['cus_name'] . " your appointment $queue_number with " . $staff_name . ', could not confirmed on ' . $day_label . ', ' . $app_date;
                                            $option = array(
                                                'thinapp_id' => $thin_app_id,
                                                'staff_id' => 0,
                                                'customer_id' => $appointment_data['appointment_customer_id'],
                                                'service_id' => $appointment_data['appointment_service_id'],
                                                'channel_id' => 0,
                                                'role' => "CUSTOMER",
                                                'flag' => 'APPOINTMENT',
                                                'title' => "New Appointment Request",
                                                'message' => mb_strimwidth($message, 0, 250, '...'),
                                                'description' => "",
                                                'chat_reference' => '',
                                                'module_type' => 'APPOINTMENT',
                                                'module_type_id' => $appointment_id,
                                                'doctor_id' => $appointment_data['appointment_staff_id'],
                                                'firebase_reference' => ""
                                            );
                                            $background['notification'][1]['data'] = $option;
                                            $background['notification'][1]['user_id'] = $appointment_data['customer_user_id'];
                                            $background['sms'][] = array(
                                                'message' => $message,
                                                'mobile' => $appointment_data['customer_mobile'],
                                            	'send_to' => 'USER'
                                            );
                                            WebservicesFunction::addUserStaticToJson('', $user_id, $thin_app_id, $mobile, "APPOINTMENT", 'PAYMENT FAILURE', 'update_appointment_payment_status');

                                        }
                                    } else {

                                        /* this code send notificantion for cash payment by customer to doctor*/
                                        $message = "Hello " . $appointment_data['cus_name'] . ", your appointment on " . $day_label . ", " . $app_date . " for service " . $appointment_data['service_name'] . ' payment has been received by ' . $staff_name;
                                        $option = array(
                                            'thinapp_id' => $thin_app_id,
                                            'staff_id' => 0,
                                            'customer_id' => $appointment_data['appointment_customer_id'],
                                            'service_id' => $appointment_data['appointment_service_id'],
                                            'channel_id' => 0,
                                            'role' => "CUSTOMER",
                                            'flag' => 'APPOINTMENT',
                                            'title' => "New Appointment Request",
                                            'message' => mb_strimwidth($message, 0, 250, '...'),
                                            'description' => "",
                                            'chat_reference' => '',
                                            'module_type' => 'APPOINTMENT',
                                            'module_type_id' => $appointment_id,
                                            'doctor_id' => $appointment_data['appointment_staff_id'],
                                            'firebase_reference' => ""
                                        );
                                        $background['notification'][1]['data'] = $option;
                                        $background['notification'][1]['user_id'] = $appointment_data['customer_user_id'];
                                        $background['sms'][] = array(
                                            'message' => $message,
                                            'mobile' => $appointment_data['customer_mobile'],
                                        	'send_to' => 'USER'
                                        );
                                    }


                                }

                            } else {
                                $response['status'] = 0;
                                $response['message'] = "Error when appointment payment";
                            }
                        } else {
                            $response['status'] = 0;
                            $response['message'] = "Sorry this is not valid appointment";
                        }
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Invalid payment status";
                    }

                }

            } catch (Exception $e) {

                $response['status'] = 0;
                $response['message'] = $e->getMessage();
            }

            $notification_array['background'] = $background;
        	$notification_array['appointment_id'] = $appointment_id;
            $notification_array['thin_app_id'] = $thin_app_id;
            $notification_array['send_appointment_tracker'] = $send_appointment_tracker;
            if ($return === true) {
                $response['notification_array'] = $notification_array;
                return json_encode($response);
            } else {
                Custom::sendResponse($response);
                Custom::send_process_to_background();
                Custom::appointment_payment_notification($notification_array);
            }
            exit;

        } else {
            exit();
        }
    }


    public static function close_appointment($data = null, $return = false,$payment_add_via='OTHER')
    {

        /* this method will continue when user lost connection*/
        ignore_user_abort(true);
        set_time_limit(0);

        if (empty($data)) {
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);
        }

        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            try {
                $response = array();
                $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
                $app_key = isset($data['app_key']) ? $data['app_key'] : "";
                $user_id = isset($data['user_id']) ? $data['user_id'] : "";
                $appointment_id = isset($data['appointment_id']) ? $data['appointment_id'] : "";
                $appointment_user_role = !empty($data['appointment_user_role']) ? $data['appointment_user_role'] : "";
                $request_for = !empty($data['request_for']) ? $data['request_for'] : "";
                $tag_id = isset($data['tag_id']) ? $data['tag_id'] : "";
                $status = "CLOSED";
                $background = array();

                if (empty($appointment_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid appointment id';
                } else if (empty($status)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid status';
                } else if (empty($user_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Please enter user id';
                } else if (empty($thin_app_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid thinapp';
                } else if (empty($app_key)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid app';
                } else {

                    $appointment_data = Custom::get_appointment_by_id($appointment_id);
                    if (!empty($appointment_data)) {
                        if($request_for == "CLIPBOARD" && $appointment_data['patient_queue_type'] == 'LAB_TEST'){
                            $response['status'] = 1;
                            $response['message'] = "Lab test appointment can not closed via clipboard";
                        }else{
                            $connection = ConnectionUtil::getConnection();
                            $connection->autocommit(false);
                            $created = Custom::created();
                            $appointmentSql = "SELECT * FROM `appointment_customer_staff_services` WHERE `id` = '" . $appointment_id . "' LIMIT 1";
                            $appointmentRS = $connection->query($appointmentSql);
                            $appointmentDATA = mysqli_fetch_assoc($appointmentRS);

                            if ($appointmentDATA['medical_product_order_id'] < 1) {
                                $appointmentCustomerStaffServiceID = $appointmentDATA['id'];
                                $appointment_staff_id = $appointmentDATA['appointment_staff_id'];
                                $appointment_customer_id = $appointmentDATA['appointment_customer_id'];
                                $appointment_address_id = $appointmentDATA['appointment_address_id'];
                                $children_id = $appointmentDATA['children_id'];
                                $thinapp_id = $appointmentDATA['thinapp_id'];
                                $total_amount = $appointmentDATA['amount'];
                                $uniqueID = date("dmy") . $appointmentDATA['id'];
                                $clinic_total_amount = 0;
                                if($payment_add_via=='CLINIC'){
                                    $clinic_total_amount = $total_amount;
                                }



                                $medicalProductOrderInsert = "INSERT INTO `medical_product_orders` SET  `charged_amount`= '".$clinic_total_amount."', `clinic_total_amount` = '".$clinic_total_amount."', `appointment_address_id` = '".$appointment_address_id."', `payment_add_via` = '".$payment_add_via."', `created_by_user_id` =  '" . $user_id . "', `unique_id` = '" . $uniqueID . "', `appointment_customer_staff_service_id` = '" . $appointmentCustomerStaffServiceID . "',`appointment_staff_id` = '" . $appointment_staff_id . "', `appointment_customer_id` = '" . $appointment_customer_id . "', `children_id` = '" . $children_id . "', `thinapp_id` = '" . $thinapp_id . "', `total_amount` = '" . $total_amount . "', `created` = '" . $created . "', `modified` = '" . $created . "'";
                                $medicalProductOrderInsertRS = $connection->query($medicalProductOrderInsert);
                                $medicalProductOrderID = $connection->insert_id;

                                $medicalProductOrderDetailInsert = "INSERT INTO `medical_product_order_details` SET `medical_product_order_id` = '" . $medicalProductOrderID . "',`service` = 'OPD',`appointment_customer_staff_service_id` = '" . $appointmentCustomerStaffServiceID . "',`appointment_staff_id` = '" . $appointment_staff_id . "', `appointment_customer_id` = '" . $appointment_customer_id . "',`children_id` = '" . $children_id . "',`thinapp_id` = '" . $thinapp_id . "',`product_price` = '" . $total_amount . "',`quantity` = '1',`discount_type` = 'PERCENTAGE',`discount_value` = '0',`discount_amount` = '0',`amount` = '" . $total_amount . "',`total_amount` = '" . $total_amount . "',`created` = '" . $created . "', `modified` = '" . $created . "'";
                                $connection->query($medicalProductOrderDetailInsert);


                            } else {
                                $medicalProductOrderID = $appointmentDATA['medical_product_order_id'];


                            }


                            $payment_status = "SUCCESS";
                            $sql = "UPDATE appointment_customer_staff_services SET  medical_product_order_id = ?,status = ?, payment_status =?, modified = ? where id = ?";
                            $stmt = $connection->prepare($sql);
                            $stmt->bind_param('sssss', $medicalProductOrderID, $status, $payment_status, $created, $appointment_id);
                            if ($stmt->execute()) {
                                $connection->commit();
                                $res =  Custom::updateTokenOnAction($thin_app_id,$appointment_data['appointment_staff_id'],$appointment_data['queue_number']);
                                $update_biller = Custom::update_billing_created_by($medicalProductOrderID, $user_id);
                                $response['status'] = 1;
                                $response['orderID'] = $medicalProductOrderID;
                                $response['message'] = "Appointment Closed Successfully";
                                $appointment_data = WebservicesFunction::get_appointment_all_data_id($appointment_id);
                                $response['data']['button_list'] = Custom::create_appointment_button_array($thin_app_id, $appointment_user_role,$appointment_data);
                                if (!empty($appointment_data) && $appointment_data['staff_user_id'] != 0) {

                                    $last_date = date('d-m-Y h:i A', strtotime($appointment_data['appointment_datetime']));
                                    $message = "Thankyou for appointment with " . $appointment_data['staff_name'] . " for service " . $appointment_data['app_ser_name'];
                                    $option = array(
                                        'thinapp_id' => $thin_app_id,
                                        'staff_id' => 0,
                                        'customer_id' => $appointment_data['appointment_customer_id'],
                                        'service_id' => $appointment_data['appointment_service_id'],
                                        'channel_id' => 0,
                                        'role' => "CUSTOMER",
                                        'flag' => 'APPOINTMENT',
                                        'title' => "New Appointment Request",
                                        'message' => mb_strimwidth($message, 0, 250, '...'),
                                        'description' => mb_strimwidth($message, 0, 250, '...'),
                                        'chat_reference' => '',
                                        'module_type' => 'APPOINTMENT',
                                        'module_type_id' => $appointment_id,
                                        'firebase_reference' => ""
                                    );
                                    $background['notification'][0]['data'] = $option;
                                    $background['notification'][0]['user_id'] = $appointment_data['customer_user_id'];
                                    $background['sms'][] = array(
                                        'message' => $message,
                                        'mobile' => $appointment_data['customer_mobile']
                                    );
                                }


                                $labPharmacyUserData = array();
                                $labPharmacyUserSql = "SELECT `users`.`id` AS `user_id` FROM `lab_pharmacy_users` LEFT JOIN `users` ON (`users`.`mobile` = `lab_pharmacy_users`.`mobile` AND `users`.`thinapp_id` = '" . $thin_app_id . "') WHERE `lab_pharmacy_users`.`thinapp_id` = '" . $thin_app_id . "' AND `lab_pharmacy_users`.`status` = 'ACTIVE' AND `lab_pharmacy_users`.`request_status` = 'APPROVED' AND `lab_pharmacy_users`.`is_inhouse` = 'YES'";
                                $labPharmacyUserRS = $connection->query($labPharmacyUserSql);
                                if ($labPharmacyUserRS->num_rows) {
                                    $labPharmacyUserData = mysqli_fetch_all($labPharmacyUserRS, MYSQLI_ASSOC);
                                }


                            } else {
                                $response['status'] = 0;
                                $response['message'] = "Error when appointment close";
                            }
                        }



                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Sorry this is not valid appointment";
                    }

                }

            } catch (Exception $e) {

                $response['status'] = 0;
                $response['message'] = $e->getMessage();
            }

            $notification_array['background'] = $background;
            $notification_array['labPharmacyUserData'] = $labPharmacyUserData;
            $notification_array['appointment_data'] = $appointment_data;
            $notification_array['tag_id'] = $tag_id;
            $notification_array['appointment_customer_id'] = @$appointment_data['appointment_customer_id'];
            $notification_array['appointment_staff_id'] = @$appointment_data['appointment_staff_id'];
            $notification_array['children_id'] = @$appointment_data['children_id'];
            $notification_array['thin_app_id'] = $thin_app_id;

            if ($return === true) {
                $response['notification_array'] = $notification_array;
                return json_encode($response);
            } else {
                Custom::sendResponse($response);
                Custom::send_process_to_background();
                Custom::delete_tracker_time_difference_cache($appointment_data['appointment_datetime'],@$appointment_data['appointment_staff_id'],@$appointment_data['appointment_address_id']);
            	if(Custom::check_app_enable_permission($thin_app_id, 'QUEUE_MANAGEMENT_APP')){
                    $doctor_id =$appointment_data['appointment_staff_id'];
                    $res = Custom::fortisUpdateToken($thin_app_id,$doctor_id,false,"CLOSE");
                    Custom::emitSocet(array('doctor_id'=>$doctor_id,'thin_app_id'=>$thin_app_id));
                }
                //Custom::update_tracker_time_difference($appointment_id);
                Custom::close_appointment_notification($notification_array);
            }



            exit;

        } else {
            exit();
        }
    }

    public static function check_in_appointment($data = null){
        if (empty($data)) {
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);
        }
        $appointment_id = $data["appointment_id"];
        $sql = "UPDATE `appointment_customer_staff_services` SET `checked_in` = 'YES' WHERE `id` = '".$appointment_id."'";
        $connection = ConnectionUtil::getConnection();
        if($connection->query($sql))
        {
            $result = array("status"=>1,"message"=>"Success!");
        }
        else
        {
            $result = array("status"=>0,"message"=>"Failed!");
        }
        Custom::sendResponse($result);
        die();

    }


    public static function cancel_appointment($data = null, $exit_from_process = true, $return = false,$request_type = "")
    {


        /* this method will continue when user lost connection*/
        ignore_user_abort(true);
        set_time_limit(0);

        if (empty($data)) {
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);
        }

        if ($_SERVER['REQUEST_METHOD'] === 'POST') {


            try {
                $response = array();
                $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
                $app_key = isset($data['app_key']) ? $data['app_key'] : "";
                $user_id = isset($data['user_id']) ? $data['user_id'] : "";
                $mobile = isset($data['mobile']) ? $data['mobile'] : "";
                $appointment_id = isset($data['appointment_id']) ? $data['appointment_id'] : "";
                $appointment_user_role = isset($data['appointment_user_role']) ? $data['appointment_user_role'] : "";
                $cancel_message = isset($data['message']) ? $data['message'] : "";
                $cancel_by = isset($data['cancel_by']) ? strtoupper($data['cancel_by']) : "DOCTOR";
                $status = "CANCELED";
                $background = array();

                if (empty($appointment_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid appointment id';
                } else if (empty($status)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid status';
                } else if (empty($user_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Please enter user id';
                } else if (empty($thin_app_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid thinapp';
                } else if (empty($app_key)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid app';
                } else {

                    $is_appointment = WebservicesFunction::get_appointment_all_data_id($appointment_id);
                    //$cancel_message = "";
                    if ($is_appointment) {
                        $connection = ConnectionUtil::getConnection();
                        $created = Custom::created();

                        $medical_product_order_id = $is_appointment['medical_product_order_id'];
                        $payment_status = $is_appointment['payment_status'];
                    
                    	if($payment_status=='PENDING' || $is_appointment['booking_validity_attempt'] > 1){
                        
                        if ($cancel_by != 'USER') {
                            $medical_product_order_id = 0;
                            $payment_status = 'PENDING';
                        }

                        $sql = "UPDATE appointment_customer_staff_services SET payment_status =?, medical_product_order_id =?, cancel_reason = ?, status = ?, cancel_by_user_id = ?, cancel_date_time = ?, modified = ? where id = ?";
                        $stmt = $connection->prepare($sql);
                        $stmt->bind_param('ssssssss', $payment_status, $medical_product_order_id, $cancel_message, $status, $user_id, $created, $created, $appointment_id);
                        if ($stmt->execute()) {

                            if ($cancel_by == "DOCTOR" || $appointment_user_role == "RECEPTIONIST" || $appointment_user_role == 'ADMIN' || $appointment_user_role == 'STAFF') {

                                $medical_product_order_id = $is_appointment['medical_product_order_id'];
                                /* delete medical product detail and order after cancel appointment */
                                $sql = "delete from medical_product_orders where id = ?";
                                $stmt_order = $connection->prepare($sql);
                                $stmt_order->bind_param('s', $medical_product_order_id);

                                $status = 'INACTIVE';
                                $sql = "update  medical_product_order_details set status = ? where medical_product_order_id = ?";
                                $stmt_order_detail = $connection->prepare($sql);
                                $stmt_order_detail->bind_param('ss', $status,$medical_product_order_id);
                                if ($stmt_order->execute() && $stmt_order_detail->execute()) {

                                }
                            }


                            $response['status'] = 1;
                            $response['message'] = "Appointment canceled successfully";
                            $appointment_data = Custom::get_appointment_by_id($appointment_id);
                            $response['data']['button_list'] = Custom::create_appointment_button_array($thin_app_id, $appointment_user_role,$appointment_data);
                            WebservicesFunction::addUserStaticToJson('', $user_id, $thin_app_id, $mobile, "APPOINTMENT", "CANCEL APPOINTMENT", 'cancel_appointment');
                        
                        	 $doctor_id = $appointment_data['appointment_staff_id'];
                                $res = Custom::fortisUpdatePatientNameCurrentToken($thin_app_id,$doctor_id,$appointment_data,'CANCEL');
                        	$res =  Custom::updateTokenOnAction($thin_app_id,$doctor_id,$appointment_data['queue_number']);



                            $appointment_data = WebservicesFunction::get_appointment_all_data_id($appointment_id);
                            if (!empty($appointment_data)) {
                                $format = "d/m/Y h:i A";
                                if($appointment_data['show_appointment_time']=='NO'){
                                    $format = "d/m/Y";
                                }
                                $app_date = date($format, strtotime($appointment_data['appointment_datetime']));
                                $label_date = date('Y-m-d', strtotime($appointment_data['appointment_datetime']));
                                $day_label = Custom::get_date_label($label_date);
                                $staff_name = $appointment_data['staff_name'];

                                $counter = 0;
                                if ($cancel_by == "DOCTOR" || $appointment_user_role == "RECEPTIONIST" || $appointment_user_role == 'ADMIN' || $appointment_user_role == 'STAFF') {
                                    $message = "Hi " . trim($appointment_data['cus_name']) . ", your appointment on " . $day_label . ', ' . $app_date . " with " . $staff_name . ', has been canceled';
                                    if (!empty($cancel_message)) {
                                        $message .= "\nReason : " . $cancel_message;
                                    }
                                    $cancel_message = $message;
                                    $option = array(
                                        'thinapp_id' => $thin_app_id,
                                        'staff_id' => 0,
                                        'customer_id' => $appointment_data['appointment_customer_id'],
                                        'service_id' => $appointment_data['appointment_service_id'],
                                        'channel_id' => 0,
                                        'role' => "CUSTOMER",
                                        'flag' => 'APPOINTMENT',
                                        'title' => "New Appointment Request",
                                        'message' => mb_strimwidth($message, 0, 250, '...'),
                                        'description' => mb_strimwidth($message, 0, 250, '...'),
                                        'chat_reference' => '',
                                        'module_type' => 'APPOINTMENT',
                                        'module_type_id' => $appointment_id,
                                        'doctor_id' => isset($doctor_id) ? $doctor_id : 0,
                                        'firebase_reference' => ""
                                    );
                                    $background['notification'][$counter]['data'] = $option;
                                    $background['notification'][$counter]['user_id'] = $appointment_data['customer_user_id'];
                                    $background['notification'][$counter]['send_to'] = "USER";
                                    $cus_data = Custom::get_user_by_mobile($thin_app_id, $appointment_data['customer_mobile']);
                                    if (empty($cus_data) || @$cus_data['app_installed_status'] == "UNINSTALLED") {
                                        $background['sms'][] = array(
                                            'message' => $message,
                                            'mobile' => $appointment_data['customer_mobile'],
                                            'send_to'=>'USER'
                                        );
                                    }
                                    $counter++;
                                }

                                if ($appointment_user_role == "USER" || $appointment_user_role == "RECEPTIONIST") {

                                    $message = "Hi " . trim($staff_name) . ", your appointment on " . $day_label . ', ' . $app_date . " with patient " . $appointment_data['cus_name'] . ', has been canceled';
                                    if (!empty($cancel_message)) {
                                        $message .= "\nReason : " . mb_strimwidth($cancel_message, 0, 50, '...');
                                    }

                                    $option = array(
                                        'thinapp_id' => $thin_app_id,
                                        'customer_id' => 0,
                                        'staff_id' => $appointment_data['appointment_staff_id'],
                                        'service_id' => $appointment_data['appointment_service_id'],
                                        'channel_id' => 0,
                                        'role' => "STAFF",
                                        'flag' => 'APPOINTMENT',
                                        'title' => "New Appointment Request",
                                        'message' => mb_strimwidth($message, 0, 250, '...'),
                                        'description' => mb_strimwidth($message, 0, 250, '...'),
                                        'chat_reference' => '',
                                        'module_type' => 'APPOINTMENT',
                                        'module_type_id' => $appointment_id,
                                        'doctor_id' => isset($doctor_id) ? $doctor_id : 0,
                                        'firebase_reference' => ""
                                    );
                                    $background['notification'][$counter]['data'] = $option;
                                    $background['notification'][$counter]['user_id'] = $appointment_data['staff_user_id'];
                                    $background['notification'][$counter]['send_to'] = "DOCTOR";
                                    $cus_data = Custom::get_user_by_mobile($thin_app_id, $appointment_data['staff_mobile']);
                                    if (empty($cus_data) || @$cus_data['app_installed_status'] == "UNINSTALLED") {
                                        $background['sms'][] = array(
                                            'message' => $message,
                                            'mobile' => $appointment_data['staff_mobile'],
                                            'send_to'=>'DOCTOR'
                                        );
                                    }

                                }


                            }

                        } else {
                            $response['status'] = 0;
                            $response['message'] = "Error when appointment cancel";
                        }
                    
                     }else{
                            $message_txt ="Appointment can not cancel after payment. ";
                            if (in_array($cancel_by,array('DOCTOR','RECEPTIONIST','ADMIN','STAFF'))) {
                                $message_txt .= "Your can refund this appointment";
                            }
                            $response['status'] = 0;
                            $response['message'] = $message_txt;
                        }
                    
                    
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Sorry this is not valid appointment";
                    }

                }

            } catch (Exception $e) {

                $response['status'] = 0;
                $response['message'] = $e->getMessage();
            }

            $notification_array['background'] = $background;
            $notification_array['appointment_data'] = $appointment_data;
            $notification_array['thin_app_id'] = $thin_app_id;
            $notification_array['appointment_user_role'] = $appointment_user_role;
            $notification_array['cancel_by'] = $cancel_by;
            $notification_array['cancel_message'] = $cancel_message;
            $notification_array['appointment_id'] = $appointment_id;
        	
	       
            
            if ($return === true) {
                $response['notification_array'] = $notification_array;
                return json_encode($response);
            } else {
                Custom::sendResponse($response);
                Custom::send_process_to_background();
                Custom::cancel_appointment_notification($notification_array,$request_type);
            
            	if(Custom::check_app_enable_permission($thin_app_id, 'QUEUE_MANAGEMENT_APP')){
                    $doctor_id =$appointment_data['appointment_staff_id'];
                    $res = Custom::fortisUpdateToken($thin_app_id,$doctor_id);
                    Custom::emitSocet(array('doctor_id'=>$doctor_id,'thin_app_id'=>$thin_app_id));
                }
            
                //Custom::update_tracker_time_difference($appointment_id);
            	if($thin_app_id==607){
                    $refund_reason = 'Your token booking time is expired';
                    $detail_data = Custom::getCashFreeOnlineAmount($appointment_id,$thin_app_id);
                    if (!empty($detail_data)) {
                        $referenceId = $detail_data['refrence_id'];
                        $medical_product_order_id = $detail_data['medical_product_order_id'];
                        $amount = $detail_data['amount'];
                        if(!empty($referenceId) && !empty($amount)){
                            $result = json_decode(Custom::cashFreeRefund($connection,$thin_app_id,$user_id,$medical_product_order_id, $referenceId,$amount,$detail_data['booking_convenience_order_detail_id'],$refund_reason,$detail_data['payment_mode']),true);
                            if($result['status']=='OK'){
                                $refundId =$result['refundId'];
                                $callRes = Custom::tokenCanceledCall($mobile,"01414937900","589419");
                                $doctorData = Custom::get_doctor_by_id($is_appointment['doctor_id']);
                                $doctor_name = $doctorData['name'];
                                $token_number = $is_appointment['queue_number'];
                                $app_date =date('d/m/Y',strtotime($is_appointment['appointment_datetime']));
                                $cancelWhats = "अपॉइंटमेंट टोकन निरस्त\n\nडॉक्टर का नाम  :- $doctor_name\nदिनांक   :- $app_date\nटोकन  :- $token_number\n\nशमा करे  डॉक्टर $doctor_name का अपॉइंटमेंट टोकन बुक नहीं हो पाया हैं ! अगर अपने टोकन फी का भुक्तान किया हैं तो  कृपया  निश्चिन्त रहिये आपको टोकन फी  सात दिनों के भीतर वापस कर दी जाएगी |\nधन्यवाद|";
                                $res = Custom::sendWhatsappSms($mobile,$cancelWhats,$cancelWhats,$thin_app_id);
                            }
                        }
                    }

                }
            }




        }
        if ($exit_from_process === true) {
            exit();
        }


    }


    public static function appointment_get_staff_list($data=null)
    {
        $return = true;
        if(empty($data)){
            $return = false;
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);
        }

        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $role_id = isset($data['role_id']) ? $data['role_id'] : "";
            $offset = isset($data['offset']) ? $data['offset'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter user id';
            } else if (empty($role_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter role id';
            } else if (empty($offset) && $offset != 0) {
                $response['status'] = 0;
                $response['message'] = 'Please enter offset';
            } else {

                $offset = ($offset * 100);
                $limit = 100;
                $response = $response_data = array();
                $connection = ConnectionUtil::getConnection();

                $query = "select app_staff.mobile, app_staff.id as staff_id, app_staff.name,app_staff.sub_title,app_staff.profile_photo, app_staff.is_online_consulting from  appointment_staffs as app_staff where app_staff.status='ACTIVE' AND  app_staff.thinapp_id = $thin_app_id  ORDER BY app_staff.id DESC limit $limit offset $offset";
                $subscriber = $connection->query($query);
                if ($subscriber->num_rows) {
                    $channels_arr = array();
                    $subscriber = mysqli_fetch_all($subscriber, MYSQLI_ASSOC);
                    $response['status'] = 1;
                    $response['message'] = "Staff list found";
                    $response['data']['staff_list'] = $subscriber;
                } else {
                    $response['status'] = 0;
                    $response['message'] = "No staff list found";
                    $admin_data = Custom::get_thinapp_admin_data($thin_app_id);
                    $response['data']['education'] = $admin_data['education'];
                    $exp = explode('.', $admin_data['experience']);
                    $response['data']['exp_year'] = $exp[0];
                    $response['data']['exp_month'] = $exp[1];
                    $response['data']['profile_image'] = $admin_data['image'];
                	$response['data']['is_online_consulting'] = 'NO';
                }
            }
            if($return===true){
                return json_encode($response);
            }else{
                echo json_encode($response);
                die;
            }

        } else {
            exit();
        }
    }


    public static function appointment_get_address_list()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter user id';
            } else {


                $response = $response_data = array();
                $connection = ConnectionUtil::getConnection();
                $query = "select app_add.place, app_add.address, app_add.id from  appointment_addresses as app_add where app_add.status='ACTIVE' AND  app_add.thinapp_id = $thin_app_id ORDER BY app_add.place asc";
                $subscriber = $connection->query($query);
                if ($subscriber->num_rows) {
                    $channels_arr = array();
                    $subscriber = mysqli_fetch_all($subscriber, MYSQLI_ASSOC);
                    foreach ($subscriber as $key => $channel_data) {
                        $channels_arr[$key]['staff_id'] = $channel_data['id'];
                        $channels_arr[$key]['place'] = $channel_data['place'];
                        $channels_arr[$key]['address'] = $channel_data['address'];
                        //$channels_arr[$key]['address'] = $channel_data['address'];
                    }
                    $response['status'] = 1;
                    $response['message'] = "Address list found";
                    $response['data']['staff_list'] = $channels_arr;
                } else {
                    $response['status'] = 0;
                    $response['message'] = "No address list found";
                }
            }
            echo json_encode($response);
            die;
        } else {
            exit();
        }
    }

    public static function appointment_get_service_unassigned_staff_list()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $service_id = isset($data['service_id']) ? $data['service_id'] : "";
            $offset = isset($data['offset']) ? $data['offset'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter user id';
            } else if (empty($offset) && $offset != 0) {
                $response['status'] = 0;
                $response['message'] = 'Please enter offset';
            } else if (empty($service_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter service id';
            } else {

                $offset = ($offset * PAGINATION_LIMIT);
                $limit = PAGINATION_LIMIT;
                $response = $response_data = array();
                $connection = ConnectionUtil::getConnection();
                $query = "select app_staff.id,app_staff.name,app_staff.sub_title,app_staff.profile_photo, ( select ass.id from appointment_staff_services as ass where ass.appointment_service_id = $service_id and app_staff.id = ass.appointment_staff_id and ass.status ='ACTIVE' limit 1 ) as assi_staff_id from  appointment_staffs as app_staff where app_staff.status ='ACTIVE' and app_staff.thinapp_id = $thin_app_id   ORDER BY app_staff.id DESC limit $limit offset $offset";
                $subscriber = $connection->query($query);
                if ($subscriber->num_rows) {
                    $channels_arr = array();
                    $subscriber = mysqli_fetch_all($subscriber, MYSQLI_ASSOC);
                    foreach ($subscriber as $key => $channel_data) {
                        $channels_arr[$key]['staff_id'] = $channel_data['id'];
                        $channels_arr[$key]['name'] = $channel_data['name'];
                        $channels_arr[$key]['sub_title'] = $channel_data['sub_title'];
                        $channels_arr[$key]['profile_photo'] = $channel_data['profile_photo'];
                        $channels_arr[$key]['is_associated'] = ($channel_data['assi_staff_id'] > 0) ? "YES" : "NO";
                    }
                    $response['status'] = 1;
                    $response['message'] = "Staff list found";
                    $response['data']['staff_list'] = $channels_arr;
                } else {
                    $response['status'] = 0;
                    $response['message'] = "No staff list found";
                }
            }
            echo json_encode($response);
            die;
        } else {
            exit();
        }
    }

    public static function fun_load_appointment_staff_profile($thin_app_id, $staff_id)
    {
        $connection = ConnectionUtil::getConnection();
        $query = "select is_audio_consulting, is_chat_consulting, is_online_consulting, is_offline_consulting, show_appointment_time, emergency_appointment_fee, allow_emergency_appointment, show_appointment_token, payment_mode, SUBSTRING_INDEX(experience,'.',1) as year ,SUBSTRING_INDEX(experience,'.',-1) as month, country_code, name, RIGHT(mobile,10) AS mobile, sub_title, profile_photo, description, address, enable_chat, show_mobile, show_fees from appointment_staffs as app_st where app_st.id=$staff_id";
        
        $service_message_list = $connection->query($query);
        $response = array();
        $data_array = array();
        $profile_data = $break_list = array();
        $break_data = array();
        if ($service_message_list->num_rows) {
            $user_profile = mysqli_fetch_assoc($service_message_list);
            $profile_data['name'] = $user_profile['name'];
            $profile_data['sub_title'] = $user_profile['sub_title'];
            $profile_data['mobile'] = str_replace($user_profile['country_code'], "", $user_profile['mobile']);
            $profile_data['profile_photo'] = $user_profile['profile_photo'];
            $profile_data['description'] = $user_profile['description'];
            $profile_data['address'] = $user_profile['address'];
            $profile_data['year'] = $user_profile['year'];
            $profile_data['month'] = $user_profile['month'];
            $profile_data['enable_chat'] = $user_profile['enable_chat'];
            $profile_data['show_fees'] = $user_profile['show_fees'];
            $profile_data['show_mobile'] = $user_profile['show_mobile'];
            $profile_data['payment_mode'] = $user_profile['payment_mode'];
            $profile_data['show_appointment_time'] = $user_profile['show_appointment_time'];
            $profile_data['show_appointment_token'] = $user_profile['show_appointment_token'];
            $profile_data['allow_emergency_appointment'] = $user_profile['allow_emergency_appointment'];
            $profile_data['emergency_appointment_fee'] = $user_profile['emergency_appointment_fee'];
        	$profile_data['is_online_consulting'] = $user_profile['is_online_consulting'];
        	$profile_data['is_offline_consulting'] = $user_profile['is_offline_consulting'];
        	$profile_data['is_audio_consulting'] = $user_profile['is_audio_consulting'];
            $profile_data['is_chat_consulting'] = $user_profile['is_chat_consulting'];
            /* this code get staff list of this service*/
        } else {
            return false;
        }
        return $profile_data;
    }

    public static function get_appointment_staff_profile()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $response = array();
            try {
                $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
                $app_key = isset($data['app_key']) ? $data['app_key'] : "";
                $user_id = isset($data['user_id']) ? $data['user_id'] : "";
                $staff_id = isset($data['staff_id']) ? $data['staff_id'] : "";

                if (empty($thin_app_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid thinapp id';
                } else if (empty($app_key)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid app key';
                } else if (empty($user_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Please enter user id';
                } else if (empty($staff_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Please enter staff id';
                } else {

                    $response = $response_data = array();
                    $response_data = WebservicesFunction::fun_load_appointment_staff_profile($thin_app_id, $staff_id);
                    if (!empty($response_data)) {
                        $response['status'] = 1;
                        $response['message'] = "Doctor found";
                        $response['data']['service_detail'] = $response_data;
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Doctor not registered";

                    }
                }
            } catch (Exception $e) {
                $response['status'] = 0;
                $response['message'] = "Server not responding";
            }
            echo json_encode($response);
            die;
        } else {
            exit();
        }


    }

    public static function get_appointment_staff_hours()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $staff_id = isset($data['staff_id']) ? $data['staff_id'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter user id';
            } else if (empty($staff_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter staff id';
            } else {

                $query = "select (select count(id) from appointment_customer_staff_services as acss where (acss.status = 'CONFIRM' OR  acss.status='RESCHEDULE') AND acss.payment_status = 'SUCCESS' AND acss.thinapp_id = $thin_app_id AND acss.appointment_datetime <= DATE(NOW()) AND adt.id=acss.appointment_day_time_id ) as app_cnt, adt.day_name, ash.* from appointment_staff_hours as ash join appointment_day_times as adt on adt.id = ash.appointment_day_time_id where ash.appointment_staff_id = $staff_id limit 8";
                $connection = ConnectionUtil::getConnection();
                $service_message_list = $connection->query($query);
                if ($service_message_list->num_rows) {
                    $service_list = mysqli_fetch_all($service_message_list, MYSQLI_ASSOC);
                    foreach ($service_list as $key => $staff_list) {
                        /* THIS CODE WORK FOR HOUR LIST */
                        $data_array['hours_list'][$key]['appointment_staff_hour_id'] = $staff_list['id'];
                        $data_array['hours_list'][$key]['day_name'] = $staff_list['day_name'];
                        $data_array['hours_list'][$key]['time_from'] = $staff_list['time_from'];
                        $data_array['hours_list'][$key]['time_to'] = $staff_list['time_to'];
                        $data_array['hours_list'][$key]['status'] = $staff_list['status'];
                        $data_array['hours_list'][$key]['upcoming_appointment'] = $staff_list['app_cnt'];
                    }
                    $response['status'] = 1;
                    $response['message'] = "Hours list found";
                    $response['data'] = $data_array;

                } else {
                    $response['status'] = 0;
                    $response['message'] = "No hours list found";
                }
            }
            echo json_encode($response);
            die;
        } else {
            exit();
        }
    }

    public static function get_appointment_staff_breaks()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $staff_id = isset($data['staff_id']) ? $data['staff_id'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter user id';
            } else if (empty($staff_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter staff id';
            } else {


                $query = "select adt.day_name, ash.status as stu, ash.* from appointment_staff_hours as ash join appointment_day_times as adt on adt.id = ash.appointment_day_time_id where ash.appointment_staff_id = $staff_id limit 8";
                $connection = ConnectionUtil::getConnection();
                $service_message_list = $connection->query($query);
                if ($service_message_list->num_rows) {
                    $service_list = mysqli_fetch_all($service_message_list, MYSQLI_ASSOC);
                    $connection = ConnectionUtil::getConnection();
                    $query = "select asbs.* from appointment_staff_break_slots as asbs  where asbs.appointment_staff_id = $staff_id AND asbs.status='OPEN'";
                    $get_breaks_list = $connection->query($query);
                    if ($get_breaks_list->num_rows) {
                        $break_list = mysqli_fetch_all($get_breaks_list, MYSQLI_ASSOC);
                        $data_fetch_array = array();
                        foreach ($break_list as $key => $break) {
                            $data_fetch_array['appointment_staff_break_slot_id'] = $break['id'];
                            $data_fetch_array['appointment_day_time_id'] = $break['appointment_day_time_id'];
                            $data_fetch_array['time_from'] = $break['time_from'];
                            $data_fetch_array['time_to'] = $break['time_to'];
                            $data_fetch_array['status'] = $break['status'];
                            $break_data[$break['appointment_day_time_id']][$key] = $data_fetch_array;
                        }
                    }

                    foreach ($service_list as $key => $staff_list) {
                        /* START THIS CODE WORK FOR GET BREAKD LIST OF STAFF*/
                        $data_array['break_list'][$key]['appointment_day_time_id'] = $staff_list['appointment_day_time_id'];
                        $data_array['break_list'][$key]['day_name'] = $staff_list['day_name'];
                        $data_array['break_list'][$key]['status'] = $staff_list['stu'];
                        if (!empty($break_data) && isset($break_data[$staff_list['appointment_day_time_id']])) {
                            if ($staff_list['stu'] == 'OPEN') {

                                $break_list_for_this_day = $break_data[$staff_list['appointment_day_time_id']];
                                $break_slot_list = $break_data[$staff_list['appointment_day_time_id']];
                                $data_array['break_list'][$key]['total_break_count'] = count($break_list_for_this_day);
                                $inner_break_array = array();
                                foreach ($break_list_for_this_day as $break_key => $break_value) {
                                    $inner_break_array['appointment_staff_break_slot_id'] = $break_value['appointment_staff_break_slot_id'];
                                    $inner_break_array['time_from'] = $break_value['time_from'];
                                    $inner_break_array['time_to'] = $break_value['time_to'];
                                    $data_array['break_list'][$key]['inner_break'][] = $inner_break_array;
                                }
                            } else {
                                $data_array['break_list'][$key]['total_break_count'] = 0;
                                $data_array['break_list'][$key]['inner_break'][0]['appointment_staff_break_slot_id'] = 0;
                                $data_array['break_list'][$key]['inner_break'][0]['time_from'] = "00:00";
                                $data_array['break_list'][$key]['inner_break'][0]['time_to'] = "00:00";
                            }

                        } else {
                            $data_array['break_list'][$key]['total_break_count'] = 0;
                            $data_array['break_list'][$key]['inner_break'][0]['appointment_staff_break_slot_id'] = 0;
                            $data_array['break_list'][$key]['inner_break'][0]['time_from'] = "00:00";
                            $data_array['break_list'][$key]['inner_break'][0]['time_to'] = "00:00";
                        }
                        /* END THIS CODE WORK FOR GET BREAKD LIST OF STAFF*/
                    }

                    $response['status'] = 1;
                    $response['message'] = "Staff break list found";
                    $response['data'] = $data_array;

                } else {
                    $response['status'] = 0;
                    $response['message'] = "No break list found";
                }

            }
            echo json_encode($response);
            die;
        } else {
            exit();
        }
    }


    public static function add_appointment_address($data=null)
    {

        $return =true;
        if(empty($data)){
            $return = false;
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);
        }

        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $palace = isset($data['palace']) ? trim($data['palace']) : "";
            $address = isset($data['address']) ? $data['address'] : "";
            $clinic_name = isset($data['clinic_name']) ? $data['clinic_name'] : "";
            $country_id = isset($data['country_id']) ? $data['country_id'] : 0;
            $state_id = isset($data['state_id']) ? $data['state_id'] : 0;
            $city_id = isset($data['city_id']) ? $data['city_id'] : 0;
            $latitude = isset($data['latitude']) ? $data['latitude'] : 0;
            $longitude = isset($data['longitude']) ? $data['longitude'] : 0;
            $separate_address = isset($data['separate_address']) ? $data['separate_address'] : "";
            $pincode = isset($data['pincode']) ? $data['pincode'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($palace)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid  palace ';
            } else if (empty($address)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid  address ';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($latitude) || empty($longitude)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid latitude or longitude';
            } else {
                $palace = strtoupper($palace);
                if (!Custom::is_appointment_address_exist($thin_app_id, $palace, $address)) {
                    $connection = ConnectionUtil::getConnection();
                    $created = Custom::created();
                    $sql = "INSERT INTO appointment_addresses (clinic_name, pincode, latitude, longitude, thinapp_id, place, address, country_id, state_id, city_id, separate_address, created, modified) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                    $stmt_sub = $connection->prepare($sql);
                    $stmt_sub->bind_param('sssssssssssss', $clinic_name, $pincode, $latitude, $longitude, $thin_app_id, $palace, $address, $country_id, $state_id, $city_id, $separate_address, $created, $created);
                    if ($stmt_sub->execute()) {
                        $response['status'] = 1;
                        $response['message'] = "Address saved successfully";
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Address could not save";
                    }
                } else {
                    $response['status'] = 0;
                    $response['message'] = "Address already exist";
                }
            }
            if($return===true){
                return json_encode($response);
            }else{
                echo json_encode($response);
                die;
            }


        }
        exit();
    }


    public static function edit_appointment_address($data=null)
    {

    	
        $return =true;
        if(empty($data)){
            $return = false;
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);
        }
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $palace = isset($data['palace']) ? trim($data['palace']) : "";
            $address = isset($data['address']) ? $data['address'] : "";
            $clinic_name = isset($data['clinic_name']) ? $data['clinic_name'] : "";
            $addres_id = isset($data['addres_id']) ? $data['addres_id'] : "";
            $country_id = isset($data['country_id']) ? $data['country_id'] : 0;
            $state_id = isset($data['state_id']) ? $data['state_id'] : 0;
            $city_id = isset($data['city_id']) ? $data['city_id'] : 0;
            $latitude = isset($data['latitude']) ? $data['latitude'] : 0;
            $longitude = isset($data['longitude']) ? $data['longitude'] : 0;
            $pincode = isset($data['pincode']) ? $data['pincode'] : 0;

            $separate_address = isset($data['separate_address']) ? $data['separate_address'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($palace)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid  palace ';
            } else if (empty($address)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid  address ';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($addres_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid address parameter';
            } else if (empty($latitude) || empty($longitude)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid latitude or longitude';
            } else {
                $palace = strtoupper($palace);
                if (!Custom::is_appointment_address_exist($thin_app_id, $palace, $address,$addres_id)) {
                    $connection = ConnectionUtil::getConnection();
                    $created = Custom::created();
                    $sql = "UPDATE  appointment_addresses set clinic_name=?, pincode =?, latitude =?, longitude =?, place = ?, address = ?, country_id =?, state_id =?, city_id =?, separate_address=?, modified = ? where id = ?";
                    $stmt_sub = $connection->prepare($sql);
                    $stmt_sub->bind_param('ssssssssssss', $clinic_name, $pincode, $latitude, $longitude, $palace, $address, $country_id, $state_id, $city_id, $separate_address, $created, $addres_id);
                    if ($stmt_sub->execute()) {
                        $response['status'] = 1;
                        $response['message'] = "Address update successfully";
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Sorry address could not save";
                    }
                } else {
                    $response['status'] = 0;
                    $response['message'] = "Address already exist";
                }
            }
            if($return===true){
                return json_encode($response);
            }else{
                echo json_encode($response);
                die;
            }

        }
        exit();
    }


    public static function get_appointment_address_list($data=null)
    {

        $return =true;
        if(empty($data)){
            $return =false;
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);
        }

        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $offset = isset($data['offset']) ? $data['offset'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter user id';
            } else if (empty($offset) && $offset != 0) {
                $response['status'] = 0;
                $response['message'] = 'Please enter offset';
            } else {

                $offset = ($offset * DRIVE_FOLDER_DEFAULT_LIMIT);
                $limit = DRIVE_FOLDER_DEFAULT_LIMIT;

                $query = "select aa.clinic_name, aa.id, aa.place, aa.address, aa.country_id, aa.state_id, aa.city_id, aa.separate_address, aa.latitude, aa.longitude, aa.pincode, IFNULL(c.name,'') AS country_name, IFNULL(s.name,'') AS state_name, IFNULL(city.name, '') AS city_name from appointment_addresses AS aa LEFT JOIN countries AS c ON c.id = aa.country_id LEFT JOIN states AS s ON s.id =aa.state_id LEFT JOIN cities AS city ON city.id =aa.city_id where status = 'ACTIVE' AND thinapp_id = $thin_app_id order by aa.id desc  limit $limit offset $offset";
                $connection = ConnectionUtil::getConnection();
                $service_message_list = $connection->query($query);
                if ($service_message_list->num_rows) {
                    $service_list = mysqli_fetch_all($service_message_list, MYSQLI_ASSOC);
                    $place = array_unique(array_column($service_list, "place"));
                    $palace_array = array();
                    if (!empty($place)) {
                        foreach ($place as $key => $value) {
                            $palace_array[] = array('name' => $value);
                        }
                    }
                    $response['status'] = 1;
                    $response['message'] = "Address  list found";
                    $response['data']['address_list'] = $service_list;
                    $response['data']['place_list'] = $palace_array;

                } else {
                    $response['status'] = 0;
                    $response['message'] = "No address list found";
                }

            }

            if($return===true){
                return json_encode($response);
            }else{
                echo json_encode($response);
                die;
            }

        } else {
            exit();
        }
    }

    public static function get_appointment_staff_services()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $staff_id = isset($data['staff_id']) ? $data['staff_id'] : "";
            $offset = isset($data['offset']) ? $data['offset'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter user id';
            } else if (empty($staff_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter staff id';
            } else if (empty($offset) && $offset != 0) {
                $response['status'] = 0;
                $response['message'] = 'Please enter offset';
            } else {

                $offset = ($offset * PAGINATION_LIMIT);
                $limit = PAGINATION_LIMIT;

                $query = "select app_ser.service_validity_time, online_service_cost, app_ser.id as service_id, app_ser.name as service_name, app_ser.service_image, app_ser.service_slot_duration,IF(ass.id > 0,'YES','NO') as is_associated from appointment_services as app_ser left join appointment_staff_services as ass on ass.appointment_staff_id = $staff_id and ass.appointment_service_id=app_ser.id and ass.status = 'ACTIVE' where app_ser.status = 'ACTIVE' AND app_ser.thinapp_id = $thin_app_id";
                $connection = ConnectionUtil::getConnection();
                $service_message_list = $connection->query($query);
                if ($service_message_list->num_rows) {
                    $service_list = mysqli_fetch_all($service_message_list, MYSQLI_ASSOC);
                    $found_yes_flag = false;
                    foreach ($service_list as $key => $value) {
                        $response['data']['service_list'][$key] = $value;
                        if ($found_yes_flag === false && $value['is_associated'] == 'YES') {
                            $response['data']['service_list'][$key]['is_associated'] = "YES";
                            $found_yes_flag = true;
                        } else {
                            $response['data']['service_list'][$key]['is_associated'] = "NO";
                        }
                    }

                    $response['status'] = 1;
                    $response['message'] = "Staff service list found";

                } else {
                    $response['status'] = 0;
                    $response['message'] = "No service list found";
                }

            }
            echo json_encode($response);
            die;
        } else {
            exit();
        }
    }

    public static function get_appointment_staff_address()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $staff_id = isset($data['staff_id']) ? $data['staff_id'] : "";
            $offset = isset($data['offset']) ? $data['offset'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter user id';
            } else if (empty($staff_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter staff id';
            } else if (empty($offset) && $offset != 0) {
                $response['status'] = 0;
                $response['message'] = 'Please enter offset';
            } else {

                $offset = ($offset * PAGINATION_LIMIT);
                $limit = PAGINATION_LIMIT;

                $query = "select app_add.id, app_add.place, IF(asa.id > 0,'YES','NO') as is_associated, app_add.address, IFNULL(asa.from_time,'08:00 AM') as from_time, IFNULL(asa.to_time,'08:00 PM') as to_time  from appointment_addresses as app_add left join appointment_staff_addresses as asa on asa.appointment_staff_id = $staff_id and asa.appointment_address_id=app_add.id and asa.status = 'ACTIVE' where app_add.status = 'ACTIVE' AND app_add.thinapp_id = $thin_app_id";
                $connection = ConnectionUtil::getConnection();
                $service_message_list = $connection->query($query);
                if ($service_message_list->num_rows) {
                    $service_list = mysqli_fetch_all($service_message_list, MYSQLI_ASSOC);
                    $response['status'] = 1;
                    $response['message'] = "Staff address list found";
                    $response['data']['address_list'] = $service_list;

                } else {
                    $response['status'] = 0;
                    $response['message'] = "No address list found";
                }

            }
            echo json_encode($response);
            die;
        } else {
            exit();
        }
    }


    public static function fun_get_appointment_service_list($thin_app_id, $user_id, $limit, $offset)
    {
        $connection = ConnectionUtil::getConnection();
        $query = "select app_ser.* from appointment_services as app_ser  where app_ser.status = 'ACTIVE' AND  app_ser.thinapp_id = $thin_app_id order by app_ser.id desc limit $limit offset $offset";
        $service_message_list = $connection->query($query);
        $response = array();
        $final_array = array();
        $condition_array = array();
        if ($service_message_list->num_rows) {
            $service_list = mysqli_fetch_all($service_message_list, MYSQLI_ASSOC);
            foreach ($service_list as $key => $value) {
                $final_array[$key]['id'] = $value['id'];
                $final_array[$key]['name'] = $value['name'];
                $final_array[$key]['service_amount'] = $value['service_amount'];
                $final_array[$key]['service_slot_duration'] = $value['service_slot_duration'];
                $final_array[$key]['service_validity_time'] = $value['service_validity_time'];
                $final_array[$key]['is_online_service'] = $value['is_online_service'];
                $final_array[$key]['online_service_cost'] = $value['online_service_cost'];
                $final_array[$key]['service_image'] = $value['service_image'];
            }
        }
        return $final_array;
    }

    public static function get_appointment_service_list()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $offset = isset($data['offset']) ? $data['offset'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter user id';
            } else if (empty($offset) && $offset != 0) {
                $response['status'] = 0;
                $response['message'] = 'Please enter offset';
            } else {

                $offset = ($offset * DEFAULT_ROW_FETCH);
                $limit = DEFAULT_ROW_FETCH;
                $response = $response_data = array();
                $response_data = WebservicesFunction::fun_get_appointment_service_list($thin_app_id, $user_id, $limit, $offset);
                if (!empty($response_data)) {
                    $response['status'] = 1;
                    $response['message'] = "Service list found";
                    $response['data']['service'] = $response_data;
                } else {
                    $response['status'] = 0;
                    $response['message'] = "No service list found";
                }
            }
            echo json_encode($response);
            die;
        } else {
            exit();
        }
    }

    public static function count_service_upcoming_appointment($service_id, $thinapp_id)
    {

        $connection = ConnectionUtil::getConnection();
        $query = "select count(*) as cnt from appointment_customer_staff_services as acss  where DATE(acss.appointment_datetime) <  '" . date('Y-m-d') . "' AND acss.appointment_service_id = $service_id AND acss.thinapp_id = $thinapp_id";
        $channel_message_list = $connection->query($query);
        $row = mysqli_fetch_assoc($channel_message_list);
        return $row['cnt'];

    }

    public static function fun_view_appointment_service($thin_app_id, $service_id, $user_id)
    {
        $connection = ConnectionUtil::getConnection();
        $query = "select * from appointment_services as app_ser where app_ser.id=$service_id AND app_ser.status = 'ACTIVE' AND  app_ser.thinapp_id = $thin_app_id";
        $service_message_list = $connection->query($query);
        $response = array();
        $final_array = array();
        $data_array = array();
        $condition_array = $app_staff_services_ids = array();
        if ($service_message_list->num_rows) {
            $total_booking = WebservicesFunction::count_service_upcoming_appointment($service_id, $thin_app_id);
            $service_list = mysqli_fetch_assoc($service_message_list);
            $data_array['id'] = $service_list['id'];
            $data_array['name'] = $service_list['name'];
            $data_array['service_amount'] = $service_list['service_amount'];
        	$data_array['video_consulting_amount'] = $service_list['video_consulting_amount'];
            $data_array['audio_consulting_amount'] = $service_list['audio_consulting_amount'];
            $data_array['chat_consulting_amount'] = $service_list['chat_consulting_amount'];
            $data_array['service_image'] = $service_list['service_image'];
            $data_array['service_slot_duration'] = $service_list['service_slot_duration'];
            $data_array['is_online_service'] = $service_list['is_online_service'];
            $data_array['online_service_cost'] = $service_list['online_service_cost'];
            $data_array['service_validity_time'] = $service_list['service_validity_time'];
            $data_array['update_duration'] = ($total_booking == 0) ? "YES" : "NO";


            /* this code get staff list of this service*/

            $query = "select *, app_st_ser.id as app_st_id from appointment_staff_services as app_st_ser join appointment_staffs as app_staff on app_staff.id = app_st_ser.appointment_staff_id where app_st_ser.status='ACTIVE' AND  app_st_ser.appointment_service_id = $service_id";
            $service_message_list = $connection->query($query);
            if ($service_message_list->num_rows) {
                $data_array['staff_count'] = $service_message_list->num_rows;
                $service_list = mysqli_fetch_all($service_message_list, MYSQLI_ASSOC);
                foreach ($service_list as $key => $staff_list) {
                    $data_array['staff_list'][$key]['id'] = $staff_list['id'];
                    $data_array['staff_list'][$key]['name'] = $staff_list['name'];
                    $data_array['staff_list'][$key]['profile_photo'] = $staff_list['profile_photo'];
                    $data_array['staff_list'][$key]['appointment_staff_service_id'] = $staff_list['app_st_id'];
                    $data_array['staff_list'][$key]['appointment_staff_id'] = $staff_list['appointment_staff_id'];
                    $data_array['staff_list'][$key]['appointment_service_id'] = $staff_list['appointment_service_id'];
                }
            } else {
                $data_array['staff_count'] = 0;
                $data_array['staff_list'][0]['id'] = 0;
                $data_array['staff_list'][0]['appointment_staff_service_id'] = 0;
                $data_array['staff_list'][0]['appointment_staff_id'] = 0;
                $data_array['staff_list'][0]['appointment_service_id'] = 0;
                $data_array['staff_list'][0]['name'] = "";
                $data_array['staff_list'][0]['profile_photo'] = "";
            }

            /* THIS CODE GET CATEGORY LIST ASSOCIATED WITH THIS SERVER*/

            $query = "select *, app_cat.id as cat_id from appointment_category_services as app_cat_ser join appointment_categories as app_cat on app_cat.id = app_cat_ser.appointment_category_id where app_cat_ser.status='ACTIVE' AND app_cat_ser.appointment_service_id = $service_id";
            $service_message_list = $connection->query($query);
            if ($service_message_list->num_rows) {
                $data_array['category_count'] = $service_message_list->num_rows;
                $service_list = mysqli_fetch_all($service_message_list, MYSQLI_ASSOC);
                foreach ($service_list as $key => $staff_list) {
                    $category[$key]['id'] = (int)$staff_list['cat_id'];
                    $category[$key]['name'] = $staff_list['name'];
                }
                $data_array['category_list'] = $category;
            } else {
                $data_array['category_count'] = 0;
                $data_array['category_list'][0]['id'] = 0;
                $data_array['category_list'][0]['name'] = "";
            }


            /* THIS CODE GET ADDRESS LIST ASSOCIATED WITH THIS SERVICE*/

            $query = "select app_add.place, app_add.address, app_add.id from  appointment_addresses as app_add where app_add.id IN ( select asa.appointment_address_id from appointment_service_addresses as asa where asa.appointment_service_id = $service_id and asa.status ='ACTIVE' ) AND app_add.status='ACTIVE' AND  app_add.thinapp_id = $thin_app_id ORDER BY app_add.place asc";
            $subscriber = $connection->query($query);
            if ($subscriber->num_rows) {
                $channels_arr = array();
                $data_array['address_count'] = $subscriber->num_rows;
                $subscriber = mysqli_fetch_all($subscriber, MYSQLI_ASSOC);

                foreach ($subscriber as $key => $channel_data) {
                    $channels_arr[$key]['address_id'] = $channel_data['id'];
                    $channels_arr[$key]['place'] = $channel_data['place'];
                    $channels_arr[$key]['address'] = $channel_data['address'];
                }
                $data_array['address_list'] = $channels_arr;
            } else {
                $data_array['address_count'] = 0;
                $data_array[0]['address_id'] = 0;
                $data_array[0]['place'] = '';
                $data_array[0]['address'] = '';
            }


        } else {
            return false;
        }

        return $data_array;
    }

    public static function view_appointment_service()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $service_id = isset($data['service_id']) ? $data['service_id'] : "";


            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter user id';
            } else if (empty($service_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter service id';
            } else {


                $limit = PAGINATION_LIMIT;
                $response = $response_data = array();
                $response_data = WebservicesFunction::fun_view_appointment_service($thin_app_id, $service_id, $user_id);
                if (!empty($response_data)) {
                    $response['status'] = 1;
                    $response['message'] = "Service list found";
                    $response['data']['service_detail'] = $response_data;
                } else {
                    $response['status'] = 0;
                    $response['message'] = "No service list found";
                }
            }
            echo json_encode($response);
            die;
        } else {
            exit();
        }
    }

    public static function unassigned_service_category_list()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $service_id = isset($data['service_id']) ? $data['service_id'] : "";
            $offset = isset($data['offset']) ? $data['offset'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter user id';
            } else if (empty($offset) && $offset != 0) {
                $response['status'] = 0;
                $response['message'] = 'Please enter offset';
            } else if (empty($service_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter service id';
            } else {

                $offset = ($offset * PAGINATION_LIMIT);
                $limit = PAGINATION_LIMIT;
                $response = $response_data = array();
                $connection = ConnectionUtil::getConnection();
                $query = "select ac.name,ac.id, ac.image, ( select acs.id from appointment_category_services as acs where acs.appointment_service_id = $service_id AND ac.id = acs.appointment_category_id AND acs.status ='ACTIVE' AND acs.thinapp_id = $thin_app_id limit 1 ) as assoceste_id from appointment_categories as ac where ac.status = 'ACTIVE' and ac.thinapp_id=$thin_app_id limit $limit offset $offset";
                $service_message_list = $connection->query($query);
                $final_array = array();
                if ($service_message_list->num_rows) {
                    $service_list = mysqli_fetch_all($service_message_list, MYSQLI_ASSOC);
                    foreach ($service_list as $key => $value) {
                        $final_array[$key]['id'] = $value['id'];
                        $final_array[$key]['name'] = $value['name'];
                        $final_array[$key]['image'] = $value['image'];
                        $final_array[$key]['is_associated'] = ($value['assoceste_id'] > 0) ? "YES" : "NO";
                    }
                    $response['status'] = 1;
                    $response['message'] = "Category list found";
                    $response['data']['category_list'] = $final_array;
                } else {
                    $response['status'] = 0;
                    $response['message'] = "No category list found";
                }

            }
            echo json_encode($response);
            die;
        } else {
            exit();
        }
    }

    public static function fun_get_appointment_category_list($thin_app_id, $limit, $offset)
    {
        $connection = ConnectionUtil::getConnection();
        $query = "select app_cat.name,app_cat.image, app_cat.id from appointment_categories as app_cat  where app_cat.status = 'ACTIVE' AND app_cat.thinapp_id = $thin_app_id order by app_cat.id desc limit $limit offset $offset";
        $service_message_list = $connection->query($query);
        $final_array = array();
        if ($service_message_list->num_rows) {
            $final_array = mysqli_fetch_all($service_message_list, MYSQLI_ASSOC);
            /*foreach ($service_list as $key => $value) {
                $final_array[$key]['id'] = $value['id'];
                $final_array[$key]['name'] = $value['name'];
                $final_array[$key]['image'] = $value['image'];
            }*/
        }
        return $final_array;
    }

    public static function get_appointment_category_list()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $offset = isset($data['offset']) ? $data['offset'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter user id';
            } else if (empty($offset) && $offset != 0) {
                $response['status'] = 0;
                $response['message'] = 'Please enter offset';
            } else {

                $offset = ($offset * DEFAULT_ROW_FETCH);
                $limit = DEFAULT_ROW_FETCH;
                $response = $response_data = array();
                $response_data = WebservicesFunction::fun_get_appointment_category_list($thin_app_id, $limit, $offset);
                if (!empty($response_data)) {
                    $response['status'] = 1;
                    $response['message'] = "Category list found";
                    $response['data']['category_list'] = $response_data;
                } else {
                    $response['status'] = 0;
                    $response['message'] = "No category list found";
                }
            }
            echo json_encode($response);
            die;
        } else {
            exit();
        }
    }

    public static function fun_get_appointment_service_list_by_category($thin_app_id, $limit, $offset)
    {
        $connection = ConnectionUtil::getConnection();
        $query = "select ac.name,ac.id from appointment_category_services as acs join appointment_categories as ac on acs.appointment_category_id=ac.id where acs.status = 'ACTIVE' AND acs.thinapp_id = $thin_app_id order by acs.id desc limit $limit offset $offset";
        $service_message_list = $connection->query($query);
        $final_array = array();
        if ($service_message_list->num_rows) {
            $service_list = mysqli_fetch_all($service_message_list, MYSQLI_ASSOC);
            foreach ($service_list as $key => $value) {
                $final_array[$key]['id'] = $value['id'];
                $final_array[$key]['name'] = $value['name'];
            }
        }
        return $final_array;
    }

    public static function get_appointment_service_list_by_category()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $offset = isset($data['offset']) ? $data['offset'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter user id';
            } else if (empty($offset) && $offset != 0) {
                $response['status'] = 0;
                $response['message'] = 'Please enter offset';
            } else {

                $offset = ($offset * PAGINATION_LIMIT);
                $limit = PAGINATION_LIMIT;
                $response = $response_data = array();
                $response_data = WebservicesFunction::fun_get_appointment_service_list_by_category($thin_app_id, $limit, $offset);
                if (!empty($response_data)) {
                    $response['status'] = 1;
                    $response['message'] = "Category list found";
                    $response['data']['category_list'] = $response_data;
                } else {
                    $response['status'] = 0;
                    $response['message'] = "No category list found";
                }
            }
            echo json_encode($response);
            die;
        } else {
            exit();
        }
    }

    public static function get_unassigned_address_list_by_service()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $service_id = isset($data['service_id']) ? $data['service_id'] : "";
            $offset = isset($data['offset']) ? $data['offset'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter user id';
            } else if (empty($service_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter service id';
            } else if (empty($offset) && $offset != 0) {
                $response['status'] = 0;
                $response['message'] = 'Please enter offset';
            } else {

                $offset = ($offset * PAGINATION_LIMIT);
                $limit = PAGINATION_LIMIT;
                $response = $response_data = array();
                $connection = ConnectionUtil::getConnection();
                $query = "select app_add.place, app_add.address, app_add.id, ( select asa.id from appointment_service_addresses as asa where asa.appointment_address_id = app_add.id  and asa.appointment_service_id =$service_id and asa.status ='ACTIVE' limit 1 ) as assing_address_id  from  appointment_addresses as app_add where app_add.status='ACTIVE' AND  app_add.thinapp_id = $thin_app_id ORDER BY app_add.place asc limit $limit offset $offset";
                $subscriber = $connection->query($query);
                if ($subscriber->num_rows) {
                    $channels_arr = array();
                    $subscriber = mysqli_fetch_all($subscriber, MYSQLI_ASSOC);
                    foreach ($subscriber as $key => $channel_data) {
                        $channels_arr[$key]['address_id'] = $channel_data['id'];
                        $channels_arr[$key]['place'] = ucfirst(strtolower($channel_data['place']));
                        $channels_arr[$key]['address'] = $channel_data['address'];
                        $channels_arr[$key]['is_associated'] = ($channel_data['assing_address_id'] > 0) ? "YES" : "NO";
                    }
                    $response['status'] = 1;
                    $response['message'] = "Address list found";
                    $response['data']['address_list'] = $channels_arr;
                } else {
                    $response['status'] = 0;
                    $response['message'] = "No address list found";
                }
            }
            echo json_encode($response);
            die;
        } else {
            exit();
        }
    }

    public static function get_unassigned_service_list_for_category()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $category_id = isset($data['category_id']) ? $data['category_id'] : "";
            $offset = isset($data['offset']) ? $data['offset'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter user id';
            } else if (empty($category_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter category id';
            } else if (empty($offset) && $offset != 0) {
                $response['status'] = 0;
                $response['message'] = 'Please enter offset';
            } else {

                $offset = ($offset * PAGINATION_LIMIT);
                $limit = PAGINATION_LIMIT;
                $response = $response_data = array();
                $connection = ConnectionUtil::getConnection();
                $query = "select app_ser.name, app_ser.service_image,app_ser.id from  appointment_services as app_ser where  app_ser.status = 'ACTIVE' and app_ser.thinapp_id=$thin_app_id and  app_ser.id NOT IN ( select acs.appointment_service_id from appointment_category_services as acs where acs.appointment_category_id = $category_id and acs.appointment_service_id = app_ser.id and  acs.status ='ACTIVE' ) ORDER BY app_ser.name asc limit $limit offset $offset";
                $subscriber = $connection->query($query);
                if ($subscriber->num_rows) {
                    $channels_arr = array();
                    $subscriber = mysqli_fetch_all($subscriber, MYSQLI_ASSOC);
                    foreach ($subscriber as $key => $channel_data) {
                        $channels_arr[$key]['address_id'] = $channel_data['id'];
                        $channels_arr[$key]['name'] = $channel_data['name'];
                        $channels_arr[$key]['service_image'] = $channel_data['service_image'];
                    }
                    $response['status'] = 1;
                    $response['message'] = "Service list found";
                    $response['data']['service_list'] = $channels_arr;
                } else {
                    $response['status'] = 0;
                    $response['message'] = "No service list found";
                }
            }
            echo json_encode($response);
            die;
        } else {
            exit();
        }
    }


    public static function fun_get_appointment_customer_list($thin_app_id, $user_id, $limit, $offset)
    {
        $connection = ConnectionUtil::getConnection();
        $query = "select cus.id, cus.first_name, cus.last_name, cus.email, cus.profile_photo, cus.mobile, cus.address from appointment_customers as cus  where cus.status = 'ACTIVE'  AND cus.thinapp_id = $thin_app_id order by cus.id desc limit $limit offset $offset";
        $service_message_list = $connection->query($query);
        $response = array();
        $final_array = array();
        $condition_array = array();
        if ($service_message_list->num_rows) {
            $service_list = mysqli_fetch_all($service_message_list, MYSQLI_ASSOC);
            foreach ($service_list as $key => $value) {
                $final_array[$key]['id'] = $value['id'];
                $final_array[$key]['customer_name'] = $value['first_name'] . ' ' . $value['last_name'];
                $final_array[$key]['email'] = $value['email'];
                $final_array[$key]['profile_photo'] = $value['profile_photo'];
                $final_array[$key]['mobile'] = $value['mobile'];
                $final_array[$key]['address'] = $value['address'];
            }
        }
        return $final_array;
    }

    public static function get_appointment_customer_list()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $offset = isset($data['offset']) ? $data['offset'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter user id';
            } else if (empty($offset) && $offset != 0) {
                $response['status'] = 0;
                $response['message'] = 'Please enter offset';
            } else {

                $offset = ($offset * PAGINATION_LIMIT);
                $limit = PAGINATION_LIMIT;
                $response = $response_data = array();
                $response_data = WebservicesFunction::fun_get_appointment_customer_list($thin_app_id, $user_id, $limit, $offset);
                if (!empty($response_data)) {
                    $response['status'] = 1;
                    $response['message'] = "Customer list found";
                    $response['data']['customer'] = $response_data;
                } else {
                    $response['status'] = 0;
                    $response['message'] = "No customer list found";

                }
            }
            echo json_encode($response);
            die;
        } else {
            exit();
        }
    }

    public static function view_appointment_category()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $category_id = isset($data['category_id']) ? $data['category_id'] : "";


            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter user id';
            } else if (empty($category_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter category id';
            } else {

                $connection = ConnectionUtil::getConnection();
                $query = "select *,( select count(acs.id) from appointment_category_services as acs where acs.appointment_category_id = $category_id and acs.thinapp_id=$thin_app_id and acs.status='ACTIVE' ) as service_cnt from appointment_categories as cat where cat.id=$category_id AND cat.status = 'ACTIVE' AND cat.thinapp_id = $thin_app_id";
                $service_message_list = $connection->query($query);
                $response = array();
                if ($service_message_list->num_rows) {
                    $service_list = mysqli_fetch_assoc($service_message_list);
                    $response_data['id'] = $service_list['id'];
                    $response_data['name'] = $service_list['name'];
                    $response_data['image'] = $service_list['image'];
                    $response_data['has_service'] = ($service_list['service_cnt'] > 0) ? "YES" : "NO";
                    $response['status'] = 1;
                    $response['message'] = "Category detail found";
                    $response['data']['category_detail'] = $response_data;

                } else {
                    $response['status'] = 0;
                    $response['message'] = "Category not found";
                }
            }
            echo json_encode($response);
            die;
        } else {
            exit();
        }
    }

    public static function get_all_service_list_for_category()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $category_id = isset($data['category_id']) ? $data['category_id'] : "";
            $offset = isset($data['offset']) ? $data['offset'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter user id';
            } else if (empty($category_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter category id';
            } else if (empty($offset) && $offset != 0) {
                $response['status'] = 0;
                $response['message'] = 'Please enter offset';
            } else {

                $offset = ($offset * PAGINATION_LIMIT);
                $limit = PAGINATION_LIMIT;
                $response = $response_data = array();
                $connection = ConnectionUtil::getConnection();
                $query = "select app_ser.name, app_ser.service_image,app_ser.id, ( select acs.appointment_service_id from appointment_category_services as acs where acs.appointment_category_id = $category_id and acs.appointment_service_id = app_ser.id and  acs.status ='ACTIVE' ) as is_assign from  appointment_services as app_ser where  app_ser.thinapp_id=$thin_app_id and app_ser.status = 'ACTIVE' ORDER BY app_ser.name asc limit $limit offset $offset";
                $subscriber = $connection->query($query);
                if ($subscriber->num_rows) {
                    $channels_arr = array();
                    $subscriber = mysqli_fetch_all($subscriber, MYSQLI_ASSOC);
                    foreach ($subscriber as $key => $channel_data) {
                        $channels_arr[$key]['address_id'] = $channel_data['id'];
                        $channels_arr[$key]['name'] = $channel_data['name'];
                        $channels_arr[$key]['service_image'] = $channel_data['service_image'];
                        $channels_arr[$key]['is_linked'] = !empty($channel_data['is_assign']) ? "YES" : "NO";
                    }
                    $response['status'] = 1;
                    $response['message'] = "Service list found";
                    $response['data']['service_list'] = $channels_arr;
                } else {
                    $response['status'] = 0;
                    $response['message'] = "No service list found";
                }
            }
            echo json_encode($response);
            die;
        } else {
            exit();
        }
    }

    public static function view_customer_detail()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $customer_id = isset($data['customer_id']) ? $data['customer_id'] : "";
            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter user id';
            } else if (empty($customer_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter customer id';
            } else {

                $connection = ConnectionUtil::getConnection();
                $query = "select * from appointment_customers as cus where cus.id=$customer_id AND cus.status = 'ACTIVE' AND cus.thinapp_id = $thin_app_id";
                $service_message_list = $connection->query($query);
                $response = array();
                if ($service_message_list->num_rows) {
                    $service_list = mysqli_fetch_assoc($service_message_list);
                    $response_data['id'] = $service_list['id'];
                    $response_data['first_name'] = $service_list['first_name'];
                    $response_data['last_name'] = $service_list['last_name'];
                    $response_data['email'] = $service_list['email'];
                    $response_data['profile_photo'] = $service_list['profile_photo'];
                    $response_data['mobile'] = str_replace($service_list['country_code'], "", $service_list['mobile']);
                    $response_data['country_code'] = $service_list['country_code'];
                    $response_data['address'] = $service_list['address'];
                    $response['status'] = 1;
                    $response['message'] = "Customer detail found";
                    $response['data']['customer_detail'] = $response_data;
                } else {
                    $response['status'] = 0;
                    $response['message'] = "Customer not found";
                }
            }
            echo json_encode($response);
            die;
        } else {
            exit();
        }
    }


    public static function get_staff_id_by_mobile($mobile, $thin_app_id)
    {
        $query = "select id from appointment_staffs  where  mobile = '$mobile' and thinapp_id = $thin_app_id  and staff_type = 'DOCTOR' and status = 'ACTIVE' limit 1";
        $connection = ConnectionUtil::getConnection();
        $service_message_list = $connection->query($query);
        if ($service_message_list->num_rows) {
            $staff_data = mysqli_fetch_assoc($service_message_list);
            return $staff_data['id'];
        } else {
            return 0;
        }
    }


    public static function get_channel_by_id($channel_id)
    {
        $query = $query = "select * from channels  where  id = $channel_id";
        $connection = ConnectionUtil::getConnection();
        $service_message_list = $connection->query($query);
        if ($service_message_list->num_rows) {
            $staff_data = mysqli_fetch_assoc($service_message_list);
            return $staff_data;
        } else {
            return false;
        }
    }

    public static function get_service_duration_by_id($service_id)
    {
        $query = $query = "select service_slot_duration from appointment_services  where  id = $service_id";
        $connection = ConnectionUtil::getConnection();
        $service_message_list = $connection->query($query);
        if ($service_message_list->num_rows) {
            $staff_data = mysqli_fetch_assoc($service_message_list);
            return $staff_data['service_slot_duration'];
        } else {
            return 0;
        }
    }


    public static function get_user_data_by_id($user_id)
    {
        $query = $query = "select * from users  where  id = $user_id";
        $connection = ConnectionUtil::getConnection();
        $service_message_list = $connection->query($query);
        if ($service_message_list->num_rows) {
            $staff_data = mysqli_fetch_assoc($service_message_list);
            return $staff_data;
        } else {
            return 0;
        }
    }

    public static function get_user_data_by_mobile($mobile, $thinapp_id)
    {
        $query = $query = "select * from users  where  mobile = $mobile and thinapp_id = $thinapp_id";
        $connection = ConnectionUtil::getConnection();
        $service_message_list = $connection->query($query);
        if ($service_message_list->num_rows) {
            $staff_data = mysqli_fetch_assoc($service_message_list);
            return $staff_data;
        } else {
            return 0;
        }
    }


    public static function get_service_data_by_id($service_id)
    {
        $query = $query = "select * from appointment_services  where  id = $service_id";
        $connection = ConnectionUtil::getConnection();
        $service_message_list = $connection->query($query);
        if ($service_message_list->num_rows) {
            $staff_data = mysqli_fetch_assoc($service_message_list);
            return $staff_data;
        } else {
            return false;
        }
    }


    public static function get_appointment_all_data_id($appointment_id)
    {
        //$query = "select acss.appointment_datetime, acss.appointment_staff_id as doctor_id, acss.queue_number, acss.appointment_customer_id as customer_id, app_sta.name as staff_name, acss.amount as service_amount, acss.appointment_address_id as address_id, app_add.address as appoinment_address, t.name as app_name, app_ser.name as app_ser_name, app_sta.mobile as staff_mobile, CONCAT_WS(' ', app_cus.first_name, app_cus.last_name) as cus_name, app_cus.mobile as customer_mobile,  app_cus.user_id as customer_user_id, app_sta.*, app_sta.name as staff_name, app_sta.user_id as staff_user_id, app_cus.*, acss.*, app_ser.*, app_ser.name as service_name from appointment_customer_staff_services as acss join  appointment_staffs as app_sta on acss.appointment_staff_id = app_sta.id  join  appointment_customers as app_cus on app_cus.id = acss.appointment_customer_id join  appointment_services as app_ser on acss.appointment_service_id = app_ser.id join thinapps as t on acss.thinapp_id = t.id join appointment_addresses as app_add on acss.appointment_address_id = app_add.id  where acss.id = $appointment_id limit 1";
        $query = "select IFNULL(app_cus.uhid,c.uhid) AS uhid, acss.emergency_appointment, acss.has_token, app_sta.show_appointment_time, app_sta.show_appointment_token, acss.id as appointment_id, acss.appointment_service_id, acss.appointment_customer_id, acss.children_id, acss.status as appointment_status, acss.appointment_datetime, acss.appointment_staff_id as doctor_id, acss.queue_number, IF(acss.appointment_customer_id=0,acss.children_id, acss.appointment_customer_id) as customer_id, app_sta.name as staff_name, acss.amount as service_amount, acss.appointment_address_id as address_id, app_add.address as appoinment_address, t.name as app_name, app_ser.name as app_ser_name, app_sta.mobile as staff_mobile, IFNULL(app_cus.first_name,c.child_name) as cus_name, IFNULL(app_cus.mobile,c.mobile) as customer_mobile,  IFNULL(app_cus.user_id,c.user_id) as customer_user_id, app_sta.*, app_sta.name as staff_name, app_sta.user_id as staff_user_id, app_cus.*, acss.*, app_ser.*, app_ser.name as service_name from appointment_customer_staff_services as acss join  appointment_staffs as app_sta on acss.appointment_staff_id = app_sta.id  left join  appointment_customers as app_cus on app_cus.id = acss.appointment_customer_id left join childrens as c on c.id = acss.children_id join  appointment_services as app_ser on acss.appointment_service_id = app_ser.id join thinapps as t on acss.thinapp_id = t.id join appointment_addresses as app_add on acss.appointment_address_id = app_add.id  where acss.id = $appointment_id limit 1";
        
        $connection = ConnectionUtil::getConnection();
        $service_message_list = $connection->query($query);
        if ($service_message_list->num_rows) {
            $staff_data = mysqli_fetch_assoc($service_message_list);
            return $staff_data;
        } else {
            return false;
        }
    }

    public static function get_staff_data_by_id($staff_id)
    {
        $query = $query = "select * from appointment_staffs  where  id = $staff_id";
        $connection = ConnectionUtil::getConnection();
        $service_message_list = $connection->query($query);
        if ($service_message_list->num_rows) {
            $staff_data = mysqli_fetch_assoc($service_message_list);
            return $staff_data;
        } else {
            return false;
        }
    }

    public static function get_share_data_by_id($share_id)
    {
        $query = "select ds.share_to_user_id, ds.share_from_user_id, df.id as path, df.folder_name as name, ds.shared_object, ds.share_with_mobile, ds.share_from_mobile from drive_shares as ds join drive_folders as df on ds.drive_folder_id = df.id where ds.id = $share_id UNION ALL select ds.share_to_user_id, ds.share_from_user_id, df.file_path as path, df.file_name as name , ds.shared_object, ds.share_with_mobile, ds.share_from_mobile from drive_shares as ds join drive_files as df on ds.drive_file_id = df.id where ds.id = $share_id";
        $connection = ConnectionUtil::getConnection();
        $service_message_list = $connection->query($query);
        if ($service_message_list->num_rows) {
            $staff_data = mysqli_fetch_assoc($service_message_list);
            return $staff_data;
        } else {
            return false;
        }
    }

    public static function get_users_token($ids_array)
    {

        $ids_array = implode(",", $ids_array);
        $query = $query = "select firebase_token from users where id IN ($ids_array) and firebase_token !='' ";
        $connection = ConnectionUtil::getConnection();
        $service_message_list = $connection->query($query);
        if ($service_message_list->num_rows) {
            $service_message_list = mysqli_fetch_all($service_message_list, MYSQLI_ASSOC);
            $token = array_column($service_message_list, 'firebase_token');
            return $token;
        } else {
            return false;
        }
    }


    public static function get_appointment_data_by_id($appointment_id)
    {
        $query = $query = "select * from appointment_customer_staff_services  where  id = $appointment_id and ( status='CONFIRM' OR status='RESCHEDULE' ) and payment_status = 'SUCCESS'";
        $connection = ConnectionUtil::getConnection();
        $service_message_list = $connection->query($query);
        if ($service_message_list->num_rows) {
            $staff_data = mysqli_fetch_assoc($service_message_list);
            return $staff_data;
        } else {
            return false;
        }
    }

    public static function is_appointment($appointment_id)
    {
        $query = $query = "select * from appointment_customer_staff_services  where  id = $appointment_id";
        $connection = ConnectionUtil::getConnection();
        $service_message_list = $connection->query($query);
        if ($service_message_list->num_rows) {
            return true;
        } else {
            return false;
        }
    }


    public static function get_appointment_dashboard()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter user id';
            } else {

                $query = $query = "select mobile,role_id from users  where id=$user_id and thinapp_id = $thin_app_id  and status = 'Y' limit 1";
                $connection = ConnectionUtil::getConnection();
                $service_message_list = $connection->query($query);
                if ($service_message_list->num_rows) {
                    $user_data = mysqli_fetch_assoc($service_message_list);
                    $staff_id = WebservicesFunction::get_staff_id_by_mobile($user_data['mobile'], $thin_app_id);
                    $role_id = $user_data['role_id'];
                    if ($role_id == 1) {
                        if ($staff_id > 0) {
                            $response_data['type'] = 'STAFF';
                        } else {
                            $response_data['type'] = 'USER';
                        }
                        $response_data['staff_id'] = $staff_id;
                    }
                    if ($role_id == 5) {
                        $response_data['type'] = 'ADMIN';
                        $response_data['staff_id'] = $staff_id;
                    }
                    $response['status'] = 1;
                    $response['message'] = "Dashboard data found";
                    $response['data']['dashboard_detail'] = $response_data;

                } else {
                    $response['status'] = 0;
                    $response['message'] = "Invalid user";
                }


            }
            echo json_encode($response);
            die;
        } else {
            exit();
        }
    }

    public static function get_services_list_for_staff_schedule()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $staff_id = isset($data['staff_id']) ? $data['staff_id'] : "";
            $role_id = isset($data['role_id']) ? $data['role_id'] : "";
            $offset = isset($data['offset']) ? $data['offset'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter mobile number';
            } else if (empty($role_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter role id';
            } else if (empty($staff_id) && $staff_id != 0) {
                $response['status'] = 0;
                $response['message'] = 'Please enter staff id';
            } else if (empty($offset) && $offset != 0) {
                $response['status'] = 0;
                $response['message'] = 'Please enter offset';
            } else {

                $offset = ($offset * PAGINATION_LIMIT);
                $limit = PAGINATION_LIMIT;


                if ($staff_id > 0) {

                    $connection = ConnectionUtil::getConnection();
                    $query = "select app_ser.id, app_ser.name, app_ser.service_image, app_ser.service_slot_duration  from appointment_services as app_ser where  app_ser.id IN ( select ass.appointment_service_id from appointment_staff_services as ass where ass.thinapp_id = $thin_app_id  and ass.status = 'ACTIVE' and ass.appointment_staff_id = $staff_id ) AND  app_ser.status = 'ACTIVE' AND app_ser.thinapp_id = $thin_app_id  limit $limit offset $offset";
                    $service_message_list = $connection->query($query);
                    if ($service_message_list->num_rows) {
                        $service_list = mysqli_fetch_all($service_message_list, MYSQLI_ASSOC);
                        foreach ($service_list as $key => $staff_list) {
                            /* START THIS CODE WORK FOR GET BREAKD LIST OF STAFF*/
                            $data_array[$key]['service_id'] = $staff_list['id'];
                            $data_array[$key]['service_name'] = $staff_list['name'];
                            $data_array[$key]['service_image'] = $staff_list['service_image'];
                            $data_array[$key]['service_slot_duration'] = $staff_list['service_slot_duration'];
                        }
                        $response['status'] = 1;
                        $response['message'] = "Staff service list found";
                        $response['data']['service_list'] = $data_array;

                    } else {
                        $response['status'] = 0;
                        $response['message'] = "No service list found";
                    }
                } else {
                    $response['status'] = 0;
                    $response['message'] = "Invalid staff";
                }


            }
            echo json_encode($response);
            die;
        } else {
            exit();
        }
    }

    public static function appointment_get_staff_schedule()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $service_id = isset($data['service_id']) ? $data['service_id'] : "";
            $staff_id = isset($data['staff_id']) ? $data['staff_id'] : "";
            $schedule_date = isset($data['schedule_date']) ? $data['schedule_date'] : "";
            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter mobile number';
            } else if (empty($service_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter service id';
            } else if (empty($staff_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter staff id';
            } else if (empty($schedule_date)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter schedule date';
            } else {

                $connection = ConnectionUtil::getConnection();
                if ($staff_id > 0) {
                    $query = "select ser.service_slot_duration from appointment_services as ser where ser.id=$service_id AND ser.status = 'ACTIVE' AND ser.thinapp_id = $thin_app_id";
                    $service_message_list = $connection->query($query);
                    $response = array();
                    if ($service_message_list->num_rows) {
                        $service_list = mysqli_fetch_assoc($service_message_list);
                        $duration = $service_list['service_slot_duration'];
                        $day_number = date('N', strtotime($schedule_date));
                        $schedule_date = date('Y-m-d', strtotime($schedule_date));
                        $address_id = 1;
                        $response_data = WebservicesFunction::get_booking_slots($schedule_date, $staff_id, $duration, $thin_app_id, $address_id);
                        if (!empty($response_data)) {

                            /* get booked appoinment ids start */
                            $booking_array = array();
                            if (in_array("BOOKED", $response_data)) {
                                $query = "select acss.slot_time, acss.id as appt_id, app_cus.first_name, app_cus.last_name, app_cus.mobile, app_cus.country_code, app_cus.address, app_cus.profile_photo from appointment_customer_staff_services as acss join appointment_customers app_cus on app_cus.id = acss.appointment_customer_id where  acss.appointment_staff_id=$staff_id AND DATE(acss.appointment_datetime) = '$schedule_date' and ( acss.status = 'CONFIRM' OR acss.status = 'RESCHEDULE' ) and acss.payment_status = 'SUCCESS' limit " . MAX_LIMIT;
                                $booking = $connection->query($query);
                                if ($booking->num_rows) {
                                    $booking = mysqli_fetch_all($booking, MYSQLI_ASSOC);
                                    foreach ($booking as $key => $value) {
                                        $booking_array[$value['slot_time']]['appointment_id'] = (int)$value['appt_id'];
                                        $booking_array[$value['slot_time']]['slot_time'] = $value['slot_time'];
                                        $last_name = !empty($value['first_name']) ? " " . $value['last_name'] : "";
                                        $booking_array[$value['slot_time']]['name'] = $value['first_name'] . $last_name;
                                        $booking_array[$value['slot_time']]['mobile'] = $value['mobile'];
                                        $booking_array[$value['slot_time']]['profile_photo'] = $value['profile_photo'];
                                        $booking_array[$value['slot_time']]['address'] = $value['address'];
                                    }
                                }
                            }
                            /* get booked appointment ids end */


                            $response['status'] = 1;
                            $response['message'] = "Schedule list found";
                            $data_array = array();
                            $counter = 0;
                            foreach ($response_data as $key => $value) {

                                if (array_key_exists($key, $booking_array)) {
                                    $data_array[$counter] = $booking_array[$key];
                                } else {
                                    $data_array[$counter]['appointment_id'] = 0;
                                    $data_array[$counter]['slot_time'] = "";
                                    $data_array[$counter]['name'] = "";
                                    $data_array[$counter]['mobile'] = "";
                                    $data_array[$counter]['profile_photo'] = "";
                                    $data_array[$counter]['address'] = "";
                                }
                                $data_array[$counter]['time'] = $key;
                                $data_array[$counter]['flag'] = $value;
                                $data_array[$counter]['id'] = $counter;
                                $counter++;

                            }
                            $response['data']['schedule_detail'] = $data_array;
                        } else {
                            $response['status'] = 0;
                            $response['message'] = "No slot available";
                        }

                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Invalid service";
                    }
                } else {
                    $response['status'] = 0;
                    $response['message'] = "Invalid staff";
                }

            }

            echo json_encode($response);
            die;

        } else {
            exit();
        }
    }

    public static function get_booking_slots($booking_date, $staff_id, $duration, $thin_app_id, $address_id, $break_flag = false)
    {
        $connection = ConnectionUtil::getConnection();
        $booking_date = date('Y-m-d', strtotime($booking_date));
        $day_time_id = date('N', strtotime($booking_date));
        $file_name = "staff_day_time_id".$staff_id."_".$day_time_id;
        $staff_day_time = Custom::getStaffDayTimeData($staff_id,$day_time_id);
        $final_array = array();
        if (!empty($staff_day_time)) {
            

            /* get break slots start */
            $breaks_array = array();
           
            $breaks = Custom::appointmentStaffBreakSlots($staff_id,$day_time_id);
            if (!empty($breaks)) {
                
                foreach ($breaks as $key => $value) {
                    $breaks_array[$key]['time_from'] = $value['time_from'];
                    $breaks_array[$key]['time_to'] = $value['time_to'];
                }

            }

            /* get break slots end */


            /* get appointment booked slots start */
            $booking_array = array();
            $query = "select acss.slot_time from appointment_customer_staff_services as acss where  acss.appointment_address_id=$address_id and acss.appointment_staff_id=$staff_id AND DATE(acss.appointment_datetime) = '$booking_date' and ( ( acss.status IN('CONFIRM','RESCHEDULE','NEW','CLOSED') and acss.delete_status = 'NONE')  OR ( acss.status = 'REFUND' AND acss.refund_amount != acss.amount )) and has_token = 'YES' and acss.sub_token = 'NO' limit " . MAX_LIMIT;
            $booking = $connection->query($query);
            if ($booking->num_rows) {
                $booking = mysqli_fetch_all($booking, MYSQLI_ASSOC);
                $booking_array = array_column($booking, 'slot_time');
            }
            /* get appointment booked slots end */

            $status_array = array('AVAILABLE', 'BOOKED', 'BREAK', 'EXPIRED', 'BLOCKED');
            $from_time = strtotime(date('H:i', strtotime($staff_day_time['time_from'])));
            $end_time = strtotime(date('H:i', strtotime($staff_day_time['time_to'])));
            $sloat_array[$staff_day_time['time_from']] = $staff_day_time['time_from'];
            $check_date = $booking_date . " " . $staff_day_time['time_from'];
            if (strtotime(date('Y-m-d h:i A')) < strtotime($check_date)) {
                $final_array[$staff_day_time['time_from']] = $status_array[0];
            } else {
                $final_array[$staff_day_time['time_from']] = $status_array[3];
            }


            for ($time = $from_time; $time < $end_time;) {
                $original_time = date('H:i', $time);
                $inc_time = date('h:i A', strtotime($original_time . " + " . $duration));
                $new_time = $booking_date . ' ' . date('H:i', $time);
                $time = strtotime(date('Y-m-d H:i', strtotime($new_time . " + " . $duration)));
                $end_time = strtotime(date('Y-m-d H:i', strtotime($booking_date . ' ' . date('H:i', $end_time))));
                if ($time <= $end_time) {
                    $sloat_array[$inc_time] = $inc_time;
                    $check_date = $booking_date . " " . $inc_time;
                    if (strtotime(date('Y-m-d h:i A')) < strtotime($check_date)) {
                        $final_array[$inc_time] = $status_array[0];
                    } else {
                        $final_array[$inc_time] = $status_array[3];
                    }

                }
            }

			
        
            /* start break conditions work from here */
            $counter = 0;

            $break_slot = array();
            if (!empty($breaks_array)) {
                foreach ($breaks_array as $key => $value) {
                    foreach ($sloat_array as $per_key => $time) {
                        $check_date = $booking_date . " " . $per_key;

                        if (strtotime(date('Y-m-d h:i A')) < strtotime($check_date)) {
                            if (strtotime($value['time_from']) > strtotime($per_key)) {
                                if (!array_key_exists($per_key, $final_array)) {
                                    $final_array[$per_key] = $status_array[0];
                                }
                            } else if (strtotime($value['time_from']) <= strtotime($per_key) && strtotime($value['time_to']) <= strtotime($per_key)) {
                                $final_array[$per_key] = $status_array[0];

                            } else {
                                $final_array[$per_key] = $status_array[2];
                            }

                        } else {
                            if ($break_flag === true) {

                                if (strtotime($value['time_from']) <= strtotime($per_key) && strtotime($value['time_to']) > strtotime($per_key)) {
                                    $final_array[$per_key] = $status_array[2];
                                    $break_slot[] = $per_key;
                                } else {
                                    if (!in_array($per_key, $break_slot)) {
                                        $final_array[$per_key] = $status_array[3];
                                    }

                                }

                                //$final_array[$per_key] = $status_array[2];


                            } else {
                                $final_array[$per_key] = $status_array[3];
                            }

                        }
                    }
                    unset($sloat_array);
                    $sloat_array = $final_array;
                }
            }
            /* end break conditions work from here */

            /* start booked appointment conditions work from here */
            if (!empty($booking_array)) {

                /* this condition work when break are available */
                if (!empty($final_array)) {
                    foreach ($final_array as $key => $value) {
                        if (in_array($key, $booking_array)) {
                            $final_array[$key] = $status_array[1];
                        }
                    }
                } else {
                    /* this condition work when no breaks available*/
                    foreach ($sloat_array as $key => $value) {

                        if (in_array($key, $booking_array)) {
                            $final_array[$key] = $status_array[1];
                        } else {
                            $check_date = $booking_date . " " . $key;
                            if (strtotime(date('Y-m-d h:i A')) < strtotime($check_date)) {
                                $final_array[$key] = $status_array[3];
                            } else {
                                $final_array[$key] = $status_array[0];
                            }
                        }
                    }
                }
            }
            /* ene booked appointment conditions work from here */


            /* this code remode last slote form array */
            array_pop($final_array);
        
        
        
        
            /* end */

            $address = Custom::get_doctor_address_by_id($address_id, $staff_id, $thin_app_id);
            $return_array = array();
            foreach ($final_array as $slot_key => $status) {
                if (strtotime($slot_key) >= strtotime($address['from_time']) && strtotime($slot_key) <= strtotime($address['to_time'])) {
                    $return_array[$slot_key] = $status;
                }
            }

       		
        
            /* check for blocked slot for date and address and doctor */
            $blocked_slot = Custom::get_doctor_blocked_slot($connection, $thin_app_id, $address_id, $staff_id, $booking_date);
            if (!empty($blocked_slot)) {
                foreach ($blocked_slot as $slot_key => $slot) {
                    if (array_key_exists($slot, $return_array)) {
                        $return_array[$slot] = $status_array[4];
                    }
                }
                /* end break conditions work from here */
            }
        
        	
        
            return $return_array;
        }
        return false;

    }


    public static function get_category_list_for_customer()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $offset = isset($data['offset']) ? $data['offset'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter user id';
            } else if (empty($offset) && $offset != 0) {
                $response['status'] = 0;
                $response['message'] = 'Please enter offset';
            } else {

                $offset = ($offset * PAGINATION_LIMIT);
                $limit = PAGINATION_LIMIT;
                $connection = ConnectionUtil::getConnection();
                $query = "select app_cat.name,app_cat.image, app_cat.id from appointment_categories as app_cat  where app_cat.status = 'ACTIVE' AND app_cat.thinapp_id = $thin_app_id order by app_cat.id desc limit $limit offset $offset";
                $service_message_list = $connection->query($query);
                $final_array = array();
                if ($service_message_list->num_rows) {
                    $service_list = mysqli_fetch_all($service_message_list, MYSQLI_ASSOC);
                    foreach ($service_list as $key => $value) {
                        $final_array[$key]['id'] = $value['id'];
                        $final_array[$key]['name'] = $value['name'];
                        $final_array[$key]['image'] = $value['image'];
                    }
                    $response['status'] = 1;
                    $response['message'] = "Category list found";
                    $response['data']['category_list'] = $final_array;
                } else {
                    $response['status'] = 0;
                    $response['message'] = "No category list found";
                }
            }
            echo json_encode($response);
            die;
        } else {
            exit();
        }
    }

    public static function get_all_services_list_for_customer()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $offset = isset($data['offset']) ? $data['offset'] : "";
            $category_id = isset($data['category_id']) ? $data['category_id'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter user id';
            } else if (empty($offset) && $offset != 0) {
                $response['status'] = 0;
                $response['message'] = 'Please enter offset';
            } else if (empty($category_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter category id';
            } else {

                $offset = ($offset * PAGINATION_LIMIT);
                $limit = PAGINATION_LIMIT;

                $connection = ConnectionUtil::getConnection();

                $query = "select app_ser.id, app_ser.name, app_ser.service_image, app_ser.service_slot_duration, app_ser.service_amount  from appointment_category_services as acs join appointment_services as app_ser on acs.appointment_service_id=app_ser.id  where acs.appointment_category_id = $category_id and  app_ser.status = 'ACTIVE' AND app_ser.thinapp_id = $thin_app_id  limit $limit offset $offset";
                $connection = ConnectionUtil::getConnection();
                $service_message_list = $connection->query($query);
                if ($service_message_list->num_rows) {
                    $service_list = mysqli_fetch_all($service_message_list, MYSQLI_ASSOC);
                    foreach ($service_list as $key => $staff_list) {
                        /* START THIS CODE WORK FOR GET BREAKD LIST OF STAFF*/
                        $data_array[$key]['service_id'] = $staff_list['id'];
                        $data_array[$key]['service_name'] = $staff_list['name'];
                        $data_array[$key]['service_image'] = $staff_list['service_image'];
                        $data_array[$key]['service_slot_duration'] = $staff_list['service_slot_duration'];
                        $data_array[$key]['service_amount'] = $staff_list['service_amount'];
                    }
                    $response['status'] = 1;
                    $response['message'] = "Customer service list found";
                    $response['data']['service_list'] = $data_array;

                } else {
                    $response['status'] = 0;
                    $response['message'] = "No service list found";
                }


            }
            echo json_encode($response);
            die;
        } else {
            exit();
        }
    }

    public static function get_address_list_of_service_for_customer()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $service_id = isset($data['service_id']) ? $data['service_id'] : "";
            $offset = isset($data['offset']) ? $data['offset'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter user id';
            } else if (empty($service_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter service id';
            } else if (empty($offset) && $offset != 0) {
                $response['status'] = 0;
                $response['message'] = 'Please enter offset';
            } else {

                $offset = ($offset * PAGINATION_LIMIT);
                $limit = PAGINATION_LIMIT;

                $query = "select app_add.id, app_add.place, app_add.address  from appointment_addresses as app_add where app_add.id IN ( select asa.appointment_address_id from appointment_service_addresses as asa where asa.appointment_service_id = $service_id and asa.appointment_address_id=app_add.id and asa.status = 'ACTIVE' ) AND app_add.status = 'ACTIVE' AND app_add.thinapp_id = $thin_app_id  limit $limit offset $offset";
                $connection = ConnectionUtil::getConnection();
                $service_message_list = $connection->query($query);
                if ($service_message_list->num_rows) {
                    $service_list = mysqli_fetch_all($service_message_list, MYSQLI_ASSOC);
                    foreach ($service_list as $key => $staff_list) {
                        /* START THIS CODE WORK FOR GET BREAKD LIST OF STAFF*/
                        $data_array[$key]['id'] = $staff_list['id'];
                        $data_array[$key]['place'] = $staff_list['place'];
                        $data_array[$key]['address'] = $staff_list['address'];
                        $data_array[$key]['service_id'] = $service_id;
                    }
                    $response['status'] = 1;
                    $response['message'] = "Address list found";
                    $response['data']['address_list'] = $data_array;

                } else {
                    $response['status'] = 0;
                    $response['message'] = "No address list found";
                }

            }
            echo json_encode($response);
            die;
        } else {
            exit();
        }
    }

    public static function get_service_staff_list_for_customer()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $service_id = isset($data['service_id']) ? $data['service_id'] : "";
            $address_id = isset($data['address_id']) ? $data['address_id'] : "";
            $offset = isset($data['offset']) ? $data['offset'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter user id';
            } else if (empty($offset) && $offset != 0) {
                $response['status'] = 0;
                $response['message'] = 'Please enter offset';
            } else if (empty($service_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter service id';
            } else if (empty($address_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter address id';
            } else {

                $offset = ($offset * PAGINATION_LIMIT);
                $limit = PAGINATION_LIMIT;
                $response = $response_data = array();
                $connection = ConnectionUtil::getConnection();
                $query = "select app_staff.id,app_staff.name,app_staff.sub_title,app_staff.profile_photo  from  appointment_staffs as app_staff join appointment_staff_addresses as asa on asa.appointment_staff_id = app_staff.id join appointment_staff_services as ass on app_staff.id = ass.appointment_staff_id  where ass.appointment_service_id = $service_id and appointment_address_id = $address_id and app_staff.status ='ACTIVE' and app_staff.thinapp_id = $thin_app_id   ORDER BY app_staff.id DESC limit $limit offset $offset";
                $subscriber = $connection->query($query);
                if ($subscriber->num_rows) {
                    $channels_arr = array();
                    $subscriber = mysqli_fetch_all($subscriber, MYSQLI_ASSOC);
                    foreach ($subscriber as $key => $channel_data) {
                        $channels_arr[$key]['staff_id'] = $channel_data['id'];
                        $channels_arr[$key]['name'] = $channel_data['name'];
                        $channels_arr[$key]['sub_title'] = $channel_data['sub_title'];
                        $channels_arr[$key]['profile_photo'] = $channel_data['profile_photo'];
                    }
                    $response['status'] = 1;
                    $response['message'] = "Staff list found";
                    $response['data']['staff_list'] = $channels_arr;
                } else {
                    $response['status'] = 0;
                    $response['message'] = "No staff list found";
                }
            }
            echo json_encode($response);
            die;
        } else {
            exit();
        }
    }


    public static function fun_get_customer_list_for_user($thin_app_id, $user_id, $limit, $offset)
    {
        $connection = ConnectionUtil::getConnection();
        $query = "select cus.id, cus.first_name, cus.last_name, cus.email, cus.profile_photo, cus.mobile, cus.address from appointment_customers as cus  where cus.status = 'ACTIVE'  AND cus.customer_created_by = $user_id AND cus.thinapp_id = $thin_app_id order by cus.id desc limit $limit offset $offset";
        $service_message_list = $connection->query($query);
        $response = array();
        $final_array = array();
        $condition_array = array();
        if ($service_message_list->num_rows) {
            $service_list = mysqli_fetch_all($service_message_list, MYSQLI_ASSOC);
            foreach ($service_list as $key => $value) {
                $final_array[$key]['id'] = $value['id'];
                $final_array[$key]['customer_name'] = $value['first_name'] . ' ' . $value['last_name'];
                $final_array[$key]['email'] = $value['email'];
                $final_array[$key]['profile_photo'] = $value['profile_photo'];
                $final_array[$key]['mobile'] = $value['mobile'];
                $final_array[$key]['address'] = $value['address'];
            }
        }
        return $final_array;
    }

    /* this function get list of this current user customer */
    public static function get_customer_list_for_user()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $offset = isset($data['offset']) ? $data['offset'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter user id';
            } else if (empty($offset) && $offset != 0) {
                $response['status'] = 0;
                $response['message'] = 'Please enter offset';
            } else {

                $offset = ($offset * PAGINATION_LIMIT);
                $limit = PAGINATION_LIMIT;
                $response = $response_data = array();
                $response_data = WebservicesFunction::fun_get_customer_list_for_user($thin_app_id, $user_id, $limit, $offset);
                if (!empty($response_data)) {
                    $response['status'] = 1;
                    $response['message'] = "Customer list found";
                    $response['data']['customer_list'] = $response_data;
                } else {
                    $response['status'] = 0;
                    $response['message'] = "No customer list found";
                }
            }
            echo json_encode($response);
            die;
        } else {
            exit();
        }
    }


    public static function get_staff_availability_for_customer($data = null)
    {


        $return_flag = true;
        if (empty($data)) {
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);
            $return_flag = false;
        }
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $address_id = isset($data['address_id']) ? $data['address_id'] : "";
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : "";
            $schedule_date = isset($data['schedule_date']) ? $data['schedule_date'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter mobile number';
            } else if (empty($address_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter address id';
            } else if (empty($doctor_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter doctor id';
            } else if (empty($schedule_date)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter schedule date';
            } else {


                if ($doctor_id > 0) {
                    $service_data = Custom::get_doctor_service_data($doctor_id);
                    $address_data = Custom::get_doctor_address_by_id($address_id, $doctor_id, $thin_app_id);
                    $connection = ConnectionUtil::getConnection();
                    if (!empty($service_data) && !empty($address_data)) {
                        $duration = $service_data['service_slot_duration'];
                        $day_number = date('N', strtotime($schedule_date));
                        $schedule_date = date('Y-m-d', strtotime($schedule_date));
                        $response_data = WebservicesFunction::get_booking_slots($schedule_date, $doctor_id, $duration, $thin_app_id, $address_id);
                        if (!empty($response_data)) {
                            /* get booked appoinment ids start */
                            $booking_array = array();
                            if (in_array("BOOKED", $response_data)) {
                                $query = "select IFNULL(app_cus.id,c.id) as customer_id, acss.slot_time, acss.id as app_id, IFNULL(app_cus.first_name,c.child_name) as name, IFNULL(app_cus.mobile,c.mobile) as mobile, IFNULL(app_cus.profile_photo,c.image) as profile_photo from appointment_customer_staff_services as acss left join appointment_customers app_cus on app_cus.id = acss.appointment_customer_id left join childrens as c on c.id = acss.children_id where  acss.appointment_staff_id=$doctor_id AND DATE(acss.appointment_datetime) = '$schedule_date' and ( acss.status = 'NEW' OR acss.status = 'CONFIRM' OR acss.status = 'RESCHEDULE' ) limit " . MAX_LIMIT;
                                $booking = $connection->query($query);
                                if ($booking->num_rows) {
                                    $booking = mysqli_fetch_all($booking, MYSQLI_ASSOC);
                                    foreach ($booking as $key => $value) {
                                        $booking_array[$value['slot_time']]['appointment_id'] = (int)$value['app_id'];
                                        $booking_array[$value['slot_time']]['customer_id'] = (int)$value['customer_id'];
                                        $booking_array[$value['slot_time']]['slot_time'] = $value['slot_time'];

                                        $booking_array[$value['slot_time']]['name'] = $value['name'];
                                        $booking_array[$value['slot_time']]['mobile'] = $value['mobile'];
                                        $booking_array[$value['slot_time']]['profile_photo'] = $value['profile_photo'];

                                    }
                                }
                            }
                            /* get booked appointment ids end */

                            $response['status'] = 1;
                            $response['message'] = "Schedule list found";
                            $insert_value = false;
                            $counter = 0;
                            foreach ($response_data as $slot_key => $value) {

                                if (array_key_exists($slot_key, $booking_array)) {
                                    $data_array[$counter] = $booking_array[$slot_key];
                                } else {
                                    $data_array[$counter]['appointment_id'] = 0;
                                    $data_array[$counter]['customer_id'] = 0;
                                    $data_array[$counter]['slot_time'] = "";
                                    $data_array[$counter]['name'] = "";
                                    $data_array[$counter]['mobile'] = "";
                                    $data_array[$counter]['profile_photo'] = "";
                                    $data_array[$counter]['address'] = "";
                                }
                                $data_array[$counter]['time'] = $slot_key;
                                $data_array[$counter]['flag'] = $value;
                                $data_array[$counter]['id'] = $counter;
                                $data_array[$counter]['service_amount'] = $service_data['service_amount'];
                                $counter++;

                            }
                            $response['data']['schedule_detail'] = $data_array;
                            $response['data']['count'] = count($data_array);
                        } else {
                            $response['status'] = 1;
                            $response['message'] = "No slot available";
                            $response['data']['count'] = 0;
                        }

                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Invalid service";
                    }
                } else {
                    $response['status'] = 0;
                    $response['message'] = "Invalid staff";
                }

            }


            if ($return_flag === false) {
                echo json_encode($response);
                die;
            } else {
                return json_encode($response);
            }

        } else {
            exit();
        }
    }


    public static function web_get_staff_availability_for_customer($data = null)
    {


        $return_flag = true;
        if (empty($data)) {
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);
            $return_flag = false;
        }
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $address_id = isset($data['address_id']) ? $data['address_id'] : "";
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : "";
            $schedule_date = isset($data['schedule_date']) ? $data['schedule_date'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter mobile number';
            } else if (empty($address_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter address id';
            } else if (empty($doctor_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter doctor id';
            } else if (empty($schedule_date)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter schedule date';
            } else {


                if ($doctor_id > 0) {
                    $service_data = Custom::get_doctor_service_data($doctor_id);
                    $address_data = Custom::get_doctor_address_by_id($address_id, $doctor_id, $thin_app_id);
                    $connection = ConnectionUtil::getConnection();
                    if (!empty($service_data) && !empty($address_data)) {
                        $duration = $service_data['service_slot_duration'];
                        $day_number = date('N', strtotime($schedule_date));
                        $schedule_date = date('Y-m-d', strtotime($schedule_date));
                        $response_data = WebservicesFunction::get_booking_slots($schedule_date, $doctor_id, $duration, $thin_app_id, $address_id);
                        if (!empty($response_data)) {
                            /* get booked appoinment ids start */
                            $booking_array = array();
                            if (in_array("BOOKED", $response_data)) {
                                $query = "select IF(app_cus.id IS NOT NULL,'CUSTOMER','CHILDREN') as customer_type, IFNULL(app_cus.id,c.id) as customer_id, acss.slot_time, acss.id as app_id, IFNULL(app_cus.first_name,c.child_name) as name, IFNULL(app_cus.mobile,c.mobile) as mobile, IFNULL(app_cus.profile_photo,c.image) as profile_photo from appointment_customer_staff_services as acss left join appointment_customers app_cus on app_cus.id = acss.appointment_customer_id left join childrens as c on c.id = acss.children_id where  acss.appointment_staff_id=$doctor_id AND DATE(acss.appointment_datetime) = '$schedule_date' and ( acss.status = 'NEW' OR acss.status = 'CONFIRM' OR acss.status = 'RESCHEDULE' OR acss.status = 'CLOSED'  OR acss.status = 'REFUND' ) limit " . MAX_LIMIT;
                                $booking = $connection->query($query);
                                if ($booking->num_rows) {
                                    $booking = mysqli_fetch_all($booking, MYSQLI_ASSOC);
                                    foreach ($booking as $key => $value) {
                                        $booking_array[$value['slot_time']]['appointment_id'] = (int)$value['app_id'];
                                        $booking_array[$value['slot_time']]['customer_id'] = (int)$value['customer_id'];
                                        $booking_array[$value['slot_time']]['customer_type'] = $value['customer_type'];
                                        $booking_array[$value['slot_time']]['slot_time'] = $value['slot_time'];

                                        $booking_array[$value['slot_time']]['name'] = $value['name'];
                                        $booking_array[$value['slot_time']]['mobile'] = $value['mobile'];
                                        $booking_array[$value['slot_time']]['profile_photo'] = $value['profile_photo'];

                                    }
                                }
                            }
                            /* get booked appointment ids end */

                            $response['status'] = 1;
                            $response['message'] = "Schedule list found";
                            $insert_value = false;
                            $counter = 0;
                            foreach ($response_data as $slot_key => $value) {

                                if (array_key_exists($slot_key, $booking_array)) {
                                    $data_array[$counter] = $booking_array[$slot_key];
                                } else {
                                    $data_array[$counter]['appointment_id'] = 0;
                                    $data_array[$counter]['customer_id'] = 0;
                                    $data_array[$counter]['slot_time'] = "";
                                    $data_array[$counter]['name'] = "";
                                    $data_array[$counter]['mobile'] = "";
                                    $data_array[$counter]['profile_photo'] = "";
                                    $data_array[$counter]['address'] = "";
                                }
                                $data_array[$counter]['time'] = $slot_key;
                                $data_array[$counter]['flag'] = $value;
                                $data_array[$counter]['id'] = $counter;
                                $data_array[$counter]['service_amount'] = $service_data['service_amount'];
                                $counter++;

                            }
                            $response['data']['schedule_detail'] = $data_array;
                            $response['data']['count'] = count($data_array);
                            $response['data']['address_data'] = $address_data;
                        } else {
                            $response['status'] = 1;
                            $response['message'] = "No slot available";
                            $response['data']['count'] = 0;
                            $response['data']['address_data'] = $address_data;
                        }

                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Invalid service";
                    }
                } else {
                    $response['status'] = 0;
                    $response['message'] = "Invalid staff";
                }

            }


            if ($return_flag === false) {
                echo json_encode($response);
                die;
            } else {
                return json_encode($response);
            }

        } else {
            exit();
        }
    }


    public static function get_customer_list_for_user_dashboard()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $offset = isset($data['offset']) ? $data['offset'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter user id';
            } else if (empty($offset) && $offset != 0) {
                $response['status'] = 0;
                $response['message'] = 'Please enter offset';
            } else {

                $offset = ($offset * PAGINATION_LIMIT);
                $limit = PAGINATION_LIMIT;
                $response = $response_data = array();

                $connection = ConnectionUtil::getConnection();
                $query = "select cus.id, cus.first_name, cus.last_name, cus.email, cus.profile_photo, cus.mobile, cus.address from appointment_customers as cus  where cus.status = 'ACTIVE'  AND cus.customer_created_by = $user_id AND cus.thinapp_id = $thin_app_id order by cus.id desc limit $limit offset $offset";
                $service_message_list = $connection->query($query);
                $response = array();
                $final_array = array();

                if ($service_message_list->num_rows) {
                    $service_list = mysqli_fetch_all($service_message_list, MYSQLI_ASSOC);
                    foreach ($service_list as $key => $value) {
                        $final_array[$key]['id'] = $value['id'];
                        $final_array[$key]['customer_name'] = $value['first_name'] . ' ' . $value['last_name'];
                        $final_array[$key]['email'] = $value['email'];
                        $final_array[$key]['profile_photo'] = $value['profile_photo'];
                        $final_array[$key]['mobile'] = $value['mobile'];
                        $final_array[$key]['address'] = $value['address'];
                    }
                    $response['status'] = 1;
                    $response['message'] = "Customer list found";
                    $response['data']['customer_list'] = $final_array;
                } else {
                    $response['status'] = 0;
                    $response['message'] = "No customer list found";
                }

            }
            echo json_encode($response);
            die;
        } else {
            exit();
        }
    }


    public static function get_customer_appointment_list()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $offset = isset($data['offset']) ? $data['offset'] : "";


            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter mobile';
            } else if (empty($offset) && $offset != 0) {
                $response['status'] = 0;
                $response['message'] = 'Please enter offset';
            } else {

                $offset = ($offset * 100);
                $limit = 100;
                $response = $response_data = array();
            	$condition = " AND ( acss.is_paid_booking_convenience_fee = 'NOT_APPLICABLE' OR acss.is_paid_booking_convenience_fee = 'YES') ";
                $connection = ConnectionUtil::getConnection();
                $query = " select final.* from ( ";
                $query .= " select app_sta.user_can_whats_app_video_call, app_sta.user_can_video_call, app_sta.mobile as doctor_mobile, acss.consulting_type, app_sta.is_online_consulting,  acss.custom_token, mpo.id as payment_id, acss.emergency_appointment, acss.created, mpo.payment_type_name, app_sta.show_appointment_token, acss.appointment_service_id, acss.has_token, app_sta.show_appointment_time,  app_sta.payment_mode, app_sta.show_fees, acss.booking_payment_type, c.id as children_id, acss.appointment_customer_id, acss.queue_number, acss.booking_validity_attempt, app_ser.service_validity_time, IFNULL(app_cus.mobile,c.mobile) as customer_mobile, app_add.id as address_id, app_sta.id as doctor_id, app_ser.service_slot_duration as service_duration, IFNULL(app_sta.profile_photo,c.image) as profile_photo, acss.appointment_patient_name as customer_name, acss.payment_status as payment_status, acss.id as appointment_id, app_add.address, acss.slot_time,  acss.appointment_datetime, app_ser.name as service_name, app_sta.sub_title, app_sta.name as staff_name, IFNULL((SELECT mpod.total_amount FROM medical_product_order_details as mpod where mpod.thinapp_id= acss.thinapp_id and  mpod.medical_product_order_id = acss.medical_product_order_id and mpod.medical_product_id = 0 and mpod.total_amount > 0 LIMIT 1 ),acss.amount) as service_amt, acss.status as app_status from appointment_customer_staff_services as acss join  appointment_staffs as app_sta on acss.appointment_staff_id = app_sta.id  join  appointment_addresses as app_add on acss.appointment_address_id = app_add.id join  appointment_services as app_ser on acss.appointment_service_id = app_ser.id left join  appointment_customers as app_cus on app_cus.id = acss.appointment_customer_id left join childrens as c on c.id = acss.children_id left join medical_product_orders as mpo on mpo.id = acss.medical_product_order_id where  ( c.mobile = '$mobile' OR c.parents_mobile = '$mobile' OR app_cus.mobile = '$mobile' OR app_cus.parents_mobile = '$mobile') and acss.thinapp_id = $thin_app_id  and acss.status != 'REFUND' $condition  ";
                $query .= " UNION ALL ";
                $query .= " select app_sta.user_can_whats_app_video_call, app_sta.user_can_video_call, app_sta.mobile as doctor_mobile, acss.consulting_type, app_sta.is_online_consulting,  acss.custom_token, mpo.id as payment_id, acss.emergency_appointment, acss.created, mpo.payment_type_name, app_sta.show_appointment_token, acss.appointment_service_id, acss.has_token, app_sta.show_appointment_time,  app_sta.payment_mode, app_sta.show_fees, acss.booking_payment_type, c.id as children_id, acss.appointment_customer_id, acss.queue_number, acss.booking_validity_attempt, app_ser.service_validity_time, IFNULL(app_cus.mobile,c.mobile) as customer_mobile, app_add.id as address_id, app_sta.id as doctor_id, app_ser.service_slot_duration as service_duration, IFNULL(app_sta.profile_photo,c.image) as profile_photo, acss.appointment_patient_name as customer_name, acss.payment_status as payment_status, acss.id as appointment_id, app_add.address, acss.slot_time,  acss.appointment_datetime, app_ser.name as service_name, app_sta.sub_title, app_sta.name as staff_name, IFNULL((SELECT mpod.total_amount FROM medical_product_order_details as mpod where mpod.thinapp_id= acss.thinapp_id and  mpod.medical_product_order_id = acss.medical_product_order_id and mpod.medical_product_id = 0 and mpod.total_amount > 0 LIMIT 1 ),acss.amount) as service_amt, acss.status as app_status from appointment_customer_staff_services_archive as acss join  appointment_staffs as app_sta on acss.appointment_staff_id = app_sta.id  join  appointment_addresses as app_add on acss.appointment_address_id = app_add.id join  appointment_services as app_ser on acss.appointment_service_id = app_ser.id left join  appointment_customers as app_cus on app_cus.id = acss.appointment_customer_id left join childrens as c on c.id = acss.children_id left join medical_product_orders_archive as mpo on mpo.id = acss.medical_product_order_id where  ( c.mobile = '$mobile' OR c.parents_mobile = '$mobile' OR app_cus.mobile = '$mobile' OR app_cus.parents_mobile = '$mobile') and acss.thinapp_id = $thin_app_id  and acss.status != 'REFUND' $condition ";
                $query .= " ) as final  order by final.appointment_id desc limit 0,$limit ";

            
                $service_message_list = $connection->query($query);
                $response = array();
                $final_array = array();
                if ($service_message_list->num_rows) {
                    $service_list = mysqli_fetch_all($service_message_list, MYSQLI_ASSOC);
                    foreach ($service_list as $key => $value) {
                        $final_array[$key]['show_fees'] = $value['show_fees'];
                        $final_array[$key]['appointment_id'] = $value['appointment_id'];
                        $final_array[$key]['children_id'] = !empty($value['children_id']) ? $value['children_id'] : 0;
                        $final_array[$key]['children_appointment'] = !empty($value['children_id']) ? "YES" : "NO";
                        $final_array[$key]['address_id'] = $value['address_id'];
                        $final_array[$key]['doctor_id'] = $value['doctor_id'];
                    	$final_array[$key]['doctor_mobile'] = $value['doctor_mobile'];
                        $final_array[$key]['mobile'] = $value['customer_mobile'];
                        $final_array[$key]['service_name'] = $value['service_name'];
                        $final_array[$key]['service_duration'] = $value['service_duration'];
                        $final_array[$key]['customer_name'] = $value['customer_name'];
                        $final_array[$key]['doctor_image'] = $value['profile_photo'];
                        $final_array[$key]['staff_name'] = $value['staff_name'];
                        $final_array[$key]['designation'] = $value['sub_title'];
                        $final_array[$key]['service_id'] = $value['appointment_service_id'];
                        $final_array[$key]['appointment_datetime'] = date('d-m-Y', strtotime($value['appointment_datetime']));
                    	$final_array[$key]['timestamp'] = strtotime($value['appointment_datetime']);
                        $final_array[$key]['appointment_time'] = "";

                        if($value['show_appointment_time']=='YES' && $value['custom_token'] =='NO'){
                            $final_array[$key]['appointment_time'] = ($value['emergency_appointment'] =='NO')?$value['slot_time']:date('h:i A', strtotime($value['created']));
                        }

                        if($value['show_appointment_token']=="YES"){
                            $final_array[$key]['queue_number'] = Custom::create_queue_number($value);
                        }else{
                            $final_array[$key]['queue_number'] = "";
                        }

                        if(!empty($value['payment_type_name'])){
                            $final_array[$key]['payment_via'] = $value['payment_type_name'];
                        }else{
                            $final_array[$key]['payment_via'] = ($value['booking_payment_type'] == "ONLINE" && $value['payment_status'] =='SUCCESS') ? "Online" : "-";
                        }


                        $final_array[$key]['booking_validity_attempt'] = $value['service_validity_time'];


                        if ($value['booking_validity_attempt'] > 1 && $value['service_amt'] == 0 ) {
                            $final_array[$key]['service_amount'] = "Free";
                            $final_array[$key]['payment_via'] = "-";
                        } else {
                            $final_array[$key]['service_amount'] = ucfirst(strtolower($value['service_amt']));;
                        }
                        //$final_array[$key]['service_amount'] = ($value['booking_validity_attempt'] > 1) ? "Free" : $value['service_amt'];
                        $final_array[$key]['payment_status'] = "Pending";
                        if($value['payment_status']=="SUCCESS"){
                            $final_array[$key]['payment_status'] = ucfirst(strtolower($value['payment_status']));
                        } 
                        

                        //$final_array[$key]['service_amount'] = $value['service_amt'];
                        $final_array[$key]['address'] = $value['address'];

                        $date = $value['appointment_datetime'];
                        $appointment_datetime = (date('Y-m-d H:i', strtotime($date)));
                        $current_date = date('Y-m-d H:i');
                        $final_array[$key]['cancel'] = "NO";
                        $final_array[$key]['reschedule'] = "NO";
                    	$final_array[$key]['chat'] = "NO";
                        if($value['consulting_type']=='CHAT'){
                            $final_array[$key]['chat'] = "YES";
                        }
                        $final_array[$key]['allow_send_text'] = "NO";
                    	$final_array[$key]['message_string'] = "";
						$final_array[$key]['video'] = "NO";
                    	$final_array[$key]['whats_app_video'] = "NO";
                        if ($value['app_status'] == 'NEW' || $value['app_status'] == 'CONFIRM' || $value['app_status'] == 'RESCHEDULE') {
                            $final_array[$key]['status'] = 'BOOKED';
                            if (date('Y-m-d', strtotime($appointment_datetime)) >= date('Y-m-d', strtotime($current_date))) {
                                if(empty($value['payment_id'])){
                                    $final_array[$key]['cancel'] = "YES";
                                }
                                if ($value['emergency_appointment'] == 'NO' && $value['custom_token'] == 'NO') {
                                    //$final_array[$key]['reschedule'] = "YES";
                                }
                            
                           		if($value['payment_status'] == "SUCCESS"){
                                    if($value['consulting_type']=='VIDEO'){
                                    	$final_array[$key]['video'] = $value['user_can_video_call'];
                                    	$final_array[$key]['whats_app_video'] = $value['user_can_whats_app_video_call'];
                                        $final_array[$key]['message_string'] = "Doctor will video call you soon on your token number";
                                    }else if($value['consulting_type']=='AUDIO'){
                                        $final_array[$key]['message_string'] = "Doctor will call you soon on your token number";
                                    }else if($value['consulting_type']=='CHAT'){
                                        $final_array[$key]['message_string'] = "Doctor will chat you soon on your token number";
                                    	$final_array[$key]['allow_send_text'] = "YES";
                                    }

                                }
                            

                            } else {
                                $final_array[$key]['status'] = 'EXPIRED';
                            }
                        } else {
                            $final_array[$key]['status'] = $value['app_status'];
                        }

                        $final_array[$key]['pay'] = "NO";
                        if ($value['payment_mode'] == "BOTH" || $value['payment_mode'] == "ONLINE") {
                            if ($value['payment_status'] == "PENDING" || $value['payment_status'] == "FAILURE") {
                                if ($final_array[$key]['status'] != 'CANCELED' && $value['consulting_type']=='OFFLINE') {
                                    $final_array[$key]['pay'] = "YES";
                                }
                            }
                        }


                    }
                    $response['status'] = 1;
                    $response['message'] = "Appointment list found";
                    $response['data']['appointment_list'] = $final_array;
                } else {
                    $response['status'] = 0;
                    $response['message'] = "No more appointment list";
                    $response['data']['appointment_list'] = array();
                }
            }
            echo json_encode($response);
            die;
        } else {
            exit();
        }
    }

    public static function get_appointment_reminder_list()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $main_app_category = isset($data['main_app_category']) ? $data['main_app_category'] : "";
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : 0;

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter mobile';
            } else {

                $response = $response_data = array();
                $connection = ConnectionUtil::getConnection();
                $condition = " and acss.thinapp_id = $thin_app_id and acss.reminder_add_by_id = $user_id";
                if ($main_app_category == "HOSPITAL") {
                    $condition = " and acss.thinapp_id = $thin_app_id and acss.appointment_staff_id = $doctor_id";
                }
                $query = "select acss.id as appointment_id, app_cus.profile_photo, app_cus.mobile as customer_mobile, app_cus.first_name as customer_name, DATE_FORMAT(acss.reminder_date,'%d-%m-%Y') as reminder_date, acss.reminder_message from appointment_customer_staff_services as acss join  appointment_customers as app_cus on app_cus.id = acss.appointment_customer_id  where  DATE(acss.reminder_date) >= DATE(NOW()) $condition";

                $service_message_list = $connection->query($query);
                $response = array();
                $final_array = array();
                if ($service_message_list->num_rows) {
                    $service_list = mysqli_fetch_all($service_message_list, MYSQLI_ASSOC);
                    $response['status'] = 1;
                    $response['message'] = "Appointment reminder found";
                    $response['data']['reminder_list'] = $service_list;
                } else {
                    $response['status'] = 0;
                    $response['message'] = "No appointment reminder";
                }
            }
            Custom::sendResponse($response);
        }
        exit();
    }


    public static function get_all_staff_list_for_admin()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $offset = isset($data['offset']) ? $data['offset'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter user id';
            } else if (empty($offset) && $offset != 0) {
                $response['status'] = 0;
                $response['message'] = 'Please enter offset';
            } else {

                $offset = ($offset * PAGINATION_LIMIT);
                $limit = PAGINATION_LIMIT;
                $response = $response_data = array();
                $connection = ConnectionUtil::getConnection();
                $query = "select app_staff.id,app_staff.name,app_staff.sub_title,app_staff.profile_photo from  appointment_staffs as app_staff where app_staff.status='ACTIVE' AND  app_staff.thinapp_id = $thin_app_id  ORDER BY app_staff.id DESC limit $limit offset $offset";
                $subscriber = $connection->query($query);
                if ($subscriber->num_rows) {
                    $channels_arr = array();
                    $subscriber = mysqli_fetch_all($subscriber, MYSQLI_ASSOC);
                    foreach ($subscriber as $key => $channel_data) {
                        $channels_arr[$key]['staff_id'] = $channel_data['id'];
                        $channels_arr[$key]['name'] = $channel_data['name'];
                        $channels_arr[$key]['sub_title'] = $channel_data['sub_title'];
                        $channels_arr[$key]['profile_photo'] = $channel_data['profile_photo'];
                    }
                    $response['status'] = 1;
                    $response['message'] = "Staff list found";
                    $response['data']['staff_list'] = $channels_arr;
                } else {
                    $response['status'] = 0;
                    $response['message'] = "No staff list found";
                }
            }
            echo json_encode($response);
            die;
        } else {
            exit();
        }
    }


    /*************************APPOINTMENT END HERE*************************/


    /***********PAYMENT ITEM START************/

    public static function get_list_all_payment_item()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if (isset($data['app_key'])) {
            $app_key = $data['app_key'];
            $user_id = $data['user_id'];
            $thin_app_id = $data['thin_app_id'];
            $mobile = $data['mobile'];
            $fileName = 'get_list_all_payment_item_thinapp' . $thin_app_id . '_user' . $user_id;
            $offset = $data['offset'];
            $limit = PAGINATION_LIMIT;
            $response = array();
            if ($user_id != '' && $app_key != '' && $thin_app_id != '') {
                $fileData = WebservicesFunction::readJson($fileName);
                /* $sliceData = isset($fileData[$offset])?$fileData[$offset]:array();
                if( count($sliceData) == $limit )
                {
                    $response['status'] = 1;
                    $response['message'] = "Payment item list found";
                    $response['data']['payment_item_list'] = $sliceData;
                }
                else
                { */
                $dataToSend = WebservicesFunction::getListAllPaymentItemDB($app_key, $user_id, $thin_app_id, $offset, $limit, $mobile);
                if (count($dataToSend) > 0) {
                    $response['status'] = 1;
                    $response['message'] = "Payment item list found";
                    $response['data']['payment_item_list'] = $dataToSend;
                    $fileData[$offset] = $dataToSend;
                    WebservicesFunction::createJson($fileName, $fileData, 'CREATE');
                } else {
                    $response['status'] = 0;
                    $response['message'] = "There is no payment item";
                }
                /*	} */
            } else {
                $response['status'] = 0;
                $response['message'] = "Invalid request parameter";
            }
            echo json_encode($response);
            die;
        }
    }

    public static function getListAllPaymentItemDB($app_key = null, $user_id = null, $thin_app_id = null, $offset = null, $limit = null, $mobile = null)
    {
        $response = array();
        if ($user_id != '' && $app_key != '' && $thin_app_id != '') {
            $offset = $offset * $limit;
            $connection = ConnectionUtil::getConnection();
            /* app functionlity  */
            $subscribedChannelRS = $connection->query("SELECT `channel_id` FROM `subscribers` WHERE `user_id` = '" . $user_id . "'");
            $subscribedChannelData = mysqli_fetch_all($subscribedChannelRS, MYSQLI_ASSOC);
            $subscribedChannelString = '';
            if (!empty($subscribedChannelData)) {
                $subscribedChannelID = array_column($subscribedChannelData, 'channel_id');
                $subscribedChannelString = " OR `channel_id` IN ('" . implode("','", $subscribedChannelID) . "') ";
            }

            $paymentRS = $connection->query("SELECT * FROM `payment_items` WHERE ( `thinapp_id` = '" . $thin_app_id . "' " . $subscribedChannelString . " ) AND `quantity_status` = 'UNSOLD' AND `status` = 'ACTIVE' AND `payment_type` != 'BY_FILE' ORDER BY `id` DESC LIMIT " . $limit . " OFFSET " . $offset);
            $paymentItem = mysqli_fetch_all($paymentRS, MYSQLI_ASSOC);
            $dataToSend = array();
            $arr = array();
            if (!empty($paymentItem)) {
                foreach ($paymentItem as $key => $paymentData) {
                    $arr['id'] = $paymentData['id'];
                    $arr['title'] = $paymentData['title'];
                    $arr['description'] = $paymentData['description'];
                    $arr['image_path'] = $paymentData['image_path'];
                    $arr['payment_type'] = $paymentData['payment_type'];
                    $arr['amount_type'] = $paymentData['amount_type'];
                    $arr['amount'] = $paymentData['amount'];
                    $arr['quantity_type'] = $paymentData['quantity_type'];
                    $arr['quantity'] = $paymentData['quantity'];
                    $arr['ask_for_quanitiy'] = $paymentData['ask_for_quanitiy'];
                    $arr['show_last_date'] = $paymentData['show_last_date'];
                    $arr['last_date'] = $paymentData['last_date'];
                    $arr['question_to_ask'] = $paymentData['question_to_ask'];
                    $arr['home_delivery'] = $paymentData['home_delivery'];
                    $arr['discount_enable'] = $paymentData['discount_enable'];
                    $arr['discount_type'] = $paymentData['discount_type'];
                    $arr['discount_value'] = $paymentData['discount_value'];
                    $arr['total_amount'] = $paymentData['total_amount'];
                    $arr['app_payment_transaction_id'] = '';
                    $arr['share_on'] = $paymentData['share_on'];
                    $arr['channel_id'] = $paymentData['channel_id'];
                    $arr['status'] = $paymentData['status'];
                    $arr['quantity_status'] = $paymentData['quantity_status'];
                    $arr['is_owner'] = ($paymentData['user_id'] == $user_id) ? "YES" : "NO";
                    array_push($response, $arr);
                }
            }
        }
        return $response;
    }

    public static function get_my_dues_list()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if (isset($data['app_key'])) {
            $app_key = $data['app_key'];
            $user_id = $data['user_id'];
            $thin_app_id = $data['thin_app_id'];
            $mobile = $data['mobile'];
            $fileName = 'get_my_dues_list_thinapp' . $thin_app_id . '_user' . $user_id;
            $offset = $data['offset'];
            $limit = PAGINATION_LIMIT;
            $response = array();
            if ($user_id != '' && $app_key != '' && $thin_app_id != '') {
                $fileData = WebservicesFunction::readJson($fileName);
                /*	$sliceData = isset($fileData[$offset])?$fileData[$offset]:array();
                    if( count($sliceData) == $limit )
                    {
                        $response['status'] = 1;
                        $response['message'] = "Payment item list found";
                        $response['data']['payment_item_list'] = $sliceData;
                    }
                    else
                    { */
                $dataToSend = WebservicesFunction::getMyDuesListDB($app_key, $user_id, $thin_app_id, $offset, $limit, $mobile);
                if (count($dataToSend) > 0) {
                    $response['status'] = 1;
                    $response['message'] = "Payment item list found";
                    $response['data']['payment_item_list'] = $dataToSend;
                    $fileData[$offset] = $dataToSend;
                    WebservicesFunction::createJson($fileName, $fileData, 'CREATE');
                } else {
                    $response['status'] = 0;
                    $response['message'] = "There is no payment item";
                }
                /*	} */
            } else {
                $response['status'] = 0;
                $response['message'] = "Invalid request parameter";
            }
            echo json_encode($response);
            die;
        }
    }

    public static function getMyDuesListDB($app_key = null, $user_id = null, $thin_app_id = null, $offset = null, $limit = null, $mobile = null)
    {
        $response = array();
        if ($user_id != '' && $app_key != '' && $thin_app_id != '') {
            $offset = $offset * $limit;
            $connection = ConnectionUtil::getConnection();
            /* app functionlity  payment_file_amounts; */
            $paymentItemIdRS = $connection->query("SELECT `payment_item_id`,`amount` FROM `payment_file_amounts` WHERE (`user_id` = '" . $user_id . "' OR `mobile` = '" . $mobile . "') AND `thinapp_id` = '" . $thin_app_id . "' AND `status` = 'ACTIVE' AND `payment_status` = 'UNPAID'");
            $paymentItemIdData = mysqli_fetch_all($paymentItemIdRS, MYSQLI_ASSOC);
            $paymentItemIDString = '';
            if (!empty($paymentItemIdData)) {
                $paymentItemID = array_column($paymentItemIdData, 'payment_item_id');
                $paymentItemIDString = "`id` IN ('" . implode("','", $paymentItemID) . "') ";


                $paymentRS = $connection->query("SELECT * FROM `payment_items` WHERE " . $paymentItemIDString . " AND `status` = 'ACTIVE' AND `payment_type` = 'BY_FILE' ORDER BY `id` DESC LIMIT " . $limit . " OFFSET " . $offset);
                $paymentItem = mysqli_fetch_all($paymentRS, MYSQLI_ASSOC);
                $dataToSend = array();
                $arr = array();
                if (!empty($paymentItem)) {
                    foreach ($paymentItem as $key => $paymentData) {
                        $arr['id'] = $paymentData['id'];
                        $arr['title'] = $paymentData['title'];
                        $arr['description'] = $paymentData['description'];
                        $arr['image_path'] = $paymentData['image_path'];
                        $arr['payment_type'] = $paymentData['payment_type'];
                        $arr['amount_type'] = $paymentData['amount_type'];
                        $keyID = array_search($paymentData['id'], array_column($paymentItemIdData, 'payment_item_id'));
                        $arr['amount'] = $paymentItemIdData[$keyID]['amount'];
                        $arr['quantity_type'] = $paymentData['quantity_type'];
                        $arr['quantity'] = $paymentData['quantity'];
                        $arr['ask_for_quanitiy'] = $paymentData['ask_for_quanitiy'];
                        $arr['show_last_date'] = $paymentData['show_last_date'];
                        $arr['last_date'] = $paymentData['last_date'];
                        $arr['question_to_ask'] = $paymentData['question_to_ask'];
                        $arr['home_delivery'] = $paymentData['home_delivery'];
                        $arr['discount_enable'] = $paymentData['discount_enable'];
                        $arr['discount_type'] = $paymentData['discount_type'];
                        $arr['discount_value'] = $paymentData['discount_value'];
                        $arr['total_amount'] = $paymentItemIdData[$keyID]['amount'];
                        $arr['app_payment_transaction_id'] = '';
                        $arr['share_on'] = $paymentData['share_on'];
                        $arr['channel_id'] = $paymentData['channel_id'];
                        $arr['status'] = $paymentData['status'];
                        $arr['is_owner'] = ($paymentData['user_id'] == $user_id) ? "YES" : "NO";
                        array_push($response, $arr);
                    }
                }

            }
        }
        return $response;
    }

    public static function get_payment_item_detail()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if (isset($data['app_key'])) {
            $app_key = $data['app_key'];
            $user_id = $data['user_id'];
            $thin_app_id = $data['thin_app_id'];
            $payment_item_id = $data['payment_item_id'];
            $response = array();


            if ($user_id != '' && $app_key != '' && $thin_app_id != '' && $payment_item_id) {

                $connection = ConnectionUtil::getConnection();
                $paymentItemRS = $connection->query("SELECT * FROM `payment_items` WHERE `id` = '" . $payment_item_id . "' AND `thinapp_id` = '" . $thin_app_id . "' AND `status` = 'ACTIVE' AND `quantity_status` = 'UNSOLD' LIMIT 1");
                $paymentItemData = mysqli_fetch_all($paymentItemRS, MYSQLI_ASSOC);
                $tmpArr = array();
                foreach ($paymentItemData as $paymentData) {
                    $paymentData['comment'] = '';
                    $tmpArr[] = $paymentData;
                }
                $paymentItemData = $tmpArr;

                if (count($paymentItemData) > 0) {
                    $dataToSend = $paymentItemData[0];

                    if ($dataToSend['quantity_type'] == 'LIMITED') {
                        $remainQuantity = ($dataToSend['quantity'] - (int)$dataToSend['total_orders']);

                        if ($remainQuantity < $dataToSend['maximum_order_quantity']) {
                            $dataToSend['maximum_order_quantity'] = $remainQuantity;
                        }

                    }

                    if ($dataToSend['payment_type'] != 'BY_FILE') {
                        $response['status'] = 1;
                        $response['message'] = "Payment item found";
                        $response['data']['payment_item'] = $dataToSend;
                    } else {
                        $paymentFileAmountRS = $connection->query("SELECT `amount`,`comment` FROM `payment_file_amounts` WHERE `thinapp_id` = '" . $thin_app_id . "' AND `payment_item_id` = '" . $payment_item_id . "' AND `user_id` = '" . $user_id . "' AND `status` = 'ACTIVE' LIMIT 1");
                        $paymentFileData = mysqli_fetch_all($paymentFileAmountRS, MYSQLI_ASSOC);
                        if (count($paymentFileData) > 0) {
                            $dataToSend['amount'] = ($dataToSend['amount']) ? $dataToSend['amount'] : $paymentFileData[0]['amount'];
                            $dataToSend['total_amount'] = $paymentFileData[0]['amount'];
                            $dataToSend['comment'] = $paymentFileData[0]['comment'];
                            $dataToSend['payment_type'] = 'AMOUNT';
                            $dataToSend['amount_type'] = 'ADMIN_DEFINED';
                            $response['status'] = 1;
                            $response['message'] = "Payment item found";
                            $response['data']['payment_item'] = $dataToSend;
                        } else {
                            $response['status'] = 0;
                            $response['message'] = "No payment item found";
                        }
                    }
                } else {
                    $response['status'] = 0;
                    $response['message'] = "No payment item found";
                }

            } else {
                $response['status'] = 0;
                $response['message'] = "Invalid request parameter";
            }
            echo json_encode($response);
            die;
        }
    }

    public static function get_my_order_hisotry()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if (isset($data['app_key'])) {
            $app_key = $data['app_key'];
            $user_id = $data['user_id'];
            $thin_app_id = $data['thin_app_id'];
            $mobile = $data['mobile'];
            $fileName = 'get_my_order_hisotry' . $thin_app_id . '_user' . $user_id;
            $offset = $data['offset'];
            $limit = PAGINATION_LIMIT;
            $response = array();
            if ($user_id != '' && $app_key != '' && $thin_app_id != '') {
                $dataToSend = WebservicesFunction::getMyOrderHisotryDB($app_key, $user_id, $thin_app_id, $offset, $limit, $mobile);
                if (count($dataToSend) > 0) {
                    $response['status'] = 1;
                    $response['message'] = "Payment item order list found";
                    $response['data']['payment_item_list'] = $dataToSend;
                    $fileData[$offset] = $dataToSend;
                    // WebservicesFunction::createJson($fileName, $fileData, 'CREATE');
                } else {
                    $response['status'] = 0;
                    $response['message'] = "There is no payment item order";
                }
                /*	} */
            } else {
                $response['status'] = 0;
                $response['message'] = "Invalid request parameter";
            }
            echo json_encode($response);
            die;
        }
    }

    public static function getMyOrderHisotryDB($app_key = null, $user_id = null, $thin_app_id = null, $offset = null, $limit = null, $mobile = null)
    {
        $response = array();
        if ($user_id != '' && $app_key != '' && $thin_app_id != '') {
            $offset = $offset * $limit;
            $connection = ConnectionUtil::getConnection();
            /* app functionlity  app_payment_transactions; */
            $paymentItemIdRS = $connection->query("SELECT `id`,`payment_item_id`,`total_amount` FROM `app_payment_transactions` WHERE thinapp_id= $thin_app_id and (`user_id` = '" . $user_id . "' OR `mobile` = '" . $mobile . "') AND `status` = 'ACTIVE'");
            $paymentItemIdData = mysqli_fetch_all($paymentItemIdRS, MYSQLI_ASSOC);
            $paymentItemIDString = '';


            if (!empty($paymentItemIdData)) {
                $paymentItemID = array_column($paymentItemIdData, 'payment_item_id');
                $paymentItemIDString = "`id` IN ('" . implode("','", $paymentItemID) . "') ";
                $paymentRS = $connection->query("SELECT `payment_items`.*,`app_payment_transactions`.`id` AS `app_payment_transaction_id`,`app_payment_transactions`.`payment_item_id`,`app_payment_transactions`.`total_amount` AS `tran_total_amount`,`app_payment_transactions`.`amount` AS `tran_amount` FROM `app_payment_transactions` LEFT JOIN `payment_items` ON( `app_payment_transactions`.`payment_item_id` = `payment_items`.`id` ) WHERE `payment_items`.`status` = 'ACTIVE' AND (`app_payment_transactions`.`user_id` = '" . $user_id . "' OR `app_payment_transactions`.`mobile` = '" . $mobile . "') AND `payment_items`.`status` = 'ACTIVE' and payment_items.thinapp_id =$thin_app_id ORDER BY `app_payment_transactions`.`id` DESC LIMIT " . $limit . " OFFSET " . $offset);
                $paymentItem = mysqli_fetch_all($paymentRS, MYSQLI_ASSOC);
                $dataToSend = array();
                $arr = array();
                if (!empty($paymentItem)) {
                    foreach ($paymentItem as $key => $paymentData) {
                        $arr['id'] = $paymentData['id'];
                        $arr['title'] = $paymentData['title'];
                        $arr['description'] = $paymentData['description'];
                        $arr['image_path'] = $paymentData['image_path'];
                        $arr['payment_type'] = $paymentData['payment_type'];
                        $arr['amount_type'] = $paymentData['amount_type'];
                        $arr['amount'] = $paymentData['tran_amount'];
                        $arr['quantity_type'] = $paymentData['quantity_type'];
                        $arr['quantity'] = $paymentData['quantity'];
                        $arr['ask_for_quanitiy'] = $paymentData['ask_for_quanitiy'];
                        $arr['show_last_date'] = $paymentData['show_last_date'];
                        $arr['last_date'] = $paymentData['last_date'];
                        $arr['question_to_ask'] = $paymentData['question_to_ask'];
                        $arr['home_delivery'] = $paymentData['home_delivery'];
                        $arr['discount_enable'] = $paymentData['discount_enable'];
                        $arr['discount_type'] = $paymentData['discount_type'];
                        $arr['discount_value'] = $paymentData['discount_value'];
                        $arr['total_amount'] = $paymentData['tran_total_amount'];
                        $arr['app_payment_transaction_id'] = $paymentData['app_payment_transaction_id'];
                        $arr['share_on'] = $paymentData['share_on'];
                        $arr['channel_id'] = $paymentData['channel_id'];
                        $arr['status'] = $paymentData['status'];
                        $arr['is_owner'] = ($paymentData['user_id'] == $user_id) ? "YES" : "NO";
                        array_push($response, $arr);
                    }
                }
            }
        }
        return $response;
    }

    public static function get_payment_item_order_detail()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if (isset($data['app_key'])) {
            $app_key = $data['app_key'];
            $user_id = $data['user_id'];
            $thin_app_id = $data['thin_app_id'];
            $payment_item_id = $data['payment_item_id'];
            $app_payment_transaction_id = $data['app_payment_transaction_id'];
            $response = array();

            if ($user_id != '' && $app_key != '' && $thin_app_id != '' && $payment_item_id && $app_payment_transaction_id != '') {

                $connection = ConnectionUtil::getConnection();
                $appPaymentTransactionRS = $connection->query("SELECT * FROM `app_payment_transactions` WHERE `id` = '" . $app_payment_transaction_id . "' AND `thinapp_id` = '" . $thin_app_id . "' AND `status` = 'ACTIVE' LIMIT 1");
                $appPaymentTransactionData = mysqli_fetch_all($appPaymentTransactionRS, MYSQLI_ASSOC);

                if (count($appPaymentTransactionData) > 0) {
                    $appPaymentTransaction = $appPaymentTransactionData[0];

                    $paymentRS = $connection->query("SELECT * FROM `payment_items` WHERE `id` = '" . $appPaymentTransaction['payment_item_id'] . "' AND `status` = 'ACTIVE' LIMIT 1");
                    $paymentItem = mysqli_fetch_all($paymentRS, MYSQLI_ASSOC);
                    $dataToSend = array();
                    $arr = array();
                    $paymentItem = $paymentItem[0];
                    if (!empty($paymentItem)) {
                        $arr['id'] = $paymentItem['id'];
                        $arr['title'] = $paymentItem['title'];
                        $arr['description'] = $paymentItem['description'];
                        $arr['image_path'] = $paymentItem['image_path'];
                        $arr['show_last_date'] = $paymentItem['show_last_date'];
                        $arr['last_date'] = $paymentItem['last_date'];
                        $arr['question_to_ask'] = $paymentItem['question_to_ask'];
                        $arr['home_delivery'] = $paymentItem['home_delivery'];
                        $arr['discount_enable'] = $paymentItem['discount_enable'];
                        $arr['app_payment_transaction_id'] = $appPaymentTransaction['id'];
                        $arr['payment_file_amount_id'] = $appPaymentTransaction['payment_file_amount_id'];
                        $arr['quantity'] = (int)$appPaymentTransaction['quantity'];
                        $arr['answer_of_question'] = $appPaymentTransaction['answer_of_question'];
                        $arr['delivery_address'] = $appPaymentTransaction['delivery_address'];
                        $arr['discount_type'] = ($appPaymentTransaction['discount_type'] === null) ? 'FIX_AMOUNT' : $appPaymentTransaction['discount_type'];
                        $arr['discount_value'] = (int)$appPaymentTransaction['discount_value'];
                        $arr['total_amount'] = (int)$appPaymentTransaction['total_amount'];
                        $arr['amount'] = !empty($paymentItem['amount']) ? (int)$paymentItem['amount'] : (int)$appPaymentTransaction['amount'];
                        $arr['payment_type'] = ($paymentItem['payment_type'] == 'BY_FILE') ? 'AMOUNT' : $paymentItem['payment_type'];
                        $arr['created'] = $appPaymentTransaction['created'];

                        $amount = ((int)$paymentItem['amount'] * (int)$arr['quantity']);
                        if ($arr['discount_type'] == 'PERCENTAGE') {
                            $arr['discounted_price'] = ($amount * ((int)$arr['discount_value'] / 100));
                        } else {
                            $arr['discounted_price'] = ((int)$arr['discount_value'] * (int)$arr['quantity']);
                        }

                        $arr['sub_total_amount'] = $amount;
                        $arr['transaction_status'] = $appPaymentTransaction['transaction_status'];
                        $arr['reason'] = $appPaymentTransaction['reason'];
                        $arr['unique_id'] = $appPaymentTransaction['unique_id'];
                        $arr['status'] = $appPaymentTransaction['status'];
                        $arr['is_owner'] = ($paymentItem['user_id'] == $user_id) ? "YES" : "NO";
                    }
                    $response['status'] = 1;
                    $response['message'] = "No payment item found";
                    $response['data']['transaction'] = $arr;

                } else {
                    $response['status'] = 0;
                    $response['message'] = "No payment item found";
                }

            } else {
                $response['status'] = 0;
                $response['message'] = "Invalid request parameter";
            }
            echo json_encode($response);
            die;
        }
    }

    public static function get_all_order_list()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if (isset($data['app_key'])) {
            $app_key = $data['app_key'];
            $user_id = $data['user_id'];
            $thin_app_id = $data['thin_app_id'];
            $offset = $data['offset'];
            $redeemStatus = (isset($data['redeem_status']) && !empty($data['redeem_status'])) ? $data['redeem_status'] : '';
            $uniqueID = (isset($data['unique_id']) && !empty($data['unique_id'])) ? $data['unique_id'] : '';
            $redeemTime = (isset($data['redeem_time']) && !empty($data['redeem_time'])) ? $data['redeem_time'] : '';
            $title = (isset($data['title']) && !empty($data['title'])) ? $data['title'] : '';
            $mobile = (isset($data['mobile']) && !empty($data['mobile'])) ? $data['mobile'] : '';

            $limit = PAGINATION_LIMIT;
            $response = array();
            $dataToSend = array();
            if ($user_id != '' && $app_key != '' && $thin_app_id != '') {

                $offset = $offset * $limit;
                $connection = ConnectionUtil::getConnection();
                /* app functionlity  payment_file_amounts; */
                $condition = '';

                if ($redeemStatus != '') {
                    $condition .= " AND `app_payment_transactions`.`redeem_status` = '" . $redeemStatus . "' ";
                }
                if ($uniqueID != '') {
                    $condition .= " AND `app_payment_transactions`.`unique_id` = '%" . $uniqueID . "%' ";
                }
                if ($redeemTime != '') {
                    $condition .= " AND `app_payment_transactions`.`redeem_time` >= '" . $redeemTime . "' AND `app_payment_transactions`.`redeem_time` < '" . $redeemTime . "' ";
                }
                if ($title != '') {
                    $condition .= " AND `payment_items`.`title` LIKE '%" . $title . "%' ";
                }
                if ($mobile != '') {
                    $condition .= " AND `app_payment_transactions`.`mobile` LIKE '%" . $mobile . "%' ";
                }

                $paymentItemRS = $connection->query("SELECT `app_payment_transactions`.*,`payment_items`.`title`,`payment_items`.`image_path` FROM `app_payment_transactions` LEFT JOIN `payment_items` ON (`app_payment_transactions`.`payment_item_id` = `payment_items`.`id`) WHERE `app_payment_transactions`.`thinapp_id` = '" . $thin_app_id . "' AND `app_payment_transactions`.`status` = 'ACTIVE' " . $condition . " ORDER BY `app_payment_transactions`.`id` DESC LIMIT " . $limit . " OFFSET " . $offset . " ");
                $paymentItemData = mysqli_fetch_all($paymentItemRS, MYSQLI_ASSOC);

                $dataToSend = array();
                $arr = array();
                foreach ($paymentItemData as $key => $paymentData) {
                    $arr['id'] = $paymentData['id'];
                    $arr['title'] = $paymentData['title'];
                    $arr['thinapp_id'] = $paymentData['thinapp_id'];
                    $arr['payment_item_id'] = $paymentData['payment_item_id'];
                    $arr['payment_file_amount_id'] = $paymentData['payment_file_amount_id'];
                    $arr['mobile'] = $paymentData['mobile'];
                    $arr['user_id'] = $paymentData['user_id'];
                    $arr['total_amount'] = $paymentData['total_amount'];
                    $arr['redeem_status'] = $paymentData['redeem_status'];
                    $arr['transaction_status'] = $paymentData['transaction_status'];
                    $arr['quantity'] = $paymentData['quantity'];
                    $arr['redeem_time'] = $paymentData['redeem_time'];
                    $arr['unique_id'] = $paymentData['unique_id'];
                    $arr['image_path'] = $paymentData['image_path'];
                    $arr['created'] = date("d M Y", strtotime($paymentData['created']));
                    array_push($dataToSend, $arr);
                }
                $response['status'] = 1;
                $response['message'] = "Order list found";
                $response['data']['order_list'] = $dataToSend;

            } else {
                $response['status'] = 0;
                $response['message'] = "Invalid request parameter";
            }
            echo json_encode($response);
            die;
        }
    }

    /*************PAYMENT ITEM END**************/


    /**************DRIVE START***************/


    public static function add_folder($data = null, $connection = false, $auto_commit = false, $is_default_folder_to_add = false)
    {

        $return_result = true;
        if (empty($data)) {
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);
            $return_result = false;
        }


        if ($_SERVER['REQUEST_METHOD'] === 'POST' || $return_result === true) {
            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $folder_name = isset($data['folder_name']) ? $data['folder_name'] : "";
            $folder_type = isset($data['folder_type']) ? $data['folder_type'] : "";
            $file_type = isset($data['file_type']) ? $data['file_type'] : "";
            $file_name = isset($data['file_name']) ? $data['file_name'] : "";
            $file_path = isset($data['file_path']) ? $data['file_path'] : "";
            $file_size = isset($data['file_size']) ? $data['file_size'] : "";
            $description = isset($data['description']) ? $data['description'] : "";
            $allow_add_file = isset($data['allow_add_file']) ? $data['allow_add_file'] : "NO";
            $folder_add_from_number = isset($data['folder_add_from_number']) ? $data['folder_add_from_number'] : "";
            $is_instruction_bucket = isset($data['is_instruction_bucket']) ? $data['is_instruction_bucket'] : "NO";
            $default_prescription_folder = isset($data['default_prescription_folder']) ? $data['default_prescription_folder'] : "NO";
            $child_number = isset($data['child_number']) ? $data['child_number'] : "";
            $appointment_customer_id = isset($data['appointment_customer_id']) ? $data['appointment_customer_id'] : 0;
            $children_id = isset($data['children_id']) ? $data['children_id'] : 0;


            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid  mobile ';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($folder_name)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid folder name';
            } else if (empty($folder_type)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid folder type';
            } else if ($is_instruction_bucket != "YES" && $is_instruction_bucket != "NO") {
                $response['status'] = 0;
                $response['message'] = 'Invalid instruction';
            } else if ($allow_add_file != "YES" && $allow_add_file != "NO") {
                $response['status'] = 0;
                $response['message'] = 'Invalid perminssion';
            } else {
                try {
                    if ($connection === false) {
                        $connection = ConnectionUtil::getConnection();
                    }

                    if ($auto_commit === false) {
                        $connection->autocommit(false);
                    }

                    if (!empty($appointment_customer_id) || !empty($children_id)) {

                        $label = ' appointment_customer_id ';
                        $patient_id = $appointment_customer_id;
                        if (!empty($children_id)) {
                            $label = " children_id ";
                            $patient_id = $children_id;
                        }
                        $query = "select id from drive_folders  where thinapp_id = $thin_app_id and $label = $patient_id";

                    } else {
                        if ($is_default_folder_to_add === true) {
                            $query = "select id from drive_folders where status = 'ACTIVE' and folder_add_from_number = '$folder_add_from_number' and thinapp_id = $thin_app_id";
                        } else {
                            $query = "select id from drive_folders where status = 'ACTIVE' and folder_name = '$folder_name' and thinapp_id = $thin_app_id and user_id = $user_id limit 1";
                        }
                    }

                    $folder = $connection->query($query);
                    if (!$folder->num_rows) {
                        $created = Custom::created();

                        $sql = "INSERT INTO drive_folders (default_prescription_folder, appointment_customer_id, children_id, child_number, folder_add_from_number, allow_add_file, is_instruction_bucket, user_id, thinapp_id, mobile, folder_name, folder_type, description, created, modified) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                        $stmt_sub = $connection->prepare($sql);
                        $stmt_sub->bind_param('sssssssssssssss', $default_prescription_folder, $appointment_customer_id, $children_id, $child_number, $folder_add_from_number, $allow_add_file, $is_instruction_bucket, $user_id, $thin_app_id, $mobile, $folder_name, $folder_type, $description, $created, $created);
                        if ($stmt_sub->execute()) {
                            $drive_folder_id = $stmt_sub->insert_id;
                            if (!empty($file_name) && !empty($file_path) && !empty($file_size)) {
                                $file_type = Custom::getFileType($file_name);
                                $sql = "INSERT INTO drive_files (user_id, thinapp_id, mobile, file_type, file_name, file_size, file_path, drive_folder_id , created, modified) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                                $stmt_file = $connection->prepare($sql);
                                $stmt_file->bind_param('ssssssssss', $user_id, $thin_app_id, $mobile, $file_type, $file_name, $file_size, $file_path, $drive_folder_id, $created, $created);
                                if ($stmt_file->execute()) {
                                    $res = Custom::updateFileCount($connection, $drive_folder_id, 1, "ADD");
                                    if ($auto_commit === false) {
                                        $connection->commit();
                                    }

                                    $response['status'] = 1;
                                    $response['message'] = "Folder add successfully";
                                    $response['folder_id'] = $drive_folder_id;
                                    WebservicesFunction::addUserStaticToJson('', $user_id, $thin_app_id, $mobile, "MEDICAL RECORDS", "ADD FOLDER", 'add_folder');

                                } else {
                                    $response['status'] = 0;
                                    $response['message'] = "Folder could not be saved";
                                }
                            } else {
                                if ($auto_commit === false) {
                                    $connection->commit();
                                }
                                $response['status'] = 1;
                                $response['message'] = "Folder add successfully";
                                $response['folder_id'] = $drive_folder_id;
                                WebservicesFunction::addUserStaticToJson('', $user_id, $thin_app_id, $mobile, "MEDICAL RECORDS", "ADD FOLDER", 'add_folder');

                            }
                        } else {
                            $response['status'] = 0;

                            $response['message'] = "Folder could not be saved";
                        }
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Folder name already exist";
                    }

                } catch (Exception $e) {
                    if ($auto_commit === false) {
                        $connection->rollback();
                    }

                }
            }


            if ($return_result === true) {
                return json_encode($response);
            } else {
                Custom::sendResponse($response);
            }
            // echo json_encode($response);die;
        }
        exit();

    }

    public static function add_file($data = null, $send_notification = true, $return = false)
    {
        if (empty($data)) {
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);
        }

        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $role_id = isset($data['role_id']) ? $data['role_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : 0;
            $file_array = isset($data['file_array']) ? $data['file_array'] : "";
            $listing_type = isset($data['listing_type']) ? $data['listing_type'] : '';
            $memo_text = isset($data['memo_text']) ? $data['memo_text'] : '';
            $memo_label = isset($data['memo_label']) ? $data['memo_label'] : '';
            $file_caption = isset($data['file_caption']) ? $data['file_caption'] : "";
            $drive_folder_id = isset($data['drive_folder_id']) ? $data['drive_folder_id'] : '';
            $category_id = isset($data['category_id']) ? $data['category_id'] : 1;
            $is_pad_prescription = isset($data['is_pad_prescription']) ? $data['is_pad_prescription'] : "NO";
            $is_tab_prescription = isset($data['is_tab_prescription']) ? $data['is_tab_prescription'] : "NO";
            $is_medical_certificate = isset($data['is_medical_certificate']) ? $data['is_medical_certificate'] : "NO";
            $is_attachment = isset($data['is_attachment']) ? $data['is_attachment'] : "NO";
            $mode = isset($data['mode']) ? $data['mode'] : "";
            $is_writing_prescription = isset($data['is_writing_prescription']) ? $data['is_writing_prescription'] : "NO";
            $drive_file_id = isset($data['drive_file_id']) ? $data['drive_file_id'] : 0;
            $appointment_id = isset($data['appointment_id']) ? $data['appointment_id'] : 0;
            $doctor_assigned_pen_id = isset($data['doctor_assigned_pen_id']) ? $data['doctor_assigned_pen_id'] : 0;
            $attachment_urls = isset($data['attachment_urls']) ? $data['attachment_urls'] : "";
            $time_stamp = isset($data['time_stamp']) ? $data['time_stamp'] : "";
        	$share_with_doctor_id = isset($data['share_with_doctor_id']) ? $data['share_with_doctor_id'] : 0;
            if(empty($time_stamp)){
                $time_stamp = @$file_array[0]['time_stamp'];
            }
            if(empty($doctor_id)){
                $doctor_id = isset($file_array[0]['doctor_id'])?$file_array[0]['doctor_id']:0;
            }

            $created = (isset($data['created_date']) && !empty($data['created_date']))  ? $data['created_date'] : Custom::created();

            $folder_data = array();
            $object_id = 0;
            $background_data = $send_sms = false;

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid  mobile ';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if ($listing_type != "MEMO" && $listing_type != "OTHER") {
                $response['status'] = 0;
                $response['message'] = 'Invalid listing type';
            } else {
                try {


                    $save_flag_array = $save_file_data = array();
                    $connection = ConnectionUtil::getConnection();


                    if ($mode == 'IPD') {
                        $category_id = 8;
                    } else if ($mode == 'EMERGENCY') {
                        $category_id = 9;
                    }

                    if (empty($drive_file_id) || $drive_file_id == 0) {
                        $connection->autocommit(false);

                        if(!empty($time_stamp) && empty($drive_folder_id)){
                            $folder_data = Custom::get_folder_data_by_time_stamp($time_stamp,$thin_app_id,$doctor_id);
                            if(!empty($folder_data)){
                                $drive_folder_id =$folder_data['id'];
                            }
                        }else{
                            $folder_data = Custom::get_folder_data($drive_folder_id);
                        }

                        if (empty($role_id)) {
                            $role_id = Custom::get_user_role_id($user_id);
                        }

                        if (!empty($folder_data) && ($folder_data['default_prescription_folder'] == "YES" || $folder_data['user_id'] == $user_id || $folder_data['allow_add_file'] == "YES" || $role_id == 5 || $doctor_id > 0)) {
                            if (!empty($listing_type) && $listing_type == "OTHER") {
                                $total_save_files = 0;
                                foreach ($file_array as $key => $file_obj) {
                                    $file_type = isset($file_obj['file_type']) ? $file_obj['file_type'] : "";
                                    $file_name = isset($file_obj['file_name']) ? Custom::createFileName($file_obj['file_name']) : "";
                                    $file_path = isset($file_obj['file_path']) ? $file_obj['file_path'] : "";
                                    //$file_size = isset($file_obj['file_size']) ? $file_obj['file_size'] : "";
                                    $file_size = Custom::getRemoteFileSize($file_path,"MB");
                                    if(empty($file_size)){
                                        $file_size = isset($file_obj['file_size']) ? $file_obj['file_size'] : "";
                                    }
                                    $raw_string = isset($file_obj['raw_string']) ? $file_obj['raw_string'] : "";
                                    $drive_folder_id = isset($file_obj['drive_folder_id']) ? $file_obj['drive_folder_id'] : $drive_folder_id;
                                    $paper_unique_id = isset($file_obj['paper_unique_id']) ? $file_obj['paper_unique_id'] : "";
                                    $myscript_string = isset($file_obj['myscript_string']) ? $file_obj['myscript_string'] : "";
                                    $myscript_instance_id = isset($file_obj['myscript_instance_id']) ? $file_obj['myscript_instance_id'] : "";
                                    $barcode = isset($file_obj['barcode']) ? $file_obj['barcode'] : "";
                                    $appointment_id = isset($file_obj['appointment_id']) ? $file_obj['appointment_id'] : "";
                                    $doctor_id = !empty($file_obj['doctor_id']) ? $file_obj['doctor_id'] : $doctor_id;
                                    $time_stamp = !empty($file_obj['time_stamp']) ? $file_obj['time_stamp'] : '';
                                    $doctor_assigned_pen_id = !empty($file_obj['doctor_assigned_pen_id']) ? $file_obj['doctor_assigned_pen_id'] : $doctor_assigned_pen_id;
                                    $attachment_urls = !empty($file_obj['attachment_urls']) ? $file_obj['attachment_urls'] : $attachment_urls;

                                    $file_type = Custom::getFileType($file_name);
                                    if (empty($file_name)) {
                                        $response['status'] = 0;
                                        $response['message'] = 'Invalid file name';
                                    } else if (empty($file_path)) {
                                        $response['status'] = 0;
                                        $response['message'] = 'Invalid file path';
                                    } else if (empty($file_size)) {
                                        $response['status'] = 0;
                                        $response['message'] = 'Invalid file size';
                                    } else {
                                        $sql = "INSERT INTO drive_files (share_with_doctor_id, time_stamp, doctor_assigned_pen_id,doctor_id, paper_unique_id, barcode, myscript_string, raw_string, myscript_instance_id, appointment_customer_staff_service_id, is_attachment, is_writing_prescription,is_medical_certificate, is_tab_prescription, is_pad_prescription,file_category_master_id, user_id, thinapp_id, mobile, file_type, file_name, file_size, file_path, drive_folder_id, listing_type, memo_text, created, modified) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                                        $stmt_sub = $connection->prepare($sql);
                                        $stmt_sub->bind_param('ssssssssssssssssssssssssssss', $share_with_doctor_id, $time_stamp, $doctor_assigned_pen_id, $doctor_id, $paper_unique_id, $barcode, $myscript_string, $raw_string, $myscript_instance_id, $appointment_id, $is_attachment, $is_writing_prescription, $is_medical_certificate, $is_tab_prescription, $is_pad_prescription, $category_id, $user_id, $thin_app_id, $mobile, $file_type, $file_name, $file_size, $file_path, $drive_folder_id, $listing_type, $file_caption, $created, $created);
                                        if ($stmt_sub->execute()) {

                                            $total_save_files++;
                                            $save_flag_array[] = true;
                                            $save_file_data[$key]['file_id'] = $save_file_id = $stmt_sub->insert_id;
                                            $save_file_data[$key]['file_name'] = $file_name;
                                        
                                        	if($raw_string != "")
                                            {
                                                $sql_update = "UPDATE drive_files  SET raw_string = ''  WHERE id = $save_file_id;";
                                                $stmt_update_file = $connection->prepare($sql_update);
                                                $update_file = $stmt_update_file->execute();
                                            }   
                                                                            
                                                                            
                                            if (!empty($attachment_urls)) {
                                                $attachment_urls = explode(",", $attachment_urls);
                                                if (count($attachment_urls) > 0) {
                                                    foreach ($attachment_urls as $attachment_key => $attachment_file_path) {
                                                        $attachment_file_path = trim($attachment_file_path);
                                                        $save_file_name = Custom::getFileName($attachment_file_path);
                                                        $save_file_type = Custom::getFileType($save_file_name);
                                                        $save_file_size = Custom::getRemoteFileSize($attachment_file_path,"MB");
                                                        $save_is_attachment = "YES";
                                                        $save_category_id = 7;
                                                        $sql = "INSERT INTO drive_files (attachment_prescription_id, doctor_id, is_attachment, file_category_master_id, user_id, thinapp_id, mobile, file_type, file_name, file_size, file_path, drive_folder_id, created, modified) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                                                        $stmt_attachemnt = $connection->prepare($sql);
                                                        $stmt_attachemnt->bind_param('ssssssssssssss', $save_file_id, $doctor_id, $save_is_attachment, $save_category_id, $user_id, $thin_app_id, $mobile, $save_file_type, $save_file_name, $save_file_size, $attachment_file_path, $drive_folder_id, $created, $created);
                                                        if ($stmt_attachemnt->execute()) {
                                                            $total_save_files++;

                                                        }
                                                    }
                                                }
                                            }

                                        } else {
                                            $save_flag_array[] = false;
                                        }
                                    }
                                }
                                if ($total_save_files > 0) {
                                    $save_flag_array[] = Custom::updateFileCount($connection, $drive_folder_id, $total_save_files, "ADD");
                                }


                            }
                            if (!empty($listing_type) && $listing_type == "MEMO") {
                                if (empty($memo_text)) {
                                    $response['status'] = 0;
                                    $response['message'] = 'Invalid memo text';
                                } else if (empty($memo_label)) {
                                    $response['status'] = 0;
                                    $response['message'] = 'Invalid memo label';
                                } else {
                                    $sql = "INSERT INTO drive_files (doctor_id, share_with_doctor_id, file_category_master_id, user_id, thinapp_id, mobile,  memo_text, memo_label, drive_folder_id, listing_type, created, modified) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                                    $stmt_sub = $connection->prepare($sql);
                                    $stmt_sub->bind_param('ssssssssssss', $doctor_id, $share_with_doctor_id, $category_id, $user_id, $thin_app_id, $mobile, $memo_text, $memo_label, $drive_folder_id, $listing_type, $created, $created);
                                    $save_flag_array[] = $stmt_sub->execute();
                                    $save_flag_array[] = Custom::updateMemoCount($connection, $drive_folder_id, 1, "ADD");
                                }
                            }

                            $update_date = Custom::updat_folder_modified_date($connection, $drive_folder_id);

                            if (!empty($save_flag_array) && !in_array(false, $save_flag_array) && $update_date === true) {
                                $connection->commit();
                                $response['status'] = 1;
                                $response['message'] = "File saved  successfully";
                                $response['data']['saved_file'] = $save_file_data;
                                $send_sms = true;
                                WebservicesFunction::addUserStaticToJson('', $user_id, $thin_app_id, $mobile, "MEDICAL RECORDS", "ADD FILE", 'add_file');

                                $background_data = true;

                            } else {
                                $response['status'] = 0;
                                $response['message'] = "File could not be saved";
                            }

                        } else {
                            $response['status'] = 0;
                            $response['message'] = 'Permission denied';
                        }

                    } else {
                        /* this code update drive file path when doctor update prescription */
                        $file_data = Custom::get_file_data($drive_file_id);
                        if (!empty($file_data)) {

                            $file_obj = $file_array;
                            $file_type = isset($file_obj[0]['file_type']) ? $file_obj[0]['file_type'] : "";
                            $file_name = isset($file_obj[0]['file_name']) ? $file_obj[0]['file_name'] : "";
                            $file_path = isset($file_obj[0]['file_path']) ? $file_obj[0]['file_path'] : "";
                            $file_size = isset($file_obj[0]['file_size']) ? $file_obj[0]['file_size'] : "";
                            $file_type = Custom::getFileType($file_name);
                            $created = Custom::created();

                            $sql = "UPDATE  drive_files SET file_name =?, file_type=?, file_size =?, file_path = ?, modified = ? where id = ?";
                            $stmt = $connection->prepare($sql);
                            $stmt->bind_param('ssssss', $file_name, $file_type, $file_size, $file_path, $created, $drive_file_id);
                            if ($stmt->execute()) {
                                $file_name = explode("/", $file_path);
                                $file_name = end($file_name);
                                $response['status'] = 1;
                                $response['message'] = 'File update successfully.';
                                $save_file_data[0]['file_id'] = $drive_file_id;
                                $save_file_data[0]['file_name'] = $file_name;
                                $response['data']['saved_file'] = $save_file_data;
                            } else {
                                $response['status'] = 0;
                                $response['message'] = 'File could not update.';
                            }
                        } else {
                            $response['status'] = 0;
                            $response['message'] = 'File not exist.';
                        }

                    }


                } catch (Exception $e) {
                    $connection->rollback();
                }
            }
        
        	if($category_id==6 && $thin_app_id==134){
                $user_role = Custom::get_appointment_role($mobile,$thin_app_id,$role_id);
                if(in_array($user_role,array('ADMIN','DOCTOR','STAFF'))){
                    $pro_id = Custom::create_proforma($thin_app_id,$save_file_data[0]['file_id']);
                }
            }
        
            if ($return === false) {
                Custom::sendResponse($response);
                /* send notification to users */
                Custom::send_process_to_background();
                $is_automatic_share_permission = Custom::check_user_permission($thin_app_id, 'AUTOMATIC_FOLDER_SHARE', true);
                if ($is_automatic_share_permission == "YES") {
                    $auto_share_folder = true;
                }

            	if(!empty($share_with_doctor_id)){
                    $doctorData= Custom::get_doctor_by_id($share_with_doctor_id);
                    $user_id_list[0]['is_doctor']='YES';
                    $user_id_list[0]['share_with_mobile']=$doctorData['mobile'];
                    $user_id_list[0]['share_to_user_id']=$doctorData['user_id'];
                    $user_id_list[0]['share_from_mobile']=$mobile;
                }else{
                  $user_id_list = Custom::get_folder_shared_user_mobile_and_id($drive_folder_id);
                  if(!empty($user_id_list)){
                    $show_ipd = Custom::check_user_permission($thin_app_id,'SHOW_IPD_CATEGORY_TO_PATIENT');
                    if(($show_ipd == "NO" ||$show_ipd===false) && $category_id == 8){
                        $tmp=array();
                        foreach($user_id_list as $key => $value){
                            if($value['is_doctor'] =="YES"){
                                $tmp[]= $value;
                            }
                        }
                        $user_id_list = $tmp;
                    }
                }
                }
                


                if (!empty($folder_data) && $background_data === true && $send_notification === true) {
                        $user_ids = array_column($user_id_list, "share_to_user_id");
                        $username = Custom::getUserNameById($user_id);
                        if (empty($username)) {
                            $username = $mobile;
                        }
                        if (!empty($listing_type) && $listing_type == "MEMO") {
                            $message = "Memo added to folder " . $folder_data['folder_name'] . " by " . $username;

                        } else {
                            $label = (count($file_array) > 1) ? "New files" : "New file " . $file_name;
                            $message = $label . " added to folder " . $folder_data['folder_name'] . " by " . $username;
                        }
                        $option = array(
                            'thinapp_id' => $thin_app_id,
                            'channel_id' => 0,
                            'role' => "USER",
                            'flag' => 'FILE_ADD',
                            'title' => "New file added to folder " . $folder_data['folder_name'],
                            'message' => mb_strimwidth($message, 0, 250, '...'),
                            'description' => mb_strimwidth($message, 0, 250, '...'),
                            'chat_reference' => '',
                            'module_type' => 'DOCUMENT',
                            'module_type_id' => $drive_folder_id,
                            'firebase_reference' => ""
                        );
                
                		$user_ids = Custom::search_remove($user_id, $user_ids);
                        Custom::send_notification_by_user_id($option, $user_ids, $thin_app_id);
                        /* $user_role = Custom::hospital_get_user_role($mobile,$thin_app_id,$role_id);
                        if ($folder_data['user_id'] != $user_id) {
                        
                        	if($user_role =='DOCTOR' || $user_role =='STAFF' ){
                            	$user_ids = Custom::search_remove($user_id, $user_ids);
                            	Custom::send_notification_by_user_id($option, $user_ids, $thin_app_id);
                            }else{
                            	if(!empty($share_with_doctor_id)){
                                    $folder_user_data = Custom::get_user_by_id($user_id_list[0]['share_to_user_id']);
                                }else{
                                    $folder_user_data = Custom::get_user_by_id($folder_data['user_id']);
                                }
                            	Custom::send_notification_via_token($option, array($folder_user_data['firebase_token']), $thin_app_id);
                            
                            }
                            

                        } else {
                            $user_ids = Custom::search_remove($user_id, $user_ids);
                            Custom::send_notification_by_user_id($option, $user_ids, $thin_app_id);
                        }*/
                }
                if ($user_id_list) {
                    if ($listing_type != "MEMO" && $send_sms === true) {
                        $username = Custom::get_doctor_first_name($username);
                        $folder_name = Custom::get_string_first_name($folder_data['folder_name']);

                        if ($is_pad_prescription == "YES") {
                            $label = (count($file_array) > 1) ? "New files" : "New file ";
                            $message = "Hi, " . $label . " added to folder " . $folder_name . " by " . $username;
                        } else {
                            $label = (count($file_array) > 1) ? "New files" : "New file " . $file_name;
                            $message = $label . " added to folder " . $folder_name . " by " . $username;
                        }

                        $mobile_numbers = array_column($user_id_list, "share_with_mobile");
                        $mobile_numbers = Custom::search_remove($mobile, $mobile_numbers);

                        $folder_data = Custom::get_folder_by_id($drive_folder_id);
                        if (!empty($folder_data)) {
                            $user_data = Custom::get_user_by_mobile($thin_app_id, $folder_data['mobile']);
                            if (empty($user_data) || @$user_data['app_installed_status'] == 'UNINSTALLED') {
                                $mobile_numbers = Custom::search_remove($folder_data['mobile'], $mobile_numbers);
                            }
                        }
                    
                    
                        Custom::sendFileShareMessage("FOLDER", $drive_folder_id, $mobile_numbers, $message, $thin_app_id, $user_id);
                    }
                }


                $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : 0;
                if (!empty($save_file_data) && !empty($doctor_id)) {
                    /*foreach ($save_file_data as $key => $value) {
                        Custom::add_myscript_tag_with_file_id($thin_app_id, $user_id, $mobile, $doctor_id, $value['file_id']);
                    }*/
                }


            } else {
                return json_encode($response);
            }

        }
        exit();

    }

    public static function add_share($data = null, $send_notification = true, $return_type = false, $connection = false, $auto_commit = false)
    {

        if (empty($data)) {
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);

        }
        if ($_SERVER['REQUEST_METHOD'] === 'POST' || $return_type === true) {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $share_with_mobile = (isset($data['share_with_mobile']) && !empty($data['share_with_mobile'])) ? array_column($data['share_with_mobile'], 'mobile') : "";
            $share_from_mobile = isset($data['share_from_mobile']) ? $data['share_from_mobile'] : "";
            $username = $share_from_mobile;
            $drive_file_id = isset($data['drive_file_id']) ? $data['drive_file_id'] : 0;
            $drive_folder_id = isset($data['drive_folder_id']) ? $data['drive_folder_id'] : 0;
            $channel_id = isset($data['channel_id']) ? $data['channel_id'] : 0;
            $shared_object = isset($data['shared_object']) ? $data['shared_object'] : '';
            $status = isset($data['status']) ? $data['status'] : 'SHARED';

            $background_data = array();

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($share_with_mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid share mobile';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($share_from_mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid from mobile';
            } else if (empty($status)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid status';
            } else if (empty($shared_object)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid share object';
            } else if (empty($drive_file_id) && empty($drive_folder_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid drive';
            } else {
                try {

                    $mobNum = array();
                    if ($connection === false || $connection == null) {
                        $connection = ConnectionUtil::getConnection();
                    }
                    if ($auto_commit === false) {
                        $connection->autocommit(false);
                    }


                    $subscriber = $invalid_mobile_number = false;

                    if (!empty($channel_id)) {
                        $sql = "SELECT mobile FROM subscribers WHERE mobile != $share_from_mobile and  channel_id = $channel_id and status ='SUBSCRIBED' and app_id = $thin_app_id";
                        $sql = $connection->query($sql);
                        if ($sql->num_rows) {
                            $mobNum = array_column(mysqli_fetch_all($sql, MYSQLI_ASSOC), 'mobile');
                            $subscriber = true;
                        }
                    } else {
                        foreach ($share_with_mobile as $mob) {
                            $numMob = Custom::create_mobile_number(str_replace(' ', '', $mob), "+91");
                            if (($numMob !== false) && ($numMob != $share_from_mobile)) {
                                $mobNum[] = $numMob;
                            } else {
                                if ($numMob === false) {
                                    $invalid_mobile_number = true;
                                }
                            }
                        }
                    }

                    if (!empty($mobNum)) {

                        $tot_mob = count($mobNum);
                        //$tot_sms = Custom::get_total_sms_thinapp($thin_app_id,'T');
                        $sharedMobile = $user_data = array();
                        $share_with_mobileStr = implode(",", $mobNum);

                        $sql = "SELECT share_with_mobile FROM drive_shares WHERE thinapp_id = $thin_app_id and drive_file_id = $drive_file_id AND drive_folder_id = $drive_folder_id AND share_with_mobile IN (" . $share_with_mobileStr . ")";
                        $sqlRs = $connection->query($sql);
                        if ($sqlRs->num_rows) {
                            $sharedMobile = array_column(mysqli_fetch_all($sqlRs, MYSQLI_ASSOC), 'share_with_mobile');
                        }
                        $userSql = "SELECT id, mobile  FROM users WHERE thinapp_id = $thin_app_id and mobile IN (" . $share_with_mobileStr . ")";
                        $userSql = $connection->query($userSql);
                        if ($userSql->num_rows) {
                            $user_data = array_column(mysqli_fetch_all($userSql, MYSQLI_ASSOC), 'id', 'mobile');
                        }

                        $send_notification_ids = array();
                        $send_notification_sms = array();
                        $final_array = array();
                        $total_recod_save = 0;
                        $object_id = empty($drive_folder_id) ? $drive_file_id : $drive_folder_id;
                        $file_owner_number = Custom::get_file_folder_owner_mobile($connection, $object_id, $shared_object);
                        $final_array = array_unique($mobNum);
                        foreach ($final_array AS $key => $ShareWithMobile) {
                            if (!in_array($ShareWithMobile, $sharedMobile) && $ShareWithMobile != $file_owner_number) {
                                $created = Custom::created();
                                $share_to_user_id = array_key_exists($ShareWithMobile, $user_data) ? $user_data[$ShareWithMobile] : 0;
                                if ($share_to_user_id > 0) {
                                    $send_notification_ids[] = $share_to_user_id;
                                }
                                $send_notification_sms[] = $ShareWithMobile;

                                $sql = "INSERT INTO drive_shares (thinapp_id, share_with_mobile, share_from_mobile, drive_file_id, drive_folder_id, share_from_user_id, share_to_user_id, shared_object, created, modified) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                                $stmt_sub = $connection->prepare($sql);
                                $stmt_sub->bind_param('ssssssssss', $thin_app_id, $ShareWithMobile, $share_from_mobile, $drive_file_id, $drive_folder_id, $user_id, $share_to_user_id, $shared_object, $created, $created);
                                if ($stmt_sub->execute()) {
                                    $total_recod_save++;
                                } else {
                                    // echo $stmt_sub->error;
                                }
                            }
                        }


                        if ($total_recod_save > 0) {

                            if ($shared_object == 'FOLDER') {
                                $sql = "UPDATE  drive_folders SET share_count = share_count + ?, modified = ? where id = ?";
                                $stmt = $connection->prepare($sql);
                                $stmt->bind_param('sss', $total_recod_save, $created, $drive_folder_id);
                                $stmt->execute();

                                $sqlPath = "SELECT `folder_name` FROM `drive_folders` WHERE `id` = '" . $drive_folder_id . "' LIMIT 1";
                                $sqlRS = $connection->query($sqlPath);
                                $sqlData = mysqli_fetch_assoc($sqlRS);
                                $name = $sqlData['folder_name'];
                            } else {

                                $sql = "UPDATE  drive_files SET share_count = share_count + ?, modified = ? where id = ?";
                                $stmt = $connection->prepare($sql);
                                $stmt->bind_param('sss', $total_recod_save, $created, $drive_file_id);
                                $stmt->execute();

                                $sqlPath = "SELECT `file_path`,`file_name` FROM `drive_files` WHERE `id` = '" . $drive_file_id . "' LIMIT 1";
                                $sqlRS = $connection->query($sqlPath);
                                $sqlData = mysqli_fetch_assoc($sqlRS);
                                //$path = FILE_COPY_URL . Custom::encodeVariable($drive_file_id);
                                $path = $sqlData['file_path'];
                                $name = $sqlData['file_name'];
                            }
                            if ($auto_commit === false) {
                                $connection->commit();
                            }


                            $user_data = WebservicesFunction::get_user_data_by_mobile($share_from_mobile, $thin_app_id);
                            if (!empty($send_notification_sms)) {

                                $username = !empty($user_data['username']) ? $user_data['username'] : $share_from_mobile;
                                $message = $username . " has shared " . ucwords(strtolower($shared_object)) . " " . $name;
                                $background_data['sms']['message'] = $message;
                                $background_data['sms']['mobiles'] = $send_notification_sms;
                            }

                            if (!empty($send_notification_ids)) {

                                $username = !empty($user_data['username']) ? $user_data['username'] : $share_from_mobile;
                                $message = trim($username) . " has shared " . ucwords(strtolower($shared_object)) . " $name";

                                $module_type_id = ($shared_object == 'FOLDER') ? $drive_folder_id : $drive_file_id;
                                $option = array(
                                    'thinapp_id' => $thin_app_id,
                                    'channel_id' => 0,
                                    'role' => "USER",
                                    'flag' => ($shared_object == 'FOLDER') ? 'FOLDER_SHARE' : 'FILE_SHARE',
                                    'title' => "New " . strtolower($shared_object) . " shared",
                                    'message' => mb_strimwidth($message, 0, 250, '...'),
                                    'description' => mb_strimwidth($message, 0, 250, '...'),
                                    'chat_reference' => '',
                                    'module_type' => 'DOCUMENT',
                                    'module_type_id' => $module_type_id,
                                    'firebase_reference' => ""
                                );

                                $background_data['notification']['data'] = $option;
                                $background_data['notification']['user_ids'] = $send_notification_ids;
                            }

                            $response['status'] = 1;
                            $response['message'] = ucwords(strtolower($shared_object)) . " shared successfully";
                            WebservicesFunction::addUserStaticToJson('', $user_id, $thin_app_id, $mobile, "MEDICAL RECORDS", strtoupper($shared_object) . " SHARED", 'add_share');


                        } else {

                            $response['status'] = 0;
                            if ($subscriber == false && $channel_id > 0) {
                                $response['message'] = "No subscriber in group";
                            } else {
                                $response['message'] = "Already shared with this user";
                            }

                        }

                    } else {

                        $response['status'] = 0;
                        if ($subscriber == false && $channel_id > 0) {
                            $response['message'] = "No subscriber in group";
                        } else {
                            if ($invalid_mobile_number === true) {
                                $response['message'] = "Invalid Mobile Number";
                            } else {
                                $response['message'] = "Already shared";
                            }

                        }
                    }

                } catch (Exception $e) {

                    if ($auto_commit === false) {
                        $connection->rollback();
                    }
                }
            }

            if ($return_type === false) {
                Custom::sendResponse($response);
            } else {
                return json_encode($response);
            }
            if (!empty($background_data) && $send_notification === true) {
                Custom::send_process_to_background();
                /* this function send otp and send process in backround*/
                if (array_key_exists("notification", $background_data)) {


                    Custom::send_notification_by_user_id($background_data['notification']['data'], $background_data['notification']['user_ids'], $thin_app_id);
                }
                if (array_key_exists("sms", $background_data)) {

                    $data = $background_data['sms'];
                    $message = $background_data['sms']['message'];
                    $mobile_list = $background_data['sms']['mobiles'];
                    if (!empty($drive_folder_id) && $shared_object =='FOLDER') {
                        $object_id = $drive_folder_id;
                    } else if (!empty($drive_file_id) && $shared_object =='FILE') {
                        $object_id = $drive_file_id;
                    } else {
                        $object_id = 0;
                    }

                    if (!empty($mobile_list)) {

                        //Custom::SendBlukSmsToNumbers($thin_app_id, $message, $mobile_list, $user_id);

                        Custom::sendFileShareMessage($shared_object, $object_id, $mobile_list, $message, $thin_app_id, $user_id);

                    }
                }
            }

        }
        exit();

    }

    public static function get_my_folder_list()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if (isset($data['app_key'])) {
            $app_key = $data['app_key'];
            $user_id = $data['user_id'];
            $thin_app_id = $data['thin_app_id'];
            $searchText = (isset($data['search_text']) && !empty($data['search_text'])) ? $data['search_text'] : '';
            $response = array();
            if ($user_id != '' && $app_key != '' && $thin_app_id != '') {
                $folder_data = WebservicesFunction::getMyFolderListDB($user_id, $thin_app_id, $searchText);
                $dataToSend = $folder_data['folder_data'];
                if (count($dataToSend) > 0) {
                    $response['status'] = 1;
                    $response['message'] = "Folder list found";
                    $response['data']['list'] = $dataToSend;
                } else {
                    $response['status'] = 0;
                    $response['message'] = "There is no folder";
                }
            } else {
                $response['status'] = 0;
                $response['message'] = "Invalid request parameter";
            }
            echo json_encode($response);
            die;
        }
    }

    public static function getMyFolderListDB($user_id = null, $thin_app_id = null, $searchText = null, $list_for = null, $offset)
    {
        $response = array();
        if ($user_id != '' && $thin_app_id != '') {
            $connection = ConnectionUtil::getConnection();
            $search = $limit_param = '';
            if (!empty($searchText)) {
                $search = " AND ( pat.first_name LIKE '%" . $searchText . "%'  OR pat.mobile LIKE '%" . $searchText . "%'  OR df.folder_add_from_number LIKE '%" . $searchText . "%'  OR c.mobile LIKE '%" . $searchText . "%'  OR c.child_name LIKE '%" . $searchText . "%' OR df.child_number LIKE '%" . $searchText . "%' OR (df.folder_name LIKE '%" . $searchText . "%' and pat.first_name IS NULL ) OR df.mobile LIKE '%" . $searchText . "%' )";

            } else {
                $limit_param = " limit " . DRIVE_FOLDER_DEFAULT_LIMIT;
            }
            $is_permission = Custom::check_module_enable_permission($thin_app_id, 'INSTRUCTION_BOOK');
            if ($is_permission == "YES") {
                if ($list_for == "INSTRUCTION") {
                    $search .= " AND df.is_instruction_bucket ='YES' ";
                } else {
                    $search .= " AND df.is_instruction_bucket ='NO' AND df.user_id = $user_id ";
                }
            } else {
                $search .= " AND df.is_instruction_bucket ='NO' AND df.user_id = $user_id ";
            }

            if ($offset >= 0) {
                $limit = DRIVE_PAGINATION_LIMIT;
                $offset = $offset * $limit;
                $limit_param = " LIMIT  $offset, $limit ";
            }

            $query = "SELECT IF(c.child_number !='','YES','NO') as is_child, c.child_name, c.mobile as child_mobile, df.share_count as total_shared, IF(df.share_count >0 ,'YES','NO') as is_folder_shared, df.id, IF(df.folder_add_from_number !='',IFNULL(pat.first_name,df.folder_name) ,df.folder_name) as folder_name, df.child_number, df.description, df.folder_type, df.is_locked, df.folder_add_from_number, df.share_count, df.total_file_count, df.total_memo_count,df.pin,df.status,df.allow_add_file,df.is_instruction_bucket,  DATE_FORMAT(df.created,'%d, %b %y %h:%i %p') as created, df.total_file_count as file_count, IFNULL(IFNULL(pat.mobile,c.mobile),IF(df.folder_add_from_number !='',df.folder_add_from_number,u.mobile)) as mobile, IFNULL(IFNULL(pat.first_name,c.child_name),IF(df.folder_add_from_number !='',df.folder_name,u.username)) as username   FROM drive_folders as df  LEFT JOIN users as u ON u.id = df.user_id left  JOIN appointment_customers as pat ON pat.mobile = df.folder_add_from_number and pat.thinapp_id = df.thinapp_id  LEFT JOIN childrens as c ON c.child_number = df.child_number and c.thinapp_id= df.thinapp_id and c.status='ACTIVE' WHERE df.thinapp_id = $thin_app_id AND  df.status = 'ACTIVE'  $search ORDER BY df.modified DESC $limit_param";


            $folderRS = $connection->query($query);
            $folderData = mysqli_fetch_all($folderRS, MYSQLI_ASSOC);
            $response = array();
            $response['folder_data'] = array();
            foreach ($folderData as $data) {
                $data['pin'] = !empty($data['pin']) ? Custom::decodeVariable($data['pin']) : '';
                $data['folder_path'] = FOLDER_PATH . Custom::encodeVariable($data['id']);
                $data['folderStaticPath'] = FOLDER_STATIC_PATH . Custom::encodeVariable($data['id']);
                $response['folder_data'][] = $data;
            }

            /*$count_query = "SELECT count(df.id) as total_count FROM drive_folders as df WHERE df.thinapp_id = $thin_app_id  AND df.status = 'ACTIVE'  AND df.user_id = $user_id";
            $count_res = $connection->query($count_query);
            $response['total_count'] = mysqli_fetch_assoc($count_res)['total_count'];*/
            $response['total_count'] = 0;

        }
        return $response;
    }

    public static function getMyFolderListHospital($user_id = null, $thin_app_id = null, $searchText = null, $list_for = null, $offset, $user_role, $doctor_id)
    {
        $response = array();
        if ($user_id != '' && $thin_app_id != '') {
            $connection = ConnectionUtil::getConnection();
            $search = $condition = $search_txt = $search_app = $limit_param = '';
            if (!empty($searchText)) {
                $search_txt = " having (folder_name LIKE '%" . $searchText . "%' OR mobile LIKE '%" . $searchText . "%' OR username LIKE '%" . $searchText . "%' )";
                $search_app = " AND (ac.mobile LIKE '%" . $searchText . "%'   OR ac.first_name LIKE '%" . $searchText . "%' OR df.folder_name LIKE '%" . $searchText . "%' OR df.mobile LIKE '%" . $searchText . "%' OR df.mobile LIKE '%" . $searchText . "%' )";
            } else {
                $limit_param = " limit " . DRIVE_FOLDER_DEFAULT_LIMIT;
            }

            /* if (!empty($searchText)) {
                 $search = " and  (df.folder_name LIKE '%" . $searchText . "%' OR df.folder_add_from_number LIKE '%" . $searchText . "%' OR u.username LIKE '%" . $searchText . "%' OR pat.username LIKE '%" . $searchText . "%' )";
             }*/

            $is_permission = Custom::check_module_enable_permission($thin_app_id, 'INSTRUCTION_BOOK');
            $receptionist_permission = Custom::check_user_permission($thin_app_id, 'RECEPTIONIST_CAN_MANAGE_PATIENT_MEDICAL_RECORDS');
            $user_condition = " AND df.user_id = $user_id ";
            if ($user_role == "RECEPTIONIST" && $receptionist_permission == "YES") {
                //$admin_data = Custom::get_thinapp_admin_data($thin_app_id);
                //$admin_id = !empty($admin_data)?$admin_data['id']:0;
                $user_condition = " AND df.child_number ='' AND (  df.user_id = $user_id  OR  df.folder_add_from_number != '' ) ";
            }
            if ($is_permission == "YES") {
                if ($list_for == "INSTRUCTION") {
                    $condition .= " AND df.is_instruction_bucket ='YES' ";
                } else {
                    $condition .= " AND df.is_instruction_bucket ='NO' $user_condition ";
                }
            } else {
                $condition .= " AND df.is_instruction_bucket ='NO' $user_condition ";
            }


            if ($offset >= 0) {
                $limit = DRIVE_PAGINATION_LIMIT;
                $offset = $offset * $limit;
                $limit_param = " LIMIT  $offset, $limit ";
            }

            $child_folder = "";
            if (($user_role == "ADMIN")) {
                $child_folder = " AND ( df.child_number ='' OR df.child_number IS NULL ) ";
            }


            $query = " select * from (";
            $query .= "(select IF(df.user_id=$user_id,'YES','NO') as is_owner, df.modified, 'NO' as is_child, '' AS child_name, '' as child_mobile, df.share_count as total_shared, IF(df.share_count >0 ,'YES','NO') as is_folder_shared, df.id, df.folder_name, df.child_number, df.description, df.folder_type, df.is_locked, df.folder_add_from_number, df.share_count, df.total_file_count, df.total_memo_count,df.pin,df.status,df.allow_add_file,df.is_instruction_bucket,  DATE_FORMAT(df.created,'%d, %b %y %h:%i %p') as created, df.total_file_count as file_count, IFNULL(pat.mobile,IF(df.folder_add_from_number!='',df.folder_add_from_number,df.mobile)) as mobile, IFNULL(pat.username,u.username) as username   FROM drive_folders as df LEFT JOIN users as u ON u.id = df.user_id  LEFT JOIN users as pat ON pat.mobile = df.folder_add_from_number and pat.thinapp_id = df.thinapp_id and pat.role_id = 1  WHERE df.thinapp_id = $thin_app_id AND  df.status = 'ACTIVE'  $search $child_folder order by df.modified desc )";
            $query .= " UNION ALL ";
            $query .= "(SELECT  IF(df.user_id=$user_id,'YES','NO') as is_owner, df.modified, IF(c.id IS NOT NULL,'YES','NO') as is_child, IFNULL(c.child_name,'') AS child_name, IFNULL(c.mobile,'') as child_mobile, df.share_count as total_shared, IF(df.share_count >0 ,'YES','NO') as is_folder_shared, df.id, df.folder_name, df.child_number, df.description, df.folder_type, df.is_locked, df.folder_add_from_number, df.share_count, df.total_file_count, df.total_memo_count,df.pin,df.status,df.allow_add_file,df.is_instruction_bucket,  DATE_FORMAT(df.created,'%d, %b %y %h:%i %p') as created, df.total_file_count as file_count, IFNULL(ac.mobile,c.mobile) as mobile, IFNULL(ac.first_name,c.child_name) as username   FROM appointment_customer_staff_services as acss left join  appointment_customers as ac ON ac.id = acss.appointment_customer_id and ac.status='ACTIVE' left join childrens as c on c.id = acss.children_id join drive_folders as df on (df.folder_add_from_number = ac.mobile and ac.thinapp_id = df.thinapp_id) OR (df.child_number = c.child_number and c.thinapp_id = df.thinapp_id) WHERE acss.thinapp_id = $thin_app_id AND acss.appointment_staff_id = $doctor_id $search_app order by df.modified desc )";
            $query .= ") as final GROUP BY final.id $search_txt ORDER BY final.modified DESC $limit_param";

            //$query = "select IF(df.user_id=$user_id,'YES','NO') as is_owner, df.modified, 'NO' as is_child, '' AS child_name, '' as child_mobile, df.share_count as total_shared, IF(df.share_count >0 ,'YES','NO') as is_folder_shared, df.id, df.folder_name, df.child_number, df.description, df.folder_type, df.is_locked, df.folder_add_from_number, df.share_count, df.total_file_count, df.total_memo_count,df.pin,df.status,df.allow_add_file,df.is_instruction_bucket,  DATE_FORMAT(df.created,'%d, %b %y %h:%i %p') as created, df.total_file_count as file_count, IFNULL(pat.mobile,IF(df.folder_add_from_number!='',df.folder_add_from_number,df.mobile)) as mobile, IFNULL(pat.username,u.username) as username   FROM drive_folders as df  LEFT JOIN users as u ON u.id = df.user_id  LEFT JOIN users as pat ON pat.mobile = df.folder_add_from_number and pat.thinapp_id = df.thinapp_id and pat.role_id = 1  WHERE df.thinapp_id = $thin_app_id AND  df.status = 'ACTIVE'   AND df.is_instruction_bucket ='NO'  AND df.user_id = $user_id    $search $condition  $child_folder order by df.modified desc  $limit_param ";
            $folderRS = $connection->query($query);
            $folderData = mysqli_fetch_all($folderRS, MYSQLI_ASSOC);
            $response = array();
            $response['folder_data'] = array();
            foreach ($folderData as $data) {
                $data['pin'] = !empty($data['pin']) ? Custom::decodeVariable($data['pin']) : '';
                $data['folder_path'] = FOLDER_PATH . Custom::encodeVariable($data['id']);
                $data['folderStaticPath'] = FOLDER_STATIC_PATH . Custom::encodeVariable($data['id']);
                $response['folder_data'][] = $data;
            }
            $response['total_count'] = 0;
            /* $count_query = "SELECT count(df.id) as total_count FROM drive_folders as df WHERE df.thinapp_id = $thin_app_id  AND df.status = 'ACTIVE'  AND df.user_id = $user_id";
             $count_res = $connection->query($count_query);
             $response['total_count'] = mysqli_fetch_assoc($count_res)['total_count'];*/
        }
        return $response;
    }

    public static function get_my_share_folder_list()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if (isset($data['app_key'])) {
            $app_key = $data['app_key'];
            $user_id = $data['user_id'];
            $thin_app_id = $data['thin_app_id'];
            $mobile = $data['mobile'];
            $searchText = (isset($data['search_text']) && !empty($data['search_text'])) ? $data['search_text'] : '';

            $response = array();
            if ($user_id != '' && $app_key != '' && $thin_app_id != '' && $mobile != '') {
                $share_data = WebservicesFunction::getMyShareFolderListDB($user_id, $thin_app_id, $mobile, $searchText);
                $dataToSend = $share_data['share_data'];
                if (count($dataToSend) > 0) {
                    $response['status'] = 1;
                    $response['message'] = "Folder list found";
                    $response['data']['list'] = $dataToSend;
                } else {
                    $response['status'] = 0;
                    $response['message'] = "There is no folder";
                }
            } else {
                $response['status'] = 0;
                $response['message'] = "Invalid request parameter";
            }
            echo json_encode($response);
            die;
        }
    }

    public static function getMyShareFolderListDB($user_id = null, $thin_app_id = null, $mobile = null, $searchText = null, $offset)
    {
        $response = array();
        $response['share_data'] = array();
        if ($user_id != '' && $thin_app_id != '' && $mobile != '') {
            $search = $limit_param = '';
            if (!empty($searchText)) {
                $search = "AND ( c.child_name LIKE '%" . $searchText . "%' OR  df.child_number LIKE '%" . $searchText . "%' OR df.folder_name LIKE '%" . $searchText . "%' OR df.mobile LIKE '%" . $searchText . "%' )  ";
            } else {
                $limit_param = " limit " . DRIVE_FOLDER_DEFAULT_LIMIT;
            }
            $connection = ConnectionUtil::getConnection();
            $count_query = "SELECT count(ds.id) as total_count  FROM drive_shares as ds INNER JOIN drive_folders as df ON (ds.drive_folder_id = df.id AND  ds.shared_object='FOLDER')  JOIN users as u ON u.id = ds.share_from_user_id  LEFT JOIN drive_files as dfi ON (ds.drive_file_id = dfi.id AND dfi.status = 'ACTIVE')  WHERE ( ds.share_to_user_id = $user_id  OR ds.share_with_mobile = '$mobile' ) AND  ds.thinapp_id = $thin_app_id AND df.status = 'ACTIVE' and ds.current_status = 'ACTIVE'";

            if ($offset >= 0) {
                $limit = DRIVE_PAGINATION_LIMIT;
                $offset = $offset * $limit;
                $limit_param = " LIMIT  $offset, $limit ";
            }

            $query = "SELECT DATE_FORMAT(ds.created,'%d, %b %y %h:%i %p') as share_time, IFNULL(IFNULL(pat.first_name,c.child_name),u.username) as username, df.*,  ds.id AS drive_share_id, ds.share_with_mobile, ds.share_from_mobile, IFNULL(IF(pat.mobile IS NULL , c.mobile, pat.mobile), ds.share_from_mobile) as share_from_mobile, ds.drive_folder_id, ds.share_from_user_id, ds.share_to_user_id, ds.status AS drive_share_status, ds.created AS drive_share_created, ds.modified AS drive_share_modified, df.total_file_count as file_count  FROM drive_shares as ds JOIN drive_folders as df ON (ds.drive_folder_id = df.id and ds.shared_object='FOLDER' )  JOIN users as u ON u.id = ds.share_from_user_id left join appointment_customers as pat on pat.id = (select ac.id from appointment_customers as ac where ac.mobile = df.folder_add_from_number and ac.thinapp_id = df.thinapp_id limit 1)  left join childrens as c on c.thinapp_id = ds.thinapp_id and c.mobile = '$mobile' and df.child_number = c.child_number and c.status='ACTIVE' WHERE ( ds.share_to_user_id = $user_id  OR ds.share_with_mobile = '$mobile' ) AND  ds.thinapp_id = $thin_app_id AND df.status = 'ACTIVE'  and ds.current_status = 'ACTIVE' $search  GROUP BY ds.id ORDER BY df.modified DESC $limit_param";
            $query_data = $connection->query($query);
            $folderData = mysqli_fetch_all($query_data, MYSQLI_ASSOC);
            //$folderRS = $connection->query("SELECT DATE_FORMAT(drive_shares.created,'%d, %b %y %h:%i %p') as share_time,u.username,`drive_folders`.*, `drive_shares`.`id` AS `drive_share_id`, `drive_shares`.`share_with_mobile` AS `share_with_mobile`, `drive_shares`.`share_from_mobile` AS `share_from_mobile`, `drive_shares`.`drive_folder_id` AS `drive_folder_id`, `drive_shares`.`share_from_user_id` AS `share_from_user_id`, `drive_shares`.`share_to_user_id` AS `share_to_user_id`, `drive_shares`.`status` AS `drive_share_status`, `drive_shares`.`created` AS `drive_share_created`, `drive_shares`.`modified` AS `drive_share_modified`,count(`drive_files`.`id`) as `file_count`   FROM `drive_shares` INNER JOIN `drive_folders`  ON (`drive_shares`.`drive_folder_id` = `drive_folders`.`id`) JOIN users as u ON u.id = drive_shares.share_from_user_id LEFT JOIN `drive_files` ON (`drive_files`.`drive_folder_id` = `drive_folders`.`id` AND `drive_files`.`status` = 'ACTIVE')WHERE ( `drive_shares`.`share_to_user_id` = '" . $user_id . "' OR `drive_shares`.`share_with_mobile` = '" . $mobile . "' ) AND `drive_shares`.`thinapp_id` = '" . $thin_app_id . "' AND `drive_folders`.`status` = 'ACTIVE' " . $search . " GROUP BY `drive_shares`.`id` ORDER BY `drive_folders`.`modified` DESC limit ".DRIVE_FOLDER_DEFAULT_LIMIT);

            foreach ($folderData as $data) {
                $data['pin'] = !empty($data['pin']) ? Custom::decodeVariable($data['pin']) : '';
                $data['folder_path'] = FOLDER_PATH . Custom::encodeVariable($data['id']);
                $data['folderStaticPath'] = FOLDER_STATIC_PATH . Custom::encodeVariable($data['id']);
                $response['share_data'][] = $data;
            }
            $query_data = $connection->query($count_query);
            $response['total_count'] = mysqli_fetch_assoc($query_data)['total_count'];
        }
        return $response;
    }

    public static function get_my_share_file_list()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if (isset($data['app_key'])) {
            $app_key = $data['app_key'];
            $user_id = $data['user_id'];
            $thin_app_id = $data['thin_app_id'];
            $mobile = $data['mobile'];
            $searchText = (isset($data['search_text']) && !empty($data['search_text'])) ? $data['search_text'] : '';

            $response = array();
            if ($user_id != '' && $app_key != '' && $thin_app_id != '' && $mobile != '') {
                $file_data = WebservicesFunction::getMyShareFileListDB($user_id, $thin_app_id, $mobile, $searchText);
                $dataToSend = $file_data['file_data'];
                if (count($dataToSend) > 0) {
                    $response['status'] = 1;
                    $response['message'] = "File list found";
                    $response['data']['list'] = $dataToSend;
                } else {
                    $response['status'] = 0;
                    $response['message'] = "There is no file";
                }
            } else {
                $response['status'] = 0;
                $response['message'] = "Invalid request parameter";
            }
            echo json_encode($response);
            die;
        }
    }

    public static function getMyShareFileListDB($user_id = null, $thin_app_id = null, $mobile = null, $searchText = null, $offset)
    {
        $response = array();
        if ($user_id != '' && $thin_app_id != '' && $mobile != '') {
            $search = $limit_param = '';
            if (!empty($searchText)) {
                $search = "  AND ( dfi.file_name LIKE '%" . $searchText . "%' OR dfi.file_type LIKE '%" . $searchText . "%' OR df.mobile LIKE '%" . $searchText . "%' )";
            } else {
                $limit_param = " limit " . DRIVE_FOLDER_DEFAULT_LIMIT;
            }
            $count_query = "SELECT count(dfi.id) as total_count FROM drive_shares as ds JOIN drive_files as dfi ON (ds.drive_file_id = dfi.id AND ds.shared_object='FILE') JOIN users as u ON u.id = ds.share_from_user_id left JOIN drive_folders as df ON df.id = dfi.drive_folder_id WHERE ( ds.share_to_user_id = $user_id  OR ds.share_with_mobile = '$mobile' ) AND ds.thinapp_id = $thin_app_id  AND  dfi.status = 'ACTIVE' and ds.current_status = 'ACTIVE'";

            if ($offset >= 0) {
                $limit = DRIVE_PAGINATION_LIMIT;
                $offset = $offset * $limit;
                $limit_param = " LIMIT  $offset, $limit ";
            }

            $query = "SELECT dfi.memo_text as caption, DATE_FORMAT(ds.created,'%d, %b %y %h:%i %p') as share_time,u.username, dfi.*, substring_index(dfi.file_path, '/', -1) as download_key, ds.id AS drive_share_id, ds.share_with_mobile, ds.share_from_mobile, ds.drive_folder_id, ds.share_from_user_id, ds.share_to_user_id, ds.status AS drive_share_status, ds.created AS drive_share_created, ds.modified AS drive_share_modified  FROM drive_shares as ds  JOIN drive_files as dfi ON (ds.drive_file_id = dfi.id AND ds.shared_object='FILE') JOIN users as u ON u.id = ds.share_from_user_id left JOIN drive_folders as df ON df.id = dfi.drive_folder_id WHERE ( ds.share_to_user_id = $user_id  OR ds.share_with_mobile = '$mobile' ) AND ds.thinapp_id = $thin_app_id  AND  dfi.status = 'ACTIVE' and ds.current_status = 'ACTIVE' $search  GROUP BY ds.id ORDER BY ds.id DESC $limit_param";
            //$last_query ="SELECT drive_files.memo_text as caption, DATE_FORMAT(drive_shares.created,'%d, %b %y %h:%i %p') as share_time,u.username, `drive_files`.*, substring_index(`drive_files`.`file_path`, '/', -1) as download_key, `drive_shares`.`id` AS `drive_share_id`, `drive_shares`.`share_with_mobile` AS `share_with_mobile`, `drive_shares`.`share_from_mobile` AS `share_from_mobile`, `drive_shares`.`drive_folder_id` AS `drive_folder_id`, `drive_shares`.`share_from_user_id` AS `share_from_user_id`, `drive_shares`.`share_to_user_id` AS `share_to_user_id`, `drive_shares`.`status` AS `drive_share_status`, `drive_shares`.`created` AS `drive_share_created`, `drive_shares`.`modified` AS `drive_share_modified` FROM `drive_shares` INNER JOIN `drive_files` ON (`drive_shares`.`drive_file_id` = `drive_files`.`id`) JOIN users as u ON u.id = drive_shares.share_from_user_id            JOIN drive_folders  ON drive_folders.id = drive_files.drive_folder_id WHERE ( `drive_shares`.`share_to_user_id` = '" . $user_id . "' OR `drive_shares`.`share_with_mobile` = '" . $mobile . "' ) AND  `drive_shares`.`thinapp_id` = '" . $thin_app_id . "' AND            `drive_files`.`status` = 'ACTIVE' " . $search . " GROUP BY `drive_shares`.`id` ORDER BY `drive_shares`.`id` DESC limit ".DRIVE_FOLDER_DEFAULT_LIMIT
            $connection = ConnectionUtil::getConnection();
            $fileRS = $connection->query($query);
            $fileData = mysqli_fetch_all($fileRS, MYSQLI_ASSOC);
            $response['file_data'] = $fileData;

            $count_data = $connection->query($count_query);
            $response['total_count'] = mysqli_fetch_assoc($count_data)['total_count'];

        }
        return $response;
    }

    public static function getPrivateChannelList($thin_app_id)
    {
        $query = $query = "select c.id, c.channel_name from channels as c join users as u on c.user_id = u.id  where u.role_id = 5 and c.is_searchable = 'N' and c.is_publish_mbroadcast ='N' and c.channel_status = 'PRIVATE' and c.app_id = $thin_app_id and c.status = 'Y' order by c.channel_name asc";
        $connection = ConnectionUtil::getConnection();
        $response = array();
        $service_message_list = $connection->query($query);
        if ($service_message_list->num_rows) {
            $response = mysqli_fetch_all($service_message_list, MYSQLI_ASSOC);
        }
        return $response;
    }


    public static function get_my_drive_data()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        $response = array();

        $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
        $app_key = isset($data['app_key']) ? $data['app_key'] : "";
        $user_id = isset($data['user_id']) ? $data['user_id'] : "";
        $mobile = isset($data['mobile']) ? $data['mobile'] : "";
        $list_for = isset($data['list_for']) ? $data['list_for'] : "DOCUMENT";
        $searchText = isset($data['search_text']) ? $data['search_text'] : "";
        $offset = isset($data['offset']) ? $data['offset'] : "";
        $request_for = isset($data['request_for']) ? $data['request_for'] : "";
        $main_app_category = isset($data['main_app_category']) ? $data['main_app_category'] : "";
        $user_role = isset($data['user_role']) ? $data['user_role'] : "";
        $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : 0;


        if (empty($thin_app_id)) {
            $response['status'] = 0;
            $response['message'] = 'Invalid thinapp id';
        } else if (empty($app_key)) {
            $response['status'] = 0;
            $response['message'] = 'Invalid app key';
        } else if (empty($mobile)) {
            $response['status'] = 0;
            $response['message'] = 'Invalid file';
        } else if (empty($user_id)) {
            $response['status'] = 0;
            $response['message'] = 'Invalid user id';
        } else if ($list_for != "DOCUMENT" && $list_for != "INSTRUCTION") {
            $response['status'] = 0;
            $response['message'] = 'Invalid search type';
        } else {

            $dataToSend = array();


            if ($request_for == "MY_FOLDER") {
                if ($main_app_category == "HOSPITAL" && ($user_role == "RECEPTIONIST" || $user_role == "ADMIN" || $user_role == "DOCTOR")) {
                    $folder_data = WebservicesFunction::getMyFolderListHospital($user_id, $thin_app_id, $searchText, $list_for, $offset, $user_role, $doctor_id);

                } else {
                    $folder_data = WebservicesFunction::getMyFolderListDB($user_id, $thin_app_id, $searchText, $list_for, $offset);
                }

                //$folder_data = WebservicesFunction::getMyFolderListHospital($user_id, $thin_app_id, $searchText, $list_for, $offset,$user_role, $doctor_id);

                $dataToSend['MyFolderList'] = $folder_data['folder_data'];
                $dataToSend['totals']['total_folder'] = $folder_data['total_count'];

            } else if ($request_for == "SHARED_FOLDER") {
                $share_data = WebservicesFunction::getMyShareFolderListDB($user_id, $thin_app_id, $mobile, $searchText, $offset);
                $dataToSend['ShareFolderList'] = $share_data['share_data'];
                $dataToSend['totals']['total_shared_folder'] = $share_data['total_count'];
            } else if ($request_for == "SHARED_FILE") {
                $file_data = WebservicesFunction::getMyShareFileListDB($user_id, $thin_app_id, $mobile, $searchText, $offset);
                $dataToSend['ShareFileList'] = $file_data['file_data'];
                $dataToSend['totals']['total_file_share'] = $file_data['total_count'];

            } else {

                if ($main_app_category == "HOSPITAL" && !empty($user_role)) {
                    $folder_data = WebservicesFunction::getMyFolderListHospital($user_id, $thin_app_id, $searchText, $list_for, -1, $user_role, $doctor_id);
                } else {
                    $folder_data = WebservicesFunction::getMyFolderListDB($user_id, $thin_app_id, $searchText, $list_for, -1);
                }


                $dataToSend['MyFolderList'] = $folder_data['folder_data'];
                $dataToSend['totals']['total_folder'] = $folder_data['total_count'];

                $share_data = WebservicesFunction::getMyShareFolderListDB($user_id, $thin_app_id, $mobile, $searchText, -1);
                $dataToSend['ShareFolderList'] = $share_data['share_data'];
                $dataToSend['totals']['total_shared_folder'] = $share_data['total_count'];


                $file_data = WebservicesFunction::getMyShareFileListDB($user_id, $thin_app_id, $mobile, $searchText, -1);
                $dataToSend['ShareFileList'] = $file_data['file_data'];
                $dataToSend['totals']['total_file_share'] = $file_data['total_count'];
                $dataToSend['ChannelList'] = WebservicesFunction::getPrivateChannelList($thin_app_id);
            }


            $response['status'] = 1;
            $response['message'] = "Data list found";
            $response['data']['data_list'] = $dataToSend;

        }
        echo json_encode($response);
        die;

    }

    public static function get_file_list_from_folder()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $drive_folder_id = isset($data['drive_folder_id']) ? $data['drive_folder_id'] : "";
            $searchText = (isset($data['search_text']) && !empty($data['search_text'])) ? $data['search_text'] : '';
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $category_id = isset($data['category_id']) ? $data['category_id'] : 1;
            $offset = isset($data['offset']) ? $data['offset'] : -1;
            /* parameter come for tablet module only list for = 'TAB' */
            $list_for = isset($data['list_for']) ? $data['list_for'] : "";
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : 0;
            $role_id = isset($data['role_id']) ? $data['role_id'] : 0;
        	$appointment_user_role = isset($data['appointment_user_role']) ? $data['appointment_user_role'] : "";


            $background_data = array();

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($drive_folder_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid folder';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else {

                $connection = ConnectionUtil::getConnection();
            	
            	$response['data']['doctor_list'] = array();
                $user_role = Custom::hospital_get_user_role($mobile,$thin_app_id,$role_id);
                if($user_role=='USER'){
                    $folder_data= Custom::get_folder_by_id($drive_folder_id);
                    if(!empty($folder_data['appointment_customer_id']) || !empty($folder_data['children_id'])){
                        $list = Custom::getDoctorListWithAppointmentTaken($thin_app_id,$drive_folder_id);
                        if(!empty($list)){
                            $response['data']['doctor_list'] = $list;
                        }
                    }
                }

                $folderRS = $connection->query("SELECT IFNULL(IFNULL(ac.first_name,c.child_name),folder_name) as folder_name, df.allow_add_file,  df.user_id, df.description, df.id  FROM drive_folders as df left join appointment_customers as ac on ac.id = df.appointment_customer_id left join childrens as c on c.id = df.children_id WHERE df.id = $drive_folder_id limit 1");
                $folderData = mysqli_fetch_assoc($folderRS);
                if (!empty($folderData)) {
                    $category_id = ($list_for == 'TAB') ? -2 : $category_id;
                    $user_role = Custom::hospital_get_user_role($mobile,$thin_app_id,$role_id);
                    $dataToSend = WebservicesFunction::getFileListFromFolderDB($user_id, $thin_app_id, $drive_folder_id, $searchText, $category_id, $offset, $doctor_id, $role_id,$user_role);
                    $response['title'] = $folderData['folder_name'];
                    $response['permission'] = $folderData['allow_add_file'];
                    $response['folderDescription'] = $folderData['description'];
                    $response['is_owner'] = ($folderData['user_id'] == $user_id) ? "YES" : "NO";
                    $response['folderStaticPath'] = FOLDER_STATIC_PATH . Custom::encodeVariable($folderData['id']);

                    if (count($dataToSend) > 0) {
                        $response['status'] = 1;
                        $response['message'] = "File list found";
                        $response['data']['list'] = $dataToSend;
                        $response['data']['channel_list'] = WebservicesFunction::getPrivateChannelList($thin_app_id);
                    } else {
                        $response['status'] = 1;
                        $response['message'] = "Folder is empty";
                        $response['data']['list'] = array();
                        $response['data']['channel_list'] = array();
                    }
                } else {
                    $response['title'] = '';
                    $response['permission'] = 'NO';
                    $response['is_owner'] = "NO";
                    $response['folderDescription'] = '';
                    $response['folderStaticPath'] = '';

                    $response['status'] = 0;
                    $response['message'] = "Invalid request parameter";
                }
            }
            echo json_encode($response);
            die;
        }
    }

    public static function getFileListFromFolderDB($user_id = null, $thin_app_id = null, $drive_folder_id = null, $searchText = null, $category_id = 1, $offset, $doctor_id, $role_id,$user_role)
    {
        $response = array();
        if ($user_id != '' && $thin_app_id != '') {
            $search = $limit_param = '';
            if (!empty($searchText)) {
                $search = "AND ( df.file_name LIKE '%" . $searchText . "%' OR df.file_type LIKE '%" . $searchText . "%' )";
            }

            if (!empty($category_id) && $category_id != 1) {
                if ($category_id == -2) {
                    /* this condition add for tablet version for get prescription and invoice togather from folder */
                    $search .= " and df.file_category_master_id IN(3,6) ";
                } else {
                    $search .= " and df.file_category_master_id = " . $category_id;
                }
            }else{

                if (empty($doctor_id) || $role_id != 5) {
                    $search .= " and df.file_category_master_id != 10 ";
                    $search .= " and df.file_category_master_id != 7 ";
                }

                $show_ipd_category = Custom::check_user_permission($thin_app_id, 'SHOW_IPD_CATEGORY_TO_PATIENT');
                if (($show_ipd_category == "NO" || $show_ipd_category == false) && $user_role=="USER") {
                    $search .= " and df.file_category_master_id != 8 ";
                }
            }



            if ($role_id != 5) {
                $doctor_data = Custom::get_doctor_by_user_id($user_id);
                if(!empty($doctor_data)){
                    $doctor_id = $doctor_data['id'];
                    $search .= " and ( df.doctor_id = $doctor_id OR df.share_with_doctor_id = $doctor_id ) ";
                }

            }

            if ($offset >= 0) {
                $limit = DRIVE_PAGINATION_LIMIT;
                $offset = $offset * $limit;
                $limit_param = " LIMIT $offset, $limit";
            }


            $connection = ConnectionUtil::getConnection();
            $query = "SELECT df.share_with_doctor_id, IF(folder.user_id=$user_id,'YES','NO') AS is_owner, df.*, IFNULL(df.memo_text,'') as file_caption,  ROUND(df.file_size,2) as file_size, u.username as name, DATE_FORMAT(df.created,'%d-%b-%y %H:%i') as created, df.memo_text as caption FROM drive_files as df left join drive_folders as folder on folder.id = df.drive_folder_id join users as u on u.id = df.user_id WHERE df.thinapp_id = '" . $thin_app_id . "' AND df.drive_folder_id = '" . $drive_folder_id . "' AND df.status = 'ACTIVE' " . $search . " ORDER BY df.id DESC $limit_param";
            $fileRS = $connection->query($query);
            $fileData = mysqli_fetch_all($fileRS, MYSQLI_ASSOC);
            foreach ($fileData as $key => $data) {
                $response[$key] = $data;
                $name = explode("/", $data['file_path']);
                $response[$key]['download_key'] = end($name);
                $response[$key]['fileStaticPath'] = FILE_STATIC_PATH . Custom::encodeVariable($data['id']);
            	$response[$key]['share_witch_doctor'] = '';
                if(!empty($data['share_with_doctor_id'])){
                    $doctor = Custom::get_doctor_by_id($data['share_with_doctor_id']);
                    if(!empty($doctor)){
                        $response[$key]['share_witch_doctor'] = $doctor['name'];
                    }
                }
            }

            return $response;
        }
    }

    public static function get_folder_share_mobile()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if (isset($data['app_key'])) {
            $app_key = $data['app_key'];
            $user_id = $data['user_id'];
            $thin_app_id = $data['thin_app_id'];
            $drive_folder_id = $data['drive_folder_id'];
            $response = array();
            if ($user_id != '' && $app_key != '' && $thin_app_id != '') {
                $dataToSend = WebservicesFunction::getFolderShareMobileDB($drive_folder_id);
                if (count($dataToSend) > 0) {
                    $response['status'] = 1;
                    $response['message'] = "Mobile list found";
                    $response['data']['list'] = $dataToSend;
                } else {
                    $response['status'] = 0;
                    $response['message'] = "There is no share";
                }
            } else {
                $response['status'] = 0;
                $response['message'] = "Invalid request parameter";
            }
            echo json_encode($response);
            die;
        }
    }

    public static function getFolderShareMobileDB($drive_folder_id)
    {
        $mobileData = array();
        if ($drive_folder_id != '') {
            $connection = ConnectionUtil::getConnection();
            $query = "SELECT u.firebase_token, IF(u.app_installed_status = 'INSTALLED','YES','NO') as is_app_available, IFNULL(IFNULL(app_sta.name,IFNULL(ac.first_name,c.child_name)),IFNULL(u.username,'Anonymous')) as name, ds.id, ds.share_with_mobile FROM drive_shares as ds left join drive_folders as df on df.id = ds.drive_folder_id  left join users as u on u.mobile = ds.share_with_mobile and u.thinapp_id = ds.thinapp_id and (u.role_id = 5 OR u.role_id = 1) left join childrens as c on c.mobile = ds.share_with_mobile and ds.thinapp_id = c.thinapp_id and c.status='ACTIVE' left join appointment_customers as ac on ac.mobile= ds.share_with_mobile and ds.thinapp_id = ac.thinapp_id and ac.status = 'ACTIVE' left join appointment_staffs as app_sta on app_sta.mobile = ds.share_with_mobile and app_sta.thinapp_id = ds.thinapp_id and app_sta.staff_type = 'DOCTOR' and app_sta.`status` = 'ACTIVE' WHERE ds.drive_folder_id = $drive_folder_id group by ds.id ORDER BY ds.id DESC";
            $mobileRS = $connection->query($query);
            if ($mobileRS->num_rows) {
                $mobileData = mysqli_fetch_all($mobileRS, MYSQLI_ASSOC);
            }
        }
        return $mobileData;
    }

    public static function get_file_share_mobile()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if (isset($data['app_key'])) {
            $app_key = $data['app_key'];
            $user_id = $data['user_id'];
            $thin_app_id = $data['thin_app_id'];
            $drive_file_id = $data['drive_file_id'];
            $response = array();
            if ($user_id != '' && $app_key != '' && $thin_app_id != '') {
                $dataToSend = WebservicesFunction::getFileShareMobileDB($drive_file_id);
                if (count($dataToSend) > 0) {
                    $response['status'] = 1;
                    $response['message'] = "Mobile list found";
                    $response['data']['list'] = $dataToSend;
                } else {
                    $response['status'] = 0;
                    $response['message'] = "There is no share";
                }
            } else {
                $response['status'] = 0;
                $response['message'] = "Invalid request parameter";
            }
            echo json_encode($response);
            die;
        }
    }

    public static function getFileShareMobileDB($drive_file_id)
    {
        $mobileData = array();
        if ($drive_file_id != '') {

            $connection = ConnectionUtil::getConnection();
            $mobileRS = $connection->query("SELECT `id`,`share_with_mobile` FROM `drive_shares` WHERE `drive_file_id` = '" . $drive_file_id . "' ORDER BY `id` DESC");
            $mobileData = mysqli_fetch_all($mobileRS, MYSQLI_ASSOC);
        }
        return $mobileData;
    }


    public static function rename_file()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $drive_file_id = isset($data['drive_file_id']) ? $data['drive_file_id'] : "";
            $file_name = isset($data['file_name']) ? $data['file_name'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $background_data = array();

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($drive_file_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid file';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($file_name)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid file name';
            } else {
                try {

                    $connection = ConnectionUtil::getConnection();
                    $created = Custom::created();
                    $sql = "UPDATE  drive_files SET file_name = ?, modified = ? where id = ?";
                    $stmt = $connection->prepare($sql);
                    $stmt->bind_param('sss', $file_name, $created, $drive_file_id);
                    if ($stmt->execute()) {
                        $response['status'] = 1;
                        $response['message'] = "File renamed successfully";
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "File could not be renamed";
                    }

                } catch (Exception $e) {

                }

            }
            Custom::sendResponse($response);

        }
        exit();

    }


    public static function delete_file($data = null,$return = false)
    {
        if (empty($data)) {
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);

        }
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $drive_file_id = isset($data['drive_file_id']) ? $data['drive_file_id'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $background_data = array();
            $file_data = array();
            $file_key = 0;
            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($drive_file_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid file';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else {
                try {

                    $connection = ConnectionUtil::getConnection();
                    $query = "select df.memo_text, df.file_name, df.file_path, df.mobile, df.drive_folder_id, df.listing_type, dfo.folder_name from drive_files as df join drive_folders as dfo on df.drive_folder_id = dfo.id where df.id = $drive_file_id";
                    $file = $connection->query($query);
                    if ($file->num_rows) {
                        $connection->autocommit(false);
                        $file_data = mysqli_fetch_assoc($file);
                        $file_path = $file_data['file_path'];
                        $listing_type = $file_data['listing_type'];
                        $file_name = explode("/", $file_path);
                        $file_key = end($file_name);
                        $created = Custom::created();
                        $sql = "delete from  drive_files  where id = ?";
                        $stmt = $connection->prepare($sql);
                        $stmt->bind_param('s', $drive_file_id);
                        $drive_folder_id = $file_data['drive_folder_id'];
                        if ($listing_type == "MEMO") {
                            $sql = "UPDATE  drive_folders SET total_memo_count = total_memo_count - 1, modified = ? where id = ?";
                        } else {
                            $sql = "UPDATE  drive_folders SET total_file_count = total_file_count - 1,  modified = ? where id = ?";
                        }
                        $stmt_df = $connection->prepare($sql);
                        $stmt_df->bind_param('ss', $created, $drive_folder_id);
                        if ($stmt->execute() && $stmt_df->execute()) {
                            $connection->commit();
                            $response['status'] = 1;
                            $response['message'] = "File deleted successfully";
                            WebservicesFunction::addUserStaticToJson('', $user_id, $thin_app_id, $mobile, "MEDICAL RECORDS", "DELETE FILE", "delete_file");

                        } else {
                            $response['status'] = 0;
                            $response['message'] = "File could not be delete";
                        }

                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Invalid file";
                    }

                } catch (Exception $e) {
                    $response['status'] = 0;
                    $response['message'] = "File could not be delete";
                }
            }
            if($return===true){
                if (!empty($file_key) && $response['status'] == 1) {
                    Custom::deleteFileToAws($file_key);
                }
                return json_encode($response);
            }else{
                Custom::sendResponse($response);
                Custom::send_process_to_background();
                if (!empty($file_key)) {
                    Custom::deleteFileToAws($file_key);
                }
                if (!empty($file_data)) {
                    $user_id_list = Custom::get_folder_file_shared_user_mobile_and_id($file_data['drive_folder_id'], $drive_file_id);
                    if (!empty($user_id_list)) {

                        $user_data = Custom::get_user_by_id($user_id);
                        if (!empty($user_data)) {
                            $username = $user_data['username'];
                        }

                        if ($file_data['listing_type'] != "MEMO") {
                            $message = "File " . $file_data['file_name'] . " deleted from folder " . $file_data['folder_name'] . " by " . $username;
                        } else {
                            $message = " MEMO is deleted from folder " . $file_data['folder_name'] . " by " . $username;
                        }

                        $option = array(
                            'thinapp_id' => $thin_app_id,
                            'channel_id' => 0,
                            'role' => "USER",
                            'flag' => 'FILE_ADD',
                            'title' => "File " . $file_data['file_name'] . " has been deleted",
                            'message' => mb_strimwidth($message, 0, 250, '...'),
                            'description' => mb_strimwidth($message, 0, 250, '...'),
                            'chat_reference' => '',
                            'module_type' => 'DOCUMENT',
                            'module_type_id' => 0,
                            'firebase_reference' => ""
                        );

                        $user_ids = array_column($user_id_list, "share_to_user_id");
                        $user_ids = Custom::search_remove($user_id, $user_ids);
                        Custom::send_notification_by_user_id($option, $user_ids, $thin_app_id);

                        /*send message to users */
                        if ($file_data['listing_type'] != "MEMO") {
                            $mobile_numbers = array_column($user_id_list, "share_with_mobile");
                            $mobile_numbers = Custom::search_remove($file_data['mobile'], $mobile_numbers);
                            //Custom::SendBlukSmsToNumbers($thin_app_id, $message, $mobile_numbers, $user_id);
                        }
                        /*send message to users */


                    }
                }
            }


        }
        exit();

    }

    public static function rename_folder($data = null)
    {
        /* * from web comes then data parameter will come else from post parameter */
        /* this method also used from web when user rename folder from web */

        if (empty($data)) {
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);
        }

        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $drive_folder_id = isset($data['drive_folder_id']) ? $data['drive_folder_id'] : "";
            $folder_name = isset($data['folder_name']) ? trim($data['folder_name']) : "";
            $description = isset($data['description']) ? trim($data['description']) : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $background_data = array();
            $update = false;
            $folder_data = array();
            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($drive_folder_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid folder';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($folder_name)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid folder name';
            } else {
                try {

                    $connection = ConnectionUtil::getConnection();
                    $connection->autocommit(false);
                    $folder_data = Custom::get_patient_by_folder_id($drive_folder_id);
                    $created = Custom::created();
                    $update = false;
                    if(!empty($folder_data)){
                        if($folder_data['patient_type']=="CUSTOMER"){
                            $patient_mobile = $folder_data['mobile'];
                            $query = "select ac.id from appointment_customers as ac join drive_folders as df on df.appointment_cusotmer_id = ac.id  where ac.first_name = '$folder_name' and df.id != $drive_folder_id and ac.mobile = '$patient_mobile' limit 1";
                            $folder = $connection->query($query);
                            if (!$folder->num_rows) {
                                $sql = "UPDATE  drive_folders as df join appointment_customers as ac on df.appointment_customer_id = ac.id SET df.folder_name = ?, ac.first_name = ?, df.description =?, df.modified = ? where df.id = ?";
                                $stmt = $connection->prepare($sql);
                                $stmt->bind_param('sssss', $folder_name, $folder_name, $description, $created, $drive_folder_id);
                                $update = true;
                            } else {
                                $response['status'] = 0;
                                $response['message'] = "Folder already exist";
                            }
                        }else if($folder_data['patient_type']=="CHILDREN"){
                            $patient_mobile = $folder_data['mobile'];
                            $query = "select id from childrens join drive_folders as df on df.children_id = c.id where c.child_name = '$folder_name' and df.id != $drive_folder_id and c.mobile = '$patient_mobile' limit 1";
                            $folder = $connection->query($query);
                            if (!$folder->num_rows) {
                                $sql = "UPDATE  drive_folders as df join childrens as c on df.children_id = c.id SET df.folder_name = ?, c.child_name = ?, df.description =?, df.modified = ? where df.id = ?";
                                $stmt = $connection->prepare($sql);
                                $stmt->bind_param('sssss', $folder_name, $folder_name, $description, $created, $drive_folder_id);
                                $update = true;
                            } else {
                                $response['status'] = 0;
                                $response['message'] = "Folder already exist";
                            }
                        }else{
                            $query = "select id from drive_folders where folder_name = '$folder_name' and id != $drive_folder_id and user_id = $user_id limit 1";
                            $folder = $connection->query($query);
                            if (!$folder->num_rows) {
                                $sql = "UPDATE  drive_folders SET folder_name = ?, description =?, modified = ? where id = ?";
                                $stmt = $connection->prepare($sql);
                                $stmt->bind_param('ssss', $folder_name, $description, $created, $drive_folder_id);
                                $update = true;
                            } else {
                                $response['status'] = 0;
                                $response['message'] = "Folder already exist";
                            }
                        }

                        if($update === true){
                            if ($stmt->execute()) {
                                $connection->commit();
                                $response['status'] = 1;
                                $response['message'] = "Folder edit successfully";
                            } else {
                                $connection->rollback();
                                $response['status'] = 0;
                                $response['message'] = "Folder could not be edit";
                            }
                        }

                    }else{
                        $response['status'] = 0;
                        $response['message'] = "Invalid Folder";
                    }


                } catch (Exception $e) {

                }

            }
            Custom::sendResponse($response);

            Custom::send_process_to_background();
            $user_id_list = Custom::get_folder_shared_user_mobile_and_id($drive_folder_id);
            if ($user_id_list && $folder_data && $update) {
                $user_data = Custom::get_user_by_id($user_id);
                if (!empty($user_data)) {
                    $username = $user_data['username'];
                }

                $message = "Folder " . $folder_data['folder_name'] . " has been renamed with " . trim($folder_name) . " by " . $username;
                $option = array(
                    'thinapp_id' => $thin_app_id,
                    'channel_id' => 0,
                    'role' => "USER",
                    'flag' => 'RENAME_FOLDER',
                    'title' => "New file added to folder " . $folder_data['folder_name'],
                    'message' => mb_strimwidth($message, 0, 250, '...'),
                    'description' => mb_strimwidth($message, 0, 250, '...'),
                    'chat_reference' => '',
                    'module_type' => 'DOCUMENT',
                    'module_type_id' => 0,
                    'firebase_reference' => ""
                );

                $user_ids = array_column($user_id_list, "share_to_user_id");
                $user_ids = Custom::search_remove($user_id, $user_ids);
                Custom::send_notification_by_user_id($option, $user_ids, $thin_app_id);


            }

        }
        exit();

    }


    public static function delete_folder($data = null)
    {

        if (empty($data)) {
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);
        }

        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $drive_folder_id = isset($data['drive_folder_id']) ? $data['drive_folder_id'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";

            $background_data = array();
            $user_id_list = array();
            $folder_data = array();
            $file_key = 0;
            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($drive_folder_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid folder';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else {
                try {

                    $connection = ConnectionUtil::getConnection();
                    $file_list = array();
                    $query = $query = "select substring_index(file_path, '/', -1) as file_path from drive_files where drive_folder_id = $drive_folder_id and listing_type='OTHER'";
                    $file = $connection->query($query);
                    if ($file->num_rows) {
                        $file_list = array_column(mysqli_fetch_all($file, MYSQLI_ASSOC), 'file_path');
                    }

                    $user_id_list = Custom::get_folder_shared_user_mobile_and_id($drive_folder_id);

                    $query = "select folder_name, mobile from drive_folders where id = $drive_folder_id limit 1";
                    $folder = $connection->query($query);
                    if ($folder->num_rows) {
                        $folder_data = mysqli_fetch_assoc($folder);
                    }

                    $sql = "delete from drive_folders  where id = ?";
                    $stmt = $connection->prepare($sql);
                    $stmt->bind_param('s', $drive_folder_id);
                    if ($stmt->execute()) {

                        $sql = "delete from drive_shares  where drive_folder_id = ?";
                        $stmt = $connection->prepare($sql);
                        $stmt->bind_param('s', $drive_folder_id);
                        $stmt->execute();

                        $sql = "delete from drive_files  where drive_folder_id = ?";
                        $stmt = $connection->prepare($sql);
                        $stmt->bind_param('s', $drive_folder_id);
                        $stmt->execute();

                        $response['status'] = 1;
                        $response['message'] = "Folder delete successfully";
                        WebservicesFunction::addUserStaticToJson('', $user_id, $thin_app_id, $mobile, "MEDICAL RECORDS", "DELETE FOLDER", 'delete_folder');


                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Folder could not be delete";
                    }
                } catch (Exception $e) {
                    $response['status'] = 0;
                    $response['message'] = "Folder could not be delete";
                }
            }
            Custom::sendResponse($response);

            Custom::send_process_to_background();
            if (!empty($file_list)) {
                Custom::deleteMultipleFileToAws($file_list);
            }
            if ($user_id_list && $folder_data) {
                $user_data = Custom::get_user_by_id($user_id);
                if (!empty($user_data)) {
                    $username = $user_data['username'];
                }

                $message = "Folder " . $folder_data['folder_name'] . " now deleted  by " . $username;
                $option = array(
                    'thinapp_id' => $thin_app_id,
                    'channel_id' => 0,
                    'role' => "USER",
                    'flag' => 'DELETE_FOLDER',
                    'title' => "New file added to folder " . $folder_data['folder_name'],
                    'message' => mb_strimwidth($message, 0, 250, '...'),
                    'description' => mb_strimwidth($message, 0, 250, '...'),
                    'chat_reference' => '',
                    'module_type' => 'DOCUMENT',
                    'module_type_id' => 0,
                    'firebase_reference' => ""
                );
                $user_ids = array_column($user_id_list, "share_to_user_id");
                $user_ids = Custom::search_remove($user_id, $user_ids);
                Custom::send_notification_by_user_id($option, $user_ids, $thin_app_id);

                /*send message to users */
                $mobile_numbers = array_column($user_id_list, "share_with_mobile");
                $mobile_numbers = Custom::search_remove($folder_data['mobile'], $mobile_numbers);
                // Custom::SendBlukSmsToNumbers($thin_app_id, $message, $mobile_numbers, $user_id);
                /*send message to users */


            }

        }
        exit();

    }


    public static function web_delete_share($data = null, $return = false)
    {
        if (empty($data)) {
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);
        }

        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $drive_share_id = isset($data['drive_share_id']) ? $data['drive_share_id'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $background = array();

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($drive_share_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid file';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else {
                $share_data = WebservicesFunction::get_share_data_by_id($drive_share_id);
                if ($share_data) {
                    $shared_object = $share_data['shared_object'];
                    $connection = ConnectionUtil::getConnection();
                    $username = "";
                    $sql = "delete from drive_shares  where id = ?";
                    $stmt = $connection->prepare($sql);
                    $stmt->bind_param('s', $drive_share_id);
                    if ($stmt->execute()) {
                        $response['status'] = 1;
                        $response['message'] = "Object successfully unshared";
                        $total_record_save = 1;
                        if ($shared_object == 'FOLDER') {
                            $sql = "UPDATE  drive_folders SET share_count = share_count - ?, modified = ? where id = ?";
                            $stmt = $connection->prepare($sql);
                            $stmt->bind_param('sss', $total_record_save, $created, $drive_share_id);
                            $stmt->execute();

                        } else {
                            $sql = "UPDATE  drive_files SET share_count = share_count - ?, modified = ? where id = ?";
                            $stmt = $connection->prepare($sql);
                            $stmt->bind_param('sss', $total_record_save, $created, $drive_share_id);
                            $stmt->execute();
                        }


                        if (!empty($share_data)) {
                            $share_with_mobile = $share_data['share_with_mobile'];
                            $share_from_mobile = $share_data['share_from_mobile'];
                            $share_from_user_id = $share_data['share_from_user_id'];
                            $share_to_user_id = $share_data['share_to_user_id'];
                            $file_name = $share_data['name'];
                            if ($share_from_user_id == $user_id) {

                                $user_data = WebservicesFunction::get_user_data_by_mobile($share_from_mobile, $thin_app_id);
                                $username = !empty($user_data['username']) ? $user_data['username'] : $share_from_mobile;
                                $message = $username . " has unshared " . strtolower($shared_object) . " " . $file_name . "";
                                $background['sms']['message'] = $message;
                                $background['sms']['mobile'] = $share_with_mobile;

                            } else {
                                $user_data = WebservicesFunction::get_user_data_by_mobile($share_with_mobile, $thin_app_id);
                                $username = !empty($user_data['username']) ? $user_data['username'] : $share_with_mobile;
                                $message = $username . " has unshared " . strtolower($shared_object) . " " . $file_name . "";
                                $background['sms']['message'] = $message;
                                $background['sms']['mobile'] = $share_from_mobile;
                            }

                            /* send appoinment notifincation to staff */
                            if ($share_from_user_id == $user_id) {
                                $send_to_id = $share_to_user_id;
                            } else {
                                $send_to_id = $share_from_user_id;
                            }

                            $message = $username . " has unshared " . strtolower($shared_object) . " $file_name";
                            $option = array(
                                'thinapp_id' => $thin_app_id,
                                'channel_id' => 0,
                                'flag' => 'SHARE_DRIVE',
                                'title' => "New Appointment Request",
                                'message' => mb_strimwidth($message, 0, 250, '...'),
                                'description' => mb_strimwidth($message, 0, 250, '...'),
                                'chat_reference' => '',
                                'module_type' => 'SHARE_DRIVE',
                                'module_type_id' => $drive_share_id,
                                'firebase_reference' => ""
                            );
                            $background['nt']['option'] = $option;
                            $background['nt']['user_id'] = $send_to_id;


                        }

                    } else {
                        $response['status'] = 0;
                        $response['message'] = ucwords(strtolower($shared_object)) . " could not be unshared";
                    }
                } else {
                    $response['status'] = 0;
                    $response['message'] = "You can not unshare this file";
                }
            }
            if ($return === false) {
                Custom::sendResponse($response);
                if (!empty($background)) {
                    Custom::send_process_to_background();
                    /* this function send otp and send process in backround*/
                    if (array_key_exists("nt", $background)) {
                        Custom::send_notification_by_user_id($background['nt']['option'], array($background['nt']['user_id']), $thin_app_id);
                    }
                    if (array_key_exists("sms", $background)) {
                        $message = $background['sms']['message'];
                        $mobile = $background['sms']['mobile'];
                        // Custom::send_single_sms($mobile, $message, $thin_app_id);

                    }
                }
            } else {
                return json_encode($response);
            }

        }
    }

    public static function delete_share($data = null, $return = false)
    {
        if (empty($data)) {
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);
        }

        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $drive_share_id = isset($data['drive_share_id']) ? $data['drive_share_id'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $background = array();

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($drive_share_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid file';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else {

                $share_data = Custom::get_share_data($drive_share_id);
                if (!empty($share_data)) {
                    $drive_folder_id = $share_data['drive_folder_id'];
                    $drive_file_id = $share_data['drive_file_id'];
                    $shared_object = $share_data['shared_object'];
                    $connection = ConnectionUtil::getConnection();
                    $username = "";
                    $created = Custom::created();
                    $sql = "delete from drive_shares  where id = ?";
                    $stmt = $connection->prepare($sql);
                    $stmt->bind_param('s', $drive_share_id);
                    if ($stmt->execute()) {
                        $response['status'] = 1;
                        $response['message'] = "Object successfully unshared";
                        $total_record_save = 1;
                        if ($shared_object == 'FOLDER') {
                            $sql = "UPDATE  drive_folders SET share_count = share_count - ?, modified = ? where id = ?";
                            $stmt = $connection->prepare($sql);
                            $stmt->bind_param('sss', $total_record_save, $created, $drive_folder_id);
                            $stmt->execute();

                        } else {
                            $sql = "UPDATE  drive_files SET share_count = share_count - ?, modified = ? where id = ?";
                            $stmt = $connection->prepare($sql);
                            $stmt->bind_param('sss', $total_record_save, $created, $drive_file_id);
                            $stmt->execute();
                        }


                        if (!empty($share_data)) {
                            $share_with_mobile = $share_data['share_with_mobile'];
                            $share_from_mobile = $share_data['share_from_mobile'];
                            $share_from_user_id = $share_data['share_from_user_id'];
                            $share_to_user_id = $share_data['share_to_user_id'];
                            $file_name = $share_data['name'];
                            if ($share_from_user_id == $user_id) {

                                $user_data = WebservicesFunction::get_user_data_by_mobile($share_from_mobile, $thin_app_id);
                                $username = !empty($user_data['username']) ? $user_data['username'] : $share_from_mobile;
                                $message = $username . " has unshared " . strtolower($shared_object) . " " . $file_name . "";
                                $background['sms']['message'] = $message;
                                $background['sms']['mobile'] = $share_with_mobile;

                            } else {
                                $user_data = WebservicesFunction::get_user_data_by_mobile($share_with_mobile, $thin_app_id);
                                $username = !empty($user_data['username']) ? $user_data['username'] : $share_with_mobile;
                                $message = $username . " has unshared " . strtolower($shared_object) . " " . $file_name . "";
                                $background['sms']['message'] = $message;
                                $background['sms']['mobile'] = $share_from_mobile;
                            }

                            /* send appoinment notifincation to staff */
                            if ($share_from_user_id == $user_id) {
                                $send_to_id = $share_to_user_id;
                            } else {
                                $send_to_id = $share_from_user_id;
                            }

                            $message = $username . " has unshared " . strtolower($shared_object) . " $file_name";
                            $option = array(
                                'thinapp_id' => $thin_app_id,
                                'channel_id' => 0,
                                'flag' => 'SHARE_DRIVE',
                                'title' => "New Appointment Request",
                                'message' => mb_strimwidth($message, 0, 250, '...'),
                                'description' => mb_strimwidth($message, 0, 250, '...'),
                                'chat_reference' => '',
                                'module_type' => 'SHARE_DRIVE',
                                'module_type_id' => $drive_share_id,
                                'firebase_reference' => ""
                            );
                            $background['nt']['option'] = $option;
                            $background['nt']['user_id'] = $send_to_id;


                        }

                    } else {
                        $response['status'] = 0;
                        $response['message'] = ucwords(strtolower($shared_object)) . " could not be unshared";
                    }
                } else {
                    $response['status'] = 0;
                    $response['message'] = "You can not unshare this file";
                }
            }
            if ($return === false) {
                Custom::sendResponse($response);
                if (!empty($background)) {
                    Custom::send_process_to_background();
                    /* this function send otp and send process in backround*/
                    if (array_key_exists("nt", $background)) {
                        Custom::send_notification_by_user_id($background['nt']['option'], array($background['nt']['user_id']), $thin_app_id);
                    }
                    if (array_key_exists("sms", $background)) {
                        $message = $background['sms']['message'];
                        $mobile = $background['sms']['mobile'];
                        // Custom::send_single_sms($mobile, $message, $thin_app_id);

                    }
                }
            } else {
                return json_encode($response);
            }

        }
        exit;
    }


    public static function add_user_log()
    {
    
    	$response['status'] = 1;
        $response['message'] = "User  logged successfully";
        Custom::sendResponse($response);die;
    

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $device_id = isset($data['device_id']) ? $data['device_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $background_data = array();

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            }  else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else {
                ignore_user_abort(true);
                if (WebservicesFunction::addUserLogToJson($user_id, $thin_app_id, $device_id)) {
                    $response['status'] = 1;
                    $response['message'] = "User  logged successfully";
                    WebservicesFunction::addUserStaticToJson('', $user_id, $thin_app_id, $mobile, "DASHBOARD", "DASHBOARD", 'add_user_log');

                } else {
                    $response['status'] = 0;
                    $response['message'] = "User  could not logged";
                }
            }
            // echo json_encode($response);die;
            Custom::sendResponse($response);

        }
        exit();

    }


    public static function add_file_to_folder_permission($data = null)
    {
        $return_response = true;
        if (empty($data)) {
            $return_response = false;
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);
        }
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $drive_folder_id = isset($data['drive_folder_id']) ? $data['drive_folder_id'] : "";
            $status = isset($data['status']) ? strtoupper($data['status']) : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $background_data = array();
            $folder_data = array();

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($drive_folder_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid folder';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($status) || ($status != "YES" && $status != "NO")) {
                $response['status'] = 0;
                $response['message'] = 'Invalid status';
            } else {
                try {
                    $connection = ConnectionUtil::getConnection();
                    $folder_data = Custom::get_folder_data($drive_folder_id);
                    if (!empty($folder_data)) {
                        $created = Custom::created();
                        $sql = "UPDATE  drive_folders SET allow_add_file = ?, modified = ? where id = ?";
                        $stmt = $connection->prepare($sql);
                        $stmt->bind_param('sss', $status, $created, $drive_folder_id);
                        if ($stmt->execute()) {
                            $response['status'] = 1;
                            $response['message'] = "Permission changed successfully";
                        } else {
                            $response['status'] = 0;
                            $response['message'] = "Permission could not be changed";
                        }
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Invalid folder";
                    }


                } catch (Exception $e) {
                    $response['status'] = 0;
                    $response['message'] = "Server not responding";
                }
            }
            if ($return_response === true) {
                return json_encode($response);
            } else {
                Custom::sendResponse($response);
            }


            /* send notification to users */
            if (!empty($folder_data)) {
                Custom::send_process_to_background();
                $user_id_list = Custom::get_folder_shared_user_mobile_and_id($drive_folder_id);
                if ($user_id_list) {
                    if (!empty($folder_data['username'])) {
                        $username = $folder_data['username'];
                    } else {
                        $username = $folder_data['mobile'];
                    }

                    if ($status == "YES") {
                        $message = $username . " enabled permission for add file to folder " . $folder_data['folder_name'];
                    } else {
                        $message = $username . " disabled permission for add file to folder " . $folder_data['folder_name'];
                    }

                    $option = array(
                        'thinapp_id' => $thin_app_id,
                        'channel_id' => 0,
                        'role' => "USER",
                        'flag' => 'FILE_ADD',
                        'title' => "New file added to folder " . $folder_data['folder_name'],
                        'message' => mb_strimwidth($message, 0, 250, '...'),
                        'description' => mb_strimwidth($message, 0, 250, '...'),
                        'chat_reference' => '',
                        'module_type' => 'DOCUMENT',
                        'module_type_id' => 0,
                        'firebase_reference' => "",
                        "allow_add_file" => $status
                    );
                    $user_ids = array_column($user_id_list, "share_to_user_id");
                    $user_ids = Custom::search_remove($user_id, $user_ids);
                    Custom::send_notification_by_user_id($option, $user_ids, $thin_app_id);

                }
            }

        }
        exit();

    }

    public static function add_chat_user($data = null, $return = false)
    {

        if (empty($data)) {
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);
        }
        //Custom::send_process_to_background();
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $from_mobile = isset($data['from_mobile']) ? $data['from_mobile'] : "";
            $to_mobile = isset($data['to_mobile']) ? $data['to_mobile'] : "";
            $to_username = isset($data['to_username']) ? $data['to_username'] : "";
            $chat_reference = isset($data['chat_reference']) ? str_replace(" ", "", $data['chat_reference']) : "";
            $chat_type = (isset($data['chat_type']) && !empty($data['chat_type'])) ? $data['chat_type'] : "APP_CHAT";
            $flag = isset($data['flag']) ? mb_strtoupper($data['flag']) : "OTHER";
            $post_visit_id = isset($data['post_visit_id']) ? mb_strtoupper($data['post_visit_id']) : 0;

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($from_mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid  from mobile ';
            } else if (empty($to_mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid  to mobile ';
            } else if (empty($chat_reference)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid  chat reference ';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else {
                try {
                    $connection = ConnectionUtil::getConnection();
                    if ($flag == "POST_VISIT") {
                        $created = Custom::created();
                        $sql = "update doctor_post_visit_chat set  modified =? where id = ?";
                        $stmt = $connection->prepare($sql);
                        $stmt->bind_param('ss', $created, $post_visit_id);
                        if ($stmt->execute()) {
                            $response['status'] = 1;
                            $response['message'] = "Chat update successfully";
                        } else {
                            $response['status'] = 0;
                            $response['message'] = "Sorry  chat could not update";
                        }

                    } else {
                        $from_mobile = Custom::create_mobile_number($from_mobile);
                        $to_mobile = Custom::create_mobile_number($to_mobile);;

                        $created = Custom::created();

                        if ($chat_type == "APP_CHAT") {
                            $chat_reference = Custom::createChatReference($from_mobile, $to_mobile, $thin_app_id);
                            $query = "select id from chat_users where (from_mobile = '$from_mobile' and to_mobile ='$to_mobile') OR (to_mobile = '$from_mobile' and from_mobile ='$to_mobile') and thinapp_id = $thin_app_id  AND chat_type = '$chat_type' limit 1";
                        } else {
                            $query = "select id from chat_users where chat_reference = '$chat_reference' AND chat_type = '$chat_type' limit 1";
                        }

                        $file = $connection->query($query);
                        if (!$file->num_rows) {
                            $user_data = Custom::get_user_by_mobile($thin_app_id, $to_mobile);
                            $to_user_id = !empty($user_data) ? $user_data['id'] : 0;
                            $username = !(empty($to_username)) ? $to_username : $to_mobile;
                            $sql = "INSERT INTO chat_users (chat_reference, user_id, thinapp_id, from_mobile, to_mobile, from_user_id, to_user_id, to_username, created, chat_type) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                            $stmt_sub = $connection->prepare($sql);
                            $stmt_sub->bind_param('ssssssssss', $chat_reference, $user_id, $thin_app_id, $from_mobile, $to_mobile, $user_id, $to_user_id, $username, $created, $chat_type);
                            if ($stmt_sub->execute()) {
                                $response['status'] = 1;
                                $response['message'] = "Success";
                                if ($chat_type == "APP_CHAT") {
                                    WebservicesFunction::addUserStaticToJson('', $user_id, $thin_app_id, $mobile, "CHAT", "LIVE CHAT", 'add_chat_user');
                                } else {
                                    WebservicesFunction::addUserStaticToJson('', $user_id, $thin_app_id, $mobile, "CHAT", "SUPPORT CHAT", 'add_chat_user');
                                }
                            } else {
                                $response['status'] = 0;
                                $response['message'] = "Faild";
                            }

                        } else {
                            $created = Custom::created();
                            $ch_id = mysqli_fetch_assoc($file);
                            $sql = "UPDATE  chat_users SET  created = ? where id = ?";
                            $stmt = $connection->prepare($sql);
                            $stmt->bind_param('ss', $created, $ch_id['id']);
                            $stmt->execute();
                            $response['status'] = 0;
                            $response['message'] = "Already";
                            if ($chat_type == "APP_CHAT") {
                                WebservicesFunction::addUserStaticToJson('', $user_id, $thin_app_id, $mobile, "CHAT", "LIVE CHAT", 'add_chat_user');
                            } else {
                                WebservicesFunction::addUserStaticToJson('', $user_id, $thin_app_id, $mobile, "CHAT", "SUPPORT CHAT", 'add_chat_user');
                            }
                        }
                        $connection->close();
                    }
                } catch (Exception $e) {

                }
            }
            if ($return === false) {
                Custom::sendResponse($response);
            } else {
                return json_encode($response);
            }
        }
        exit();
    }


    public static function get_chat_user_list()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $from_mobile = isset($data['from_mobile']) ? $data['from_mobile'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($from_mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else {
                try {

                    // $query = "select u.id, u.firebase_token, u.image, DATE_FORMAT(cu.created,'%d %M, %Y') as date, DATE_FORMAT(cu.created,'%H:%i') as time, cu.to_username as  username, if(cu.user_id = $user_id, cu.to_mobile, cu.from_mobile)  as mobile from chat_users as cu left join users as u on u.mobile = if(cu.user_id = $user_id, cu.to_mobile, cu.from_mobile) and u.thinapp_id =cu.thinapp_id  and (u.role_id = 5 OR u.role_id =1) where cu.thinapp_id = $thin_app_id and ( cu.from_mobile = '$from_mobile' OR cu.to_mobile = '$from_mobile' ) order by cu.created DESC ";
                    $query = "select IF(app_sta.show_mobile IS NOT NULL,app_sta.show_mobile,'YES') AS show_mobile, cu.id, IF(app_sta.name IS NOT NULL, app_sta.name, IF(a_sta.fullname IS NOT NULL, a_sta.fullname, IFNULL(u.username,'Anonymous')) ) as  username, u.id, u.firebase_token, IF(app_sta.profile_photo IS NOT NULL, app_sta.profile_photo, IF(a_sta.image IS NOT NULL, a_sta.image, u.image)) as image, DATE_FORMAT(cu.created,'%d %M, %Y') as date, DATE_FORMAT(cu.created,'%H:%i') as time, if(cu.user_id = $user_id, cu.to_mobile, cu.from_mobile)  as mobile from chat_users as cu left join appointment_staffs as app_sta on ( ( app_sta.mobile = cu.to_mobile and cu.user_id = $user_id) OR ( app_sta.mobile = cu.from_mobile and cu.user_id != $user_id)  ) and app_sta.thinapp_id =cu.thinapp_id and app_sta.status = 'ACTIVE' left join app_staffs as a_sta on ( ( a_sta.mobile = cu.to_mobile and cu.user_id = $user_id) OR ( a_sta.mobile = cu.from_mobile and cu.user_id != $user_id )  )  and a_sta.thinapp_id =cu.thinapp_id and a_sta.status = 'Y' left join users as u on ( ( u.mobile = cu.to_mobile and cu.user_id = $user_id) OR ( u.mobile = cu.from_mobile and cu.user_id != $user_id)  )  and u.thinapp_id =cu.thinapp_id and (u.role_id = 5 OR u.role_id =1) where cu.thinapp_id = $thin_app_id and ( cu.from_mobile = '$from_mobile' OR cu.to_mobile = '$from_mobile' ) and cu.chat_type = 'APP_CHAT' group by cu.id order by cu.created DESC";

                    $connection = ConnectionUtil::getConnection();
                    $message_list = $connection->query($query);
                    if ($message_list->num_rows) {
                        $channel_list = mysqli_fetch_all($message_list, MYSQLI_ASSOC);
                        $response['status'] = 1;
                        $response['message'] = "Chat user list found";
                        $response['data']['user_list'] = $channel_list;
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Sorry you have not chat yet";
                    }
                } catch (Exception $e) {

                }
            }
            Custom::sendResponse($response);
        }
        exit();
    }


    public static function add_user_profile()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $name = isset($data['name']) ? $data['name'] : "";
            $email = isset($data['email']) ? $data['email'] : "";
            $image = isset($data['image']) ? $data['image'] : "";
            $address = isset($data['address']) ? $data['address'] : "";
            $about_user = isset($data['about_user']) ? $data['about_user'] : "";
            $education = isset($data['education']) ? $data['education'] : "";
            $registration_number = isset($data['registration_number']) ? $data['registration_number'] : "";
            $country_id = isset($data['country_id']) ? $data['country_id'] : "";
            $state_id = isset($data['state_id']) ? $data['state_id'] : "";
            $city_id = isset($data['city_id']) ? $data['city_id'] : "";
            $fees = isset($data['fees']) ? $data['fees'] : "";
            $current_working = isset($data['current_working']) ? $data['current_working'] : "";
            $experience = isset($data['experience']) ? $data['experience'] : "";
            $category_id = isset($data['category_id']) ? $data['category_id'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($name)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid  name';
            } else if (empty($email)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid  email id ';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid  user id ';
            } else {
                try {

                    $user_data = Custom::get_user_by_id($user_id);
                    if (!empty($user_data)) {
                        $image = Custom::check_image_path_string($image);
                        $connection = ConnectionUtil::getConnection();
                        $created = Custom::created();
                        $sql = "UPDATE  users SET about_user =?, department_category_id = ?, country_id=?, state_id=?, city_id=?, fees =?, current_working =?, experience =?, registration_number = ?, education =?,  username = ?, email = ?, image = ?, address =?, modified = ? where id = ? and thinapp_id = ?";
                        $stmt = $connection->prepare($sql);
                        $stmt->bind_param('sssssssssssssssss', $about_user, $category_id, $country_id, $state_id, $city_id, $fees, $current_working, $experience, $registration_number, $education, $name, $email, $image, $address, $created, $user_id, $thin_app_id);
                        if ($stmt->execute()) {
                            Custom::deleteUserCache($user_data['is_support_user'], $user_data['id'], $user_data['mobile'], $user_data['thinapp_id']);
                            $response['status'] = 1;
                            $response['message'] = "Profile update successfully";
                        } else {
                            $response['status'] = 0;
                            $response['message'] = "Profile could not be update";
                        }
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Invalid user";
                    }

                } catch (Exception $e) {

                }
            }
            Custom::sendResponse($response);
        }
        exit();
    }

    public static function get_user_profile()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : 0;
            $department_list = isset($data['department_list']) ? $data['department_list'] : "NO";
            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid  user id ';
            } else {
                try {

                    if ($department_list == "YES") {
                        if (!empty($doctor_id)) {
                            $condition = " app_staff.id = $doctor_id";
                        } else {
                            $condition = " u.thinapp_id = $thin_app_id and u.role_id = 5 ";
                        }
                        $query = "select app_staff.enable_chat, app_staff.appointment_category_id as department_id, app_staff.id as doctor_id, IF(app_staff.show_mobile IS NOT NULL, app_staff.show_mobile,'YES') as show_mobile, (select count(id) from users as iu where iu.thinapp_id = u.thinapp_id and iu.role_id =1 )as subscriber_count, app_staff.country_id, app_staff.state_id, app_staff.city_id, app_staff.department_category_id as category_id, if(app_staff.experience = '' OR app_staff.experience = '0','0.0',app_staff.experience) as experience  , app_staff.fees, app_staff.current_working ,IFNULL(dc.category_name,'') as category_name, IFNULL(con.name,'') as country_name, IFNULL(s.name,'')  as state_name, IFNULL(city.name,'') as city_name, IFNULL(app_staff.name,'') as username,IFNULL(app_staff.registration_number,'') as registration_number, IFNULL(app_staff.email,'') as email, IFNULL(app_staff.profile_photo,'') as image, IFNULL(app_staff.address,'') as address, IFNULL(app_staff.sub_title,'') as education,  app_staff.mobile, IFNULL(app_staff.description,'') as description  from users as u  left join appointment_staffs as app_staff on app_staff.mobile = u.mobile AND u.thinapp_id =  app_staff.thinapp_id and app_staff.status = 'ACTIVE' and app_staff.staff_type = 'DOCTOR' left join countries as con on app_staff.country_id = con.id left join states as s on app_staff.state_id = s.id left join cities as city on city.id = app_staff.city_id   left join department_categories as dc on dc.id =app_staff.department_category_id where $condition limit 1";
                        $connection = ConnectionUtil::getConnection();
                        $message_list = $connection->query($query);
                        if ($message_list->num_rows) {
                            $user_data = mysqli_fetch_assoc($message_list);
                            $response['status'] = 1;
                            $response['message'] = "User profile found";
                            $response['data']['profile'] = $user_data;
                            if (!$country_list = json_decode(WebservicesFunction::readJson("country_list"), true)) {
                                $country_list = Custom::getCountryList(true);
                                WebservicesFunction::createJson("country_list", json_encode($country_list), "CREATE");
                            }
                            $response['data']['profile']['country_list'] = $country_list;

                            $response['data']['profile']['department_list'] = $response['data']['profile']['address_list'] = array();

                            $doctor_id = !empty($doctor_id) ? $doctor_id : !empty($user_data['doctor_id']) ? $user_data['doctor_id'] : 0;
                            $query = "select ac.id,ac.name,ac.image, IF(app_staff.id IS NOT NULL,'YES','NO' ) as is_associated from appointment_categories as ac left join appointment_staffs as app_staff  on app_staff.appointment_category_id = ac.id and app_staff.id = $doctor_id  where ac.thinapp_id = $thin_app_id and ac.status = 'ACTIVE'   order by ac.name asc";
                            $data_list = $connection->query($query);
                            if ($data_list->num_rows) {
                                $list = mysqli_fetch_all($data_list, MYSQLI_ASSOC);
                                $response['data']['profile']['department_list'] = $list;
                            }

                            if (Custom::check_app_enable_permission($thin_app_id, 'NEW_QUICK_APPOINTMENT')) {
                                $query = "select IF(das.id IS NOT NULL, 'YES','NO') as is_associated, aa.latitude, aa.longitude, aa.id,aa.place,aa.address,aa.image,aa.country_id, aa.state_id, aa.city_id, c.name as country_name, s.name as state_name, city.name as city_name, aa.pincode,aa.contact_number, aa.contact_number, aa.emergency_number from appointment_addresses as aa join countries as c on c.id = aa.country_id join states as s on s.id = aa.state_id join cities as city on city.id = aa.city_id  left join doctor_appointment_setting as das on das.appointment_address_id = aa.id and das.doctor_id = $doctor_id AND das.setting_type = ( select app_staf.appointment_setting_type from  appointment_staffs as app_staf where app_staf.id = das.doctor_id )  and das.index_number = 1 where aa.thinapp_id = $thin_app_id and aa.status = 'ACTIVE' group by aa.id  order by aa.id desc";
                            } else {
                                $query = "select IF(ass.id IS NOT NULL, 'YES','NO') as is_associated, aa.latitude, aa.longitude, aa.id,aa.place,aa.address,aa.image,aa.country_id, aa.state_id, aa.city_id, c.name as country_name, s.name as state_name, city.name as city_name, aa.pincode,aa.contact_number, aa.contact_number, aa.emergency_number from appointment_addresses as aa join countries as c on c.id = aa.country_id join states as s on s.id = aa.state_id join cities as city on city.id = aa.city_id  left join appointment_staff_addresses as ass on ass.appointment_address_id = aa.id and ass.appointment_staff_id = $doctor_id where aa.thinapp_id = $thin_app_id and aa.status = 'ACTIVE' order by aa.id desc";
                            }
                            $data_list = $connection->query($query);
                            if ($data_list->num_rows) {
                                $list = mysqli_fetch_all($data_list, MYSQLI_ASSOC);
                                $response['data']['profile']['address_list'] = $list;
                            }
                            $response['data']['profile']['category_list'] = Custom::getDepartmentListByCategory('DOCTOR', true);
                            WebservicesFunction::addUserStaticToJson('', $user_id, $thin_app_id, $mobile, "DOCTORS PROFILE", "VIEW DOCTOR PROFILE", 'get_user_profile');


                        } else {
                            $response['status'] = 0;
                            $response['message'] = "Profile could not found";
                        }
                    } else {

                        $query = "select IF(ac.show_mobile IS NOT NULL, ac.show_mobile,'YES') as show_mobile, (select count(id) from users as iu where iu.thinapp_id = u.thinapp_id and iu.role_id =1 )as subscriber_count, u.country_id, u.state_id, u.city_id, u.department_category_id as category_id, if(u.experience = '' OR u.experience = '0','0.0',u.experience) as experience , u.fees,u.current_working ,IFNULL(dc.category_name,'') as category_name, IFNULL(con.name,'') as country_name, IFNULL(s.name,'')  as state_name, IFNULL(city.name,'') as city_name, IFNULL(u.username,'') as username,IFNULL(u.registration_number,'') as registration_number, IFNULL(u.email,'') as email, IFNULL(u.image,'') as image, IFNULL(u.address,'') as address, IFNULL(u.education,'') as education,  u.mobile, IFNULL(u.about_user,'') as about_user  from users as u left join countries as con on u.country_id = con.id left join states as s on u.state_id = s.id left join cities as city on city.id = u.city_id left join department_categories as dc on dc.id =u.department_category_id left join appointment_staffs as ac on ac.mobile = u.mobile AND u.thinapp_id =  ac.thinapp_id and ac.status = 'ACTIVE' and ac.staff_type = 'DOCTOR'  where u.thinapp_id = $thin_app_id and u.role_id = 5 limit 1";
                        $connection = ConnectionUtil::getConnection();
                        $message_list = $connection->query($query);
                        if ($message_list->num_rows) {
                            $user_data = mysqli_fetch_assoc($message_list);
                            $response['status'] = 1;
                            $response['message'] = "User profile found";
                            $response['data']['profile'] = $user_data;
                            if (!$country_list = json_decode(WebservicesFunction::readJson("country_list"), true)) {
                                $country_list = Custom::getCountryList(true);
                                WebservicesFunction::createJson("country_list", json_encode($country_list), "CREATE");
                            }
                            $response['data']['profile']['country_list'] = $country_list;
                            $response['data']['profile']['category_list'] = Custom::getDepartmentListByCategory('DOCTOR', true);
                            WebservicesFunction::addUserStaticToJson('', $user_id, $thin_app_id, $mobile, "DOCTORS PROFILE", "VIEW DOCTOR PROFILE", 'get_user_profile');


                        } else {
                            $response['status'] = 0;
                            $response['message'] = "Profile could not found";
                        }

                    }

                } catch (Exception $e) {
                    $response['status'] = 0;
                    $response['message'] = "server error";
                }
            }
            Custom::sendResponse($response);
        }
        exit();
    }

    public static function get_state_list()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $country_id = isset($data['country_id']) ? $data['country_id'] : "";
            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid  user';
            } else if (empty($country_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid  country';
            } else {

                if (!$state_list = json_decode(WebservicesFunction::readJson("state_list_$country_id"), true)) {
                    $state_list = Custom::getStateList($country_id, true);
                    WebservicesFunction::createJson("state_list_$country_id", json_encode($state_list), "CREATE");
                }
                if ($state_list) {
                    $response['status'] = 1;
                    $response['message'] = "State list found found";
                    $response['data']['state_list'] = $state_list;
                } else {
                    $response['status'] = 0;
                    $response['message'] = "State list not found";
                }

            }
            Custom::sendResponse($response);
        }
        exit();
    }

    public static function get_city_list()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $state_id = isset($data['state_id']) ? $data['state_id'] : "";
            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid  user';
            } else if (empty($state_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid  state';
            } else {

                if (!$city_list = json_decode(WebservicesFunction::readJson("city_list_$state_id"), true)) {
                    $city_list = Custom::getCityList($state_id, true);
                    WebservicesFunction::createJson("city_list_$state_id", json_encode($city_list), "CREATE");
                }
                if ($city_list) {
                    $response['status'] = 1;
                    $response['message'] = "City list found found";
                    $response['data']['city_list'] = $city_list;
                } else {
                    $response['status'] = 0;
                    $response['message'] = "City list not found";
                }

            }
            Custom::sendResponse($response);
        }
        exit();
    }


    public static function staff_list()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $role_id = isset($data['role_id']) ? $data['role_id'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else {
                try {
                    $condition = "AND staff.enable_chat = 'YES'";
                    if ($role_id ==5) {
                        $condition = "";
                    }
                    $query = "SELECT staff.enable_chat, IF( u.app_installed_status = 'INSTALLED','YES','NO' ) AS show_chat_icon, staff.id, staff.mobile, staff.profile_photo AS image, staff.name, staff.description, u.firebase_token FROM appointment_staffs AS staff JOIN users AS u ON u.id = staff.user_id WHERE staff.thinapp_id = $thin_app_id AND staff.`status`='ACTIVE' $condition ORDER BY staff.name asc ";
                    $connection = ConnectionUtil::getConnection();
                    $message_list = $connection->query($query);
                    if ($message_list->num_rows) {
                        $final_array = mysqli_fetch_all($message_list, MYSQLI_ASSOC);
                        $response['status'] = 1;
                        $response['message'] = "Staff list found";
                        $response['data']['staff_list'] = $final_array;
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Staff list not found";
                    }
                } catch (Exception $e) {

                }
            }
            Custom::sendResponse($response);
        }
        exit();
    }


    public function redir_url()
    {
        $param = $_GET['f'];
        $param = $this->Custom->decodeVariable($param);
        $data = explode("##", $param);
        $fileID = $data[0];
        $mobile = $data[2];
        $driveFileSql = "select id from drive_shares where share_with_mobile = '$mobile' and shared_object= '" . $data[1] . "' and ( drive_folder_id = " . $data[0] . " OR drive_file_id = " . $data[0] . " ) limit 1";
        $connection = ConnectionUtil::getConnection();
        $driveFileRS = $connection->query($driveFileSql);
        if ($driveFileRS->num_rows == 1) {
            $driveFileSql = "SELECT `file_path` FROM `drive_files` WHERE `id` = '" . $fileID . "' LIMIT 1";
            $connection = ConnectionUtil::getConnection();
            $driveFileRS = $connection->query($driveFileSql);
            if ($driveFileRS->num_rows == 1) {
                $driveFileData = mysqli_fetch_assoc($driveFileRS);
                header("Location: " . $driveFileData['file_path']);
                die;
            } else {
                echo "<H2 style='text-align: center; width: 100%;'>Sorry  you cannot access ! </H2>";
                die;
                exit();
            }
        } else {
            echo "<H2 style='text-align: center; width: 100%;'>Sorry  you cannot access ! </H2>";
            die;
            exit();
        }

    }


    public static function send_chat_link_sms()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $from_mobile = isset($data['from_mobile']) ? $data['from_mobile'] : "";
            $to_mobile = isset($data['to_mobile']) ? $data['to_mobile'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($from_mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid from mobile';
            } else if (empty($to_mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid to mobile';
            } else {
                try {
                    $link_key = base64_encode($from_mobile . "@@" . $to_mobile . "@@" . $thin_app_id);
                    $response['status'] = 1;
                    $response['message'] = "Sms send successfully";
                } catch (Exception $e) {
                    $response['status'] = 0;
                    $response['message'] = "server error";
                }

            }
            Custom::sendResponse($response);
            if (!empty($link_key) && (1 == 2)) {
                Custom::send_process_to_background();
                $user_data = Custom::get_user_by_id($user_id);
                $username = $user_data['mobile'];
                if (!empty($user_data) && !empty($user_data['username'])) {
                    $username = $user_data['username'];
                }
                /* http://localhost:8080/#$link_key*/
                $link = FIREBASE_SERVER_PATH . "#" . $link_key;
                $link = Custom::short_url($link,$thin_app_id);
                $message = trim($username) . " wants to chat with you now. Click on link to start chat\n" . $link;
                $message_sent = Custom::send_single_sms($to_mobile, ($message), $thin_app_id);
                if ($message_sent) {
                    WebservicesFunction::addUserStaticToJson('', $user_id, $thin_app_id, $mobile, "CHAT", "INVITE", 'send_chat_link_sms');
                }
                $sender_data = Custom::get_user_by_id($user_id);
                $user_data = Custom::get_user_by_mobile($thin_app_id, $to_mobile);
                if (!empty($user_data) && !empty($sender_data)) {
                    $post_data = array(
                        'thin_app_id' => $thin_app_id,
                        'app_key' => APP_KEY,
                        'user_id' => $user_id,
                        'firebase_token' => $user_data["firebase_token"],
                        'firebase_reference' => Custom::createChatReference($from_mobile, $to_mobile, $thin_app_id),
                        'from_number' => $from_mobile,
                        'to_number' => $to_mobile,
                        'message' => $sender_data['username'] . " want to chat with you.",
                        'file_path_url' => $sender_data['image']
                    );
                    WebservicesFunction::send_chat_notification($post_data);

                }


            }


        }

        exit();


    }

    public static function facebook_token()
    {

        header('Access-Control-Allow-Origin: *');
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else {
                try {
                    //$fb_url = SITE_PATH."services/show_facebook_page/".$thin_app_id;
                    $query = "select id, linkedin_url, facebook_url,instagram_url, website_url, twitter_url, youtube_url, pinterest_url, twitter_usename from thinapps  where id = $thin_app_id limit 1";
                    $connection = ConnectionUtil::getConnection();
                    $message_list = $connection->query($query);
                    if ($message_list->num_rows) {
                        $user_data = mysqli_fetch_assoc($message_list);
                        $response = $user_data;
                    } else {
                        $response['id'] = 0;
                        $response['linkedin_url'] = "";
                        $response['facebook_url'] = "";
                        $response['instagram_url'] = "";
                        $response['website_url'] = "";
                        $response['twitter_url'] = "";
                        $response['youtube_url'] = "";
                        $response['pinterest_url'] = "";
                        $response['twitter_usename'] = "";
                    }
                    $response['status'] = 1;
                    $response['message'] = "Token Found";
                } catch (Exception $e) {
                    $response['status'] = 0;
                    $response['message'] = "server error";
                }

            }
            Custom::sendResponse($response);
        }
        exit();
    }

    public static function one_to_one()
    {

        header('Access-Control-Allow-Origin: *');
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $reference = isset($data['reference']) ? $data['reference'] : "";
            if (empty($reference)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid  request ';
            } else {
                try {
                    $param = explode("@@", base64_decode($reference));
                    $from = $param[0];
                    $to = $param[1];
                    $thin_app_id = $param[2];

                    $query = "select username, email, image, address, mobile  from users  where thinapp_id = $thin_app_id and mobile = '$to' limit 1";
                    $connection = ConnectionUtil::getConnection();
                    $message_list = $connection->query($query);
                    if ($message_list->num_rows) {
                        $user_data = mysqli_fetch_assoc($message_list);
                        $response['status'] = 1;
                        $response['message'] = "User profile found";
                        $response['data']['profile'] = $user_data;
                    } else {
                        $response['status'] = 2;
                        $response['message'] = "Profile could not found";
                    }
                } catch (Exception $e) {
                    $response['status'] = 0;
                    $response['message'] = "server error";
                }
                $response['reference'] = Custom::createChatReference($from, $to, $thin_app_id);
            }

            Custom::sendResponse($response);
        }
        exit();
    }


    public static function get_app_locations()
    {

        header('Access-Control-Allow-Origin: *');
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else {
                try {

                    $query = "select id, location_link, address, city, latitude, longitude from app_address_locations  where thinapp_id = $thin_app_id and  status = 'ACTIVE'";
                    $connection = ConnectionUtil::getConnection();
                    $message_list = $connection->query($query);
                    if ($message_list->num_rows) {
                        $user_data = mysqli_fetch_all($message_list, MYSQLI_ASSOC);
                        $response['status'] = 1;
                        $response['message'] = "Location list found";
                        $response['data']['locations'] = $user_data;

                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Location Not Found";
                    }
                } catch (Exception $e) {
                    $response['status'] = 0;
                    $response['message'] = "server error";
                }

            }
            Custom::sendResponse($response);
        }
        exit();
    }


    public static function get_default_channel_subscriber_list()
    {


        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $offset = isset($data['offset']) ? $data['offset'] : "";
            $search = isset($data['search']) ? $data['search'] : "";
            $main_app_category = isset($data['main_app_category']) ? $data['main_app_category'] : "";
            $list_for = isset($data['list_for']) ? $data['list_for'] : "PATIENT";
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : 0;
            $user_role = isset($data['user_role']) ? $data['user_role'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($offset) && $offset != 0) {
                $response['status'] = 0;
                $response['message'] = 'Invalid offset';
            } else {
                try {
                    $patientHistoryUrl = SITE_PATH.'tracker/get_patient_history/';
                    $condition = "";
                    $limit = PAGINATION_LIMIT;
                    $offset = $offset * $limit;

                    if($user_role =="ADMIN" && $list_for == "PATIENT"){
                        $query = "select * from ((select  IF(abu.status='ACTIVE','BLOCK','UNBLOCK') AS is_block, IF(ac.id IS NULL,'','CUSTOMER') AS `patient_type`,IF(ac.id IS NULL,'',ac.id) AS `patient_id`, ac.first_name as username,ac.mobile, u.image, IF(u.app_installed_status ='INSTALLED' AND u.firebase_token <> '','YES','NO' ) as show_chat_icon, u.firebase_token, CONCAT('$patientHistoryUrl',TO_BASE64(ac.thinapp_id),'/',TO_BASE64(ac.uhid)) as history_url FROM  appointment_customers as ac left join app_blocked_users as abu on abu.mobile = ac.mobile and ac.thinapp_id =abu.thinapp_id  left join users as u on u.mobile = ac.mobile  and ac.thinapp_id = u.thinapp_id where ac.status ='ACTIVE' and ac.thinapp_id=$thin_app_id and ( ac.first_name like '%$search%' OR ac.mobile like '%$search%')  order by username asc )  UNION ALL (select   IF(abu.status='ACTIVE','BLOCK','UNBLOCK') AS is_block,IF(c.id IS NULL,'','CHILDREN') AS `patient_type`,IF(c.id IS NULL,'',c.id) AS `patient_id`, c.child_name as username, c.mobile, c.image, IF(u.app_installed_status ='INSTALLED' AND u.firebase_token <> '','YES','NO' ) as show_chat_icon, u.firebase_token, CONCAT('$patientHistoryUrl',TO_BASE64(c.thinapp_id),'/',TO_BASE64(c.uhid)) as history_url FROM childrens as c  left join app_blocked_users as abu on abu.mobile = c.mobile and c.thinapp_id =abu.thinapp_id  left join users as u on u.mobile = c.mobile  and c.thinapp_id = u.thinapp_id WHERE c.status = 'ACTIVE' and  c.thinapp_id=$thin_app_id and ( c.child_name like '%$search%' OR c.mobile like '%$search%')  order by username asc)) as result order by username asc  limit $offset, $limit";

                    }else {

                        if ($list_for == "PATIENT") {
                            $condition = $search_condition = "";
                            if ($user_role != "ADMIN" && $doctor_id > 0) {
                                $condition = " and acss.appointment_staff_id = $doctor_id";
                            }
                            $query = "select  * from ((select  IF(abu.status='ACTIVE','BLOCK','UNBLOCK') AS is_block,IF(ac.id IS NULL,'','CUSTOMER') AS `patient_type`,IF(ac.id IS NULL,'',ac.id) AS `patient_id`, ac.first_name as username,ac.mobile, u.image, IF(u.app_installed_status ='INSTALLED' AND u.firebase_token <> '','YES','NO' ) as show_chat_icon, u.firebase_token, CONCAT('$patientHistoryUrl',TO_BASE64(ac.thinapp_id),'/',TO_BASE64(ac.uhid)) as history_url from appointment_customer_staff_services as acss join appointment_customers as ac on ac.id = acss.appointment_customer_id and ac.status ='ACTIVE' and ac.thinapp_id=$thin_app_id and ( ac.first_name like '%$search%' OR ac.mobile like '%$search%') $condition  left join app_blocked_users as abu on abu.mobile = ac.mobile and ac.thinapp_id =abu.thinapp_id  left join users as u on u.mobile = ac.mobile  and ac.thinapp_id = u.thinapp_id group by acss.appointment_customer_id order by username asc ) UNION ALL (select IF(abu.status='ACTIVE','BLOCK','UNBLOCK') AS is_block, IF(c.id IS NULL,'','CHILDREN') AS `patient_type`,IF(c.id IS NULL,'',c.id) AS `patient_id`, c.child_name as username, c.mobile, c.image, IF(u.app_installed_status ='INSTALLED' AND u.firebase_token <> '','YES','NO' ) as show_chat_icon, u.firebase_token, CONCAT('$patientHistoryUrl',TO_BASE64(c.thinapp_id),'/',TO_BASE64(c.uhid)) as history_url from appointment_customer_staff_services as acss join childrens as c on c.id = acss.children_id  AND c.status = 'ACTIVE' and  c.thinapp_id=$thin_app_id and ( c.child_name like '%$search%' OR c.mobile like '%$search%') $condition left join app_blocked_users as abu on abu.mobile = c.mobile and c.thinapp_id =abu.thinapp_id  left join users as u on u.mobile = c.mobile  and c.thinapp_id = u.thinapp_id group by acss.children_id order by username asc)) as result order by username asc limit $offset, $limit";

                        } else {
                            $condition = "";
                            if (!empty($search)) {
                                if ($search == "Anonymous") {
                                    $condition = " and ( s.name = '' OR s.name IS NULL ) and u.id IS NULL ";
                                } else {
                                    $condition = " and ( u.username like '%$search%' OR s.name like '%$search%' OR u.mobile like '%$search%' OR s.mobile like '%$search%' ) ";
                                }
                            }
                            $query = "select IF(abu.status='ACTIVE','BLOCK','UNBLOCK') AS is_block,'' AS `patient_type`,'' AS `patient_id`, s.name, u.username, IF(u.app_installed_status ='INSTALLED' AND u.firebase_token <> '','YES','NO' ) as show_chat_icon, u.firebase_token, s.mobile, u.image, IF(u.username IS NULL,IF(s.name ='' OR s.name IS NULL,'Anonymous',s.name),u.username) as username from subscribers as s join channels as c on c.id = s.channel_id and c.channel_status = 'DEFAULT' left join users as u on u.mobile = s.mobile and u.role_id = 1  and s.app_id = u.thinapp_id left join app_blocked_users as abu on abu.mobile = s.mobile and s.app_id =abu.thinapp_id  where s.app_id = $thin_app_id  AND s.status='SUBSCRIBED'  $condition group by s.mobile order by username ASC LIMIT  $offset, $limit";

                        }
                    }


                    $connection = ConnectionUtil::getConnection();
                    $message_list = $connection->query($query);
                    if ($message_list->num_rows) {
                        $user_data = mysqli_fetch_all($message_list, MYSQLI_ASSOC);
                        $response['status'] = 1;
                        $response['message'] = "List found";
                        $response['data']['mobile_list'] = $user_data;

                    } else {
                        $response['status'] = 1;
                        $response['message'] = "List Not Found";
                        $response['data']['mobile_list'] = array();
                    }
                    /* SEND TOTAL COUND TO SUBSCRIBER */

                    if($user_role =="ADMIN" && $list_for == "PATIENT"){
                        $query = "select sum(result.tot) as total_subscriber from ((select  count(ac.id) AS tot FROM  appointment_customers as ac  left join users as u on u.mobile = ac.mobile  and ac.thinapp_id = u.thinapp_id where ac.status ='ACTIVE' and ac.thinapp_id=$thin_app_id ) UNION ALL (select  count(c.id) AS tot FROM childrens as c  left join users as u on u.mobile = c.mobile  and c.thinapp_id = u.thinapp_id WHERE c.status = 'ACTIVE' and  c.thinapp_id=$thin_app_id )) as result ";

                    }else {
                        if ($list_for == "PATIENT") {
                            $query = "select sum(total_subscriber) as total_subscriber from ((select  count(DISTINCT(acss.appointment_customer_id)) as total_subscriber from appointment_customer_staff_services as acss join appointment_customers as ac on ac.id = acss.appointment_customer_id and ac.status ='ACTIVE' and ac.thinapp_id=$thin_app_id) UNION ALL (select  count(DISTINCT(acss.children_id)) as total_subscriber from appointment_customer_staff_services as acss join childrens as c on c.id = acss.children_id  AND c.status = 'ACTIVE' and  c.thinapp_id=$thin_app_id)) as total";
                        } else {
                            $query = "select count((s.id)) as total_subscriber from subscribers as s where s.app_id = $thin_app_id  AND s.status='SUBSCRIBED' ";
                        }
                    }

                    $count_qry = $connection->query($query);
                    $count = mysqli_fetch_assoc($count_qry);
                    $response['total_subscriber'] = $count['total_subscriber'];


                } catch (Exception $e) {
                    $response['status'] = 0;
                    $response['message'] = "server error";
                }

            }
            Custom::sendResponse($response);
        }
        exit();
    }


    public static function get_service_offer_list()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $offset = isset($data['offset']) ? $data['offset'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter user id';
            } else if (empty($offset) && $offset != 0) {
                $response['status'] = 0;
                $response['message'] = 'Please enter offset';
            } else {
                $response = $response_data = array();
                $connection = ConnectionUtil::getConnection();
                $limit = PAGINATION_LIMIT;
                $now = date('Y-m-d H:is');
                $query = "select id, title, image, short_description , base_amount as price, offer_amount as offer_price from  app_service_offers  where UNIX_TIMESTAMP(end) >= UNIX_TIMESTAMP(NOW()) AND status='ACTIVE' AND  thinapp_id = $thin_app_id ORDER BY id desc LIMIT $limit offset $offset";
                $subscriber = $connection->query($query);
                if ($subscriber->num_rows) {
                    $offer_list = mysqli_fetch_all($subscriber, MYSQLI_ASSOC);
                    $response['status'] = 1;
                    $response['message'] = "Offer list found";
                    $response['data']['offer_list'] = $offer_list;
                } else {
                    $response['status'] = 0;
                    $response['message'] = "No address list found";
                }
            }
            echo json_encode($response);
            die;
        } else {
            exit();
        }
    }


    public static function get_service_menu_category_list()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $offset = isset($data['offset']) ? $data['offset'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter user id';
            } else if (empty($offset) && $offset != 0) {
                $response['status'] = 0;
                $response['message'] = 'Please enter offset';
            } else {
                $response = $response_data = array();
                $connection = ConnectionUtil::getConnection();
                $limit = PAGINATION_LIMIT;
                $query = "select id, name, image from  service_menu_categories  where status = 'ACTIVE' and thinapp_id = $thin_app_id ORDER BY id asc";
                $subscriber = $connection->query($query);
                if ($subscriber->num_rows) {
                    $menu_list = mysqli_fetch_all($subscriber, MYSQLI_ASSOC);

                    $response['status'] = 1;
                    $response['message'] = "Offer list found";
                    $response['data']['category_list'] = $menu_list;
                } else {
                    $response['status'] = 0;
                    $response['message'] = "No address list found";
                }
            }
            echo json_encode($response);
            die;
        } else {
            exit();
        }
    }

    public static function get_service_menu_list()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $category_id = isset($data['category_id']) ? $data['category_id'] : "";
            $offset = isset($data['offset']) ? $data['offset'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter user id';
            } else if (empty($offset) && $offset != 0) {
                $response['status'] = 0;
                $response['message'] = 'Please enter offset';
            } else if (empty($category_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid category id';
            } else {
                $response = $response_data = array();
                $connection = ConnectionUtil::getConnection();
                $limit = PAGINATION_LIMIT;
                $query = "select name, amount from service_menus  where thinapp_id = $thin_app_id and status = 'ACTIVE' and service_menu_category_id = $category_id ORDER BY id asc";
                $subscriber = $connection->query($query);
                if ($subscriber->num_rows) {
                    $menu_list = mysqli_fetch_all($subscriber, MYSQLI_ASSOC);
                    $response['status'] = 1;
                    $response['message'] = "Offer list found";
                    $response['data']['service_list'] = $menu_list;
                } else {
                    $response['status'] = 0;
                    $response['message'] = "No address list found";
                }
            }
            echo json_encode($response);
            die;
        } else {
            exit();
        }
    }


    public static function getThinAppList()
    {
    	
        $name = isset($_REQUEST['app_name']) ? $_REQUEST['app_name'] : "";
   		$limit = isset($_REQUEST['limit']) ? "LIMIT ".$_REQUEST['limit'] : "";
        $condition = !empty($name)?" where t.name LIKE '%$name%' ":"";

        $query = "SELECT t.*, u.verification_code, IFNULL(GROUP_CONCAT(CONCAT(b.index_number,'###',b.path)), '') AS banner FROM thinapps as t left join users as u on u.id= t.user_id left JOIN banners AS b ON b.thinapp_id = t.id AND b.STATUS = 'ACTIVE' $condition GROUP BY t.id ORDER BY t.id DESC $limit";
       
      
        $connection = ConnectionUtil::getConnection();
        $requestList = $connection->query($query);
        $requestListData = mysqli_fetch_all($requestList, MYSQLI_ASSOC);
        $dataToSend = array();
        if (!empty($requestListData)) {
            $dataToSend['status'] = 1;
            $dataToSend['data'] = $requestListData;
        } else {
            $dataToSend['status'] = 0;
            $dataToSend['message'] = "Could not found request list!";
        }
        echo json_encode($dataToSend);
        die;
    }

 public static function addThiappFromLocal($global_connection=null,$data_array=null)
    {
        try {
            if(empty($global_connection)){
                $connection = ConnectionUtil::getConnection();
                $connection->autocommit(FALSE);
            }else{
                $connection = $global_connection;
            }

            if(!empty($data_array)){
                $_POST = $data_array;
            }


            $name = $_POST['name'];
            $category_name = $_POST['category_name'];
            $email = $_POST['email'];
            $phone = Custom::create_mobile_number(str_replace(" ", "", strtolower($_POST['phone'])));
            $address = $_POST['address'];
            $role_id = 5;
            $username = preg_replace('/[^A-Za-z0-9\-]/', '', str_replace(" ", "-", strtolower($name)));


            $mobile = $phone;
            $password = md5(substr($_POST['phone'], -10));
            $org_unique_url = preg_replace('/[^A-Za-z0-9\-]/', '', str_replace(" ", "-", strtolower($name)));

            $device_type = "WEB";
            $is_verified = "Y";
            $status = "Y";
            $created = Custom::created();
            $org_type = 13;
            $support_admin_id = 2;

            $userInsertQuery = "INSERT INTO `users` (`role_id`,`username`,`email`,`password`,`mobile`,
    `org_unique_url`,`device_type`,`is_verified`,`status`,`created`,`modified`) VALUES (?,?,?,?,?,?,?,?,?,?,?)";

            $stmt = $connection->prepare($userInsertQuery);
            $stmt->bind_param('sssssssssss', $role_id, $username, $email, $password, $mobile, $org_unique_url, $device_type, $is_verified, $status, $created, $created);

            if ($stmt->execute()) {

                $userID = $stmt->insert_id;


                $customerLeadInsertQuery = "INSERT INTO `customer_lead` (`mobile`,`org_name`,`cust_email`,
    `org_type`,`org_unique_url`,`created`,`modified`,`status`,`user_id`,`support_admin_id`,`app_name`,
    `app_theme`,`app_payment`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)";

                $stmt_cu = $connection->prepare($customerLeadInsertQuery);

                $new = "NEW";
                $app_theme = $app_payment = 1;
                $stmt_cu->bind_param('sssssssssssss', $mobile, $name, $email, $org_type, $org_unique_url, $created, $created, $new, $userID, $support_admin_id, $name, $app_theme, $app_payment);

                $stmt_cu->execute();
                $customerLeadID = $stmt_cu->insert_id;

                $gullakInsertQuery = "INSERT INTO `gullaks` (`user_id`,`total_coins`,`created`,`modified`)
     VALUES ('" . $userID . "','1000','" . $created . "','" . $created . "')";
                $connection->query($gullakInsertQuery);

                $transactionID = "999999999999";
                $amount = "10000";
                $endDate = date('Y-m-d H:i:s', strtotime('+1 years'));
                $paymentsInsertQuery = "INSERT INTO `payments` (`transaction_id`,`user_id`,`app_id`,`membership_id`,
    `amount`,`status`,`created`,`modified`,`membership_start`,`membership_expire`,`membership_status`)
    VALUES ('" . $transactionID . "','" . $userID . "','" . $customerLeadID . "','3','" . $amount . "','1','" . $created . "',
    '" . $created . "','" . $created . "','" . $endDate . "','ACTIVE')";
                $connection->query($paymentsInsertQuery);
                $paymentID = $connection->insert_id;

                $appID = str_replace(" ", "_", strtoupper($name));

                $thinappInsertQuery = "INSERT INTO `thinapps` (`app_id`,`name`,`category_name`,`user_id`,
    `email`,`phone`,`address`,`start_date`,`end_date`,`created`,`modified`) VALUES(?,?,?,?,?,?,?,?,?,?,?)";
                $stmt2 = $connection->prepare($thinappInsertQuery);
                $stmt2->bind_param('sssssssssss', $appID, $name, $category_name, $userID, $email, $phone, $address, $created, $endDate, $created, $created);
                $stmt2->execute();
                $thinappID = $stmt2->insert_id;


                $appSmsStaticsInsertQuery = "INSERT INTO `app_sms_statics` (`thinapp_id`,`user_id`,`total_promotional_sms`,
    `total_transactional_sms`,`created`,`modified`) VALUES ('" . $thinappID . "','" . $userID . "',
    '1000','1000','" . $created . "','" . $created . "')";
                $connection->query($appSmsStaticsInsertQuery);

                $usersUpdateQuery = "UPDATE `users` SET `thinapp_id` = '" . $thinappID . "' WHERE `id` = '" . $userID . "'";
                $connection->query($usersUpdateQuery);

                $customerLeadQuery = "UPDATE `customer_lead` SET `app_id` = '" . $thinappID . "' WHERE `customer_id` = '" . $customerLeadID . "'";
                $connection->query($customerLeadQuery);


                if(empty($global_connection)){
                    $connection->commit();
                }
                Custom::addAccessKeyToApp($thinappID);

                $response['status']=1;
                $response['thin_app_id']=$thinappID;
                $response['user_id']=$userID;


            } else {
                $response['status']=1;
            }

        } catch (Exception $e) {
            $connection->rollback();
            $response['status']=1;
        }

        if(!empty($global_connection)){
            return json_encode($response);
        }else{
            echo json_encode($response);
        }

    }

    public static function add_child($data = null,$allow_add_child_via_user= false)
    {
        $return = true;
        if (empty($data)) {
            $return = false;
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);
        }
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $app_version_name = isset($data['app_version_name']) ? $data['app_version_name'] : "";
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $role_id = isset($data['role_id']) ? $data['role_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $image = isset($data['image']) ? $data['image'] : "";
            $parents_mobile = isset($data['parents_mobile']) ? $data['parents_mobile'] : "";
            $add_vaccination = isset($data['add_vaccination']) ? $data['add_vaccination'] : "YES";
            $child_name = isset($data['child_name']) ? $data['child_name'] : "";
            $dob = isset($data['dob']) ? date('Y-m-d', strtotime($data['dob'])) : "";
            $gender = isset($data['gender']) ? strtoupper($data['gender']) : "";
            $birth_weight = isset($data['birth_weight']) ? $data['birth_weight'] : "";
            $birth_height = isset($data['birth_height']) ? $data['birth_height'] : "";
            $patient_address = isset($data['patient_address']) ? $data['patient_address'] : "";
            $patient_profession = isset($data['patient_profession']) ? $data['patient_profession'] : "";
            $birth_height = isset($data['birth_height']) ? $data['birth_height'] : "";
            $birth_head_circumference = isset($data['birth_head_circumference']) ? $data['birth_head_circumference'] : "";
            $blood_group = isset($data['blood_group']) ? $data['blood_group'] : "";
            $special_remark = isset($data['special_remark']) ? $data['special_remark'] : "";
            $relation_prefix = isset($data['relation_prefix']) ? $data['relation_prefix'] : "";
            $parents_name = isset($data['parents_name']) ? $data['parents_name'] : "";
            $height = isset($data['height']) ? $data['height'] : "";
            $weight = isset($data['weight']) ? $data['weight'] : "";
            $head_circumference = isset($data['head_circumference']) ? $data['head_circumference'] : "";
            $bp_systolic = isset($data['bp_systolic']) ? $data['bp_systolic'] : "";
            $bp_diasystolic = isset($data['bp_diasystolic']) ? $data['bp_diasystolic'] : "";
            $bmi = isset($data['bmi']) ? $data['bmi'] : "";
            $bmi_status = isset($data['bmi_status']) ? $data['bmi_status'] : "";
            $temperature = isset($data['temperature']) ? $data['temperature'] : "";
            $third_party_uhid = isset($data['third_party_uhid']) ? $data['third_party_uhid'] : "";
            $o_saturation = isset($data['o_saturation']) ? $data['o_saturation'] : "";
            $field1 = isset($data['field1']) ? $data['field1'] : "";
            $field2 = isset($data['field2']) ? $data['field2'] : "";
            $field3 = isset($data['field3']) ? $data['field3'] : "";
            $field4 = isset($data['field4']) ? $data['field4'] : "";
            $field5 = isset($data['field5']) ? $data['field5'] : "";
            $field6 = isset($data['field5']) ? $data['field6'] : "";

            $country_id = isset($data['country_id']) ? $data['country_id'] : 0;
            $state_id = isset($data['state_id']) ? $data['state_id'] : 0;
            $city_id = isset($data['city_id']) ? $data['city_id'] : 0;
            $city_name = isset($data['city_name']) ? $data['city_name'] : "";
            $title = isset($data['title']) ? $data['title'] : "";
            $patient_category = isset($data['patient_category']) ? $data['patient_category'] : "";

            $send_notification = false;
            $user_data = array();
            $child_number = 0;
            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else if ($mobile == $parents_mobile) {
                $response['status'] = 0;
                $response['message'] = 'Both mobile number could not be same.';
            } else if (empty($child_name)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid child name';
            } else if (empty($dob)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid dob';
            } else if (strtotime(date("Y-m-d", strtotime($dob))) > strtotime(date("Y-m-d"))) {
                $response['status'] = 0;
                $response['message'] = 'Please enter valid birth date';
            } else if (empty($gender)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid gender';
            } else {


                $allow_add_child = ($role_id == 5) ? true : Custom::is_doctor($user_id);
                if ($allow_add_child  || $allow_add_child_via_user ===true ) {


                    $child_add_by = 'PATIENT';
                    $child_add_by_id = $user_id;
                    $connection = ConnectionUtil::getConnection();
                    $connection->autocommit(false);
                    try {
                        $child_id = 0;
                        $mobile = Custom::create_mobile_number($mobile);
                        $parents_mobile = Custom::create_mobile_number($parents_mobile);
                        $parents_mobile = !empty($parents_mobile) ? $parents_mobile : "";
                        $get_app_admin_data = Custom::get_thinapp_admin_data($thin_app_id);
                        if ($get_app_admin_data['mobile'] != $mobile && $get_app_admin_data['mobile'] != $parents_mobile) {

                            if (!empty($mobile)) {
                                $child_data = Custom::create_child_by_name($thin_app_id, $mobile, $child_name);
                                if (empty($child_data) || (!empty($child_data) && $child_data['mobile'] != $mobile && $child_data['child_name'] != $child_name && date("Y-m-d", strtotime($child_data['dob'])) != date("Y-m-d", strtotime($dob)))) {

                                    $created = Custom::created();
                                    $user_data = Custom::get_user_by_mobile($thin_app_id, $mobile);
                                    $user_id = $child_user_id = !empty($user_data) ? $user_data['id'] : $user_id;
                                    $image = Custom::check_image_path_string($image);

                                    $login_user_data = Custom::get_user_by_id($user_id);
                                    if (!empty($login_user_data)) {
                                        $doctor_data = Custom::get_doctor_by_mobile($login_user_data['mobile'], $thin_app_id);
                                        if (!empty($doctor_data)) {
                                            $child_add_by = 'DOCTOR';
                                            $child_add_by_id = $doctor_data['id'];
                                        }
                                    }


                                    $sql = "INSERT INTO childrens (patient_category, title, country_id, state_id, city_id, city_name, relation_prefix, bp_systolic, bp_diasystolic, bmi, bmi_status, temperature, o_saturation, field1, field2, field3, field4, field5, field6, height, weight, head_circumference, child_add_by, child_add_by_id, patient_profession, patient_address, thinapp_id, user_id, mobile, parents_mobile,  child_name, image, dob, gender, birth_weight, birth_height, birth_head_circumference, blood_group, special_remark,parents_name, created, modified) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                                    $stmt = $connection->prepare($sql);
                                    $stmt->bind_param('ssssssssssssssssssssssssssssssssssssssssss', $patient_category, $title, $country_id, $state_id, $city_id, $city_name, $relation_prefix, $bp_systolic, $bp_diasystolic, $bmi, $bmi_status, $temperature, $o_saturation, $field1, $field2, $field3, $field4, $field5, $field6, $height, $weight, $head_circumference, $child_add_by, $child_add_by_id, $patient_profession, $patient_address, $thin_app_id, $user_id, $mobile, $parents_mobile, $child_name, $image, $dob, $gender, $birth_weight, $birth_height, $birth_head_circumference, $blood_group, $special_remark, $parents_name, $created, $created);
                                    if ($stmt->execute() && !empty($stmt->affected_rows)) {
                                        $last_insert_id = $child_id = $stmt->insert_id;

                                        $child_number = Custom::create_child_id($thin_app_id);
                                        $update_share = false;
                                        /* start add patient folder to admin and share patient */

                                        if (!empty($child_number)) {
                                            $app_admin_data = Custom::get_thinapp_admin_data($thin_app_id);
                                            if (!empty($app_admin_data)) {
                                                $data = array();
                                                $data['thin_app_id'] = $thin_app_id;
                                                $data['user_id'] = $app_admin_data['id'];
                                                $data['app_key'] = APP_KEY;
                                                $data['mobile'] = $app_admin_data['mobile'];
                                                $folder_name = str_replace(" ", "_", trim($child_name) . "_" . $child_number);
                                                $data['folder_name'] = $folder_name;
                                                $data['description'] = "";
                                                $data['folder_type'] = "PUBLIC";
                                                $data['file_type'] = "";
                                                $data['file_name'] = "";
                                                $data['file_path'] = "";
                                                $data['file_size'] = "";
                                                $data['is_instruction_bucket'] = "NO";
                                                $data['allow_add_file'] = "YES";
                                                $data['children_id'] = $last_insert_id;
                                                $data['child_number'] = $child_number;
                                                $result = WebservicesFunction::add_folder($data, $connection);
                                                $result = json_decode($result, true);
                                                if ($result['status'] == 1) {

                                                    /* start this cod share folder with main mobile number */
                                                    $share_data = array();
                                                    $drive_file_id = 0;
                                                    $drive_folder_id = $result['folder_id'];
                                                    $share_data['thin_app_id'] = $thin_app_id;
                                                    $share_data['user_id'] = $app_admin_data['id'];
                                                    $share_data['app_key'] = APP_KEY;
                                                    $share_with_mobile[0]['mobile'] = $mobile;
                                                    if (!empty($parents_mobile)) {
                                                        $share_with_mobile[1]['mobile'] = $parents_mobile;
                                                    }

                                                    $share_data['share_with_mobile'] = $share_with_mobile;
                                                    $share_data['share_from_mobile'] = $app_admin_data['mobile'];;
                                                    $share_data['username'] = $user_data['username'];
                                                    $share_data['drive_file_id'] = $drive_file_id;
                                                    $share_data['drive_folder_id'] = $drive_folder_id;
                                                    $share_data['channel_id'] = 0;
                                                    $share_data['shared_object'] = 'FOLDER';
                                                    $share_data['status'] = 'SHARED';
                                                    $result = WebservicesFunction::add_share($share_data, false, true, $connection);
                                                    $result = json_decode($result, true);
                                                    if ($result['status'] == 1) {
                                                        $update_share = true;
                                                    }
                                                    /* end this cod share folder with main mobile number */
                                                } else {
                                                    $update_share = false;
                                                }
                                            }
                                        }

                                        /* end add patient folder to admin and share with patiend */
                                        if (!empty($child_number) && $update_share === true) {

                                            $has_vaccination = "NO";
                                            if($add_vaccination=="YES"){
                                                $has_vaccination = "YES";
                                                $result = Custom::clone_child_vaccination($connection, $thin_app_id, $last_insert_id, $dob);
                                            }else{
                                                $result =true;
                                            }
                                            $sql = "update childrens set has_vaccination=?, child_number =? where id = ?";
                                            $cm_stmt = $connection->prepare($sql);
                                            $cm_stmt->bind_param('sss', $has_vaccination, $child_number, $last_insert_id);
                                            $cm_stmt->execute();

                                            if ($result && !empty($cm_stmt->affected_rows)) {
                                                $connection->commit();

                                                if (!empty($height) || !empty($weight) || !empty($head_circumference)) {
                                                    $weight = !empty($weight) ? $weight : 0;
                                                    $height = !empty($height) ? $height : 0;
                                                    $head_circumference = !empty($head_circumference) ? $head_circumference : 0;
                                                    $dataGrothUpdate = array();
                                                    $dataGrothUpdate['app_key'] = APP_KEY;
                                                    $dataGrothUpdate['thin_app_id'] = $thin_app_id;
                                                    $dataGrothUpdate['user_id'] = $user_id;
                                                    $dataGrothUpdate['mobile'] = $mobile;
                                                    $dataGrothUpdate['date'] = date('Y-m-d');
                                                    $dataGrothUpdate['weight'] = $weight;
                                                    $dataGrothUpdate['height'] = $height;
                                                    $dataGrothUpdate['child_id'] = $child_id;
                                                    $dataGrothUpdate['head_circumference'] = $head_circumference;
                                                    WebservicesFunction::add_child_growth($dataGrothUpdate);
                                                }



                                                $response['status'] = 1;
                                                $response['message'] = "Child add successfully";
                                                $response['child_id'] = $last_insert_id;
                                                $response['folder_id'] = $drive_folder_id;
                                                $send_notification = ($has_vaccination=="YES")?true:false;
                                                WebservicesFunction::deleteJson(array("user_child_list_$child_user_id"), "timeline");
                                                $delete_files = array(
                                                    'total_' . $thin_app_id . "_" . base64_encode($mobile),
                                                    'total_' . $thin_app_id . "_" . base64_encode($parents_mobile)
                                                );
                                                WebservicesFunction::deleteJson($delete_files, "child");

                                            } else {
                                                $response['status'] = 0;
                                                $response['message'] = "Sorry child could not add";
                                                $connection->rollback();
                                            }

                                        } else {
                                            $response['status'] = 0;
                                            $response['message'] = "Sorry child could not add";
                                            $connection->rollback();
                                        }
                                    } else {
                                        $connection->rollback();
                                        $response['status'] = 0;
                                        $response['message'] = "Sorry child could not add";
                                    }
                                } else {


                                    if(!empty($app_version_name) && $child_data['has_vaccination']=="NO"){

                                        $connection = ConnectionUtil::getConnection();
                                        $vaccination_clone = Custom::clone_child_vaccination($connection, $thin_app_id, $child_data['id'], $dob);
                                        $child_add_by_id = !empty($doctor_id)?$doctor_id:$user_id;
                                        $child_add_by = !empty($doctor_id)?'DOCTOR':'PATIENT';
                                        $has_vaccination ="YES";

                                        $sql = "UPDATE  childrens SET  special_remark=?, patient_address=?, patient_profession=?, parents_mobile=?, dob = ?, child_add_by_id =?, child_add_by=?, has_vaccination=? where id=?";
                                        $stmt_df = $connection->prepare($sql);
                                        $stmt_df->bind_param('sssssssss', $special_remark, $patient_address, $patient_profession, $parents_mobile, $dob, $child_add_by_id, $child_add_by, $has_vaccination,$child_data['id']);
                                        if($vaccination_clone && $stmt_df->execute()){
                                            $response['status'] = 1;
                                            $response['message'] = "Child add successfully";
                                            $response['child_id'] = $child_data['id'];
                                            $response['folder_id'] = $child_data['folder_id'];
                                            $send_notification = true;
                                            WebservicesFunction::deleteJson(array("user_child_list_".$child_data['user_id']), "timeline");
                                            $delete_files = array(
                                                'total_' . $thin_app_id . "_" . base64_encode($child_data['mobile']),
                                                'total_' . $thin_app_id . "_" . base64_encode($child_data['parents_mobile'])
                                            );
                                            WebservicesFunction::deleteJson($delete_files, "child");
                                        }else{
                                            $response['status'] = 0;
                                            $response['message'] = "Sorry child could not add";
                                        }
                                    }else{
                                        $response['status'] = 0;
                                        $response['message'] = "Child already registered";
                                    }
                                }
                            } else {
                                $response['status'] = 0;
                                $response['message'] = "Invalid mobile number";
                            }
                        } else {
                            $response['status'] = 0;
                            $response['message'] = "Sorry you can not register child with this mobile number";
                        }

                    } catch (Exception $e) {
                        $connection->rollback();
                    }


                } else {
                    $response['status'] = 0;
                    $response['message'] = "You are not authorized to add child";
                }
                


            }
       			 if ($return === false) {
                    Custom::sendResponse($response);
                    if ($send_notification === true && !empty($child_number)) {
                        Custom::send_process_to_background();
                        Custom::send_child_add_sms_and_notification($thin_app_id, $child_id);
                    }
                } else {
                    return json_encode($response);
                }

            exit();
        }
    }



    public static function edit_child($data = null, $return_type = false)
    {

        if (empty($data)) {
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);
        }

        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $child_id = isset($data['child_id']) ? $data['child_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $image = isset($data['image']) ? $data['image'] : "";
            $parents_mobile = isset($data['parents_mobile']) ? $data['parents_mobile'] : "";
            $parents_name = isset($data['parents_name']) ? $data['parents_name'] : "";
            $relation_prefix = isset($data['relation_prefix']) ? $data['relation_prefix'] : "";
            $child_name = isset($data['child_name']) ? trim($data['child_name']) : "";
            $email = isset($data['email']) ? trim($data['email']) : "";
            $dob = isset($data['dob']) ? date('Y-m-d', strtotime($data['dob'])) : "";
            $gender = isset($data['gender']) ? strtoupper($data['gender']) : "";
            $birth_weight = isset($data['weight']) ? $data['weight'] : 0;
            $birth_height = isset($data['height']) ? $data['height'] : 0;
            $birth_head_circumference = isset($data['head_circumference']) ? $data['head_circumference'] : 0;
            $child_growth_id = isset($data['child_growth_id']) ? $data['child_growth_id'] : 0;

            $weight = isset($data['weight']) ? $data['weight'] : 0;
            $height = isset($data['height']) ? $data['height'] : 0;
            $head_circumference = isset($data['head_circumference']) ? $data['head_circumference'] : 0;


            $blood_group = isset($data['blood_group']) ? $data['blood_group'] : "";
            $special_remark = isset($data['special_remark']) ? $data['special_remark'] : "";
            $patient_address = isset($data['patient_address']) ? $data['patient_address'] : "";
            $patient_profession = isset($data['patient_profession']) ? $data['patient_profession'] : "";
            $medical_history = isset($data['medical_history']) ? $data['medical_history'] : "";
            $bp_systolic = isset($data['bp_systolic']) ? $data['bp_systolic'] : "";
            $bp_diasystolic = isset($data['bp_diasystolic']) ? $data['bp_diasystolic'] : "";
            $bmi = isset($data['bmi']) ? $data['bmi'] : "";
            $bmi_status = isset($data['bmi_status']) ? $data['bmi_status'] : "";
            $temperature = isset($data['temperature']) ? $data['temperature'] : "";
            $third_party_uhid = isset($data['third_party_uhid']) ? $data['third_party_uhid'] : "";
            $o_saturation = isset($data['o_saturation']) ? $data['o_saturation'] : "";
            $field1 = isset($data['field1']) ? $data['field1'] : "";
            $field2 = isset($data['field2']) ? $data['field2'] : "";
            $field3 = isset($data['field3']) ? $data['field3'] : "";
            $field4 = isset($data['field4']) ? $data['field4'] : "";
            $field5 = isset($data['field5']) ? $data['field5'] : "";
            $field6 = isset($data['field5']) ? $data['field6'] : "";

            $country_id = isset($data['country_id']) ? $data['country_id'] : 0;
            $state_id = isset($data['state_id']) ? $data['state_id'] : 0;
            $city_id = isset($data['city_id']) ? $data['city_id'] : 0;
            $city_name = isset($data['city_name']) ? $data['city_name'] : "";
            $title = isset($data['title']) ? $data['title'] : "";
            $patient_category = isset($data['patient_category']) ? $data['patient_category'] : "";
            $reset_vaccination = isset($data['reset_vaccination']) ? $data['reset_vaccination'] : "NO";


            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($child_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid child id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else if (empty($child_name)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid child name';
            } else if (empty($dob)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid dob';
            } else if (empty($gender)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid gender';
            } else {
                try {
                    $send_add_child_sms_to_parent = $send_add_child_sms_to_alt_parent = $child_update = false;
                    $connection = ConnectionUtil::getConnection();
                    $connection->autocommit(false);
                    $child_data = Custom::get_child_and_growth_by_id($child_id);
                    $child_folder_updated = $child_share_main_mobile_updated = $child_share_alt_mobile_updated = true;
                    if ($child_data) {

                        $search_child_data = Custom::search_child_name($thin_app_id, $mobile, $child_name);
                        if (empty($search_child_data) || ($search_child_data['id'] == $child_id)) {


                            $mobile = Custom::create_mobile_number($mobile);
                            $parents_mobile = Custom::create_mobile_number($parents_mobile);
                            if ($mobile !== false || $parents_mobile !== false) {


                                $parents_mobile = !empty($parents_mobile) ? $parents_mobile : "";
                                $update_vac_time = $allow_dob_edit = true;
                                if ($child_data['dob'] != $dob) {
                                    if ($reset_vaccination == 'YES') {
                                        if ($child_data['has_vaccination'] == "YES") {
                                            $allow_dob_edit = Custom::reset_child_data_on_dob_update($child_id, $thin_app_id, $dob);
                                        }
                                    } else {
                                        $allow_dob_edit = Custom::is_dob_editable($thin_app_id, $child_id);
                                        if ($allow_dob_edit === true && $child_data['has_vaccination'] == "YES") {
                                            $update_vac_time = Custom::update_clone_child_vaccination($connection, $thin_app_id, $child_id, $dob);
                                        }
                                    }
                                }
                                if ($allow_dob_edit === true) {
                                    $user_data = Custom::get_user_by_mobile($thin_app_id, $mobile);
                                    $user_id = !empty($user_data) ? $user_data['id'] : $user_id;
                                    $image = Custom::check_image_path_string($image);
                                    $created = Custom::created();

                                    if ($child_data['child_name'] != $child_name) {
                                        $sql = "update drive_folders set folder_name=?, modified=? where child_number = ? and thinapp_id=?";
                                        $stmt_ch = $connection->prepare($sql);
                                        $c_name = $child_name . "_" . $child_data['child_number'];
                                        $stmt_ch->bind_param('ssss', $c_name, $created, $child_data['child_number'], $child_data['thinapp_id']);
                                        if ($stmt_ch->execute()) {
                                            $child_folder_updated = true;
                                        } else {
                                            $child_folder_updated = false;
                                        }

                                    }

                                    if (true) {

                                        $child_folder = Custom::get_child_folder_data($child_id, $thin_app_id);
                                        if (!empty($child_folder) && $child_data['mobile'] != $mobile) {
                                            $share_user_data = Custom::get_user_by_mobile($thin_app_id, $mobile);
                                            $share_to_user_id = !empty($share_user_data) ? $share_user_data['id'] : 0;
                                            $sql = "update drive_shares set share_with_mobile=?, share_to_user_id =?, modified=? where share_with_mobile = ? and  drive_folder_id = ? and thinapp_id=?";
                                            $stmt_ch = $connection->prepare($sql);
                                            $stmt_ch->bind_param('ssssss', $mobile, $share_to_user_id, $created, $child_data['mobile'], $child_folder['id'], $thin_app_id);
                                            if ($stmt_ch->execute()) {
                                                $child_share_main_mobile_updated = true;
                                                $send_add_child_sms_to_parent = true;
                                            } else {
                                                $child_share_main_mobile_updated = false;
                                            }
                                        }

                                        if (!empty($child_folder) && !empty($parents_mobile) && $child_data['parents_mobile'] != $parents_mobile) {
                                            $share_user_data = Custom::get_user_by_mobile($thin_app_id, $parents_mobile);
                                            $share_to_user_id = !empty($share_user_data) ? $share_user_data['id'] : 0;
                                            $sql = "update drive_shares set share_with_mobile=?, share_to_user_id =?, modified=? where share_with_mobile = ? and  drive_folder_id = ? and thinapp_id=?";
                                            $stmt_ch = $connection->prepare($sql);
                                            $stmt_ch->bind_param('ssssss', $parents_mobile, $share_to_user_id, $created, $child_data['parents_mobile'], $child_folder['id'], $thin_app_id);
                                            if ($stmt_ch->execute()) {
                                                $child_share_alt_mobile_updated = true;
                                                $send_add_child_sms_to_alt_parent = true;
                                            } else {
                                                $child_share_alt_mobile_updated = false;
                                            }
                                        }

                                        if (!empty($child_folder) && empty($parents_mobile) && !empty($child_data['parents_mobile'])) {
                                            $par_mob = $child_data['parents_mobile'];
                                            $folder_id = $child_folder['id'];
                                            $query = "select id from drive_shares where  share_with_mobile = '$par_mob' and  drive_folder_id = $folder_id and thinapp_id= $thin_app_id limit 1";
                                            $sub = $connection->query($query);
                                            if ($sub->num_rows) {
                                                $f_data = mysqli_fetch_assoc($sub);
                                                $data = array();
                                                $data['thin_app_id'] = $thin_app_id;
                                                $data['user_id'] = $user_id;
                                                $data['app_key'] = APP_KEY;
                                                $data['drive_share_id'] = $f_data['id'];

                                                $result = WebservicesFunction::delete_share($data, true);
                                                $result = json_decode($result, true);
                                                if ($result['status'] == 1) {
                                                    $child_share_alt_mobile_updated = true;
                                                } else {
                                                    $child_share_alt_mobile_updated = false;
                                                }
                                            }

                                        }
                                    }


                                    $child_growth_updated = true;


                                    $medical_history = !empty($medical_history) ? $medical_history : $child_data['medical_history'];
                                    $sql = "update childrens set patient_category =?, title =?, country_id =?, state_id =?, city_id =?, city_name =?, email=?, bp_systolic =?, bp_diasystolic =?, bmi =?, bmi_status =?, temperature =?, o_saturation =?, field1 =?, field2 =?, field3 =?, field4 =?, field5 =?, field6 =?, relation_prefix=?, parents_name =?, medical_history=?, patient_profession= ?, patient_address =?, special_remark =?, user_id=?,thinapp_id =?, mobile =?,parents_mobile =?,  child_name =? , image =?, dob =?, gender =?, birth_weight =?, birth_height =?, birth_head_circumference =? , blood_group =?, modified=? where id = ?";
                                    $stmt = $connection->prepare($sql);
                                    $stmt->bind_param('sssssssssssssssssssssssssssssssssssssss', $patient_category, $title, $country_id , $state_id, $city_id , $city_name, $email, $bp_systolic, $bp_diasystolic, $bmi, $bmi_status, $temperature, $o_saturation, $field1, $field2, $field3, $field4, $field5, $field6, $relation_prefix, $parents_name, $medical_history, $patient_profession, $patient_address, $special_remark, $user_id, $thin_app_id, $mobile, $parents_mobile, $child_name, $image, $dob, $gender, $birth_weight, $birth_height, $birth_head_circumference, $blood_group, $created, $child_id);
                                    if ($stmt->execute() && $child_share_main_mobile_updated === true && $child_share_alt_mobile_updated === true && $update_vac_time === true && $child_folder_updated === true && $child_growth_updated == true) {
                                        $connection->commit();
                                        $response['status'] = 1;
                                        $response['message'] = "Child update successfully";
                                        $child_user_id = $child_data['user_id'];
                                        $child_update = true;
                                        if(!empty($height) || !empty($weight) || !empty($head_circumference)){
                                            if(!empty($child_growth_id)){
                                                $connection = ConnectionUtil::getConnection();
                                                $sql = "update child_growths set modify_by_user_id =?, height=?, weight =?, head_circumference =?, modified=? where id = ?";
                                                $stmt = $connection->prepare($sql);
                                                $stmt->bind_param('ssssss', $user_id, $height, $weight, $head_circumference, $created, $child_growth_id);
                                                $stmt->execute();
                                            }else{
                                                $save_data = array();
                                                $save_data['app_key'] = APP_KEY;
                                                $save_data['thin_app_id'] = $thin_app_id;
                                                $save_data['user_id'] = $user_id;
                                                $save_data['mobile'] = $mobile;
                                                $save_data['date'] = date('Y-m-d');
                                                $save_data['weight'] = $weight;
                                                $save_data['height'] = $height;
                                                $save_data['child_id'] = $child_id;
                                                $save_data['head_circumference'] = $head_circumference;
                                                WebservicesFunction::add_child_growth($save_data);
                                            }
                                        }
                                        WebservicesFunction::deleteJson(array("user_child_list_$child_user_id"), "timeline");
                                    } else {
                                        $connection->rollback();
                                        $response['status'] = 0;
                                        $response['message'] = "Sorry child could not update";
                                    }

                                } else {
                                    $response['status'] = 0;
                                    $response['message'] = "Sorry you can not update child DOB it makes effect to child vaccination";
                                }
                            } else {
                                $response['status'] = 0;
                                $mob = ($mobile === false) ? $mobile : $parents_mobile;
                                $response['message'] = "Invalid $mob number";

                            }
                        } else {
                            $response['status'] = 0;
                            $response['message'] = "Patient name already register.";
                        }

                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Invalid Child";
                    }

                } catch (Exception $e) {
                }
            }
            if ($return_type === false) {
                Custom::sendResponse($response);
                Custom::send_process_to_background();
            }

            if ($child_share_alt_mobile_updated === true || $child_share_alt_mobile_updated === true) {
                $app_data = Custom::getThinAppData($thin_app_id);
                $message = "Your child " . trim($child_data['child_name']) . ", ID-" . $child_data['child_number'] . " has been added by " . trim($app_data['name']) . ". Track your child Growth,Vaccine and medical records by app";
                if ($send_add_child_sms_to_parent === true) {
                    Custom::send_single_sms($mobile, $message, $thin_app_id);
                }
                if ($send_add_child_sms_to_alt_parent === true) {
                    Custom::send_single_sms($parents_mobile, $message, $thin_app_id);
                }
            }

            if ($return_type === true) {
                return json_encode($response);

            }

        }
        exit();

    }


    public static function web_edit_child($data = null)
    {


        $response = array();
        $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
        $app_key = isset($data['app_key']) ? $data['app_key'] : "";
        $user_id = isset($data['user_id']) ? $data['user_id'] : "";
        $child_id = isset($data['child_id']) ? $data['child_id'] : "";
        $mobile = isset($data['mobile']) ? $data['mobile'] : "";
        $image = isset($data['image']) ? $data['image'] : "";
        $parents_mobile = isset($data['parents_mobile']) ? $data['parents_mobile'] : "";
        $child_name = isset($data['child_name']) ? trim($data['child_name']) : "";
        $dob = isset($data['dob']) ? date('Y-m-d', strtotime($data['dob'])) : "";
        $gender = isset($data['gender']) ? strtoupper($data['gender']) : "";
        $birth_weight = isset($data['birth_weight']) ? $data['birth_weight'] : 0;
        $birth_height = isset($data['birth_height']) ? $data['birth_height'] : 0;
        $birth_head_circumference = isset($data['birth_head_circumference']) ? $data['birth_head_circumference'] : 0;
        $blood_group = isset($data['blood_group']) ? $data['blood_group'] : "";
        $special_remark = isset($data['special_remark']) ? $data['special_remark'] : "";
        $relation_prefix = isset($data['relation_prefix']) ? $data['relation_prefix'] : "";
        $parents_name = isset($data['parents_name']) ? $data['parents_name'] : "";

        $patient_address = isset($data['patient_address']) ? $data['patient_address'] : "";
        $patient_profession = isset($data['patient_profession']) ? $data['patient_profession'] : "";
        $medical_history = isset($data['medical_history']) ? $data['medical_history'] : "";

        $height = isset($data['height']) ? $data['height'] : "";
        $weight = isset($data['weight']) ? $data['weight'] : "";
        $head_circumference = isset($data['head_circumference']) ? $data['head_circumference'] : "";

        if (empty($thin_app_id)) {
            $response['status'] = 0;
            $response['message'] = 'Invalid thinapp id';
        } else if (empty($app_key)) {
            $response['status'] = 0;
            $response['message'] = 'Invalid app key';
        } else if (empty($user_id)) {
            $response['status'] = 0;
            $response['message'] = 'Invalid user id';
        } else if (empty($child_id)) {
            $response['status'] = 0;
            $response['message'] = 'Invalid child id';
        } else if (empty($mobile)) {
            $response['status'] = 0;
            $response['message'] = 'Invalid mobile';
        } else if (empty($child_name)) {
            $response['status'] = 0;
            $response['message'] = 'Invalid child name';
        } else if (empty($dob)) {
            $response['status'] = 0;
            $response['message'] = 'Invalid dob';
        } else if (empty($gender)) {
            $response['status'] = 0;
            $response['message'] = 'Invalid gender';
        } else {
            try {
                $send_add_child_sms_to_parent = $send_add_child_sms_to_alt_parent = $child_update = false;
                $connection = ConnectionUtil::getConnection();
                $connection->autocommit(false);
                $child_data = Custom::get_child_and_growth_by_id($child_id);

                if ($child_data) {

                    $mobile = Custom::create_mobile_number($mobile);
                    $parents_mobile = Custom::create_mobile_number($parents_mobile);
                    if ($mobile !== false || $parents_mobile !== false) {


                        $parents_mobile = !empty($parents_mobile) ? $parents_mobile : "";
                        $update_vac_time = $allow_dob_edit = true;
                        if ($child_data['dob'] != $dob) {
                            $allow_dob_edit = Custom::is_dob_editable($thin_app_id, $child_id);
                            if ($allow_dob_edit === true) {
                                $update_vac_time = Custom::update_clone_child_vaccination($connection, $thin_app_id, $child_id, $dob);
                            }
                        }

                        if ($allow_dob_edit === true) {
                            $user_data = Custom::get_user_by_mobile($thin_app_id, $mobile);
                            $user_id = !empty($user_data) ? $user_data['id'] : 0;
                            $image = Custom::check_image_path_string($image);
                            $created = Custom::created();
                            $child_folder_updated = $child_share_main_mobile_updated = $child_share_alt_mobile_updated = true;
                            if ($child_data['child_name'] != $child_name) {
                                $sql = "update drive_folders set folder_name=?, modified=? where child_number = ? and thinapp_id=?";
                                $stmt_ch = $connection->prepare($sql);
                                $c_name = $child_name . "_" . $child_data['child_number'];
                                $stmt_ch->bind_param('ssss', $c_name, $created, $child_data['child_number'], $child_data['thinapp_id']);
                                if ($stmt_ch->execute()) {
                                    $child_folder_updated = true;
                                } else {
                                    $child_folder_updated = false;
                                }

                            }

                            if (true) {

                                $child_folder = Custom::get_child_folder_data($child_id, $thin_app_id);
                                if (!empty($child_folder) && $child_data['mobile'] != $mobile) {
                                    $share_user_data = Custom::get_user_by_mobile($thin_app_id, $mobile);
                                    $share_to_user_id = !empty($share_user_data) ? $share_user_data['id'] : 0;
                                    $sql = "update drive_shares set share_with_mobile=?, share_to_user_id =?, modified=? where share_with_mobile = ? and  drive_folder_id = ? and thinapp_id=?";
                                    $stmt_ch = $connection->prepare($sql);
                                    $stmt_ch->bind_param('ssssss', $mobile, $share_to_user_id, $created, $child_data['mobile'], $child_folder['id'], $thin_app_id);
                                    if ($stmt_ch->execute()) {
                                        $child_share_main_mobile_updated = true;
                                        $send_add_child_sms_to_parent = true;
                                    } else {
                                        $child_share_main_mobile_updated = false;
                                    }
                                }

                                if (!empty($child_folder) && !empty($parents_mobile) && $child_data['parents_mobile'] != $parents_mobile) {
                                    $share_user_data = Custom::get_user_by_mobile($thin_app_id, $parents_mobile);
                                    $share_to_user_id = !empty($share_user_data) ? $share_user_data['id'] : 0;
                                    $sql = "update drive_shares set share_with_mobile=?, share_to_user_id =?, modified=? where share_with_mobile = ? and  drive_folder_id = ? and thinapp_id=?";
                                    $stmt_ch = $connection->prepare($sql);
                                    $stmt_ch->bind_param('ssssss', $parents_mobile, $share_to_user_id, $created, $child_data['parents_mobile'], $child_folder['id'], $thin_app_id);
                                    if ($stmt_ch->execute()) {
                                        $child_share_alt_mobile_updated = true;
                                        $send_add_child_sms_to_alt_parent = true;
                                    } else {
                                        $child_share_alt_mobile_updated = false;
                                    }
                                }

                                if (!empty($child_folder) && empty($parents_mobile) && !empty($child_data['parents_mobile'])) {
                                    $par_mob = $child_data['parents_mobile'];
                                    $folder_id = $child_folder['id'];
                                    $query = "select id from drive_shares where  share_with_mobile = '$par_mob' and  drive_folder_id = $folder_id and thinapp_id= $thin_app_id limit 1";
                                    $sub = $connection->query($query);
                                    if ($sub->num_rows) {
                                        $f_data = mysqli_fetch_assoc($sub);
                                        $data = array();
                                        $data['thin_app_id'] = $thin_app_id;
                                        $data['user_id'] = $user_id;
                                        $data['app_key'] = APP_KEY;
                                        $data['drive_share_id'] = $f_data['id'];

                                        $result = WebservicesFunction::web_delete_share($data, true);
                                        $result = json_decode($result, true);
                                        if ($result['status'] == 1) {
                                            $child_share_alt_mobile_updated = true;
                                        } else {
                                            $child_share_alt_mobile_updated = false;
                                        }
                                    }

                                }


                            }


                            $child_growth_updated = true;
                            /* update child groth 0 month data in child growth table */
                            /* if (!empty($child_data['child_growth_id'])) {
                                $month = 0;
                                $sql = "update child_growths set height = ?, weight = ?, head_circumference = ?,  modified=? where month = ? and children_id=?";
                                $stmt_ch = $connection->prepare($sql);
                                $stmt_ch->bind_param('ssssss', $birth_height, $birth_weight, $birth_head_circumference, $created, $month, $child_id);
                                if ($stmt_ch->execute()) {
                                    $child_growth_updated = true;
                                } else {
                                    $child_growth_updated = false;
                                }
                            } else {
                                $child_month = 0;
                                $date = date('Y-m-d');
                                $sql = "INSERT INTO child_growths (children_id, month, date, weight, height, head_circumference, created, modified) VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
                                $stmt = $connection->prepare($sql);
                                $stmt->bind_param('ssssssss', $child_id, $child_month, $date, $birth_weight, $birth_height, $birth_head_circumference, $created, $created);
                                if ($stmt->execute()) {
                                    $child_growth_updated = true;
                                } else {
                                    $child_growth_updated = false;
                                }
                            }*/


                            $medical_history = !empty($medical_history) ? $medical_history : $child_data['medical_history'];
                            $sql = "update childrens set height=?, weight=?, head_circumference=?, medical_history=?, patient_profession= ?, patient_address =?, relation_prefix =?, special_remark =?, parents_name =?, user_id=?,thinapp_id =?, mobile =?,parents_mobile =?,  child_name =? , image =?, dob =?, gender =?, birth_weight =?, birth_height =?, birth_head_circumference =? , blood_group =?, modified=? where id = ?";
                            $stmt = $connection->prepare($sql);
                            $stmt->bind_param('sssssssssssssssssssssss', $height, $weight, $head_circumference, $medical_history, $patient_profession, $patient_address, $relation_prefix, $special_remark, $parents_name, $user_id, $thin_app_id, $mobile, $parents_mobile, $child_name, $image, $dob, $gender, $birth_weight, $birth_height, $birth_head_circumference, $blood_group, $created, $child_id);
                            if ($stmt->execute() && $child_share_main_mobile_updated === true && $child_share_alt_mobile_updated === true && $update_vac_time === true && $child_folder_updated === true && $child_growth_updated == true) {
                                $connection->commit();
                                if (!empty($height) || !empty($weight) || !empty($head_circumference)) {

                                    $weight = !empty($weight) ? $weight : 0;
                                    $height = !empty($height) ? $height : 0;
                                    $head_circumference = !empty($head_circumference) ? $head_circumference : 0;


                                    $dataGrothUpdate = array();
                                    $dataGrothUpdate['app_key'] = APP_KEY;
                                    $dataGrothUpdate['thin_app_id'] = $thin_app_id;
                                    $dataGrothUpdate['user_id'] = $user_id;
                                    $dataGrothUpdate['mobile'] = $mobile;
                                    $dataGrothUpdate['date'] = date('Y-m-d');
                                    $dataGrothUpdate['weight'] = $weight;
                                    $dataGrothUpdate['height'] = $height;
                                    $dataGrothUpdate['head_circumference'] = $head_circumference;
                                    $dataGrothUpdate['child_id'] = $child_id;

                                    WebservicesFunction::add_child_growth($dataGrothUpdate);
                                }
                                $response['status'] = 1;
                                $response['message'] = "Child update successfully";
                                $child_user_id = $child_data['user_id'];
                                $child_update = true;
                                WebservicesFunction::deleteJson(array("user_child_list_$child_user_id"), "timeline");
                            } else {
                                $connection->rollback();
                                $response['status'] = 0;
                                $response['message'] = "Sorry child could not update";
                            }

                        } else {
                            $response['status'] = 0;
                            $response['message'] = "Sorry you can not update child DOB it makes effect to child vaccination";
                        }
                    } else {
                        $response['status'] = 0;
                        $mob = ($mobile === false) ? $mobile : $parents_mobile;
                        $response['message'] = "Invalid $mob number";

                    }

                } else {
                    $response['status'] = 0;
                    $response['message'] = "Invalid Child";
                }

            } catch (Exception $e) {
            }
        }

        /*if($child_share_alt_mobile_updated === true || $child_share_alt_mobile_updated === true){
            $app_data = Custom::get_thinapp_admin_data($thin_app_id);
            $message = "Your child " . trim($child_data['child_name']) . ", ID-" . $child_data['child_number'] . " has been added by " . trim($app_data['name']) . ". Track your child Growth,Vaccine and medical records by app";
            if ($send_add_child_sms_to_parent === true) {
                Custom::send_single_sms($mobile, $message, $thin_app_id);
            }
            if ($send_add_child_sms_to_alt_parent === true) {
                Custom::send_single_sms($parents_mobile, $message, $thin_app_id);
            }
        } */

        return $response;


    }


    public static function delete_child()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $child_id = isset($data['child_id']) ? $data['child_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $role_id = isset($data['role_id']) ? $data['role_id'] : 0;

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($child_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid child id';
            } else {

                $child_data = Custom::get_child_by_id($child_id);
                $appointment_user_role = Custom::get_appointment_role($mobile,$thin_app_id,$role_id);
                if($appointment_user_role =="ADMIN" || $appointment_user_role=="DOCTOR"){
                    if (!empty($child_data)) {
                        $connection = ConnectionUtil::getConnection();
                        $connection->autocommit(false);
                        $sql = "update childrens  set status =? where id = ? and thinapp_id=?";
                        $status = "INACTIVE";
                        $stmt_child = $connection->prepare($sql);
                        $stmt_child->bind_param('sss', $status, $child_id, $thin_app_id);
                        $child_folder__share_updated = $child_folder_updated = true;
                        if (!empty($child_data['child_number'])) {
                            $sql = "update drive_folders  set status =? where child_number = ? and thinapp_id=?";
                            $status = "INACTIVE";
                            $child_number = $child_data['child_number'];
                            $stmt_drive = $connection->prepare($sql);
                            $stmt_drive->bind_param('sss', $status, $child_data['child_number'], $thin_app_id);
                            if ($stmt_drive->execute()) {
                                $child_folder_updated = true;
                            } else {
                                $child_folder_updated = false;
                            }
                        }
                        $child_folder = Custom::get_child_folder_data($child_id, $thin_app_id);
                        if (!empty($child_folder)) {
                            $sql = "update drive_shares set current_status =?, modified=? where drive_folder_id = ? and thinapp_id=?";
                            $status = "INACTIVE";
                            $stmt_ch = $connection->prepare($sql);
                            $stmt_ch->bind_param('ssss', $status, $created, $child_folder['id'], $thin_app_id);
                            if ($stmt_ch->execute()) {
                                $child_folder__share_updated = true;
                            } else {
                                $child_folder__share_updated = false;
                            }
                        }
                        if ($stmt_child->execute() && $child_folder_updated === true && $child_folder__share_updated === true) {
                            $connection->commit();
                            $response['status'] = 1;
                            $response['message'] = "Child deleted successfully";
                            $child_user_id = $child_data['user_id'];
                            WebservicesFunction::deleteJson(array("user_child_list_$child_user_id"), "timeline");
                            $delete_files = array(
                                'total_' . $thin_app_id . "_" . base64_encode($child_data['mobile']),
                                'total_' . $thin_app_id . "_" . base64_encode($child_data['parents_mobile'])
                            );
                            WebservicesFunction::deleteJson($delete_files, "child");
                        } else {
                            $connection->rollback();
                            $response['status'] = 0;
                            $response['message'] = "Sorry child could not delete";
                        }
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Sorry child not found";
                    }
                }else{
                    $response['status'] = 0;
                    $response['message'] = "You are not authorized to delete";
                }

            }
            Custom::sendResponse($response);
        }
        exit();

    }

    public static function get_child_list()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $role_id = isset($data['role_id']) ? $data['role_id'] : "";
            $offset = isset($data['offset']) ? $data['offset'] : "";
            $search = isset($data['search']) ? $data['search'] : "";
            $request_from = isset($data['request_from']) ? $data['request_from'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter mobile';
            } else if (empty($role_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter role id';
            } else if ($request_from != "SEARCH" && $request_from != "INDEX" && $request_from != "") {
                $response['status'] = 0;
                $response['message'] = 'Invalid search request';
            } else if (empty($offset) && $offset != 0) {
                $response['status'] = 0;
                $response['message'] = 'Please enter offset';
            } else {


                /* this method check for vaccination app master config or not */
                if (!$vac_config = WebservicesFunction::readJson("vaccination_configure_status_$thin_app_id", 'vaccination')) {
                    $res = Custom::clone_master_vaccination($thin_app_id);
                    $res_arr = array('Configure' => "YES");
                    WebservicesFunction::createJson("vaccination_configure_status_$thin_app_id", $res_arr, 'CREATE', 'vaccination');
                }
                /* end vaccination master clone */


                $response = $response_data = array();
                $connection = ConnectionUtil::getConnection();
                $limit = PAGINATION_LIMIT;
                $offset = $offset * $limit;
                $condition = "";

                $appointment_user_role = Custom::get_appointment_role($mobile,$thin_app_id,$role_id);
                if ($appointment_user_role == "USER") {
                    $condition = " and ( c.mobile = '$mobile' OR c.parents_mobile = '$mobile') ";
                }

                /* start adding search parameter to query */
                if ($search != "#" && !empty($search)) {
                    if ($request_from == "INDEX") {
                        $search = " (c.child_name LIKE '$search%') AND ";
                    } else if ($request_from == "SEARCH") {
                        $search = " (c.child_name LIKE '%$search%' OR c.child_number LIKE '%$search%' OR c.mobile LIKE '%$search%' ) AND ";
                    }
                } else {
                    $search = "";
                }
                /* end adding search parameter to query */


                $count_query = " select count(c.id) as child_count from childrens as c where $search c.status = 'ACTIVE' $condition and c.thinapp_id = $thin_app_id and c.has_vaccination='YES'";
                $subscriber = $connection->query($count_query);
                if ($subscriber->num_rows) {
                    $count = mysqli_fetch_assoc($subscriber)['child_count'];
                    $response['data']['total_child'] = $count;
                }

                $query = "select c.mobile as full_mobile, c.parents_mobile as full_parents_mobile, c.patient_profession, c.patient_address, c.dob_editable, IF(u.app_installed_status = 'INSTALLED','YES','NO') as is_app_installed, c.id, IFNULL(df.allow_add_file,'NO') as allow_add_file, IFNULL(df.id,0) as folder_id, df.folder_name, replace(c.parents_mobile, '+91', '') as parents_mobile, c.child_number, replace(IF(c.parents_mobile='$mobile',c.parents_mobile,c.mobile), '+91', '') as mobile, c.child_name, c.image, DATE_FORMAT(c.dob,'%d-%m-%Y') as dob, c.gender, IFNULL(cg.weight,0) as birth_weight, IFNULL(cg.height,0) as birth_height, IFNULL(cg.head_circumference,0) as birth_head_circumference, c.blood_group, c.special_remark from childrens as c left join drive_folders as df on df.children_id = c.id left join child_growths as cg on c.id = cg.children_id and cg.month = 0 left join users as u on u.mobile = c.mobile and u.thinapp_id = c.thinapp_id where $search c.status = 'ACTIVE' $condition and c.thinapp_id = $thin_app_id and c.has_vaccination='YES' group by c.child_number ORDER BY c.child_name asc limit $offset, $limit";

                $subscriber = $connection->query($query);
                if ($subscriber->num_rows) {
                    $child_list = mysqli_fetch_all($subscriber, MYSQLI_ASSOC);
                    $response['status'] = 1;
                    $response['message'] = "Children list found";
                    foreach ($child_list as $key => $value) {
                        $gender = ($value['gender'] == 'MALE') ? "Boy" : "Girl";
                        $age_string = Custom::dob_elapsed_string($value['dob']);
                        $value['title'] = $age_string . ", " . $gender;
                        $value['child_age'] = $age_string;
                        if ($value['dob_editable'] == "YES") {
                            $allow_dob_edit = Custom::is_dob_editable($thin_app_id, $value['id']);
                            $value['dob_editable'] = ($allow_dob_edit === true) ? "YES" : "NO";
                        }

                        $response['data']['child_list'][$key] = $value;
                    }

                } else {
                    $response['status'] = 0;
                    $response['message'] = "No child list found";
                }
            }
            echo json_encode($response);
            die;
        } else {
            exit();
        }
    }

    public static function get_child_alpha_list()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $role_id = isset($data['role_id']) ? $data['role_id'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter mobile';
            } else if (empty($role_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter role id';
            } else {

                $response = $response_data = array();
                $condition = " status = 'ACTIVE' and thinapp_id = $thin_app_id and has_vaccination='YES'";
                $appointment_user_role = Custom::get_appointment_role($mobile,$thin_app_id,$role_id);

                if ($appointment_user_role == "USER") {
                    $condition .= " and (mobile = '$mobile' OR parents_mobile = '$mobile') ";
                }


                $connection = ConnectionUtil::getConnection();
                $query = "(select '#' AS charactor) UNION ALL  (select DISTINCT(UPPER(LEFT(child_name, 1))) as charactor from childrens where  $condition order by charactor asc limit 40)";
                $subscriber = $connection->query($query);
                if ($subscriber->num_rows) {
                    $response['status'] = 1;
                    $response['message'] = "Alphabets list found";
                    $response['data']['alphabet'] = mysqli_fetch_all($subscriber, MYSQLI_ASSOC);
                } else {
                    $response['status'] = 0;
                    $response['message'] = "No child list found";
                }

            }
            echo json_encode($response);
            die;
        } else {
            exit();
        }
    }

    public static function add_child_growth($data = null)
    {

        $return_type = true;
        if (empty($data)) {
            $return_type = false;
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);
        }

        if ($_SERVER['REQUEST_METHOD'] === 'POST' || $_SERVER['REQUEST_METHOD'] === 'PUT') {

            $response = array();
            $request_from = isset($data['rf']) ? $data['rf'] : "";
            if($request_from=='WEB'){
                $data['role_id'] = base64_decode($data['ri']);;
                $data['user_id'] = base64_decode($data['ui']);
                $data['app_key'] = APP_KEY;
                $data['thin_app_id'] = base64_decode($data['ti']);
                $data['mobile'] = base64_decode($data['m']);
                $data['child_id'] =  base64_decode($data['ci']);
            }

            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $child_id = isset($data['child_id']) ? $data['child_id'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $date = isset($data['date']) ? date('Y-m-d', strtotime($data['date'])) : "";
            $weight = isset($data['weight']) ? $data['weight'] : 0;
            $height = isset($data['height']) ? $data['height'] : 0;
            $head_circumference = isset($data['head_circumference']) ? $data['head_circumference'] : 0;


            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($child_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid child ';
            } else if (empty($date)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid date';
            } else if (empty($weight) && empty($height) && empty($head_circumference)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter weight or height or head circumference';
            } else {
                try {

                    $child_data = Custom::get_child_by_id($child_id);
                    if (!empty($child_data)) {

                        $connection = ConnectionUtil::getConnection();
                        $connection->autocommit(true);
                        $created = Custom::created();
                        $month = Custom::get_month_diffrence($child_data['dob'], $date);
                        $growth_data = Custom::get_child_growth_data($date, $child_id);
                        $show_into_graph = $child_data['has_vaccination'];

                        if (empty($growth_data)) {
                            $sql = "INSERT INTO child_growths (show_into_graph, add_by_user_id, children_id, month, date, weight, height, head_circumference, created, modified) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                            $stmt = $connection->prepare($sql);
                            $stmt->bind_param('ssssssssss', $show_into_graph, $user_id, $child_id, $month, $date, $weight, $height, $head_circumference, $created, $created);
                        } else {
                            $recode_id = $growth_data['id'];
                            $sql = "update child_growths set show_into_graph=?, modify_by_user_id =?, month = ?, date=?, weight =?, height =?, head_circumference=?, modified=? where id =?";
                            $stmt = $connection->prepare($sql);
                            $stmt->bind_param('sssssssss', $show_into_graph, $user_id, $month, $date, $weight, $height, $head_circumference, $created, $recode_id);
                        }
                        if ($stmt->execute()) {
                            $response['status'] = 1;
                            $response['message'] = "Child growth added successfully";
                            if ($return_type === false) {
                                WebservicesFunction::addUserStaticToJson('', $user_id, $thin_app_id, $mobile, "VACCINE & GROWTH", "ADD GROWTH", 'add_child_growth');
                            }


                        } else {
                            $response['status'] = 0;
                            $response['message'] = "Sorry child growth could not add";
                        }


                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Invalid child";
                    }

                } catch (Exception $e) {
                    $connection->rollback();
                }
            }


            if ($return_type === false) {
                Custom::sendResponse($response);
            } else {
                return $response;
            }
        }
        exit();

    }


    public static function get_child_graph()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $child_id = isset($data['child_id']) ? $data['child_id'] : "";
            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter user id';
            } else if (empty($child_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid child';
            } else {
                $connection = ConnectionUtil::getConnection();


                $child_data = Custom::get_child_by_id($child_id);
                if (!empty($child_data)) {

                    $child_years = Custom::dob_elapsed_string($child_data['dob'], false, false);
                    $year_count = ($child_years['year']) + (($child_years['month'] > 0) ? 1 : 0);
                    $condition = "";
                    if (!empty($year_count)) {
                        $month_cnt = $year_count * 12;
                        $condition = " and ccm.month <= " . $month_cnt;
                    }
                    $query = "select  MAX(DATE(date)), cg.date as growth_date, c.gender, ccm.gender, c.dob, cg.height,cg.weight,cg.head_circumference,ccm.month,ccm.category,ccm.median,ccm.m3sd,ccm.m2sd,ccm.m1sd,ccm.sd,ccm.p1sd,ccm.p2sd,ccm.p3sd from child_chart_masters as ccm left join child_growths as cg on ccm.month = cg.month and cg.show_into_graph ='YES' and cg.children_id = $child_id AND cg.show_into_graph='YES' and  cg.id IN (select MAX(id) from child_growths where children_id = $child_id and month = cg.month AND cg.show_into_graph='YES')left join childrens as c on cg.children_id = c.id and c.status = 'ACTIVE' and c.id = $child_id and c.thinapp_id = $thin_app_id  where ccm.gender = (select gender from childrens where id =$child_id) $condition group by month,category order by category, month asc";
                    $subscriber = $connection->query($query);
                    if ($subscriber->num_rows) {
                        $graph_data = mysqli_fetch_all($subscriber, MYSQLI_ASSOC);
                        $response['status'] = 1;
                        $response['message'] = "Graph list found";
                        $graph_array = array();
                        foreach ($graph_data as $key => $value) {

                            $height = isset($value['height']) ? $value['height'] : 0;
                            $weight = isset($value['weight']) ? $value['weight'] : 0;
                            $circumference = isset($value['head_circumference']) ? $value['head_circumference'] : 0;
                            $day = !(empty($value['growth_date'])) ? date('d', strtotime($value['growth_date'])) : "0";
                            if ($value['category'] == "HEIGHT") {
                                $graph_array[$value['category']][] = implode(",", array($value['month'], $height, $value['m3sd'], $value['m1sd'], $value['sd'], $value['p1sd'], $value['p3sd'], $day));
                            } else if ($value['category'] == "WEIGHT") {
                                $graph_array[$value['category']][] = implode(",", array($value['month'], $weight, $value['m3sd'], $value['m1sd'], $value['sd'], $value['p1sd'], $value['p3sd'], $day));
                            } else if ($value['category'] == "CIRCUMFERENCE") {
                                $graph_array[$value['category']][] = implode(",", array($value['month'], $circumference, $value['m3sd'], $value['m1sd'], $value['sd'], $value['p1sd'], $value['p3sd'], $day));
                            }

                        }

                        $response['data']['graph_data'] = $graph_array;
                        $response['data']['folder_data']['allow_add_file'] = "NO";
                        $response['data']['folder_data']['folder_name'] = "NO";
                        $response['data']['folder_data']['folder_id'] = 0;
                        $query = "select IFNULL(df.allow_add_file,'NO') as allow_add_file, IFNULL(df.id,0) as folder_id, df.folder_name from childrens as c left join drive_folders as df on df.child_number = c.child_number and c.thinapp_id = df.thinapp_id where c.thinapp_id = $thin_app_id and c.id = $child_id limit 1";
                        $subscriber = $connection->query($query);
                        if ($subscriber->num_rows) {
                            $response['data']['folder_data'] = mysqli_fetch_assoc($subscriber);
                        }

                    } else {
                        $response['status'] = 0;
                        $response['message'] = "No data found";
                    }
                } else {
                    $response['status'] = 0;
                    $response['message'] = "Child not found";
                }


            }
            echo json_encode($response);
            die;
        } else {
            exit();
        }
    }

    public static function get_child_graph_table()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $child_id = isset($data['child_id']) ? $data['child_id'] : "";
            $year_count = isset($data['year_count']) ? $data['year_count'] : "";
            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter user id';
            } else if (empty($child_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid child';
            } else {
                $connection = ConnectionUtil::getConnection();
                $condition = "";
                if (!empty($year_count)) {
                    $month_cnt = $year_count * 12;
                    $condition = " and ccm.month <= " . $month_cnt;
                }
                $query = "select IFNULL(cg.date,'N/A') AS date, c.gender, ccm.gender, c.dob, cg.height,cg.weight,cg.head_circumference,ccm.month,ccm.category,ccm.median,ccm.m3sd,ccm.m2sd,ccm.m1sd,ccm.sd,ccm.p1sd,ccm.p2sd,ccm.p3sd from child_chart_masters as ccm left join child_growths as cg on ccm.month = cg.month and cg.children_id = $child_id AND cg.show_into_graph='YES' left join childrens as c on cg.children_id = c.id and c.status = 'ACTIVE' and c.id = $child_id and c.thinapp_id = $thin_app_id  where ccm.gender = (select gender from childrens where id =$child_id) $condition order by category, month asc";
                $subscriber = $connection->query($query);
                if ($subscriber->num_rows) {
                    $graph_data = mysqli_fetch_all($subscriber, MYSQLI_ASSOC);
                    $response['status'] = 1;
                    $response['message'] = "Graph list found";
                    $graph_array = array();
                    foreach ($graph_data as $key => $value) {
                        $height = isset($value['height']) ? $value['height'] : "0";
                        $weight = isset($value['weight']) ? $value['weight'] : "0";
                        $circumference = isset($value['head_circumference']) ? $value['head_circumference'] : "0";
                        $month_key = $value['month'];
                        if ($value['category'] == "HEIGHT") {
                            $cat_value = $height;
                            $category_name = "height_list";
                            $graph_array[$category_name][$month_key]['title'] = $month_key . " Month ";
                        } else if ($value['category'] == "WEIGHT") {
                            $cat_value = $weight;
                            $category_name = "weight_list";
                            $graph_array[$category_name][$month_key]['title'] = $month_key . " Month ";
                        } else if ($value['category'] == "CIRCUMFERENCE") {
                            $cat_value = $circumference;
                            $category_name = "circumference_list";
                            $graph_array[$category_name][$month_key]['title'] = $month_key . " Month ";
                        }

                        if ($value['date'] == "N/A") {
                            $color = "BLACK";
                        } else if ($cat_value > $value['p3sd'] || $cat_value < $value['m3sd']) {
                            $color = "RED";
                        } else {
                            $color = "GREEN";
                        }
                        if ($value['date'] != "N/A") {
                            $value['date'] = date('d-m-Y', strtotime($value['date']));
                        } else {
                            $value['date'] = '-';
                        }
                        $graph_array[$category_name][$month_key]['list'][0] = array('sr_no' => 'No', 'date' => 'Date', 'value' => 'Actual', 'm3sd' => 'Min', 'm1sd' => 'm1sd', 'sd' => 'Avg', 'p1sd' => 'p1sd', 'p3sd' => 'Max', 'color_label' => '');
                        $graph_array[$category_name][$month_key]['list'][] = array('sr_no' => '', 'date' => $value['date'], 'value' => $cat_value, 'm3sd' => $value['m3sd'], 'm1sd' => $value['m1sd'], 'sd' => $value['sd'], 'p1sd' => $value['p1sd'], 'p3sd' => $value['p3sd'], 'color_label' => $color);

                    }


                    $response['data']['main_list'] = $graph_array;

                } else {
                    $response['status'] = 0;
                    $response['message'] = "No data found";
                }
            }
            echo json_encode($response);
            die;
        } else {
            exit();
        }
    }

    public static function get_circle_doc_list()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $role_id = isset($data['role_id']) ? $data['role_id'] : "";
            $search = isset($data['search']) ? $data['search'] : "";
            $offset = isset($data['offset']) ? $data['offset'] : "";
            $main_app_category = isset($data['main_app_category']) ? $data['main_app_category'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter mobile';
            } else if (empty($role_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter role id';
            } else if (empty($offset) && $offset != 0) {
                $response['status'] = 0;
                $response['message'] = 'Please enter offset';
            } else {

                $response = $response_data = array();
                $connection = ConnectionUtil::getConnection();
                $limit = PAGINATION_LIMIT;

                $condition = "";
                $offset = $offset * $limit;
                $get_user_role = Custom::get_appointment_role($mobile, $thin_app_id, $role_id);
                if ($get_user_role != 'ADMIN' && $get_user_role != 'DOCTOR' && $get_user_role != 'STAFF') {
                    $condition = " AND  ac.with_app_id IS NOT NULL ";
                }
                $query = "select IF(DATEDIFF(DATE(NOW()),DATE(u.created))<=42,'YES','NO') as show_into_recent, IF(u.app_installed_status ='INSTALLED' AND u.firebase_token <> '','YES','NO' ) as show_chat_icon, u.firebase_token, CONCAT_WS('',IF(SUBSTRING_INDEX(u.experience,'.',1) = 0, 0, SUBSTRING_INDEX(u.experience,'.',1) ), IF(SUBSTRING_INDEX(u.experience,'.',1) = 0,' Year ',' Years '),IF(SUBSTRING_INDEX(u.experience,'.',1) = 0, 0, SUBSTRING_INDEX(u.experience,'.',-1) ), IF(SUBSTRING_INDEX(u.experience,'.',-1) = 0,' Month ',' Months '))  as experience, IF(ac.with_app_id IS NOT NULL ,'YES','NO') as is_in_circle, t.id as thin_app_id, u.id,u.address, u.username as education, t.name as username, u.mobile, IF(u.image IS NULL, '',u.image) as image, t.apk_url, sta.name as state_name, city.name as city_name, (select count(iu.id) from users as iu where iu.thinapp_id = t.id and iu.role_id =1 ) as tot_users, dc.category_name as category from users as u join thinapps as t on u.thinapp_id = t.id left join states as sta on sta.id = state_id left join cities as city on city.id = u.city_id  left join department_categories as dc on dc.id = u.department_category_id left join app_circles as ac on ac.thinapp_id = $thin_app_id and ac.with_app_id = t.id where  ( t.name LIKE '%$search%' OR u.username LIKE '%$search%' OR u.mobile LIKE '%$search%' OR dc.category_name LIKE '%$search%' OR city.name LIKE '%$search%' OR sta.name LIKE '%$search%'  )  AND t.status = 'ACTIVE' and t.category_name IN('DOCTOR','HOSPITAL') and u.role_id =5  $condition order by tot_users desc limit $offset, $limit";

                $subscriber = $connection->query($query);
                if ($subscriber->num_rows) {
                    $recent_list = array();
                    $doc_list = mysqli_fetch_all($subscriber, MYSQLI_ASSOC);
                    $counter = 0;
                    foreach ($doc_list as $key => $doc) {
                        $response['data']['doctor_list'][] = $doc;
                        if ($doc['show_into_recent'] == "YES") {
                            $array_cnt = count($recent_list);
                            if ($array_cnt == 0) {
                                $recent_list[0] = $doc;
                            } else {
                                if ($recent_list[$array_cnt]['id'] > $doc['id']) {
                                    $recent_list[$array_cnt + 1] = $recent_list[$array_cnt];
                                    $recent_list[$array_cnt] = $doc;
                                } else {
                                    $recent_list[$array_cnt + 1] = $doc;
                                }
                            }
                        }
                    }

                    /*$rec = array();
                    if(!empty($recent_list)){
                        foreach($recent_list as $key  => $val){
                        	if($key > 1){
                            $rec[] = $val;
                            }

                        }
                    }*/
                    $response['data']['recent_list'] = array();
                    $response['status'] = 1;
                    $response['message'] = "Doctors list found";


                } else {
                    $response['status'] = 0;
                    $response['message'] = "No doctor list found";
                }
            }
            echo json_encode($response);

        }
        exit();
    }


    public static function cms_doc_dashboard()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $role_id = isset($data['role_id']) ? $data['role_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $offset = isset($data['offset']) ? $data['offset'] : "";
            $sub_category_name = (isset($data['sub_category_name']) && !empty($data['sub_category_name'])) ? $data['sub_category_name'] : "All";
            $category = isset($data['category']) ? $data['category'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter user id';
            } else if (empty($role_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user role';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter mobile';
            } else if (empty($offset) && $offset != 0) {
                $response['status'] = 0;
                $response['message'] = 'Please enter offset';
            } else {

                $response = $response_data = array();
                $connection = ConnectionUtil::getConnection();

                $mengage_app_id = MBROADCAST_APP_ID;
                $condition = "";
                $category = ($category == "MENGAGE_MENGAGE_CHANNEL") ? "MENGAGE_CHANNEL" : $category;
                if (!empty($sub_category_name) && ($sub_category_name != "All")) {
                    if ($category == "MENGAGE_CHANNEL") {
                        if ($role_id == 5) {
                            $condition .= " AND ( cdd.visible_for = 'ALL' OR cdd.visible_for = 'ADMIN' ) ";
                        } else if ($role_id == 1) {
                            $condition .= " AND ( cdd.visible_for = 'ALL' OR cdd.visible_for = 'USER' ) ";
                        }
                        $condition .= " AND sub_cat.sub_category_name = '$sub_category_name'";

                    } else {
                        $condition = " AND sub_cat.sub_category_name = '$sub_category_name'";
                    }
                } else {
                    if ($category == "MENGAGE_CHANNEL") {
                        if ($role_id == 5) {
                            $condition .= " AND ( cdd.visible_for = 'ALL' OR cdd.visible_for = 'ADMIN' ) ";
                        } else if ($role_id == 1) {
                            $condition .= " AND ( cdd.visible_for = 'ALL' OR cdd.visible_for = 'USER' ) ";
                        }
                    }
                }

                $query = "SELECT  DISTINCT(sub_cat.sub_category_name) as name,  sub_cat.id FROM cms_doc_dashboards as cdd LEFT JOIN cms_doc_health_tip_sub_categories as sub_cat  ON ( cdd.sub_category_id = sub_cat.id )  WHERE (cdd.thinapp_id = $thin_app_id OR cdd.thinapp_id = $mengage_app_id) AND cdd.category = '$category'";
                // echo $query; die;
                $cmsCategories = $connection->query($query);
                if ($cmsCategories->num_rows) {
                    $subcategoryList = mysqli_fetch_all($cmsCategories, MYSQLI_ASSOC);
                } else {
                    $subcategoryList = array(array("name" => "All", "id" => "0"));
                }
                array_unshift($subcategoryList, array("name" => "All", "id" => "0"));

                foreach ($subcategoryList as $val) {
                    if ($sub_category_name == $val['name']) {
                        $val['is_selected'] = true;
                    } else {
                        $val['is_selected'] = false;
                    }
                    $response['data']['subcategory_list'][] = $val;
                }

                $offset = PAGINATION_LIMIT * $offset;
                $limit = PAGINATION_LIMIT;
                $query = "SELECT DATE_FORMAT(cdd.created,'%d %M %Y') as created_date, SUBSTRING_INDEX(cdd.image,'/',-1) as image_name, cdd.media_type,cdd.id, cdd.title, cdd.image,cdd.category,cdd.like_count,cdd.view_count, cdd.share_count as total_share_count, cdd.description,IF(LOCATE('$mobile',cdd.liked_mobile)>0,'true','false') AS is_liked, sub_cat.sub_category_name FROM cms_doc_dashboards as cdd LEFT JOIN cms_doc_health_tip_sub_categories as sub_cat ON (cdd.sub_category_id = sub_cat.id) WHERE (cdd.thinapp_id = $thin_app_id OR cdd.thinapp_id = $mengage_app_id) AND cdd.status= 'ACTIVE' AND cdd.category = '$category' $condition order by cdd.id desc limit $limit offset $offset";
                // echo $query; die;
                $subscriber = $connection->query($query);
                if ($subscriber->num_rows) {
                    $list = mysqli_fetch_all($subscriber, MYSQLI_ASSOC);
                    $response['status'] = 1;
                    $response['message'] = "Pages Found";
                    $response['data']['pages'] = $list;
                } else {
                    $response['status'] = 0;
                    $response['message'] = "No page list found";
                }
            }
            echo json_encode($response);

        }
        exit();


    }

    public static function update_doc_cms_like()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $role_id = isset($data['role_id']) ? $data['role_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $pageID = isset($data['page_id']) ? $data['page_id'] : "";
            $send_notification = false;

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter mobile';
            } else if (empty($pageID)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter page id';
            } else {
                $connection = ConnectionUtil::getConnection();
                $mobileSearch = mysqli_real_escape_string($connection, $mobile);

                $sql = "select cdd.id from cms_doc_dashboards as cdd where cdd.id = $pageID and cdd.liked_mobile LIKE '%$mobileSearch%' limit 1";
                $cmsPage = $connection->query($sql);
                if ($cmsPage->num_rows == 0) {
                    $sql = "UPDATE cms_doc_dashboards SET like_count = like_count +1 , liked_mobile=CONCAT(LEFT(liked_mobile,(CHAR_LENGTH(liked_mobile)-1)), ?, RIGHT(liked_mobile,1)) where id = ?";
                    $stmt = $connection->prepare($sql);
                    $mobile_string = ',"' . $mobile . '"';
                    $stmt->bind_param('ss', $mobile_string, $pageID);
                    if ($stmt->execute()) {
                        $response['status'] = 1;
                        $response['meaasge'] = "Post liked successfully";
                        $send_notification = true;
                        WebservicesFunction::addUserStaticToJson('', $user_id, $thin_app_id, $mobile, "HEALTH TIP", "LIKE", 'update_doc_cms_like');

                    } else {
                        $response['status'] = 0;
                        $response['meaasge'] = "Oops, Something went wrong!";
                    }
                } else {
                    $response['status'] = 0;
                    $response['meaasge'] = "Post is already liked!";
                }
            }
            Custom::sendResponse($response);
            if ($send_notification === true && $role_id == 1 && MBROADCAST_APP_ID != $thin_app_id) {
                Custom::send_process_to_background();
                $query = "select cdd.category, cdd.image, cdd.title, u.username as login_username, admin.username as admin_username, admin.firebase_token as admin_token from cms_doc_dashboards as cdd join users as u on cdd.thinapp_id = u.thinapp_id and u.mobile = '$mobile'  join users as admin on admin.thinapp_id = cdd.thinapp_id and admin.role_id = 5  where cdd.id = $pageID limit 1";
                $connection = ConnectionUtil::getConnection();
                $service_message_list = $connection->query($query);
                if ($service_message_list->num_rows) {
                    $data = mysqli_fetch_assoc($service_message_list);
                    $cat = "";
                    if ($data['category'] == "HEALTH_TIP")
                        $cat = "health tip";
                    else if ($data['category'] == "EMERGENCY")
                        $cat = "emergency";
                    $message = $data['login_username'] . " liked your $cat post " . $data['title'];
                    $option = array(
                        'thinapp_id' => $thin_app_id,
                        'channel_id' => 0,
                        'role' => "USER",
                        'flag' => $data['category'],
                        'title' => $data['title'],
                        'file_path_url' => $data['image'],
                        'type' => 'IMAGE',
                        'message' => $message,
                        'description' => "",
                        'chat_reference' => '',
                        'module_type' => $data['category'],
                        'module_type_id' => 0,
                        'firebase_reference' => ""
                    );
                    Custom::send_notification_via_token($option, array($data['admin_token']), $thin_app_id);
                }


            }
        }
        exit();
    }

    public static function update_doc_cms_share_count()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $role_id = isset($data['role_id']) ? $data['role_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $page_id = isset($data['page_id']) ? $data['page_id'] : "";
            $send_notification = false;

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter mobile';
            } else if (empty($page_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter page id';
            } else {
                $connection = ConnectionUtil::getConnection();
                $sql = "UPDATE cms_doc_dashboards SET share_count = share_count + 1 , shared_user=CONCAT(LEFT(shared_user,(CHAR_LENGTH(shared_user)-1)), ?, RIGHT(shared_user,1)) where id = ?";
                $user_string = ',"' . $user_id . '"';
                $stmt = $connection->prepare($sql);
                $stmt->bind_param('ss', $user_string, $page_id);
                if ($stmt->execute()) {
                    $response['status'] = 1;
                    $response['meaasge'] = "Post shared successfully";
                    $send_notification = true;
                    WebservicesFunction::addUserStaticToJson('', $user_id, $thin_app_id, $mobile, "HEALTH TIP", "SHARE", 'update_doc_cms_share_count');

                } else {
                    $response['status'] = 0;
                    $response['meaasge'] = "Oops, Something went wrong!";
                }
            }
            Custom::sendResponse($response);
            if ($send_notification === true && $role_id == 1 && MBROADCAST_APP_ID != $thin_app_id) {
                Custom::send_process_to_background();
                $query = "select cdd.category, cdd.image, cdd.title, u.username as login_username, admin.username as admin_username, admin.firebase_token as admin_token from cms_doc_dashboards as cdd join users as u on cdd.thinapp_id = u.thinapp_id and u.mobile = '$mobile'  join users as admin on admin.thinapp_id = cdd.thinapp_id and admin.role_id = 5  where cdd.id = $pageID limit 1";
                $connection = ConnectionUtil::getConnection();
                $service_message_list = $connection->query($query);
                if ($service_message_list->num_rows) {
                    $data = mysqli_fetch_assoc($service_message_list);
                    $cat = "";
                    if ($data['category'] == "HEALTH_TIP")
                        $cat = "health tip";
                    else if ($data['category'] == "EMERGENCY")
                        $cat = "emergency";
                    $message = $data['login_username'] . " shared your $cat post " . $data['title'];
                    $option = array(
                        'thinapp_id' => $thin_app_id,
                        'channel_id' => 0,
                        'role' => "USER",
                        'flag' => $data['category'],
                        'title' => $data['title'],
                        'file_path_url' => $data['image'],
                        'type' => 'IMAGE',
                        'message' => $message,
                        'description' => "",
                        'chat_reference' => '',
                        'module_type' => $data['category'],
                        'module_type_id' => 0,
                        'firebase_reference' => ""
                    );
                    Custom::send_notification_via_token($option, array($data['admin_token']), $thin_app_id);
                }


            }
        }
        exit();
    }


    public static function update_doc_cms_view_count()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $pageID = isset($data['page_id']) ? $data['page_id'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter mobile';
            } else if (empty($pageID)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter page id';
            } else {

                $connection = ConnectionUtil::getConnection();
                $created = Custom::created();
                $query = "select id  from cms_doc_views where cms_doc_dashboard_id = $pageID and user_id = $user_id limit 1";
                $service_message_list = $connection->query($query);
                if (!$service_message_list->num_rows) {
                    $sql = "INSERT INTO cms_doc_views (user_id, thinapp_id, cms_doc_dashboard_id, created) VALUES (?, ?, ?, ?)";
                    $stmt = $connection->prepare($sql);
                    $stmt->bind_param('ssss', $user_id, $thin_app_id, $pageID, $created);

                    $sql = "update cms_doc_dashboards set view_count = view_count + 1 where id =?";
                    $stmt_up = $connection->prepare($sql);
                    $stmt_up->bind_param('s', $pageID);
                    if ($stmt->execute() && $stmt_up->execute()) {
                        $response['status'] = 1;
                        $response['message'] = "View count updated successfully!";
                        WebservicesFunction::addUserStaticToJson('', $user_id, $thin_app_id, $mobile, "HEALTH TIP", "VIEW", 'update_doc_cms_view_count');

                    } else {
                        $response['status'] = 0;
                        $response['message'] = "View count could not be updated!";
                    }
                } else {
                    $response['status'] = 0;
                    $response['message'] = "Already Viewed";
                }


            }
            Custom::sendResponse($response);
        }
        exit();

    }


    public static function get_cms_view_user_list()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $pageID = isset($data['page_id']) ? $data['page_id'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter mobile';
            } else if (empty($pageID)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter page id';
            } else {

                $query = "select u.username,u.mobile from  cms_doc_views as cdv join users as u on u.id = cdv.user_id and u.thinapp_id = cdv.thinapp_id and u.role_id =1  where cdv.thinapp_id = $thin_app_id and cdv.cms_doc_dashboard_id = $pageID";
                $connection = ConnectionUtil::getConnection();
                $service_message_list = $connection->query($query);
                if ($service_message_list->num_rows) {
                    $data = mysqli_fetch_all($service_message_list, MYSQLI_ASSOC);
                    $response['status'] = 1;
                    $response['message'] = "Users list found";
                    $response['data']['user_list'] = $data;
                } else {
                    $response['status'] = 0;
                    $response['message'] = "No list found";
                }


            }
            Custom::sendResponse($response);
        }
        exit();

    }


    public static function get_child_vaccination_list($data=null)
    {
        $return = true;
        if($data===null){
            $return = false;
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);
        }


        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = $menu_list = array();

            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $role_id = isset($data['role_id']) ? $data['role_id'] : "";
            $child_id = isset($data['child_id']) ? $data['child_id'] : "";
            $list_type = isset($data['list_type']) ? $data['list_type'] : "";


            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter mobile';
            } else if (empty($role_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter role id';
            } else if (empty($child_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid child';
            } else if (empty($list_type) || ($list_type != "HEADING" && $list_type != "DATE")) {
                $response['status'] = 0;
                $response['message'] = 'Invalid list type';
            } else {


                $connection = ConnectionUtil::getConnection();
                if ($list_type == "HEADING") {
                    $order_by = " order by amv.full_name asc, cv.id asc ";
                } else {
                    $order_by = " order by vac_date asc, amv.vac_name asc ";
                }

                $query = "select  cv.vac_date as original_vac_date, cv.vac_done_date,  amv.vac_time,amv.full_name, amv.vac_type, amv.vac_name,amv.category_type,  if(amv.category_type='CHILD VACCINATION',amv.vac_dose_name,cv.adolescent_dose_name) as vac_dose_name, cv.id, IFNULL(cv.reschedule_date, cv.vac_date) as vac_date, cv.status from child_vaccinations as cv join app_master_vaccinations as amv on cv.app_master_vaccination_id = amv.id and cv.children_id =$child_id and amv.status ='ACTIVE' join childrens as c on c.id = cv.children_id AND IF(c.gender = 'MALE',amv.visible_for_male, amv.visible_for_female) ='YES' $order_by";
                $subscriber = $connection->query($query);
                if ($subscriber->num_rows) {
                    $menu_list = mysqli_fetch_all($subscriber, MYSQLI_ASSOC);
                    $final_array = $last_array = $validation_array = $vac_id_status = array();
                    $final_send_array = array();
                    $current_year = date('Y');
                    $current_month = date('m');
                    $child_data = Custom::get_child_by_id($child_id);
                    foreach ($menu_list as $key => $value) {

                        if ($list_type == "HEADING") {
                            $title = trim($value['full_name'] . "@@" . $value['vac_name']);
                            $final_array[$title][$key]['dose_name'] = (is_numeric($value['vac_dose_name'])) ? $value['vac_dose_name'] : $value['vac_dose_name'];
                            $str = ($value['status'] == 'PENDING') ? " Dose Due On " : " Given on ";
                            if ($value['status'] == 'DONE' && !empty($value['vac_done_date'])) {
                                $final_array[$title][$key]['due_date'] = $str . date('d M, Y', strtotime($value['vac_done_date']));
                                $final_array[$title][$key]['label_given_date'] = date('d M, Y', strtotime($value['vac_done_date']));
                            } else {
                                $final_array[$title][$key]['due_date'] = $str . date('d M, Y', strtotime($value['vac_date']));
                                $final_array[$title][$key]['label_given_date'] = "N/A";
                            }

                            $final_array[$title][$key]['label_vac_date'] = date('d M, Y', strtotime($value['original_vac_date']));


                        } else {
                            $title = trim(date('d-m-Y', strtotime($value['vac_date'])) . "@@" . $value['vac_time']);
                            $final_array[$title][$key]['dose_name'] = $value['vac_name'];
                            $final_array[$title][$key]['due_date'] = (is_numeric($value['vac_dose_name'])) ? $value['vac_dose_name'] : $value['vac_dose_name'];

                            $final_array[$title][$key]['label_given_date'] = "N/A";
                            $final_array[$title][$key]['label_vac_date'] = date('d M, Y', strtotime($value['vac_date']));
                            if ($value['status'] == 'DONE' && !empty($value['vac_done_date'])) {
                                $final_array[$title][$key]['label_given_date'] = date('d M, Y', strtotime($value['vac_done_date']));
                            }

                        }

                        $final_array[$title][$key]['id'] = $value['id'];
                        $final_array[$title][$key]['status'] = $value['status'];
                        $final_array[$title][$key]['vac_type'] = $value['vac_type'];
                        $final_array[$title][$key]['category_type'] = $value['category_type'];
                        $final_array[$title][$key]['original_vac_date'] = $value['original_vac_date'];


                        $vac_year = date('Y', strtotime($value['vac_date']));
                        $vac_month = date('m', strtotime($value['vac_date']));

                        $label = "GRAY";
                        if ($value['status'] == 'DONE') {
                            $label = "GREEN";
                        } else if ($value['status'] == 'PENDING') {
                            if (strtotime($value['vac_date']) < strtotime(date('Y-m-d'))) {
                                $label = "RED";
                            } else if (($value['vac_date'] == date('Y-m-d')) || ($current_month == $vac_month && $current_year == $vac_year)) {
                                $label = "YELLOW";
                            }
                        } else {
                            $label = "BLACK";
                        }
                        $final_array[$title][$key]['label'] = $label;

                    }

                    $new_final_array = array();
                    foreach ($final_array as $final_key => $value) {
                        $name = explode("@@", $final_key);
                        $date = $name[0];
                        $days = $name[1];
                        $last_day = "";

                        $get_days = Custom::checkDateInterval(@end(explode("@@", $new_final_array[$date]['key'])), $days);
                        $new_final_array[$date]['key'] = $date . "@@" . $get_days;
                        foreach ($value as $inner_key => $value) {
                            $new_final_array[$date]['value'][$inner_key] = $value;
                        }
                    }


                    $counter = 0;
                    foreach ($new_final_array as $key => $value) {
                        $name = explode("@@", $value['key']);
                        $interval = "";
                        $value = $value['value'];
                        if ($list_type == "DATE") {
                            $category_type = reset($value)['category_type'];
                            $title = !empty($name[0]) ? date('d M, Y', strtotime($name[0])) : "";
                            $compare_date = date('Y-m-d', strtotime($name[0]));
                            if (!empty($name[1])) {
                                if ($name[1] != 'BIRTH') {
                                    if ($category_type == "CHILD VACCINATION") {
                                        $has_original = false;
                                        if (count($value) == 1 && $value[key($value)]['category_type'] == 'CHILD VACCINATION' && $value[key($value)]['original_vac_date'] == $compare_date) {
                                            $has_original = true;
                                        } else if (count($value) > 1) {
                                            foreach ($value as $val_key => $find_date) {
                                                if ($find_date['category_type'] == 'CHILD VACCINATION' && $find_date['original_vac_date'] == $compare_date) {
                                                    $has_original = true;
                                                    break;
                                                }
                                            }
                                        }
                                        if ($has_original === true) {
                                            $interval = $name[1];
                                            $int_arr = explode(" ", $interval);
                                            $interval = ($int_arr[0] == 1) ? $int_arr[1] : $int_arr[1] . "S";
                                            if ($int_arr[0] >= 12 && ($interval == "MONTH" || $interval == "MONTHS")) {
                                                $years = (int)($int_arr[0] / 12);
                                                $month = $int_arr[0] % 12;

                                                $interval = ($years == 1) ? $years . " Year " : $years . " Years ";
                                                if ($month > 0) {
                                                    $interval .= ($month == 1) ? $month . " Month " : $month . " Months ";
                                                }
                                                $interval = " (" . $interval . ")";
                                            } else {
                                                $interval = " (" . ucwords(strtolower($int_arr[0] . " " . $interval)) . ")";
                                            }


                                        }
                                    }
                                } else {
                                    if ($category_type == "CHILD VACCINATION") {
                                        if (count($value) == 1 && $value[key($value)]['category_type'] == 'CHILD VACCINATION' && $value[key($value)]['original_vac_date'] == $compare_date) {
                                            $interval = $name[1];
                                            $interval = " (" . ucwords(strtolower($name[1])) . ")";
                                        } else if (count($value) > 1) {
                                            foreach ($value as $val_key => $find_date) {
                                                if ($find_date['category_type'] == 'CHILD VACCINATION' && $find_date['original_vac_date'] == $compare_date) {
                                                    $interval = $name[1];
                                                    $interval = " (" . ucwords(strtolower($name[1])) . ")";
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                }
                            }


                            $last_array[$counter]['title'] = $title . $interval;
                            $last_array[$counter]['sub_title'] = "";


                        } else {
                            $last_array[$counter]['title'] = !empty($name[0]) ? $name[0] : "";
                            $last_array[$counter]['sub_title'] = !empty($name[1]) ? $name[1] : "";


                        }

                        foreach ($value as $k => $vac) {
                            $validation_array[$vac['dose_name']][$vac['id']] = array('date' => $vac['label_vac_date'], 'dose' => $vac['due_date'], 'status' => $vac['status']);
                            ksort($validation_array[$vac['dose_name']]);
                        }
                        $last_array[$counter++]['list'] = array_values($value);
                    }

                    foreach ($last_array as $key => $obj) {
                        foreach ($obj['list'] as $key_2 => $list) {
                            $valid_obj = $validation_array[$list['dose_name']];
                            $last_array[$key]['list'][$key_2]['allow_edit'] = "YES";
                            $last_array[$key]['list'][$key_2]['message'] = "";
                            foreach ($valid_obj as $inner_key => $vac) {
                                /* PLEASE ADD HERE CONDITION OF RESCHEDUEL AND CANCELED VACCINATION ONLY GIVEN VACCINATION ARE VALIDATE HERE */
                                if ($inner_key > $list['id'] && (strtoupper($vac['status']) == "DONE")) {
                                    $last_array[$key]['list'][$key_2]['allow_edit'] = "YES";
                                    $message = "The next " . $list['dose_name'] . ' ' . $vac['dose'] . " already given.";
                                    $last_array[$key]['list'][$key_2]['message'] = $message;
                                    break;
                                }
                            }
                        }
                    }

                    $response['status'] = 1;
                    $response['message'] = "Vaccination list found";
                    $response['data']['vac_list'] = $last_array;

                } else {
                    $response['status'] = 0;
                    $response['message'] = "No vaccination list found";
                }

            }
            if($return===true){
                return json_encode($response);
            }else{
                Custom::sendResponse($response);
            }

        }

        exit();

    }

    public static function get_country_list()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $response = $menu_list = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter user id';
            } else {

                if (!$country_list = json_decode(WebservicesFunction::readJson("country_list"), true)) {
                    $country_list = Custom::getCountryList(true);
                    WebservicesFunction::createJson("country_list", json_encode($country_list), "CREATE");
                }
                if ($country_list) {
                    $response['status'] = 1;
                    $response['message'] = "Country  list found";
                    $response['data']['country_list'] = $country_list;
                } else {
                    $response['status'] = 0;
                    $response['message'] = "No country list found";
                }
            }
            Custom::sendResponse($response);
        }

        exit();

    }

    public static function get_adolescent_vaccination_list()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $response = $menu_list = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $child_id = isset($data['child_id']) ? $data['child_id'] : "";
            $application_type = isset($data['application_type']) ? $data['application_type'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter user id';
            } else if (empty($child_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter child id';
            } else {
                $connection = ConnectionUtil::getConnection();
                $query = "select amv.id as master_vac_id, amv.vac_name from  app_master_vaccinations as amv where amv.category_type ='SPECIAL/ADOLESCENT' and amv.thinapp_id = $thin_app_id and amv.status ='ACTIVE'";
                $subscriber = $connection->query($query);
                if ($subscriber->num_rows) {
                    $menu_list = mysqli_fetch_all($subscriber, MYSQLI_ASSOC);
                    $response['status'] = 1;
                    $response['message'] = "Vaccination list found";
                    $arr[0]["master_vac_id"] = ($application_type=="FLUTTER")?"0":0;
                    $arr[0]["vac_name"] = "Select Vaccine";
                    $finnal_array = array_merge($arr, $menu_list);
                    $response['data']['vac_list'] = $finnal_array;
                } else {
                    $response['status'] = 0;
                    $response['message'] = "No vaccination list found";
                }
            }
            Custom::sendResponse($response);
        }

        exit();

    }

    public static function get_adolescent_vaccination_dose_list()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $response = $menu_list = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $child_id = isset($data['child_id']) ? $data['child_id'] : "";
            $master_vac_id = isset($data['master_vac_id']) ? $data['master_vac_id'] : 0;
            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter user id';
            } else if (empty($child_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter child id';
            } else if (empty($master_vac_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter vaccination id';
            } else {
                $connection = ConnectionUtil::getConnection();
                $related_vaccination_list = Custom::get_child_adolescent_vaccination($connection, $thin_app_id, $child_id, $master_vac_id);
                $dose_list = Custom::get_child_adolescent_vaccination_rest_dose($connection, $thin_app_id, $child_id, $master_vac_id);
                if (!empty($related_vacctination_list) || !empty($dose_list)) {
                    $response['status'] = 1;
                    $response['message'] = "Vaccination list found";
                    $response['data']['vac_data']['related_vac_list'] = $related_vaccination_list;
                    $response['data']['vac_data']['dose_list'] = $dose_list;
                } else {
                    $response['status'] = 0;
                    $response['message'] = "No vaccination list found";
                }
            }
            Custom::sendResponse($response);
        }

        exit();

    }


    public static function add_child_adolescent_vaccination()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $child_id = isset($data['child_id']) ? $data['child_id'] : "";
            $master_vac_id = isset($data['master_vac_id']) ? $data['master_vac_id'] : "";
            $dose_name = isset($data['dose_name']) ? $data['dose_name'] : "";
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : 0;
            $date = isset($data['date']) ? date('Y-m-d', strtotime($data['date'])) : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($child_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid child';
            } else if (empty($master_vac_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please select vaccination';
            } else if (empty($dose_name)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid dose';
            } else if (empty($date)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid date';
            } else {
                $connection = ConnectionUtil::getConnection();
                $created = Custom::created();
                $sql = "INSERT INTO child_vaccinations (added_by_doctor_id, thinapp_id,children_id,app_master_vaccination_id,vac_date,category_type,adolescent_dose_name,created,modified) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)";
                $stmt = $connection->prepare($sql);
                $category_type = "SPECIAL/ADOLESCENT";
                $stmt->bind_param('sssssssss', $doctor_id, $thin_app_id, $child_id, $master_vac_id, $date, $category_type, $dose_name, $created, $created);
                if ($stmt->execute()) {
                    $response['status'] = 1;
                    $response['message'] = "Vaccination add successfully";
                } else {
                    $response['status'] = 0;
                    $response['message'] = "Sorry unable to add vaccination";
                }
            }
            Custom::sendResponse($response);
        }
        exit();

    }


    public static function give_child_adolescent_vaccination()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $child_id = isset($data['child_id']) ? $data['child_id'] : "";
            $master_vac_id = isset($data['master_vac_id']) ? $data['master_vac_id'] : "";
            $dose_name = isset($data['dose_name']) ? $data['dose_name'] : "";
            $image = isset($data['image']) ? Custom::check_image_path_string($data['image']) : "";
            $remark = isset($data['remark']) ? $data['remark'] : "";
            $date = isset($data['date']) ? date('Y-m-d', strtotime($data['date'])) : "";
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : 0;

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($child_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid child';
            } else if (empty($master_vac_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid vacination';
            } else if (empty($dose_name)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid dose';
            } else if (empty($date)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid date';
            } else {
                $connection = ConnectionUtil::getConnection();

                $created = Custom::created();
                $sql = "INSERT INTO child_vaccinations (added_by_doctor_id, given_by_doctor_id, vac_image, thinapp_id ,children_id, app_master_vaccination_id, vac_date, category_type, vac_done_date, remark, status, adolescent_dose_name, created, modified) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                $stmt = $connection->prepare($sql);
                $category_type = "SPECIAL/ADOLESCENT";
                $status = "DONE";
                $done_date = date('Y-m-d H:i:s');
                $stmt->bind_param('ssssssssssssss', $doctor_id, $doctor_id, $image, $thin_app_id, $child_id, $master_vac_id, $date, $category_type, $done_date, $remark, $status, $dose_name, $created, $created);
                if ($stmt->execute()) {
                    $response['status'] = 1;
                    $response['message'] = "Vaccination add successfully";
                    WebservicesFunction::addUserStaticToJson('', $user_id, $thin_app_id, $mobile, "VACCINE & GROWTH", 'VACCINE GIVEN', 'give_child_adolescent_vaccination');

                } else {
                    $response['status'] = 0;
                    $response['message'] = "Sorry unable to add vaccination";
                }
            }
            Custom::sendResponse($response);
        }
        exit();

    }


    public static function update_child_vaccination()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {


            $response = array();
            $request_from = isset($data['rf']) ? $data['rf'] : "";
            if($request_from=='WEB'){
                $data['role_id'] = base64_decode($data['ri']);;
                $data['user_id'] = base64_decode($data['ui']);
                $data['app_key'] = APP_KEY;
                $data['thin_app_id'] = base64_decode($data['ti']);
                $data['mobile'] = base64_decode($data['m']);
                $data['child_id'] =  base64_decode($data['ci']);
                $data['vac_id'] =  base64_decode($data['vi']);
                $data['doctor_id'] =  base64_decode($data['di']);
            }
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $child_id = isset($data['child_id']) ? $data['child_id'] : "";
            $vac_id = isset($data['vac_id']) ? $data['vac_id'] : "";
            $remark = isset($data['remark']) ? $data['remark'] : "";
            $vac_image = isset($data['vac_image']) ? $data['vac_image'] : "";
            $vac_image_2 = isset($data['vac_image2']) ? $data['vac_image2'] : "";
            $vac_image_3 = isset($data['vac_image3']) ? $data['vac_image3'] : "";
            $date = isset($data['date']) ? $data['date'] : "";
            $update_type = isset($data['update_type']) ? $data['update_type'] : "";
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : 0;

            $send_notification = false;

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($child_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid child id';
            } else if (empty($vac_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid vaccination';
            } else if (empty($date)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid vaccination date';
            } else if (empty($update_type) || ($update_type != "GIVE" && $update_type != "RESCHEDULE")) {
                $response['status'] = 0;
                $response['message'] = 'Invalid update type';
            } else {

                $vac_data = Custom::get_child_vaccination_by_id($vac_id);
                $update_reschedule_date = true;
                if (!empty($vac_data)) {

                    $vac_image = Custom::check_image_path_string($vac_image);
                    $vac_image_2 = Custom::check_image_path_string($vac_image_2);
                    $vac_image_3 = Custom::check_image_path_string($vac_image_3);

                    $vac_image = !empty($vac_image) ? $vac_image : $vac_data['vac_image'];
                    $vac_image_2 = !empty($vac_image_2) ? $vac_image_2 : $vac_data['vac_image_2'];
                    $vac_image_3 = !empty($vac_image_3) ? $vac_image_3 : $vac_data['vac_image_3'];
                    $connection = ConnectionUtil::getConnection();
                    $connection->autocommit(false);
                    $created = Custom::created();
                    if ($vac_data['status'] == "PENDING") {
                        if ($update_type == "GIVE") {
                            $given_date = date('Y-m-d H:i:s', strtotime($date));
                            $status = "DONE";
                            $sql = "update child_vaccinations set given_by_doctor_id=?, modify_by_user_id=?, vac_done_date =?, remark =?,  vac_image =?, vac_image_2 =?, vac_image_3 =?,  status =?, modified=? where id = ?";
                            $stmt = $connection->prepare($sql);
                            $stmt->bind_param('ssssssssss', $doctor_id, $user_id, $given_date, $remark, $vac_image, $vac_image_2, $vac_image_3, $status, $created, $vac_id);
                            $response['message'] = "Vaccination done successfully";


                            /* start this code update all upcoming reschedule date for child */
                            $vac_date = !empty($vac_data['reschedule_date']) ? $vac_data['reschedule_date'] : $vac_data['vac_date'];
                            $given_date = date('Y-m-d', strtotime($date));
                            if (strtotime($vac_date) < strtotime($given_date)) {
                                $total_days = Custom::get_day_difference($vac_date, $given_date, "Y-m-d");
                                $update_reschedule_date = Custom::update_reschedule_vac_date($connection, $thin_app_id, $child_id, $vac_data, $date, $vac_id, $total_days, "ADD");
                            } else {
                                $total_days = Custom::get_day_difference($given_date, $vac_date, "Y-m-d");;
                                $update_reschedule_date = Custom::update_reschedule_vac_date($connection, $thin_app_id, $child_id, $vac_data, $date, $vac_id, $total_days, "LESS");
                            }

                        } else {

                            $date = date('Y-m-d', strtotime($date));
                            $sql = "update child_vaccinations set modify_by_user_id=?, reschedule_date =?, remark = ?, reschedule_by =?, modified=? where id = ?";
                            $stmt = $connection->prepare($sql);
                            $stmt->bind_param('ssssss', $user_id, $date, $remark, $user_id, $created, $vac_id);
                            $response['message'] = "Vaccination reschedule successfully";

                            /* start this code update all upcoming reschedule date for child */
                            $vac_date = !empty($vac_data['reschedule_date']) ? $vac_data['reschedule_date'] : $vac_data['vac_date'];
                            $reschedule_date = date('Y-m-d', strtotime($date));
                            if (strtotime($vac_date) < strtotime($reschedule_date)) {
                                $total_days = Custom::get_day_difference($vac_date, $reschedule_date, "Y-m-d");
                                $update_reschedule_date = Custom::update_reschedule_vac_date($connection, $thin_app_id, $child_id, $vac_data, $date, $vac_id, $total_days, "ADD");
                            } else {
                                $total_days = Custom::get_day_difference($reschedule_date, $vac_date, "Y-m-d");;
                                $update_reschedule_date = Custom::update_reschedule_vac_date($connection, $thin_app_id, $child_id, $vac_data, $date, $vac_id, $total_days, "LESS");
                            }

                        }


                        /*  end */

                        if ($stmt->execute() && $update_reschedule_date === true) {
                            $connection->commit();
                            $label = ($update_type == "GIVE") ? "VACCINE GIVEN" : "VACCINE RESCHEDULE";
                            WebservicesFunction::addUserStaticToJson('', $user_id, $thin_app_id, $mobile, "VACCINE & GROWTH", $label, 'update_child_vaccination');

                            $response['status'] = 1;
                            $send_notification = true;

                        } else {
                            $connection->rollback();
                            $response['status'] = 0;
                            $response['message'] = "Sorry vaccination could not done";
                        }
                    } else if ($vac_data['status'] == "DONE") {

                        $given_date = date('Y-m-d H:i:s', strtotime($date));
                        $status = "DONE";
                        $sql = "update child_vaccinations set given_by_doctor_id=?, modify_by_user_id=?, vac_done_date =?, remark =?,  vac_image =?, vac_image_2 =?, vac_image_3 =?, modified=? where id = ?";
                        $stmt = $connection->prepare($sql);
                        $stmt->bind_param('sssssssss', $doctor_id, $user_id, $given_date, $remark, $vac_image, $vac_image_2, $vac_image_3, $created, $vac_id);

                        if (!empty($vac_data['vac_done_date'])) {
                            $vac_date = $vac_data['vac_done_date'];
                        } else if (!empty($vac_data['reschedule_date'])) {
                            $vac_date = $vac_data['reschedule_date'];
                        } else {
                            $vac_date = $vac_data['vac_date'];
                        }

                        $vac_date = date('Y-m-d', strtotime($vac_date));
                        $given_date = date('Y-m-d', strtotime($date));

                        if (strtotime($vac_date) < strtotime($given_date)) {
                            $total_days = Custom::get_day_difference($vac_date, $given_date, "Y-m-d");
                            $update_reschedule_date = Custom::update_reschedule_vac_date($connection, $thin_app_id, $child_id, $vac_data, $date, $vac_id, $total_days, "ADD");
                        } else {
                            $total_days = Custom::get_day_difference($given_date, $vac_date, "Y-m-d");;
                            $update_reschedule_date = Custom::update_reschedule_vac_date($connection, $thin_app_id, $child_id, $vac_data, $date, $vac_id, $total_days, "LESS");
                        }

                        if ($stmt->execute() && $update_reschedule_date == true) {
                            $connection->commit();
                            $response['status'] = 1;
                            $response['message'] = "Vaccination save successfully";

                            $send_notification = false;
                        } else {
                            $connection->rollback();
                            $response['status'] = 0;
                            $response['message'] = "Sorry vaccination could not save";
                        }
                    } else {
                        $sql = "update child_vaccinations set modify_by_user_id =?, remark = ?, modified=? where id = ?";
                        $stmt = $connection->prepare($sql);
                        $stmt->bind_param('ssss', $user_id, $remark, $created, $vac_id);
                        $response['message'] = "Vaccination saved successfully";
                        if ($stmt->execute()) {
                            $connection->commit();
                            $response['status'] = 1;
                            $send_notification = false;
                        } else {
                            $connection->rollback();
                            $response['status'] = 0;
                            $response['message'] = "Sorry vaccination could not save";
                        }
                    }
                } else {
                    $response['status'] = 0;
                    $response['message'] = "Invalid Vaccination";
                }

            }
            Custom::sendResponse($response);
            Custom::send_process_to_background();
            if ($send_notification) {
                $child_vac_data = Custom::get_child_with_vaccination($child_id, $vac_id);
                $message = $rec_user_id = $rec_mobile = "";
                if (!empty($child_vac_data)) {
                    $admin_data = Custom::get_thinapp_admin_data($thin_app_id);
                    $vaccination = $child_vac_data['vac_name'] . " " . $child_vac_data['vac_dose_name'];
                    $date = date('d M, Y', strtotime($child_vac_data['vac_date']));
                    $day_type = "";
                    if ($update_type == "GIVE") {
                        $give_date = !empty($child_vac_data['vac_done_date']) ? $child_vac_data['vac_done_date'] : $child_vac_data['vac_date'];
                        $label = date('l', strtotime($give_date));
                        $give_date = date('d/m/Y', strtotime($give_date));

                        $message = "Vaccine " . $vaccination . " has been given to child " . trim($child_vac_data['child_name']) . " on " . $label . ", " . $give_date;
                        $rec_user_id = $child_vac_data['patient_id'];
                        $rec_mobile = $child_vac_data['mobile'];
                    } else if ($update_type == "RESCHEDULE") {


                        $label = date('l', strtotime($child_vac_data['reschedule_date']));
                        $date = date('d/m/Y', strtotime($child_vac_data['reschedule_date']));

                        if ($user_id == $child_vac_data['patient_id']) {
                            $message = "Vaccine " . $vaccination . " has been rescheduled on " . $label . ", " . $date . " for child " . trim($child_vac_data['child_name']);
                            $rec_user_id = $admin_data['id'];
                            $rec_mobile = $admin_data['mobile'];
                        } else {
                            $message = "Vaccine " . $vaccination . " has been rescheduled on " . $label . ", " . $date . " for child " . trim($child_vac_data['child_name']);
                            $rec_user_id = $child_vac_data['patient_id'];
                            $rec_mobile = $child_vac_data['mobile'];
                        }
                        $day_type = Custom::getDatePosition($date);
                    }

                    $option = array(
                        'thinapp_id' => $thin_app_id,
                        'channel_id' => 0,
                        'role' => "USER",
                        'flag' => 'VACCINATION',
                        'title' => mb_strimwidth($child_vac_data['vac_name'], 0, 100, '...'),
                        'module_title' => mb_strimwidth($child_vac_data['vac_name'], 0, 100, '...'),
                        'message' => mb_strimwidth($message, 0, 250, '...'),
                        'description' => "",
                        'chat_reference' => '',
                        'module_type' => 'VACCINATION',
                        'module_type_id' => $vac_id,
                        'child_id' => $child_id,
                        'firebase_reference' => "",
                        'day_type' => $day_type
                    );

                    Custom::send_notification_by_user_id($option, array($rec_user_id), $thin_app_id);
                    if (!empty($rec_mobile)) {
                        if($update_type == "RESCHEDULE"){
                            Custom::send_single_sms($rec_mobile, ($message), $thin_app_id,true);
                        }
                    }
                }
            }

        }
        exit();

    }

    public static function give_combine_vaccination()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $child_id = isset($data['child_id']) ? $data['child_id'] : "";
            $vac_id_array = isset($data['vac_id_array']) ? $data['vac_id_array'] : "";
            $application_type = isset($data['application_type']) ? $data['application_type'] : "";
            $vac_id_array = ($application_type=="FLUTTER")?explode(",",$vac_id_array):$vac_id_array;
            $remark = isset($data['remark']) ? $data['remark'] : "";
            $vac_image = isset($data['vac_image']) ? $data['vac_image'] : "";
            $vac_image_2 = isset($data['vac_image2']) ? $data['vac_image2'] : "";
            $vac_image_3 = isset($data['vac_image3']) ? $data['vac_image3'] : "";
            $date = isset($data['date']) ? $data['date'] : null;
            $update_type = isset($data['update_type']) ? $data['update_type'] : "";
            $reschedule_upcoming = isset($data['reschedule_upcoming']) ? strtoupper($data['reschedule_upcoming']) : "NO";
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : 0;
            $send_notification = false;

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($child_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid child id';
            } else if (empty($vac_id_array)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid vaccination';
            } else if ($reschedule_upcoming != "YES" && $reschedule_upcoming != "NO") {
                $response['status'] = 0;
                $response['message'] = 'Invalid reschedule upcoming';
            } else if (empty($update_type) || ($update_type != "RESCHEDULE" && $update_type != "COMBINE" && $update_type != "ELSEWHERE" && $update_type != "CANCEL")) {
                $response['status'] = 0;
                $response['message'] = 'Invalid update type';
            } else {
                $submit_date = $date;
                $vac_data_list = Custom::get_child_vaccination_by_id_array($vac_id_array);
                $vaccination_list_array = array();
                if (!empty($vac_data_list)) {
                    $connection = ConnectionUtil::getConnection();
                    $connection->autocommit(false);
                    $created = Custom::created();
                    $result_array = $pending_vac_status = array();
                    $vac_image = Custom::check_image_path_string($vac_image);
                    $vac_image_2 = Custom::check_image_path_string($vac_image_2);
                    $vac_image_3 = Custom::check_image_path_string($vac_image_3);
                    foreach ($vac_data_list as $vac_id => $vac_data) {
                        $given_date = !empty($date) ? date('Y-m-d H:i:s', strtotime($date)) : null;
                        $vac_image = !empty($vac_image) ? $vac_image : $vac_data['vac_image'];
                        $vac_image_2 = !empty($vac_image_2) ? $vac_image_2 : $vac_data['vac_image_2'];
                        $vac_image_3 = !empty($vac_image_3) ? $vac_image_3 : $vac_data['vac_image_3'];

                        if ($update_type == 'COMBINE' || $update_type == 'ELSEWHERE') {

                            $status = "DONE";
                            $sql = "update child_vaccinations set given_by_doctor_id=?, modify_by_user_id=?, vac_done_date =?, remark =?,  vac_image =?, vac_image_2 =?, vac_image_3 =?,  status =?, modified=? where id = ?";
                            $stmt = $connection->prepare($sql);
                            $stmt->bind_param('ssssssssss', $doctor_id, $user_id, $given_date, $remark, $vac_image, $vac_image_2, $vac_image_3, $status, $created, $vac_id);
                            $response['message'] = "Vaccination done successfully";
                            $update_reschedule_date = true;
                            if (!empty($date) && $reschedule_upcoming == "YES") {
                                $vac_date = !empty($vac_data['reschedule_date']) ? $vac_data['reschedule_date'] : $vac_data['vac_date'];
                                $given_date = date('Y-m-d', strtotime($date));
                                if (strtotime($vac_date) < strtotime($given_date)) {
                                    $total_days = Custom::get_day_difference($vac_date, $given_date, "Y-m-d");
                                    $update_reschedule_date = Custom::update_reschedule_vac_date($connection, $thin_app_id, $child_id, $vac_data, $date, $vac_id, $total_days, "ADD");
                                } else {
                                    $total_days = Custom::get_day_difference($given_date, $vac_date, "Y-m-d");;
                                    $update_reschedule_date = Custom::update_reschedule_vac_date($connection, $thin_app_id, $child_id, $vac_data, $date, $vac_id, $total_days, "LESS");
                                }
                            }

                            if ($stmt->execute() && $update_reschedule_date === true) {
                                $vaccination_list_array[] = $vac_data['vac_name'];
                                $result_array[] = true;
                            } else {
                                $result_array[] = false;
                            }


                        }/*else if($update_type=='CANCEL'){
                            $status = "CANCELED";
                            $sql = "update child_vaccinations set remark =?,  vac_image =? , vac_image_2 =?, vac_image_3 =?, status =?, modified=? where id = ?";
                            $stmt = $connection->prepare($sql);
                            $stmt->bind_param('sssssss', $remark, $vac_image,$vac_image_2,$vac_image_3, $status, $created, $vac_id);
                            if ($stmt->execute()) {
                                $vaccination_list_array[] =  $vac_data['vac_name'];
                                $result_array[] = true;
                            } else {
                                $result_array[] = false;
                            }
                        }*/ else if ($update_type == "RESCHEDULE") {

                            if ($vac_data['status'] == "PENDING") {
                                if (!empty($remark)) {
                                    $date = date('Y-m-d', strtotime($date));
                                    $sql = "update child_vaccinations set modify_by_user_id=?, reschedule_date =?, remark = ?, reschedule_by =?, modified=? where id = ?";
                                    $stmt = $connection->prepare($sql);
                                    $stmt->bind_param('ssssss', $user_id, $date, $remark, $user_id, $created, $vac_id);
                                } else {
                                    $date = date('Y-m-d', strtotime($date));
                                    $sql = "update child_vaccinations set modify_by_user_id=?, reschedule_date =?, reschedule_by =?, modified=? where id = ?";
                                    $stmt = $connection->prepare($sql);
                                    $stmt->bind_param('sssss', $user_id, $date, $user_id, $created, $vac_id);
                                }

                                if ($stmt->execute()) {
                                    $vaccination_list_array[] = $vac_data['vac_name'];
                                    /* start this code update all upcoming reschedule date for child */
                                    $vac_date = !empty($vac_data['reschedule_date']) ? $vac_data['reschedule_date'] : $vac_data['vac_date'];
                                    $reschedule_date = date('Y-m-d', strtotime($date));
                                    if (strtotime($vac_date) < strtotime($reschedule_date)) {
                                        $total_days = Custom::get_day_difference($vac_date, $reschedule_date, "Y-m-d");
                                        $update_reschedule_date = Custom::update_reschedule_vac_date($connection, $thin_app_id, $child_id, $vac_data, $date, $vac_id, $total_days, "ADD");
                                    } else {
                                        $total_days = Custom::get_day_difference($reschedule_date, $vac_date, "Y-m-d");
                                        $update_reschedule_date = Custom::update_reschedule_vac_date($connection, $thin_app_id, $child_id, $vac_data, $date, $vac_id, $total_days, "LESS");
                                    }
                                    if ($update_reschedule_date === true) {
                                        $result_array[] = true;
                                    } else {
                                        $result_array[] = false;
                                    }

                                } else {
                                    $result_array[] = false;
                                }
                            } else if ($vac_data['status'] == "DONE") {
                                if (!empty($remark)) {
                                    $given_date = date('Y-m-d H:i:s', strtotime($date));
                                    $status = "DONE";
                                    $sql = "update child_vaccinations set given_by_doctor_id=?, modify_by_user_id=?, vac_done_date =?, remark =?,  vac_image =?, vac_image_2 =?, vac_image_3 =?, modified=? where id = ?";
                                    $stmt = $connection->prepare($sql);
                                    $stmt->bind_param('sssssssss', $doctor_id, $user_id, $given_date, $remark, $vac_image, $vac_image_2, $vac_image_3, $created, $vac_id);
                                } else {
                                    $given_date = date('Y-m-d H:i:s', strtotime($date));
                                    $status = "DONE";
                                    $sql = "update child_vaccinations set given_by_doctor_id=?, modify_by_user_id=?, vac_done_date =?, vac_image =?, vac_image_2 =?, vac_image_3 =?, modified=? where id = ?";
                                    $stmt = $connection->prepare($sql);
                                    $stmt->bind_param('ssssssss', $doctor_id, $user_id, $given_date, $vac_image, $vac_image_2, $vac_image_3, $created, $vac_id);
                                }

                                if ($stmt->execute()) {
                                    if (!empty($vac_data['vac_done_date'])) {
                                        $vac_date = $vac_data['vac_done_date'];
                                    } else if (!empty($vac_data['reschedule_date'])) {
                                        $vac_date = $vac_data['reschedule_date'];
                                    } else {
                                        $vac_date = $vac_data['vac_date'];
                                    }

                                    $vac_date = date('Y-m-d', strtotime($vac_date));
                                    $given_date = date('Y-m-d', strtotime($date));

                                    if (strtotime($vac_date) < strtotime($given_date)) {
                                        $total_days = Custom::get_day_difference($vac_date, $given_date, "Y-m-d");
                                        $update_reschedule_date = Custom::update_reschedule_vac_date($connection, $thin_app_id, $child_id, $vac_data, $date, $vac_id, $total_days, "ADD");
                                    } else {
                                        $total_days = Custom::get_day_difference($given_date, $vac_date, "Y-m-d");;
                                        $update_reschedule_date = Custom::update_reschedule_vac_date($connection, $thin_app_id, $child_id, $vac_data, $date, $vac_id, $total_days, "LESS");
                                    }
                                    if ($update_reschedule_date === true) {
                                        $result_array[] = true;
                                    } else {
                                        $result_array[] = false;
                                    }
                                } else {
                                    $result_array[] = false;
                                }
                            }
                        }
                    }
                    if (!in_array(false, $result_array)) {
                        $connection->commit();
                        $response['status'] = 1;
                        $label = "";
                        if ($update_type == 'COMBINE' || $update_type == 'ELSEWHERE') {
                            $response['message'] = "Vaccination given successfully";
                            $label = "VACCINE GIVEN";
                        } else if ($update_type == 'CANCEL') {
                            $response['message'] = "Vaccination canceled successfully";
                            $label = "VACCINE CANCEL";
                        } else if ($update_type == "RESCHEDULE") {
                            $response['message'] = "Vaccination rescheduled successfully";
                            $label = "VACCINE RESCHEDULE";
                        } else {
                            $response['message'] = "Sorry somthing went wrong on server";
                        }
                        if (!empty($label)) {
                            WebservicesFunction::addUserStaticToJson('', $user_id, $thin_app_id, $mobile, "VACCINE & GROWTH", $label, 'give_combine_vaccination');

                        }

                        $send_notification = true;
                    } else {
                        $connection->rollback();
                        $response['status'] = 0;
                        if ($update_type == 'COMBINE' || $update_type == 'ELSEWHERE') {
                            $response['message'] = "Sorry vaccination could not given";
                        } else if ($update_type == 'CANCEL') {
                            $response['message'] = "Sorry vaccination could not canceled";
                        } else if ($update_type == "RESCHEDULE") {
                            $response['message'] = "Sorry vaccination could not rescheduled";
                        } else {
                            $response['message'] = "Sorry somthing went wrong on server";
                        }
                    }
                } else {
                    $response['status'] = 0;
                    $response['message'] = "Please select vaccination";
                }
            }
            Custom::sendResponse($response);
            Custom::send_process_to_background();
            if (!empty($vaccination_list_array)) {
                $child_vac_data = Custom::get_child_by_id($child_id);
                $message = $rec_user_id = $rec_mobile = "";
                if (!empty($child_vac_data)) {


                    $day_type = "";
                    $vac_label = '';
                    $dos_cnt = count($vaccination_list_array);
                    if ($dos_cnt > 2) {
                        $vac_label = $vaccination_list_array[0] . ', ' . $vaccination_list_array[1] . ' +' . $dos_cnt;
                    } else if ($dos_cnt == 2) {
                        $vac_label = $vaccination_list_array[0] . ', ' . $vaccination_list_array[1];
                    } else {
                        $vac_label = @$vaccination_list_array[0];
                    }

                    $date = !empty($submit_date) ? date('Y-m-d', strtotime($submit_date)) : null;
                    if (!empty($date)) {
                        //$date = d
                        $label = date('l', strtotime($date));
                        $give_date = date('d/m/Y', strtotime($date));


                        if ($update_type == 'COMBINE' || $update_type == 'ELSEWHERE') {
                            $message = "Vaccine " . $vac_label . " has been given to child " . trim($child_vac_data['child_name']) . " on " . $label . ", " . $give_date;
                        } else if ($update_type == 'CANCEL') {
                            $message = "Vaccine " . $vac_label . " has been canceled for child " . trim($child_vac_data['child_name']) . " on " . $label . ", " . $give_date;
                            if (!empty($remark)) {
                                $message .= "\nReason : " . $remark;
                            }
                        } else if ($update_type == "RESCHEDULE") {
                            $message = "Vaccine " . $vac_label . " has been rescheduled  on " . $label . ", " . $give_date . " for child " . trim($child_vac_data['child_name']);
                        }

                    } else {
                        if ($update_type == 'COMBINE' || $update_type == 'ELSEWHERE') {
                            $message = "Vaccine " . $vac_label . " has been given to child " . trim($child_vac_data['child_name']);
                        } else if ($update_type == 'CANCEL') {
                            $message = "Vaccine " . $vac_label . " has been canceled for child " . trim($child_vac_data['child_name']);
                            if (!empty($remark)) {
                                $message .= "\nReason : " . mb_strimwidth($remark, 0, 50, '...');
                            }
                        } else if ($update_type == "RESCHEDULE") {

                            $label = date('l', strtotime($date));
                            $date = date('d M, Y', strtotime($date));
                            $give_date = date('d/m/Y', strtotime($date));
                            $day_type = "";

                            $message = "Vaccine " . $vac_label . " has been rescheduled  on " . $label . ", " . $give_date . " for child " . trim($child_vac_data['child_name']);
                        }
                    }


                    $vac_id = @$vac_id_array[0];
                    $rec_user_id = $child_vac_data['patient_id'];
                    $rec_mobile = $child_vac_data['mobile'];
                    $option = array(
                        'thinapp_id' => $thin_app_id,
                        'channel_id' => 0,
                        'role' => "USER",
                        'flag' => 'VACCINATION',
                        'title' => mb_strimwidth($vac_label, 0, 100, '...'),
                        'module_title' => mb_strimwidth($vac_label, 0, 100, '...'),
                        'message' => mb_strimwidth($message, 0, 250, '...'),
                        'description' => "",
                        'chat_reference' => '',
                        'module_type' => 'VACCINATION',
                        'module_type_id' => $vac_id,
                        'child_id' => $child_id,
                        'firebase_reference' => "",
                        'day_type' => $day_type
                    );

                    Custom::send_notification_by_user_id($option, array($rec_user_id), $thin_app_id);
                    if (!empty($rec_mobile)) {
                        // Custom::send_single_sms($rec_mobile, ($message), $thin_app_id);
                    }
                }
            }
            exit();
        }

    }







    public static function rollback_vaccination_action()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $child_id = isset($data['child_id']) ? $data['child_id'] : "";
            $vac_id_array = isset($data['vac_id_array']) ? $data['vac_id_array'] : "";
            $application_type = isset($data['application_type']) ? $data['application_type'] : "";
            $vac_id_array = ($application_type=="FLUTTER")?explode(",",$vac_id_array):$vac_id_array;
            $remark = isset($data['remark']) ? $data['remark'] : "";
            $action_from = isset($data['action_from']) ? $data['action_from'] : "";
            $action_to = isset($data['action_to']) ? $data['action_to'] : "";
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : 0;

            $send_notification = false;

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($child_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid child id';
            } else if (empty($vac_id_array)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid vaccination';
            } else if (empty($action_from) || ($action_from != "PENDING" && $action_from != "CANCELED" && $action_from != "DONE")) {
                $response['status'] = 0;
                $response['message'] = 'Invalid action from';
            } else if (empty($action_to) || ($action_to != "CANCELED" && $action_to != "PENDING" && $action_to != "DONE")) {
                $response['status'] = 0;
                $response['message'] = 'Invalid action to';
            } else {


                $vac_data_list = Custom::get_child_vaccination_by_id_array($vac_id_array);

                $vaccination_list_array = array();
                if (!empty($vac_data_list)) {
                    $connection = ConnectionUtil::getConnection();
                    $connection->autocommit(false);
                    $created = Custom::created();
                    $result_array = $pending_vac_status = array();
                    foreach ($vac_data_list as $vac_id => $vac_data) {
                        if ($action_from == "DONE" && $action_to == "PENDING") {
                            $status = $action_to;
                            $vac_image = $reschedule_date = $vac_done_date = $vac_image_2 = $vac_image_3 = $remark = $vac_done_date = null;
                            $reschedule_by = 0;
                            $vac_ids = Custom::get_related_vaccination_ids($thin_app_id, $vac_data, $child_id);
                            foreach ($vac_ids as $vac_key => $id) {
                                $sql = "update child_vaccinations set modify_by_user_id =?, reschedule_date =?, reschedule_by =?,  vac_done_date =?, remark =?,  vac_image =? , vac_image_2 =?, vac_image_3 =?, status =?, modified=? where id = ?";
                                $stmt = $connection->prepare($sql);
                                $stmt->bind_param("sssssssssss", $user_id, $reschedule_date, $reschedule_by, $vac_done_date, $remark, $vac_image, $vac_image_2, $vac_image_3, $status, $created, $id);
                                if ($stmt->execute() && !empty($stmt->affected_rows)) {
                                    $vaccination_list_array[] = $vac_data['vac_name'];
                                    $result_array[] = true;
                                } else {
                                    $result_array[] = false;
                                }
                            }

                        } else if (($action_from == "DONE" || $action_from == "PENDING") && $action_to == "CANCELED") {
                            $status = "CANCELED";
                            $vac_image = $reschedule_date = $vac_done_date = $vac_image_2 = $vac_image_3 = $vac_done_date = null;

                            $reschedule_by = 0;
                            $sql = "update child_vaccinations set modify_by_user_id =?, reschedule_date =?, reschedule_by =?,  vac_done_date =?, remark =?,  vac_image =? , vac_image_2 =?, vac_image_3 =?, status =?, modified=? where id = ?";
                            $stmt = $connection->prepare($sql);
                            $stmt->bind_param('sssssssssss', $user_id, $reschedule_date, $reschedule_by, $vac_done_date, $remark, $vac_image, $vac_image_2, $vac_image_3, $status, $created, $vac_id);
                            if ($stmt->execute() && !empty($stmt->affected_rows)) {
                                $vaccination_list_array[] = $vac_data['vac_name'];
                                $result_array[] = true;
                            } else {
                                $result_array[] = false;
                            }
                        } else if ($action_from == "CANCELED" && $action_to == "PENDING") {
                            $status = "PENDING";
                            $vac_image = $reschedule_date = $vac_done_date = $vac_image_2 = $vac_image_3 = $vac_done_date = null;
                            $reschedule_by = 0;
                            $sql = "update child_vaccinations set modify_by_user_id=?, reschedule_date =?, reschedule_by =?,  vac_done_date =?, remark =?,  vac_image =? , vac_image_2 =?, vac_image_3 =?, status =?, modified=? where id = ?";
                            $stmt = $connection->prepare($sql);
                            $stmt->bind_param('sssssssssss', $user_id, $reschedule_date, $reschedule_by, $vac_done_date, $remark, $vac_image, $vac_image_2, $vac_image_3, $status, $created, $vac_id);
                            if ($stmt->execute() && !empty($stmt->affected_rows)) {
                                $vaccination_list_array[] = $vac_data['vac_name'];
                                $result_array[] = true;
                            } else {
                                $result_array[] = false;
                            }

                        } else {
                            $response['message'] = "Invalid param";
                            $result_array[] = false;
                        }
                    }

                    if (!in_array(false, $result_array)) {
                        $connection->commit();
                        $response['status'] = 1;
                        $response['message'] = "Vaccination status update successfully";

                    } else {
                        $connection->rollback();
                        $response['status'] = 0;
                        $response['message'] = "Sorry status could not update";
                    }
                } else {
                    $response['status'] = 0;
                    $response['message'] = "Please select vaccination";
                }
            }
            Custom::sendResponse($response);
            exit();
        }

    }

    public static function get_child_vaccination_detail($data=null)
    {

        $return = true;
        if($data==null){
            $return = false;
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);
        }

        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $child_id = isset($data['child_id']) ? $data['child_id'] : "";
            $vac_id = isset($data['vac_id']) ? $data['vac_id'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($child_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid child id';
            } else if (empty($vac_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid vaccination';
            } else {
                $connection = ConnectionUtil::getConnection();
                $query = "select IFNULL(df.allow_add_file,'NO') as allow_add_file, IFNULL(df.id,0) as folder_id, df.folder_name, cv.remark as vaccination_remark, IFNULL(DATE_FORMAT(cv.vac_done_date,'%d-%m-%Y'),'N/A') as vac_done_date, DATE_FORMAT(c.dob,'%d-%m-%Y') as dob, c.gender, cv.vac_image,cv.vac_image_2,cv.vac_image_3, c.image, c.child_name, amv.vac_name,amv.full_name, if(amv.category_type='CHILD VACCINATION',IF(amv.vac_dose_name >0 , CONCAT_WS(' ','Dose',amv.vac_dose_name),amv.vac_dose_name),IF(cv.adolescent_dose_name >0 , CONCAT_WS(' ','Dose',cv.adolescent_dose_name),cv.adolescent_dose_name)) as dose , convert(cast(convert(amv.remark using  latin1) as binary) using utf8) as remark, DATE_FORMAT(cv.vac_date,'%d-%m-%Y') as due_date, DATE_FORMAT(cv.reschedule_date,'%d-%m-%Y') as reschedule_date, amv.vac_type, cv.status  from childrens as c join child_vaccinations as cv on c.id = cv.children_id join app_master_vaccinations as amv on cv.app_master_vaccination_id = amv.id left join drive_folders as df on df.child_number = c.child_number and c.thinapp_id = df.thinapp_id where  c.id = $child_id and cv.id = $vac_id limit 1";
                $connection = ConnectionUtil::getConnection();
                $service_message_list = $connection->query($query);
                if ($service_message_list->num_rows) {
                    $vac_data = mysqli_fetch_assoc($service_message_list);
                    $response['status'] = 1;
                    $response['message'] = "Vaccination found";
                    $response['data']['detail'] = $vac_data;
                    $gender = ($vac_data['gender'] == 'MALE') ? "Boy" : "Girl";
                    $response['data']['detail']['title'] = Custom::dob_elapsed_string($vac_data['dob']) . ", " . $gender;
                    $full_name = $vac_data['full_name'];
                    $vac_name = $vac_data['vac_name'];
                    $response['data']['done_vaccination'] = Custom::get_last_done_vaccination($connection, $thin_app_id, $child_id, $full_name, $vac_name);
                } else {
                    $response['status'] = 0;
                    $response['message'] = "Sorry vaccination could not found";
                }

            }
            if($return==true){
                return json_encode($response);
            }else{
                Custom::sendResponse($response);
            }

        }
        exit();

    }


    public static function get_upcoming_vaccination_list()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = $menu_list = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $role_id = isset($data['role_id']) ? $data['role_id'] : "";
            $list_type = isset($data['list_type']) ? strtoupper($data['list_type']) : "";
            $search = isset($data['search']) ? strtoupper($data['search']) : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter mobile';
            } else if (empty($role_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter role id';
            } else if (empty($list_type) || ($list_type != 'TODAY' && $list_type != 'WEEK' && $list_type != 'MONTH' && strtoupper($list_type) != "7 DAYS" && strtoupper($list_type) != "30 DAYS")) {
                $response['status'] = 0;
                $response['message'] = 'Invalid type';
            } else {


                $connection = ConnectionUtil::getConnection();
                $conditions = $order_by = $search_txt = $user_conditions = "";


                if (!empty($search)) {

                    $search_date = date('Y-m-d', strtotime($search));
                    if ($search_date != '1970-01-01') {

                        $search_txt = " AND  DATE(IFNULL(cv.reschedule_date, cv.vac_date)) = '$search_date' ";
                    } else {
                        $search_txt = "  and ( amv.vac_name LIKE '%$search%' OR  c.child_name LIKE '%$search%' OR  c.child_number LIKE '%$search%' OR  cv.status = '$search' ) ";

                    }

                }
                if ($role_id != 5) {
                    $user_conditions = " and ( c.mobile = '$mobile' OR c.parents_mobile = '$mobile') ";
                }
                if (empty($search)) {
                    if ($list_type == "TODAY") {
                        $conditions = " and DATE(IFNULL(cv.reschedule_date, cv.vac_date)) = DATE(NOW()) ";
                    } else if ($list_type == "WEEK" || strtoupper($list_type) == "7 DAYS") {
                        $conditions = " AND (DATE(IFNULL(cv.reschedule_date, cv.vac_date)) >= DATE(NOW()) AND DATE(IFNULL(cv.reschedule_date, cv.vac_date)) <= DATE_ADD(NOW(), INTERVAL 1 WEEK)) ";
                        $order_by = " order by DATE(IFNULL(cv.reschedule_date, cv.vac_date)) asc ";
                    } else if ($list_type == "MONTH" || strtoupper($list_type) == "30 DAYS") {
                        $conditions = " AND (DATE(IFNULL(cv.reschedule_date, cv.vac_date)) >= DATE(NOW()) AND DATE(IFNULL(cv.reschedule_date, cv.vac_date)) <= DATE_ADD(NOW(), INTERVAL 1 MONTH)) ";
                        $order_by = " order by DATE(IFNULL(cv.reschedule_date, cv.vac_date)) asc ";
                    }
                }


                $query = "select  IFNULL(df.allow_add_file,'NO') as allow_add_file, IFNULL(df.id,0) as folder_id, df.folder_name, IF(cv.category_type='CHILD VACCINATION','CHILD_VACCINATION','SPECIAL_VACCINATION') AS category_type, c.mobile, c.gender, c.dob, cv.id as vac_id, c.id as child_id, if(amv.category_type='CHILD VACCINATION',IF(amv.vac_dose_name >0 , amv.vac_dose_name,amv.vac_dose_name),IF(cv.adolescent_dose_name >0 , cv.adolescent_dose_name,cv.adolescent_dose_name)) as vac_dose, amv.vac_name, c.child_name, c.image, DATE_FORMAT(IFNULL(cv.reschedule_date, cv.vac_date),'%d-%m-%Y') AS vac_date, cv.status from child_vaccinations as cv join childrens as c on cv.children_id = c.id and c.status ='ACTIVE' join app_master_vaccinations as amv on cv.app_master_vaccination_id = amv.id left join drive_folders as df on df.child_number = c.child_number and c.thinapp_id = df.thinapp_id where amv.status ='ACTIVE' and cv.thinapp_id = $thin_app_id and cv.status ='PENDING' and IF(c.gender = 'MALE',amv.visible_for_male, amv.visible_for_female) ='YES' $search_txt $conditions $user_conditions $order_by";

                $subscriber = $connection->query($query);
                if ($subscriber->num_rows) {
                    $menu_list = mysqli_fetch_all($subscriber, MYSQLI_ASSOC);
                    $response['status'] = 1;
                    $response['message'] = "Vaccination list found";
                    $response['data']['vac_list'] = $menu_list;
                    $response['data']['total_child'] = count($menu_list);

                } else {
                    $response['status'] = 0;
                    $response['message'] = "No vaccination list found";
                }

            }
            Custom::sendResponse($response);
        }

        exit();

    }


    public static function add_app_to_circle()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();

            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $add_with_id = isset($data['add_with_id']) ? $data['add_with_id'] : "";
            $username = isset($data['username']) ? $data['username'] : "";
            $add_with_mobile = isset($data['add_with_mobile']) ? $data['add_with_mobile'] : "";
            $add_with_token = isset($data['add_with_token']) ? $data['add_with_token'] : "";
            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($add_with_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app id ';
            } else if (empty($username)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid username ';
            } else if (empty($add_with_mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app mobile ';
            } else if (empty($add_with_token)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app token ';
            } else {


                $add_to_circle = "";
                $connection = ConnectionUtil::getConnection();
                $circle_data = Custom::get_circle_data($thin_app_id, $add_with_id);
                if (!$circle_data) {

                    $sql = "INSERT INTO app_circles (thinapp_id, with_app_id) VALUES (?, ?)";
                    $stmt = $connection->prepare($sql);
                    $stmt->bind_param('ss', $thin_app_id, $add_with_id);
                    if ($stmt->execute()) {
                        $add_to_circle = true;
                        $response['status'] = 1;
                        $response['message'] = "Circle add successfully";
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Sorry unable to add into circle";
                    }
                } else {
                    $sql = "DELETE from app_circles where id =?";
                    $stmt = $connection->prepare($sql);
                    $stmt->bind_param('s', $circle_data['id']);
                    if ($stmt->execute()) {
                        $add_to_circle = false;
                        $response['status'] = 1;
                        $response['message'] = "Circle remove successfully";
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Sorry unable to remove into circle";
                    }
                }
            }
            Custom::sendResponse($response);
            Custom::send_process_to_background();
            if (!empty($add_with_mobile) && ($add_to_circle === false || $add_to_circle === true)) {
                if ($add_to_circle === true) {
                    $message = "Admin " . $username . " added you in doctor circle. To see doctor circle download App ";
                } else {
                    $message = "Admin " . $username . " remove you from doctor circle. To see doctor circle download App ";
                }
                Custom::send_single_sms($add_with_mobile, ($message), $thin_app_id);
            }

        }

        exit();

    }

    public static function send_vaccination_alert()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $child_id = isset($data['child_id']) ? $data['child_id'] : "";
            $vac_id = isset($data['vac_id']) ? $data['vac_id'] : "";
            $day_type = isset($data['day_type']) ? $data['day_type'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($child_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid child id';
            } else if (empty($vac_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid vaccination';
            } else {
                $response['status'] = 1;
                $response['message'] = "Vaccination notification sent";
                $send_notification = true;
            }

            Custom::sendResponse($response);
            Custom::send_process_to_background();
            if ($send_notification) {
                $child_vac_data = Custom::get_child_with_vaccination($child_id, $vac_id);
                $message = $rec_user_id = $rec_mobile = "";
                if (!empty($child_vac_data)) {
                    $date = !empty($child_vac_data['reschedule_date']) ? $child_vac_data['reschedule_date'] : $child_vac_data['vac_date'];

                    $label_date = date('Y-m-d', strtotime($date));
                    $date = date('d/m/Y', strtotime($date));
                    $vaccination = $child_vac_data['vac_name'] . " " . $child_vac_data['vac_dose_name'];
                    $label = Custom::get_date_label($label_date);


                    $message = "Vaccine " . $vaccination . " for patient " . trim($child_vac_data['child_name']) . " is due on $label " . $date;
                    $rec_user_id = $child_vac_data['patient_id'];
                    $pat_mobile = $child_vac_data['mobile'];
                    $alt_mobile = $child_vac_data['alt_mobile'];
                    $option = array(
                        'thinapp_id' => $thin_app_id,
                        'channel_id' => 0,
                        'role' => "USER",
                        'flag' => 'VACCINATION',
                        'title' => mb_strimwidth($child_vac_data['vac_name'], 0, 100, '...'),
                        'module_title' => mb_strimwidth($child_vac_data['vac_name'], 0, 100, '...'),
                        'message' => mb_strimwidth($message, 0, 250, '...'),
                        'description' => "",
                        'chat_reference' => '',
                        'module_type' => 'VACCINATION',
                        'module_type_id' => $vac_id,
                        'child_id' => $child_id,
                        'firebase_reference' => "",
                        'day_type' => $day_type

                    );
                    $token_array = array();
                    if (!empty($child_vac_data['firebase_token'])) {
                        $token_array[] = $child_vac_data['firebase_token'];
                    }
                    if (!empty($child_vac_data['alt_firebase_token'])) {
                        $token_array[] = $child_vac_data['alt_firebase_token'];
                    }
                    if (!empty($token_array)) {
                        Custom::send_notification_via_token($option, $token_array, $thin_app_id);
                    }

                    if (!empty($pat_mobile)) {
                        Custom::send_single_sms($pat_mobile, ($message), $thin_app_id);
                    }
                    if (!empty($alt_mobile)) {
                        Custom::send_single_sms($alt_mobile, ($message), $thin_app_id);
                    }

                }
            }

        }
        exit();

    }


    /**************DRIVE END***************/


    public static function update_uninstall_status()
    {
        $response['status'] = 1;
        $response['message'] = "App uninstall  successfully";
        Custom::sendResponse($response);
        Custom::send_process_to_background();
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else {
                $connection = ConnectionUtil::getConnection();
                $created = Custom::created();
                $status = "UNINSTALLED";
                $sql = "UPDATE  users set app_installed_status = ?,  modified = ? where id = ?";
                $stmt_sub = $connection->prepare($sql);
                $stmt_sub->bind_param('sss', $status, $created, $user_id);
                if (1) {
                    $response['status'] = 1;
                    $response['message'] = "App uninstall  successfully";
                } else {
                    $response['status'] = 0;
                    $response['message'] = "Unable to  uninstall";
                }
            }
            echo json_encode($response);
        }
        exit();
    }

    public static function get_department_categories()
    {
        $response = array();
        if (isset($_POST['department_name'])) {
            $departmentName = $_POST['department_name'];
            $sql = "SELECT * FROM `department_categories` WHERE `department_name` = '" . $departmentName . "' ORDER BY `category_name` DESC";
            $connection = ConnectionUtil::getConnection();
            $dataRS = $connection->query($sql);
            $dataToSend = mysqli_fetch_all($dataRS, MYSQLI_ASSOC);
            $response['status'] = 1;
            $response['data'] = $dataToSend;
        } else {
            $response['status'] = 0;
            $response['message'] = "No record found";
        }
        echo json_encode($response);
        exit();
    }


    public static function get_file_categories()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $drive_folder_id = isset($data['drive_folder_id']) ? $data['drive_folder_id'] : "";
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : 0;
            $role_id = isset($data['role_id']) ? $data['role_id'] : 0;

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($drive_folder_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid folder id';
            } else {

                $category_ids=array();
                $condition = $category_ids = $counter_condition = "";

                if (empty($doctor_id) || $role_id != 5) {
                    $category_ids[] ="10";
                    $category_ids[] ="7";
                    $show_ipd = Custom::check_user_permission($thin_app_id,'SHOW_IPD_CATEGORY_TO_PATIENT');
                    if($show_ipd == "NO" ||$show_ipd===false){
                        $category_ids[] ="8";
                    }
                }


                if(!empty($category_ids)){
                    $category_ids = implode(',',$category_ids);
                    $condition = " and fcm.id NOT IN($category_ids) ";
                    $counter_condition = " and df.file_category_master_id NOT IN($category_ids) ";
                }


                if($role_id == 1 && !empty($doctor_id)){
                    $folder_data= Custom::get_folder_by_id($drive_folder_id);
                    $folder_patient_user_id = 0;
                    if(!empty($folder_data['appointment_customer_id'])){
                        $folder_patient_user_id = Custom::getPatientUserId($thin_app_id,$folder_data['appointment_customer_id'],'CUSTOMER');
                    }else if(!empty($folder_data['children_id'])){
                        $folder_patient_user_id = Custom::getPatientUserId($thin_app_id,$folder_data['children_id'],'CHILDREN');
                    }
                    if($folder_patient_user_id > 0 && $folder_patient_user_id!=$user_id){
                        $counter_condition .=" and ( df.doctor_id = $doctor_id OR df.share_with_doctor_id = $doctor_id ) ";
                    }
                }


                $query = "select fcm.id,fcm.category_name, (SELECT IFNULL(IFNULL(ac.first_name,c.child_name),folder_name) FROM drive_folders as df left join appointment_customers as ac on ac.id = df.appointment_customer_id left join childrens as c on c.id = df.children_id WHERE df.id = $drive_folder_id limit 1) as folder_name, IF(fcm.id =1,(select count(id) from drive_files as df where df.drive_folder_id = $drive_folder_id and  thinapp_id =$thin_app_id and df.status ='ACTIVE' and df.listing_type='OTHER' $counter_condition),(select count(id) from drive_files as df where df.drive_folder_id = $drive_folder_id and fcm.id = df.file_category_master_id and thinapp_id = $thin_app_id and df.status ='ACTIVE' and df.listing_type='OTHER' $counter_condition) ) as total_files , IF(fcm.id =1,(select count(id) from drive_files as df where df.drive_folder_id = $drive_folder_id and  thinapp_id =$thin_app_id and df.status ='ACTIVE' and df.listing_type='MEMO' $counter_condition),(select count(id) from drive_files as df where df.drive_folder_id = $drive_folder_id and fcm.id = df.file_category_master_id and thinapp_id = $thin_app_id and df.status ='ACTIVE' and df.listing_type='MEMO' $counter_condition) ) as total_memos from file_category_masters as fcm where fcm.status ='ACTIVE' $condition order by fcm.id desc";
                $connection = ConnectionUtil::getConnection();
                $row_list = $connection->query($query);
                if ($row_list->num_rows) {
                    $list = mysqli_fetch_all($row_list, MYSQLI_ASSOC);



                    $has_report = "NO";
                    $fileData = array();
                    $checkThinapp = "SELECT `custom_folder_url` FROM `thinapps` WHERE `id` = '".$thin_app_id."' AND `show_custom_folder` = 'Y' LIMIT 1";
                    $checkThinappSql = $connection->query($checkThinapp);
                    if ($checkThinappSql->num_rows) {
                        $has_report = 'YES';
                        $checkThinappData = mysqli_fetch_assoc($checkThinappSql);


                        $mobileSql = "SELECT IFNULL(IFNULL(appointment_customers.mobile,childrens.mobile),users.mobile)  AS `mobile` FROM `drive_folders` LEFT JOIN `appointment_customers` ON (`drive_folders`.`appointment_customer_id` = `appointment_customers`.`id`) LEFT JOIN `childrens` ON (`drive_folders`.`children_id` = `childrens`.`id`) LEFT JOIN `users` ON (`drive_folders`.`user_id` = `users`.`id`) WHERE `drive_folders`.`id` = '".$drive_folder_id."' LIMIT 1";


                        $mobileSql = $connection->query($mobileSql);
                        $mobileData = mysqli_fetch_assoc($mobileSql);

                        $url = $checkThinappData['custom_folder_url'].'/'.substr($mobileData['mobile'], -10).'/';
                        $html = file_get_contents($url.'?C=M;O=D&a='.mt_rand());
                        $count = preg_match_all('/<a href="([^"]+)">[^<]*<\/a>/i', $html, $files);
                        $fileCount = 0;
                        $fileData = array();
                        for ($i = 0; $i < $count; ++$i) {
                            $file = $files[1][$i];
                            if(preg_match('/^([-\.\w]+)$/', $file) > 0)
                            {
                                $fileData[] = array(
                                    "file_url" => $url.$file,
                                    "file_name" => $file,
                                    "file_type" => Custom::getFileType($file)
                                    );
                                $fileCount++;
                            }
                        }


                        $arr = array(
                            "id"=> "-1",
                            "category_name"=> "REPORTS",
                            "folder_name"=> $list[key($list)]['folder_name'],
                            "total_files"=> strval($fileCount),
                            "total_memos"=> "0"
                        );
                        $list[] = $arr;

                    }


                    $response['status'] = 1;
                    $response['message'] = "Category list found";
                    $response['data']['cat_list'] = $list;
                    $response['data']['folder_name'] = $list[key($list)]['folder_name'];
                    $response['data']['file_data'] = $fileData;
                    $response['data']['has_report'] = $has_report;
                } else {
                    $response['status'] = 0;
                    $response['message'] = "No category list available";
                }
            }
            Custom::sendResponse($response);
        }
        exit();
    }


    public static function delete_appointment_department()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $department_id = isset($data['department_id']) ? $data['department_id'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($department_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid department id';
            } else {

                $department_data = Custom::get_department_by_id($department_id, $thin_app_id);
                if (!empty($department_data)) {
                    $connection = ConnectionUtil::getConnection();
                    $sql = "update appointment_categories  set status =?, modified =? where id = ? and thinapp_id=?";
                    $status = "INACTIVE";
                    $modified = Custom::created();
                    $stmt_child = $connection->prepare($sql);
                    $stmt_child->bind_param('ssss', $status, $modified, $department_id, $thin_app_id);
                    if ($stmt_child->execute()) {
                        $connection->commit();
                        $response['status'] = 1;
                        $response['message'] = "Department deleted successfully";
                    } else {
                        $connection->rollback();
                        $response['status'] = 0;
                        $response['message'] = "Sorry department could not delete";
                    }
                } else {
                    $response['status'] = 0;
                    $response['message'] = "Sorry invalid department";
                }


            }
            Custom::sendResponse($response);
        }
        exit();

    }

    public static function delete_appointment_doctor($data=null)
    {
        $return =true;
        if(empty($data)){
            $return =false;
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);
        }

        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($doctor_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid doctor id';
            } else {

                $doctor_data = Custom::get_doctor_by_id($doctor_id, $thin_app_id);
                if (!empty($doctor_data)) {
                    $connection = ConnectionUtil::getConnection();
                    $sql = "update appointment_staffs  set status =?, modified =? where id = ? and thinapp_id=?";
                    $status = "INACTIVE";
                    $modified = Custom::created();
                    $stmt_child = $connection->prepare($sql);
                    $stmt_child->bind_param('ssss', $status, $modified, $doctor_id, $thin_app_id);
                    if ($stmt_child->execute()) {
                        $connection->commit();
                        $response['status'] = 1;
                        $response['message'] = "Doctor deleted successfully";
                        Custom::delete_doctor_cache($doctor_id);

                    } else {
                        $connection->rollback();
                        $response['status'] = 0;
                        $response['message'] = "Sorry doctor could not delete";
                    }
                } else {
                    $response['status'] = 0;
                    $response['message'] = "Sorry invalid doctor";
                }


            }
            if($return===true){
                return json_encode($response);
            }else{
                Custom::sendResponse($response);
            }

        }
        exit();

    }

    public static function delete_appointment_address($data=null)
    {
        $return =true;
        if(empty($data)){
            $return =false;
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);
        }
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $address_id = isset($data['address_id']) ? $data['address_id'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($address_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid address id';
            } else {

                $address_data = Custom::get_address_by_id($address_id, $thin_app_id);
                if (!empty($address_data)) {
                    $connection = ConnectionUtil::getConnection();
                    $sql = "update appointment_addresses  set status =?, modified =? where id = ? and thinapp_id=?";
                    $status = "INACTIVE";
                    $modified = Custom::created();
                    $stmt_child = $connection->prepare($sql);
                    $stmt_child->bind_param('ssss', $status, $modified, $address_id, $thin_app_id);
                    if ($stmt_child->execute()) {
                        $connection->commit();
                        $response['status'] = 1;
                        $response['message'] = "Address deleted successfully";
                    } else {
                        $connection->rollback();
                        $response['status'] = 0;
                        $response['message'] = "Sorry addess could not delete";
                    }
                } else {
                    $response['status'] = 0;
                    $response['message'] = "Sorry invalid address";
                }


            }
            if($return===true){
                return json_encode($response);
            }else{
                Custom::sendResponse($response);
            }
        }
        exit();

    }


    public static function add_message_action()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $message_id = isset($data['message_id']) ? $data['message_id'] : "";
            $role_id = isset($data['role_id']) ? $data['role_id'] : "";
            $like = isset($data['like']) ? $data['like'] : "";
            $list_message_type = isset($data['list_message_type']) ? $data['list_message_type'] : "POST";
            $like_type = isset($data['like_type']) ? $data['like_type'] : "";
            $action_type = isset($data['action_type']) ? $data['action_type'] : "";
            $share_fb = isset($data['share_fb']) ? !empty($data['share_fb']) ? 'Y' : 'N' : 'N';
            $share_twitter = isset($data['share_twitter']) ? !empty($data['share_twitter']) ? 'Y' : 'N' : 'N';
            $share_gplus = isset($data['share_gplus']) ? !empty($data['share_gplus']) ? 'Y' : 'N' : 'N';
            $share_whatsaap = isset($data['share_whatsaap']) ? !empty($data['share_whatsaap']) ? 'Y' : 'N' : 'N';
            $share_others = isset($data['share_others']) ? !empty($data['share_others']) ? 'Y' : 'N' : 'N';

            $send_notification = false;
            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($message_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid message id';
            } else if ($action_type != "LIKE" && $action_type != "SHARE" & $action_type != "VIEW") {
                $response['status'] = 0;
                $response['message'] = 'Invalid action type';
            } else {
                $connection = ConnectionUtil::getConnection();

                $action_value = $action_type . "-" . $user_id;
                if (!$action_array = WebservicesFunction::readJson("post_action_$message_id", "doctor_blogs", false)) {
                    $query = "select (CONCAT_WS('-',action_type, action_by)) as value from  message_actions where message_id = $message_id";
                    $data_list = $connection->query($query);
                    if ($data_list->num_rows) {
                        $action_array = mysqli_fetch_all($data_list, MYSQLI_ASSOC);
                        $action_array = implode(',', array_column($action_array, 'value'));
                        if (!empty($action_array)) {
                            WebservicesFunction::createJson("post_action_$message_id", $action_array, "CREATE", "doctor_blogs", true);
                        } else {
                            $action_array = array();
                        }
                    }

                }

                if (!empty($action_array)) {
                    $action_array = explode(",", $action_array);
                }

                if (!in_array($action_value, $action_array) && $action_type == "LIKE") {
                    $connection->autocommit(false);
                    $sql = "INSERT INTO message_actions ( action_by, action_type, message_id, like_type, list_message_type ) VALUES (?, ?, ?, ?, ?)";
                    $stmt = $connection->prepare($sql);
                    $stmt->bind_param('sssss', $user_id, $action_type, $message_id, $like_type, $list_message_type);
                    if ($stmt->execute()) {
                        $sql = "update message_statics  set total_likes = total_likes + 1 where message_id = ? and list_message_type = ?";
                        $stmt_child = $connection->prepare($sql);
                        $stmt_child->bind_param('ss', $message_id, $list_message_type);


                        if ($stmt_child->execute()) {
                            $connection->commit();
                            $response['status'] = 1;
                            $response['message'] = "Message liked successfully";
                            $response['data'] = Custom::get_total_static_likes($message_id);
                            WebservicesFunction::createJson("post_action_$message_id", $action_value, "CREATE", "doctor_blogs", true);
                            WebservicesFunction::addUserStaticToJson('', $user_id, $thin_app_id, $mobile, "DOCTORS BLOG", 'LIKE', 'add_message_action');

                            $send_notification = true;
                        } else {
                            $response['status'] = 0;
                            $response['message'] = "Sorry message could not liked";
                        }
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Sorry message could not liked";
                    }


                } else if ($action_type == "SHARE") {

                    /* this block add message share post row*/
                    $connection->autocommit(false);
                    if ($share_fb == 'Y' || $share_twitter == 'Y' || $share_gplus == 'Y' || $share_whatsaap == 'Y' || $share_others == 'Y') {

                        $sql = "INSERT INTO message_actions ( action_type, share_fb, share_twitter, share_gplus, share_whatsaap, share_others,  action_by, message_id, like_type, list_message_type ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                        $stmt = $connection->prepare($sql);
                        $stmt->bind_param('ssssssssss', $action_type, $share_fb, $share_twitter, $share_gplus, $share_whatsaap, $share_others, $user_id, $message_id, $like_type, $list_message_type);
                        if ($stmt->execute()) {
                            $share_fb = ($share_fb == 'Y') ? 1 : 0;
                            $share_twitter = ($share_twitter == 'Y') ? 1 : 0;
                            $share_gplus = ($share_gplus == 'Y') ? 1 : 0;
                            $share_whatsaap = ($share_whatsaap == 'Y') ? 1 : 0;
                            $share_others = ($share_others == 'Y') ? 1 : 0;
                            $sql = "update message_statics  set total_fb_share = total_fb_share + ?, total_twitter_share = total_twitter_share + ?, total_gplus_share = total_gplus_share + ?, total_whatsapp_share = total_whatsapp_share + ?, total_other_share = total_other_share + ?  where message_id = ? and list_message_type = ?";
                            $stmt_child = $connection->prepare($sql);
                            $stmt_child->bind_param('sssssss', $share_fb, $share_twitter, $share_gplus, $share_whatsaap, $share_others, $message_id, $list_message_type);
                            if ($stmt_child->execute()) {
                                $connection->commit();
                                $response['status'] = 1;
                                $response['message'] = "Message " . strtolower($action_type) . "d successfully";
                                $response['data'] = Custom::get_total_static_likes($message_id);
                                WebservicesFunction::createJson("post_action_$message_id", $action_value, "CREATE", "doctor_blogs", true);
                                WebservicesFunction::addUserStaticToJson('', $user_id, $thin_app_id, $mobile, "DOCTORS BLOG", 'SHARE', 'add_message_action');

                                $send_notification = true;
                            } else {
                                $response['status'] = 0;
                                $response['message'] = "Sorry message could not shared";
                            }
                        } else {
                            $response['status'] = 0;
                            $response['message'] = "Sorry message could not shared";
                        }

                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Sorry invalid share type";
                    }
                } else if ($action_type == "VIEW") {

                    if ($role_id == 5 || $role_id == 1) {
                        /* this block add message share post row*/
                        $connection->autocommit(false);
                        $sql = "INSERT INTO message_actions ( action_by, action_type, message_id, like_type, list_message_type ) VALUES (?, ?, ?, ?, ?)";
                        $stmt = $connection->prepare($sql);
                        $stmt->bind_param('sssss', $user_id, $action_type, $message_id, $like_type, $list_message_type);
                        if ($stmt->execute()) {
                            $sql = "update message_statics  set total_views = total_views + 1 where message_id = ? and list_message_type = ?";
                            $stmt_child = $connection->prepare($sql);
                            $stmt_child->bind_param('ss', $message_id, $list_message_type);
                            if ($stmt_child->execute()) {
                                $connection->commit();
                                $response['status'] = 1;
                                $response['message'] = "Message view successfully";
                                $response['data'] = Custom::get_total_static_likes($message_id);
                                WebservicesFunction::createJson("post_action_$message_id", $action_value, "CREATE", "doctor_blogs", true);
                                WebservicesFunction::addUserStaticToJson('', $user_id, $thin_app_id, $mobile, "DOCTORS BLOG", 'VIEW', 'add_message_action');

                                $send_notification = true;
                            } else {
                                $response['status'] = 0;
                                $response['message'] = "Sorry message could not shared";
                            }
                        } else {
                            $response['status'] = 0;
                            $response['message'] = "Sorry message could not shared";
                        }
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "You can not view your post.";
                    }

                } else {
                    $response['status'] = 0;
                    $response['message'] = "You have already viewed message";
                }
            }
            Custom::sendResponse($response);
            if ($send_notification === true) {

                if ($role_id == 1 && !empty($like)) {

                    $message_data = Custom::get_message_by_id($message_id);
                    $user_data = Custom::get_user_by_id($user_id);
                    $message_file_url = "";
                    if (!empty($message_data) && !empty($user_data)) {

                        if ($message_data['message_type'] == "TEXT") {
                            $message = $user_data['username'] . ' liked your post "' . mb_strimwidth($message_data['message'], 0, 25, '...') . '"';
                        } else {

                            if ($message_data['message_type'] == "IMAGE") {
                                $message = $user_data['username'] . " liked your post";
                                $message_file_url = $message_data['message_file_url'];
                            } else {
                                $message = $user_data['username'] . ' liked your post "' . $message_data['original_filename'] . '"';
                            }
                        }
                        /* send notification to channel subscriber*/
                        $sendArray = array(
                            'channel_id' => $message_data['channel_id'],
                            'thinapp_id' => $thin_app_id,
                            'flag' => 'NEWPOST',
                            'title' => 'New Message',
                            'message' => $message,
                            'description' => '',
                            'chat_reference' => '',
                            'type' => $message_data['message_type'],
                            'file_path_url' => $message_file_url,
                            'module_type' => 'MESSAGE',
                            'module_type_id' => $message_id,
                            'firebase_reference' => ""
                        );
                        if (!empty($message_data['firebase_token'])) {
                            Custom::send_notification_via_token($sendArray, array($message_data['firebase_token']), $thin_app_id);
                        } else {
                            Custom::send_notification_by_user_id($sendArray, array($message_data['owner_user_id']), $thin_app_id);
                        }

                    }
                }


            }

        }
        exit();

    }


    public static function get_subscriber_list_for_dropdown()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $main_app_category = isset($data['main_app_category']) ? $data['main_app_category'] : "";
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : 0;
            $user_role = isset($data['user_role']) ? $data['user_role'] : "";
            $search = isset($data['search']) ? $data['search'] : "";
            $offset = isset($data['offset']) ? $data['offset'] : -1;

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else {
                $connection = ConnectionUtil::getConnection();
                $limit_condition = "";

                if (!empty($search)) {
                    $search = " having( username like'%$search%' OR mobile like'%$search%' ) ";
                }
                if ($offset >= 0) {
                    $limit = PAGINATION_LIMIT;
                    $offset = $offset * $limit;
                    $limit_condition = "LIMIT $offset, $limit";
                }

                if ($main_app_category == "HOSPITAL" && !empty($user_role) && !empty($doctor_id)) {
                    $condition = "";
                    if ($user_role != "ADMIN") {
                        $condition = " and acss.appointment_staff_id = $doctor_id";
                    }
                    $query = "select ac.first_name as username,ac.mobile from appointment_customer_staff_services as acss join appointment_customers as ac on ac.id = acss.appointment_customer_id where ac.status ='ACTIVE' and ac.thinapp_id = $thin_app_id $condition group by ac.id $search order by username asc $limit_condition";

                } else {
                    $query = "SELECT u.username,u.mobile FROM subscribers as sub right join channels as ch on sub.channel_id = ch.id and channel_status ='DEFAULT' right join users as u on u.mobile=sub.mobile and sub.app_id = u.thinapp_id and  u.role_id = 1 WHERE ch.status = 'Y' AND sub.app_id =$thin_app_id AND sub.status ='SUBSCRIBED' $search order by u.username asc $limit_condition";

                }


                $subscriber = $connection->query($query);
                if ($subscriber->num_rows) {
                    $subscriber = mysqli_fetch_all($subscriber, MYSQLI_ASSOC);
                    $response['status'] = 1;
                    $response['message'] = "Address deleted successfully";
                    $response['data']['subscriber_list'] = $subscriber;
                } else {
                    $response['status'] = 0;
                    $response['message'] = "No subscriber list found";
                }
            }
            Custom::sendResponse($response);
        }
        exit();


    }


    public static function get_doctor_blogs_like_users_list()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $message_id = isset($data['message_id']) ? $data['message_id'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter mobile';
            } else if (empty($message_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter message id';
            } else {

                $query = "select u.username,u.mobile from message_actions as ma join users as u on u.id = ma.action_by where ma.like ='Y' and message_id = $message_id";
                $connection = ConnectionUtil::getConnection();
                $service_message_list = $connection->query($query);
                if ($service_message_list->num_rows) {
                    $data = mysqli_fetch_all($service_message_list, MYSQLI_ASSOC);
                    $response['status'] = 1;
                    $response['message'] = "Users list found";
                    $response['data']['user_list'] = $data;
                } else {
                    $response['status'] = 0;
                    $response['message'] = "No list found";
                }
            }
            Custom::sendResponse($response);
        }
        exit();

    }


    public static function get_message_user_action_list()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $message_id = isset($data['message_id']) ? $data['message_id'] : "";
            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter mobile';
            } else if (empty($message_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter message id';
            } else {

                $query = "select DISTINCT(u.mobile) as mobile, u.username, action_type from message_actions as ma join users as u on u.id = ma.action_by and u.role_id = 1 where ( ma.action_type ='LIKE' || ma.action_type ='SHARE' || ma.action_type ='VIEW' ) and ma.message_id = $message_id";
                $connection = ConnectionUtil::getConnection();
                $service_message_list = $connection->query($query);
                if ($service_message_list->num_rows) {
                    $data = mysqli_fetch_all($service_message_list, MYSQLI_ASSOC);
                    $final_array = array(
                        'like_list' => array(),
                        'share_list' => array(),
                        'view_list' => array()
                    );
                    foreach ($data as $key => $value) {
                        $action_type = $value['action_type'];
                        unset($value['action_type']);
                        if ($action_type == "LIKE") {
                            $final_array['like_list'][] = $value;
                        } else if ($action_type == "SHARE") {
                            $final_array['share_list'][] = $value;
                        } else {
                            $final_array['view_list'][] = $value;
                        }
                    }
                    $response['status'] = 1;
                    $response['message'] = "Action list found";
                    $response['data']['main_list'] = $final_array;
                } else {
                    $response['status'] = 0;
                    $response['message'] = "No list found";
                }
            }
            Custom::sendResponse($response);
        }
        exit();

    }


    /**********ADDED BY VISHWAJEET START***********/
    public static function medicine_reminder_add()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();

            $thinapp_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $medicine_name = isset($data['medicine_name']) ? $data['medicine_name'] : "";
            $start_date = isset($data['start_date']) ? $data['start_date'] : "";
            $duration = isset($data['duration']) ? $data['duration'] : "";
            $remind_at_morning = isset($data['remind_at_morning']) ? $data['remind_at_morning'] : "";
            $remind_at_afternoon = isset($data['remind_at_afternoon']) ? $data['remind_at_afternoon'] : "";
            $remind_at_night = isset($data['remind_at_night']) ? $data['remind_at_night'] : "";
            $remind_at_evening = isset($data['remind_at_evening']) ? $data['remind_at_evening'] : "";


            if (empty($thinapp_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile number';
            } else if (empty($medicine_name)) {
                $response['status'] = 0;
                $response['message'] = 'Midicine is empty';
            } else if (empty($start_date)) {
                $response['status'] = 0;
                $response['message'] = 'Start Date is empty';
            } else if (empty($duration)) {
                $response['status'] = 0;
                $response['message'] = 'Duration is empty';
            } else if (empty($remind_at_morning)) {
                $response['status'] = 0;
                $response['message'] = 'Remind at morning is empty';
            } else if (empty($remind_at_afternoon)) {
                $response['status'] = 0;
                $response['message'] = 'Remind at afternoon is empty';
            } else if (empty($remind_at_evening)) {
                $response['status'] = 0;
                $response['message'] = 'Remind at evening is empty';
            } else if (empty($remind_at_night)) {
                $response['status'] = 0;
                $response['message'] = 'Remind at night is empty';
            } else {
                $start_date = explode("-", $start_date);
                $start_date = $start_date[2] . '-' . $start_date[1] . '-' . $start_date[0];
                if ($duration != 'EVERYDAY') {
                    $durationArr = explode(' ', $duration);
                    $durationCal = ((int)$durationArr[0] - 1) . ' ' . $durationArr[1];
                    $end_date = date("Y-m-d", strtotime("+" . $durationCal, strtotime($start_date)));
                    $is_forever = 'NO';
                } else {
                    $end_date = '';
                    $is_forever = 'YES';
                }
                $created = $modified = Custom::created();

                $connection = ConnectionUtil::getConnection();
                $sql = "INSERT INTO medicine_reminder (user_id, thinapp_id, mobile, medicine_name, start_date, end_date, duration, is_forever, remind_at_morning, remind_at_afternoon, remind_at_evening, remind_at_night, created, modified) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                $stmt = $connection->prepare($sql);
                $stmt->bind_param('ssssssssssssss', $user_id, $thinapp_id, $mobile, $medicine_name, $start_date, $end_date, $duration, $is_forever, $remind_at_morning, $remind_at_afternoon, $remind_at_evening, $remind_at_night, $created, $modified);
                if ($stmt->execute()) {

                    $response['status'] = 1;
                    $response['message'] = "Medicine reminder added successfully!";
                    WebservicesFunction::addUserStaticToJson('', $user_id, $thinapp_id, $mobile, "MEDICINE REMINDER", "ADD", 'medicine_reminder_add');


                } else {
                    $response['status'] = 0;
                    $response['message'] = "Sorry unable to add medicine reminder!";
                }
            }
            Custom::sendResponse($response);
        }

        exit();

    }

    public static function medicine_reminder_list()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if (isset($data['app_key'])) {
            $app_key = $data['app_key'];
            $user_id = $data['user_id'];
            $thin_app_id = $data['thin_app_id'];
            $response = array();
            if ($user_id != '' && $app_key != '' && $thin_app_id != '') {
                $connection = ConnectionUtil::getConnection();
                $medicineReminderRS = $connection->query("SELECT `id` AS `medicine_reminder_id`,`medicine_name`,DATE_FORMAT(`start_date`, '%d-%m-%Y') AS `start_date`,DATE_FORMAT(`end_date`, '%d-%m-%Y') AS `end_date`,`duration`,`remind_at_morning`,`remind_at_afternoon`,`remind_at_evening`,`remind_at_night`,`is_forever`,`status` FROM `medicine_reminder` WHERE `user_id` = '" . $user_id . "' AND `status` != 'DELETE'");

                if ($medicineReminderRS->num_rows) {
                    $medicineReminderData = mysqli_fetch_all($medicineReminderRS, MYSQLI_ASSOC);
                    $response['status'] = 1;
                    $response['message'] = "Medicine reminder list found";

                    $dataToSend = array();
                    $dataToSend['morning'] = array();
                    $dataToSend['afternoon'] = array();
                    $dataToSend['evening'] = array();
                    $dataToSend['night'] = array();
                    foreach ($medicineReminderData AS $listData) {
                        if ($listData['remind_at_morning'] == 'YES') {
                            $dataToSend['morning'][] = $listData;
                        }
                        if ($listData['remind_at_afternoon'] == 'YES') {
                            $dataToSend['afternoon'][] = $listData;
                        }
                        if ($listData['remind_at_evening'] == 'YES') {
                            $dataToSend['evening'][] = $listData;
                        }
                        if ($listData['remind_at_night'] == 'YES') {
                            $dataToSend['night'][] = $listData;
                        }

                    }
                    $currentTime = strtotime(date('H:i:s'));
                    $morningTime = strtotime("12:00:00");
                    $afternoonTime = strtotime("16:00:00");
                    $eveningTime = strtotime("19:00:00");
                    $nightTime = strtotime("03:00:00");

                    if (($currentTime >= $nightTime) && ($currentTime <= $morningTime)) {
                        $current = "MORNING";
                    } else if (($currentTime >= $morningTime) && ($currentTime <= $afternoonTime)) {
                        $current = "AFTERNOON";
                    } else if (($currentTime >= $afternoonTime) && ($currentTime <= $eveningTime)) {
                        $current = "EVENING";
                    } else {
                        $current = "NIGHT";
                    }
                    $response['data']['current_date'] = date("D,M d");
                    $response['data']['current_time'] = $current;
                    $response['data']['medicine_reminder_list'] = $dataToSend;
                } else {

                    $currentTime = strtotime(date('H:i:s'));
                    $morningTime = strtotime("12:00:00");
                    $afternoonTime = strtotime("16:00:00");
                    $eveningTime = strtotime("19:00:00");
                    $nightTime = strtotime("03:00:00");

                    if (($currentTime >= $nightTime) && ($currentTime <= $morningTime)) {
                        $current = "MORNING";
                    } else if (($currentTime >= $morningTime) && ($currentTime <= $afternoonTime)) {
                        $current = "AFTERNOON";
                    } else if (($currentTime >= $afternoonTime) && ($currentTime <= $eveningTime)) {
                        $current = "EVENING";
                    } else {
                        $current = "NIGHT";
                    }
                    $response['data']['current_date'] = date("D,M d");
                    $response['data']['current_time'] = $current;

                    $response['status'] = 0;
                    $response['message'] = "No medicine reminder list found";
                }

            } else {
                $response['status'] = 0;
                $response['message'] = "Invalid request parameter";
            }
            echo json_encode($response);
            die;
        }
    }

    public static function medicine_reminder_update_status()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if (isset($data['app_key'])) {
            $app_key = $data['app_key'];
            $user_id = $data['user_id'];
            $thin_app_id = $data['thin_app_id'];
            $mobile = $data['mobile'];
            $medicine_reminder_id = $data['medicine_reminder_id'];
            $status = $data['status'];
            $response = array();
            if ($user_id != '' && $app_key != '' && $thin_app_id != '' && $medicine_reminder_id != '' && $status != '') {
                $connection = ConnectionUtil::getConnection();
                $modified = Custom::created();
                $sql = "UPDATE `medicine_reminder` SET `status` = ?, `modified` = ? WHERE `id` = ? ";
                $stmt_sub = $connection->prepare($sql);
                $stmt_sub->bind_param('sss', $status, $modified, $medicine_reminder_id);
                if ($stmt_sub->execute()) {
                    $response['status'] = 1;
                    $response['message'] = "Status updated successfully!";
                    WebservicesFunction::addUserStaticToJson('', $user_id, $thin_app_id, $mobile, "MEDICINE REMINDER", "ADD", 'medicine_reminder_update_status');
                } else {
                    $response['status'] = 0;
                    $response['message'] = "Unable to update status!";
                }

            } else {
                $response['status'] = 0;
                $response['message'] = "Invalid request parameter";
            }
            echo json_encode($response);
            die;
        }
    }

    public static function medicine_reminder_edit()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();

            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $medicine_name = isset($data['medicine_name']) ? $data['medicine_name'] : "";
            $start_date = isset($data['start_date']) ? $data['start_date'] : "";
            $duration = isset($data['duration']) ? $data['duration'] : "";
            $remind_at_morning = isset($data['remind_at_morning']) ? $data['remind_at_morning'] : "";
            $remind_at_afternoon = isset($data['remind_at_afternoon']) ? $data['remind_at_afternoon'] : "";
            $remind_at_evening = isset($data['remind_at_evening']) ? $data['remind_at_evening'] : "";
            $remind_at_night = isset($data['remind_at_night']) ? $data['remind_at_night'] : "";
            $medicine_reminder_id = isset($data['medicine_reminder_id']) ? $data['medicine_reminder_id'] : "";


            if (empty($medicine_reminder_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid medicine reminder id';
            } else if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile number';
            } else if (empty($medicine_name)) {
                $response['status'] = 0;
                $response['message'] = 'Midicine is empty';
            } else if (empty($start_date)) {
                $response['status'] = 0;
                $response['message'] = 'Start Date is empty';
            } else if (empty($duration)) {
                $response['status'] = 0;
                $response['message'] = 'Duration is empty';
            } else if (empty($remind_at_morning)) {
                $response['status'] = 0;
                $response['message'] = 'Remind at morning is empty';
            } else if (empty($remind_at_afternoon)) {
                $response['status'] = 0;
                $response['message'] = 'Remind at afternoon is empty';
            } else if (empty($remind_at_evening)) {
                $response['status'] = 0;
                $response['message'] = 'Remind at evening is empty';
            } else if (empty($remind_at_night)) {
                $response['status'] = 0;
                $response['message'] = 'Remind at night is empty';
            } else {
                $start_date = explode("-", $start_date);
                $start_date = $start_date[2] . '-' . $start_date[1] . '-' . $start_date[0];

                /* if($duration != 'EVERYDAY')
                {
                    $end_date = date("Y-m-d", strtotime("+".$duration, strtotime($start_date)));
                    $is_forever = 'NO';
                }
                else
                {
                    $end_date = '';
                    $is_forever = 'YES';
                } */


                if ($duration != 'EVERYDAY') {
                    $durationArr = explode(' ', $duration);
                    $durationCal = ((int)$durationArr[0] - 1) . ' ' . $durationArr[1];
                    $end_date = date("Y-m-d", strtotime("+" . $durationCal, strtotime($start_date)));
                    $is_forever = 'NO';
                } else {
                    $end_date = '';
                    $is_forever = 'YES';
                }


                $modified = Custom::created();

                $connection = ConnectionUtil::getConnection();
                $sql = "UPDATE medicine_reminder SET medicine_name = ?, start_date = ?, end_date = ?, duration = ?, is_forever = ?, remind_at_morning = ?, remind_at_afternoon = ?,remind_at_evening = ?, remind_at_night = ?, modified = ? WHERE `id` = ?";
                $stmt = $connection->prepare($sql);
                $stmt->bind_param('sssssssssss', $medicine_name, $start_date, $end_date, $duration, $is_forever, $remind_at_morning, $remind_at_afternoon, $remind_at_evening, $remind_at_night, $modified, $medicine_reminder_id);
                if ($stmt->execute()) {

                    $response['status'] = 1;
                    $response['message'] = "Medicine reminder updated successfully!";
                } else {
                    $response['status'] = 0;
                    $response['message'] = "Sorry unable to updated medicine reminder!";
                }
            }
            Custom::sendResponse($response);
        }

        exit();

    }

    public static function get_contest_data()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if (isset($data['app_key'])) {
            $app_key = $data['app_key'];
            $user_id = $data['userID'];
            $response = array();
            if ($user_id != '' && $app_key != '') {
                $connection = ConnectionUtil::getConnection();
                $currTime = date('Y-m-d H:i:s');

                $connection->query("UPDATE `contests` SET `open_status` = 'COMPLETED' WHERE `end_time` <= '" . $currTime . "'");

                $contestRS = $connection->query("SELECT `contests`.* FROM `contests` LEFT JOIN `users` ON (`users`.`thinapp_id` = `contests`.`thinapp_id` OR `contests`.`thinapp_id` = '1') WHERE (`contests`.`thinapp_id` = `users`.`thinapp_id` OR `contests`.`thinapp_id` = '1') AND `users`.`id` = '" . $user_id . "' AND `contests`.`status` = 'ACTIVE' AND `start_time` <= '" . $currTime . "' ORDER BY `contests`.`id` DESC");

                if ($contestRS->num_rows) {
                    $contestData = mysqli_fetch_all($contestRS, MYSQLI_ASSOC);
                    $response['data'] = $contestData;
                    $response['status'] = 1;
                    $response['message'] = "Contest list found";
                } else {
                    $response['status'] = 0;
                    $response['message'] = "No contest list found";
                }

            } else {
                $response['status'] = 0;
                $response['message'] = "Invalid request parameter";
            }
            echo json_encode($response);
            die;
        }
    }

    public static function get_contest_info()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if (isset($data['app_key'])) {
            $app_key = $data['app_key'];
            $contest_id = $data['contestID'];
            $user_id = $data['userID'];
            $response = array();
            if ($contest_id != '' && $app_key != '') {
                $connection = ConnectionUtil::getConnection();
                $contestRS = $connection->query("SELECT * FROM `contests` WHERE `contests`.`id` = '$contest_id' LIMIT 1");

                if ($contestRS->num_rows) {
                    $contestData = mysqli_fetch_assoc($contestRS);
                    $connection->query("UPDATE `contests` SET `contests`.`view_count` = `contests`.`view_count`+1 WHERE `contests`.`id` = '$contest_id'");

                    if ($contestData['contest_type'] == 'MULTIPLE_CHOICE') {
                        $questionRS = $connection->query("SELECT *,'A' AS `answer_response` FROM `contest_multiple_choice_questions` WHERE `contest_id` = '$contest_id' AND `status` = 'ACTIVE' ORDER BY `id` DESC");
                        $questionData = mysqli_fetch_all($questionRS, MYSQLI_ASSOC);
                        $response['questionData'] = $questionData;
                        $hasAnsweredRS = $connection->query("SELECT `id` FROM `contest_multiple_choice_answers` WHERE `contest_id` = '$contest_id' AND `user_id` = '$user_id' LIMIT 1");
                    } else {
                        $hasAnsweredRS = $connection->query("SELECT `id` FROM `contest_text_responses` WHERE `contest_id` = '$contest_id' AND `user_id` = '$user_id' LIMIT 1");
                    }


                    if ($hasAnsweredRS->num_rows >= 1) {
                        $response['hasAnswered'] = false;
                    } else {
                        $response['hasAnswered'] = true;
                    }

                    $response['data'] = $contestData;
                    $response['status'] = 1;
                    $response['message'] = "Contest info found";
                } else {
                    $response['status'] = 0;
                    $response['message'] = "No contest info found";
                }

            } else {
                $response['status'] = 0;
                $response['message'] = "Invalid request parameter";
            }
            echo json_encode($response);
            die;
        }
        die;
    }

    public static function submit_text_response()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if (isset($data['app_key'])) {
            $app_key = $data['app_key'];
            $user_id = $data['userID'];

            $contestID = $data['contestID'];
            $responseData = $data['response'];
            $response = array();
            if ($user_id != '' && $app_key != '') {
                $connection = ConnectionUtil::getConnection();
                $currTime = date('Y-m-d H:i:s');

                $hasAnswered = $connection->query("SELECT `id` FROM `contest_text_responses` WHERE `user_id` = '$user_id' AND `contest_id` = '$contestID' LIMIT 1");
                if ($hasAnswered->num_rows < 1) {
                    $userRS = $connection->query("SELECT `username`,`mobile`,`thinapp_id` FROM `users` WHERE `id` = '$user_id' LIMIT 1");
                    $userData = mysqli_fetch_assoc($userRS);
                    $query = "INSERT INTO `contest_text_responses` SET `contest_id` = '$contestID',`user_id` = '$user_id',`thinapp_id` = '" . $userData['thinapp_id'] . "',`mobile` = '" . $userData['mobile'] . "',`description` = '$responseData',`created` = '$currTime',`modified` = '$currTime'";
                    if ($connection->query($query)) {

                        $connection->query("UPDATE `contests` SET `response_count` = (`response_count`+1) WHERE `id` = '$contestID'");

                        $response['status'] = 1;
                        $response['message'] = "Answer submitted successfully!";
                        $user_data = Custom::get_user_by_id($user_id);
                        WebServicesFunction::addUserStaticToJson('', $user_id, $user_data['thinapp_id'], $user_data['mobile'], "CONTEST", "SUBMIT RESPONSE", 'submit_text_response');

                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Sorry unable to add answer!";
                    }
                } else {
                    $response['status'] = 0;
                    $response['message'] = "You have already answered!";
                }


            } else {
                $response['status'] = 0;
                $response['message'] = "Invalid request parameter";
            }
            echo json_encode($response);
            die;
        }
    }

    public static function submit_multi_response()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if (isset($data['app_key'])) {
            $app_key = $data['app_key'];
            $user_id = $data['userID'];
            $contestID = $data['contestID'];
            $responseData = $data['response'];
            $response = array();
            if ($user_id != '' && $app_key != '' && !empty($responseData)) {
                $connection = ConnectionUtil::getConnection();
                $currTime = date('Y-m-d H:i:s');

                $hasAnswered = $connection->query("SELECT `id` FROM `contest_multiple_choice_answers` WHERE `user_id` = '$user_id' AND `contest_id` = '$contestID' LIMIT 1");
                if ($hasAnswered->num_rows < 1) {
                    $userRS = $connection->query("SELECT `username`,`mobile`,`thinapp_id` FROM `users` WHERE `id` = '$user_id' LIMIT 1");
                    $userData = mysqli_fetch_assoc($userRS);

                    $insertAnswer = "INSERT INTO `contest_multiple_choice_answers` (`thinapp_id`,`contest_id`,`contest_multiple_question_id`,`user_id`,`mobile`,`answer`,`is_correct`,`created`,`modified`) ";
                    //
                    $dataToSend = array();
                    foreach ($responseData as $answer) {
                        $isCorrect = ($answer['answer_response'] == $answer['answer']) ? 'YES' : 'NO';
                        $dataToSend[] = "('" . $userData['thinapp_id'] . "','$contestID','" . $answer['id'] . "','$user_id','" . $userData['mobile'] . "','" . $answer['answer_response'] . "','$isCorrect','$currTime','$currTime')";
                    }

                    $insertAnswer = $insertAnswer . 'VALUES ' . implode(' ,', $dataToSend);

                    if ($connection->query($insertAnswer)) {

                        $connection->query("UPDATE `contests` SET `response_count` = (`response_count`+1) WHERE `id` = '$contestID'");

                        $response['status'] = 1;
                        $response['message'] = "Answer submitted successfully!";
                        $user_data = Custom::get_user_by_id($user_id);
                        WebServicesFunction::addUserStaticToJson('', $user_id, $user_data['thinapp_id'], $user_data['mobile'], "CONTEST", "SUBMIT RESPONSE", 'submit_text_response');

                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Sorry unable to add answer!";
                    }
                } else {
                    $response['status'] = 0;
                    $response['message'] = "You have already answered!";
                }


            } else {
                $response['status'] = 0;
                $response['message'] = "Invalid request parameter";
            }
            echo json_encode($response);
            die;
        }
    }

    public static function get_answer_data()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if (isset($data['app_key'])) {
            $app_key = $data['app_key'];
            $user_id = $data['userID'];
            $contest_id = $data['contestID'];
            $response = array();
            if ($user_id != '' && $app_key != '') {
                $connection = ConnectionUtil::getConnection();

                $contestData = mysqli_fetch_assoc($connection->query("SELECT `contests`.`contest_type`,`contests`.`response_count`,`contests`.`start_time`,`contests`.`end_time`,`contests`.`open_status` FROM `contests` WHERE `id` = '$contest_id'"));
                if ($contestData['contest_type'] == 'TEXT') {
                    $userData = mysqli_fetch_assoc($connection->query("SELECT `mobile`,`username` FROM `users` WHERE `id` = '$user_id'"));
                    $contestAnswerRS = $connection->query("SELECT `contest_text_responses`.*,IF(LOCATE('" . $userData['mobile'] . "',contest_text_responses.liked_mobile)>0,'true','false') AS is_liked,`users`.`username` FROM `contest_text_responses` LEFT JOIN `users` ON (`users`.`id` = `contest_text_responses`.`user_id`) WHERE `contest_text_responses`.`contest_id` = '$contest_id' ORDER BY `contest_text_responses`.`id` DESC");

                    if ($contestAnswerRS->num_rows) {
                        $contestAnswerData = mysqli_fetch_all($contestAnswerRS, MYSQLI_ASSOC);
                        $response['contest_type'] = 'TEXT';
                        $response['contest_data'] = $contestData;
                        $response['data'] = $contestAnswerData;
                        $response['status'] = 1;
                        $response['message'] = "Contest list found";
                    } else {
                        $response['contest_type'] = 'TEXT';
                        $response['contest_data'] = $contestData;
                        $response['status'] = 0;
                        $response['message'] = "No response yet";
                    }

                } else {

                    $usersRS = $connection->query("SELECT DISTINCT(`contest_multiple_choice_answers`.`user_id`),`users`.`username`,`contest_multiple_choice_answers`.`user_desc` FROM `contest_multiple_choice_answers` LEFT JOIN `users` ON(`contest_multiple_choice_answers`.`user_id` = `users`.`id`) WHERE `contest_multiple_choice_answers`.`contest_id` = '$contest_id'  ORDER BY `contest_multiple_choice_answers`.`id` DESC");
                    if ($usersRS->num_rows) {
                        $userData = mysqli_fetch_all($usersRS, MYSQLI_ASSOC);

                        $totalQuestionRS = $connection->query("SELECT COUNT(`id`) AS `total_questions` FROM `contest_multiple_choice_questions` WHERE `contest_multiple_choice_questions`.`contest_id` = '$contest_id' AND `contest_multiple_choice_questions`.`status` = 'ACTIVE'");
                        $totalQuestionData = mysqli_fetch_assoc($totalQuestionRS);
                        $dataToSend = array();
                        foreach ($userData AS $user) {
                            $query = $connection->query("SELECT COUNT(`id`) AS `total_correct_answers` FROM `contest_multiple_choice_answers` WHERE `contest_id` = '$contest_id' AND `user_id` = '" . $user['user_id'] . "' AND `is_correct` = 'YES'");
                            $answerData = mysqli_fetch_assoc($query);
                            $user['total_correct_answers'] = $answerData['total_correct_answers'];
                            $user['total_questions'] = $totalQuestionData['total_questions'];
                            $dataToSend[] = $user;
                        }

                        $response['contest_type'] = 'MULTIPLE_CHOICE';
                        $response['contest_data'] = $contestData;
                        $response['data'] = $dataToSend;
                        $response['status'] = 1;
                        $response['message'] = "Contest list found";


                    } else {
                        $response['contest_type'] = 'MULTIPLE_CHOICE';
                        $response['contest_data'] = $contestData;
                        $response['status'] = 0;
                        $response['message'] = "No response yet";
                    }

                }


            } else {
                $response['status'] = 0;
                $response['message'] = "Invalid request parameter";
            }
            echo json_encode($response);
            die;
        }
    }

    public static function update_contest_answer_like()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $response = array();
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['userID']) ? $data['userID'] : "";
            $answer_id = isset($data['answerID']) ? $data['answerID'] : "";

            if (empty($app_key) || empty($user_id) || empty($answer_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid parameters!';
            } else {
                $connection = ConnectionUtil::getConnection();
                $userRS = $connection->query("SELECT `mobile`,`username` FROM `users` WHERE `id` = '$user_id' LIMIT 1");
                $userData = mysqli_fetch_assoc($userRS);
                $mobileSearch = mysqli_real_escape_string($connection, $userData['mobile']);

                $sql = "select cdd.id from contest_text_responses as cdd where cdd.id = $answer_id and cdd.liked_mobile LIKE '%$mobileSearch%' limit 1";
                $answerPage = $connection->query($sql);
                if ($answerPage->num_rows == 0) {
                    $sql = "UPDATE contest_text_responses SET like_count = like_count +1 , liked_mobile=CONCAT(LEFT(liked_mobile,(CHAR_LENGTH(liked_mobile)-1)), ?, RIGHT(liked_mobile,1)) where id = ?";
                    $stmt = $connection->prepare($sql);
                    $mobile_string = ',"' . $mobileSearch . '"';
                    $stmt->bind_param('ss', $mobile_string, $answer_id);
                    if ($stmt->execute()) {
                        $response['status'] = 1;
                        $response['meaasge'] = "Answer liked successfully";

                        $user_data = Custom::get_user_by_id($user_id);
                        WebservicesFunction::addUserStaticToJson('', $user_id, $user_data['thinapp_id'], $user_data['mobile'], "CONTEST", "LIKE", 'update_contest_answer_like');

                    } else {
                        $response['status'] = 0;
                        $response['meaasge'] = "Oops, Something went wrong!";
                    }
                } else {
                    $response['status'] = 0;
                    $response['meaasge'] = "Post is already liked!";
                }
            }
            Custom::sendResponse($response);
        }
        exit();
    }

    public static function get_winner_data()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if (isset($data['app_key'])) {
            $app_key = $data['app_key'];
            $user_id = $data['userID'];
            $contest_id = $data['contestID'];
            $response = array();
            if ($user_id != '' && $app_key != '') {
                $connection = ConnectionUtil::getConnection();

                $winnerRS = $connection->query("SELECT `contest_winners`.*,`users`.`username` FROM `contest_winners` LEFT JOIN `users` ON (`users`.`id` = `contest_winners`.`user_id`) WHERE `contest_winners`.`status` = 'ACTIVE' AND `contest_winners`.`contest_id` = '$contest_id' ORDER BY `contest_winners`.`id` DESC");

                if ($winnerRS->num_rows) {
                    $winnerData = mysqli_fetch_all($winnerRS, MYSQLI_ASSOC);
                    $response['data'] = $winnerData;
                    $response['status'] = 1;
                    $response['message'] = "Winner list found";
                } else {
                    $response['status'] = 0;
                    $response['message'] = "No Winner Declared Yet";
                }

            } else {
                $response['status'] = 0;
                $response['message'] = "Invalid request parameter";
            }
            echo json_encode($response);
            die;
        }
    }

    public static function getChildAgeMilestone()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if (isset($data['app_key'])) {
            $app_key = $data['app_key'];
            $user_id = $data['user_id'];
            $thin_app_id = $data['thin_app_id'];
            $child_age_milestone_age_id = $data['child_age_milestone_age_id'];
            $response = array();
            if ($user_id != '' && $app_key != '' && $thin_app_id != '' && $child_age_milestone_age_id != '') {
                $connection = ConnectionUtil::getConnection();

                $childAgeMilestoneAges = $connection->query("SELECT `title` FROM `child_age_milestone_ages` WHERE `id` = '" . $child_age_milestone_age_id . "'");
                $childAgeMilestoneAgesData = mysqli_fetch_assoc($childAgeMilestoneAges);

                $childAgeMilestoneArticles = $connection->query("SELECT `id`,`title`,`description` FROM `child_age_milestone_articles` WHERE `child_age_milestone_age_id` = '" . $child_age_milestone_age_id . "' AND `status` = 'ACTIVE' ORDER BY `id` DESC");
                $childAgeMilestoneArticlesData = mysqli_fetch_all($childAgeMilestoneArticles, MYSQLI_ASSOC);

                $childAgeMilestoneArticlesDataUtf = array();
                foreach ($childAgeMilestoneArticlesData as $data) {
                    $childAgeMilestoneArticlesDataUtf[] = array_map('utf8_encode', $data);
                }

                $childAgeMilestoneGrowthAndDevelopment = $connection->query("SELECT `id`,`image`,`title`,`description` FROM `child_age_milestone_growth_and_developments` WHERE `child_age_milestone_age_id` = '" . $child_age_milestone_age_id . "' AND `status` = 'ACTIVE' ORDER BY `id` DESC");
                $childAgeMilestoneGrowthAndDevelopmentData = mysqli_fetch_all($childAgeMilestoneGrowthAndDevelopment, MYSQLI_ASSOC);
                $childAgeMilestoneGrowthAndDevelopmentDataUtf = array();
                foreach ($childAgeMilestoneGrowthAndDevelopmentData as $data) {
                    $childAgeMilestoneGrowthAndDevelopmentDataUtf[] = array_map('utf8_encode', $data);
                }


                $response['data']['articles_list'] = $childAgeMilestoneArticlesDataUtf;
                $response['data']['growth_and_development_list'] = $childAgeMilestoneGrowthAndDevelopmentDataUtf;
                $response['data']['top_title'] = $childAgeMilestoneAgesData['title'];

                $response['status'] = 1;
                $response['message'] = "Data list found";


            } else {
                $response['status'] = 0;
                $response['message'] = "Invalid request parameter";
            }
            echo json_encode($response);
            die;
        }
    }

    public static function getLocLanguage()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        // print_r($data);
        if (isset($data['app_key'])) {
            $app_key = $data['app_key'];
            $thinappID = $data['thin_app_id'];
            $language = $data['language'];

            $response = array();
            $langFileUrl = "local/" . $language . "/lang_" . $thinappID . ".ini";
            if ($langData = parse_ini_file($langFileUrl, true)) {
                $response['data'] = $langData;
                $response['status'] = 1;
                $response['message'] = "Winner list found";
            } else {
                $response['status'] = 0;
                $response['message'] = "No language found";
            }
            echo json_encode($response);
            die;
        }
        die;
    }

    /************************cron and table
     * medicine_reminder_alert_afternoon.php
     * medicine_reminder_alert_evening.php
     * medicine_reminder_alert_morning.php
     * medicine_reminder_alert_night.php
     * table - medicine_reminder
     * fields - thinapps - send_birthday_wishes
     ************************/
    /**********ADDED BY VISHWAJEET END***********/


    /********************* ADDED BY VISHWAJEET FOR WALLET **************/

    public static function wallet_update_settings()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);

        if (isset($data['app_key'])) {
            $thinappID = $data['thin_app_id'];
            $isEnableReferral = isset($data['is_enable_referral']) ? $data['is_enable_referral'] : 'NO';
            $oldUserReferAmount = isset($data['old_user_refer_amount']) ? $data['old_user_refer_amount'] : 0;
            $newUserReferAmount = isset($data['new_user_refer_amount']) ? $data['new_user_refer_amount'] : 0;
            $isEnableAppointmentCashback = isset($data['is_enable_appointment_cashback']) ? $data['is_enable_appointment_cashback'] : 'NO';
            $appointmentCashback = isset($data['appointment_cashback']) ? $data['appointment_cashback'] : 0;
            $currTime = date('Y-m-d H:i:s');
            $response = array();

            $sqlStr = "SELECT `id` FROM `wallet_thinapp_settings` WHERE `thinapp_id` = '" . $thinappID . "' LIMIT 1";
            $connection = ConnectionUtil::getConnection();
            $settingRS = $connection->query($sqlStr);
            if ($settingRS->num_rows) {
                $walletSettingData = mysqli_fetch_assoc($settingRS);
                $walletSettingID = $walletSettingData['id'];
                $updateStr = "UPDATE `wallet_thinapp_settings` SET `is_enable_referral` = '" . $isEnableReferral . "', `new_user_refer_amount` = '" . $newUserReferAmount . "', `old_user_refer_amount` = '" . $oldUserReferAmount . "', `is_enable_appointment_cashback` = '" . $isEnableAppointmentCashback . "', `appointment_cashback` = '" . $appointmentCashback . "', `modified` = '" . $currTime . "' WHERE `id` = '" . $walletSettingID . "'";
                if ($connection->query($updateStr)) {
                    $response['status'] = 1;
                    $response['message'] = "Wallet settings updated successfully!";
                } else {
                    $response['status'] = 0;
                    $response['message'] = "Wallet settings could not be updated!";
                }

            } else {
                $updateStr = "INSERT INTO `wallet_thinapp_settings` SET `is_enable_referral` = '" . $isEnableReferral . "', `new_user_refer_amount` = '" . $newUserReferAmount . "', `old_user_refer_amount` = '" . $oldUserReferAmount . "', `is_enable_appointment_cashback` = '" . $isEnableAppointmentCashback . "', `appointment_cashback` = '" . $appointmentCashback . "',`thinapp_id` = '" . $thinappID . "',`created` = '" . $currTime . "', `modified` = '" . $currTime . "'";
                if ($connection->query($updateStr)) {
                    $response['status'] = 1;
                    $response['message'] = "Wallet settings updated successfully!";
                } else {
                    $response['status'] = 0;
                    $response['message'] = "Wallet settings could not be updated!";
                }
            }

            echo json_encode($response);
            die;

        }
    }

    public static function wallet_get_settings()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);

        if (isset($data['app_key'])) {
            $thinappID = $data['thin_app_id'];
            $response = array();

            $sqlStr = "SELECT `is_enable_referral`, `new_user_refer_amount`, `old_user_refer_amount`, `is_enable_appointment_cashback`, `appointment_cashback` FROM `wallet_thinapp_settings` WHERE `thinapp_id` = '" . $thinappID . "' LIMIT 1";
            $connection = ConnectionUtil::getConnection();
            $settingRS = $connection->query($sqlStr);
            if ($settingRS->num_rows) {
                $walletSettingData = mysqli_fetch_assoc($settingRS);
                $response['data'] = $walletSettingData;
                $response['status'] = 1;
                $response['message'] = "Got wallet settings successfully!";


            } else {
                $walletSettingData = array();
                $walletSettingData['is_enable_referral'] = 'NO';
                $walletSettingData['new_user_refer_amount'] = 0;
                $walletSettingData['old_user_refer_amount'] = 0;
                $walletSettingData['is_enable_appointment_cashback'] = 'NO';
                $walletSettingData['appointment_cashback'] = 0;
                $response['data'] = $walletSettingData;
                $response['status'] = 1;
                $response['message'] = "Got wallet settings successfully!";
            }

            echo json_encode($response);
            die;

        }
    }

    public static function wallet_redeem_referral_code()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        //print_r($data); die;
        if (isset($data['app_key'])) {

            try {


                $thinappID = $data['thin_app_id'];
                $userID = $data['user_id'];
                $referralCode = $data['referral_code'];
                $dateTime = date('Y-m-d H:i:s');

                $chkReferalSetting = "SELECT `id`, `new_user_refer_amount`, `old_user_refer_amount` FROM `wallet_thinapp_settings` WHERE `thinapp_id` = '" . $thinappID . "' AND `is_enable_referral` = 'YES' LIMIT 1";

                $connection = ConnectionUtil::getConnection();
                $connection->autocommit(false);
                $settingRS = $connection->query($chkReferalSetting);
                if ($settingRS->num_rows) {

                    $chkIfUsedReferral = "SELECT `id` FROM `wallet_user_referral_codes` WHERE `user_id` = '" . $userID . "' AND `has_used_referral_code` = 'YES'";
                    $chkIfUsedReferralRS = $connection->query($chkIfUsedReferral);
                    if (!$chkIfUsedReferralRS->num_rows) {
                        $chkReferalValid = "SELECT `user_id`,`new_user_refer_amount` FROM `wallet_user_referral_codes` WHERE `thinapp_id` = '" . $thinappID . "' AND `referral_code` = '" . $referralCode . "' AND `status` = 'ACTIVE' LIMIT 1";
                        $chkReferalValidRS = $connection->query($chkReferalValid);
                        if ($chkReferalValidRS->num_rows) {

                            $chkReferalOwnValid = "SELECT `user_id`,`new_user_refer_amount` FROM `wallet_user_referral_codes` WHERE `thinapp_id` = '" . $thinappID . "' AND `referral_code` = '" . $referralCode . "' AND `user_id` = '" . $userID . "' AND `status` = 'ACTIVE' LIMIT 1";
                            $chkReferalOwnValidRS = $connection->query($chkReferalOwnValid);
                            if (!$chkReferalOwnValidRS->num_rows) {

                                $refSettingData = mysqli_fetch_assoc($settingRS);
                                $settingNewUserReferAmount = $refSettingData['new_user_refer_amount'];
                                $settingOldUserReferAmount = $refSettingData['old_user_refer_amount'];

                                $referralData = mysqli_fetch_assoc($chkReferalValidRS);
                                $referralUserID = $referralData['user_id'];
                                $newUserReferAmount = $referralData['new_user_refer_amount'];


                                $chkUserExistWalletUserReferralCodesStr = "SELECT `id` FROM `wallet_user_referral_codes` WHERE `user_id` = '" . $userID . "' AND `thinapp_id` = '" . $thinappID . "' LIMIT 1";
                                $chkUserExistWalletUserReferralCodesRS = $connection->query($chkUserExistWalletUserReferralCodesStr);
                                if ($chkUserExistWalletUserReferralCodesRS->num_rows) {
                                    $walletUserReferralCodesData = mysqli_fetch_assoc($chkUserExistWalletUserReferralCodesRS);
                                    $walletUserReferralCodesID = $walletUserReferralCodesData['id'];
                                    $updateReferalCode = "UPDATE `wallet_user_referral_codes` SET `has_used_referral_code` = 'YES', `modified` = '" . $dateTime . "' WHERE `id` = '" . $walletUserReferralCodesID . "'";
                                    $connection->query($updateReferalCode);
                                } else {
                                    $user_id = $userID;
                                    $thinapp_id = $thinappID;
                                    $referral_code = Custom::getNewRefCode($userID);
                                    $new_user_refer_amount = $settingNewUserReferAmount;
                                    $old_user_refer_amount = $settingOldUserReferAmount;
                                    $has_used_referral_code = 'YES';
                                    $status = 'ACTIVE';
                                    $created = $dateTime;
                                    $modified = $dateTime;
                                    $updateReferalCode = "INSERT INTO `wallet_user_referral_codes` SET `user_id` = '" . $user_id . "', `thinapp_id` = '" . $thinapp_id . "', `referral_code` = '" . $referral_code . "', 
									`new_user_refer_amount` = '" . $new_user_refer_amount . "', `old_user_refer_amount` = '" . $old_user_refer_amount . "', `has_used_referral_code` = '" . $has_used_referral_code . "', `status` = '" . $status . "'
									, `created` = '" . $created . "', `modified` = '" . $modified . "'";
                                    $connection->query($updateReferalCode);
                                }


                                $chkWalletUsersStr = "SELECT `id`,`total_amount` FROM `wallet_users` WHERE `user_id` = '" . $userID . "' AND `thinapp_id` = '" . $thinappID . "' LIMIT 1";
                                $chkWalletUsersRS = $connection->query($chkWalletUsersStr);
                                if ($chkWalletUsersRS->num_rows) {
                                    $chkWalletUsersData = mysqli_fetch_assoc($chkWalletUsersRS);
                                    $updateAmount = $chkWalletUsersData['total_amount'] + $newUserReferAmount;

                                    $updateWalletUsersStr = "UPDATE `wallet_users` SET `total_amount` = " . $updateAmount . " WHERE `id` = '" . $chkWalletUsersData['id'] . "'";
                                    $connection->query($updateWalletUsersStr);
                                } else {
                                    $user_id = $userID;
                                    $thinapp_id = $thinappID;
                                    $total_amount = $updateAmount = $newUserReferAmount;
                                    $status = 'ACTIVE';
                                    $created = $dateTime;
                                    $modified = $dateTime;


                                    $insertWalletUsersStr = "INSERT INTO `wallet_users` SET `user_id` = '" . $user_id . "', `thinapp_id` = '" . $thinappID . "',
									`total_amount` = '" . $total_amount . "',`status` = '" . $status . "',`created` = '" . $created . "', `modified` = '" . $modified . "'";
                                    $connection->query($insertWalletUsersStr);
                                }


                                $user_id = $userID;
                                $thinapp_id = $thinappID;
                                $type = "REFER";
                                $referral_code = $referralCode;
                                $referral_user_id = $referralUserID;
                                $new_wallet_amount = $updateAmount;
                                $amount = $newUserReferAmount;
                                $amount_type = 'ADD';
                                $created = $dateTime;
                                $modified = $dateTime;
                                $insertWalletUserHistoryStr = "INSERT INTO `wallet_user_history` SET `user_id` = '" . $user_id . "', `thinapp_id` = '" . $thinappID . "',
									`type` = '" . $type . "', `referral_code` = '" . $referral_code . "', `referral_user_id` = '" . $referral_user_id . "',
									`new_wallet_amount` = '" . $new_wallet_amount . "', `amount` = '" . $amount . "',`amount_type` = '" . $amount_type . "',`created` = '" . $created . "', `modified` = '" . $modified . "'";
                                $connection->query($insertWalletUserHistoryStr);

                                $connection->commit();


                                $response['status'] = 1;
                                $response['message'] = "Success,You have successfully redeemed RS. $amount!";
                                $response['data']['updated_balance'] = $new_wallet_amount;

                            } else {
                                $connection->rollback();
                                $response['status'] = 0;
                                $response['message'] = "Oops, Invalid referral code!";
                            }


                        } else {
                            $connection->rollback();
                            $response['status'] = 0;
                            $response['message'] = "Oops, Invalid referral code!";
                        }
                    } else {
                        $connection->rollback();
                        $response['status'] = 0;
                        $response['message'] = "Oops, You have already redeemed a referral code!";
                    }

                } else {
                    $connection->rollback();
                    $response['status'] = 0;
                    $response['message'] = "Oops, Referral is not allowed!";
                }

                echo json_encode($response);
                die;


            } catch (Exception $e) {
                $connection->rollback();
                $response['status'] = 0;
                $response['message'] = "Oops, Something went wrong!";
                echo json_encode($response);
                die;
            }
            die();

        }
    }

    public static function wallet_get_amount()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);

        if (isset($data['app_key'])) {

            $thinappID = $data['thin_app_id'];
            $userID = $data['user_id'];


            $sqlStr = "SELECT `total_amount` FROM `wallet_users` WHERE `user_id` = '" . $userID . "' AND `thinapp_id` = '" . $thinappID . "' ";
            $connection = ConnectionUtil::getConnection();
            $walletAmountRS = $connection->query($sqlStr);

            $sqlRef = "SELECT `is_enable_referral` FROM `wallet_thinapp_settings` WHERE `thinapp_id` = '" . $thinappID . "'";
            $refRS = $connection->query($sqlRef);
            if ($refRS->num_rows) {
                $dataTOSend = mysqli_fetch_assoc($refRS);
                $referralEnable = $dataTOSend['is_enable_referral'];
            } else {
                $referralEnable = 'NO';
            }
            if ($walletAmountRS->num_rows) {
                $walletAmountData = mysqli_fetch_assoc($walletAmountRS);
                $response['status'] = 1;
                $response['message'] = "Successfully got user wallet amount!";
                $response['referral_enable'] = $referralEnable;
                $response['data'] = $walletAmountData['total_amount'];
            } else {
                Custom::configWalletForFirstTime($userID, $thinappID);

                $response['status'] = 1;
                $response['message'] = "Zero wallet amount!";
                $response['referral_enable'] = $referralEnable;
                $response['data'] = 0;
            }

            echo json_encode($response);
            die;
        }
    }

    public static function wallet_get_history()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);

        if (isset($data['app_key'])) {

            $thinappID = $data['thin_app_id'];
            $userID = $data['user_id'];

            $sqlStr = "SELECT * FROM `wallet_user_history` WHERE `user_id` = '" . $userID . "' AND `thinapp_id` = '" . $thinappID . "' ORDER BY `id` DESC";
            $connection = ConnectionUtil::getConnection();
            $userWalletRS = $connection->query($sqlStr);
            if ($userWalletRS->num_rows) {
                $dataToSend = array();
                $userWalletData = mysqli_fetch_all($userWalletRS, MYSQLI_ASSOC);
                $dataToSend['user_wallet_history'] = $userWalletData;

                $sqlStr = "SELECT `total_amount` FROM `wallet_users` WHERE `user_id` = '" . $userID . "' AND `thinapp_id` = '" . $thinappID . "' ";
                $walletAmountRS = $connection->query($sqlStr);
                $walletAmountData = mysqli_fetch_assoc($walletAmountRS);
                $dataToSend['total_amount'] = $walletAmountData['total_amount'];
                $response['status'] = 1;
                $response['message'] = "Successfully got user wallet history!";
                $response['data'] = $dataToSend;
            } else {
                $response['status'] = 0;
                $response['message'] = "No wallet history found!";
            }

            echo json_encode($response);
            die;
        }
    }

    public static function wallet_get_user_referral_code()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if (isset($data['app_key'])) {

            $thinappID = $data['thin_app_id'];
            $userID = $data['user_id'];

            $sqlStr = "SELECT `referral_code` FROM `wallet_user_referral_codes` WHERE `user_id` = '" . $userID . "' AND `thinapp_id` = '" . $thinappID . "' ";
            $connection = ConnectionUtil::getConnection();
            $walletReferralRS = $connection->query($sqlStr);
            if ($walletReferralRS->num_rows) {
                $walletReferralData = mysqli_fetch_assoc($walletReferralRS);
                $response['status'] = 1;
                $response['message'] = "Successfully got user referral code!";
                $response['data']['referral_code'] = $walletReferralData['referral_code'];
            } else {
                Custom::configWalletForFirstTime($userID, $thinappID);

                $sqlStr = "SELECT `referral_code` FROM `wallet_user_referral_codes` WHERE `user_id` = '" . $userID . "' AND `thinapp_id` = '" . $thinappID . "' ";
                $connection = ConnectionUtil::getConnection();
                $walletReferralRS = $connection->query($sqlStr);

                $walletReferralData = mysqli_fetch_assoc($walletReferralRS);
                $response['status'] = 1;
                $response['message'] = "Successfully got user referral code!";
                $response['data']['referral_code'] = $walletReferralData['referral_code'];
            }

            echo json_encode($response);
            die;
        }

    }

    public static function wallet_book_appointment($appointment_id, $user_id, $wallet_deduct, $thinappID)
    {

        $thinapp_id = $thinappID;
        $userID = $user_id;
        $walletThinappSettingStr = "SELECT * FROM `wallet_thinapp_settings` WHERE `thinapp_id` = '" . $thinappID . "' LIMIT 1";

        $currTime = date('Y-m-d H:i:s');
        $connection = ConnectionUtil::getConnection();
        $wattetThinappSettingRS = $connection->query($walletThinappSettingStr);
        if ($wattetThinappSettingRS->num_rows) {

            $wattetThinappSettingData = mysqli_fetch_assoc($wattetThinappSettingRS);


            if ($wallet_deduct > 0) {

                $selectUserWalletStr = "SELECT `total_amount` FROM `wallet_users` WHERE `user_id` = '" . $user_id . "'";
                $selectUserWalletRS = $connection->query($selectUserWalletStr);
                $selectUserWalletData = mysqli_fetch_assoc($selectUserWalletRS);
                $totalWalletAmount = $selectUserWalletData['total_amount'];

                $new_wallet_amount = $totalWalletAmount - $wallet_deduct;
                $insertWalletUserHistoryStr = "INSERT INTO `wallet_user_history` SET `user_id` = '" . $user_id . "', `thinapp_id` = '" . $thinapp_id . "', `type` = 'DEDUCTION', `amount` = '" . $wallet_deduct . "', `new_wallet_amount` = '" . $new_wallet_amount . "', `amount_type` = 'DEDUCTION', `appointment_id` = '" . $appointment_id . "', `created` = '" . $currTime . "', `modified` = '" . $currTime . "'";
                $connection->query($insertWalletUserHistoryStr);

                $updateWalletUsers = "UPDATE `wallet_users` SET `total_amount` = '" . $new_wallet_amount . "' WHERE `user_id` = '" . $user_id . "'";
                $connection->query($updateWalletUsers);

            }


            $selectReferralUserIDStr = "SELECT `referral_user_id` FROM `wallet_user_history` WHERE `user_id` = '" . $user_id . "' AND `type` = 'REFER' AND `referral_user_id` != 0";
            $selectReferralUserIDRS = $connection->query($selectReferralUserIDStr);

            if ($selectReferralUserIDRS->num_rows && $wattetThinappSettingData['is_enable_referral'] == 'YES') {

                $ChkselectReferralUserIDStr = "SELECT `id` FROM `wallet_user_history` WHERE `user_id` = '" . $user_id . "' AND `type` = 'REFER' AND `referral_user_id` = 0";
                $ChkselectReferralUserIDRS = $connection->query($ChkselectReferralUserIDStr);

                if ($ChkselectReferralUserIDRS->num_rows > 0) {

                    $selectReferralUserIDDATA = mysqli_fetch_assoc($selectReferralUserIDRS);
                    $referral_user_id = $selectReferralUserIDDATA['referral_user_id'];

                    $getOldUserReferAmountStr = "SELECT `old_user_refer_amount` FROM `wallet_user_referral_codes` WHERE `user_id` = '" . $referral_user_id . "' LIMIT 1";
                    $getOldUserReferAmountRS = $connection->query($getOldUserReferAmountStr);
                    if ($getOldUserReferAmountRS->num_rows) {
                        $getOldUserReferAmountDATA = mysqli_fetch_assoc($getOldUserReferAmountRS);
                        $oldUserReferAmount = $getOldUserReferAmountDATA['old_user_refer_amount'];

                        if ($oldUserReferAmount > 0) {

                            $selectUserWalletStr = "SELECT `total_amount` FROM `wallet_users` WHERE `user_id` = '" . $referral_user_id . "'";
                            $selectUserWalletRS = $connection->query($selectUserWalletStr);
                            $selectUserWalletData = mysqli_fetch_assoc($selectUserWalletRS);
                            $totalWalletAmount = $selectUserWalletData['total_amount'];

                            $new_wallet_amount = $totalWalletAmount + $oldUserReferAmount;
                            $insertWalletUserHistoryStr = "INSERT INTO `wallet_user_history` SET `user_id` = '" . $referral_user_id . "', `thinapp_id` = '" . $thinapp_id . "', `type` = 'REFER', `amount` = '" . $oldUserReferAmount . "', `new_wallet_amount` = '" . $new_wallet_amount . "', `amount_type` = 'ADD', `appointment_id` = '" . $appointment_id . "', `created` = '" . $currTime . "', `modified` = '" . $currTime . "'";
                            $connection->query($insertWalletUserHistoryStr);

                            $updateWalletUsers = "UPDATE `wallet_users` SET `total_amount` = '" . $new_wallet_amount . "' WHERE `user_id` = '" . $referral_user_id . "'";
                            $connection->query($updateWalletUsers);

                            $sendArrayCashback = array(
                                'channel_id' => 0,
                                'thinapp_id' => $thinapp_id,
                                'flag' => 'USER_REFERRAL',
                                'title' => 'Cashback Received!',
                                'message' => "Your wallet is updated with refferal amount of $oldUserReferAmount!",
                                'description' => '',
                                'chat_reference' => '',
                                'type' => 'USER_REFERRAL',
                                'module_type' => 'USER_REFERRAL',
                                'module_type_id' => 0,
                                'firebase_reference' => ""
                            );

                            Custom::send_notification_by_user_id($sendArrayCashback, array($referral_user_id), $thinapp_id);

                        }

                    }

                }


            }


            if ($wattetThinappSettingData['is_enable_appointment_cashback'] == 'YES') {

                $selectUserWalletStr = "SELECT `total_amount` FROM `wallet_users` WHERE `user_id` = '" . $user_id . "'";
                $selectUserWalletRS = $connection->query($selectUserWalletStr);
                $selectUserWalletData = mysqli_fetch_assoc($selectUserWalletRS);
                $totalWalletAmount = $selectUserWalletData['total_amount'];

                $new_wallet_amount = ((int)$totalWalletAmount + (int)$wattetThinappSettingData['appointment_cashback']);
                $insertWalletUserHistoryStr = "INSERT INTO `wallet_user_history` SET `user_id` = '" . $user_id . "', `thinapp_id` = '" . $thinapp_id . "', `type` = 'CASHBACK', `amount` = '" . $wattetThinappSettingData['appointment_cashback'] . "', `new_wallet_amount` = '" . $new_wallet_amount . "', `amount_type` = 'ADD', `appointment_id` = '" . $appointment_id . "', `created` = '" . $currTime . "', `modified` = '" . $currTime . "'";
                $connection->query($insertWalletUserHistoryStr);

                $updateWalletUsers = "UPDATE `wallet_users` SET `total_amount` = '" . $new_wallet_amount . "' WHERE `user_id` = '" . $user_id . "'";
                $connection->query($updateWalletUsers);

                $sendArrayCashback = array(
                    'channel_id' => 0,
                    'thinapp_id' => $thinapp_id,
                    'flag' => 'USER_REFERRAL',
                    'title' => 'Cashback Received!',
                    'message' => "Your wallet is updated with cashback amount of " . $wattetThinappSettingData['appointment_cashback'] . "!",
                    'description' => '',
                    'chat_reference' => '',
                    'type' => 'USER_REFERRAL',
                    'module_type' => 'USER_REFERRAL',
                    'module_type_id' => 0,
                    'firebase_reference' => ""
                );

                Custom::send_notification_by_user_id($sendArrayCashback, array($user_id), $thinapp_id);

            }


            //Custom::send_notification_by_user_id($sendArrayCashback, array($user_id), $thinapp_id);
            //Custom::send_notification_by_user_id($sendArrayCashback, array($user_id), $thinapp_id);


        }

    }

    public static function wallet_pay_to_doctor($payment_id, $user_id, $wallet_deduct, $thinappID)
    {

        $thinapp_id = $thinappID;
        $userID = $user_id;
        $walletThinappSettingStr = "SELECT * FROM `wallet_thinapp_settings` WHERE `thinapp_id` = '" . $thinappID . "' LIMIT 1";

        $currTime = date('Y-m-d H:i:s');
        $connection = ConnectionUtil::getConnection();
        $wattetThinappSettingRS = $connection->query($walletThinappSettingStr);
        if ($wattetThinappSettingRS->num_rows) {

            $wattetThinappSettingData = mysqli_fetch_assoc($wattetThinappSettingRS);


            $selectUserWalletStr = "SELECT `total_amount` FROM `wallet_users` WHERE `user_id` = '" . $user_id . "'";
            $selectUserWalletRS = $connection->query($selectUserWalletStr);
            $selectUserWalletData = mysqli_fetch_assoc($selectUserWalletRS);
            $totalWalletAmount = $selectUserWalletData['total_amount'];

            $new_wallet_amount = $totalWalletAmount - $wallet_deduct;
            $insertWalletUserHistoryStr = "INSERT INTO `wallet_user_history` SET `user_id` = '" . $user_id . "', `thinapp_id` = '" . $thinapp_id . "', `type` = 'DEDUCTION', `amount` = '" . $wallet_deduct . "', `new_wallet_amount` = '" . $new_wallet_amount . "', `amount_type` = 'DEDUCTION', `payment_id` = '" . $payment_id . "', `created` = '" . $currTime . "', `modified` = '" . $currTime . "'";
            $connection->query($insertWalletUserHistoryStr);

            $updateWalletUsers = "UPDATE `wallet_users` SET `total_amount` = '" . $new_wallet_amount . "' WHERE `user_id` = '" . $user_id . "'";
            $connection->query($updateWalletUsers);

        }

    }


    /********************* WALLET END **************/

    /***************** UPDATE USER PROFILE STARTS ************/

    public static function update_user_profile()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);

        if (isset($data['app_key'])) {

            try {

                $thinappID = $data['thin_app_id'];
                $mobile = $data['mobile'];
                $userID = $data['user_id'];
                $address = $data['address'];
                $username = $data['username'];
                $email = $data['email'];
                $occupation = $data['occupation'];
                $image = $data['image'];
                $dateTime = date('Y-m-d H:i:s');
                $connection = ConnectionUtil::getConnection();
                $sql = "UPDATE `users` SET `address` = ?, `username` = ?, `email` = ?, `occupation` = ?, `image` = ?, `modified` = ? WHERE `id` = ?";
                $stmt = $connection->prepare($sql);
                $stmt->bind_param('sssssss', $address, $username, $email, $occupation, $image, $dateTime, $userID);
                if ($stmt->execute()) {
                    $user_data = WebservicesFunction::getUserData($connection, $userID);
                    /*echo "<pre>";
                    print_r($user_data); die; */
                    Custom::deleteUserCache($user_data['is_support_user'], $user_data['user_id'], $mobile, $thinappID);

                    /*$file_name = Custom::encrypt_decrypt('encrypt',"user_$user_id");
                    WebservicesFunction::deleteJson(array($file_name),"user"); */

                    $response['status'] = 1;
                    $response['message'] = "Updated successfully";
                    $response['data'] = $user_data;
                    echo json_encode($response);
                    die;

                } else {
                    $response['status'] = 0;
                    $response['message'] = "Oops, Something went wrong!";
                    echo json_encode($response);
                    die;
                }


            } catch (Exception $e) {
                $response['status'] = 0;
                $response['message'] = "Oops, Something went wrong!";
                echo json_encode($response);
                die;
            }
        }
    }


    /***************** UPDATE USER PROFILE END ************/

    public static function add_doctor_refferals()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);

        if (isset($data['app_key'])) {

            try {
                $thinappID = $data['thin_app_id'];
                $mobile = $data['mobile'];
                $userID = $data['user_id'];
                $refferalList = json_decode($data['refferal_list'], true)['doctor_refferal'];
                $totalRefferals = sizeof($refferalList);
                $dateTime = date('Y-m-d H:i:s');
                $alreadyReffered = 0;
                $newReffers = 0;
                $insertRows = array();
                $insertedMobile = array();
                //name
                //mobile
                if (!empty($refferalList) && !empty($userID) && !empty($mobile) && !empty($thinappID)) {
                    $connection = ConnectionUtil::getConnection();

                    foreach ($refferalList AS $dataToInsert) {

                        $refferedName = mysqli_real_escape_string($connection, $dataToInsert['name']);
                        $refferedMobile = Custom::create_mobile_number(mysqli_real_escape_string($connection, $dataToInsert['mobile']), "+91");
                        if ($refferedMobile !== false && $refferedMobile !== $mobile) {

                            if (!in_array($refferedMobile, $insertedMobile)) {
                                $insertedMobile[] = $refferedMobile;
                                $chkThinappExistStr = "SELECT `id` FROM `users` WHERE `mobile` = '" . $refferedMobile . "' AND `role_id` = 5";
                                $chkThinappExistRS = $connection->query($chkThinappExistStr);

                                $chkRefferExistStr = "SELECT `id`,`mobile` FROM `doctor_refferals` WHERE `reffered_mobile` = '" . $refferedMobile . "' ";
                                $chkRefferExistRS = $connection->query($chkRefferExistStr);

                                if (!$chkThinappExistRS->num_rows && !$chkRefferExistRS->num_rows) {
                                    $newReffers++;

                                    $insertRows[] = "('" . $userID . "','" . $mobile . "','" . $thinappID . "','" . $refferedName . "','" . $refferedMobile . "','NEW','" . $dateTime . "','" . $dateTime . "','" . $dateTime . "','NO')";

                                } else {
                                    $chkRefferExistData = mysqli_fetch_assoc($chkRefferExistRS);

                                    if ($chkRefferExistData['mobile'] != $mobile) {
                                        $insertRows[] = "('" . $userID . "','" . $mobile . "','" . $thinappID . "','" . $refferedName . "','" . $refferedMobile . "','NEW','" . $dateTime . "','" . $dateTime . "','" . $dateTime . "','YES')";
                                    }
                                    $alreadyReffered++;

                                }

                            } else {
                                $alreadyReffered++;
                            }

                        }


                    }

                    $insertStr = implode(",", $insertRows);

                    $sqlInsert = "INSERT INTO `doctor_refferals` (`user_id`,`mobile`,`thinapp_id`,`reffered_name`,`reffered_mobile`,`status`,`created`,`modified`,`new_datetime`,`is_reffered_already`) VALUES " . $insertStr;


                    if ($connection->query($sqlInsert)) {

                        $refferalUserChk = "SELECT `id` FROM `doctor_refferal_users` WHERE `mobile` = '" . $mobile . "' AND `thinapp_id` = '" . $thinappID . "'";
                        $refferalUserChkRS = $connection->query($refferalUserChk);
                        if (!$refferalUserChkRS->num_rows) {
                            $thinappID = $data['thin_app_id'];
                            $mobile = $data['mobile'];
                            $userID = $data['user_id'];
                            $refferalUserInsert = "INSERT INTO `doctor_refferal_users` (`user_id`,`thinapp_id`,`mobile`,`refferal_points`,`created`,`modified`) VALUES ('" . $userID . "','" . $thinappID . "','" . $mobile . "','0','" . $dateTime . "','" . $dateTime . "')";
                            $connection->query($refferalUserInsert);
                        }


                        if ($totalRefferals == $newReffers) {
                            $message = "Success, All are successfully referred!";
                        } else {
                            $message = "Success, $alreadyReffered already referred from others, $newReffers new referred!";
                        }

                        $response['status'] = 1;
                        $response['message'] = $message;
                        WebservicesFunction::addUserStaticToJson('', $userID, $thinappID, $mobile, "REFER_DOCTOR", "SEND INVITE", 'add_doctor_refferals');

                        //$userData = get_user_by_id($userID);
                        //$message = $userData['username']."/nHey! I am loving my application which is made by MEngage. It has awesome features like appointment booking, medical records, chat, vaccination, doctors blog, digital pad, try it out";

                        $messageSms = "Hey! I am loving my application which is made by MEngage. It has great features like appointment booking, medical records, chat, vaccination, doctors blog, digital pad, I referred this to you, try it out";
                        Custom::SendBlukSmsToNumbers($thinappID, $messageSms, $insertedMobile, $userID);


                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Oops, All are already referred from others!";
                    }

                    echo json_encode($response);
                    die;


                } else {
                    $response['status'] = 0;
                    $response['message'] = "Oops, Invalid request params!";
                    echo json_encode($response);
                    die;
                }


            } catch (Exception $e) {
                $response['status'] = 0;
                $response['message'] = "Oops, Something went wrong!";
                echo json_encode($response);
                die;
            }


        }

    }

    public static function get_doctor_refferal_data()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);

        if (isset($data['app_key'])) {

            try {
                $thinappID = $data['thin_app_id'];
                $mobile = $data['mobile'];
                $userID = $data['user_id'];
                $connection = ConnectionUtil::getConnection();

                $strSql = "SELECT `refferal_points` FROM `doctor_refferal_users` WHERE `user_id` = '" . $userID . "'";
                $selectRS = $connection->query($strSql);
                if ($selectRS->num_rows) {
                    $selectedData = mysqli_fetch_assoc($selectRS);
                    $refferalPoints = $selectedData['refferal_points'];
                } else {
                    $refferalPoints = 0;
                }

                $dataToShow = array();
                $dataToShow['referral_points'] = $refferalPoints;
                $dataToShow['stats_path'] = FOLDER_PATH . 'refral_user_static/' . base64_encode($userID);
                $dataToShow['status'] = 1;
                WebservicesFunction::addUserStaticToJson('', $userID, $thinappID, $mobile, "REFER_DOCTOR", "VIEW REFER", 'get_doctor_refferal_data');


                echo json_encode($dataToShow);
                die;

            } catch (Exception $e) {
                $response['status'] = 0;
                $response['message'] = "Oops, Something went wrong!";
                echo json_encode($response);
                die;
            }


        }
    }





    public static function tab_update_image_certificate()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);

        if (isset($data['app_key'])) {

            try {
                $thinappID = $data['thin_app_id'];
                $uniqueID = $data['unique_id'];
                $imageUrl = $data['image_url'];
                $connection = ConnectionUtil::getConnection();

                $strSql = "UPDATE `medical_certificates` SET `image` = '" . $imageUrl . "' WHERE `unique_id` = '" . $uniqueID . "'";
                if ($connection->query($strSql)) {
                    $response['status'] = 1;
                    $response['message'] = "Image updated successfully!";
                } else {
                    $response['status'] = 0;
                    $response['message'] = "Oops, Something went wrong!";
                }


                echo json_encode($response);
                die;

            } catch (Exception $e) {
                $response['status'] = 0;
                $response['message'] = "Oops, Something went wrong!";
                echo json_encode($response);
                die;
            }


        }
    }


    public static function web_add_patient($data = null)
    {


        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $patient_type = isset($data['patient_type']) ? $data['patient_type'] : "";
            $patient_name = isset($data['patient_name']) ? trim($data['patient_name']) : "";
            $patient_mobile = isset($data['patient_mobile']) ? $data['patient_mobile'] : "";
            $blood_group = isset($data['blood_group']) ? $data['blood_group'] : "";;
            $dob = isset($data['dob']) ? $data['dob'] : "";
            $gender = isset($data['gender']) ? strtoupper($data['gender']) : "";
            $patient_address = isset($data['patient_address']) ? strtoupper($data['patient_address']) : "";
            $email = isset($data['email']) ? $data['email'] : "";
            $age = isset($data['age']) ? $data['age'] : "";
            $relation_prefix = isset($data['relation_prefix']) ? $data['relation_prefix'] : "";
            $parents_name = isset($data['parents_name']) ? $data['parents_name'] : "";
            $marital_status = isset($data['marital_status']) ? $data['marital_status'] : "";
            $blood_group = isset($data['blood_group']) ? $data['blood_group'] : "";
            $conceive_date = isset($data['conceive_date']) ? $data['conceive_date'] : "";
            $height = isset($data['height']) ? $data['height'] : "";
            $weight = isset($data['weight']) ? $data['weight'] : "";
            $head_circumference = isset($data['head_circumference']) ? $data['head_circumference'] : "";

            $country_id = isset($data['country_id']) ? $data['country_id'] : 0;
            $state_id = isset($data['state_id']) ? $data['state_id'] : 0;
            $city_id = isset($data['city_id']) ? $data['city_id'] : 0;
            $city_name = isset($data['city_name']) ? $data['city_name'] : "";


            $send_notification = false;
            $patient_id = 0;
            try {
                if (empty($thin_app_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid thinapp id';
                } else if (empty($app_key)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid app key';
                } else if (empty($user_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid user id';
                } else if (empty($mobile)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid mobile';
                } else if ($patient_type != "CUSTOMER" && $patient_type != "CHILDREN") {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid patient type';
                } else if ($patient_type == "CHILDREN" && empty($gender)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid gender';
                } else if (empty($patient_name)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid patient name';
                } else if (empty($dob) && $patient_type == "CHILDREN") {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid patient dob';
                } else {


                    if ($patient_type == "CUSTOMER") {
                        $customer_data = array();
                        if ($patient_mobile != '+919999999999') {
                            $customer_data = Custom::search_customer_name($thin_app_id, $patient_mobile, $patient_name);
                        }
                        /*else
                        {
                            $customer_data = Custom::search_customer_name_junk($thin_app_id, $patient_mobile, $patient_name);
                            if($customer_data)
                            {
                                $patient_name = $patient_name.'_'.($customer_data+1);
                            }
                            $customer_data = '';
                        }*/


                        if (empty($customer_data)) {

                            $customer = array();
                            $customer['app_key'] = $app_key;
                            $customer['thin_app_id'] = $thin_app_id;
                            $customer['user_id'] = $user_id;
                            $customer['first_name'] = $patient_name;
                            $customer['email'] = $email;
                            $customer['dob'] = $dob;
                            $customer['age'] = $age;
                            $customer['mobile'] = $patient_mobile;
                            $customer['country_code'] = "+91";
                            $customer['gender'] = strtoupper($gender);
                            $customer['relation_prefix'] = $relation_prefix;
                            $customer['parents_name'] = $parents_name;
                            $customer['marital_status'] = $marital_status;
                            $customer['blood_group'] = $blood_group;
                            $customer['conceive_date'] = $conceive_date;
                            $customer['height'] = $height;
                            $customer['weight'] = $weight;
                            $customer['head_circumference'] = $head_circumference;

                            $customer['country_id'] = $country_id;
                            $customer['state_id'] = $state_id;
                            $customer['city_id'] = $city_id;
                            $customer['city_name'] = $city_name;


                            $customer['address'] = !empty($patient_address) ? $patient_address : "";
                            $result = WebservicesFunction::appointment_add_customer($customer);
                            $result = $customer_data = json_decode($result, true);
                            if ($result['status'] == 1) {
                                $response['status'] = 1;
                                $response['message'] = "Patient add  successfully";
                                $response['result'] = $result;
                                $res = Custom::create_and_share_folder($thin_app_id, $patient_mobile, $patient_name, 'CUSTOMER', $result['customer_id']);
                            } else {
                                $response['status'] = 0;
                                $response['message'] = $result['message'];
                            }
                            return $response;


                        } else {
                            $response['status'] = 0;
                            $response['message'] = "Patient already exist.";
                            return $response;
                        }

                    } else {
                        $child = array();
                        $child['app_key'] = $app_key;
                        $child['thin_app_id'] = $thin_app_id;
                        $child['user_id'] = $user_id;
                        $child['child_name'] = $patient_name;
                        $child['mobile'] = $mobile;
                        $child['parents_mobile'] = $patient_mobile;
                        $child['dob'] = $dob;
                        $child['patient_address'] = $patient_address;
                        $child['gender'] = strtoupper($gender);
                        $child['blood_group'] = $blood_group;
                        $child['parents_name'] = $parents_name;

                        $child['height'] = $height;
                        $child['weight'] = $weight;
                        $child['head_circumference'] = $head_circumference;
                        $child['add_vaccination'] = "NO";

                        $result = WebservicesFunction::add_child($child);

                        $result = $customer_data = json_decode($result, true);
                        if ($result['status'] == 1) {
                            $response['status'] = 1;
                            $response['message'] = "Children add successfully";
                            $send_notification = true;
                            $patient_id = $result['child_id'];
                            $response['patient_id'] = $patient_id;

                        } else {
                            $response['status'] = 0;
                            $response['message'] = $result['message'];
                        }

                        if ($send_notification === true && $patient_type == "CHILDREN" && !empty($patient_id)) {
                            Custom::send_child_add_sms_and_notification($thin_app_id, $patient_id);
                        }


                    }

                }
                return $response;
            } catch (Exception $e) {
                $response['status'] = 0;
                $response['message'] = "Something went wrong on server";
                return $response;
            }

        }
        exit();
    }

    public static function web_update_general_info($data = null)
    {

        $return_type = true;

        $response = array();
        $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
        $app_key = isset($data['app_key']) ? $data['app_key'] : "";
        $user_id = isset($data['user_id']) ? $data['user_id'] : "";
        $mobile = isset($data['mobile']) ? $data['mobile'] : "";
        $address = isset($data['address']) ? $data['address'] : "";
        $patient_name = isset($data['patient_name']) ? $data['patient_name'] : "";
        $patient_mobile = isset($data['patient_mobile']) ? $data['patient_mobile'] : "";
        $patient_type = isset($data['patient_type']) ? $data['patient_type'] : "";
        $patient_id = isset($data['patient_id']) ? $data['patient_id'] : "";
        $dob = isset($data['dob']) ? $data['dob'] : "";
        $gender = isset($data['gender']) ? $data['gender'] : "";
        $email = isset($data['email']) ? $data['email'] : "";
        $blood_group = isset($data['blood_group']) ? $data['blood_group'] : '';
        $age = isset($data['age']) ? $data['age'] : '';
        $relation_prefix = isset($data['relation_prefix']) ? $data['relation_prefix'] : '';
        $parents_name = isset($data['parents_name']) ? $data['parents_name'] : '';
        $marital_status = isset($data['marital_status']) ? $data['marital_status'] : '';
        $blood_group = isset($data['blood_group']) ? $data['blood_group'] : '';


        $height = isset($data['height']) ? $data['height'] : "";
        $weight = isset($data['weight']) ? $data['weight'] : "";
        $head_circumference = isset($data['head_circumference']) ? $data['head_circumference'] : "";


        if (empty($thin_app_id)) {
            $response['status'] = 0;
            $response['message'] = 'Invalid thinapp id';
        }  /*else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            }*/ else if (empty($mobile)) {
            $response['status'] = 0;
            $response['message'] = 'Invalid mobile';
        } else if (empty($patient_id)) {
            $response['status'] = 0;
            $response['message'] = 'Invalid patient id';
        } else if ($patient_type != "CHILDREN" && $patient_type != "CUSTOMER") {
            $response['status'] = 0;
            $response['message'] = 'Invalid patient type';
        } else if ($patient_type == "CHILDREN" && !empty($gender)) {
            $response['status'] = 0;
            $response['message'] = 'Invalid gender';
        } else {

            $connection = ConnectionUtil::getConnection();
            $result = array();

            if ($patient_type == "CHILDREN") {
                $child_data = Custom::get_child_by_id($patient_id);
                if (!empty($child_data)) {
                    $admin_data = Custom::get_thinapp_admin_data($thin_app_id);
                    $post['thin_app_id'] = $thin_app_id;
                    $post['app_key'] = APP_KEY;
                    $post['user_id'] = $admin_data['id'];
                    $post['mobile'] = $mobile;
                    $post['parents_mobile'] = $patient_mobile;
                    $post['child_id'] = $patient_id;
                    $post['image'] = $child_data['image'];
                    $post['child_name'] = $patient_name;
                    if (!empty($dob)) {
                        $post['dob'] = $dob;
                    } else {
                        $post['dob'] = $child_data['dob'];
                    }

                    $post['gender'] = $child_data['gender'];
                    $post['patient_address'] = $address;
                    $post['blood_group'] = $blood_group;
                    $post['parents_name'] = $parents_name;
                    $post['relation_prefix'] = $relation_prefix;
                    $post['height'] = $height;
                    $post['weight'] = $weight;
                    $post['head_circumference'] = $head_circumference;


                    $result = WebservicesFunction::web_edit_child($post);

                    if ($result['status'] == 1) {
                        $response['status'] = 1;
                        $response['message'] = "Info update successfully.";
                    } else {
                        $response['status'] = 0;
                        $response['message'] = $result['message'];
                    }
                } else {
                    $response['status'] = 0;
                    $response['message'] = "Patient not found";
                }

            } else {


                $customer_data = Custom::get_customer_data($patient_id, $thin_app_id);
                if (!empty($customer_data)) {
                    $search_customer = Custom::search_customer_name($thin_app_id, $mobile, $patient_name);
                    if ((!$search_customer || ($search_customer['id'] == $patient_id)) || ($mobile == '+919999999999')) {
                        $userDATA = Custom::get_user_by_mobile($thin_app_id, $mobile);
                        $userID = !empty($userDATA) ? $userDATA['id'] : 0;
                        $sql = "update appointment_customers set height = ?,weight = ?,head_circumference = ?,blood_group = ?,marital_status = ?,relation_prefix = ?,parents_name = ?,gender = ?, age = ?,  address=?, email=?, dob=?, mobile=?,first_name=?,user_id=?  where id = ?";
                        $stmt = $connection->prepare($sql);
                        $dob = !empty($dob) ? date('Y-m-d', strtotime($dob)) : '';


                        $stmt->bind_param('ssssssssssssssss', $height, $weight, $head_circumference, $blood_group, $marital_status, $relation_prefix, $parents_name, $gender, $age, $address, $email, $dob, $mobile, $patient_name, $userID, $patient_id);

                        $oldMobile = $customer_data['mobile'];
                        $OldFirstName = $customer_data['first_name'];

                        $sqlUpdateFolder = "UPDATE `drive_folders` SET `folder_add_from_number`='" . $mobile . "', `folder_name`='" . $patient_name . "' WHERE `appointment_customer_id`='" . $patient_id . "' AND `thinapp_id` = '" . $thin_app_id . "'";
                        $connection->query($sqlUpdateFolder);

                        $sqlGetFolderData = "SELECT * FROM `drive_folders` WHERE `appointment_customer_id`='" . $patient_id . "' AND `thinapp_id` = '" . $thin_app_id . "'";
                        $RSgetFolderData = $connection->query($sqlGetFolderData);
                        if ($RSgetFolderData->num_rows > 0) {
                            $dataGetFolderData = mysqli_fetch_assoc($RSgetFolderData);
                            $folderId = $dataGetFolderData['id'];
                            $updateFolderShare = "UPDATE `drive_shares` SET `share_with_mobile` = '" . $mobile . "', `share_to_user_id` = '" . $userID . "' where `drive_folder_id` = '" . $folderId . "' AND `share_with_mobile` = '" . $oldMobile . "'";
                            $connection->query($updateFolderShare);
                        }
                        if ($stmt->execute()) {
                            $response['status'] = 1;
                            $response['message'] = "Info update successfully.";
                        } else {
                            $response['status'] = 0;
                            $response['message'] = "Sorry could not update.";
                        }
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Patient already exist";
                    }

                } else {
                    $response['status'] = 0;
                    $response['message'] = "Patient not found";
                }

            }
        }
        return $response;


    }


	
	
public static function refund_appointment($data=null,$return = false)
    {
        if(empty($data)){
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);
        }
        $response = array();
        $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
        $app_key = isset($data['app_key']) ? $data['app_key'] : "";
        $user_id = isset($data['user_id']) ? $data['user_id'] : "";
        $role_id = isset($data['role_id']) ? $data['role_id'] : 0;
        $mobile = isset($data['mobile']) ? $data['mobile'] : "";
        $appointment_id = isset($data['appointment_id']) ? $data['appointment_id'] : "";
        $refund_reason = isset($data['refund_reason']) ? $data['refund_reason'] : "";

        if (empty($thin_app_id)) {
            $response['status'] = 0;
            $response['message'] = 'Invalid thinapp id';
        }else if (empty($appointment_id)) {
            $response['status'] = 0;
            $response['message'] = 'Invalid appointment id';
        } else {
            $allow_refund = false;
            if($role_id != 5){
                $query = "select id from appointment_staffs where allow_refund_payment ='YES' and mobile = '$mobile' and thinapp_id = $thin_app_id and status='ACTIVE' limit 1";
                $connection = ConnectionUtil::getConnection();
                $data_ = $connection->query($query);
                if ($data_->num_rows) {
                    $allow_refund = true;
                }
            }else{
                $allow_refund = true;
            }
            if($allow_refund===true){
                $connection = ConnectionUtil::getConnection();
                $query = "SELECT acss.status,  mpo.cashfree_refund_id, mpo.appointment_customer_staff_service_id, mpo.id as medical_product_order_id, IFNULL(mp.name,mpod.service) AS service_name,mpod.medical_product_id AS service_id, mpod.id AS detail_id, mpod.total_amount, mpod.show_into_receipt FROM  appointment_customer_staff_services as acss join medical_product_orders AS mpo on acss.medical_product_order_id = mpo.id left JOIN  medical_product_order_details AS mpod  ON mpod.medical_product_order_id = mpo.id left JOIN medical_products AS mp ON mp.id = mpod.medical_product_id WHERE  acss.id = $appointment_id";
                $data = $connection->query($query);
                if ($data->num_rows) {
                    $order_total_amount = $order_refund_amount = $medical_product_id = 0;
                    $detail_data = mysqli_fetch_all($data,MYSQL_ASSOC);
                    if($detail_data[0]['status']!='REFUND'){
                        $created = Custom::created();
                        $connection->autocommit(false);
                        $update_order = array();
                        foreach($detail_data as $key => $detail){
                            if($key==0){
                                $medical_product_id = $detail['medical_product_order_id'];
                                $appointment_id = $detail['appointment_customer_staff_service_id'];
                            }
                            $refund_amount = $detail['total_amount'];
                            $total_amount = 0;
                            $order_total_amount += $detail['total_amount'];
                            $order_refund_amount += $refund_amount;
                            if($detail['total_amount'] >= $refund_amount){
                                $query = "update medical_product_order_details set total_amount =?, refund_amount =?, modified =? where id = ?";
                               // $connection = ConnectionUtil::getConnection();
                                $stmt = $connection->prepare($query);
                                $stmt->bind_param('ssss', $total_amount, $refund_amount, $created, $detail['detail_id']);
                                $update_order[] = $stmt->execute();
                            }
                        }
                        if(!empty($update_order)){
                            $result =array();
                            if(!empty($update_order) && !in_array(false,$update_order)){
                                $order_total_amount = $order_total_amount - $order_refund_amount;
                                /* APPOINTMENT REFUND */
                                if(!empty($appointment_id)){
                                    $refund_status = "REFUND";
                                    $query = "update appointment_customer_staff_services set status =?, delete_status =?, refund_by_user_id =?, refund_reason =?, refund_amount =?, modified =?    where id = ?";
                                  //  $connection = ConnectionUtil::getConnection();
                                    $app_stmt = $connection->prepare($query);
                                    $app_stmt->bind_param('sssssss', $refund_status,$refund_status, $user_id, $refund_reason, $order_refund_amount, $created, $appointment_id);
                                    $result[] =$app_stmt->execute();
                                }
                                /* ORDER REFUND*/
                                $is_refunded = "YES";
                               $query = "update medical_product_orders set refund_date_time=?, refund_by_user_id =?, is_refunded =?, total_amount =?, refund_amount =? , modified =? where id = ?";
                                $order_stmt = $connection->prepare($query);
                                $order_stmt->bind_param('sssssss', $created, $user_id, $is_refunded,  $order_total_amount, $order_refund_amount, $created, $medical_product_id);
                                
                                $result[] =$order_stmt->execute();
                                if(!empty($result) && !in_array(false,$result)) {

                                    $allow_commit = true;
                                    $message="";
                                    $detail_data = Custom::getCashFreeOnlineAmount($appointment_id,$thin_app_id);
                                    if (!empty($detail_data)) {
                                        $referenceId = $detail_data['refrence_id'];
                                        $medical_product_order_id = $detail_data['medical_product_order_id'];
                                        $amount = $detail_data['amount'];
                                        if(!empty($referenceId) && !empty($amount)){
                                            $result = json_decode(Custom::cashFreeRefund($connection,$thin_app_id,$user_id,$medical_product_order_id, $referenceId,$amount,$detail_data['booking_convenience_order_detail_id'],$refund_reason,$detail_data['payment_mode']),true);
                                            if($result['status']=='OK'){
                                                $allow_commit = true;
                                            }else{
                                                $allow_commit = false;
                                                $message = $result['message'];
                                            }
                                        }
                                    }

                                    if($allow_commit===true){
                                        $connection->commit();
                                        $response['status'] = 1;
                                        $response['message'] = "Refund process started for this appointment";
                                    }else{
                                        $connection->rollback();
                                        $response['status'] = 0;
                                        $response['message'] = $message;
                                    }

                                } else {
                                    $connection->rollback();
                                    $response['status'] = 0;
                                    $response['message'] = "Sorry, Refund could not update";
                                }
                            }else{
                                $connection->rollback();
                                $response['status'] = 0;
                                $response['message'] = "Sorry, Refund could not update";
                            }
                        }else{
                            $connection->rollback();
                            $response['status'] = 0;
                            $response['message'] = "Sorry, Refund could not update";
                        }
                    }else{
                        $response['status'] = 0;
                        $response['message'] = "You have already processed refund for this appointment";
                    }
                }else{
                    $response['status'] = 0;
                    $response['message'] = "Invalid appointment";
                }
            }else{
                $response['status'] = 0;
                $response['message'] = "Sorry, You are not allowed to refund";
            }
        }
        if($return===true){
            return json_encode($response);
        }else{
            Custom::sendResponse($response);
        }
        exit();


    }


    public static function get_payment_stats()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        $response = array();
        if (isset($data['app_key'])) {

            try {

                $offset = isset($data['offset']) ? $data['offset'] : 0;
                //$date = isset($data['date']) ? $data['date'] : "";
                $search = isset($data['search']) ? $data['search'] : "";
                $type = isset($data['type']) ? $data['type'] : "appointment";


                $startDate = isset($data['start_date']) ? $data['start_date'] : "";
                $endDate = isset($data['end_date']) ? $data['end_date'] : "";

                $accountType = isset($data['account_type']) ? $data['account_type'] : "";


                $limit = PAGINATION_LIMIT;
                $offset = ($offset * PAGINATION_LIMIT);

                $condition = array();

                if ($type == 'appointment') {
                    /*if($date != '')
                    {
                        $date = explode('-',$date);
                        $date = $date[2].'-'.$date[1].'-'.$date[0];
                        $condition[] = "DATE(`AppointmentCustomerStaffService`.`created`) = '".$date."'";
                    } */

                    if ($startDate != '') {
                        $startDate = explode('-', $startDate);
                        $startDate = $startDate[2] . '-' . $startDate[1] . '-' . $startDate[0];
                        $condition[] = "DATE(`AppointmentCustomerStaffService`.`created`) >= '" . $startDate . "'";
                    }

                    if ($endDate != '') {
                        $endDate = explode('-', $endDate);
                        $endDate = $endDate[2] . '-' . $endDate[1] . '-' . $endDate[0];
                        $condition[] = "DATE(`AppointmentCustomerStaffService`.`created`) <= '" . $endDate . "'";
                    }

                    if ($search != '') {
                        $condition[] = "(`AppointmentCustomer`.`first_name` LIKE '%" . $search . "%' OR  `Children`.`child_name` LIKE '%" . $search . "%')";
                    }

                    if ($accountType == 'mengage') {
                        $condition[] = "(IF( `AppointmentCustomerStaffService`.`payment_receive_account` = 'APP_ADMIN', 'APP_ADMIN', 'MENGAGE' )) = 'MENGAGE'";
                    }

                    if ($accountType == 'self') {
                        $condition[] = "(IF( `AppointmentCustomerStaffService`.`payment_receive_account` = 'APP_ADMIN', 'APP_ADMIN', 'MENGAGE' )) = 'APP_ADMIN'";
                    }

                    if (!empty($condition)) {
                        $condition = "AND " . implode(' AND ', $condition);
                    } else {
                        $condition = "";
                    }
                    $thinappID = $data['thin_app_id'];
                    $sql = "SELECT DATE_FORMAT(`AppointmentCustomerStaffService`.`created`,'%d/%m/%y') as date, `AppointmentCustomerStaffService`.`payment_status`, `AppointmentCustomerStaffService`.`amount`, IF( `AppointmentCustomerStaffService`.`payment_receive_account` = 'APP_ADMIN', 'APP_ADMIN', 'MENGAGE' ) AS account, IF( `AppointmentCustomer`.`first_name` <> '',`AppointmentCustomer`.`first_name`,`Children`.`child_name` ) AS `name`, IF( `Children`.`mobile` <> '',`Children`.`mobile`,`AppointmentCustomer`.`mobile`) AS mobile FROM `appointment_customer_staff_services` AS `AppointmentCustomerStaffService` LEFT JOIN `appointment_customers` AS `AppointmentCustomer` ON (`AppointmentCustomerStaffService`.`appointment_customer_id` = `AppointmentCustomer`.`id`) LEFT JOIN `childrens` AS `Children` ON (`AppointmentCustomerStaffService`.`children_id` = `Children`.`id`) LEFT JOIN `thinapps` AS `Thinapp` ON (`AppointmentCustomerStaffService`.`thinapp_id` = `Thinapp`.`id`) WHERE `AppointmentCustomerStaffService`.`thinapp_id` = '" . $thinappID . "' AND `AppointmentCustomerStaffService`.`booking_payment_type` = 'ONLINE' AND `AppointmentCustomerStaffService`.`payment_status` != 'PENDING' " . $condition . " ORDER BY `AppointmentCustomerStaffService`.`id` DESC LIMIT $limit OFFSET $offset";
                    $connection = ConnectionUtil::getConnection();
                    $appointmentRS = $connection->query($sql);

                    if ($appointmentRS->num_rows) {
                        $appointmentData = mysqli_fetch_all($appointmentRS, MYSQLI_ASSOC);

                        $sqlTotal = "SELECT DATE_FORMAT(`AppointmentCustomerStaffService`.`created`,'%d/%m/%y') as date, `AppointmentCustomerStaffService`.`payment_status`, SUM(`AppointmentCustomerStaffService`.`amount`) AS `total_received_amount`, IF( `AppointmentCustomerStaffService`.`payment_receive_account` = 'APP_ADMIN', 'APP_ADMIN', 'MENGAGE' ) AS account, IF( `AppointmentCustomer`.`first_name` <> '',`AppointmentCustomer`.`first_name`,`Children`.`child_name` ) AS `name`, IF( `Children`.`mobile` <> '',`Children`.`mobile`,`AppointmentCustomer`.`mobile`) AS mobile FROM `appointment_customer_staff_services` AS `AppointmentCustomerStaffService` LEFT JOIN `appointment_customers` AS `AppointmentCustomer` ON (`AppointmentCustomerStaffService`.`appointment_customer_id` = `AppointmentCustomer`.`id`) LEFT JOIN `childrens` AS `Children` ON (`AppointmentCustomerStaffService`.`children_id` = `Children`.`id`) LEFT JOIN `thinapps` AS `Thinapp` ON (`AppointmentCustomerStaffService`.`thinapp_id` = `Thinapp`.`id`) WHERE `AppointmentCustomerStaffService`.`payment_status` = 'SUCCESS' AND `AppointmentCustomerStaffService`.`thinapp_id` = '" . $thinappID . "' AND `AppointmentCustomerStaffService`.`booking_payment_type` = 'ONLINE' AND `AppointmentCustomerStaffService`.`payment_status` != 'PENDING' " . $condition . " LIMIT 1";
                        $appointmentTotalRS = $connection->query($sqlTotal);
                        $appointmentTotalData = mysqli_fetch_assoc($appointmentTotalRS);
                        $total = $appointmentTotalData['total_received_amount'];

                        $response['status'] = 1;
                        $response['data']['list'] = $appointmentData;
                        $response['data']['total'] = $total;
                        $response['message'] = "Data list foud!";
                    } else {
                        $response['status'] = 0;
                        $sqlTotal = "SELECT DATE_FORMAT(`AppointmentCustomerStaffService`.`created`,'%d/%m/%y') as date, `AppointmentCustomerStaffService`.`payment_status`, SUM(`AppointmentCustomerStaffService`.`amount`) AS `total_received_amount`, IF( `AppointmentCustomerStaffService`.`payment_receive_account` = 'APP_ADMIN', 'APP_ADMIN', 'MENGAGE' ) AS account, IF( `AppointmentCustomer`.`first_name` <> '',`AppointmentCustomer`.`first_name`,`Children`.`child_name` ) AS `name`, IF( `Children`.`mobile` <> '',`Children`.`mobile`,`AppointmentCustomer`.`mobile`) AS mobile FROM `appointment_customer_staff_services` AS `AppointmentCustomerStaffService` LEFT JOIN `appointment_customers` AS `AppointmentCustomer` ON (`AppointmentCustomerStaffService`.`appointment_customer_id` = `AppointmentCustomer`.`id`) LEFT JOIN `childrens` AS `Children` ON (`AppointmentCustomerStaffService`.`children_id` = `Children`.`id`) LEFT JOIN `thinapps` AS `Thinapp` ON (`AppointmentCustomerStaffService`.`thinapp_id` = `Thinapp`.`id`) WHERE `AppointmentCustomerStaffService`.`payment_status` = 'SUCCESS' AND `AppointmentCustomerStaffService`.`thinapp_id` = '" . $thinappID . "' AND `AppointmentCustomerStaffService`.`booking_payment_type` = 'ONLINE' AND `AppointmentCustomerStaffService`.`payment_status` != 'PENDING' " . $condition . " LIMIT 1";
                        $appointmentTotalRS = $connection->query($sqlTotal);
                        $appointmentTotalData = mysqli_fetch_assoc($appointmentTotalRS);
                        $total = isset($appointmentTotalData['total_received_amount']) ? $appointmentTotalData['total_received_amount'] : 0;

                        $response['data']['total'] = $total;
                        $response['message'] = "Oops, No more data found!";
                    }
                } else {
				
                	 $condition = "";
                	if ($startDate != '') {
                        $startDate = explode('-', $startDate);
                        $startDate = $startDate[2] . '-' . $startDate[1] . '-' . $startDate[0];
                        $condition .= " AND DATE(up.created) >= '$startDate'";
                    }

                    if ($endDate != '') {
                        $endDate = explode('-', $endDate);
                        $endDate = $endDate[2] . '-' . $endDate[1] . '-' . $endDate[0];
                        $condition .= " AND DATE(up.created) <= '$endDate'";
                    }

                    if ($search != '') {
                        $condition .= " AND sender.username LIKE '%$search%'";
                    }

                    if ($accountType == 'mengage') {
                        $condition .= " AND up.payment_receive_account = 'MENGAGE'";
                    }

                    if ($accountType == 'self') {
                        $condition .= " AND up.payment_receive_account = 'APP_ADMIN'";
                    }

                   

					$thinappID = $data['thin_app_id'];
					$total=0;
                    $sql = "SELECT sum(up.total_price) AS total FROM user_payments AS up LEFT JOIN users AS sender ON sender.id= up.user_id WHERE up.thinapp_id = $thinappID and up.transaction_status='SUCCESS' $condition";
                    $connection = ConnectionUtil::getConnection();
                    $appointmentRS = $connection->query($sql);
                    if ($appointmentRS->num_rows) {
                        $total = mysqli_fetch_assoc($appointmentRS)['total'];
                    }
                	


                    
                   $sql = "SELECT DATE_FORMAT(up.created,'%d/%m/%y') as date, up.transaction_status AS payment_status, up.total_price AS amount, '' AS account, sender.username AS name, sender.mobile FROM user_payments AS up LEFT JOIN users AS sender ON sender.id= up.user_id WHERE up.thinapp_id = $thinappID $condition ORDER BY up.id DESC LIMIT $offset, $limit";
                    $connection = ConnectionUtil::getConnection();
                    $appointmentRS = $connection->query($sql);
                    if ($appointmentRS->num_rows) {
                        $appointmentData = mysqli_fetch_all($appointmentRS, MYSQLI_ASSOC);
                        $response['status'] = 1;
                        $response['data']['list'] = $appointmentData;
                    	$response['data']['total'] = $total;
                        $response['message'] = "Data list foud!";
                    } else {
                        $response['status'] = 0;
                    	$response['data']['total'] = $total;
                        $response['message'] = "Oops, No more data found!";
                    }
                   
                }


                echo json_encode($response);
                die;


            } catch (Exception $e) {
                $response['status'] = 0;
                $response['message'] = "Oops, Something went wrong!";
                echo json_encode($response);
                die;
            }

        }
        die;

    }


    public static function getPresignedUrl()
    {
        Custom::getPresignedUrl();
        die;
    }


    /********************TELEMEDICINE START*******************/


    public static function get_telemedicine_setting_data($returnJson = true)
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {


            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            if (empty($doctor_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter staff id';
            } else if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else {

                $sql = "SELECT `id`,`audio_call_mobile`,`consult_email`,`enable_chat`,`enable_audio`,`enable_video`,`enable_email`,`enable_patient_call` FROM `telemedicine_availabilities` WHERE `telemedicine_availabilities`.`user_id` = '" . $user_id . "' AND `telemedicine_availabilities`.`appointment_staff_id` = '" . $doctor_id . "' AND `telemedicine_availabilities`.`status` = 'ACTIVE' LIMIT 1";
                $connection = ConnectionUtil::getConnection();
                $telemedicineAvailabilityRS = $connection->query($sql);

                if ($telemedicineAvailabilityRS->num_rows) {

                    $telemedicineAvailabilityData = mysqli_fetch_assoc($telemedicineAvailabilityRS);
                    $telemedicineAvailabilityID = $telemedicineAvailabilityData['id'];
                    $sql1 = "SELECT `telemedicine_languages`.`language` FROM `telemedicine_languages` WHERE `telemedicine_languages`.`telemedicine_availability_id` = '" . $telemedicineAvailabilityID . "' AND `telemedicine_languages`.`status` = 'ACTIVE'";
                    $telemedicineLanguageRS = $connection->query($sql1);
                    $telemedicineLanguageDataArr = mysqli_fetch_all($telemedicineLanguageRS, MYSQLI_ASSOC);
                    $telemedicineLanguageData = array('is_english' => false, 'is_hindi' => false, 'is_other' => false,);
                    foreach ($telemedicineLanguageDataArr AS $lang) {
                        if ($lang['language'] == 'english') {
                            $telemedicineLanguageData['is_english'] = true;
                        } else if ($lang['language'] == 'hindi') {
                            $telemedicineLanguageData['is_hindi'] = true;
                        } else {
                            $telemedicineLanguageData['is_other'] = $lang['language'];
                        }

                    }


                    $sql2 = "SELECT `id`,`telemedicine_availability_id`,`attention_type`,`telemedicine_service_type`,`payment_type`,`price`,`validity_type`,`validity`,`description`,`response_time_type`,`response_time`,`status`, 'YES' AS `has_data` FROM `telemedicine_services` WHERE `telemedicine_services`.`telemedicine_availability_id` = '" . $telemedicineAvailabilityID . "' AND `telemedicine_services`.`status` = 'ACTIVE'";
                    $telemedicineServiceRS = $connection->query($sql2);
                    $telemedicineServiceData = mysqli_fetch_all($telemedicineServiceRS, MYSQLI_ASSOC);

                    $telemedicineService = array(
                        "GENERAL" => array(
                            'CHAT' => array('has_data' => 'NO'),
                            'AUDIO_CALL' => array('has_data' => 'NO'),
                            'VIDEO_CALL' => array('has_data' => 'NO'),
                            'EMAIL' => array('has_data' => 'NO')
                        ),
                        "EMERGENCY" => array(
                            'CHAT' => array('has_data' => 'NO'),
                            'AUDIO_CALL' => array('has_data' => 'NO'),
                            'VIDEO_CALL' => array('has_data' => 'NO'),
                            'EMAIL' => array('has_data' => 'NO')
                        ),
                    );

                    foreach ($telemedicineServiceData AS $val) {
                        $telemedicineService[$val['attention_type']][$val['telemedicine_service_type']] = $val;
                    }

                    $dataToSend = array();
                    $dataToSend['availability'] = $telemedicineAvailabilityData;
                    $dataToSend['language'] = $telemedicineLanguageData;
                    $dataToSend['service'] = $telemedicineService;

                    $response['status'] = 1;
                    $response['data'] = $dataToSend;
                    $response['message'] = 'Setting Found';
                } else {
                    $response['status'] = 0;
                    $response['message'] = 'No Setting Found';
                }

            }
            if ($returnJson == true) {
                Custom::sendResponse($response);
                exit();
            } else {
                return $response;
            }


        }

    }

    public static function add_telemedicine_availability()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {


            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $audio_call_mobile = isset($data['audio_call_mobile']) ? $data['audio_call_mobile'] : "";
            $consult_email = isset($data['consult_email']) ? $data['consult_email'] : "";
            $enable_chat = isset($data['enable_chat']) ? $data['enable_chat'] : "N";
            $enable_audio = isset($data['enable_audio']) ? $data['enable_audio'] : "N";
            $enable_video = isset($data['enable_video']) ? $data['enable_video'] : "N";
            $enable_email = isset($data['enable_email']) ? $data['enable_email'] : "N";
            $enable_patient_call = isset($data['enable_patient_call']) ? $data['enable_patient_call'] : "N";


            if (empty($doctor_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter staff id';
            } else if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (($enable_audio == 'Y') && empty($audio_call_mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else if (($enable_audio == 'Y') && !(Custom::create_mobile_number($audio_call_mobile))) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else if (($enable_email == 'Y') && empty($consult_email)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid email';
            } else {
                $dateTime = date('Y-m-d H:i:s');
                $audio_call_mobile = Custom::create_mobile_number($audio_call_mobile);
                $sql = "SELECT `id` FROM `telemedicine_availabilities` WHERE `user_id` = '" . $user_id . "' AND `appointment_staff_id` = '" . $doctor_id . "' LIMIT 1";

                $connection = ConnectionUtil::getConnection();
                $telemedicineRS = $connection->query($sql);

                if ($telemedicineRS->num_rows) {
                    $sqlUpdate = "UPDATE `telemedicine_availabilities` SET `audio_call_mobile` = '" . $audio_call_mobile . "',`consult_email` = '" . $consult_email . "',`enable_chat` = '" . $enable_chat . "',`enable_audio` = '" . $enable_audio . "',`enable_video` = '" . $enable_video . "',`enable_email` = '" . $enable_email . "',`enable_patient_call` = '" . $enable_patient_call . "',`modified` = '" . $dateTime . "' WHERE `user_id` = '" . $user_id . "' AND `appointment_staff_id` = '" . $doctor_id . "'";
                } else {
                    $sqlUpdate = "INSERT INTO `telemedicine_availabilities` (`thinapp_id`,`user_id`,`appointment_staff_id`,`audio_call_mobile`,`consult_email`,`enable_chat`,`enable_audio`,`enable_video`,`enable_email`,`enable_patient_call`,`created`,`modified`) VALUES ('" . $thin_app_id . "','" . $user_id . "','" . $doctor_id . "','" . $audio_call_mobile . "','" . $consult_email . "','" . $enable_chat . "','" . $enable_audio . "','" . $enable_video . "','" . $enable_email . "','" . $enable_patient_call . "','" . $dateTime . "','" . $dateTime . "')";

                }

                if ($connection->query($sqlUpdate)) {
                    $response['status'] = 1;
                    $response['message'] = 'Updated Successfully';
                } else {
                    $response['status'] = 0;
                    $response['message'] = 'Something Went Wrong!';
                }


            }
            Custom::sendResponse($response);
        }
        exit();
    }

    public static function add_telemedicine_languages()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {


            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $telemedicine_availability_id = isset($data['telemedicine_availability_id']) ? $data['telemedicine_availability_id'] : "";
            $languageArr = isset($data['language_arr']) ? $data['language_arr'] : "";

            if (empty($doctor_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter staff id';
            } else if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($telemedicine_availability_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid telemedicine id';
            } else if (empty($languageArr)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid language';
            } else {
                $dateTime = date('Y-m-d H:i:s');
                $connection = ConnectionUtil::getConnection();
                $connection->autocommit(false);
                $sql1 = "";
                //$languageArr = explode(',',$languageArr);
                foreach ($languageArr AS $key => $val) {
                    $comma = ($key > 0) ? "," : "";
                    $sql1 .= $comma . "('" . $telemedicine_availability_id . "','" . $thin_app_id . "','" . $user_id . "','" . $doctor_id . "','" . $val . "','" . $dateTime . "','" . $dateTime . "') ";
                }

                $sql = "INSERT INTO `telemedicine_languages` (`telemedicine_availability_id`,`thinapp_id`,`user_id`,`appointment_staff_id`,`language`,`created`,`modified`) VALUES " . $sql1;


                $delete = "DELETE FROM `telemedicine_languages` WHERE `telemedicine_availability_id` = '" . $telemedicine_availability_id . "'";

                if ($connection->query($delete)) {

                    if ($connection->query($sql)) {
                        $connection->commit();
                        $response['status'] = 1;
                        $response['message'] = 'Successfully updated';
                    } else {
                        $connection->rollback();
                        $response['status'] = 0;
                        $response['message'] = 'Something went wrong';
                    }

                } else {
                    $connection->rollback();
                    $response['status'] = 0;
                    $response['message'] = 'Something went wrong';
                }


            }
            Custom::sendResponse($response);
        }
        exit();
    }

    public static function get_telemedicine_setting_user()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {


            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            if (empty($doctor_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter staff id';
            } else if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else {
                $dateTime = date('Y-m-d H:i:s');

                $sql_wallet = "SELECT `total_amount` FROM `wallet_users` WHERE `wallet_users`.`user_id` = '" . $user_id . "' LIMIT 1";
                $connection = ConnectionUtil::getConnection();
                $walletamount = $connection->query($sql_wallet);


                if ($walletamount->num_rows) {
                    $walletData = mysqli_fetch_assoc($walletamount);
                    $wallet_amount = $walletData['total_amount'];
                } else {
                    $wallet_amount = 0;
                }

                $sql = "SELECT `id`,`audio_call_mobile`,`consult_email`,`enable_chat`,`enable_audio`,`enable_video`,`enable_email`,`enable_patient_call` FROM `telemedicine_availabilities` WHERE `telemedicine_availabilities`.`appointment_staff_id` = '" . $doctor_id . "' AND `telemedicine_availabilities`.`status` = 'ACTIVE' AND `telemedicine_availabilities`.`thinapp_id` = '" . $thin_app_id . "' LIMIT 1";

                $telemedicineAvailabilityRS = $connection->query($sql);

                if ($telemedicineAvailabilityRS->num_rows) {

                    $telemedicineAvailabilityData = mysqli_fetch_assoc($telemedicineAvailabilityRS);
                    $telemedicineAvailabilityID = $telemedicineAvailabilityData['id'];


                    $sql2 = "SELECT `id`,`telemedicine_availability_id`,`attention_type`,`telemedicine_service_type`,concat(`price`,' INR','/',`payment_type`) as display_price,IF(`payment_type` = 'MINS',(`price`*5),`price`) AS `user_should_have_balance`,`payment_type`,`price`,`validity_type`,`validity`,CONCAT(`description`,'\n Response Time: ',`response_time`,`response_time_type`) AS `description`,`response_time_type`,`response_time`,`status`, 'YES' AS `has_data`, 'NO' AS `is_running`, '0000-00-00 00:00:00' AS `end_time` FROM `telemedicine_services` WHERE `telemedicine_services`.`telemedicine_availability_id` = '" . $telemedicineAvailabilityID . "' AND `telemedicine_services`.`status` = 'ACTIVE'";
                    $telemedicineServiceRS = $connection->query($sql2);
                    $telemedicineServiceData = mysqli_fetch_all($telemedicineServiceRS, MYSQLI_ASSOC);


                    $telemedicineService = array(
                        "GENERAL" => array(
                            'CHAT' => array('has_data' => 'NO', 'is_running' => 'NO', 'end_time' => '0000-00-00 00:00:00'),
                            'AUDIO_CALL' => array('has_data' => 'NO', 'is_running' => 'NO', 'end_time' => '0000-00-00 00:00:00'),
                            'VIDEO_CALL' => array('has_data' => 'NO', 'is_running' => 'NO', 'end_time' => '0000-00-00 00:00:00'),
                            'EMAIL' => array('has_data' => 'NO', 'is_running' => 'NO', 'end_time' => '0000-00-00 00:00:00')
                        ),
                        "EMERGENCY" => array(
                            'CHAT' => array('has_data' => 'NO', 'is_running' => 'NO', 'end_time' => '0000-00-00 00:00:00'),
                            'AUDIO_CALL' => array('has_data' => 'NO', 'is_running' => 'NO', 'end_time' => '0000-00-00 00:00:00'),
                            'VIDEO_CALL' => array('has_data' => 'NO', 'is_running' => 'NO', 'end_time' => '0000-00-00 00:00:00'),
                            'EMAIL' => array('has_data' => 'NO', 'is_running' => 'NO', 'end_time' => '0000-00-00 00:00:00')
                        ),
                    );


                    $serviceID = array();

                    foreach ($telemedicineServiceData AS $val) {
                    	if($val['payment_type'] != 'MIN'){
                            $val['user_should_have_balance'] = Custom::telemedicineRequiredBalnce($val['user_should_have_balance']);
                        }
                        $telemedicineService[$val['attention_type']][$val['telemedicine_service_type']] = $val;
                        $serviceID[] = $val['id'];
                    }

                    $serviceID = "('" . implode("','", $serviceID) . "')";
                    $sql3 = "SELECT * FROM `telemedicine_leads` WHERE `id` IN " . $serviceID . " AND `start_status` = 'STARTED' AND `status` = 'ACTIVE' AND `start_time` >= '" . $dateTime . "' AND `end_time` <= '" . $dateTime . "'";
                    $telemedicineLeadRS = $connection->query($sql3);

                    if ($telemedicineLeadRS->num_rows) {
                        $telemedicineLeadData = mysqli_fetch_all($telemedicineLeadRS, MYSQLI_ASSOC);

                        foreach ($telemedicineLeadData AS $val) {
                            $telemedicineService[$val['attention_type']][$val['telemedicine_service_type']]['is_running'] = "YES";
                            $telemedicineService[$val['attention_type']][$val['telemedicine_service_type']]['end_time'] = $val['end_time'];
                        }

                    }


                    $dataToSend = array();
                    $dataToSend['availability'] = $telemedicineAvailabilityData;
                    $dataToSend['service'] = $telemedicineService;
                    $response['status'] = 1;
                    $response['data'] = $dataToSend;
                    $response['message'] = 'Setting Found';
                    $response['wallet_amount'] = $wallet_amount;
                } else {
                    $response['wallet_amount'] = $wallet_amount;
                    $response['status'] = 0;
                    $response['message'] = 'No Setting Found';
                }

            }
            Custom::sendResponse($response);

        }
        exit();
    }

    public static function get_telemedicine_lead()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $role_id = isset($data['role_id']) ? $data['role_id'] : "";

            if (empty($doctor_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter staff id';
            } else if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else {
                $today = date('Y-m-d');

                //$condition = "`telemedicine_leads`.`appointment_staff_id` = '" . $doctor_id . "' AND ";
                $condition = "";


                $select = "SELECT `telemedicine_leads`.`id`,IF(`telemedicine_leads`.`consult_for` = 'self',`users`.`username`,`telemedicine_leads`.`consult_for_name`) AS `username`,`telemedicine_leads`.`mobile`,`telemedicine_leads`.`lead_status`,`telemedicine_leads`.`telemedicine_service_id`,`telemedicine_leads`.`attention_type`,`telemedicine_leads`.`telemedicine_service_type`,`telemedicine_leads`.`payment_type`,`telemedicine_leads`.`price`,`telemedicine_leads`.`validity_type`,`telemedicine_leads`.`validity`,`telemedicine_leads`.`consult_now`,`telemedicine_leads`.`consult_time`,`telemedicine_leads`.`start_time`,`telemedicine_leads`.`end_time`,`telemedicine_leads`.`accept_status`,`telemedicine_leads`.`start_status`,`telemedicine_leads`.`is_doctor_available`,`telemedicine_leads`.`is_paid`,`telemedicine_leads`.`amount`,`telemedicine_leads`.`created`,`appointment_staffs`.`name` AS `doctor_name`,IF(`telemedicine_leads`.`user_id` = '" . $user_id . "',`appointment_staffs`.`mobile`,`telemedicine_leads`.`mobile`) AS `to_mobile`,IF(`telemedicine_leads`.`user_id` = '" . $user_id . "','USER','DOCTOR') AS `request_user_type` FROM `telemedicine_leads` LEFT JOIN `users` ON (`telemedicine_leads`.`user_id` = `users`.`id`) LEFT JOIN `appointment_staffs` ON (`appointment_staffs`.`id` = `telemedicine_leads`.`appointment_staff_id`) WHERE " . $condition . "`telemedicine_leads`.`appointment_staff_id` = '" . $doctor_id . "' AND `telemedicine_leads`.`status` = 'ACTIVE' AND DATE(`telemedicine_leads`.`created`) = '" . $today . "' AND `telemedicine_leads`.`thinapp_id` = '" . $thin_app_id . "' AND  `telemedicine_leads`.`has_answered_question` = 'Y' AND `telemedicine_leads`.`lead_status` != 'CLOSE'  AND `telemedicine_leads`.`is_refund` = 'NO' ORDER BY `id` DESC";

                $connection = ConnectionUtil::getConnection();
                $telemedicineLeadRS = $connection->query($select);
                if ($telemedicineLeadRS->num_rows) {
                    $telemedicineLeadData = mysqli_fetch_all($telemedicineLeadRS, MYSQLI_ASSOC);
                    $response['status'] = 1;
                    $response['data']['list'] = $telemedicineLeadData;
                    $response['message'] = 'Setting Found';
                } else {
                    $response['status'] = 0;

                    $response['message'] = 'No List Found';
                }


            }
            Custom::sendResponse($response);
            exit();
        }
    }

    public static function get_telemedicine_history()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";

            $fromDate = isset($data['fromDate']) ? $data['fromDate'] : "";
            $toDate = isset($data['toDate']) ? $data['toDate'] : "";
            $hasChat = isset($data['hasChat']) ? $data['hasChat'] : "N";
            $hasVideo = isset($data['hasVideo']) ? $data['hasVideo'] : "N";
            $hasAudio = isset($data['hasAudio']) ? $data['hasAudio'] : "N";
            $isPaid = isset($data['is_paid']) ? $data['is_paid'] : "";
            $doctorID = isset($data['doctor_id']) ? $data['doctor_id'] : "";
            $offset = isset($data['offset']) ? $data['offset'] : 0;

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($doctorID)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid doctor id';
            } else {
                $limit = PAGINATION_LIMIT;
                $offset = ($offset * PAGINATION_LIMIT);

                $condition = " AND `telemedicine_leads`.`status` ='ACTIVE' AND `telemedicine_leads`.`thinapp_id` = $thin_app_id ";


                if (!empty($fromDate)) {
                    $fromDate = DateTime::createFromFormat('d-m-Y', $fromDate);
                    $fromDate = $fromDate->format('Y-m-d');

                    $condition .= " AND DATE(`telemedicine_leads`.`created`) >= '" . $fromDate . "' ";
                }

                if (!empty($toDate)) {
                    $toDate = DateTime::createFromFormat('d-m-Y', $toDate);
                    $toDate = $toDate->format('Y-m-d');
                    $condition .= " AND DATE(`telemedicine_leads`.`created`) <= '" . $toDate . "' ";
                }


                if (!empty($isPaid)) {
                    $condition .= " AND `telemedicine_leads`.`is_paid` = '" . $isPaid . "' ";
                }

                $conditionOR = array();

                if ($hasChat == 'Y') {
                    $conditionOR[] = 'CHAT';
                }
                if ($hasAudio == 'Y') {
                    $conditionOR[] = 'AUDIO_CALL';
                }
                if ($hasVideo == 'Y') {
                    $conditionOR[] = 'VIDEO_CALL';
                }

                if (!empty($conditionOR)) {
                    $condition .= "AND `telemedicine_service_type` IN ('" . implode("','", $conditionOR) . "') ";
                }

                $leadSql = "SELECT `telemedicine_leads`.`id`,IF(`telemedicine_leads`.`consult_for` = 'self',`users`.`username`,`telemedicine_leads`.`consult_for_name`) AS `username`,`telemedicine_leads`.`user_id`,`telemedicine_leads`.`mobile`,`telemedicine_leads`.`is_refund`,`telemedicine_leads`.`thinapp_id`,`telemedicine_leads`.`appointment_staff_id`,`telemedicine_leads`.`telemedicine_service_id`,`telemedicine_leads`.`attention_type`,`telemedicine_leads`.`telemedicine_service_type`,`telemedicine_leads`.`payment_type`,`telemedicine_leads`.`price`,`telemedicine_leads`.`validity_type`,`telemedicine_leads`.`validity`,`telemedicine_leads`.`consult_now`,`telemedicine_leads`.`consult_time`,`telemedicine_leads`.`consult_for`,`telemedicine_leads`.`consult_for_name`,`telemedicine_leads`.`consult_for_mobile`,`telemedicine_leads`.`consult_for_gender`,`telemedicine_leads`.`start_time`,`telemedicine_leads`.`end_time`,`telemedicine_leads`.`accept_status`,`telemedicine_leads`.`start_status`,`telemedicine_leads`.`is_doctor_available`,`telemedicine_leads`.`is_paid`,`telemedicine_leads`.`amount`,`telemedicine_leads`.`status`,DATE_FORMAT(`telemedicine_leads`.`created`, '%d %M %Y') AS `created_date`,DATE_FORMAT(`telemedicine_leads`.`created`, '%h:%i %p') AS `created_time`,`telemedicine_leads`.`modified`,(CASE WHEN lead_status = 'ALLOW' THEN 'ALLOWED' WHEN lead_status = 'CLOSE' THEN 'CLOSED' WHEN lead_status = 'REJECT' THEN 'REJECTED' WHEN lead_status = 'REFUND' THEN 'REFUNDED' ELSE lead_status END) AS lead_status,`telemedicine_leads`.`has_answered_question`,`appointment_staffs`.`name` AS `doctor_name`,IF(`telemedicine_leads`.`user_id` = '" . $user_id . "',`appointment_staffs`.`mobile`,`telemedicine_leads`.`mobile`) AS `to_mobile`,IF(`telemedicine_leads`.`user_id` = '" . $user_id . "','USER','DOCTOR') AS `request_user_type` FROM `telemedicine_leads` LEFT JOIN `appointment_staffs` ON (`telemedicine_leads`.`appointment_staff_id` = `appointment_staffs`.`id`) LEFT JOIN `users` ON (`telemedicine_leads`.`user_id` = `users`.`id`) WHERE `telemedicine_leads`.`appointment_staff_id` = '" . $doctorID . "'" . $condition . " ORDER BY `telemedicine_leads`.`id` DESC limit $limit offset $offset";
                $connection = ConnectionUtil::getConnection();
                $leadSRS = $connection->query($leadSql);
                if ($leadSRS->num_rows) {
                    $leadsData = mysqli_fetch_all($leadSRS, MYSQLI_ASSOC);
                    $response = array('status' => 1, 'message' => 'Lead found!', 'data' => array('list' => $leadsData));
                } else {
                    $response = array('status' => 0, 'message' => 'Lead not found!');
                }
            }
            Custom::sendResponse($response);
            exit();
        }

    }

    public static function get_telemedicine_doctor_list()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else {

                $select = "SELECT `appointment_staffs`.`id`,`appointment_staffs`.`user_id`,`appointment_staffs`.`name`,`appointment_staffs`.`sub_title`,`appointment_staffs`.`profile_photo`,`appointment_staffs`.`mobile`,`appointment_staffs`.`department_category_id`,`appointment_staffs`.`appointment_category_id`,`appointment_staffs`.`description`, CONCAT(`appointment_staffs`.`experience`, 'Year(s)'),`appointment_categories`.`name` AS `appointment_category_name` FROM `appointment_staffs` LEFT JOIN `telemedicine_services` ON (`telemedicine_services`.`appointment_staff_id` = `appointment_staffs`.`id`) LEFT JOIN `appointment_categories` ON (`appointment_categories`.`id` = `appointment_staffs`.`appointment_category_id`) WHERE (`appointment_staffs`.`id` = '' OR `appointment_staffs`.`id` IS NOT NULL) AND `telemedicine_services`.`status` = 'ACTIVE' AND `appointment_staffs`.`thinapp_id` = '" . $thin_app_id . "' AND `appointment_staffs`.`status` = 'ACTIVE' GROUP BY `appointment_staffs`.`id` DESC";
                $connection = ConnectionUtil::getConnection();
                $telemedicineLeadRS = $connection->query($select);
                if ($telemedicineLeadRS->num_rows) {
                    $telemedicineLeadData = mysqli_fetch_all($telemedicineLeadRS, MYSQLI_ASSOC);
                    $response['status'] = 1;
                    $response['data']['list'] = $telemedicineLeadData;

                    $sql = "SELECT `appointment_categories`.* FROM `appointment_staffs` LEFT JOIN `appointment_categories` ON (`appointment_staffs`.`appointment_category_id` = `appointment_categories`.`id`) WHERE `appointment_staffs`.`thinapp_id` = '" . $thin_app_id . "' AND `appointment_categories`.`id` != '' AND `appointment_categories`.`id` IS NOT NULL  GROUP BY `appointment_staffs`.`appointment_category_id`";
                    $RS = $connection->query($sql);
                    $data = mysqli_fetch_all($RS, MYSQLI_ASSOC);
                    $response['data']['department'] = $data;

                    $response['message'] = 'List Found';
                } else {
                    $response['status'] = 0;
                    $response['message'] = 'No request added yet!';
                }


            }
            Custom::sendResponse($response);
            exit();
        }
    }

    /*public static function add_telemedicine_services(){
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {


            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $telemedicine_availability_id = isset($data['telemedicine_availability_id']) ? $data['telemedicine_availability_id'] : "";


            $attention_type_arr = isset($data['attention_type']) ? $data['attention_type'] : "";
            $telemedicine_service_type_arr = isset($data['telemedicine_service_type']) ? $data['telemedicine_service_type'] : "";
            $payment_type_arr = isset($data['payment_type']) ? $data['payment_type'] : "";
            $price_arr = isset($data['price']) ? $data['price'] : "";
            $validity_type_arr = isset($data['validity_type']) ? $data['validity_type'] : "";
            $validity_arr = isset($data['validity']) ? $data['validity'] : "";
            $description_arr = isset($data['description']) ? $data['description'] : "";
            $response_time_type_arr = isset($data['response_time_type']) ? $data['response_time_type'] : "";
            $response_time_arr = isset($data['response_time']) ? $data['response_time'] : "";

            if (empty($doctor_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter staff id';
            } else if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp';
            } else if (empty($app_key)) {$telemedicine_service_type_arr
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            }else if (empty($telemedicine_availability_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid telemedicine id';
            }else if (empty($attention_type_arr)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid language';
            } else {
                $dateTime = date('Y-m-d H:i:s');
                $connection = ConnectionUtil::getConnection();
                $connection->autocommit(false);


                $hasErr = false;
                foreach($attention_type_arr AS $key => $val)
                {

                    $chkExist = "SELECT `id` FROM `telemedicine_services` WHERE `telemedicine_availability_id` = '".$telemedicine_availability_id."' AND `attention_type` = '".$val."' AND `telemedicine_service_type` = '".$telemedicine_service_type_arr[$key]."'";
                    $chkExistRS = $connection->query($chkExist);

                    if($chkExistRS->num_rows)
                    {
                        $sql = "UPDATE `telemedicine_services` SET `payment_type` = '".$payment_type_arr[$key]."',`price` = '".$price_arr[$key]."',`validity_type` = '".$validity_type_arr[$key]."',`validity` = '".$validity_arr[$key]."',`description` = '".$description_arr[$key]."',`response_time_type` = '".$response_time_type_arr[$key]."',`response_time` = '".$response_time_arr[$key]."', `modified` = '".$dateTime."' WHERE `telemedicine_availability_id` = '".$telemedicine_availability_id."' AND `attention_type` = '".$val."' AND `telemedicine_service_type` = '".$telemedicine_service_type_arr[$key]."'";
                    }
                    else
                    {
                        $sql = "INSERT INTO `telemedicine_services` SET `user_id` = '".$user_id."',`thinapp_id` = '".$thin_app_id."',`appointment_staff_id` = '".$doctor_id."',`payment_type` = '".$payment_type_arr[$key]."',`price` = '".$price_arr[$key]."',`validity_type` = '".$validity_type_arr[$key]."',`validity` = '".$validity_arr[$key]."',`description` = '".$description_arr[$key]."',`response_time_type` = '".$response_time_type_arr[$key]."',`response_time` = '".$response_time_arr[$key]."', `telemedicine_availability_id` = '".$telemedicine_availability_id."' ,`attention_type` = '".$val."' ,`telemedicine_service_type` = '".$telemedicine_service_type_arr[$key]."', `modified` = '".$dateTime."', `created` = '".$dateTime."'";
                    }

                    if(!$connection->query($sql))
                    {
                        $hasErr = true;
                    }

                }


                    if($hasErr == true)
                    {
                        $connection->rollback();
                        $response['status'] = 0;
                        $response['message'] = 'Something went wrong';
                    }
                    else
                    {
                        $connection->commit();
                        $response['status'] = 1;
                        $response['message'] = 'Successfully updated';
                    }


            }
            Custom::sendResponse($response);
        }
        exit();
    } */
    public static function add_telemedicine_services()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {


            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $telemedicine_availability_id = isset($data['telemedicine_availability_id']) ? $data['telemedicine_availability_id'] : "";


            $attention_type = isset($data['attention_type']) ? $data['attention_type'] : "";
            $telemedicine_service_type = isset($data['telemedicine_service_type']) ? $data['telemedicine_service_type'] : "";
            $payment_type = isset($data['payment_type']) ? ($data['payment_type'] == 'MINUTE') ? 'MINS' : $data['payment_type'] : "";
            $price = isset($data['price']) ? $data['price'] : "";
            $validity_type = isset($data['validity_type']) ? $data['validity_type'] : "";
            $validity = isset($data['validity']) ? $data['validity'] : "";
            $description = isset($data['description']) ? $data['description'] : "";
            $response_time_type = isset($data['response_time_type']) ? $data['response_time_type'] : "";
            $response_time = isset($data['response_time']) ? $data['response_time'] : "";

            if (empty($doctor_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter staff id';
            } else if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($telemedicine_availability_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid telemedicine id';
            } else if (empty($attention_type)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid language';
            } else {
                $dateTime = date('Y-m-d H:i:s');
                $connection = ConnectionUtil::getConnection();
                $connection->autocommit(false);

                $chkExist = "SELECT `id` FROM `telemedicine_services` WHERE `telemedicine_availability_id` = '" . $telemedicine_availability_id . "' AND `attention_type` = '" . $attention_type . "' AND `telemedicine_service_type` = '" . $telemedicine_service_type . "'";
                $chkExistRS = $connection->query($chkExist);

                if ($chkExistRS->num_rows) {
                    $sql = "UPDATE `telemedicine_services` SET `payment_type` = '" . $payment_type . "',`price` = '" . $price . "',`validity_type` = '" . $validity_type . "',`validity` = '" . $validity . "',`description` = '" . $description . "',`response_time_type` = '" . $response_time_type . "',`response_time` = '" . $response_time . "', `modified` = '" . $dateTime . "' WHERE `telemedicine_availability_id` = '" . $telemedicine_availability_id . "' AND `attention_type` = '" . $attention_type . "' AND `telemedicine_service_type` = '" . $telemedicine_service_type . "'";
                } else {
                    $sql = "INSERT INTO `telemedicine_services` SET `user_id` = '" . $user_id . "',`thinapp_id` = '" . $thin_app_id . "',`appointment_staff_id` = '" . $doctor_id . "',`payment_type` = '" . $payment_type . "',`price` = '" . $price . "',`validity_type` = '" . $validity_type . "',`validity` = '" . $validity . "',`description` = '" . $description . "',`response_time_type` = '" . $response_time_type . "',`response_time` = '" . $response_time . "', `telemedicine_availability_id` = '" . $telemedicine_availability_id . "' ,`attention_type` = '" . $attention_type . "' ,`telemedicine_service_type` = '" . $telemedicine_service_type . "', `modified` = '" . $dateTime . "', `created` = '" . $dateTime . "'";
                }

                if (!$connection->query($sql)) {
                    $connection->rollback();
                    $response['status'] = 0;
                    $response['message'] = 'Something went wrong';
                } else {
                    $connection->commit();

                    $response = WebservicesFunction::get_telemedicine_setting_data(false);

                    $response['message'] = 'Successfully updated!';
                }


            }
            Custom::sendResponse($response);
        }
        exit();
    }

    public static function add_telemedicine_lead()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {


            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $telemedicine_service_id = isset($data['telemedicine_service_id']) ? $data['telemedicine_service_id'] : "";
            $consult_now = isset($data['consult_now']) ? $data['consult_now'] : "Y";
            $consult_time = isset($data['consult_time']) ? $data['consult_time'] : "";
            $consult_for = isset($data['consult_for']) ? $data['consult_for'] : "";
            $consult_for_name = isset($data['consult_for_name']) ? $data['consult_for_name'] : "";
            $consult_for_mobile = isset($data['consult_for_mobile']) ? $data['consult_for_mobile'] : "";
            $consult_for_gender = isset($data['consult_for_gender']) ? $data['consult_for_gender'] : "";


            if (empty($doctor_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter staff id';
            } else if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else if (empty($telemedicine_service_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid service';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else {
                $dateTime = date('Y-m-d H:i:s');

                $sql = "SELECT * FROM `telemedicine_services` WHERE `id` = '" . $telemedicine_service_id . "' AND `appointment_staff_id` = '" . $doctor_id . "' LIMIT 1";

                $connection = ConnectionUtil::getConnection();
                $telemedicineRS = $connection->query($sql);
                if ($consult_for_mobile != '') {
                    $consult_for_mobile = Custom::create_mobile_number($consult_for_mobile, '+91');
                }


                if ($consult_for == 'self' || $consult_for == 'child' || $consult_for == 'brother' || $consult_for == 'husband' || $consult_for == 'others') {
                    $consult_for_gender = "MALE";
                } else {
                    $consult_for_gender = "FEMALE";
                }

                if ($telemedicineRS->num_rows) {
                    $telemedicineData = mysqli_fetch_assoc($telemedicineRS);
                    $price = $telemedicineData['price'];
                    $paymentType = $telemedicineData['payment_type'];
                    if ($paymentType == 'MINS') {
                        $totalAmountToDeduct = ($price * 5);
                    } else {
                        $totalAmountToDeduct = Custom::telemedicineRequiredBalnce($price);
                    }

                    $userWalletSql = "SELECT * FROM `wallet_users` WHERE `user_id` = '" . $user_id . "' AND `thinapp_id` = '" . $thin_app_id . "' AND `status` = 'ACTIVE' LIMIT 1";
                    $userWalletRS = $connection->query($userWalletSql);
                    if (!$userWalletRS->num_rows) {
                        $insertWallet = "INSERT INTO `wallet_users` (`user_id`,`thinapp_id`,`total_amount`,`status`,`created`,`modified`) VALUES('".$user_id."','".$thin_app_id."','0','ACTIVE','".$dateTime."','".$dateTime."')";
                        $connection->query($insertWallet);
                        $userHasAmount = 0;
                    }
                    else
                    {
                        $userWalletData = mysqli_fetch_assoc($userWalletRS);
                        $userHasAmount = $userWalletData['total_amount'];
                    }



                        if ($totalAmountToDeduct <= $userHasAmount) {

                            $connection->autocommit(false);
                            $attention_type = $telemedicineData['attention_type'];
                            $telemedicine_service_type = $telemedicineData['telemedicine_service_type'];
                            $payment_type = $telemedicineData['payment_type'];
                            $price = $telemedicineData['price'];
                            $validity_type = $telemedicineData['validity_type'];
                            $validity = $telemedicineData['validity'];
                            $insertLeadStr = "INSERT INTO `telemedicine_leads` (`consult_for_name`,`consult_for_mobile`,`consult_for_gender`,`consult_for`,`user_id`,`mobile`,`thinapp_id`,`appointment_staff_id`,`telemedicine_service_id`,`attention_type`,`telemedicine_service_type`,`payment_type`,`price`,`validity_type`,`validity`,`consult_now`,`consult_time`,`created`,`modified`) VALUES ('$consult_for_name','$consult_for_mobile','$consult_for_gender','$consult_for','$user_id','$mobile','$thin_app_id','$doctor_id','$telemedicine_service_id','$attention_type','$telemedicine_service_type','$payment_type','$price','$validity_type','$validity','$consult_now','$consult_time','$dateTime','$dateTime')";
                            if ($connection->query($insertLeadStr)) {


                                $teleLeadID = $connection->insert_id;
                                $connection->commit();
                                $response['data']['telemedicine_lead_id'] = $teleLeadID;
                                $response['status'] = 1;
                                $response['message'] = 'Added successfully';


                            } else {
                                $connection->rollback();
                                $response['status'] = 0;
                                $response['message'] = 'Something went wrong';
                            }


                        } else {
                            $response['status'] = 0;
                            $response['message'] = "You don't have " . $totalAmountToDeduct . " INR in your wallet!";
                        }





                } else {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid service';
                }


            }
            Custom::sendResponse($response);


            /*Custom::send_process_to_background();

            $sendArray = array(
                'channel_id' => 0,
                'thinapp_id' => $thin_app_id,
                'flag' => 'LEAD_RECEIVED',
                'title' => 'Telemedicine Request Received!',
                'message' => "You have received a new telemedicine request",
                'description' => '',
                'chat_reference' => '',
                'type' => 'TELEMEDICINE',
                'module_type' => 'TELEMEDICINE',
                'module_type_id' => 0,
                'firebase_reference' => ""
            );

            $sqlDoc = "SELECT `user_id` FROM `appointment_staffs` WHERE `id` = '" . $doctor_id . "'";
            $docRS = $connection->query($sqlDoc);

            if ($docRS->num_rows) {
                $docData = mysqli_fetch_assoc($docRS);
                Custom::send_notification_by_user_id($sendArray, array($docData['user_id']), $thin_app_id);
            } */


        }
        exit();
    }

    public static function update_status_telemedicine_lead()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {


            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $telemedicine_lead_id = isset($data['telemedicine_lead_id']) ? $data['telemedicine_lead_id'] : "";
            $status = isset($data['status']) ? $data['status'] : "NEW";
            $reason = isset($data['reason']) ? $data['reason'] : "";

            if (empty($telemedicine_lead_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid lead id';
            } else if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else {
                $dateTime = date('Y-m-d H:i:s');

                $sql = "UPDATE `telemedicine_leads` SET `lead_status` = '" . $status . "',`reason` = '" . $reason . "', `modified` = '" . $dateTime . "' WHERE `id` = '" . $telemedicine_lead_id . "'";
                $connection = ConnectionUtil::getConnection();

                if ($connection->query($sql)) {


                    $response['status'] = 1;
                    $response['message'] = 'Updated successfully';

                } else {
                    $response['status'] = 0;
                    $response['message'] = 'Something went wrong';
                }


            }
            Custom::sendResponse($response);


            Custom::send_process_to_background();


            $title = "Telemedicine Request " . ucfirst(strtolower($status));
            if ($status == 'ALLOW') {
                $title = "Telemedicine Request Allowed";
                $message = "Your telemedicine request is allowed by doctor.";
            } else if ($status == 'REJECT') {
                $title = "Telemedicine Request Rejected";
                $message = "Your telemedicine request is rejected by doctor.";
            } else if ($status == 'AVAILABLE') {
                $message = "Doctor is now available for your telemedicine request.";
            } else if ($status == 'CLOSE') {
                $title = "Telemedicine Request Closed";
                $message = "Your telemedicine request has been successfully closed by doctor.";
            } else if ($status == 'HOLD') {
                $message = "Sorry! Doctor has put your request on hold, Kindly wait.";
            } else {
                $message = "Your telemedicine request is " . strtolower($status) . " by doctor.";
            }


            $sendArray = array(
                'channel_id' => 0,
                'thinapp_id' => $thin_app_id,
                'flag' => 'LEAD_STATUS_CHANGE',
                'title' => $title,
                'message' => $message,
                'description' => '',
                'chat_reference' => '',
                'type' => 'TELEMEDICINE',
                'module_type' => 'TELEMEDICINE',
                'module_type_id' => 0,
                'firebase_reference' => ""
            );

            $sqlDoc = "SELECT `users`.`firebase_token`,`telemedicine_leads`.`user_id`,`telemedicine_leads`.`appointment_staff_id` FROM `telemedicine_leads` LEFT JOIN `users` ON (`telemedicine_leads`.`user_id` = `users`.`id`) WHERE `telemedicine_leads`.`id` = '" . $telemedicine_lead_id . "' LIMIT 1";
            $userRS = $connection->query($sqlDoc);

            if ($userRS->num_rows) {
                $userData = mysqli_fetch_assoc($userRS);
                $sendArray['is_doctor'] = 'NO';
                $sendArray['module_type_id'] = $userData['appointment_staff_id'];
                $data = Custom::send_notification_by_user_id($sendArray, array($userData['user_id']), $thin_app_id);
                //Custom::send_notification_via_token($sendArray, array($userData['firebase_token']), $thin_app_id);
            }
        }
        exit();
    }

    public static function get_telemedicine_folder_data()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {


            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $type = isset($data['type']) ? $data['type'] : "PRESCRIPTION";

            if (empty($type)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid type';
            } else if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else {
                $dateTime = date('Y-m-d H:i:s');

                $sql = "SELECT `id` FROM `file_category_masters` WHERE `category_name` = '" . $type . "' LIMIT 1";

                $connection = ConnectionUtil::getConnection();
                $categoryRS = $connection->query($sql);
                $categoryData = mysqli_fetch_assoc($categoryRS);
                $categoryID = $categoryData['id'];


                $checkPatientSql = "SELECT `drive_folders`.`id` FROM `appointment_customers` LEFT JOIN `drive_folders` ON(`appointment_customers`.`id` = `drive_folders`.`appointment_customer_id`) WHERE `appointment_customers`.`mobile` = '" . $mobile . "' AND `appointment_customers`.`thinapp_id` = '" . $thin_app_id . "' ORDER BY `appointment_customers`.`id` ASC LIMIT 1";
                $checkPatientRS = $connection->query($checkPatientSql);

                if ($checkPatientRS->num_rows) {
                    $folderData = mysqli_fetch_assoc($checkPatientRS);
                    $folderID = $folderData['id'];

                    $fileSql = "SELECT `drive_files`.*,DATE_FORMAT(`drive_files`.`created`, '%d-%m-%Y') AS `date`,DATE_FORMAT(`drive_files`.`created`, '%h:%i:%s') AS `time` FROM `drive_files` WHERE `drive_files`.`file_category_master_id` = '" . $categoryID . "' AND `drive_files`.`thinapp_id` = '" . $thin_app_id . "' AND `drive_files`.`drive_folder_id` = '" . $folderID . "' ORDER BY `id` DESC";
                    $fileRS = $connection->query($fileSql);
                    if ($fileRS->num_rows) {
                        $fileData = mysqli_fetch_all($fileRS, MYSQLI_ASSOC);
                        $response['status'] = 1;
                        $response['data']['list'] = $fileData;
                        $response['message'] = 'List Found';
                    } else {
                        $response['status'] = 0;
                        $response['message'] = 'List not found';
                    }
                } else {
                    $getUserSql = "SELECT `username` FROM `users` WHERE `id` = '" . $user_id . "' LIMIT 1";
                    $getUserRS = $connection->query($getUserSql);
                    $getUserData = mysqli_fetch_assoc($getUserRS);

                    $customer = array();
                    $customer['app_key'] = APP_KEY;
                    $customer['thin_app_id'] = $thin_app_id;
                    $customer['user_id'] = $user_id;
                    $customer['first_name'] = $getUserData['username'];
                    $customer['email'] = '';
                    $customer['mobile'] = $mobile;
                    $customer['country_code'] = "+91";
                    $customer['gender'] = strtoupper('MALE');
                    $customer['address'] = "";
                    $result = WebservicesFunction::appointment_add_customer($customer);
                    $result = $customer_data = json_decode($result, true);
                    if ($result['status'] == 1) {
                        $customer_id = $result['customer_id'];

                        $checkPatientSql = "SELECT `drive_folders`.`id` FROM `appointment_customers` LEFT JOIN `drive_folders` ON(`appointment_customers`.`id` = `drive_folders`.`appointment_customer_id`) WHERE `appointment_customers`.`mobile` = '" . $mobile . "' AND `appointment_customers`.`thinapp_id` = '" . $thin_app_id . "' ORDER BY `appointment_customers`.`id` ASC LIMIT 1";
                        $checkPatientRS = $connection->query($checkPatientSql);

                        if ($checkPatientRS->num_rows) {
                            $folderData = mysqli_fetch_assoc($checkPatientRS);
                            $folderID = $folderData['id'];

                            $fileSql = "SELECT `drive_files`.* FROM `drive_files` WHERE `drive_files`.`file_category_master_id` = '" . $categoryID . "' AND `drive_files`.`thinapp_id` = '" . $thin_app_id . "' AND `drive_files`.`drive_folder_id` = '" . $folderID . "' ORDER BY `id` DESC";
                            $fileRS = $connection->query($fileSql);
                            if ($fileRS->num_rows) {
                                $fileData = mysqli_fetch_all($fileRS, MYSQLI_ASSOC);
                                $response['status'] = 1;
                                $response['data']['list'] = $fileData;
                                $response['message'] = 'List Found';
                            } else {
                                $response['status'] = 0;
                                $response['message'] = 'List not found';
                            }
                        }


                    } else {
                        $response['status'] = 0;
                        $response['message'] = 'List not found';
                    }


                }


            }
            Custom::sendResponse($response);
        }
        exit();
    }

    public static function add_telemedicine_media()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $role_id = isset($data['role_id']) ? $data['role_id'] : "";
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : 0;
            $fileName = isset($data['file_name']) ? $data['file_name'] : "";
            $filePath = isset($data['file_path']) ? $data['file_path'] : "";
            $fileSize = isset($data['file_size']) ? $data['file_size'] : "50";
            $file_array = array("file_name" => $fileName, "file_path" => $filePath, "file_size" => $fileSize);
            $type = isset($data['type']) ? $data['type'] : "PRESCRIPTION";
            $add_to_mobile = isset($data['add_to_mobile']) ? Custom::create_mobile_number($data['add_to_mobile']) : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($add_to_mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid add to mobile';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else if (empty($fileName)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid file name';
            } else if (empty($filePath)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid file path';
            } else {

        
                $drive_folder_id = 0;
                if (!$patient_data = Custom::get_first_customer_by_mobile($thin_app_id, $add_to_mobile)) {
                    $auto_share_folder = true;
                    $customer = array();
                    $customer['app_key'] = APP_KEY;
                    $customer['thin_app_id'] = $thin_app_id;
                    $customer['user_id'] = $user_id;
                    $customer['first_name'] = $add_to_mobile;
                    $customer['mobile'] = $add_to_mobile;
                    $customer['country_code'] = "+91";
                    $result = json_decode(WebservicesFunction::appointment_add_customer($customer, $auto_share_folder),true);
                    if($result['status']==1){
                        $patient_id = $result['customer_id'];
                        $folder_data = Custom::get_patient_folder($thin_app_id,$patient_id,'CUSTOMER');
                        $drive_folder_id = @$folder_data['id'];
                    }
                }else{
                    if(!empty($patient_data['folder_id'])){
                        $drive_folder_id = $patient_data['folder_id'];
                    }else{
                        $res = json_decode(Custom::create_and_share_folder($thin_app_id, $add_to_mobile, $patient_data['first_name'], 'CUSTOMER', $patient_data['id']),true);
                        if($res['status']==1){
                            $drive_folder_id = !empty($res['folder_id'])?$res['folder_id']:0;
                        }
                    }
                }

                if(!empty($drive_folder_id)){
                    $file_name = $file_array['file_name'];
                    $file_size = $file_array['file_size'];
                    $file_size = sprintf("%4.2f", $file_size / 1048576);
                    $post['thin_app_id'] = $thin_app_id;
                    $post['user_id'] = $user_id;
                    $post['app_key'] = APP_KEY;
                    $post['mobile'] = $mobile;
                    $post['role_id'] = $role_id;
                    $post['doctor_id'] = $doctor_id;
                    $post['file_array'][0]['file_type'] = Custom::getFileType($file_name);
                    $post['file_array'][0]['file_name'] = $file_name;
                    $post['file_array'][0]['file_path'] = $file_array['file_path'];;
                    $post['file_array'][0]['file_size'] = $file_size;
                    $post['listing_type'] = "OTHER";
                    $post['memo_text'] = "";
                    $post['memo_label'] = "";
                    $post['caption'] = "";
                    $post['drive_folder_id'] = $drive_folder_id;
                    if ($type == 'PRESCRIPTION') {
                        $post['category_id'] = 6;
                    } else {
                        $post['category_id'] = 3;
                    }
                    $post['is_pad_prescription'] = "NO";
                    WebservicesFunction::add_file($post, true,false);die;

                }else{
                    $response['status'] = 0;
                    $response['message'] = 'Unable to find patient folder';
                }
            }

            echo json_encode($response);die;

        }
        exit();


    }

    public static function add_user_payment_to_wallet($data = null,$return = false)
    {

        ignore_user_abort(true);
        set_time_limit(0);
        if (empty($data)) {
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);
        }
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";

            $total_price = isset($data['price']) ? $data['price'] : "";
            $transaction_id = isset($data['transaction_id']) ? $data['transaction_id'] : "";
            $transaction_status = isset($data['payment_status']) ? strtoupper($data['payment_status']) : "";
            $remark = isset($data['remark']) ? strtoupper($data['remark']) : "";
            $payment_type = isset($data['payment_type']) ? strtoupper($data['payment_type']) : "INSTAMOJO";

            $send_notification = false;
            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else if (empty($total_price)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid price';
            } else if (empty($transaction_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid transaction';
            } else if ($transaction_status != "SUCCESS" && $transaction_status != "FAILURE") {
                $response['status'] = 0;
                $response['message'] = 'Invalid transaction status';
            } else if ($payment_type != "CASHFREE" && $payment_type != "PAYTM" && $payment_type != "RAZORPAY" && $payment_type != "INSTAMOJO") {
                $response['status'] = 0;
                $response['message'] = 'Invalid payment status';
            } else {
                $admin_data = Custom::get_thinapp_admin_data($thin_app_id);
                if (!empty($admin_data)) {
                    $payment_receiver = $admin_data['mobile'];
                    $connection = ConnectionUtil::getConnection();
                    $created = Custom::created();
                    $payment_receive_account = 'MENGAGE';
                    $credential = Custom::get_instamojo_credential($thin_app_id);
                    if ($credential) {
                        $apiKey = $credential['instamojo_api_key'];
                        $apiSecret = $credential['instamojo_api_secret'];
                        $salt = $credential['instamojo_salt'];
                        if (!empty($apiKey) || !empty($apiSecret) || !empty($salt)) {
                            $payment_receive_account = 'APP_ADMIN';
                        }
                    }
                    $type = "WALLET";
                    $sql = "INSERT INTO user_payments (type,payment_receive_account,thinapp_id, user_id, payment_sender, payment_receiver, payment_type, total_price, remark, transaction_id, transaction_status,  created, modified) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                    $stmt = $connection->prepare($sql);
                    $stmt->bind_param('sssssssssssss', $type, $payment_receive_account, $thin_app_id, $user_id, $mobile, $payment_receiver, $payment_type, $total_price, $remark, $transaction_id, $transaction_status, $created, $created);
                    if ($stmt->execute()) {
                        $last_inser_id = $stmt->insert_id;
                        $response['status'] = 1;
                        if ($transaction_status == "SUCCESS") {
                            $response['message'] = "Payment done successfully";

                            $amountType = "ADD";


                            $sql_wallet = "SELECT `total_amount` FROM `wallet_users` WHERE `wallet_users`.`user_id` = '" . $user_id . "' LIMIT 1";
                            $walletamount = $connection->query($sql_wallet);
                            if ($walletamount->num_rows) {
                                $walletData = mysqli_fetch_assoc($walletamount);
                                $wallet_amount = $walletData['total_amount'];
                            } else {
                                $walletInsertSql = "INSERT INTO `wallet_users` (`user_id`,`thinapp_id`,`total_amount`,`status`,`created`,`modified`) VALUES ('" . $user_id . "','" . $thin_app_id . "','0','ACTIVE','" . $created . "','" . $created . "')";
                                $connection->query($walletInsertSql);
                                $wallet_amount = 0;
                            }

                            $newWalletAmount = $wallet_amount + $total_price;


                            $insertWalletHistory = "INSERT INTO `wallet_user_history` (user_id, thinapp_id, type, new_wallet_amount, amount, amount_type, user_payment_id, created, modified) VALUES (?,?,?,?,?,?,?,?,?)";
                            $stmt = $connection->prepare($insertWalletHistory);
                            $stmt->bind_param('sssssssss', $user_id, $thin_app_id, $type, $newWalletAmount, $total_price, $amountType, $last_inser_id, $created, $created);


                            $updateWalletSql = "UPDATE `wallet_users` SET `total_amount` = '" . $newWalletAmount . "', `modified` = '" . $created . "' WHERE `user_id` = '" . $user_id . "' AND `thinapp_id` = '" . $thin_app_id . "'";
                            $connection->query($updateWalletSql);

                        } else {
                            $response['message'] = "Sorry, payment could not done.";
                        }
                        WebservicesFunction::addUserStaticToJson('', $user_id, $thin_app_id, $mobile, 'USER_PAYMENT', strtoupper($transaction_status), 'add_user_payment');

                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Sorry payment could not done";
                    }
                } else {
                    $response['status'] = 0;
                    $response['message'] = "Invalid payment receiver";
                }

            }
            if($return===true){
                return  json_encode($response);
            }else{
                Custom::sendResponse($response);
                if (!empty($send_notification)) {
                    Custom::send_process_to_background();
                    $user_data = Custom::get_user_by_id($user_id);
                    if (!empty($admin_data) && !empty($user_data)) {
                        $message = "Payment of  $total_price Rs. for app " . $admin_data['app_name'] . " has been added to wallet by user " . $user_data['username'] . " (" . $user_data['mobile'] . ") ";
                        $sendArray = array(
                            'channel_id' => 0,
                            'thinapp_id' => $thin_app_id,
                            'flag' => 'USER_PAYMENT',
                            'title' => 'New Payment',
                            'message' => $message,
                            'description' => '',
                            'chat_reference' => '',
                            'module_type' => 'USER_PAYMENT',
                            'module_type_id' => 0,
                            'firebase_reference' => ""
                        );
                        Custom::send_notification_via_token($sendArray, array($admin_data['firebase_token']), $thin_app_id);
                        Custom::send_single_sms($admin_data['mobile'], $message, $thin_app_id);
                    }

                }
            }

        }
        exit();
    }


    public static function get_telemedicine_chat_question_list()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $telemedicineLeadID = isset($data['telemedicine_lead_id']) ? $data['telemedicine_lead_id'] : "";
            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else {

                $select = "SELECT `id`,`thinapp_id`,`question`,`type`,`option_one`,`option_two`,`option_three`,`option_four` FROM `telemedicine_chat_questions` WHERE `thinapp_id` = '" . $thin_app_id . "' AND `status` = 'ACTIVE' ORDER BY `order_number` ASC";
                $connection = ConnectionUtil::getConnection();
                $telemedicineChatRS = $connection->query($select);
                if ($telemedicineChatRS->num_rows) {
                    $telemedicineChatData = mysqli_fetch_all($telemedicineChatRS, MYSQLI_ASSOC);
                    $response['status'] = 1;
                    $response['data']['list'] = $telemedicineChatData;
                    $response['message'] = 'List Found';
                } else {
                    $select = "SELECT `id`,`thinapp_id`,`question`,`type`,`option_one`,`option_two`,`option_three`,`option_four` FROM `telemedicine_chat_questions` WHERE `thinapp_id` = '0' AND `status` = 'ACTIVE' ORDER BY `order_number` ASC";
                    $telemedicineChatRS = $connection->query($select);
                    if ($telemedicineChatRS->num_rows) {
                        $telemedicineChatData = mysqli_fetch_all($telemedicineChatRS, MYSQLI_ASSOC);
                        $response['status'] = 1;
                        $response['data']['list'] = $telemedicineChatData;
                        $response['message'] = 'List Found';
                    } else {
                        $response['status'] = 0;
                        $response['message'] = 'No List Found';
                    }
                }

                $sqlDoc = "SELECT `appointment_staffs`.`name` FROM `telemedicine_leads` LEFT JOIN `appointment_staffs` ON (`telemedicine_leads`.`appointment_staff_id` = `appointment_staffs`.`id`) WHERE `telemedicine_leads`.`id` = '" . $telemedicineLeadID . "'";
                $docRS = $connection->query($sqlDoc);

                if ($docRS->num_rows) {
                    $docData = mysqli_fetch_assoc($docRS);
                    $docName = $docData['name'];
                } else {
                    $docName = "";
                }
                $response['data']['doctor_name'] = $docName;

                $consentData = Custom::get_telemedicine_consent_data($thin_app_id);
                if($consentData)
                {
                    $response['data']['has_consent'] = "YES";
                    $response['data']['consent_data'] = $consentData;
                }
                else
                {
                    $response['data']['has_consent'] = "NO";
                    $response['data']['consent_data'] = array();
                }

            }
            Custom::sendResponse($response);
            exit();
        }
    }

    public static function add_telemedicine_chat_question_answer()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $answerData = isset($data['answer_data']) ? $data['answer_data'] : "";
            $telemedicineLeadID = isset($data['telemedicine_lead_id']) ? $data['telemedicine_lead_id'] : "";
            $consent_template_id = isset($data['consent_template_id']) ? $data['consent_template_id'] : "";
            $signature_image = isset($data['signature_image']) ? $data['signature_image'] : "";


            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else if (empty($answerData)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid answer data';
            } else if (empty($telemedicineLeadID)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid lead ID';
            } else {

                if (!empty($answerData)) {
                    $dateTime = $created = Custom::created();
                    $dataToSave = array();
                    foreach ($answerData AS $answer) {
                        $selectedOptionOne = ($answer['selected_option_one'] == true) ? 'YES' : 'NO';
                        $selectedOptionTwo = ($answer['selected_option_two'] == true) ? 'YES' : 'NO';
                        $selectedOptionThree = ($answer['selected_option_three'] == true) ? 'YES' : 'NO';
                        $selectedOptionFour = ($answer['selected_option_four'] == true) ? 'YES' : 'NO';
                        $textAnswer = (!empty($answer['text_answer'])) ? $answer['text_answer'] : "";
                        $dataToSave[] = "('" . $user_id . "','" . $thin_app_id . "','" . $mobile . "','" . $telemedicineLeadID . "','" . $answer['id'] . "','" . $textAnswer . "','" . $selectedOptionOne . "','" . $selectedOptionTwo . "','" . $selectedOptionThree . "','" . $selectedOptionFour . "','" . $created . "','" . $created . "')";
                    }
                    $dataToSaveStr = implode(',', $dataToSave);
                    $sql = "INSERT INTO `telemedicine_chat_answers` (`user_id`,`thinapp_id`,`mobile`,`telemedicine_lead_id`,`telemedicine_chat_question_id`,`answer_text`,`is_answer_option_one`,`is_answer_option_two`,`is_answer_option_three`,`is_answer_option_four`,`created`,`modified`) VALUES " . $dataToSaveStr;
                    $connection = ConnectionUtil::getConnection();
                    $connection->autocommit(false);
                    if ($connection->query($sql)) {
                        $sql1 = "UPDATE `telemedicine_leads` SET `has_answered_question` = 'Y' WHERE `id` = '" . $telemedicineLeadID . "'";

                        if ($connection->query($sql1)) {


                            $sqlTel = "SELECT * FROM `telemedicine_leads` WHERE `id` = '" . $telemedicineLeadID . "' LIMIT 1";

                            $telLeadRS = $connection->query($sqlTel);
                            $telLeadData = mysqli_fetch_assoc($telLeadRS);

                            $telemedicine_service_id = $telLeadData['telemedicine_service_id'];
                            $doctor_id = $telLeadData['appointment_staff_id'];


                            $sqlA = "SELECT * FROM `telemedicine_services` WHERE `id` = '" . $telemedicine_service_id . "' AND `appointment_staff_id` = '" . $doctor_id . "' LIMIT 1";

                            $telemedicineRS1 = $connection->query($sqlA);


                            if ($telemedicineRS1->num_rows) {


                                $telemedicineData = mysqli_fetch_assoc($telemedicineRS1);
                                $price = $telemedicineData['price'];
                                $paymentType = $telemedicineData['payment_type'];
                                if ($paymentType == 'MINS') {
                                    $totalAmountToDeduct = ($price * 5);
                                } else {
                                    $totalAmountToDeduct = Custom::telemedicineRequiredBalnce($price);
                                }

                                $userWalletSql = "SELECT * FROM `wallet_users` WHERE `user_id` = '" . $user_id . "' AND `thinapp_id` = '" . $thin_app_id . "' AND `status` = 'ACTIVE' LIMIT 1";
                                $userWalletRS = $connection->query($userWalletSql);
                                if ($userWalletRS->num_rows) {
                                    $userWalletData = mysqli_fetch_assoc($userWalletRS);
                                    $userHasAmount = $userWalletData['total_amount'];


                                    if ($totalAmountToDeduct <= $userHasAmount) {

                                        $connection->autocommit(false);
                                        $attention_type = $telemedicineData['attention_type'];
                                        $telemedicine_service_type = $telemedicineData['telemedicine_service_type'];
                                        $payment_type = $telemedicineData['payment_type'];
                                        $price = $telemedicineData['price'];
                                        $validity_type = $telemedicineData['validity_type'];
                                        $validity = $telemedicineData['validity'];
                                        $insertLeadStr = "UPDATE `telemedicine_leads` SET `payment_type` = '$payment_type',`price` = '$price',`validity_type` = '$validity_type',`validity` = '$validity',`modified`='$dateTime' WHERE `id` = '" . $telemedicineLeadID . "'";
                                        if ($connection->query($insertLeadStr)) {

                                            if ($paymentType == 'FIXED') {
                                                $teleLeadID = $telemedicineLeadID;
                                                $newWalletAmount = ($userHasAmount - $totalAmountToDeduct);
                                                $updateWalletUser = "UPDATE `wallet_users` SET `total_amount` = '" . $newWalletAmount . "',`modified` = '" . $dateTime . "' WHERE `user_id` = '" . $user_id . "' AND `thinapp_id` = '" . $thin_app_id . "'";
                                                $insertWalletHistory = "INSERT INTO `wallet_user_history` (`user_id`,`thinapp_id`,`type`,`new_wallet_amount`,`amount`,`amount_type`,`telemedicine_lead_id`,`created`,`modified`) VALUES ('" . $user_id . "','" . $thin_app_id . "','TELEMEDICINE','" . $newWalletAmount . "','" . $totalAmountToDeduct . "','DEDUCTION','" . $teleLeadID . "','" . $dateTime . "','" . $dateTime . "')";

                                                if ($connection->query($updateWalletUser) && $connection->query($insertWalletHistory)) {

                                                    $updateIsPaid = "UPDATE `telemedicine_leads` SET `is_paid` = 'YES' WHERE `id` = '" . $teleLeadID . "'";
                                                    if ($connection->query($updateIsPaid)) {
                                                        Custom::add_telemedicine_consent($consent_template_id,$signature_image,$thin_app_id,$user_id,$mobile,$telemedicineLeadID);
                                                        $connection->commit();
                                                        $response['status'] = 1;
                                                        $response['data']['telemedicine_lead_id'] = $teleLeadID;
                                                        $response['message'] = 'Answer saved successfully.';
                                                    } else {
                                                        $connection->rollback();
                                                        $response['status'] = 0;
                                                        $response['message'] = 'Something went wrong';
                                                    }

                                                } else {
                                                    $connection->rollback();
                                                    $response['status'] = 0;
                                                    $response['message'] = 'Something went wrong';
                                                }

                                            } else {
                                                Custom::add_telemedicine_consent($consent_template_id,$signature_image,$thin_app_id,$user_id,$mobile,$telemedicineLeadID);
                                                $connection->commit();
                                                $teleLeadID = $connection->insert_id;
                                                $response['data']['telemedicine_lead_id'] = $teleLeadID;
                                                $response['status'] = 1;
                                                $response['message'] = 'Answer saved successfully.';
                                            }


                                        } else {
                                            $connection->rollback();
                                            $response['status'] = 0;
                                            $response['message'] = 'Something went wrong';
                                        }


                                    } else {
                                        $connection->rollback();
                                        $response['status'] = 0;
                                        $response['message'] = "You don't have " . $totalAmountToDeduct . " INR in your wallet!";
                                    }


                                }


                            } else {
                                $connection->rollback();
                                $response['status'] = 0;
                                $response['message'] = 'Invalid service';
                            }


                        } else {
                            $connection->rollback();
                            $response['status'] = 0;
                            $response['message'] = 'Something went wrong';
                        }

                    } else {
                        $connection->rollback();
                        $response['status'] = 0;
                        $response['message'] = 'Oops, Something went wrong!';
                    }
                } else {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid answer data';
                }
            }

            Custom::sendResponse($response);

            Custom::send_process_to_background();

            $sendArray = array(
                'channel_id' => 0,
                'thinapp_id' => $thin_app_id,
                'flag' => 'LEAD_RECEIVED',
                'title' => 'Telemedicine Answer Alert!',
                'message' => "New Lead! Kindly review answers of patient before start consultation",
                'description' => '',
                'chat_reference' => '',
                'type' => 'TELEMEDICINE',
                'module_type' => 'TELEMEDICINE',
                'module_type_id' => 0,
                'firebase_reference' => ""
            );

            $sqlDoc = "SELECT `appointment_staffs`.`user_id`,`appointment_staffs`.`id` FROM `telemedicine_leads` LEFT JOIN `appointment_staffs` ON (`telemedicine_leads`.`appointment_staff_id` = `appointment_staffs`.`id`) WHERE `telemedicine_leads`.`id` = '" . $telemedicineLeadID . "'";
            $docRS = $connection->query($sqlDoc);

            if ($docRS->num_rows) {
                $docData = mysqli_fetch_assoc($docRS);
                $sendArray['is_doctor'] = 'YES';
                $sendArray['module_type_id'] = $docData['id'];
                Custom::send_notification_by_user_id($sendArray, array($docData['user_id']), $thin_app_id);
            }

            exit();

        }
    }

    public static function get_twilio_access_token()
    {
        $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
        $app_key = isset($data['app_key']) ? $data['app_key'] : "";
        $user_id = isset($data['user_id']) ? $data['user_id'] : "";
        $mobile = isset($data['mobile']) ? $data['mobile'] : "";
        $to_mobile = isset($data['to_mobile']) ? $data['to_mobile'] : "";
        $telemedicineLeadID = isset($data['telemedicine_lead_id']) ? $data['telemedicine_lead_id'] : "";
        $module_type = isset($data['module_type']) ? $data['module_type'] : "";


        if (empty($thin_app_id)) {
            $response['status'] = 0;
            $response['message'] = 'Invalid thinapp id';
        } else if (empty($app_key)) {
            $response['status'] = 0;
            $response['message'] = 'Invalid app key';
        } else if (empty($user_id)) {
            $response['status'] = 0;
            $response['message'] = 'Invalid user id';
        } else if (empty($mobile)) {
            $response['status'] = 0;
            $response['message'] = 'Invalid mobile';
        } else {

            $room = $thin_app_id."_".date('YmdHis').'_'.rand(100,9999);
            if($thin_app_id==134){
                $recording = 'NO';//Custom::alllowDoctorRecording($telemedicineLeadID,$module_type);
                $ROOM_SID = file_get_contents(SITE_PATH.'twilio_auth/createRoom.php?room=' . $room.'&recording='.$recording);
            }

            $fromIdentity = substr(uniqid('', true), -5);
            $accessToken = file_get_contents(SITE_PATH."twilio_auth/accessToken.php?room=$room");
            $response = array("status" => 1, "data" => array('room' => $room, 'identity' => $fromIdentity, 'token' => str_replace(array("\n", "\r"), '', $accessToken)));
            Custom::sendResponse($response);
        }

    }

    public static function get_twilio_vedio_token()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
        	$to_mobile = isset($data['to_mobile']) ? $data['to_mobile'] : "";
        	$telemedicineLeadID = isset($data['telemedicine_lead_id']) ? $data['telemedicine_lead_id'] : "";
            $module_type = isset($data['module_type']) ? $data['module_type'] : "TELEMEDICINE";
        	


            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else {

            	$room = $thin_app_id."_".date('YmdHis').'_'.rand(100,9999);
            	$room = Custom::createRoomName($thin_app_id,$telemedicineLeadID,'APPOINTMENT',$mobile,$to_mobile);
            	$fromIdentity = base64_encode($mobile);
            	$fromToken = file_get_contents('http://mengage.co.in/doctor/twilio_auth/video/?identity=' . $fromIdentity . '&room=' . $room);
                $response = array("status" => 1, "data" => array('room' => $room, 'identity' => $fromIdentity, 'token' => str_replace(array("\n", "\r"), '', $fromToken)));

                Custom::sendResponse($response);
                Custom::send_process_to_background();
                $msg_data = Custom::getAppointmentMessageData($telemedicineLeadID);
                $patient_mobile = $msg_data['patient_mobile'];
                if($mobile!=$patient_mobile){
                    $response = Custom::sendWhatsapp(3,$telemedicineLeadID,$thin_app_id,'PATIENT',$patient_mobile);
                }

            	
            }
        }
        die();
    }

    public static function get_telemedicine_lead_data()
    {


        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $telemedicineLeadID = isset($data['telemedicine_lead_id']) ? $data['telemedicine_lead_id'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($telemedicineLeadID)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid lead id';
            } else {


                $leadSql = "SELECT `telemedicine_leads`.`id`,`telemedicine_leads`.`user_id`,`telemedicine_leads`.`is_refund`,`telemedicine_leads`.`reason`,`telemedicine_leads`.`mobile`,IF(`telemedicine_leads`.`user_id` = '" . $user_id . "',`appointment_staffs`.`mobile`,`telemedicine_leads`.`mobile`) AS `to_mobile`,IF(`telemedicine_leads`.`user_id` = '" . $user_id . "','USER','DOCTOR') AS `request_user_type`,`telemedicine_leads`.`thinapp_id`,`appointment_staffs`.`name` AS `doctor_name`,`telemedicine_leads`.`appointment_staff_id`,`telemedicine_leads`.`telemedicine_service_id`,`telemedicine_leads`.`attention_type`,`telemedicine_leads`.`telemedicine_service_type`,`telemedicine_leads`.`payment_type`,`telemedicine_leads`.`price`,`telemedicine_leads`.`validity_type`,`telemedicine_leads`.`validity`,`telemedicine_leads`.`consult_now`,`telemedicine_leads`.`consult_time`,`telemedicine_leads`.`consult_for`,`telemedicine_leads`.`consult_for_name`,`telemedicine_leads`.`consult_for_mobile`,`telemedicine_leads`.`consult_for_gender`,`telemedicine_leads`.`start_time`,`telemedicine_leads`.`end_time`,`telemedicine_leads`.`accept_status`,`telemedicine_leads`.`start_status`,`telemedicine_leads`.`is_doctor_available`,`telemedicine_leads`.`is_paid`,`telemedicine_leads`.`amount`,`telemedicine_leads`.`status`,DATE_FORMAT(`telemedicine_leads`.`created`, '%d %M %Y') AS `created_date`,DATE_FORMAT(`telemedicine_leads`.`created`, '%h:%i %p') AS `created_time`,`telemedicine_leads`.`modified`,`telemedicine_leads`.`lead_status`,`telemedicine_leads`.`has_answered_question` FROM `telemedicine_leads` LEFT JOIN `appointment_staffs` ON (`appointment_staffs`.`id` = `telemedicine_leads`.`appointment_staff_id`) WHERE `telemedicine_leads`.`id` = '" . $telemedicineLeadID . "' LIMIT 1";
                $connection = ConnectionUtil::getConnection();
                $leadSRS = $connection->query($leadSql);
                if ($leadSRS->num_rows) {
                    $leadData = mysqli_fetch_assoc($leadSRS);
                    $isAllowCall = 'YES';
                    $requestUserType = $leadData['request_user_type'];

                    if ($leadData['is_refund'] == 'YES') {
                        $isAllowCall = 'NO';
                    } else if ($leadData['has_answered_question'] == 'N') {
                        $isAllowCall = 'NO';
                    } else if ($leadData['lead_status'] == 'ALLOW' || $leadData['lead_status'] == 'AVAILABLE') {
                        if ($leadData['payment_type'] == 'FIXED' && $leadData['is_paid'] != 'YES') {
                            $isAllowCall = 'NO';
                        } else if ($leadData['start_status'] == 'END') {
                            $isAllowCall = 'NO';
                        } else if ($leadData['request_user_type'] != 'DOCTOR') {
                            $availibilitySql = "SELECT `enable_patient_call` FROM `telemedicine_availabilities` WHERE `appointment_staff_id` = '" . $leadData['appointment_staff_id'] . "' LIMIT 1";
                            $availibilityRS = $connection->query($availibilitySql);
                            $availibilityData = mysqli_fetch_assoc($availibilityRS);
                            if ($availibilityData['enable_patient_call'] == 'Y') {
                                if ($leadData['end_time'] != '0000-00-00 00:00:00') {
                                    if (strtotime($leadData['end_time']) < strtotime(date("Y-m-d H:i:s"))) {
                                        $isAllowCall = 'NO';
                                    }
                                }
                            }
                            else
                            {
                                $isAllowCall = 'NO';
                            }
                        }
                    } else {
                        $isAllowCall = 'NO';
                    }

                    $leadData['is_allow_contact'] = $isAllowCall;
                    $answerSql = "SELECT `telemedicine_chat_answers`.`id` AS `answer_id`,`telemedicine_chat_answers`.`telemedicine_chat_question_id`,`telemedicine_chat_answers`.`answer_text` AS `text_answer`,`telemedicine_chat_answers`.`answer_text`,IF(`telemedicine_chat_answers`.`is_answer_option_one` = 'YES',true,false) AS `selected_option_one`,IF(`telemedicine_chat_answers`.`is_answer_option_two` = 'YES',true,false) AS `selected_option_two`,IF(`telemedicine_chat_answers`.`is_answer_option_three` = 'YES',true,false) AS `selected_option_three`,IF(`telemedicine_chat_answers`.`is_answer_option_four` = 'YES',true,false) AS `selected_option_four`,`telemedicine_chat_questions`.`question`,`telemedicine_chat_questions`.`type`,`telemedicine_chat_questions`.`option_one`,`telemedicine_chat_questions`.`option_two`,`telemedicine_chat_questions`.`option_three`,`telemedicine_chat_questions`.`option_four`,`telemedicine_chat_questions`.`order_number` FROM `telemedicine_chat_answers` LEFT JOIN `telemedicine_chat_questions` ON(`telemedicine_chat_answers`.`telemedicine_chat_question_id` = `telemedicine_chat_questions`.`id`) WHERE `telemedicine_chat_answers`.`telemedicine_lead_id` = '" . $telemedicineLeadID . "' ORDER BY `telemedicine_chat_questions`.`order_number`";
                    $answerRS = $connection->query($answerSql);
                    $answerData = mysqli_fetch_all($answerRS, MYSQLI_ASSOC);
                    $answerDataToSend = array();
                    foreach ($answerData AS $val) {
                        $val['selected_option_one'] = ($val['selected_option_one'] == 0) ? false : true;
                        $val['selected_option_two'] = ($val['selected_option_two'] == 0) ? false : true;
                        $val['selected_option_three'] = ($val['selected_option_three'] == 0) ? false : true;
                        $val['selected_option_four'] = ($val['selected_option_four'] == 0) ? false : true;
                        $answerDataToSend[] = $val;
                    }
                    $dataToSend = array('lead_data' => $leadData, 'answer_list' => $answerDataToSend);

                    $userNameSql = "SELECT `username` FROM `users` WHERE `mobile` = '".$leadData['to_mobile']."' AND `thinapp_id` = '".$thin_app_id."' LIMIT 1";
                    $userNameRS = $connection->query($userNameSql);
                    $userNameData = mysqli_fetch_assoc($userNameRS);
                    $dataToSend['to_username'] = $userNameData['username'];

                    $response = array('status' => 1, 'message' => 'Lead found!', 'data' => $dataToSend);
                } else {
                    $response = array('status' => 0, 'message' => 'Lead not found!');
                }
            }
            Custom::sendResponse($response);
            exit();
        }

    }

    public static function get_telemedicine_lead_user_list()
    {


        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";

            $fromDate = isset($data['fromDate']) ? $data['fromDate'] : "";
            $toDate = isset($data['toDate']) ? $data['toDate'] : "";
            $hasChat = isset($data['hasChat']) ? $data['hasChat'] : "N";
            $hasVideo = isset($data['hasVideo']) ? $data['hasVideo'] : "N";
            $hasAudio = isset($data['hasAudio']) ? $data['hasAudio'] : "N";
            $isPaid = isset($data['is_paid']) ? $data['is_paid'] : "";
            $doctorID = isset($data['doctor_id']) ? $data['doctor_id'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($doctorID)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid doctor id';
            } else {


                $condition = " AND `telemedicine_leads`.`status` ='ACTIVE' AND `telemedicine_leads`.`thinapp_id` = $thin_app_id ";


                if (!empty($fromDate)) {
                    $fromDate = DateTime::createFromFormat('d-m-Y', $fromDate);
                    $fromDate = $fromDate->format('Y-m-d');
                    $condition .= " AND DATE(`telemedicine_leads`.`created`) >= '" . $fromDate . "' ";
                }

                if (!empty($toDate)) {
                    $toDate = DateTime::createFromFormat('d-m-Y', $toDate);
                    $toDate = $toDate->format('Y-m-d');
                    $condition .= " AND DATE(`telemedicine_leads`.`created`) <= '" . $toDate . "' ";
                }

                if (!empty($isPaid)) {
                    $condition .= " AND `telemedicine_leads`.`is_paid` = '" . $isPaid . "' ";
                }

                $conditionOR = array();

                if ($hasChat == 'Y') {
                    $conditionOR[] = 'CHAT';
                }
                if ($hasAudio == 'Y') {
                    $conditionOR[] = 'AUDIO_CALL';
                }
                if ($hasVideo == 'Y') {
                    $conditionOR[] = 'VIDEO_CALL';
                }

                if (!empty($conditionOR)) {
                    $condition .= "AND `telemedicine_service_type` IN ('" . implode("','", $conditionOR) . "') ";
                }

                $leadSql = "SELECT `telemedicine_leads`.`id`,`telemedicine_leads`.`user_id`,`telemedicine_leads`.`is_refund`,`telemedicine_leads`.`mobile`,`telemedicine_leads`.`thinapp_id`,`telemedicine_leads`.`appointment_staff_id`,`telemedicine_leads`.`telemedicine_service_id`,`telemedicine_leads`.`attention_type`,`telemedicine_leads`.`telemedicine_service_type`,`telemedicine_leads`.`payment_type`,`telemedicine_leads`.`price`,`telemedicine_leads`.`validity_type`,`telemedicine_leads`.`validity`,`telemedicine_leads`.`consult_now`,`telemedicine_leads`.`consult_time`,`telemedicine_leads`.`consult_for`,`telemedicine_leads`.`consult_for_name`,`telemedicine_leads`.`consult_for_mobile`,`telemedicine_leads`.`consult_for_gender`,`telemedicine_leads`.`start_time`,`telemedicine_leads`.`end_time`,`telemedicine_leads`.`accept_status`,`telemedicine_leads`.`start_status`,`telemedicine_leads`.`is_doctor_available`,`telemedicine_leads`.`is_paid`,`telemedicine_leads`.`amount`,`telemedicine_leads`.`status`,DATE_FORMAT(`telemedicine_leads`.`created`, '%d %M %Y') AS `created_date`,DATE_FORMAT(`telemedicine_leads`.`created`, '%h:%i %p') AS `created_time`,`telemedicine_leads`.`modified`,`telemedicine_leads`.`lead_status`,`telemedicine_leads`.`has_answered_question`,`appointment_staffs`.`name` AS `doctor_name`,IF(`telemedicine_leads`.`user_id` = '" . $user_id . "',`appointment_staffs`.`mobile`,`telemedicine_leads`.`mobile`) AS `to_mobile`,IF(`telemedicine_leads`.`user_id` = '" . $user_id . "','USER','DOCTOR') AS `request_user_type` FROM `telemedicine_leads` LEFT JOIN `appointment_staffs` ON (`telemedicine_leads`.`appointment_staff_id` = `appointment_staffs`.`id`) WHERE `telemedicine_leads`.`user_id` = '" . $user_id . "' AND `telemedicine_leads`.`appointment_staff_id` = '" . $doctorID . "'" . $condition . " ORDER BY `telemedicine_leads`.`id` DESC";
                $connection = ConnectionUtil::getConnection();
                $leadSRS = $connection->query($leadSql);
                if ($leadSRS->num_rows) {
                    $leadsData = mysqli_fetch_all($leadSRS, MYSQLI_ASSOC);
                    $response = array('status' => 1, 'message' => 'Lead found!', 'data' => array('list' => $leadsData));
                } else {
                    $response = array('status' => 0, 'message' => 'Lead not found!');
                }
            }
            Custom::sendResponse($response);
            exit();
        }

    }

    public static function send_video_connect_notification()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $toMobile = isset($data['to_mobile']) ? $data['to_mobile'] : "";
            $telemedicineLeadID = isset($data['telemedicine_lead_id']) ? $data['telemedicine_lead_id'] : "";

            $room = isset($data['room']) ? $data['room'] : "";


            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else if (empty($toMobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid answer data';
            } else {

            	Custom::manageRoomFile('CREATE',$telemedicineLeadID,'JOINED',$room);
                $response = array("status" => 1, "message" => "Notification sent!");
                Custom::sendResponse($response);
                Custom::send_process_to_background();
            	$msg_data = Custom::getAppointmentMessageData($telemedicineLeadID);
                $patient_mobile = $msg_data['patient_mobile'];
                $thin_app_id = $msg_data['thinapp_id'];
                Custom::sendVideoConnectNotification($thin_app_id,$telemedicineLeadID,$mobile,$toMobile,$room,$msg_data['doctor_id']);
              
            }
        }
        die;
    }

    public static function send_video_disconnect_notification($data=null)
    {
        if(empty($data)){
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);
        }


        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $from_mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $to_mobile = isset($data['to_mobile']) ? Custom::create_mobile_number($data['to_mobile']) : "";
            $RoomName = isset($data['room']) ? $data['room'] : "";
            $module_id = isset($data['telemedicine_lead_id']) ? $data['telemedicine_lead_id'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($from_mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else if (empty($to_mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid to mobile';
            } else if (empty($RoomName)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid room';
            } else {

                $response = array('status' => 1, 'message' => 'Notification sent!');
                Custom::sendResponse($response);
                Custom::send_process_to_background();
                Custom::send_process_to_background();
                $connection = ConnectionUtil::getConnection();
                $query =  "select id, appointment_staff_id as doctor_id, appointment_customer_staff_service_id as module_id, from_mobile, to_mobile  from telemedicine_call_logs  where thinapp_id = $thin_app_id and room='$RoomName' AND disconnect_notification_sent='NO' order by id desc limit 1";
                $queryData = $connection->query($query);
                if ($queryData->num_rows) {
                    $data = mysqli_fetch_assoc($queryData);
                    $doctor_id = $data['doctor_id'];
                    $from_mobile = $data['from_mobile'];
                    $to_mobile = $data['to_mobile'];
                	$module_id = $data['module_id'];
                    $send_one  = Custom::sendVideoDisconnectNotification($thin_app_id,$module_id,$from_mobile,$to_mobile,$RoomName,$doctor_id);
                    $send_two = Custom::sendVideoDisconnectNotification($thin_app_id,$module_id,$to_mobile,$from_mobile,$RoomName,$doctor_id);
                    $disconnect_notification_sent ='YES';
                    $sql = "UPDATE telemedicine_call_logs set disconnect_notification_sent=?, modified =? where id=?";
                    $stmt = $connection->prepare($sql);
                    $stmt->bind_param('sss', $disconnect_notification_sent, $created, $data['id']);
                    $stmt->execute();
                }

            }
        }
        die();
    }

    public static function log_audio_call_connect($data=null)
    {
        $return = true;
        if(empty($data)){
            $return = false;
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);
        }
        if ($_SERVER['REQUEST_METHOD'] === 'POST' || $return===true) {
            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $toMobile = isset($data['to_mobile']) ? $data['to_mobile'] : "";
            $telemedicineLeadID = $module_id=  isset($data['telemedicine_lead_id']) ? $data['telemedicine_lead_id'] : "";
            $module_type = ( isset($data['module_type']) && !empty($data['module_type']) ) ? $data['module_type'] : "TELEMEDICINE";
            $sID = isset($data['sid']) ? $data['sid'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else if (empty($toMobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid to mobile';
            } else if (empty($sID)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid sid';
            } else if ($module_type != 'TELEMEDICINE' && $module_type != 'APPOINTMENT') {
                $response['status'] = 0;
                $response['message'] = 'Invalid module type';
            } else if (empty($telemedicineLeadID) && $module_type =='TELEMEDICINE') {
                $response['status'] = 0;
                $response['message'] = 'Invalid lead ID';
            }else if (empty($telemedicineLeadID) && $module_type =='APPOINTMENT') {
                $response['status'] = 0;
                $response['message'] = 'Invalid lead ID';
            } else {

                $appointment_id = 0;
                $time = date('Y-m-d H:i:s');
                $connection = ConnectionUtil::getConnection();
                if($module_type=="APPOINTMENT"){
                    $appointment_id = $telemedicineLeadID;
                    $telemedicineLeadID = 0;
                }

                $insert_record = true;
                $query =  "select id  from telemedicine_call_logs  where thinapp_id = $thin_app_id and sid='$sID' limit 1";
                $service_message_list = $connection->query($query);
                if (!$service_message_list->num_rows) {
                    $appointment_staff_id =  Custom::getDoctorIdForTelemedicine($module_id,$module_type);
                    $query = "INSERT INTO telemedicine_call_logs (appointment_staff_id, appointment_customer_staff_service_id, telemedicine_lead_id, thinapp_id, type, sid, from_mobile, to_mobile, connect_status, status, created, modified,start_time) VALUES(?, ?, ?,?,?,?,?,?,?,?,?,?,?)";
                    $connection = ConnectionUtil::getConnection();
                    $stmt = $connection->prepare($query);
                    $type = 'AUDIO';
                    $status = 'ACTIVE';
                    $connect_status = 'CONNECTING';
                    $stmt->bind_param('sssssssssssss',  $appointment_staff_id, $appointment_id, $telemedicineLeadID,$thin_app_id,$type,$sID,$mobile,$toMobile,$connect_status,$status,$time,$time,$time );
                    $insert_record = $stmt->execute();
                }
                if ($insert_record) {
                    $dataToSend = array('is_fixed' => 'YES', 'call_end_time' => '', 'call_end_now' => 'NO');
                    if($module_type=="TELEMEDICINE"){
                        $leadSql = "SELECT `start_time`,`validity`,`validity_type` FROM `telemedicine_leads` WHERE `id` = '" . $telemedicineLeadID . "' LIMIT 1";
                        $leadRS = $connection->query($leadSql);
                        $leadData = mysqli_fetch_assoc($leadRS);
                        $startTime = $leadData['start_time'];
                        if ($startTime == '0000-00-00 00:00:00') {
                            $startTime = $time;
                            $validity = $leadData['validity'];
                            if ($leadData['validity_type'] == 'MINS') {
                                $endTime = new DateTime($startTime);
                                $endTime->add(new DateInterval('PT' . $validity . 'M'));
                                $endTime = $endTime->format('Y-m-d H:i:s');
                            } else if ($leadData['validity_type'] == 'HOURS') {
                                $endTime = new DateTime($startTime);
                                $endTime->add(new DateInterval('PT' . $validity . 'H'));
                                $endTime = $endTime->format('Y-m-d H:i:s');
                            } else {
                                $endTime = new DateTime($startTime);
                                $endTime->add(new DateInterval('P' . $validity . 'D'));
                                $endTime = $endTime->format('Y-m-d H:i:s');
                            }


                            $updateLead = "UPDATE `telemedicine_leads` SET `start_time` = '" . $startTime . "', `end_time` = '" . $endTime . "', `modified` = '" . $startTime . "' WHERE `id` = '" . $telemedicineLeadID . "'";
                            $connection->query($updateLead);
                        }

                        $teleLeadSql = "SELECT `user_id`,`payment_type`,`price` FROM `telemedicine_leads` WHERE `id` = '" . $telemedicineLeadID . "' LIMIT 1";
                        $teleLeadRS = $connection->query($teleLeadSql);
                        $teleLeadData = mysqli_fetch_assoc($teleLeadRS);
                        if ($teleLeadData['payment_type'] == 'MINS') {
                            $price = $teleLeadData['price'];
                            $dataToSend['is_fixed'] = 'NO';

                            $walletSql = "SELECT `total_amount` FROM `wallet_users` WHERE `user_id` = '" . $teleLeadData['user_id'] . "' LIMIT 1";
                            $walletRS = $connection->query($walletSql);
                            $walletData = mysqli_fetch_assoc($walletRS);
                            $walletAmount = isset($walletData['total_amount']) ? $walletData['total_amount'] : 0;


                            if ($walletAmount == 0) {
                                $dataToSend['call_end_time'] = $time;
                                $dataToSend['call_end_now'] = 'YES';
                            } else {
                                $totalCallDuration = floor($walletAmount / $price);

                                if ($totalCallDuration < 1) {
                                    $dataToSend['call_end_time'] = $time;
                                    $dataToSend['call_end_now'] = 'YES';
                                } else {
                                    $endTime = new DateTime($time);
                                    $endTime->add(new DateInterval('PT' . $totalCallDuration . 'M'));
                                    $endTime = $endTime->format('m-d-Y H:i:s');
                                    $dataToSend['call_end_time'] = $endTime;
                                    $dataToSend['call_end_now'] = 'NO';
                                }

                            }

                        }
                    }

                    $response['data'] = $dataToSend;
                    $response['status'] = 1;
                    $response['message'] = 'Successfully connected!';
                } else {
                    $response['status'] = 0;
                    $response['message'] = 'Oops,Something went wrong!';
                }

            }
            if($return===true){
                return json_encode($response);
            }else{
                Custom::sendResponse($response);
            }
            die;
        }
    }

    public static function log_audio_call_disconnect($data=null)
    {
        $return = true;
        if(empty($data)){
            $return = false;
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);
        }
        if ($_SERVER['REQUEST_METHOD'] === 'POST' || $return===true) {
            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $toMobile = isset($data['to_mobile']) ? $data['to_mobile'] : "";
            $room = isset($data['room']) ? $data['room'] : "";
            $telemedicineLeadID = isset($data['telemedicine_lead_id']) ? $data['telemedicine_lead_id'] : "";
            $module_type = ( isset($data['module_type']) && !empty($data['module_type']) ) ? $data['module_type'] : "TELEMEDICINE";
            $sID = isset($data['sid']) ? $data['sid'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else if (empty($toMobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid to mobile';
            } else if (empty($sID)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid sid';
            }  else if ($module_type != 'TELEMEDICINE' && $module_type != 'APPOINTMENT') {
                $response['status'] = 0;
                $response['message'] = 'Invalid module type';
            } else if (empty($telemedicineLeadID) && $module_type =='TELEMEDICINE') {
                $response['status'] = 0;
                $response['message'] = 'Invalid lead ID';
            }else if (empty($telemedicineLeadID) && $module_type =='APPOINTMENT') {
                $response['status'] = 0;
                $response['message'] = 'Invalid lead ID';
            } else {


                $appointment_id = 0;
                if($module_type=="APPOINTMENT"){
                    $appointment_id = $telemedicineLeadID;
                    $telemedicineLeadID = 0;
                }

                $dateTime = $time = date('Y-m-d H:i:s');

                $callLog = file_get_contents("http://mengage.co.in/doctor/twilio_auth/getAudioCallLog.php?call_sid=" . $sID);
                $callLog = json_decode($callLog, true);


                $startTime = $callLog['start_time'];
                $startDateTime = new DateTime($startTime['date'], new DateTimeZone($startTime['timezone']));
                $startDateTime->setTimezone(new DateTimeZone('Asia/Calcutta'));
                $startTime = $startDateTime->format('Y-m-d H:i:s');

                $endTime = $callLog['end_time'];
                $startDateTime = new DateTime($endTime['date'], new DateTimeZone($endTime['timezone']));
                $startDateTime->setTimezone(new DateTimeZone('Asia/Calcutta'));
                $endTime = $startDateTime->format('Y-m-d H:i:s');

                $connect_status = $callLog['status'];
                $duration = $callLog['duration'];
                $price = $callLog['price'];
                $price_unit = $callLog['price_unit'];

                $modified = Custom::created();
                $connection = ConnectionUtil::getConnection();
                $sql = "UPDATE telemedicine_call_logs set connect_status =?, duration=?, call_price_twilio=?, call_price_unit=?, start_time=?, end_time=?, modified =? where sid =? and thinapp_id=?";
                $stmt = $connection->prepare($sql);
                $stmt->bind_param('sssssssss', $connect_status,$duration,$price,$price_unit,$startTime,$endTime,$modified,$sID,$thin_app_id);
                if ($stmt->execute()) {
                    if ($connect_status == 'completed') {

                        $total_amount = $call_charges = $doctor_share = $gatway_share = $mengage_share = $gst_share = 0;
                        $total_minutes = ceil($duration/60);
                        $call_charges = Custom::splitAfterDecimal(($total_minutes * TWILIO_VIDEO_RATE));

                        if($module_type=="TELEMEDICINE") {
                            $teleLeadSql = "SELECT `user_id`,`payment_type`,`price` FROM `telemedicine_leads` WHERE `id` = '" . $telemedicineLeadID . "' LIMIT 1";
                            $teleLeadRS = $connection->query($teleLeadSql);
                            $teleLeadData = mysqli_fetch_assoc($teleLeadRS);
                            $price = $teleLeadData['price'];
                            $doctor_share= Custom::splitAfterDecimal(($price - $call_charges));
                            $total_amount = Custom::telemedicineRequiredBalnce($price);
                            $mengage_share = Custom::splitAfterDecimal(Custom::telemedicineRequiredBalnce($price,'CONVENCE'));
                            $gatway_share = Custom::splitAfterDecimal(Custom::telemedicineRequiredBalnce($price,'GETWAY'));
                            $gst_share = Custom::splitAfterDecimal(Custom::telemedicineRequiredBalnce($price,'GST'));
                            if ($teleLeadData['payment_type'] == 'MINS') {
                                $user_id = $teleLeadData['user_id'];
                                $userWalletSql = "SELECT * FROM `wallet_users` WHERE `user_id` = '" . $user_id . "' AND `thinapp_id` = '" . $thin_app_id . "' AND `status` = 'ACTIVE' LIMIT 1";
                                $userWalletRS = $connection->query($userWalletSql);
                                if ($userWalletRS->num_rows) {
                                    $userWalletData = mysqli_fetch_assoc($userWalletRS);
                                    $userHasAmount = $userWalletData['total_amount'];
                                    $durationInMin = $duration / 60;
                                    $durationInMin = ($durationInMin == floor($durationInMin)) ? $durationInMin : $durationInMin + 1;
                                    $totalAmountToDeduct = $price * $durationInMin;
                                    $total_amount = $totalAmountToDeduct;
                                    $teleLeadID = $telemedicineLeadID;
                                    $newWalletAmount = ($userHasAmount - $totalAmountToDeduct);
                                    $updateWalletUser = "UPDATE `wallet_users` SET `total_amount` = '" . $newWalletAmount . "',`modified` = '" . $dateTime . "' WHERE `user_id` = '" . $user_id . "' AND `thinapp_id` = '" . $thin_app_id . "'";
                                    $insertWalletHistory = "INSERT INTO `wallet_user_history` (`user_id`,`thinapp_id`,`type`,`new_wallet_amount`,`amount`,`amount_type`,`telemedicine_lead_id`,`created`,`modified`) VALUES ('" . $user_id . "','" . $thin_app_id . "','TELEMEDICINE','" . $newWalletAmount . "','" . $totalAmountToDeduct . "','DEDUCTION','" . $teleLeadID . "','" . $dateTime . "','" . $dateTime . "')";
                                    $connection->query($updateWalletUser);
                                    $connection->query($insertWalletHistory);
                                }
                            }
                        }

                        $sql = "UPDATE telemedicine_call_logs set call_charges=?, total_amount =?, doctor_share=?, gatway_share=?, mengage_share=?, gst_share=?, modified =? where sid =? and thinapp_id=?";
                        $stmt = $connection->prepare($sql);
                        $stmt->bind_param('sssssssss', $call_charges, $total_amount,$doctor_share,$gatway_share,$mengage_share,$gst_share,$modified,$sID,$thin_app_id);
                        if($stmt->execute() && $module_type=="APPOINTMENT"){
                            $fee_query = "SELECT ( bcfd.doctor_online_consulting_fee - IFNULL(SUM(tcl.call_charges),0)) AS booking_doctor_share_fee FROM booking_convenience_fee_details AS bcfd LEFT JOIN telemedicine_call_logs AS tcl ON tcl.appointment_customer_staff_service_id = bcfd.appointment_customer_staff_service_id WHERE bcfd.appointment_customer_staff_service_id =$appointment_id and bcfd.thinapp_id=$thin_app_id LIMIT 1";
                            $fee_result = $connection->query($fee_query);
                            if ($fee_result->num_rows) {
                                $fee_data = mysqli_fetch_assoc($fee_result);
                                $booking_doctor_share_fee = !empty($fee_data['booking_doctor_share_fee'])?$fee_data['booking_doctor_share_fee']:0;
                                $sql = "UPDATE booking_convenience_fee_details set booking_doctor_share_fee = ?, modified =? where appointment_customer_staff_service_id =? and thinapp_id=?";
                                $stmt_update = $connection->prepare($sql);
                                $stmt_update->bind_param('ssss', $booking_doctor_share_fee, $modified, $appointment_id,$thin_app_id);
                                $stmt_update->execute();
                            }
                        }
                    }

                    $response['status'] = 1;
                    $response['message'] = 'Successfully connected!';
                } else {
                    $response['status'] = 0;
                    $response['message'] = 'Oops,Something went wrong!';
                }

            }
            if($return===true){
                return json_encode($response);
            }else{
                Custom::sendResponse($response);
            }
            die;
        }
    }

    public static function log_video_call_connect()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $toMobile = isset($data['to_mobile']) ? $data['to_mobile'] : "";
            $telemedicineLeadID =$module_id= isset($data['telemedicine_lead_id']) ? $data['telemedicine_lead_id'] : "0";
            $module_type = ( isset($data['module_type']) && !empty($data['module_type']) ) ? $data['module_type'] : "TELEMEDICINE";
            $sID = isset($data['sid']) ? $data['sid'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else if (empty($toMobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid to mobile';
            } else if (empty($sID)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid sid';
            } else if ($module_type != 'TELEMEDICINE' && $module_type != 'APPOINTMENT') {
                $response['status'] = 0;
                $response['message'] = 'Invalid module type';
            } else if (empty($telemedicineLeadID) && $module_type =='TELEMEDICINE') {
                $response['status'] = 0;
                $response['message'] = 'Invalid lead ID';
            }else if (empty($telemedicineLeadID) && $module_type =='APPOINTMENT') {
                $response['status'] = 0;
                $response['message'] = 'Invalid lead ID';
            }else if (empty($sID)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid SID';
            } else {
            
                $dataToSend = array('is_fixed' => 'YES', 'call_end_time' => '', 'call_end_now' => 'NO');
            	$response['data'] = $dataToSend;
                $response['status'] = 1;
                $response['message'] = 'Successfully connected!';
            
            }
            Custom::sendResponse($response);
            die;
        }
    }

    public static function log_video_call_disconnect()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $toMobile = isset($data['to_mobile']) ? $data['to_mobile'] : "";
            $room = isset($data['room']) ? $data['room'] : "";
            $telemedicineLeadID = isset($data['telemedicine_lead_id']) ? $data['telemedicine_lead_id'] : "";
            $module_type = ( isset($data['module_type']) && !empty($data['module_type']) ) ? $data['module_type'] : "TELEMEDICINE";
            $sID = isset($data['sid']) ? $data['sid'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else if (empty($toMobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid to mobile';
            } else if (empty($sID)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid sid';
            }  else if ($module_type != 'TELEMEDICINE' && $module_type != 'APPOINTMENT') {
                $response['status'] = 0;
                $response['message'] = 'Invalid module type';
            } else if (empty($telemedicineLeadID) && $module_type =='TELEMEDICINE') {
                $response['status'] = 0;
                $response['message'] = 'Invalid lead ID';
            }else if (empty($telemedicineLeadID) && $module_type =='APPOINTMENT') {
                $response['status'] = 0;
                $response['message'] = 'Invalid lead ID';
            } else {
				
            	 $response['status'] = 1;
                 $response['message'] = 'Successfully connected!';
            	
            }
            Custom::sendResponse($response);
			$file_name = "join_$telemedicineLeadID";
            if ($join = json_decode(WebservicesFunction::readJson($file_name,"video_join"), true)) {
                 $join['decline']=true;
                 $file_name = "join_$telemedicineLeadID";
                 WebservicesFunction::createJson($file_name,json_encode($join),'CREATE','video_join');
             }

            die;
        }
    }

    public static function get_call_history_by_lead()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $telemedicineLeadID = isset($data['telemedicine_lead_id']) ? $data['telemedicine_lead_id'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else if (empty($telemedicineLeadID)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid lead ID';
            } else {

                $sql = "SELECT `telemedicine_call_logs`.*, SEC_TO_TIME(`duration`) AS `duration_time` FROM `telemedicine_call_logs` WHERE `telemedicine_lead_id` = '" . $telemedicineLeadID . "' ORDER BY `id` DESC";

                $connection = ConnectionUtil::getConnection();
                $callRS = $connection->query($sql);
                if ($callRS->num_rows) {
                    $callData = mysqli_fetch_all($callRS, MYSQLI_ASSOC);
                    $response = array('status' => 1, 'message' => 'Call history found!', 'data' => array('list' => $callData));
                } else {
                    $response = array('status' => 0, 'message' => 'Call history not found!');
                }


            }
            Custom::sendResponse($response);
        }
        die;
    }

    public static function refund_telemedicine()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $telemedicineLeadID = isset($data['telemedicine_lead_id']) ? $data['telemedicine_lead_id'] : "";
            $amount = isset($data['amount']) ? $data['amount'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($telemedicineLeadID)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid lead id';
            } else {
                $connection = ConnectionUtil::getConnection();
                $dateTime = $time = date('Y-m-d H:i:s');
                $teleLeadSql = "SELECT `user_id`,`payment_type`,`price` FROM `telemedicine_leads` WHERE `id` = '" . $telemedicineLeadID . "' LIMIT 1";
                $teleLeadRS = $connection->query($teleLeadSql);
                $teleLeadData = mysqli_fetch_assoc($teleLeadRS);

                $price = $teleLeadData['price'];
                $user_id = $teleLeadData['user_id'];
                $userWalletSql = "SELECT * FROM `wallet_users` WHERE `user_id` = '" . $user_id . "' AND `thinapp_id` = '" . $thin_app_id . "' AND `status` = 'ACTIVE' LIMIT 1";
                $userWalletRS = $connection->query($userWalletSql);
                if ($userWalletRS->num_rows) {
                    $userWalletData = mysqli_fetch_assoc($userWalletRS);
                    $userHasAmount = $userWalletData['total_amount'];

                    $totalAmountToAdd = $amount;

                    $teleLeadID = $telemedicineLeadID;
                    $newWalletAmount = ($userHasAmount + $totalAmountToAdd);
                    $updateWalletUser = "UPDATE `wallet_users` SET `total_amount` = '" . $newWalletAmount . "',`modified` = '" . $dateTime . "' WHERE `user_id` = '" . $user_id . "' AND `thinapp_id` = '" . $thin_app_id . "'";
                    $insertWalletHistory = "INSERT INTO `wallet_user_history` (`user_id`,`thinapp_id`,`type`,`new_wallet_amount`,`amount`,`amount_type`,`telemedicine_lead_id`,`created`,`modified`) VALUES ('" . $user_id . "','" . $thin_app_id . "','TELEMEDICINE','" . $newWalletAmount . "','" . $totalAmountToAdd . "','ADD','" . $teleLeadID . "','" . $dateTime . "','" . $dateTime . "')";

                    $updateRefund = "UPDATE `telemedicine_leads` SET `is_refund` = 'YES', `lead_status` = 'REFUND' WHERE `id` = '" . $teleLeadID . "'";

                    if ($connection->query($updateWalletUser) && $connection->query($insertWalletHistory) && $connection->query($updateRefund)) {
                        $response = array('status' => 1, 'message' => 'Wallet updated!');
                    } else {
                        $response = array('status' => 0, 'message' => 'Something went wrong!');
                    }
                }

            }
            Custom::sendResponse($response);
        }
        die;
    }

	public static function room_callback()
    {

        $postData = $_REQUEST;
        $RoomSid= $postData['RoomSid'];
        $RoomName= $postData['RoomName'];
        $roomArray = Custom::readRoomName($RoomName);
        $thin_app_id =$roomArray['thin_app_id'];
        $module_id =$roomArray['module_id'];
        $module_type =$roomArray['module_name'];
        $fromMobile =$roomArray['from_mobile'];
        $toMobile =$roomArray['to_mobile'];
        $SequenceNumber= $postData['SequenceNumber'];
        $created= Custom::created();
        if($postData['StatusCallbackEvent'] == 'participant-connected'){
            $appointment_id = $telemedicineLeadID =0;
            if($module_type=="APPOINTMENT"){
                $appointment_id = $module_id;
            }else{
                $telemedicineLeadID = $module_id;
            }
            $participantIdentity= $postData['ParticipantIdentity'];
            $connection = ConnectionUtil::getConnection();
            $query =  "select appointment_staff_id as doctor_id, identity_one, identity_two, from_mobile, to_mobile  from telemedicine_call_logs  where thinapp_id = $thin_app_id and sid='$RoomSid' limit 1";
            $queryData = $connection->query($query);
            if (!$queryData->num_rows) {

                $appointment_staff_id =  Custom::getDoctorIdForTelemedicine($module_id,$module_type);
                $query = "INSERT INTO telemedicine_call_logs (room, identity_one, appointment_staff_id, appointment_customer_staff_service_id, telemedicine_lead_id, thinapp_id, type, sid, from_mobile, to_mobile, connect_status, status, created, modified,start_time) VALUES(?, ?, ?, ?,?,?,?,?,?,?,?,?,?,?, ?)";
                $connection = ConnectionUtil::getConnection();
                $stmt = $connection->prepare($query);
                $type = 'VIDEO';
                $status = 'ACTIVE';
                $connect_status = 'CONNECTING';
                $stmt->bind_param('sssssssssssssss', $RoomName, $participantIdentity, $appointment_staff_id, $appointment_id, $telemedicineLeadID,$thin_app_id,$type,$RoomSid,$fromMobile,$toMobile,$connect_status,$status,$created,$created,$created );
                if($stmt->execute()){
                	               	
                	Custom::manageRoomFile('CREATE',$module_id,'JOINED',$RoomName);
                    $room_array = Custom::readRoomName($RoomName);
                    $appointment_id = $room_array['module_id'];
                    
                	
                	$thin_app_id = $room_array['thin_app_id'];
                   
                    //Custom::sendVideoConnectNotification($thin_app_id,$module_id,$fromMobile,$toMobile,$RoomName,$appointment_staff_id);
                }


            }else{
                $data = mysqli_fetch_assoc($queryData);
                $doctor_id = $data['doctor_id'];
                $from_mobile = $data['from_mobile'];
                $identity_one = $data['identity_one'];
                $to_mobile = $data['to_mobile'];
                $identity_two = $data['identity_two'];
                if(empty($data['identity_two'])){
                    $connect_status = 'CONNECTED';
                    $sql = "UPDATE telemedicine_call_logs set connect_status=?, identity_two=?, modified =? where sid =? and thinapp_id=?";
                    $stmt = $connection->prepare($sql);
                    $stmt->bind_param('sssss', $connect_status, $participantIdentity, $created, $RoomSid, $thin_app_id);
                    if($stmt->execute()){
                        $identity_two = $data['identity_two'];
                    }
                }
                
            }
        }else if($postData['StatusCallbackEvent'] == 'participant-disconnected'){

                Custom::manageRoomFile('DELETE',$module_id);
                $connection = ConnectionUtil::getConnection();
                $query =  "select appointment_staff_id as doctor_id, from_mobile, to_mobile  from telemedicine_call_logs  where thinapp_id = $thin_app_id and sid='$RoomSid' AND disconnect_notification_sent='NO' limit 1";
                $queryData = $connection->query($query);
                if ($queryData->num_rows) {
                    $data = mysqli_fetch_assoc($queryData);
                    $doctor_id = $data['doctor_id'];
                    $from_mobile = $data['from_mobile'];
                    $to_mobile = $data['to_mobile'];
                    $send_one  = Custom::sendVideoDisconnectNotification($thin_app_id,$module_id,$from_mobile,$to_mobile,$RoomName,$doctor_id);
                    $send_two = Custom::sendVideoDisconnectNotification($thin_app_id,$module_id,$to_mobile,$from_mobile,$RoomName,$doctor_id);
                    $disconnect_notification_sent ='YES';
                    $sql = "UPDATE telemedicine_call_logs set disconnect_notification_sent=?, modified =? where sid =? and thinapp_id=?";
                    $stmt = $connection->prepare($sql);
                    $stmt->bind_param('ssss', $disconnect_notification_sent, $created, $RoomSid, $thin_app_id);
                    $stmt->execute();
                }
        
        		try{
                    //$roomEnded = file_get_contents(SITE_PATH.'twilio_auth/endRoom.php?RoomSid=' . $RoomSid);
                  
                }catch (Exception $e){

                }
        
        		

        }else if($postData['StatusCallbackEvent'] == 'room-ended'){
			Custom::manageRoomFile('DELETE',$module_id);
            $appointment_id = $telemedicineLeadID =0;
            if($module_type=="APPOINTMENT"){
                
                $appointment_id = $module_id;
            }else{
                $telemedicineLeadID = $module_id;
            }

            $endTime= $postData['Timestamp'];
            $duration= $postData['RoomDuration'];
            $endTime = date('Y-m-d H:i:s',strtotime($endTime));
          
            $connect_status = 'completed';
            $price = isset($callLog['price']) ? $callLog['price'] : "";
            $price_unit = isset($callLog['price_unit']) ? $callLog['price_unit'] : "";
            $modified = Custom::created();
            $connection = ConnectionUtil::getConnection();
            $sql = "UPDATE telemedicine_call_logs set connect_status =?, duration=?, call_price_twilio=?, call_price_unit=?,  end_time=?, modified =? where sid =? and thinapp_id=?";
            $stmt = $connection->prepare($sql);
            $stmt->bind_param('ssssssss', $connect_status,$duration,$price,$price_unit,$endTime,$modified,$RoomSid,$thin_app_id);
            if ($stmt->execute()) {
                if ($connect_status == 'completed') {

                    $total_amount = $call_charges = $doctor_share = $gatway_share = $mengage_share = $gst_share = 0;
                    $total_minutes = ceil($duration/60);
                    $call_charges = Custom::splitAfterDecimal(($total_minutes * TWILIO_VIDEO_RATE));

                    if($module_type=="TELEMEDICINE") {
                        $teleLeadSql = "SELECT `user_id`,`payment_type`,`price` FROM `telemedicine_leads` WHERE `id` = '" . $telemedicineLeadID . "' LIMIT 1";
                        $teleLeadRS = $connection->query($teleLeadSql);
                        $teleLeadData = mysqli_fetch_assoc($teleLeadRS);
                        $price = $teleLeadData['price'];
                        $doctor_share= Custom::splitAfterDecimal(($price - $call_charges));
                        $total_amount = Custom::telemedicineRequiredBalnce($price);
                        $mengage_share = Custom::splitAfterDecimal(Custom::telemedicineRequiredBalnce($price,'CONVENCE'));
                        $gatway_share = Custom::splitAfterDecimal(Custom::telemedicineRequiredBalnce($price,'GETWAY'));
                        $gst_share = Custom::splitAfterDecimal(Custom::telemedicineRequiredBalnce($price,'GST'));
                        if ($teleLeadData['payment_type'] == 'MINS') {
                            $user_id = $teleLeadData['user_id'];
                            $userWalletSql = "SELECT * FROM `wallet_users` WHERE `user_id` = '" . $user_id . "' AND `thinapp_id` = '" . $thin_app_id . "' AND `status` = 'ACTIVE' LIMIT 1";
                            $userWalletRS = $connection->query($userWalletSql);
                            if ($userWalletRS->num_rows) {
                                $userWalletData = mysqli_fetch_assoc($userWalletRS);
                                $userHasAmount = $userWalletData['total_amount'];
                                $durationInMin = $duration / 60;
                                $durationInMin = ($durationInMin == floor($durationInMin)) ? $durationInMin : $durationInMin + 1;
                                $totalAmountToDeduct = $price * $durationInMin;
                                $total_amount = $totalAmountToDeduct;
                                $teleLeadID = $telemedicineLeadID;
                                $newWalletAmount = ($userHasAmount - $totalAmountToDeduct);
                                $updateWalletUser = "UPDATE `wallet_users` SET `total_amount` = '" . $newWalletAmount . "',`modified` = '" . $dateTime . "' WHERE `user_id` = '" . $user_id . "' AND `thinapp_id` = '" . $thin_app_id . "'";
                                $insertWalletHistory = "INSERT INTO `wallet_user_history` (`user_id`,`thinapp_id`,`type`,`new_wallet_amount`,`amount`,`amount_type`,`telemedicine_lead_id`,`created`,`modified`) VALUES ('" . $user_id . "','" . $thin_app_id . "','TELEMEDICINE','" . $newWalletAmount . "','" . $totalAmountToDeduct . "','DEDUCTION','" . $teleLeadID . "','" . $dateTime . "','" . $dateTime . "')";
                                $connection->query($updateWalletUser);
                                $connection->query($insertWalletHistory);
                            }
                        }
                    }

                    $sql = "UPDATE telemedicine_call_logs set call_charges=?, total_amount =?, doctor_share=?, gatway_share=?, mengage_share=?, gst_share=?, modified =? where sid =? and thinapp_id=?";
                    $stmt = $connection->prepare($sql);
                    $stmt->bind_param('sssssssss', $call_charges, $total_amount,$doctor_share,$gatway_share,$mengage_share,$gst_share,$modified,$RoomSid,$thin_app_id);
                    if($stmt->execute() && $module_type=="APPOINTMENT"){
                        $fee_query = "SELECT ( bcfd.doctor_online_consulting_fee - IFNULL(SUM(tcl.call_charges),0)) AS booking_doctor_share_fee FROM booking_convenience_fee_details AS bcfd LEFT JOIN telemedicine_call_logs AS tcl ON tcl.appointment_customer_staff_service_id = bcfd.appointment_customer_staff_service_id WHERE bcfd.appointment_customer_staff_service_id =$appointment_id and bcfd.thinapp_id=$thin_app_id LIMIT 1";
                        $fee_result = $connection->query($fee_query);
                        if ($fee_result->num_rows) {
                            $fee_data = mysqli_fetch_assoc($fee_result);
                            $booking_doctor_share_fee = !empty($fee_data['booking_doctor_share_fee'])?$fee_data['booking_doctor_share_fee']:0;
                            $sql = "UPDATE booking_convenience_fee_details set booking_doctor_share_fee = ?, modified =? where appointment_customer_staff_service_id =? and thinapp_id=?";
                            $stmt_update = $connection->prepare($sql);
                            $stmt_update->bind_param('ssss', $booking_doctor_share_fee, $modified, $appointment_id,$thin_app_id);
                            $stmt_update->execute();
                        }
                    }
                }
            }

        }else if($postData['StatusCallbackEvent'] == 'room-created'){
            
        
        }else if($postData['StatusCallbackEvent'] == 'recording-completed'){
           
        	 $SourceSid= $postData['SourceSid'];
            $RoomName= $postData['RoomName'];
            $Size= $postData['Size'];
            $ParticipantIdentity= $postData['ParticipantIdentity'];
            $RecordingSid= $postData['RecordingSid'];
            $TrackName= $postData['TrackName'];
            $ParticipantSid= $postData['ParticipantSid'];
            $Duration= $postData['Duration'];
            $Timestamp= $postData['Timestamp'];
            $Timestamp = date('Y-m-d H:i:s',strtotime($Timestamp));
            $query = "INSERT INTO room_recordings (thinapp_id,RoomName,RoomSid,RecordingSid,SourceSid,Size,Duration,ParticipantIdentity,Timestamp,ParticipantSid,TrackName) VALUES(?, ?, ?, ?,?,?,?,?,?,?,?)";
            $connection = ConnectionUtil::getConnection();
            $stmt = $connection->prepare($query);
            $stmt->bind_param('sssssssssss', $thin_app_id,$RoomName,$RoomSid,$RecordingSid,$SourceSid,$Size,$Duration,$ParticipantIdentity,$Timestamp,$ParticipantSid,$TrackName);
            $stmt->execute();

        }

         die;
    }


	

    /********************TELEMEDICINE END*******************/


    public static function add_appointment_without_token()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {


            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $messageText = isset($data['message_text']) ? $data['message_text'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else {

                $messageText = explode("##", $messageText);
                $mobileFrom = isset($messageText[0]) ? $messageText[0] : "";
                $name = trim(isset($messageText[1]) ? $messageText[1] : "");
                $gender = isset($messageText[2]) ? $messageText[2] : 'MALE';

                if (empty($mobileFrom)) {

                } else if (empty($name)) {

                } else {
                    $mobileFrom = Custom::create_mobile_number($mobileFrom);

                    $connection = ConnectionUtil::getConnection();

                    $patientSql = "SELECT `id` FROM `appointment_customers` WHERE `first_name` = '" . $name . "' AND `mobile` = '" . $mobileFrom . "' LIMIT 1";
                    $patientRS = $connection->query($patientSql);
                    if ($patientRS->num_rows) {
                        $patientData = mysqli_fetch_assoc($patientRS);
                        $patientID = $patientData['id'];
                    } else {
                        $insertSql = "INSERT INTO `appointment_customers` SET `first_name` = '" . $name . "'";

                        //Custom::create_and_share_folder($thin_app_id, $customer_data['mobile'], $customer_data['first_name'],'CUSTOMER',$customer_data['id']);
                    }


                }


            }
            Custom::sendResponse($response);
        }
        exit();
    }

    
	public static function get_patient_history_old($thin_app_id, $uhid)
    {
        $dataToSend = array();

        if (empty($thin_app_id)) {
            $dataToSend['status'] = 0;
            $dataToSend['message'] = 'Invalid thinapp';
        } else if (empty($uhid)) {
            $dataToSend['status'] = 0;
            $dataToSend['message'] = 'Invalid uhid';
        } else {


            $dataToSend = array();

            $connection = ConnectionUtil::getConnection();
            $patientData = array();

            $patientSql = "SELECT `flag`, `allergy`, `medical_history`, `created` AS `sort_date`, 'PATIENT' AS `type`,`created`,`id`,`first_name` as name,`gender`,`mobile`,`profile_photo`,`dob`,`uhid`,`blood_group` FROM `appointment_customers` WHERE `uhid` = '" . $uhid . "' AND `thinapp_id` = '" . $thin_app_id . "' LIMIT 1";
            $patientRS = $connection->query($patientSql);
            if ($patientRS->num_rows) {
                $patientData = mysqli_fetch_assoc($patientRS);
                $type = "CUSTOMER";
            } else {
                $patientSql = "SELECT `flag`, `allergy`, `medical_history`,`created` AS `sort_date`,'PATIENT' AS `type`,`created`,`id`,`child_name` as name,`mobile`,`image`,`dob`,`gender`,`uhid` FROM `childrens` WHERE `uhid` = '" . $uhid . "' AND `thinapp_id` = '" . $thin_app_id . "' LIMIT 1";
                $patientRS = $connection->query($patientSql);
                $patientData = mysqli_fetch_assoc($patientRS);
                $type = "CHILD";
            }

            if (empty($patientData)) {
                $dataToSend = array('status' => 0, 'message' => 'No Customer found.');
            } else {
                $patitntID = $patientData['id'];

                if ($type == 'CUSTOMER') {


                    $appointmentSql = "SELECT  `appointment_customer_staff_services`.`reason_of_appointment`,`appointment_customer_staff_services`.`consulting_type`, `appointment_customer_staff_services`.`appointment_datetime` AS `sort_date`, 'APPOINTMENT' AS `type`,`appointment_customer_staff_services`.`appointment_datetime`,`appointment_customer_staff_services`.`status`,`appointment_customer_staff_services`.`queue_number`,`appointment_staffs`.`name` AS `doc_name` FROM `appointment_customer_staff_services` LEFT JOIN `appointment_staffs` ON (`appointment_staffs`.`id` = `appointment_customer_staff_services`.`appointment_staff_id`) WHERE `appointment_customer_staff_services`.`appointment_customer_id` = '" . $patitntID . "' AND `appointment_customer_staff_services`.`delete_status` IN ('NONE','REFUND')";
                    $appointmentRS = $connection->query($appointmentSql);
                    $appointmentData = mysqli_fetch_all($appointmentRS, MYSQLI_ASSOC);


                    $medicalFolderSql = "SELECT `id` FROM `drive_folders` WHERE `appointment_customer_id` = '" . $patitntID . "' AND `status` = 'ACTIVE' LIMIT 1";
                    $medicalFolderRS = $connection->query($medicalFolderSql);
                    $medicalFolderData = mysqli_fetch_assoc($medicalFolderRS);

                    $driveFileData = array();
                    if (!empty($medicalFolderData)) {
                        $folderID = $medicalFolderData['id'];
                        $medicalDriveSql = "SELECT `drive_files`.`created` AS `sort_date`, 'FILE' AS `type`,`drive_files`.`created`,`drive_files`.`id`,`drive_files`.`file_name`,`file_category_masters`.`category_name` FROM `drive_files` LEFT JOIN `file_category_masters` ON (`file_category_masters`.`id` = `drive_files`.`file_category_master_id`) WHERE `drive_files`.`drive_folder_id` = '" . $folderID . "' AND `drive_files`.`status` = 'ACTIVE'";
                        $medicalDriveRS = $connection->query($medicalDriveSql);
                        $driveFileData = mysqli_fetch_all($medicalDriveRS, MYSQLI_ASSOC);
                    }

                    foreach ($driveFileData AS $key => $value) {
                        $fileID = $value['id'];
                        $tagsSql = "SELECT GROUP_CONCAT(`patient_illness_tags`.`tag_name`) AS `tags`,`patient_tags`.`drive_file_id` AS `file_id` FROM `patient_tags` LEFT JOIN `patient_illness_tags` ON (`patient_illness_tags`.`id` = `patient_tags`.`patient_illness_tag_id`) WHERE `patient_tags`.`drive_file_id` = '" . $fileID . "' AND `status` = 'ACTIVE' GROUP BY `file_id` LIMIT 1";
                        $tagsRS = $connection->query($tagsSql);
                        $tagsData = mysqli_fetch_assoc($tagsRS);
                        if (!empty($tagsData)) {
                            $driveFileData[$key]['tags'] = $tagsData['tags'];
                        } else {
                            $driveFileData[$key]['tags'] = '';
                        }
                    }

                    $ipdAdmitSql = "SELECT `hospital_ipd`.`admit_date` AS `sort_date`,'IPD_ADMIT' AS `type`,`hospital_ipd`.`ipd_unique_id`,`hospital_ipd`.`admit_date`,`hospital_ipd`.`id`,`appointment_staffs`.`name` AS `doc_name`,`hospital_service_categories`.`name` AS `ward` FROM `hospital_ipd` LEFT JOIN `appointment_staffs` ON(`hospital_ipd`.`appointment_staff_id` = `appointment_staffs`.`id`) LEFT JOIN `hospital_service_categories` ON (`hospital_service_categories`.`id` = `hospital_ipd`.`hospital_service_category_id`) WHERE `hospital_ipd`.`patient_type` = 'CUSTOMER' AND `hospital_ipd`.`patient_id` = '" . $patitntID . "' AND `hospital_ipd`.`status` = 'ACTIVE'";
                    $ipdAdmitRS = $connection->query($ipdAdmitSql);
                    $ipdAdmitData = mysqli_fetch_all($ipdAdmitRS, MYSQLI_ASSOC);


                    $ipdDischargeSql = "SELECT `hospital_discharge`.`discharge_date` AS `sort_date`, 'IPD_DISCHARGE' AS `type`,`hospital_ipd`.`ipd_unique_id`,`hospital_discharge`.`discharge_date`,`hospital_discharge`.`hospital_ipd_id`,`hospital_discharge`.`id` FROM `hospital_discharge` LEFT JOIN `hospital_ipd` ON (`hospital_ipd`.`id` = `hospital_discharge`.`hospital_ipd_id`) WHERE `hospital_ipd`.`patient_type` = 'CUSTOMER' AND `hospital_ipd`.`patient_id` = '" . $patitntID . "' AND `hospital_ipd`.`status` = 'ACTIVE'";
                    $ipdDischargeRS = $connection->query($ipdDischargeSql);
                    $ipdDischargeData = mysqli_fetch_all($ipdDischargeRS, MYSQLI_ASSOC);


                    $billingSql = "SELECT GROUP_CONCAT( CONCAT( MedicalProduct.name, ' #', MedicalProductOrderDetail.total_amount, 'RS')) as service_name,`MedicalProductOrder`.`created` AS `sort_date`, 'BILLING' AS `type`,`MedicalProductOrder`.`created`,`MedicalProductOrder`.`appointment_customer_staff_service_id`,`MedicalProductOrder`.`id`,`MedicalProductOrder`.`total_amount`,`MedicalProductOrder`.`is_opd`,`MedicalProductOrder`.`is_advance`,`MedicalProductOrder`.`is_settlement`,`MedicalProductOrder`.`is_package`,`MedicalProductOrder`.`is_emergency`,`MedicalProductOrder`.`is_expense` FROM `medical_product_orders` AS MedicalProductOrder left join medical_product_order_details as MedicalProductOrderDetail on MedicalProductOrderDetail.medical_product_order_id = MedicalProductOrder.id  left join medical_products as MedicalProduct on MedicalProduct.id= MedicalProductOrderDetail.medical_product_id WHERE `MedicalProductOrder`.`appointment_customer_id` = '" . $patitntID . "' AND `MedicalProductOrder`.`status` = 'ACTIVE' group by MedicalProductOrder.id ";
                    $billingRS = $connection->query($billingSql);
                    $billingData = mysqli_fetch_all($billingRS, MYSQLI_ASSOC);


                    $emergencySql = "SELECT `hospital_emergency`.`admit_date` AS `sort_date`, 'EMERGENCY' AS `type`,`hospital_emergency`.`admit_date`, `hospital_emergency`.`id` FROM `hospital_emergency` WHERE `hospital_emergency`.`appointment_customer_id` = '" . $patitntID . "' AND `hospital_emergency`.`status` = 'ACTIVE'";
                    $emergencyRS = $connection->query($emergencySql);
                    $emergencyData = mysqli_fetch_all($emergencyRS, MYSQLI_ASSOC);


                } else {


                    $appointmentSql = "SELECT `appointment_customer_staff_services`.`reason_of_appointment`,`appointment_customer_staff_services`.`consulting_type`,`appointment_customer_staff_services`.`appointment_datetime` AS `sort_date`, 'APPOINTMENT' AS `type`,`appointment_customer_staff_services`.`appointment_datetime`,`appointment_customer_staff_services`.`status`,`appointment_customer_staff_services`.`queue_number`,`appointment_staffs`.`name` AS `doc_name` FROM `appointment_customer_staff_services` LEFT JOIN `appointment_staffs` ON (`appointment_staffs`.`id` = `appointment_customer_staff_services`.`appointment_staff_id`) WHERE `appointment_customer_staff_services`.`children_id` = '" . $patitntID . "' AND `appointment_customer_staff_services`.`delete_status` IN ('NONE','REFUND')";
                    $appointmentRS = $connection->query($appointmentSql);
                    $appointmentData = mysqli_fetch_all($appointmentRS, MYSQLI_ASSOC);


                    $medicalFolderSql = "SELECT `id` FROM `drive_folders` WHERE `children_id` = '" . $patitntID . "' AND `status` = 'ACTIVE' LIMIT 1";
                    $medicalFolderRS = $connection->query($medicalFolderSql);
                    $medicalFolderData = mysqli_fetch_assoc($medicalFolderRS);

                    $driveFileData = array();
                    if (!empty($medicalFolderData)) {
                        $folderID = $medicalFolderData['id'];
                        $medicalDriveSql = "SELECT `drive_files`.`created` AS `sort_date`, 'FILE' AS `type`,`drive_files`.`created`,`drive_files`.`id`,`drive_files`.`file_name`,`file_category_masters`.`category_name` FROM `drive_files` LEFT JOIN `file_category_masters` ON (`file_category_masters`.`id` = `drive_files`.`file_category_master_id`) WHERE `drive_files`.`drive_folder_id` = '" . $folderID . "' AND `drive_files`.`status` = 'ACTIVE'";
                        $medicalDriveRS = $connection->query($medicalDriveSql);
                        $driveFileData = mysqli_fetch_all($medicalDriveRS, MYSQLI_ASSOC);
                    }

                    foreach ($driveFileData AS $key => $value) {
                        $fileID = $value['id'];
                        $tagsSql = "SELECT GROUP_CONCAT(`patient_illness_tags`.`tag_name`) AS `tags`,`patient_tags`.`drive_file_id` AS `file_id` FROM `patient_tags` LEFT JOIN `patient_illness_tags` ON (`patient_illness_tags`.`id` = `patient_tags`.`patient_illness_tag_id`) WHERE `patient_tags`.`drive_file_id` = '" . $fileID . "' AND `status` = 'ACTIVE' GROUP BY `file_id` LIMIT 1";
                        $tagsRS = $connection->query($tagsSql);
                        $tagsData = mysqli_fetch_assoc($tagsRS);
                        if (!empty($tagsData)) {
                            $driveFileData[$key]['tags'] = $tagsData['tags'];
                        } else {
                            $driveFileData[$key]['tags'] = '';
                        }
                    }

                    $ipdAdmitSql = "SELECT `hospital_ipd`.`admit_date` AS `sort_date`, 'IPD_ADMIT' AS `type`,`hospital_ipd`.`ipd_unique_id`,`hospital_ipd`.`admit_date`,`hospital_ipd`.`id`,`appointment_staffs`.`name` AS `doc_name`,`hospital_service_categories`.`name` AS `ward` FROM `hospital_ipd` LEFT JOIN `appointment_staffs` ON(`hospital_ipd`.`appointment_staff_id` = `appointment_staffs`.`id`) LEFT JOIN `hospital_service_categories` ON (`hospital_service_categories`.`id` = `hospital_ipd`.`hospital_service_category_id`) WHERE `patient_type` = 'CHILDREN' AND `hospital_ipd`.`patient_id` = '" . $patitntID . "' AND `hospital_ipd`.`status` = 'ACTIVE'";
                    $ipdAdmitRS = $connection->query($ipdAdmitSql);
                    $ipdAdmitData = mysqli_fetch_all($ipdAdmitRS, MYSQLI_ASSOC);


                    $ipdDischargeSql = "SELECT `hospital_discharge`.`discharge_date` AS `sort_date`, 'IPD_DISCHARGE' AS `type`,`hospital_discharge`.`discharge_date`,`hospital_discharge`.`hospital_ipd_id`,`hospital_discharge`.`id`,`hospital_ipd`.`ipd_unique_id` FROM `hospital_discharge` LEFT JOIN `hospital_ipd` ON (`hospital_ipd`.`id` = `hospital_discharge`.`hospital_ipd_id`)  WHERE `hospital_ipd`.`patient_type` = 'CHILDREN' AND `hospital_ipd`.`patient_id` = '" . $patitntID . "' AND `hospital_ipd`.`status` = 'ACTIVE'";
                    $ipdDischargeRS = $connection->query($ipdDischargeSql);
                    $ipdDischargeData = mysqli_fetch_all($ipdDischargeRS, MYSQLI_ASSOC);


                    $billingSql = "SELECT  GROUP_CONCAT( CONCAT( MedicalProduct.name, ' #', MedicalProductOrderDetail.total_amount, 'RS')) as service_name, `MedicalProductOrder`.`created` AS `sort_date`, 'BILLING' AS `type`,`MedicalProductOrder`.`appointment_customer_staff_service_id`,`MedicalProductOrder`.`created`,`MedicalProductOrder`.`id`,`MedicalProductOrder`.`total_amount`,`MedicalProductOrder`.`is_opd`,`MedicalProductOrder`.`is_advance`,`MedicalProductOrder`.`is_settlement`,`MedicalProductOrder`.`is_package`,`MedicalProductOrder`.`is_emergency`,`MedicalProductOrder`.`is_expense` FROM `medical_product_orders` AS MedicalProductOrder left join medical_product_order_details as MedicalProductOrderDetail on MedicalProductOrderDetail.medical_product_order_id = MedicalProductOrder.id  left join medical_products as MedicalProduct on MedicalProduct.id= MedicalProductOrderDetail.medical_product_id WHERE `MedicalProductOrder`.`children_id` = '" . $patitntID . "' AND `MedicalProductOrder`.`status` = 'ACTIVE' group by MedicalProductOrder.id ";
                    $billingRS = $connection->query($billingSql);
                    $billingData = mysqli_fetch_all($billingRS, MYSQLI_ASSOC);


                    $emergencySql = "SELECT `hospital_emergency`.`admit_date` AS `sort_date`, 'EMERGENCY' AS `type`,`hospital_emergency`.`admit_date`, `hospital_emergency`.`id` FROM `hospital_emergency` WHERE `hospital_emergency`.`children_id` = '" . $patitntID . "' AND `hospital_emergency`.`status` = 'ACTIVE'";
                    $emergencyRS = $connection->query($emergencySql);
                    $emergencyData = mysqli_fetch_all($emergencyRS, MYSQLI_ASSOC);


                }

                $data = array_merge(array($patientData), $appointmentData, $driveFileData, $ipdAdmitData, $ipdDischargeData, $billingData, $emergencyData);


                usort($data, function ($a, $b) {
                    $ad = new DateTime($a['sort_date']);
                    $bd = new DateTime($b['sort_date']);
                    if ($ad == $bd) {
                        return -1;
                    }
                    return $ad < $bd ? 1 : -1;
                });

                //$patientDetail = array('uhid' => $patientData['uhid'],'gender'=>$patientData['gender'], 'name' => isset($patientData['first_name']) ? $patientData['first_name'] : $patientData['child_name']);

                $dataToSend = array('status' => 1, 'patientDetail' => $patientData, 'data' => $data);

            }
        }
        return $dataToSend;
    }

	public static function get_patient_history($thin_app_id, $uhid)
    {
        $dataToSend = array();

        if (empty($thin_app_id)) {
            $dataToSend['status'] = 0;
            $dataToSend['message'] = 'Invalid thinapp';
        } else if (empty($uhid)) {
            $dataToSend['status'] = 0;
            $dataToSend['message'] = 'Invalid uhid';
        } else {


            $dataToSend = array();

            $connection = ConnectionUtil::getConnection();
            $patientData = array();

            $patientSql = "SELECT `flag`, `allergy`, `medical_history`, `created` AS `sort_date`, 'PATIENT' AS `type`,`created`,`id`,`first_name` as name,`gender`,`mobile`,`profile_photo`,`dob`,`uhid`,`blood_group` FROM `appointment_customers` WHERE `uhid` = '" . $uhid . "' AND `thinapp_id` = '" . $thin_app_id . "' LIMIT 1";
            $patientRS = $connection->query($patientSql);
            if ($patientRS->num_rows) {
                $patientData = mysqli_fetch_assoc($patientRS);
                $type = "CUSTOMER";
            } else {
                $patientSql = "SELECT `flag`, `allergy`, `medical_history`,`created` AS `sort_date`,'PATIENT' AS `type`,`created`,`id`,`child_name` as name,`mobile`,`image`,`dob`,`gender`,`uhid` FROM `childrens` WHERE `uhid` = '" . $uhid . "' AND `thinapp_id` = '" . $thin_app_id . "' LIMIT 1";
                $patientRS = $connection->query($patientSql);
                $patientData = mysqli_fetch_assoc($patientRS);
                $type = "CHILD";
            }

            if (empty($patientData)) {
                $dataToSend = array('status' => 0, 'message' => 'No Customer found.');
            } else {
                $patitntID = $patientData['id'];

                if ($type == 'CUSTOMER') {


                    $appointmentSql = "SELECT final.* FROM ( SELECT  `appointment_customer_staff_services`.`reason_of_appointment`,`appointment_customer_staff_services`.`consulting_type`, `appointment_customer_staff_services`.`appointment_datetime` AS `sort_date`, 'APPOINTMENT' AS `type`,`appointment_customer_staff_services`.`appointment_datetime`,`appointment_customer_staff_services`.`status`,`appointment_customer_staff_services`.`queue_number`,`appointment_staffs`.`name` AS `doc_name` FROM `appointment_customer_staff_services` LEFT JOIN `appointment_staffs` ON (`appointment_staffs`.`id` = `appointment_customer_staff_services`.`appointment_staff_id`) WHERE `appointment_customer_staff_services`.`appointment_customer_id` = '" . $patitntID . "' AND `appointment_customer_staff_services`.`delete_status` IN ('NONE','REFUND') UNION ALL SELECT  `appointment_customer_staff_services_archive`.`reason_of_appointment`,`appointment_customer_staff_services_archive`.`consulting_type`, `appointment_customer_staff_services_archive`.`appointment_datetime` AS `sort_date`, 'APPOINTMENT' AS `type`,`appointment_customer_staff_services_archive`.`appointment_datetime`,`appointment_customer_staff_services_archive`.`status`,`appointment_customer_staff_services_archive`.`queue_number`,`appointment_staffs`.`name` AS `doc_name` FROM `appointment_customer_staff_services_archive` LEFT JOIN `appointment_staffs` ON (`appointment_staffs`.`id` = `appointment_customer_staff_services_archive`.`appointment_staff_id`) WHERE `appointment_customer_staff_services_archive`.`appointment_customer_id` = '" . $patitntID . "' AND `appointment_customer_staff_services_archive`.`delete_status` IN ('NONE','REFUND')) AS final";
                    $appointmentRS = $connection->query($appointmentSql);
                    $appointmentData = mysqli_fetch_all($appointmentRS, MYSQLI_ASSOC);


                    $medicalFolderSql = "SELECT `id` FROM `drive_folders` WHERE `appointment_customer_id` = '" . $patitntID . "' AND `status` = 'ACTIVE' LIMIT 1";
                    $medicalFolderRS = $connection->query($medicalFolderSql);
                    $medicalFolderData = mysqli_fetch_assoc($medicalFolderRS);

                    $driveFileData = array();
                    if (!empty($medicalFolderData)) {
                        $folderID = $medicalFolderData['id'];
                        $medicalDriveSql = "SELECT `drive_files`.`created` AS `sort_date`, 'FILE' AS `type`,`drive_files`.`created`,`drive_files`.`id`,`drive_files`.`file_name`,`file_category_masters`.`category_name` FROM `drive_files` LEFT JOIN `file_category_masters` ON (`file_category_masters`.`id` = `drive_files`.`file_category_master_id`) WHERE `drive_files`.`drive_folder_id` = '" . $folderID . "' AND `drive_files`.`status` = 'ACTIVE'";
                        $medicalDriveRS = $connection->query($medicalDriveSql);
                        $driveFileData = mysqli_fetch_all($medicalDriveRS, MYSQLI_ASSOC);
                    }

                    foreach ($driveFileData AS $key => $value) {
                        $fileID = $value['id'];
                        $tagsSql = "SELECT GROUP_CONCAT(`patient_illness_tags`.`tag_name`) AS `tags`,`patient_tags`.`drive_file_id` AS `file_id` FROM `patient_tags` LEFT JOIN `patient_illness_tags` ON (`patient_illness_tags`.`id` = `patient_tags`.`patient_illness_tag_id`) WHERE `patient_tags`.`drive_file_id` = '" . $fileID . "' AND `status` = 'ACTIVE' GROUP BY `file_id` LIMIT 1";
                        $tagsRS = $connection->query($tagsSql);
                        $tagsData = mysqli_fetch_assoc($tagsRS);
                        if (!empty($tagsData)) {
                            $driveFileData[$key]['tags'] = $tagsData['tags'];
                        } else {
                            $driveFileData[$key]['tags'] = '';
                        }
                    }

                    $ipdAdmitSql = "SELECT `hospital_ipd`.`admit_date` AS `sort_date`,'IPD_ADMIT' AS `type`,`hospital_ipd`.`ipd_unique_id`,`hospital_ipd`.`admit_date`,`hospital_ipd`.`id`,`appointment_staffs`.`name` AS `doc_name`,`hospital_service_categories`.`name` AS `ward` FROM `hospital_ipd` LEFT JOIN `appointment_staffs` ON(`hospital_ipd`.`appointment_staff_id` = `appointment_staffs`.`id`) LEFT JOIN `hospital_service_categories` ON (`hospital_service_categories`.`id` = `hospital_ipd`.`hospital_service_category_id`) WHERE `hospital_ipd`.`patient_type` = 'CUSTOMER' AND `hospital_ipd`.`patient_id` = '" . $patitntID . "' AND `hospital_ipd`.`status` = 'ACTIVE'";
                    $ipdAdmitRS = $connection->query($ipdAdmitSql);
                    $ipdAdmitData = mysqli_fetch_all($ipdAdmitRS, MYSQLI_ASSOC);


                    $ipdDischargeSql = "SELECT `hospital_discharge`.`discharge_date` AS `sort_date`, 'IPD_DISCHARGE' AS `type`,`hospital_ipd`.`ipd_unique_id`,`hospital_discharge`.`discharge_date`,`hospital_discharge`.`hospital_ipd_id`,`hospital_discharge`.`id` FROM `hospital_discharge` LEFT JOIN `hospital_ipd` ON (`hospital_ipd`.`id` = `hospital_discharge`.`hospital_ipd_id`) WHERE `hospital_ipd`.`patient_type` = 'CUSTOMER' AND `hospital_ipd`.`patient_id` = '" . $patitntID . "' AND `hospital_ipd`.`status` = 'ACTIVE'";
                    $ipdDischargeRS = $connection->query($ipdDischargeSql);
                    $ipdDischargeData = mysqli_fetch_all($ipdDischargeRS, MYSQLI_ASSOC);


                    $billingSql = "select final.* from ( SELECT GROUP_CONCAT( CONCAT( MedicalProduct.name, ' #', MedicalProductOrderDetail.total_amount, 'RS')) as service_name,`MedicalProductOrder`.`created` AS `sort_date`, 'BILLING' AS `type`,`MedicalProductOrder`.`created`,`MedicalProductOrder`.`appointment_customer_staff_service_id`,`MedicalProductOrder`.`id`,`MedicalProductOrder`.`total_amount`,`MedicalProductOrder`.`is_opd`,`MedicalProductOrder`.`is_advance`,`MedicalProductOrder`.`is_settlement`,`MedicalProductOrder`.`is_package`,`MedicalProductOrder`.`is_emergency`,`MedicalProductOrder`.`is_expense` FROM `medical_product_orders` AS MedicalProductOrder left join medical_product_order_details as MedicalProductOrderDetail on MedicalProductOrderDetail.medical_product_order_id = MedicalProductOrder.id  left join medical_products as MedicalProduct on MedicalProduct.id= MedicalProductOrderDetail.medical_product_id WHERE `MedicalProductOrder`.`appointment_customer_id` = '" . $patitntID . "' AND `MedicalProductOrder`.`status` = 'ACTIVE' group by MedicalProductOrder.id UNION ALL SELECT GROUP_CONCAT( CONCAT( MedicalProduct.name, ' #', MedicalProductOrderDetail.total_amount, 'RS')) as service_name,`MedicalProductOrder`.`created` AS `sort_date`, 'BILLING' AS `type`,`MedicalProductOrder`.`created`,`MedicalProductOrder`.`appointment_customer_staff_service_id`,`MedicalProductOrder`.`id`,`MedicalProductOrder`.`total_amount`,`MedicalProductOrder`.`is_opd`,`MedicalProductOrder`.`is_advance`,`MedicalProductOrder`.`is_settlement`,`MedicalProductOrder`.`is_package`,`MedicalProductOrder`.`is_emergency`,`MedicalProductOrder`.`is_expense` FROM `medical_product_orders_archive` AS MedicalProductOrder left join medical_product_order_details_archive as MedicalProductOrderDetail on MedicalProductOrderDetail.medical_product_order_id = MedicalProductOrder.id  left join medical_products as MedicalProduct on MedicalProduct.id= MedicalProductOrderDetail.medical_product_id WHERE `MedicalProductOrder`.`appointment_customer_id` = '" . $patitntID . "' AND `MedicalProductOrder`.`status` = 'ACTIVE' group by MedicalProductOrder.id ) AS final";
                    $billingRS = $connection->query($billingSql);
                    $billingData = mysqli_fetch_all($billingRS, MYSQLI_ASSOC);


                    $emergencySql = "SELECT `hospital_emergency`.`admit_date` AS `sort_date`, 'EMERGENCY' AS `type`,`hospital_emergency`.`admit_date`, `hospital_emergency`.`id` FROM `hospital_emergency` WHERE `hospital_emergency`.`appointment_customer_id` = '" . $patitntID . "' AND `hospital_emergency`.`status` = 'ACTIVE'";
                    $emergencyRS = $connection->query($emergencySql);
                    $emergencyData = mysqli_fetch_all($emergencyRS, MYSQLI_ASSOC);


                } else {


                    $appointmentSql = "select final.* from ( SELECT `appointment_customer_staff_services`.`reason_of_appointment`,`appointment_customer_staff_services`.`consulting_type`,`appointment_customer_staff_services`.`appointment_datetime` AS `sort_date`, 'APPOINTMENT' AS `type`,`appointment_customer_staff_services`.`appointment_datetime`,`appointment_customer_staff_services`.`status`,`appointment_customer_staff_services`.`queue_number`,`appointment_staffs`.`name` AS `doc_name` FROM `appointment_customer_staff_services` LEFT JOIN `appointment_staffs` ON (`appointment_staffs`.`id` = `appointment_customer_staff_services`.`appointment_staff_id`) WHERE `appointment_customer_staff_services`.`children_id` = '" . $patitntID . "' AND `appointment_customer_staff_services`.`delete_status` IN ('NONE','REFUND') UNION ALL SELECT `appointment_customer_staff_services_archive`.`reason_of_appointment`,`appointment_customer_staff_services_archive`.`consulting_type`,`appointment_customer_staff_services_archive`.`appointment_datetime` AS `sort_date`, 'APPOINTMENT' AS `type`,`appointment_customer_staff_services_archive`.`appointment_datetime`,`appointment_customer_staff_services_archive`.`status`,`appointment_customer_staff_services_archive`.`queue_number`,`appointment_staffs`.`name` AS `doc_name` FROM `appointment_customer_staff_services_archive` LEFT JOIN `appointment_staffs` ON (`appointment_staffs`.`id` = `appointment_customer_staff_services_archive`.`appointment_staff_id`) WHERE `appointment_customer_staff_services_archive`.`children_id` = '" . $patitntID . "' AND `appointment_customer_staff_services_archive`.`delete_status` IN ('NONE','REFUND')) as final";
                    $appointmentRS = $connection->query($appointmentSql);
                    $appointmentData = mysqli_fetch_all($appointmentRS, MYSQLI_ASSOC);


                    $medicalFolderSql = "SELECT `id` FROM `drive_folders` WHERE `children_id` = '" . $patitntID . "' AND `status` = 'ACTIVE' LIMIT 1";
                    $medicalFolderRS = $connection->query($medicalFolderSql);
                    $medicalFolderData = mysqli_fetch_assoc($medicalFolderRS);

                    $driveFileData = array();
                    if (!empty($medicalFolderData)) {
                        $folderID = $medicalFolderData['id'];
                        $medicalDriveSql = "SELECT `drive_files`.`created` AS `sort_date`, 'FILE' AS `type`,`drive_files`.`created`,`drive_files`.`id`,`drive_files`.`file_name`,`file_category_masters`.`category_name` FROM `drive_files` LEFT JOIN `file_category_masters` ON (`file_category_masters`.`id` = `drive_files`.`file_category_master_id`) WHERE `drive_files`.`drive_folder_id` = '" . $folderID . "' AND `drive_files`.`status` = 'ACTIVE'";
                        $medicalDriveRS = $connection->query($medicalDriveSql);
                        $driveFileData = mysqli_fetch_all($medicalDriveRS, MYSQLI_ASSOC);
                    }

                    foreach ($driveFileData AS $key => $value) {
                        $fileID = $value['id'];
                        $tagsSql = "SELECT GROUP_CONCAT(`patient_illness_tags`.`tag_name`) AS `tags`,`patient_tags`.`drive_file_id` AS `file_id` FROM `patient_tags` LEFT JOIN `patient_illness_tags` ON (`patient_illness_tags`.`id` = `patient_tags`.`patient_illness_tag_id`) WHERE `patient_tags`.`drive_file_id` = '" . $fileID . "' AND `status` = 'ACTIVE' GROUP BY `file_id` LIMIT 1";
                        $tagsRS = $connection->query($tagsSql);
                        $tagsData = mysqli_fetch_assoc($tagsRS);
                        if (!empty($tagsData)) {
                            $driveFileData[$key]['tags'] = $tagsData['tags'];
                        } else {
                            $driveFileData[$key]['tags'] = '';
                        }
                    }

                    $ipdAdmitSql = "SELECT `hospital_ipd`.`admit_date` AS `sort_date`, 'IPD_ADMIT' AS `type`,`hospital_ipd`.`ipd_unique_id`,`hospital_ipd`.`admit_date`,`hospital_ipd`.`id`,`appointment_staffs`.`name` AS `doc_name`,`hospital_service_categories`.`name` AS `ward` FROM `hospital_ipd` LEFT JOIN `appointment_staffs` ON(`hospital_ipd`.`appointment_staff_id` = `appointment_staffs`.`id`) LEFT JOIN `hospital_service_categories` ON (`hospital_service_categories`.`id` = `hospital_ipd`.`hospital_service_category_id`) WHERE `patient_type` = 'CHILDREN' AND `hospital_ipd`.`patient_id` = '" . $patitntID . "' AND `hospital_ipd`.`status` = 'ACTIVE'";
                    $ipdAdmitRS = $connection->query($ipdAdmitSql);
                    $ipdAdmitData = mysqli_fetch_all($ipdAdmitRS, MYSQLI_ASSOC);


                    $ipdDischargeSql = "SELECT `hospital_discharge`.`discharge_date` AS `sort_date`, 'IPD_DISCHARGE' AS `type`,`hospital_discharge`.`discharge_date`,`hospital_discharge`.`hospital_ipd_id`,`hospital_discharge`.`id`,`hospital_ipd`.`ipd_unique_id` FROM `hospital_discharge` LEFT JOIN `hospital_ipd` ON (`hospital_ipd`.`id` = `hospital_discharge`.`hospital_ipd_id`)  WHERE `hospital_ipd`.`patient_type` = 'CHILDREN' AND `hospital_ipd`.`patient_id` = '" . $patitntID . "' AND `hospital_ipd`.`status` = 'ACTIVE'";
                    $ipdDischargeRS = $connection->query($ipdDischargeSql);
                    $ipdDischargeData = mysqli_fetch_all($ipdDischargeRS, MYSQLI_ASSOC);


                    $billingSql = "select final.* from (SELECT  GROUP_CONCAT( CONCAT( MedicalProduct.name, ' #', MedicalProductOrderDetail.total_amount, 'RS')) as service_name, `MedicalProductOrder`.`created` AS `sort_date`, 'BILLING' AS `type`,`MedicalProductOrder`.`appointment_customer_staff_service_id`,`MedicalProductOrder`.`created`,`MedicalProductOrder`.`id`,`MedicalProductOrder`.`total_amount`,`MedicalProductOrder`.`is_opd`,`MedicalProductOrder`.`is_advance`,`MedicalProductOrder`.`is_settlement`,`MedicalProductOrder`.`is_package`,`MedicalProductOrder`.`is_emergency`,`MedicalProductOrder`.`is_expense` FROM `medical_product_orders` AS MedicalProductOrder left join medical_product_order_details as MedicalProductOrderDetail on MedicalProductOrderDetail.medical_product_order_id = MedicalProductOrder.id  left join medical_products as MedicalProduct on MedicalProduct.id= MedicalProductOrderDetail.medical_product_id WHERE `MedicalProductOrder`.`children_id` = '" . $patitntID . "' AND `MedicalProductOrder`.`status` = 'ACTIVE' group by MedicalProductOrder.id UNION ALL SELECT  GROUP_CONCAT( CONCAT( MedicalProduct.name, ' #', MedicalProductOrderDetail.total_amount, 'RS')) as service_name, `MedicalProductOrder`.`created` AS `sort_date`, 'BILLING' AS `type`,`MedicalProductOrder`.`appointment_customer_staff_service_id`,`MedicalProductOrder`.`created`,`MedicalProductOrder`.`id`,`MedicalProductOrder`.`total_amount`,`MedicalProductOrder`.`is_opd`,`MedicalProductOrder`.`is_advance`,`MedicalProductOrder`.`is_settlement`,`MedicalProductOrder`.`is_package`,`MedicalProductOrder`.`is_emergency`,`MedicalProductOrder`.`is_expense` FROM `medical_product_orders_archive` AS MedicalProductOrder left join medical_product_order_details_archive as MedicalProductOrderDetail on MedicalProductOrderDetail.medical_product_order_id = MedicalProductOrder.id  left join medical_products as MedicalProduct on MedicalProduct.id= MedicalProductOrderDetail.medical_product_id WHERE `MedicalProductOrder`.`children_id` = '" . $patitntID . "' AND `MedicalProductOrder`.`status` = 'ACTIVE' group by MedicalProductOrder.id ) AS final ";
                    $billingRS = $connection->query($billingSql);
                    $billingData = mysqli_fetch_all($billingRS, MYSQLI_ASSOC);


                    $emergencySql = "SELECT `hospital_emergency`.`admit_date` AS `sort_date`, 'EMERGENCY' AS `type`,`hospital_emergency`.`admit_date`, `hospital_emergency`.`id` FROM `hospital_emergency` WHERE `hospital_emergency`.`children_id` = '" . $patitntID . "' AND `hospital_emergency`.`status` = 'ACTIVE'";
                    $emergencyRS = $connection->query($emergencySql);
                    $emergencyData = mysqli_fetch_all($emergencyRS, MYSQLI_ASSOC);


                }

                $data = array_merge(array($patientData), $appointmentData, $driveFileData, $ipdAdmitData, $ipdDischargeData, $billingData, $emergencyData);


                usort($data, function ($a, $b) {
                    $ad = new DateTime($a['sort_date']);
                    $bd = new DateTime($b['sort_date']);
                    if ($ad == $bd) {
                        return -1;
                    }
                    return $ad < $bd ? 1 : -1;
                });

                //$patientDetail = array('uhid' => $patientData['uhid'],'gender'=>$patientData['gender'], 'name' => isset($patientData['first_name']) ? $patientData['first_name'] : $patientData['child_name']);

                $dataToSend = array('status' => 1, 'patientDetail' => $patientData, 'data' => $data);

            }
        }
        return $dataToSend;
    }

    public static function update_app_logo()
    {
        $thin_app_id = @base64_decode($_REQUEST['t']);
        $data_type = @($_REQUEST['dt']);
        $path = @($_REQUEST['p']);
        $connection = ConnectionUtil::getConnection();

        if (!empty($thin_app_id) && !empty($path) && Custom::getThinAppData($thin_app_id)) {
           if($data_type =="LOGO"){
               $sql = "UPDATE thinapps SET  logo = ? where id= ?";
           }else if($data_type =="IC_LAUNCHER"){
               $sql = "UPDATE thinapps SET  ic_launcher = ? where id= ?";
           }else if($data_type =="DRAWER"){
               $sql = "UPDATE thinapps SET  left_drawer = ? where id= ?";
           }else{
               die('INVALID PARMA');
            }

            $stmt = $connection->prepare($sql);
            $stmt->bind_param('ss', $path, $thin_app_id);
            if ($stmt->execute()) {
                $dataToSend['status'] = 1;
                $dataToSend['message'] = 'Logo update successfully';
                WebservicesFunction::deleteJson(array("icon_$thin_app_id"), "icon");
            } else {
                $dataToSend['status'] = 0;
                $dataToSend['message'] = "Could not found request list!";
            }
            echo json_encode($dataToSend);

        }
        die;
    }

    public static function send_chat_notification_new(){
		$receivedData = json_decode($_REQUEST['data'],true);
        $_id = $receivedData['_id'];
        $thinapp_id = $receivedData['thinapp_id'];
        $chat_id = $receivedData['chat_id'];
        $is_read = $receivedData['is_read'];
        $message = $receivedData['message'];
        $from_mobile = $receivedData['from_mobile'];
        $unique_id = $receivedData['unique_id'];
        $to_mobile = $receivedData['to_mobile'];
        $module_type = ($receivedData['module_type'])?$receivedData['module_type']:"CHAT";
        $post_visit_id = ($receivedData['post_visit_id'])?$receivedData['post_visit_id']:0;
        $type = $receivedData['type'];
        $date = $receivedData['date'];
        $file = $receivedData['file'];
        $from_username = $receivedData['from_username'];

        $dataToSend = array("from_username"=>$from_username,"post_visit_id"=>$post_visit_id,"module_type"=>$module_type,"thinapp_id"=>$thinapp_id,"chat_id"=>$chat_id,"is_read"=>$chat_id,"is_read"=>$is_read,"message"=>$message,"from_mobile"=>$from_mobile,"unique_id"=>$unique_id,"to_mobile"=>$to_mobile,"type"=>$type,"date"=>$date,"file"=>$file);


        $connection = ConnectionUtil::getConnection();

        if (!empty($thinapp_id) && !empty($chat_id)) {
            $userSql = "SELECT `firebase_token` FROM `users` WHERE `mobile` = '".$to_mobile."' AND `thinapp_id` = '".$thinapp_id."' LIMIT 1";
            $userRS = $connection->query($userSql);
            if($userRS->num_rows)
            {
                $firebasTokenData = mysqli_fetch_assoc($userRS);
                $firebasToken = $firebasTokenData['firebase_token'];


                $send_array = array(
                    'title' => 'New Message',
                    'thinapp_id' => $thinapp_id,
                    'message' => mb_strimwidth($message, 0, 50, '...'),
                    'flag' => 'FCHAT',
                    'firebase_reference' => "",
                    'firebase_token' => $firebasToken,
                    'from_number' => $from_mobile,
                    'to_number' => $to_mobile,
                    'to_username' => "",
                    'description' => '',
                    'chat_reference' => json_encode($dataToSend),
                    'module_type' => $module_type,
                    'notification_for' => "CHAT",
                    'patient_id' => 0,
                    'doctor_id' => 0,
                    'chat_visit_id' => 0,
                    'module_type_id' => 0
                );
                if($file['type'] == "IMAGE")
                {
                    $send_array['type'] = "IMAGE";
                    $send_array['file_path_url'] = $file["url_file"];
                }
                else if($file['type'] == "VIDEO")
                {
                    $send_array['title'] = "New Video";
                    $send_array['type'] = "TEXT";
                    $send_array['file_path_url'] = "";
                    $send_array['message'] = "New video attached to chat";
                }
                else if($file['type'] == "FILE")
                {
                    $send_array['title'] = "New File";
                    $send_array['type'] = "TEXT";
                    $send_array['file_path_url'] = "";
                    $send_array['message'] = "New document attached to chat";
                }
                else
                {
                    $send_array['type'] = "TEXT";
                    $send_array['file_path_url'] = "";
                    
                }

                $ret =Custom::send_notification_via_token($send_array, [$firebasToken], $thinapp_id);

                echo json_encode($ret);

            }

        }
        die;
    }

    public static function get_appointment_reminder($data=null)
    {
        $return = true;
        if(empty($data)){
            $return = false;
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);
        }
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $name = isset($data['name']) ? $data['name'] : "";
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : 0;
            $fromDate = isset($data['from_date']) ? $data['from_date'] : "";
            $toDate = isset($data['end_date']) ? $data['end_date'] : "";
            $tag = isset($data['tag']) ? $data['tag'] : "";
            $offset = isset($data['offset']) ? $data['offset'] : 0;

            $docCondition = "";
            $docConditionTag = "";
            if($doctor_id != 0)
            {
                $docCondition = " AND `follow_up_reminders`.`doctor_id` = '".$doctor_id."'";
                $docConditionTag = " AND `doctor_id` = '".$doctor_id."'";
            }
            $tagCondition = "";
            if($tag != "" || $tag != 0)
            {
                $tagCondition = " AND `patient_illness_tags`.`id` = '".$tag."'";
            }
            $nameCondition = "";
            if($name != "")
            {
                $nameCondition = " AND (`appointment_customers`.`first_name` LIKE '%".$name."%' OR `childrens`.`child_name` LIKE '%".$name."%' OR `appointment_customers`.`mobile` LIKE '%".$name."%' OR `childrens`.`mobile` LIKE '%".$name."%')";
            }



            $dateCondition = "";
            if($fromDate != "")
            {
                $fromDate = DateTime::createFromFormat('d-m-Y', $fromDate);
                $fromDate = $fromDate->format('Y-m-d');
                $dateCondition .=" AND DATE(`follow_up_reminders`.`reminder_date`) >= '".$fromDate."'";
            }

            if($toDate != "")
            {
                $toDate = DateTime::createFromFormat('d-m-Y', $toDate);
                $toDate = $toDate->format('Y-m-d');
                $dateCondition .=" AND DATE(`follow_up_reminders`.`reminder_date`) <= '".$toDate."'";
            }

            $limit = PAGINATION_LIMIT;
            $offset = ($offset * PAGINATION_LIMIT);
            $connection = ConnectionUtil::getConnection();
            $sql = "SELECT `follow_up_reminders`.`id`,DATE_FORMAT(`follow_up_reminders`.`reminder_date`,'%d/%m/%Y') AS `reminder_date`,'' AS `city`,`follow_up_reminders`.`reminder_status`,IFNULL(`appointment_customers`.`first_name`,`childrens`.`child_name`) as `patient_name`,IFNULL(`appointment_customers`.`mobile`,`childrens`.`mobile`) as `patient_mobile`, IF(GROUP_CONCAT(`patient_illness_tags`.`tag_name`) IS NULL, '',GROUP_CONCAT(`patient_illness_tags`.`tag_name`)) AS `tag_name`, IF(`childrens`.`id` IS NULL,'PATIENT','CHILDREN') as `patient_type`,IFNULL(`appointment_customers`.`id`,`childrens`.`id`) as `patient_id`,`appointment_customers`.`age` AS `customer_age` , `childrens`.`dob` AS `children_dob`  FROM `follow_up_reminders` LEFT JOIN  `childrens` ON (`childrens`.`id` = `follow_up_reminders`.`children_id`) LEFT JOIN `appointment_customers` ON (`appointment_customers`.`id` = `follow_up_reminders`.`appointment_customer_id`) LEFT JOIN `patient_tags` ON (`patient_tags`.`appointment_customer_id` = `follow_up_reminders`.`appointment_customer_id` AND `patient_tags`.`children_id` = `follow_up_reminders`.`children_id`) LEFT JOIN `patient_illness_tags` ON (`patient_illness_tags`.`id` = `patient_tags`.`patient_illness_tag_id`) WHERE `follow_up_reminders`.`thinapp_id` = '".$thin_app_id."' ".$docCondition.$tagCondition.$dateCondition.$nameCondition." GROUP BY `follow_up_reminders`.`id` HAVING `patient_name` IS NOT NULL ORDER BY `follow_up_reminders`.`reminder_date` DESC LIMIT ".$limit." OFFSET ".$offset."";
            $reminderRS = $connection->query($sql);
            $reminderData = mysqli_fetch_all($reminderRS, MYSQLI_ASSOC);
            $data = array();
            foreach($reminderData AS $reminder){
                if($reminder['patient_type'] != 'PATIENT')
                {
                    $reminder['customer_age'] = Custom::get_age_from_dob($reminder['children_dob']);
                }
                $data[] = $reminder;
            }

            $tagSql = "SELECT `id`, `tag_name` FROM `patient_illness_tags` WHERE `status` = 'ACTIVE' AND `thinapp_id` = '".$thin_app_id."' ".$docConditionTag;
            $tagRS = $connection->query($tagSql);
            $tagData = mysqli_fetch_all($tagRS, MYSQLI_ASSOC);

            $dataToSend['status'] = 1;
            $dataToSend['message'] = 'success';
            $dataToSend['data']['reminder_list'] = $data;
            $dataToSend['data']['tag_list'] = $tagData;
            if($return===true){
                return json_encode($dataToSend);
            }else{
                echo json_encode($dataToSend);
            }


        }
        die;
    }

    public static function get_app_stats()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $thinapp_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $searchType = isset($data['search_type']) ? $data['search_type'] : "DAILY";

            if($searchType == 'DAILY')
            {
                $dataToSend = array();
                $startDate = date('Y-m-d', strtotime(date('Y-m-d').'-5 day'));
                $endDate = date('Y-m-d', strtotime(date('Y-m-d').'+1 day'));

                $begin = new DateTime($startDate);
                $end = new DateTime($endDate);
                $daterange = new DatePeriod($begin, new DateInterval('P1D'), $end);
                $dataToProcess = array();
                foreach($daterange as $date){
                    $dateCRR = $date->format("Y-m-d");
                    $dataToProcess[] = array('date'=>$dateCRR,'appointment_booked_from'=>'APP','total'=>0);
                    $dataToProcess[] = array('date'=>$dateCRR,'appointment_booked_from'=>'WEB','total'=>0);
                    $dataToProcess[] = array('date'=>$dateCRR,'appointment_booked_from'=>'DOCTOR_PAGE','total'=>0);
                    $dataToProcess[] = array('date'=>$dateCRR,'appointment_booked_from'=>'IVR','total'=>0);
                    $dataToProcess[] = array('date'=>$dateCRR,'appointment_booked_from'=>'SMS','total'=>0);
                    $dataToProcess[] = array('date'=>$dateCRR,'appointment_booked_from'=>'FACE_READER_TAB','total'=>0);
                    $dataToProcess[] = array('date'=>$dateCRR,'appointment_booked_from'=>'WEB_PRESCRIPTION','total'=>0);
                    $dataToProcess[] = array('date'=>$dateCRR,'appointment_booked_from'=>'NONE','total'=>0);
                }

                $appointmentSql = "SELECT `appointment_booked_from`, COUNT(`id`) AS `total`, DATE(`appointment_datetime`) AS `date` FROM `appointment_customer_staff_services` WHERE `thinapp_id` = '".$thinapp_id."' AND DATE(`appointment_datetime`) <= '".$endDate."' AND DATE(`appointment_datetime`) >= '".$startDate."' AND `delete_status` NOT IN ('FOLLOW_UP','DELETED') GROUP BY `appointment_booked_from`, `date`";
                $connection = ConnectionUtil::getConnection();
                $appointmentRS = $connection->query($appointmentSql);
                $appointmentData = mysqli_fetch_all($appointmentRS, MYSQLI_ASSOC);

                foreach($dataToProcess as $data)
                {
                    foreach($appointmentData AS $appointment)
                    {
                        if($data['date'] == $appointment['date'] && $data['appointment_booked_from'] == $appointment['appointment_booked_from'])
                        {
                            $data['total'] = $appointment['total'];
                        }
                    }
                    $dataToSend['appointment'][] = $data;
                }

                $dataToProcess = array();
                foreach($daterange as $date){
                    $dateCRR = $date->format("Y-m-d");
                    $dataToProcess[] = array('date'=>$dateCRR,'total'=>0);
                }

                $downloadSql = "SELECT COUNT(`id`) AS `total`,DATE(`created`) AS `date` FROM `users` WHERE `thinapp_id` = '".$thinapp_id."' AND DATE(`created`) <= '".$endDate."' AND DATE(`created`) >= '".$startDate."' GROUP BY `date`";
                $downloadRS = $connection->query($downloadSql);
                $downloadData = mysqli_fetch_all($downloadRS, MYSQLI_ASSOC);
                foreach($dataToProcess as $data)
                {
                    foreach($downloadData AS $download)
                    {
                        if($data['date'] == $download['date'])
                        {
                            $data['total'] = $download['total'];
                        }
                    }
                    $dataToSend['download'][] = $data;
                }

                $dataToProcess = array();
                foreach($daterange as $date){
                    $dateCRR = $date->format("Y-m-d");
                    $dataToProcess[] = array('date'=>$dateCRR,'type'=>'OPD','total'=>0);
                    //$dataToProcess[] = array('date'=>$dateCRR,'type'=>'ADVANCE IPD','total'=>0);
                    $dataToProcess[] = array('date'=>$dateCRR,'type'=>'PACKAGE','total'=>0);
                    $dataToProcess[] = array('date'=>$dateCRR,'type'=>'EMERGENCY','total'=>0);
                    //$dataToProcess[] = array('date'=>$dateCRR,'type'=>'EXPENSE','total'=>0);
                    $dataToProcess[] = array('date'=>$dateCRR,'type'=>'IPD','total'=>0);
                    $dataToProcess[] = array('date'=>$dateCRR,'type'=>'NONE','total'=>0);
                }
                $dataTotal = $dataToProcess;

                $OPDSql = "SELECT SUM(`total_amount`) AS `total`,DATE(`created`) AS `date` FROM `medical_product_orders` WHERE `thinapp_id` = '".$thinapp_id."' AND DATE(`created`) <= '".$endDate."' AND DATE(`created`) >= '".$startDate."' AND `is_opd` = 'Y' AND `status` = 'ACTIVE' GROUP BY `date`";
                $OPDRS = $connection->query($OPDSql);
                $OPDData = mysqli_fetch_all($OPDRS, MYSQLI_ASSOC);
                foreach($dataToProcess as $key => $data)
                {
                    foreach($OPDData AS $OPD)
                    {
                        if($data['date'] == $OPD['date'] && $data['type'] == 'OPD' )
                        {
                            $data['total'] = $OPD['total'];
                            $dataTotal[$key] = $data;
                        }
                    }
                }

                $packageSql = "SELECT SUM(`total_amount`) AS `total`,DATE(`created`) AS `date` FROM `medical_product_orders` WHERE `thinapp_id` = '".$thinapp_id."' AND DATE(`created`) <= '".$endDate."' AND DATE(`created`) >= '".$startDate."' AND `is_package` = 'Y' AND `status` = 'ACTIVE' GROUP BY `date`";
                $packageRS = $connection->query($packageSql);
                $packageData = mysqli_fetch_all($packageRS, MYSQLI_ASSOC);
                foreach($dataToProcess as $key => $data)
                {
                    foreach($packageData AS $package)
                    {
                        if($data['date'] == $package['date'] && $data['type'] == 'PACKAGE' )
                        {
                            $data['total'] = $package['total'];
                            $dataTotal[$key] = $data;
                        }
                    }

                }

                $emergencySql = "SELECT SUM(`total_amount`) AS `total`,DATE(`created`) AS `date` FROM `medical_product_orders` WHERE `thinapp_id` = '".$thinapp_id."' AND DATE(`created`) <= '".$endDate."' AND DATE(`created`) >= '".$startDate."' AND `is_emergency` = 'YES' AND `status` = 'ACTIVE' GROUP BY `date`";
                $emergencyRS = $connection->query($emergencySql);
                $emergencyData = mysqli_fetch_all($emergencyRS, MYSQLI_ASSOC);
                foreach($dataToProcess as $key => $data)
                {
                    foreach($emergencyData AS $emergency)
                    {
                        if($data['date'] == $emergency['date'] && $data['type'] == 'EMERGENCY' )
                        {
                            $data['total'] = $emergency['total'];
                            $dataTotal[$key] = $data;
                        }
                    }

                }

                $noneSql = "SELECT SUM(`total_amount`) AS `total`,DATE(`created`) AS `date` FROM `medical_product_orders` WHERE `thinapp_id` = '".$thinapp_id."' AND DATE(`created`) <= '".$endDate."' AND DATE(`created`) >= '".$startDate."' AND `is_expense` = 'N' AND `is_emergency` = 'NO' AND `is_package` = 'N'  AND `is_advance` = 'N'  AND `is_opd` = 'N' AND `is_settlement` = 'N' AND `status` = 'ACTIVE' GROUP BY `date`";
                $noneRS = $connection->query($noneSql);
                $noneData = mysqli_fetch_all($noneRS, MYSQLI_ASSOC);
                foreach($dataToProcess as $key => $data)
                {
                    foreach($noneData AS $none)
                    {
                        if($data['date'] == $none['date'] && $data['type'] == 'NONE' )
                        {
                            $data['total'] = $none['total'];
                            $dataTotal[$key] = $data;
                        }
                    }
                }

                $advanceSql = "SELECT SUM(`total_amount`) AS `total`,DATE(`created`) AS `date` FROM `medical_product_orders` WHERE `thinapp_id` = '".$thinapp_id."' AND DATE(`created`) <= '".$endDate."' AND DATE(`created`) >= '".$startDate."' AND `is_advance` = 'Y' AND `status` = 'ACTIVE' GROUP BY `date`";
                $advanceRS = $connection->query($advanceSql);
                $advanceData = mysqli_fetch_all($advanceRS, MYSQLI_ASSOC);
                foreach($dataToProcess as $key => $data)
                {

                    $getSattelment = "SELECT (SUM(IF(`payment_status` = 'RECEIVED',`settlement_amount`,0)) - SUM(IF(`payment_status` = 'REFUND',`settlement_amount`,0))) AS total, DATE(`created`) AS `date` FROM `hospital_ipd_settlements` WHERE `thinapp_id` = '".$thinapp_id."' AND DATE(`created`) = '".$data['date']."' GROUP BY `date` LIMIT 1";
                    $getSattelmentRS = $connection->query($getSattelment);
                    $getSattelmentData = mysqli_fetch_assoc($getSattelmentRS);
                    $setTotal = (isset($getSattelmentData['total']) && !empty($getSattelmentData['total']))?$getSattelmentData['total']:0;
                    $data['total'] = $setTotal;
                    foreach($advanceData AS $advance)
                    {
                        if($data['date'] == $advance['date'] && $data['type'] == 'IPD' )
                        {
                             $advTotal = $advance['total'];
                             $data['total'] = $advTotal+$setTotal;
                            $dataTotal[$key] = $data;

                        }
                    }
                }

                $dataToSend['billing'] = $dataTotal;

                $blogSql = "SELECT DATE(`messages`.`created`) AS date,`message_statics`.`total_likes`,`message_statics`.`total_views`  FROM `messages` LEFT JOIN `message_statics` ON (`messages`.`id` = `message_statics`.`message_id`) WHERE `messages`.`thinapp_id` = '".$thinapp_id."' AND `messages`.`status` = 'Y' ORDER BY `messages`.`id` DESC LIMIT 5";
                $blogRS = $connection->query($blogSql);
                $blogData = mysqli_fetch_all($blogRS, MYSQLI_ASSOC);
                $dataToSend['blog'] = $blogData;


                $dataToProcess = array();
                foreach($daterange as $date){
                    $dateCRR = $date->format("Y-m-d");
                    $dataToProcess[] = array('date'=>$dateCRR,'total'=>0);
                }

                $smsSql = "SELECT COUNT(`id`) AS `total`,DATE(`created`) AS `date` FROM `sent_sms_details` WHERE `thinapp_id` = '".$thinapp_id."' AND DATE(`created`) <= '".$endDate."' AND DATE(`created`) >= '".$startDate."' GROUP BY `date`";
                $smsRS = $connection->query($smsSql);
                $smsData = mysqli_fetch_all($smsRS, MYSQLI_ASSOC);
                foreach($dataToProcess as $data)
                {
                    foreach($smsData AS $sms)
                    {
                        if($data['date'] == $sms['date'])
                        {
                            $data['total'] = $sms['total'];
                        }
                    }
                    $dataToSend['sms'][] = $data;
                }


            }

            if($searchType == 'WEEKLY')
            {
                $dataToSend = array();
                $startDate = date('Y-m-d', strtotime(date('Y-m-d').'-35 day'));
                $startDate = date('Y-m-d',strtotime('last Sunday', strtotime($startDate)));
                $endDate = date('Y-m-d', strtotime(date('Y-m-d').'+3 day'));

                $begin = new DateTime($startDate);
                $end = new DateTime($endDate);
                $daterange = new DatePeriod($begin, new DateInterval('P1W'), $end);
                $dataToProcess = array();
                foreach($daterange as $date){
                    $dateCRR = $date->format("Y-m-d");
                    $dataToProcess[] = array('date'=>$dateCRR,'appointment_booked_from'=>'APP','total'=>0);
                    $dataToProcess[] = array('date'=>$dateCRR,'appointment_booked_from'=>'WEB','total'=>0);
                    $dataToProcess[] = array('date'=>$dateCRR,'appointment_booked_from'=>'DOCTOR_PAGE','total'=>0);
                    $dataToProcess[] = array('date'=>$dateCRR,'appointment_booked_from'=>'IVR','total'=>0);
                    $dataToProcess[] = array('date'=>$dateCRR,'appointment_booked_from'=>'SMS','total'=>0);
                    $dataToProcess[] = array('date'=>$dateCRR,'appointment_booked_from'=>'FACE_READER_TAB','total'=>0);
                    $dataToProcess[] = array('date'=>$dateCRR,'appointment_booked_from'=>'WEB_PRESCRIPTION','total'=>0);
                    $dataToProcess[] = array('date'=>$dateCRR,'appointment_booked_from'=>'NONE','total'=>0);
                }

                $appointmentSql = "SELECT `appointment_booked_from`, COUNT(`id`) AS `total`, str_to_date(concat(yearweek(`appointment_datetime`), 'sunday'), '%X%V %W') AS `date` FROM `appointment_customer_staff_services` WHERE `thinapp_id` = '".$thinapp_id."' AND DATE(`appointment_datetime`) <= '".$endDate."' AND DATE(`appointment_datetime`) >= '".$startDate."' AND `delete_status` NOT IN ('FOLLOW_UP','DELETED') GROUP BY `appointment_booked_from`, yearweek(`date`)";
                $connection = ConnectionUtil::getConnection();
                $appointmentRS = $connection->query($appointmentSql);
                $appointmentData = mysqli_fetch_all($appointmentRS, MYSQLI_ASSOC);

                foreach($dataToProcess as $data)
                {
                    foreach($appointmentData AS $appointment)
                    {
                        if($data['date'] == $appointment['date'] && $data['appointment_booked_from'] == $appointment['appointment_booked_from'])
                        {
                            $data['total'] = $appointment['total'];
                        }
                    }
                    $dataToSend['appointment'][] = $data;
                }

                $dataToProcess = array();
                foreach($daterange as $date){
                    $dateCRR = $date->format("Y-m-d");
                    $dataToProcess[] = array('date'=>$dateCRR,'total'=>0);
                }

                $downloadSql = "SELECT COUNT(`id`) AS `total`,str_to_date(concat(yearweek(`created`), 'sunday'), '%X%V %W') AS `date` FROM `users` WHERE `thinapp_id` = '".$thinapp_id."' AND DATE(`created`) <= '".$endDate."' AND DATE(`created`) >= '".$startDate."' GROUP BY yearweek(`date`)";
                $downloadRS = $connection->query($downloadSql);
                $downloadData = mysqli_fetch_all($downloadRS, MYSQLI_ASSOC);
                foreach($dataToProcess as $data)
                {
                    foreach($downloadData AS $download)
                    {
                        if($data['date'] == $download['date'])
                        {
                            $data['total'] = $download['total'];
                        }
                    }
                    $dataToSend['download'][] = $data;
                }

                $dataToProcess = array();
                foreach($daterange as $date){
                    $dateCRR = $date->format("Y-m-d");
                    $dataToProcess[] = array('date'=>$dateCRR,'type'=>'OPD','total'=>0);
                    //$dataToProcess[] = array('date'=>$dateCRR,'type'=>'ADVANCE IPD','total'=>0);
                    $dataToProcess[] = array('date'=>$dateCRR,'type'=>'PACKAGE','total'=>0);
                    $dataToProcess[] = array('date'=>$dateCRR,'type'=>'EMERGENCY','total'=>0);
                    //$dataToProcess[] = array('date'=>$dateCRR,'type'=>'EXPENSE','total'=>0);
                    $dataToProcess[] = array('date'=>$dateCRR,'type'=>'IPD','total'=>0);
                    $dataToProcess[] = array('date'=>$dateCRR,'type'=>'NONE','total'=>0);
                }

                $dataTotal = $dataToProcess;

                $OPDSql = "SELECT SUM(`total_amount`) AS `total`,str_to_date(concat(yearweek(`created`), 'sunday'), '%X%V %W') AS `date` FROM `medical_product_orders` WHERE `thinapp_id` = '".$thinapp_id."' AND DATE(`created`) <= '".$endDate."' AND DATE(`created`) >= '".$startDate."' AND `is_opd` = 'Y' AND `status` = 'ACTIVE' GROUP BY yearweek(`date`)";
                $OPDRS = $connection->query($OPDSql);
                $OPDData = mysqli_fetch_all($OPDRS, MYSQLI_ASSOC);
                foreach($dataToProcess as $key => $data)
                {
                    foreach($OPDData AS $OPD)
                    {
                        if($data['date'] == $OPD['date'] && $data['type'] == 'OPD' )
                        {
                            $data['total'] = $OPD['total'];
                            $dataTotal[$key] = $data;
                        }
                    }
                }

                $packageSql = "SELECT SUM(`total_amount`) AS `total`,str_to_date(concat(yearweek(`created`), 'sunday'), '%X%V %W') AS `date` FROM `medical_product_orders` WHERE `thinapp_id` = '".$thinapp_id."' AND DATE(`created`) <= '".$endDate."' AND DATE(`created`) >= '".$startDate."' AND `is_package` = 'Y' AND `status` = 'ACTIVE' GROUP BY yearweek(`date`)";
                $packageRS = $connection->query($packageSql);
                $packageData = mysqli_fetch_all($packageRS, MYSQLI_ASSOC);
                foreach($dataToProcess as $key => $data)
                {
                    foreach($packageData AS $package)
                    {
                        if($data['date'] == $package['date'] && $data['type'] == 'PACKAGE' )
                        {
                            $data['total'] = $package['total'];
                            $dataTotal[$key] = $data;
                        }
                    }
                }

                $emergencySql = "SELECT SUM(`total_amount`) AS `total`,str_to_date(concat(yearweek(`created`), 'sunday'), '%X%V %W') AS `date` FROM `medical_product_orders` WHERE `thinapp_id` = '".$thinapp_id."' AND DATE(`created`) <= '".$endDate."' AND DATE(`created`) >= '".$startDate."' AND `is_emergency` = 'YES' AND `status` = 'ACTIVE' GROUP BY yearweek(`date`)";
                $emergencyRS = $connection->query($emergencySql);
                $emergencyData = mysqli_fetch_all($emergencyRS, MYSQLI_ASSOC);
                foreach($dataToProcess as $key => $data)
                {
                    foreach($emergencyData AS $emergency)
                    {
                        if($data['date'] == $emergency['date'] && $data['type'] == 'EMERGENCY' )
                        {
                            $data['total'] = $emergency['total'];
                            $dataTotal[$key] = $data;
                        }
                    }
                }

                $noneSql = "SELECT SUM(`total_amount`) AS `total`,str_to_date(concat(yearweek(`created`), 'sunday'), '%X%V %W') AS `date` FROM `medical_product_orders` WHERE `thinapp_id` = '".$thinapp_id."' AND DATE(`created`) <= '".$endDate."' AND DATE(`created`) >= '".$startDate."' AND `is_expense` = 'N' AND `is_emergency` = 'NO' AND `is_package` = 'N'  AND `is_advance` = 'N'  AND `is_opd` = 'N' AND `is_settlement` = 'N' AND `status` = 'ACTIVE' GROUP BY yearweek(`date`)";
                $noneRS = $connection->query($noneSql);
                $noneData = mysqli_fetch_all($noneRS, MYSQLI_ASSOC);
                foreach($dataToProcess as $key => $data)
                {
                    foreach($noneData AS $none)
                    {
                        if($data['date'] == $none['date'] && $data['type'] == 'NONE' )
                        {
                            $data['total'] = $none['total'];
                            $dataTotal[$key] = $data;
                        }
                    }
                }

                $advanceSql = "SELECT SUM(`total_amount`) AS `total`,str_to_date(concat(yearweek(`created`), 'sunday'), '%X%V %W') AS `date` FROM `medical_product_orders` WHERE `thinapp_id` = '".$thinapp_id."' AND DATE(`created`) <= '".$endDate."' AND DATE(`created`) >= '".$startDate."' AND `is_advance` = 'Y' AND `status` = 'ACTIVE' GROUP BY yearweek(`date`)";
                $advanceRS = $connection->query($advanceSql);
                $advanceData = mysqli_fetch_all($advanceRS, MYSQLI_ASSOC);
                foreach($dataToProcess as $key => $data)
                {

                    $getSattelment = "SELECT (SUM(IF(`payment_status` = 'RECEIVED',`settlement_amount`,0)) - SUM(IF(`payment_status` = 'REFUND',`settlement_amount`,0))) AS total, str_to_date(concat(yearweek(`created`), 'sunday'), '%X%V %W') AS `date` FROM `hospital_ipd_settlements` WHERE `thinapp_id` = '".$thinapp_id."' AND DATE(`created`) = '".$data['date']."' GROUP BY yearweek(`date`) LIMIT 1";
                    $getSattelmentRS = $connection->query($getSattelment);
                    $getSattelmentData = mysqli_fetch_assoc($getSattelmentRS);
                    $setTotal = (isset($getSattelmentData['total']) && !empty($getSattelmentData['total']))?$getSattelmentData['total']:0;
                    $data['total'] = $setTotal;
                    foreach($advanceData AS $advance)
                    {
                        if($data['date'] == $advance['date'] && $data['type'] == 'IPD' )
                        {
                            $advTotal = $advance['total'];
                            $data['total'] = $advTotal+$setTotal;
                            $dataTotal[$key] = $data;

                        }
                    }
                }

                $dataToSend['billing'] = $dataTotal;

                $blogSql = "SELECT `messages`.`created` AS date,`message_statics`.`total_likes`,`message_statics`.`total_views`  FROM `messages` LEFT JOIN `message_statics` ON (`messages`.`id` = `message_statics`.`message_id`) WHERE `messages`.`thinapp_id` = '".$thinapp_id."' AND `messages`.`status` = 'Y' ORDER BY `messages`.`id` DESC LIMIT 5";
                $blogRS = $connection->query($blogSql);
                $blogData = mysqli_fetch_all($blogRS, MYSQLI_ASSOC);
                $dataToSend['blog'] = $blogData;


                $dataToProcess = array();
                foreach($daterange as $date){
                    $dateCRR = $date->format("Y-m-d");
                    $dataToProcess[] = array('date'=>$dateCRR,'total'=>0);
                }

                $smsSql = "SELECT COUNT(`id`) AS `total`,str_to_date(concat(yearweek(`created`), 'sunday'), '%X%V %W') AS `date` FROM `sent_sms_details` WHERE `thinapp_id` = '".$thinapp_id."' AND DATE(`created`) <= '".$endDate."' AND DATE(`created`) >= '".$startDate."' GROUP BY yearweek(`date`)";
                $smsRS = $connection->query($smsSql);
                $smsData = mysqli_fetch_all($smsRS, MYSQLI_ASSOC);
                foreach($dataToProcess as $data)
                {
                    foreach($smsData AS $sms)
                    {
                        if($data['date'] == $sms['date'])
                        {
                            $data['total'] = $sms['total'];
                        }
                    }
                    $dataToSend['sms'][] = $data;
                }


            }

            if($searchType == 'MONTHLY')
            {
                $dataToSend = array();
                $startDate = date("Y-m", strtotime("-5 months")).'-01';
                $endDate = date('Y-m').'-28';

                $begin = new DateTime($startDate);
                $end = new DateTime($endDate);
                $daterange = new DatePeriod($begin, new DateInterval('P1M'), $end);
                $dataToProcess = array();
                foreach($daterange as $date){
                    $dateCRR = $date->format("Y-m");
                    $dataToProcess[] = array('date'=>$dateCRR,'appointment_booked_from'=>'APP','total'=>0);
                    $dataToProcess[] = array('date'=>$dateCRR,'appointment_booked_from'=>'WEB','total'=>0);
                    $dataToProcess[] = array('date'=>$dateCRR,'appointment_booked_from'=>'DOCTOR_PAGE','total'=>0);
                    $dataToProcess[] = array('date'=>$dateCRR,'appointment_booked_from'=>'IVR','total'=>0);
                    $dataToProcess[] = array('date'=>$dateCRR,'appointment_booked_from'=>'SMS','total'=>0);
                    $dataToProcess[] = array('date'=>$dateCRR,'appointment_booked_from'=>'FACE_READER_TAB','total'=>0);
                    $dataToProcess[] = array('date'=>$dateCRR,'appointment_booked_from'=>'WEB_PRESCRIPTION','total'=>0);
                    $dataToProcess[] = array('date'=>$dateCRR,'appointment_booked_from'=>'NONE','total'=>0);
                }

                $appointmentSql = "SELECT `appointment_booked_from`, COUNT(`id`) AS `total`, DATE_FORMAT(`appointment_datetime`,'%m/%Y') AS `date` FROM `appointment_customer_staff_services` WHERE `thinapp_id` = '".$thinapp_id."' AND MONTH(`appointment_datetime`) <= MONTH('".$endDate."') AND MONTH(`appointment_datetime`) >= MONTH('".$startDate."') AND YEAR(`appointment_datetime`) <= YEAR('".$endDate."') AND YEAR(`appointment_datetime`) >= YEAR('".$startDate."') AND `delete_status` NOT IN ('FOLLOW_UP','DELETED') GROUP BY `appointment_booked_from`, `date`";
                $connection = ConnectionUtil::getConnection();
                $appointmentRS = $connection->query($appointmentSql);
                $appointmentData = mysqli_fetch_all($appointmentRS, MYSQLI_ASSOC);

                foreach($dataToProcess as $data)
                {
                    foreach($appointmentData AS $appointment)
                    {
                        if($data['date'] == $appointment['date'] && $data['appointment_booked_from'] == $appointment['appointment_booked_from'])
                        {
                            $data['total'] = $appointment['total'];
                        }
                    }
                    $dataToSend['appointment'][] = $data;
                }

                $dataToProcess = array();
                foreach($daterange as $date){
                    $dateCRR = $date->format("Y-m");
                    $dataToProcess[] = array('date'=>$dateCRR,'total'=>0);
                }

                $downloadSql = "SELECT COUNT(`id`) AS `total`,DATE_FORMAT(`created`,'%m/%Y') AS `date` FROM `users` WHERE `thinapp_id` = '".$thinapp_id."' AND MONTH(`created`) <= '".$endDate."' AND MONTH(`created`) >= '".$startDate."' AND YEAR(`created`) <= '".$endDate."' AND YEAR(`created`) >= '".$startDate."' GROUP BY `date`";
                $downloadRS = $connection->query($downloadSql);
                $downloadData = mysqli_fetch_all($downloadRS, MYSQLI_ASSOC);
                foreach($dataToProcess as $data)
                {
                    foreach($downloadData AS $download)
                    {
                        if($data['date'] == $download['date'])
                        {
                            $data['total'] = $download['total'];
                        }
                    }
                    $dataToSend['download'][] = $data;
                }

                $dataToProcess = array();
                foreach($daterange as $date){
                    $dateCRR = $date->format("Y-m");
                    $dataToProcess[] = array('date'=>$dateCRR,'type'=>'OPD','total'=>0);
                    //$dataToProcess[] = array('date'=>$dateCRR,'type'=>'ADVANCE IPD','total'=>0);
                    $dataToProcess[] = array('date'=>$dateCRR,'type'=>'PACKAGE','total'=>0);
                    $dataToProcess[] = array('date'=>$dateCRR,'type'=>'EMERGENCY','total'=>0);
                    //$dataToProcess[] = array('date'=>$dateCRR,'type'=>'EXPENSE','total'=>0);
                    $dataToProcess[] = array('date'=>$dateCRR,'type'=>'IPD','total'=>0);
                    $dataToProcess[] = array('date'=>$dateCRR,'type'=>'NONE','total'=>0);
                }
                $dataTotal = $dataToProcess;

                $OPDSql = "SELECT SUM(`total_amount`) AS `total`,DATE_FORMAT(`created`,'%m/%Y') AS `date` FROM `medical_product_orders` WHERE `thinapp_id` = '".$thinapp_id."' AND MONTH(`created`) <= '".$endDate."' AND MONTH(`created`) >= '".$startDate."' AND YEAR(`created`) <= '".$endDate."' AND YEAR(`created`) >= '".$startDate."' AND `is_opd` = 'Y' AND `status` = 'ACTIVE' GROUP BY `date`";
                $OPDRS = $connection->query($OPDSql);
                $OPDData = mysqli_fetch_all($OPDRS, MYSQLI_ASSOC);
                foreach($dataToProcess as $key => $data)
                {
                    foreach($OPDData AS $OPD)
                    {
                        if($data['date'] == $OPD['date'] && $data['type'] == 'OPD' )
                        {
                            $data['total'] = $OPD['total'];
                            $dataTotal[$key] = $data;
                        }
                    }
                }

                $packageSql = "SELECT SUM(`total_amount`) AS `total`,DATE_FORMAT(`created`,'%m/%Y') AS `date` FROM `medical_product_orders` WHERE `thinapp_id` = '".$thinapp_id."' AND MONTH(`created`) <= '".$endDate."' AND MONTH(`created`) >= '".$startDate."' AND YEAR(`created`) <= '".$endDate."' AND YEAR(`created`) >= '".$startDate."' AND `is_package` = 'Y' AND `status` = 'ACTIVE' GROUP BY `date`";
                $packageRS = $connection->query($packageSql);
                $packageData = mysqli_fetch_all($packageRS, MYSQLI_ASSOC);
                foreach($dataToProcess as $key => $data)
                {
                    foreach($packageData AS $package)
                    {
                        if($data['date'] == $package['date'] && $data['type'] == 'PACKAGE' )
                        {
                            $data['total'] = $package['total'];
                            $dataTotal[$key] = $data;
                        }
                    }

                }

                $emergencySql = "SELECT SUM(`total_amount`) AS `total`,DATE_FORMAT(`created`,'%m/%Y') AS `date` FROM `medical_product_orders` WHERE `thinapp_id` = '".$thinapp_id."' AND MONTH(`created`) <= '".$endDate."' AND MONTH(`created`) >= '".$startDate."' AND YEAR(`created`) <= '".$endDate."' AND YEAR(`created`) >= '".$startDate."' AND `is_emergency` = 'YES' AND `status` = 'ACTIVE' GROUP BY `date`";
                $emergencyRS = $connection->query($emergencySql);
                $emergencyData = mysqli_fetch_all($emergencyRS, MYSQLI_ASSOC);
                foreach($dataToProcess as $key => $data)
                {
                    foreach($emergencyData AS $emergency)
                    {
                        if($data['date'] == $emergency['date'] && $data['type'] == 'EMERGENCY' )
                        {
                            $data['total'] = $emergency['total'];
                            $dataTotal[$key] = $data;
                        }
                    }

                }

                $noneSql = "SELECT SUM(`total_amount`) AS `total`,DATE_FORMAT(`created`,'%m/%Y') AS `date` FROM `medical_product_orders` WHERE `thinapp_id` = '".$thinapp_id."' AND MONTH(`created`) <= '".$endDate."' AND MONTH(`created`) >= '".$startDate."' AND YEAR(`created`) <= '".$endDate."' AND YEAR(`created`) >= '".$startDate."' AND `is_expense` = 'N' AND `is_emergency` = 'NO' AND `is_package` = 'N'  AND `is_advance` = 'N'  AND `is_opd` = 'N' AND `is_settlement` = 'N' AND `status` = 'ACTIVE' GROUP BY `date`";
                $noneRS = $connection->query($noneSql);
                $noneData = mysqli_fetch_all($noneRS, MYSQLI_ASSOC);
                foreach($dataToProcess as $key => $data)
                {
                    foreach($noneData AS $none)
                    {
                        if($data['date'] == $none['date'] && $data['type'] == 'NONE' )
                        {
                            $data['total'] = $none['total'];
                            $dataTotal[$key] = $data;
                        }
                    }
                }

                $advanceSql = "SELECT SUM(`total_amount`) AS `total`,DATE_FORMAT(`created`,'%m/%Y') AS `date` FROM `medical_product_orders` WHERE `thinapp_id` = '".$thinapp_id."' AND MONTH(`created`) <= '".$endDate."' AND MONTH(`created`) >= '".$startDate."' AND YEAR(`created`) <= '".$endDate."' AND YEAR(`created`) >= '".$startDate."' AND `is_advance` = 'Y' AND `status` = 'ACTIVE' GROUP BY `date`";
                $advanceRS = $connection->query($advanceSql);
                $advanceData = mysqli_fetch_all($advanceRS, MYSQLI_ASSOC);
                foreach($dataToProcess as $key => $data)
                {

                    $getSattelment = "SELECT (SUM(IF(`payment_status` = 'RECEIVED',`settlement_amount`,0)) - SUM(IF(`payment_status` = 'REFUND',`settlement_amount`,0))) AS total, DATE_FORMAT(`created`,'%m/%Y') AS `date` FROM `hospital_ipd_settlements` WHERE `thinapp_id` = '".$thinapp_id."' AND MONTH(`created`) = '".$data['date']."' AND YEAR(`created`) = '".$data['date']."' GROUP BY `date` LIMIT 1";
                    $getSattelmentRS = $connection->query($getSattelment);
                    $getSattelmentData = mysqli_fetch_assoc($getSattelmentRS);
                    $setTotal = (isset($getSattelmentData['total']) && !empty($getSattelmentData['total']))?$getSattelmentData['total']:0;
                    $data['total'] = $setTotal;
                    foreach($advanceData AS $advance)
                    {
                        if($data['date'] == $advance['date'] && $data['type'] == 'IPD' )
                        {
                            $advTotal = $advance['total'];
                            $data['total'] = $advTotal+$setTotal;
                            $dataTotal[$key] = $data;

                        }
                    }
                }

                $dataToSend['billing'] = $dataTotal;

                $blogSql = "SELECT DATE(`messages`.`created`) AS date,`message_statics`.`total_likes`,`message_statics`.`total_views`  FROM `messages` LEFT JOIN `message_statics` ON (`messages`.`id` = `message_statics`.`message_id`) WHERE `messages`.`thinapp_id` = '".$thinapp_id."' AND `messages`.`status` = 'Y' ORDER BY `messages`.`id` DESC LIMIT 5";
                $blogRS = $connection->query($blogSql);
                $blogData = mysqli_fetch_all($blogRS, MYSQLI_ASSOC);
                $dataToSend['blog'] = $blogData;


                $dataToProcess = array();
                foreach($daterange as $date){
                    $dateCRR = $date->format("Y-m");
                    $dataToProcess[] = array('date'=>$dateCRR,'total'=>0);
                }

                $smsSql = "SELECT COUNT(`id`) AS `total`,DATE(`created`) AS `date` FROM `sent_sms_details` WHERE `thinapp_id` = '".$thinapp_id."' AND DATE(`created`) <= '".$endDate."' AND DATE(`created`) >= '".$startDate."' GROUP BY `date`";
                $smsRS = $connection->query($smsSql);
                $smsData = mysqli_fetch_all($smsRS, MYSQLI_ASSOC);
                foreach($dataToProcess as $data)
                {
                    foreach($smsData AS $sms)
                    {
                        if($data['date'] == $sms['date'])
                        {
                            $data['total'] = $sms['total'];
                        }
                    }
                    $dataToSend['sms'][] = $data;
                }


            }


        }
        echo json_encode(array("status"=>1,"data"=>$dataToSend,"message"=>"success")); die;
    }

    public static function get_speech_message_list()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $thinapp_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $sql = "SELECT `id`,`message` FROM `speech_messages` WHERE `thinapp_id` IN ('0','".$thinapp_id."') AND `id` > 0 AND `status` = 'ACTIVE' ORDER BY `id` DESC";
            $connection = ConnectionUtil::getConnection();
            $sqlRS = $connection->query($sql);
            $sqlData["list"] = mysqli_fetch_all($sqlRS, MYSQLI_ASSOC);
            echo json_encode(array("status"=>1,"data"=>$sqlData,"message"=>"success")); die;
        }
    }

    public static function update_speech_message_play_status($data = null){

        $return = true;
        if(empty($data)){
            $return = false;
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);
        }

        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $speechID = $data["speech_id"];
            $thinappID = $data["thin_app_id"];
            if((!empty($speechID) || $speechID == 0) && !empty($thinappID)){

                $sql = "SELECT `message` FROM `speech_messages` WHERE `id` = '".$speechID."' LIMIT 1";
                $connection = ConnectionUtil::getConnection();
                $sqlRS = $connection->query($sql);
                $speechData = mysqli_fetch_assoc($sqlRS);

                $dataToSaveSql = "INSERT INTO `speech_message_to_play` SET `thinapp_id` = '".$thinappID."',`speech_message_id` = '".$speechID."',`message` = '".$speechData['message']."',`status` = 'PLAY',`created` = '".date('Y-m-d H:i:s')."',`modified` = '".date('Y-m-d H:i:s')."' ";
                if($connection->query($dataToSaveSql))
                {
                    $response['status'] = 1;
                    $response['message'] = "Success!";

                    $url = "http://ivrapi.indiantts.co.in/tts?type=indiantts&text=".$speechData['message']."&api_key=2d108780-0b86-11e6-b056-07d516fb06e1&user_id=80&action=play&tts.wav";
                    if($speechID == 0)
                    {
                        $url = "https://mengage.s3.amazonaws.com/26_06_2019_11_46_50_0.06565928975403257.mp3";
                    }

                    $option = array(
                        'thinapp_id' => MENGAGE_CLINIC,
                        'channel_id' => 0,
                        'role' => "USER",
                        'flag' => 'KIOSK_VOICE_ALERT',
                        'title' => '',
                        'module_title' => '',
                        'message' =>$speechData['message'],
                        'url' =>$url,
                        'description' => "",
                        'chat_reference' => '',
                        'module_type' => 'KIOSK_VOICE_ALERT',
                        'module_type_id' => 0,
                        'child_id' => 0,
                        'firebase_reference' => ""
                    );

                    $adminSql = "SELECT `id` FROM `users` WHERE `thinapp_id` = '".$thinappID."' AND `role_id` = '5' LIMIT 1";
                    $adminRS = $connection->query($adminSql);
                    $adminData = mysqli_fetch_assoc($adminRS);


                    Custom::send_web_tracker_notification($thinappID);

                    Custom::send_mengage_clinic_notification($option,array($adminData['id']),'ID');


                }
                else
                {
                    $response['status'] = 0;
                    $response['message'] = "Could not save!";
                }

            }else{
                $response['status'] = 0;
                $response['message'] = "Invalid request";
            }

            if($return===true){
                return json_encode($response);
            }else{
                echo json_encode($response);
            }

        }
        die();


    }


    public static function update_tracker_voice_status(){
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $response = array();
            $thinapp_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $appointment_staff_id = isset($data['appointment_staff_id']) ? $data['appointment_staff_id'] : "";

            if(!empty($thinapp_id) && !empty($appointment_staff_id))
            {

                $playStatus ="INACTIVE";
                $selectSql = "SELECT `status` FROM `active_tracker_voice` WHERE `appointment_staff_id` = '".$appointment_staff_id."' LIMIT 1";
                $connection = ConnectionUtil::getConnection();
                $selectRS = $connection->query($selectSql);
                if ($selectRS->num_rows) {
                    $selectData = mysqli_fetch_assoc($selectRS);
                    $playStatus = $selectData['status'];
                    if($playStatus == "ACTIVE")
                    {
                        $playStatus = "INACTIVE";
                    }
                    else
                    {
                        $playStatus = "ACTIVE";
                    }

                   $date = date("Y-m-d H:i:s");
                    $sql = "UPDATE `active_tracker_voice` SET `status` = '".$playStatus."',`modified` = '".$date."' WHERE `appointment_staff_id` = '".$appointment_staff_id."'";


                    if($connection->query($sql)){
                        $response['status'] = 1;
                        $response['data'] = $playStatus;
                        $response['message'] = $playStatus;
                    }
                    else
                    {
                        $response['status'] = 0;
                        $response['message'] = "Invalid request";
                    }
                }
                else
                {


                    $date = date("Y-m-d H:i:s");
                    $sql = "INSERT INTO `active_tracker_voice` SET `thinapp_id` = '".$thinapp_id."',`appointment_staff_id` = '".$appointment_staff_id."',`status` = '".$playStatus."',`created` = '".$date."',`modified` = '".$date."'";

                    if($connection->query($sql)){
                        $response['status'] = 1;
                        $response['data'] = $playStatus;
                        $response['message'] = "Success!";

                    }
                    else
                    {
                        $response['status'] = 0;
                        $response['message'] = "Invalid request";
                    }

                }
            }
            else
            {
                $response['status'] = 0;
                $response['message'] = "Invalid request";
            }
            echo json_encode($response); die;
        }

    }


    public static function get_tracker_voice_status()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $response = array();
            $thinapp_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $appointment_staff_id = isset($data['appointment_staff_id']) ? $data['appointment_staff_id'] : "";
            $connection = ConnectionUtil::getConnection();
            $selectSql = "SELECT `status` FROM `active_tracker_voice` WHERE `appointment_staff_id` = '".$appointment_staff_id."' LIMIT 1";
            $selectRS = $connection->query($selectSql);
            if ($selectRS->num_rows) {
                $selectData = mysqli_fetch_assoc($selectRS);
                $playStatus = $selectData['status'];
            }
            else
            {
                $playStatus = "ACTIVE";
            }
            echo json_encode(array("status"=>1,"data"=>$playStatus,"message"=>"success")); die;
        }
    }

    public static function inactive_patient_status(){
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $response = array();
            $thinapp_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $patientType = isset($data['patient_type']) ? $data['patient_type'] : "";;
            $patientId = isset($data['patient_id']) ? $data['patient_id'] : "";;
            $connection = ConnectionUtil::getConnection();
            $sql = "";
            if($patientType == 'CUSTOMER')
            {
                $sql = "UPDATE `appointment_customers` SET `status` = 'INACTIVE' WHERE `id` = '".$patientId."'";
            }
            else if($patientType == 'CHILDREN')
            {
                $sql = "UPDATE `childrens` SET `status` = 'INACTIVE' WHERE `id` = '".$patientId."'";
            }

            if($sql != "")
            {
                if($connection->query($sql))
                {
                    echo json_encode(array("status"=>1,"message"=>"Success")); die;
                }
                else
                {
                    echo json_encode(array("status"=>0,"message"=>"Error")); die;
                }
            }
            else
            {
                echo json_encode(array("status"=>0,"message"=>"User should be a patient")); die;
            }





        }
    }

    public static function send_sms(){
        $thinappID = $_REQUEST['thinapp_id'];
        $mobile = $_REQUEST['mobile'];
        $message = $_REQUEST['message'];

        if(!empty($thinappID) && !empty($mobile) && !empty($message))
        {

            Custom::send_single_sms($mobile, $message, $thinappID, false, false);
            echo json_encode(array(
                "status"=>1,
                "message"=>"Sent Successfully!"
            ));
        }
        else
        {
            echo json_encode(array(
                "status"=>0,
                "message"=>"Invalid request!"
            ));
        }
        die();
    }

}