<?php
//namespace WebservicesFunction;
date_default_timezone_set("Asia/Kolkata");
include_once "Custom.php";

class WebServicesFunction_2_3
{

    public static function get_app_status_setting()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else {
                $connection = ConnectionUtil::getConnection();
                $query = "select t.subscription_interval, t.cloud_storage as total_space, @total_days:=datediff(DATE(t.end_date),DATE(t.start_date)) as total_days, @total_days_remaining:=datediff(DATE(t.end_date),DATE(NOW())) as total_days_remaining, IFNULL(ROUND((@total_days_remaining *100)/@total_days),0) as days_left_percentage, @total_users:=( select count(cu.id)   from users as cu where cu.thinapp_id = t.id and cu.role_id = 1 ) as total_users, @total_active_users:=( select count(cu.id)   from users as cu where cu.thinapp_id = t.id and cu.role_id = 1 and cu.app_installed_status='INSTALLED' and cu.status = 'Y' ) as total_active_users, @total_inactive_users:=( select count(cu.id)   from users as cu where cu.thinapp_id = t.id and cu.role_id = 1 and cu.app_installed_status='UNINSTALLED' ) as total_inactive_users, IFNULL(ROUND((@total_active_users *100)/@total_users),0) as download_active_percentage, @remaining_sms:=ass.total_transactional_sms as remaining_sms, ass.total_sms,IFNULL(ROUND((@remaining_sms *100)/ass.total_sms),0) as sms_percentage, ROUND(SUM(df.file_size)) as total_used_space, DATE_FORMAT(t.start_date,'%d %M %Y') as start_date, DATE_FORMAT(t.subscription_start_date,'%d %M %Y') as subscription_start_date, DATE_FORMAT(t.end_date,'%d %M %Y') as end_date, t.free_subscription_count as download_offer_count, t.is_trial_version  from thinapps as t join app_sms_statics as ass on t.id = ass.thinapp_id left join drive_files as df on df.thinapp_id = t.id and df.status = 'ACTIVE' where t.id = $thin_app_id";
                $data = $connection->query($query);
                if ($data->num_rows) {
                    $data = mysqli_fetch_assoc($data);
                    $space_arr = explode(" ", $data['total_space']);
                    $total_spance_mb = $space_arr[0] * (1024 * 1024);
                    $total_space = $data['total_space'];
                    $cloud_percentage = round((($data['total_used_space'] * 100) / $total_spance_mb));
                    $total_used_space = round($data['total_used_space']) . " MB";
                    $download_percentage = round((($data['total_users'] * 100) / $data['download_offer_count']));
                    $free_trial = Custom::get_month_diffrence($data['start_date'], $data['subscription_start_date']);
                    $free_trial_lbl = ($free_trial > 1) ? $free_trial . " Months Trial" : $free_trial . " Month Trial";
                    $interval = explode(' ', $data['subscription_interval']);
                    $month_lbl = ($interval[0] > 1) ? $interval[0] . " Months" : $interval[0] . " Month";
                    $sub_message = "Get " . $data['download_offer_count'] . " Downloads before $month_lbl to get Another $month_lbl Free";
                    $response['status'] = 1;
                    $response['message'] = "Stats data found";
                    $response['data']['app_stats'] = $data;
                    $response['data']['message_rate'] = (float)MESSAGE_CHARGE_RATE;
                    $response['data']['cloud_rate'] = (float)CLOUD_CHARGE_RATE;
                    if (!$response['data']['cloud_storage_array'] = WebservicesFunction::readJson('cloud_storage_enum')) {
                        $response['data']['cloud_storage_array'] = Custom::get_enum_values("thinapps", "cloud_storage");
                        WebservicesFunction::createJson('cloud_storage_enum', $response['data']['cloud_storage_array'], 'CREATE');
                    }
                    $response['data']['app_stats']['cloud_percentage'] = (string)$cloud_percentage;
                    $response['data']['app_stats']['total_space'] = (string)$total_space;
                    $response['data']['app_stats']['total_used_space'] = (string)$total_used_space;
                    $response['data']['app_stats']['download_percentage'] = (string)$download_percentage;
                    $response['data']['app_stats']['month_trial'] = $free_trial_lbl;
                    $response['data']['app_stats']['trial_month_number'] = (string)$free_trial;
                    $response['data']['app_stats']['sub_message'] = $sub_message;


                } else {
                    $response['status'] = 0;
                    $response['message'] = "no data found for app status";
                }
            }
            Custom::sendResponse($response);
        }
        exit();


    }

    public static function get_app_user_permission_list()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else {

                /* work for user functionlary*/

                $connection = ConnectionUtil::getConnection();
                $query = "select aft.*, IF(aef.id IS NOT NULL, 'YES','NO') as permission from app_functionality_types as aft left join app_enable_functionalities as aef on aft.id =  aef.app_functionality_type_id and aef.thinapp_id = $thin_app_id where IF(aef.id IS NOT NULL, 'YES','NO') = 'YES' order by aft.label_value asc";
                $subscriber = $connection->query($query);
                if ($subscriber->num_rows) {
                    $app_enable_fun_ids = array_column(mysqli_fetch_all($subscriber, MYSQLI_ASSOC), 'id');
                    $app_enable_fun_ids = implode(',', $app_enable_fun_ids);
                    $query = "select aft.id as app_functionality_type_id, aef.id as app_enable_functionality_id, uft.id as user_functionality_type_id, aft.label_value as functionality_name,  IFNULL(uefp.permission,'NO') as permission, uft.label_text as label from user_functionality_types as uft left join user_enabled_fun_permissions as uefp on uft.id = uefp. user_functionality_type_id and uefp.thinapp_id = $thin_app_id join app_functionality_types as aft on uft.app_functionality_type_id = aft.id join app_enable_functionalities as aef on aef.thinapp_id = $thin_app_id and aef.app_functionality_type_id = aft.id where  uft.app_functionality_type_id IN($app_enable_fun_ids) and uft.status ='Y'";
                    $subscriber = $connection->query($query);


                    $response['data']['birthday_sms_template'] = WebservicesFunction::readJson('birthday_sms_template_' . $thin_app_id,'birthday_template');
                    $response['data']['social_setting'] = WebservicesFunction::readJson('social_setting_' . $thin_app_id, 'social_setting');
                    $response['data']['instamojo'] = WebservicesFunction::readJson('instamojo_' . $thin_app_id, '');

                    if (!empty($subscriber->num_rows) || !empty($response['data']['social_setting'])) {

                        $response['status'] = 1;
                        $response['message'] = "User permission found";
                        $response['data']['permission_list'] = array();

                        if (!$response['data']['social_setting']) {
                            $query = "select linkedin_url, facebook_url,instagram_url, website_url, twitter_url, youtube_url, pinterest_url, twitter_usename from thinapps  where id = $thin_app_id limit 1";
                            $connection = ConnectionUtil::getConnection();
                            $message_list = $connection->query($query);
                            $response['data']['social_setting'] = $res = mysqli_fetch_assoc($message_list);
                            WebservicesFunction::createJson('social_setting_' . $thin_app_id, $res, 'CREATE', 'social_setting');
                        }

                        if (!$response['data']['birthday_sms_template']) {
                            $query = "select birthday_sms_template from thinapps  where id = $thin_app_id limit 1";
                            $connection = ConnectionUtil::getConnection();
                            $message_list = $connection->query($query);
                            if ($message_list->num_rows) {
                                $response['data']['birthday_sms_template'] = $res = mysqli_fetch_assoc($message_list)['birthday_sms_template'];
                                WebservicesFunction::createJson('birthday_sms_template_' . $thin_app_id, $res, 'CREATE','birthday_template');
                            }
                        }

                        if (!$response['data']['instamojo']) {
                            $response['data']['instamojo'] = $credential = Custom::get_instamojo_credential($thin_app_id);
                            if ($credential) {
                                $apiKey = $credential['instamojo_api_key'];
                                $apiSecret = $credential['instamojo_api_secret'];
                                $salt = $credential['instamojo_salt'];
                                if (!empty($apiKey) && !empty($apiSecret) && !empty($salt)) {
                                    WebservicesFunction::createJson('instamojo_' . $thin_app_id, $credential, 'CREATE', 'instamojo');
                                }

                            }
                        }

                        $drive_array = array(
                            'gd_api_key' => '',
                            'gd_client_id' => '',
                            'gd_access_token' => '',
                            'od_client_id' => '',
                            'od_client_secret' => '',
                            'od_access_token' => '',
                            'db_api_key' => '',
                            'db_client_secret' => '',
                        );
                        $response['data']['drive'] = $drive_array;
                        $query = "select gd_api_key, gd_client_id, gd_access_token, od_client_id, od_client_secret, od_access_token, db_api_key, db_client_secret from thinapps  where id = $thin_app_id limit 1";
                        $connection = ConnectionUtil::getConnection();
                        $message_list = $connection->query($query);
                        if ($message_list->num_rows) {
                            $response['data']['drive'] = mysqli_fetch_assoc($message_list);
                        }


                        if ($subscriber->num_rows) {
                            $user_permission = mysqli_fetch_all($subscriber, MYSQLI_ASSOC);
                            $response['data']['permission_list'] = $user_permission;
                        }


                    } else {
                        $response['status'] = 0;
                        $response['message'] = "No permission found";
                    }


                } else {
                    $response['status'] = 0;
                    $response['message'] = "No permission found";
                }

            }
            Custom::sendResponse($response);
        }
        exit();


    }

    public static function update_user_permission()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $permission_array = isset($data['permission_array']) ? $data['permission_array'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else if (empty($permission_array)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid param';
            } else {

                $connection = ConnectionUtil::getConnection();
                $connection->autocommit(false);
                $result = array();
                if (!empty($permission_array)) {
                    foreach ($permission_array as $key => $value) {
                        $query = "select id from user_enabled_fun_permissions where app_functionality_type_id = " . $value['app_functionality_type_id'] . " and app_enable_functionality_id = " . $value['app_enable_functionality_id'] . " and thinapp_id = $thin_app_id and user_functionality_type_id = " . $value['user_functionality_type_id'] . " limit 1";
                        $subscriber = $connection->query($query);
                        if (!$subscriber->num_rows && $value['permission'] == 'YES') {
                            $sql = "INSERT INTO user_enabled_fun_permissions (permission, app_functionality_type_id, app_enable_functionality_id, thinapp_id, user_functionality_type_id) VALUES (?, ?, ?, ?, ?)";
                            $stmt = $connection->prepare($sql);
                            $stmt->bind_param('sssss', $value['permission'], $value['app_functionality_type_id'], $value['app_enable_functionality_id'], $thin_app_id, $value['user_functionality_type_id']);
                        } else {
                            $user_permission = mysqli_fetch_assoc($subscriber);
                            $sql = "update user_enabled_fun_permissions set permission = ? where id = ?";
                            $stmt = $connection->prepare($sql);
                            $stmt->bind_param('ss', $value['permission'], $user_permission['id']);
                        }
                        if ($stmt->execute()) {
                            $result = true;
                        } else {
                            $result = false;
                        }
                    }
                    if (!in_array(false, $result) && !empty($result)) {

                        WebservicesFunction::deleteJson(array("get_app_enabled_functionality_$thin_app_id"), 'permission');
                        $connection->commit();
                        $response['status'] = 1;
                        $response['message'] = "Permission updated successfully";
                        WebservicesFunction::addUserStaticToJson('', $user_id, $thin_app_id, $mobile, "SETTING", "UPDATE PERMISSION", 'update_user_permission');

                    } else {
                        $connection->rollback();
                        $response['status'] = 0;
                        $response['message'] = "Sorry permission could not update";
                    }

                } else {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid param';
                }
            }
            Custom::sendResponse($response);
        }
        exit();


    }

    public static function update_social_setting()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $linkedin_url = !empty($data['linkedin_url']) ? $data['linkedin_url'] : "";
            $facebook_url = !empty($data['facebook_url']) ? $data['facebook_url'] : "";
            $instagram_url = !empty($data['instagram_url']) ? $data['instagram_url'] : "";
            $website_url = !empty($data['website_url']) ? $data['website_url'] : "";
            $twitter_url = !empty($data['twitter_url']) ? $data['twitter_url'] : "";
            $youtube_url = !empty($data['youtube_url']) ? $data['youtube_url'] : "";
            $pinterest_url = !empty($data['pinterest_url']) ? $data['pinterest_url'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else {
                $connection = ConnectionUtil::getConnection();
                $created = Custom::created();

                $sql = "UPDATE thinapps set linkedin_url =?, facebook_url = ?, instagram_url = ?, website_url = ?, twitter_url = ?, youtube_url = ?, pinterest_url = ?, modified =?  where id = ?";
                $stmt = $connection->prepare($sql);
                $stmt->bind_param('sssssssss', $linkedin_url, $facebook_url, $instagram_url, $website_url, $twitter_url, $youtube_url, $pinterest_url, $created, $thin_app_id);
                if ($stmt->execute()) {
                    WebservicesFunction::deleteJson(array('social_setting_' . $thin_app_id), 'social_setting');
                    $response['status'] = 1;
                    $response['message'] = "Setting updated successfully";
                    WebservicesFunction::addUserStaticToJson('', $user_id, $thin_app_id, $mobile, "SETTING", "UPDATE SOCIAL SETTING", 'update_social_setting');

                } else {
                    $response['status'] = 0;
                    $response['message'] = "Sorry setting could not update";
                }
            }
            Custom::sendResponse($response);
        }
        exit();
    }

    public static function update_birthday_template()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $birthday_sms_template = isset($data['birthday_sms_template']) ? $data['birthday_sms_template'] : "";
            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else {
                $connection = ConnectionUtil::getConnection();
                $created = Custom::created();
                $sql = "UPDATE thinapps set birthday_sms_template =?, modified =?  where id = ?";
                $stmt = $connection->prepare($sql);
                $stmt->bind_param('sss', $birthday_sms_template, $created, $thin_app_id);
                if ($stmt->execute()) {
                    WebservicesFunction::deleteJson(array('birthday_sms_template_' . $thin_app_id),'birthday_template');
                    $response['status'] = 1;
                    $response['message'] = "Template updated successfully";
                } else {
                    $response['status'] = 0;
                    $response['message'] = "Sorry template could not update";
                }
            }
            Custom::sendResponse($response);
        }
        exit();
    }

    public static function recharge_sms($data = null)
    {

        ignore_user_abort(true);
        set_time_limit(0);

        if (empty($data)) {
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);
        }
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $total_price = isset($data['total_price']) ? $data['total_price'] : "";
            $total_sms = isset($data['total_sms']) ? $data['total_sms'] : "";
            $total_storage = isset($data['total_storage']) ? $data['total_storage'] : "";
            $support_admin_id = isset($data['support_admin_id']) ? $data['support_admin_id'] : 0;
            $recharge_by = isset($data['recharge_by']) ? strtoupper($data['recharge_by']) : "APP_ADMIN";
            $transaction_id = isset($data['transaction_id']) ? $data['transaction_id'] : "";
            $transaction_status = isset($data['transaction_status']) ? strtoupper($data['transaction_status']) : "";
            $recharge_for = isset($data['recharge_for']) ? strtoupper($data['recharge_for']) : "";

            $send_notification = false;
            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else if (empty($total_price)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid price';
            } else if ($recharge_by == "APP_ADMIN" && empty($transaction_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid transaction';
            } else if ($transaction_status != "NO_TRANSACTION" && $transaction_status != "SUCCESS" && $transaction_status != "FAILURE") {
                $response['status'] = 0;
                $response['message'] = 'Invalid transaction status';
            } else if ($recharge_for != "SMS" && $recharge_for != "CLOUD") {
                $response['status'] = 0;
                $response['message'] = 'Invalid recharge type';
            } else if (empty($total_sms) && $recharge_for == "SMS") {
                $response['status'] = 0;
                $response['message'] = 'Invalid SMS value';
            } else if (empty($total_storage) && $recharge_for == "CLOUD") {
                $response['status'] = 0;
                $response['message'] = 'Invalid storage value';
            } else {

                if ($transaction_status == "NO_TRANSACTION" || $transaction_status == "SUCCESS") {
                    $connection = ConnectionUtil::getConnection();
                    $connection->autocommit(false);
                    $created = Custom::created();
                    $sms_type = "TRANSACTIONAL";
                    if ($recharge_for == "SMS") {
                        $charge_rate = MESSAGE_CHARGE_RATE;
                        $sql = "INSERT INTO app_sms_recharges (thinapp_id, user_id, sms_type, total_price, charge_rate, recharge_for,  total_sms, support_admin_id, recharge_by, transaction_id, transaction_status,  created, modified) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                        $stmt = $connection->prepare($sql);
                        $stmt->bind_param('sssssssssssss', $thin_app_id, $user_id, $sms_type, $total_price, $charge_rate, $recharge_for, $total_sms, $support_admin_id, $recharge_by, $transaction_id, $transaction_status, $created, $created);
                    } else {
                        $charge_rate = CLOUD_CHARGE_RATE;
                        $sql = "INSERT INTO app_sms_recharges (thinapp_id, user_id, sms_type, total_price, charge_rate, recharge_for,  total_cloud_storage, support_admin_id, recharge_by, transaction_id, transaction_status,  created, modified) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                        $stmt = $connection->prepare($sql);
                        $stmt->bind_param('sssssssssssss', $thin_app_id, $user_id, $sms_type, $total_price, $charge_rate, $recharge_for, $total_storage, $support_admin_id, $recharge_by, $transaction_id, $transaction_status, $created, $created);
                    }
                    if ($stmt->execute()) {
                        if ($recharge_for == "SMS") {
                            $app_sms = Custom::get_total_sms_thinapp($thin_app_id, "T");
                            $total_balance = $app_sms + $total_sms;
                            $shoot_sms_on = 10;
                            if ($total_balance >= 500) {
                                $shoot_sms_on = 500;
                            } else if ($total_balance < 500 && $total_balance >= 100) {
                                $shoot_sms_on = 100;
                            } else if ($total_balance < 100 && $total_balance >= 10) {
                                $shoot_sms_on = 10;
                            }
                            $sql = "UPDATE app_sms_statics set total_transactional_sms = total_transactional_sms + ?, total_sms = total_transactional_sms, shoot_sms_on = ?, modified = ? where thinapp_id = ?";
                            $stmt = $connection->prepare($sql);
                            $stmt->bind_param('ssss', $total_sms, $shoot_sms_on, $created, $thin_app_id);
                            if ($stmt->execute()) {
                                $connection->commit();
                                $response['status'] = 1;
                                $response['message'] = "SMS recharged successfully";
                                WebservicesFunction::addUserStaticToJson('', $user_id, $thin_app_id, $mobile, "PAYMENT", 'SMS', 'recharge_sms');
                                $send_notification = true;
                            } else {
                                $connection->rollback();
                                $response['status'] = 0;
                                $response['message'] = "Sorry sms could not recharged";
                            }
                        } else {
                            $app_data = Custom::getThinAppData($thin_app_id);
                            $last_storage = explode(" ", $app_data['cloud_storage']);
                            $total_storage = explode(" ", $total_storage);
                            if (count($last_storage) == 2 && count($total_storage) == 2) {
                                $cloud_storage = ($last_storage[0] + $total_storage[0]) . " " . $last_storage[1];
                                $sql = "UPDATE thinapps set cloud_storage = ?, modified = ? where id = ?";
                                $stmt = $connection->prepare($sql);
                                $stmt->bind_param('sss', $cloud_storage, $created, $thin_app_id);
                                if ($stmt->execute()) {
                                    $connection->commit();
                                    $response['status'] = 1;
                                    $response['message'] = "Storage recharged successfully";
                                    WebservicesFunction::addUserStaticToJson('', $user_id, $thin_app_id, $mobile, "PAYMENT", 'CLOUD', 'recharge_sms');

                                    $send_notification = true;
                                } else {
                                    $connection->rollback();
                                    $response['status'] = 0;
                                    $response['message'] = "Sorry storage could not recharged";
                                }
                            } else {
                                $connection->rollback();
                                $response['status'] = 0;
                                $response['message'] = "Sorry invalid storage param";
                            }
                        }
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Sorry sms could not recharged";
                    }
                } else {
                    $connection = ConnectionUtil::getConnection();
                    $created = Custom::created();
                    $sms_type = "TRANSACTIONAL";
                    if ($recharge_for == "SMS") {
                        $charge_rate = MESSAGE_CHARGE_RATE;
                        $sql = "INSERT INTO app_sms_recharges (thinapp_id, user_id, sms_type, total_price, charge_rate, recharge_for,  total_sms, support_admin_id, recharge_by, transaction_id, transaction_status,  created, modified) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                        $stmt = $connection->prepare($sql);
                        $stmt->bind_param('sssssssssssss', $thin_app_id, $user_id, $sms_type, $total_price, $charge_rate, $recharge_for, $total_sms, $support_admin_id, $recharge_by, $transaction_id, $transaction_status, $created, $created);
                    } else {
                        $charge_rate = CLOUD_CHARGE_RATE;
                        $sql = "INSERT INTO app_sms_recharges (thinapp_id, user_id, sms_type, total_price, charge_rate, recharge_for,  total_cloud_storage, support_admin_id, recharge_by, transaction_id, transaction_status,  created, modified) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                        $stmt = $connection->prepare($sql);
                        $stmt->bind_param('sssssssssssss', $thin_app_id, $user_id, $sms_type, $total_price, $charge_rate, $recharge_for, $total_storage, $support_admin_id, $recharge_by, $transaction_id, $transaction_status, $created, $created);
                    }

                    if ($stmt->execute()) {
                        $send_notification = true;
                        $response['status'] = 0;
                        $response['message'] = "Sorry " . strtolower($recharge_for) . " could not recharged due to payment failure";
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Sorry " . strtolower($recharge_for) . " could not recharged due to payment failure";
                    }

                }
            }
            Custom::sendResponse($response);
            if (!empty($send_notification)) {
                Custom::send_process_to_background();
                $admin_data = Custom::get_app_name_and_token($thin_app_id);
                if (!empty($admin_data)) {
                    if ($transaction_status == "SUCCESS" || $recharge_by == 'SUPPORT_ADMIN') {
                        $message = "$recharge_for recharge of $total_price Rs. for app " . $admin_data['app_name'] . " has been successfully done.";
                    } else {
                        $message = "$recharge_for recharge of $total_price Rs. for app " . $admin_data['app_name'] . " could not proceed due to payment failure.";
                    }
                    $sendArray = array(
                        'channel_id' => 0,
                        'thinapp_id' => $thin_app_id,
                        'flag' => 'SMS_RECHARGE',
                        'title' => 'New Message',
                        'message' => $message,
                        'description' => '',
                        'chat_reference' => '',
                        'module_type' => $recharge_for,
                        'module_type_id' => 0,
                        'firebase_reference' => ""
                    );
                    Custom::send_notification_via_token($sendArray, array($admin_data['firebase_token']), $thin_app_id);
                    Custom::send_single_sms($admin_data['mobile'], $message, $thin_app_id);
                }

            }
        }
        exit();
    }

    public static function add_annual_payment($data = null)
    {

        ignore_user_abort(true);
        set_time_limit(0);
        if (empty($data)) {
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);
        }
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $total_price = isset($data['total_price']) ? $data['total_price'] : "";
            $payment_by = isset($data['payment_by']) ? strtoupper($data['payment_by']) : "APP_ADMIN";
            $transaction_id = isset($data['transaction_id']) ? $data['transaction_id'] : "";
            $transaction_status = isset($data['transaction_status']) ? strtoupper($data['transaction_status']) : "";
            $send_notification = false;
            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else if (empty($total_price)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid price';
            } else if ($payment_by == "APP_ADMIN" && empty($transaction_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid transaction';
            } else if ($transaction_status != "SUCCESS" && $transaction_status != "FAILURE") {
                $response['status'] = 0;
                $response['message'] = 'Invalid transaction status';
            } else {
                $connection = ConnectionUtil::getConnection();
                $created = Custom::created();
                $end_date = date('Y-m-d H:i:s', strtotime('+1 years'));
                $sql = "INSERT INTO payments (transaction_id, user_id, app_id, membership_id, transaction_status, payment_by, amount, membership_start, membership_expire, created, modified) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                $stmt = $connection->prepare($sql);
                $membership_id = 0;
                $stmt->bind_param('sssssssssss', $transaction_id, $user_id, $thin_app_id, $membership_id, $transaction_status, $payment_by, $total_price, $created, $end_date, $created, $created);
                if ($stmt->execute()) {
                    $response['status'] = 1;
                    $response['message'] = "Transaction added successfully";
                    $send_notification = true;
                } else {
                    $response['status'] = 0;
                    $response['message'] = "Sorry transaction could not add";
                }
            }
            Custom::sendResponse($response);
            if (!empty($send_notification)) {
                Custom::send_process_to_background();
                $admin_data = Custom::get_app_name_and_token($thin_app_id);
                if (!empty($admin_data)) {
                    if ($transaction_status == "SUCCESS") {
                        $message = "Annual app recharge of $total_price Rs. for app " . $admin_data['app_name'] . " has been successfully done.\nFor check transaction status please visit the app.";
                    } else {
                        $message = "Annual app recharge of $total_price Rs. for app " . $admin_data['app_name'] . " could not proceed due to payment failure.\nFor check transaction status please visit the app.";
                    }
                    $sendArray = array(
                        'channel_id' => 0,
                        'thinapp_id' => $thin_app_id,
                        'flag' => 'ANNUAL_RECHARGE',
                        'title' => 'New Message',
                        'message' => $message,
                        'description' => '',
                        'chat_reference' => '',
                        'module_type' => 'ANNUAL_RECHARGE',
                        'module_type_id' => 0,
                        'firebase_reference' => ""
                    );
                    Custom::send_notification_via_token($sendArray, array($admin_data['firebase_token']), $thin_app_id);
                    Custom::send_single_sms($admin_data['mobile'], $message, $thin_app_id);
                }

            }
        }
        exit();
    }

    public static function get_annual_payment_list()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $offset = isset($data['offset']) ? $data['offset'] : 0;

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else {

                $connection = ConnectionUtil::getConnection();
                $offset = $offset * PAGINATION_LIMIT;
                $limit = PAGINATION_LIMIT;
                $query = "select transaction_status, payment_by, amount ,DATE_FORMAT(created,'%d-%m-%Y') as date  from payments where app_id = $thin_app_id and status = 1 order by id desc LIMIT $offset, $limit";
                $data_list = $connection->query($query);
                if ($data_list->num_rows) {
                    $response['status'] = 1;
                    $response['message'] = "Transaction list found";
                    $list = mysqli_fetch_all($data_list, MYSQLI_ASSOC);
                    $response['data']['transaction_list'] = $list;
                } else {
                    $response['status'] = 0;
                    $response['message'] = "No transaction found";
                }
            }
            Custom::sendResponse($response);
        }
        exit();
    }

    public static function get_sms_recharge_history()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $list_for = isset($data['list_for']) ? strtoupper($data['list_for']) : "";
            $offset = isset($data['offset']) ? $data['offset'] : 0;

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else if ($list_for != "SMS" && $list_for != "CLOUD") {
                $response['status'] = 0;
                $response['message'] = 'Invalid list for param';
            } else {

                $offset = $offset * PAGINATION_LIMIT;
                $limit = PAGINATION_LIMIT;
                $connection = ConnectionUtil::getConnection();
                $query = "select asr.total_price, asr.total_sms, asr.total_cloud_storage, IF(asr.transaction_status='NO_TRANSACTION','SUCCESS',asr.transaction_status) AS transaction_status, DATE_FORMAT(asr.created,'%d-%b-%Y') as date, DATE_FORMAT(asr.created,'%I:%i %p') as time, IF(asr.recharge_by = 'APP_ADMIN',u.username,'mEngage') AS recharge_by, asr.recharge_for from app_sms_recharges as asr left join users as u on u.id = asr.user_id  where asr.thinapp_id = $thin_app_id and asr.recharge_for = '$list_for' order by asr.id desc LIMIT $offset, $limit";
                $data_list = $connection->query($query);
                if ($data_list->num_rows) {
                    $response['status'] = 1;
                    $response['message'] = "Recharge list fond";
                    $template_list = mysqli_fetch_all($data_list, MYSQLI_ASSOC);
                    $response['data']['recharge_list'] = $template_list;
                } else {
                    $response['status'] = 0;
                    $response['message'] = "No recharge list found";
                }
            }
            Custom::sendResponse($response);
        }
        exit();
    }




    public static function add_consent_template()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $consent_title = isset($data['consent_title']) ? $data['consent_title'] : "";
            $consent_message = isset($data['consent_message']) ? $data['consent_message'] : "";
            $for_telemedicine = isset($data['for_telemedicine']) ? $data['for_telemedicine'] : "NO";
            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else if (empty($consent_title)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid consent title';
            } else if (empty($consent_message)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid consent message';
            } else {
                $connection = ConnectionUtil::getConnection();
                $created = Custom::created();

                if($for_telemedicine == 'YES')
                {
                    $sqlUpdate = "UPDATE `consent_templates` SET `for_telemedicine` = 'NO' WHERE `thinapp_id` = '".$thin_app_id."'";
                    $connection->prepare($sqlUpdate);
                }

                $sql = "INSERT INTO consent_templates (thinapp_id, user_id, consent_title, for_telemedicine, consent_message, created, modified  ) VALUES (?, ?, ?, ?, ?, ?, ?)";
                $stmt = $connection->prepare($sql);
                $stmt->bind_param('sssssss', $thin_app_id, $user_id, $consent_title, $for_telemedicine, $consent_message, $created, $created);
                if ($stmt->execute()) {

                    $response['status'] = 1;
                    $response['message'] = "Consent added successfully";
                } else {
                    $response['status'] = 0;
                    $response['message'] = "Sorry consent could not add";
                }
            }
            Custom::sendResponse($response);
        }
        exit();


    }

    public static function get_consent_template_list()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $offset = isset($data['offset']) ? $data['offset'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else {

                $offset = $offset * PAGINATION_LIMIT;
                $limit = PAGINATION_LIMIT;
                $connection = ConnectionUtil::getConnection();
                $query = "select id as consent_id, consent_title, for_telemedicine, consent_message, DATE_FORMAT(created,'%d-%m-%Y') as consent_date from consent_templates where thinapp_id = $thin_app_id and status ='ACTIVE' order by id desc LIMIT $offset, $limit";
                $data_list = $connection->query($query);
                if ($data_list->num_rows) {
                    $response['status'] = 1;
                    $response['message'] = "Consent template fond";
                    $template_list = mysqli_fetch_all($data_list, MYSQLI_ASSOC);
                    $response['data']['template_list'] = $template_list;
                } else {
                    $response['status'] = 0;
                    $response['message'] = "No consent template found";
                }
            }
            Custom::sendResponse($response);
        }
        exit();
    }

    public static function update_consent_template()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $consent_template_id = isset($data['consent_template_id']) ? $data['consent_template_id'] : "";
            $consent_title = isset($data['consent_title']) ? trim($data['consent_title']) : "";
            $consent_message = isset($data['consent_message']) ? $data['consent_message'] : "";
            $for_telemedicine = isset($data['for_telemedicine']) ? $data['for_telemedicine'] : "NO";
            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else if (empty($consent_template_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid consent id';
            } else if (empty($consent_title)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid consent title';
            } else if (empty($consent_message)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid consent message';
            } else {
                $connection = ConnectionUtil::getConnection();
                $created = Custom::created();

                if($for_telemedicine == 'YES')
                {
                    $sqlUpdate = "UPDATE `consent_templates` SET `for_telemedicine` = 'NO' WHERE `thinapp_id` = '".$thin_app_id."'";
                    $connection->prepare($sqlUpdate);
                }

                $sql = "UPDATE consent_templates set for_telemedicine =?,consent_title =?, consent_message = ?, modified = ?  where id = ?";
                $stmt = $connection->prepare($sql);
                $stmt->bind_param('sssss', $for_telemedicine,$consent_title, $consent_message, $created, $consent_template_id);
                if ($stmt->execute()) {
                    $response['status'] = 1;
                    $response['message'] = "Consent edit successfully";
                } else {
                    $response['status'] = 0;
                    $response['message'] = "Sorry consent could not edit";
                }
            }
            Custom::sendResponse($response);
        }
        exit();

    }

    public static function delete_consent_template()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $consent_template_id = isset($data['consent_template_id']) ? $data['consent_template_id'] : "";
            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else if (empty($consent_template_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid consent template id';
            } else {
                $connection = ConnectionUtil::getConnection();
                $created = Custom::created();
                $sql = "UPDATE consent_templates set status =?, modified = ?  where id = ?";
                $stmt = $connection->prepare($sql);
                $status = 'DELETED';
                $stmt->bind_param('sss', $status, $created, $consent_template_id);
                if ($stmt->execute()) {
                    $response['status'] = 1;
                    $response['message'] = "Consent template deleted successfully";
                } else {
                    $response['status'] = 0;
                    $response['message'] = "Sorry consent template could not delete";
                }
            }
            Custom::sendResponse($response);
        }
        exit();

    }

    public static function send_consent($data=null,$return=false)
    {

        if(empty($data)){
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);
        }

        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $consent_template_id = isset($data['consent_template_id']) ? $data['consent_template_id'] : "";
            $receiver_mobile = isset($data['receiver_mobile']) ? $data['receiver_mobile'] : "";
            $send_notification = array();
            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else if (empty($consent_template_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid consent template id';
            } else if (empty($receiver_mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid receiver mobile';
            } else {
                $send_notification = false;
                $receiver_mobile = Custom::create_mobile_number($receiver_mobile);
                if ($receiver_mobile) {
                    $connection = ConnectionUtil::getConnection();
                    $consent_tem_data = Custom::get_consent_template_by_id($thin_app_id, $consent_template_id);
                    if (!empty($consent_tem_data)) {
                        $consent_title = $consent_tem_data['consent_title'];
                        $consent_message = $consent_tem_data['consent_message'];
                        $get_user_data = Custom::get_user_by_mobile($thin_app_id, $receiver_mobile);
                        $receiver_user_id = !empty($get_user_data) ? $get_user_data['id'] : 0;
                        $created = Custom::created();
                        $sent_time = $created;
                        $sql = "INSERT INTO consents (thinapp_id, sender_user_id, receiver_user_id, consent_template_id, receiver_mobile, consent_title, consent_message, sent_time, created, modified  ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                        $stmt = $connection->prepare($sql);
                        $stmt->bind_param('ssssssssss', $thin_app_id, $user_id, $receiver_user_id, $consent_template_id, $receiver_mobile, $consent_title, $consent_message, $sent_time, $created, $created);
                        if ($stmt->execute()) {
                            $send_notification = true;
                            $consent_id = $stmt->insert_id;
                            $response['status'] = 1;
                            $response['message'] = "Consent sent successfully";
                            $response['consent_id'] =$consent_id;
                            WebservicesFunction::addUserStaticToJson('', $user_id, $thin_app_id, $mobile, "CONSENT", "SEND", 'send_consent');


                        } else {
                            $response['status'] = 0;
                            $response['message'] = "Sorry consent could not sent";
                        }
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Invalid concent";
                    }
                } else {
                    $response['status'] = 0;
                    $response['message'] = "Mobile number is not valid";
                }
            }
            if($return===true){
                return json_encode($response);
            }else{
                Custom::sendResponse($response);
                if (!empty($send_notification)) {
                    Custom::send_process_to_background();
                    Custom::sendConsentMessage($thin_app_id,$consent_id,$receiver_mobile);
                }
            }


        }
        exit();


    }

    public static function get_sent_consent_list()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $role_id = isset($data['role_id']) ? $data['role_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $offset = isset($data['offset']) ? $data['offset'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($role_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid role id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else {

                $offset = $offset * PAGINATION_LIMIT;
                $limit = PAGINATION_LIMIT;
                $connection = ConnectionUtil::getConnection();
                $condition = "";
                if ($role_id == 1) {
                    $condition = " and receiver_mobile = '$mobile' ";
                }
                $query = "select DATE_FORMAT(c.view_time,'%d-%b-%Y') as view_date, DATE_FORMAT(c.view_time,'%I:%i %p') as view_time, DATE_FORMAT(c.created,'%d-%b-%Y') as sent_date, DATE_FORMAT(c.created,'%I:%i %p') as sent_time,DATE_FORMAT(c.action_time,'%d-%b-%Y') as action_date, DATE_FORMAT(c.action_time,'%I:%i %p') as action_time, c.id as consent_id, c.telemedicine_lead_id as telemedicine_lead_id, c.consent_title, c.consent_message, c.receiver_view_status, IFNULL(u.username,c.receiver_mobile) as username, c.receiver_mobile,c.action_type, c.signature_image from consents as c left join users as u on c.receiver_mobile = u.mobile and u.thinapp_id = c.thinapp_id where c.thinapp_id = $thin_app_id and c.status ='ACTIVE' $condition order by c.id desc LIMIT $offset, $limit";
                $data_list = $connection->query($query);
                if ($data_list->num_rows) {
                    $response['status'] = 1;
                    $response['message'] = "Consent list fond";
                    $template_list = mysqli_fetch_all($data_list, MYSQLI_ASSOC);
                    $response['data']['consent_list'] = $template_list;
                } else {
                    $response['status'] = 0;
                    $response['message'] = "No consent list found";
                }
            }
            Custom::sendResponse($response);
        }
        exit();
    }

    public static function update_consent_action($data = null, $return = false)
    {

        if (empty($data)) {
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);
        }

        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['app_key']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $consent_id = isset($data['consent_id']) ? $data['consent_id'] : "";
            $action_type = isset($data['action_type']) ? strtoupper($data['action_type']) : "";
            $signature_image = isset($data['signature_image']) ? Custom::check_image_path_string($data['signature_image']) : "";
            $action_from = isset($data['action_from']) ? $data['action_from'] : "APP";
            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else if (empty($consent_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid consent id';
            } else if ($action_type != 'SEEN' && $action_type != 'AGREE' && $action_type != 'DISAGREE') {
                $response['status'] = 0;
                $response['message'] = 'Invalid action type';
            } else if ($action_type == 'AGREE' && empty($signature_image)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid signature';
            } else {
                $send_notification = false;
                $connection = ConnectionUtil::getConnection();
                $consent_data = Custom::get_consent_by_id($thin_app_id, $consent_id);
                if (!empty($consent_data)) {
                    $created = Custom::created();
                    if ($action_type == "SEEN") {
                        $sql = "UPDATE consents set receiver_view_status =?, action_from =?, view_time = ?, modified = ?  where id = ?";
                        $stmt = $connection->prepare($sql);
                        $stmt->bind_param('sssss', $action_type, $action_from, $created, $created, $consent_id);
                        if ($stmt->execute()) {
                            $response['status'] = 1;
                            $send_notification = true;
                            $response['message'] = "Consent " . ucfirst(strtolower($action_type)) . " successfully";
                            $response['data']['action_time'] = @date('d M, Y h:i A', strtotime($created));
                            WebservicesFunction::addUserStaticToJson('', $user_id, $thin_app_id, $mobile, "CONSENT", "VIEW", 'update_consent_action');

                        } else {
                            $response['status'] = 0;
                            $response['message'] = "Sorry consent could not update";
                        }

                    } else {
                        if ($consent_data['action_type'] == "PENDING") {
                            $signature_image = empty($signature_image) ? $consent_data['signature_image'] : $signature_image;
                            if ($action_from == "WEB") {
                                $signature_image = Custom::uploadBase64FileToAws($signature_image);
                            }
                            if ($signature_image !== false) {
                                if ($consent_data['receiver_view_status'] == "SEEN") {
                                    $sql = "UPDATE consents set signature_image =?, action_from =?, action_type =?, action_time = ?, modified = ?  where id = ?";
                                    $stmt = $connection->prepare($sql);
                                    $stmt->bind_param('ssssss', $signature_image, $action_from, $action_type, $created, $created, $consent_id);
                                } else {
                                    $seen_status = "SEEN";
                                    $sql = "UPDATE consents set receiver_view_status =?, view_time = ?, signature_image =?, action_from =?, action_type =?, action_time = ?, modified = ?  where id = ?";
                                    $stmt = $connection->prepare($sql);
                                    $stmt->bind_param('ssssssss', $seen_status, $created, $signature_image, $action_from, $action_type, $created, $created, $consent_id);
                                }
                                if ($stmt->execute()) {
                                    if ($action_type == "AGREE" || $action_type == "DISAGREE") {
                                        $send_notification = true;
                                        WebservicesFunction::addUserStaticToJson('', $user_id, $thin_app_id, $mobile, "CONSENT", $action_type, 'update_consent_action');

                                    }
                                    $response['status'] = 1;
                                    $response['message'] = "Consent " . ucfirst(strtolower($action_type)) . " successfully";
                                    $response['data']['action_time'] = @date('d M, Y h:i A', strtotime($created));
                                } else {
                                    $response['status'] = 0;
                                    $response['message'] = "Sorry consent could not update";
                                }
                            } else {
                                $response['status'] = 0;
                                $response['message'] = "Unable to process signature image";
                            }

                        } else {
                            $response['status'] = 0;
                            $response['message'] = "You have already submit action for this consent";
                        }
                    }

                } else {
                    $response['status'] = 0;
                    $response['message'] = "Sorry invalid consent";
                }

            }

            if ($return == false) {
                Custom::sendResponse($response);
                Custom::send_process_to_background();
            }
            if (!empty($send_notification)) {

                $get_user_data = Custom::get_user_by_id($user_id);
                $get_app_data = Custom::get_thinapp_admin_data($thin_app_id);
                $consent_data = Custom::get_consent_by_id($thin_app_id, $consent_id);
                if (!empty($consent_data) && !empty($get_app_data)) {

                    if ($action_type == "AGREE") {
                        $action_type = "agreed";
                    } else if ($action_type == "DISAGREE") {
                        $action_type = "disagreed";
                    } else {
                        $action_type = "seen";
                    }

                    $username = !empty($get_user_data) ? $get_user_data['username'] : $consent_data['receiver_mobile'];
                    $message = "Patient " . $username . " has " . strtolower($action_type) . " consent for " . $consent_data['consent_title'];
                    $sendArray = array(
                        'channel_id' => 0,
                        'thinapp_id' => $thin_app_id,
                        'flag' => 'CONSENT',
                        'title' => 'New Message',
                        'message' => $message,
                        'description' => '',
                        'chat_reference' => '',
                        'module_type' => 'CONSENT',
                        'module_type_id' => $consent_id,
                        'firebase_reference' => ""
                    );
                    if (!empty($get_app_data)) {
                        Custom::send_notification_via_token($sendArray, array($get_app_data['firebase_token']), $thin_app_id);
                    }
                }

            }
            if ($return !== false) {
                return json_encode($response);
            }


        }
        exit();
    }





    /* child timeline code start here */
    public static function get_child_timeline()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $child_id = isset($data['child_id']) ? $data['child_id'] : 0;
            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else {

                try {
                    $child_list = $child_months = array();
                    $connection = ConnectionUtil::getConnection();
                    $child_list = Custom::get_children_list_timeline($thin_app_id, $user_id, $mobile);
                    if ($child_id == 0 && !empty($child_list)) {
                        $child_id = $child_list[0]['children_id'];
                    }

                    if ($child_id > 0) {
                        if (!$child_months = WebservicesFunction::readJson("child_timeline_months_$child_id", "timeline")) {

                            $query = "select DISTINCT (CONCAT_WS('-',MONTH(created), YEAR(created))) as month_year FROM child_timelines where children_id = $child_id";
                            $data_list = $connection->query($query);
                            if ($data_list->num_rows) {
                                $child_months = array_column(mysqli_fetch_all($data_list, MYSQLI_ASSOC), "month_year");
                                WebservicesFunction::createJson("child_timeline_months_$child_id", $child_months, 'CREATE', "timeline");
                            }
                        }

                        $month_year = date('n') . "-" . date('Y');
                        if (!in_array($month_year, $child_months)) {
                            $connection->autocommit(false);
                            $created = Custom::created();

                            $child_image = CHILD_IMAGE;
                            $child_message = CHILD_TIMELINE_MESSAGE;
                            $sql = "INSERT INTO child_timelines (user_id, thinapp_id, children_id, created, modified  ) VALUES (?, ?, ?, ?, ?)";
                            $stmt = $connection->prepare($sql);
                            $stmt->bind_param('sssss', $user_id, $thin_app_id, $child_id, $created, $created);
                            if ($stmt->execute()) {
                                $child_timeline_id = $stmt->insert_id;
                                $parent_timeline_date = date('Y-m-d', strtotime($created));
                                $sql = "INSERT INTO child_timeline_media (user_id, thinapp_id, child_timeline_id, children_id, image, message, parent_timeline_date, created, modified  ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)";
                                $stmt_child = $connection->prepare($sql);
                                $stmt_child->bind_param('sssssssss', $user_id, $thin_app_id, $child_timeline_id, $child_id, $child_image, $child_message, $parent_timeline_date, $created, $created);
                                if ($stmt_child->execute()) {
                                    $connection->commit();
                                    WebservicesFunction::deleteJson(array("child_timeline_months_$child_id"), "timeline");
                                }
                            }
                        }
                        $query = "select ct.created as timeline_date,c.dob, (select count(ctm1.id) From child_timeline_media ctm1 where ctm1.child_timeline_id =ct.id and ctm1.update_status = 'COMPLETED') as total_media_count, ctm.id as timeline_media_id, IF(cta_like.id > 0,'YES','NO') as is_like, IF(cta_share.id >0,'YES','NO') as is_share, IF(cta_view.id >0,'YES','NO') as is_view, ct.personal_like_count as like_count, ct.view_count, ct.personal_share_count as share_count, IF(c.mobile = '$mobile','YES','NO') as is_owner, ctm.child_timeline_id as timeline_id, ctm.children_id, c.child_name, ctm.message, ctm.update_status, ctm.image,  DATE_FORMAT(ct.created,'%d') as day, UPPER(DATE_FORMAT(ct.created,'%b')) as month, DATE_FORMAT(ct.created,'%Y') as year  from child_timeline_media as ctm join child_timelines as ct on ct.id = ctm.child_timeline_id  join childrens as c on c.id = ctm.children_id and c.status ='ACTIVE' left join child_timeline_actions as cta_like on cta_like.user_id = $user_id and ct.id = cta_like.child_timeline_id and cta_like.action_type ='LIKE' and cta_like.action_screen = 'PERSONAL' and cta_like.child_timeline_media_id = 0 left join child_timeline_actions as cta_view on cta_view.user_id = $user_id and ct.id = cta_view.child_timeline_id and cta_view.action_type ='VIEW' and cta_view.action_screen = 'PERSONAL' and cta_view.child_timeline_media_id = 0 left join child_timeline_actions as cta_share on cta_share.user_id = $user_id and ct.id = cta_share.child_timeline_id  and cta_share.action_type ='SHARE' and cta_share.action_screen = 'PERSONAL' and cta_share.child_timeline_media_id = 0 where ctm.thinapp_id = $thin_app_id and ct.status ='ACTIVE' and c.status ='ACTIVE' and ctm.children_id = $child_id and ctm.id IN (select Max(ctm2.id) From child_timeline_media ctm2 group by ctm2.child_timeline_id) group by ctm.child_timeline_id order by ct.created asc";
                        $data_list = $connection->query($query);
                        if ($data_list->num_rows) {

                            $response['message'] = "Timline list found";
                            $timeline_list = mysqli_fetch_all($data_list, MYSQLI_ASSOC);
                            foreach ($timeline_list as $key => $value) {
                                $child_age = Custom::dob_elapsed_string($value['dob'], $value['timeline_date'], false);
                                $year = ($child_age['year'] > 1) ? $child_age['year'] . " Years" : $child_age['year'] . " Year";
                                $month = ($child_age['month'] > 1) ? $child_age['month'] . " Months" : $child_age['month'] . " Month";
                                $value['child_age_label'] = $year . '##' . $month;
                                if ($value['is_owner'] == "YES") {
                                    $response['data']['timeline_list'][$key] = $value;
                                } else {
                                    if ($value['update_status'] == "COMPLETED") {
                                        $response['data']['timeline_list'][$key] = $value;
                                    }
                                }
                            }
                            $response['status'] = (count($response['data']['timeline_list']) > 0) ? 1 : 0;

                        } else {
                            $response['status'] = 0;
                            $response['message'] = "No timeline found";
                        }

                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Your child not register.";
                    }
                } catch (Exception $e) {
                    $response['status'] = 2;
                    $response['message'] = "Something went wrong on server";
                }

            }
            Custom::sendResponse($response);
        }
        exit();
    }

    public static function edit_timeline()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $timeline_id = isset($data['timeline_id']) ? $data['timeline_id'] : "";
            $timeline_media_id = isset($data['timeline_media_id']) ? $data['timeline_media_id'] : "";
            $child_id = isset($data['child_id']) ? $data['child_id'] : "";
            $message = isset($data['message']) ? $data['message'] : "";
            $image = isset($data['image']) ? Custom::check_image_path_string($data['image']) : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else if (empty($timeline_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid timeline id';
            } else if (empty($timeline_media_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid timeline media id';
            } else if (empty($child_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid child id';
            } else {

                try {

                    $timeline_data = Custom::get_timeline_by_id($thin_app_id, $timeline_id);
                    if (!empty($timeline_data)) {
                        $connection = ConnectionUtil::getConnection();
                        $image = !empty($image) ? $image : CHILD_IMAGE;
                        $update_status = "COMPLETED";
                        $created = Custom::created();
                        $current_date = date('Y-m-d');
                        $query = "select id from child_timeline_media where child_timeline_id = $timeline_id and update_status = 'PENDING'  LIMIT 1";
                        $data_list = $connection->query($query);
                        if (!$data_list->num_rows) {
                            $message = !empty($message) ? $message : CHILD_TIMELINE_MESSAGE;
                            $parent_timeline_date = date('Y-m-d', strtotime($timeline_data['created']));
                            $sql = "INSERT INTO child_timeline_media (user_id, thinapp_id, child_timeline_id, children_id, update_status, image, message,parent_timeline_date, created, modified  ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                            $stmt = $connection->prepare($sql);
                            $stmt->bind_param('ssssssssss', $user_id, $thin_app_id, $timeline_id, $child_id, $update_status, $image, $message, $parent_timeline_date, $created, $created);
                        } else {
                            $timeline_media_id = mysqli_fetch_assoc($data_list);
                            $sql = "UPDATE child_timeline_media set image =?, message = ?, update_status=?, modified = ?  where id = ?";
                            $stmt = $connection->prepare($sql);
                            $stmt->bind_param('sssss', $image, $message, $update_status, $created, $timeline_media_id['id']);
                        }
                        if ($stmt->execute()) {
                            WebservicesFunction::deleteJson(array("child_timeline_months_$child_id"), "timeline");
                            $response['status'] = 1;
                            $response['message'] = "Timeline edit successfully";
                            WebservicesFunction::addUserStaticToJson('', $user_id, $thin_app_id, $mobile, "TIMELINE", "UPDATE", 'edit_timeline');

                        } else {
                            $response['status'] = 0;
                            $response['message'] = "Sorry timeline could not edit";
                        }
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Invalid timeline";
                    }

                } catch (Exception $e) {
                    $response['status'] = 2;
                    $response['message'] = "Something went wrong on server";
                }
            }

            Custom::sendResponse($response);
        }
        exit();

    }

    public static function get_public_child_timeline_list()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $offset = isset($data['offset']) ? $data['offset'] : 0;

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else {

                try {
                    $connection = ConnectionUtil::getConnection();
                    $offset = $offset * PAGINATION_LIMIT;
                    $limit = PAGINATION_LIMIT;

                    $select = "ct.id as timeline_id, ct.created as timeline_date,  ctm.id as timeline_media_id, IF(cta_like.id > 0,'YES','NO') as is_like, IF(cta_share.id >0,'YES','NO') as is_share, IF(cta_view.id >0,'YES','NO') as is_view, IF(c.mobile = '$mobile','YES','NO') as is_owner, DATE(ct.created) as first_timeline_date, c.gender, c.id as child_id, DATE(ct.created) as timeline_date,  c.child_name, ctm.image, ct.like_count, ct.view_count, ct.share_count, c.dob";
                    $order_limit = " order by ctm.modified desc LIMIT $offset, $limit ";
                    $query = "select $select from child_timeline_media as ctm join child_timelines as ct on ct.id = ctm.child_timeline_id  join childrens as c on c.id = ctm.children_id and c.status = 'ACTIVE' left join child_timeline_actions as cta_like on cta_like.user_id = $user_id and ct.id = cta_like.child_timeline_id and cta_like.action_type ='LIKE' and cta_like.action_screen = 'PUBLIC' left join child_timeline_actions as cta_view on cta_view.user_id = $user_id and ct.id = cta_view.child_timeline_id and cta_view.action_type ='VIEW' and cta_view.action_screen = 'PUBLIC' left join child_timeline_actions as cta_share on cta_share.user_id = $user_id and ct.id = cta_share.child_timeline_id  and cta_share.action_type ='SHARE' and cta_share.action_screen = 'PUBLIC' where ctm.id = (select cttm.id from child_timeline_media as cttm where  cttm.update_status ='COMPLETED' and cttm.child_timeline_id = ct.id order by cttm.parent_timeline_date desc, cttm.id desc limit 1 ) and ctm.update_status = 'COMPLETED' and ct.thinapp_id =$thin_app_id group by ctm.children_id $order_limit";

                    $data_list = $connection->query($query);
                    $final_array = array();
                    if ($data_list->num_rows) {
                        $response['status'] = 1;
                        $response['message'] = "Child list found";
                        $timeline_list = mysqli_fetch_all($data_list, MYSQLI_ASSOC);

                        foreach ($timeline_list as $key => $list) {
                            $final_array[$key] = $list;
                            //$gender = ($list['gender']=='MALE')?"Boy":"Girl";
                            $final_array[$key]['child_status'] = Custom::dob_elapsed_string($list['dob']);
                            $child_age = Custom::dob_elapsed_string($list['dob'], $list['timeline_date'], false);
                            $year = ($child_age['year'] > 1) ? $child_age['year'] . " Years" : $child_age['year'] . " Year";
                            $month = ($child_age['month'] > 1) ? $child_age['month'] . " Months" : $child_age['month'] . " Month";
                            $final_array[$key]['total_month'] = $year . '##' . $month;;
                        }

                        $response['data']['children_list'] = $final_array;
                        $select = " count(DISTINCT ctm.children_id) as total_pages ";
                        $order_limit = "";
                        $query = "select $select from child_timeline_media as ctm join child_timelines as ct on ct.id = ctm.child_timeline_id  join childrens as c on c.id = ctm.children_id and c.status = 'ACTIVE' left join child_timeline_actions as cta_like on cta_like.user_id = $user_id and ct.id = cta_like.child_timeline_id and cta_like.action_type ='LIKE' and cta_like.action_screen = 'PUBLIC' left join child_timeline_actions as cta_view on cta_view.user_id = $user_id and ct.id = cta_view.child_timeline_id and cta_view.action_type ='VIEW' and cta_view.action_screen = 'PUBLIC' left join child_timeline_actions as cta_share on cta_share.user_id = $user_id and ct.id = cta_share.child_timeline_id  and cta_share.action_type ='SHARE' and cta_share.action_screen = 'PUBLIC' where ctm.id = (select cttm.id from child_timeline_media as cttm where  cttm.update_status ='COMPLETED' and cttm.child_timeline_id = ct.id order by cttm.parent_timeline_date desc, cttm.id desc limit 1 ) and ctm.update_status = 'COMPLETED' $order_limit";

                        $count_qry = $connection->query($query);
                        $count = mysqli_fetch_assoc($count_qry);
                        $response['data']['total_pages'] = $count['total_pages'] / $limit;
                        $response['data']['total_timeline'] = $count['total_pages'];

                    } else {
                        $response['status'] = 1;
                        $response['message'] = "No child found";
                        $response['data']['children_list'] = $final_array;
                        $select = " count(DISTINCT ctm.children_id) as total_pages ";
                        $order_limit = "";
                        $query = "select $select from child_timeline_media as ctm join child_timelines as ct on ct.id = ctm.child_timeline_id  join childrens as c on c.id = ctm.children_id and c.status = 'ACTIVE' left join child_timeline_actions as cta_like on cta_like.user_id = $user_id and ct.id = cta_like.child_timeline_id and cta_like.action_type ='LIKE' and cta_like.action_screen = 'PUBLIC' left join child_timeline_actions as cta_view on cta_view.user_id = $user_id and ct.id = cta_view.child_timeline_id and cta_view.action_type ='VIEW' and cta_view.action_screen = 'PUBLIC' left join child_timeline_actions as cta_share on cta_share.user_id = $user_id and ct.id = cta_share.child_timeline_id  and cta_share.action_type ='SHARE' and cta_share.action_screen = 'PUBLIC' where ctm.id = (select cttm.id from child_timeline_media as cttm where  cttm.update_status ='COMPLETED' and cttm.child_timeline_id = ct.id order by cttm.parent_timeline_date desc, cttm.id desc limit 1 ) and ctm.update_status = 'COMPLETED' $order_limit";

                        $count_qry = $connection->query($query);
                        $count = mysqli_fetch_assoc($count_qry);
                        $response['data']['total_pages'] = $count['total_pages'] / $limit;
                        $response['data']['total_timeline'] = $count['total_pages'];


                    }
                } catch (Exception $e) {
                    $response['status'] = 2;
                    $response['message'] = "Something went wrong on server";
                }
            }
            Custom::sendResponse($response);
        }
        exit();
    }

    public static function add_timeline_action()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $timeline_id = isset($data['timeline_id']) ? $data['timeline_id'] : "";
            $action_type = isset($data['action_type']) ? strtoupper($data['action_type']) : "";
            $timeline_media_id = isset($data['timeline_media_id']) ? strtoupper($data['timeline_media_id']) : "";
            $action_screen = isset($data['action_screen']) ? strtoupper($data['action_screen']) : "";
            try {
                if (empty($thin_app_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid thinapp id';
                } else if (empty($app_key)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid app key';
                } else if (empty($user_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid user id';
                } else if (empty($mobile)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid mobile';
                } else if (empty($timeline_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid timeline id';
                } else if (empty($timeline_media_id) && $action_screen != 'PUBLIC') {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid timeline media id';
                } else if ($action_type != 'LIKE' && $action_type != 'VIEW' && $action_type != 'SHARE') {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid action type';
                } else if ($action_screen != 'PUBLIC' && $action_screen != 'PERSONAL' && $action_screen != 'DAYS') {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid action screen';
                } else {
                    $connection = ConnectionUtil::getConnection();
                    $connection->autocommit(false);
                    $created = Custom::created();
                    $insert_media_id = $timeline_media_id;
                    if ($action_screen == "PUBLIC" || $action_screen == "PERSONAL") {
                        $insert_media_id = 0;
                    }

                    $action_value = $action_screen . "-" . $action_type . "-" . $user_id . "-" . $timeline_id . "-" . $insert_media_id;
                    $action_array = array();
                    $send_notification = false;
                    if (!$action_array = Custom::create_read_timeline_cache("timeline_action_" . $timeline_id, "READ")) {
                        $query = "select GROUP_CONCAT(CONCAT_WS('-',action_screen, action_type,user_id,child_timeline_id,child_timeline_media_id)) as value  from child_timeline_actions where thinapp_id = $thin_app_id and child_timeline_id = $timeline_id";
                        $data_list = $connection->query($query);
                        if ($data_list->num_rows) {
                            $action_array = mysqli_fetch_assoc($data_list);
                            if (!empty($action_array['value'])) {
                                $action_array = (string)$action_array['value'];
                                Custom::create_read_timeline_cache("timeline_action_" . $timeline_id, "CREATE", $action_array);
                            } else {
                                $action_array = array();
                            }
                        }
                    }

                    if (!empty($action_array)) {
                        $action_array = explode(",", $action_array);
                    }
                    $action_id = 0;
                    if (!in_array($action_value, $action_array) || $action_type == "SHARE") {

                        $sql = "INSERT INTO child_timeline_actions (thinapp_id, user_id, child_timeline_id, child_timeline_media_id, action_type, action_screen, created) VALUES (?, ?, ?, ?, ?, ?, ?)";
                        $stmt = $connection->prepare($sql);
                        $stmt->bind_param('sssssss', $thin_app_id, $user_id, $timeline_id, $insert_media_id, $action_type, $action_screen, $created);
                        if ($stmt->execute()) {
                            $action_id = $stmt->insert_id;
                            if ($action_screen == "PUBLIC") {
                                if ($action_type == "LIKE") {
                                    $sql = "update child_timelines  set like_count = like_count + 1,  modified = ?  where id = ?";
                                    $stmt_time = $connection->prepare($sql);
                                    $stmt_time->bind_param('ss', $created, $timeline_id);
                                } else if ($action_type == "VIEW") {
                                    $sql = "update child_timelines set view_count = view_count + 1, modified = ? where id = ?";
                                    $stmt_time = $connection->prepare($sql);
                                    $stmt_time->bind_param('ss', $created, $timeline_id);
                                } else {
                                    $response['status'] = 0;
                                    $response['message'] = "Timeline action could not completed";
                                }

                            } else if ($action_screen == "PERSONAL") {
                                if ($action_type == "LIKE") {
                                    $sql = "update child_timelines  set personal_like_count = personal_like_count + 1,  modified = ?  where id = ?";
                                    $stmt_time = $connection->prepare($sql);
                                    $stmt_time->bind_param('ss', $created, $timeline_id);
                                } else if ($action_type == "SHARE") {
                                    $sql = "update child_timelines set personal_share_count = personal_share_count + 1, modified = ? where id = ?";
                                    $stmt_time = $connection->prepare($sql);
                                    $stmt_time->bind_param('ss', $created, $timeline_id);
                                } else {
                                    $response['status'] = 0;
                                    $response['message'] = "Timeline action could not completed";
                                }

                            } else {
                                if ($action_type == "LIKE") {
                                    $sql = "update child_timeline_media set like_count = like_count +1, modified = ?  where id = ?";
                                    $stmt_time = $connection->prepare($sql);
                                    $stmt_time->bind_param('ss', $created, $timeline_media_id);
                                } else if ($action_type == "SHARE") {
                                    $sql = "update child_timeline_media set share_count = share_count +1, modified = ?  where id = ?";
                                    $stmt_time = $connection->prepare($sql);
                                    $stmt_time->bind_param('ss', $created, $timeline_media_id);
                                } else {
                                    $response['status'] = 0;
                                    $response['message'] = "Timeline action could not completed";
                                }
                            }

                            if ($stmt_time->execute()) {
                                Custom::create_read_timeline_cache("timeline_action_" . $timeline_id, "CREATE", $action_value);
                                $connection->commit();

                                $send_notification = true;
                                $response['status'] = 1;
                                $response['action_type'] = $action_type;
                                $response['message'] = "Timeline " . strtolower($action_type) . " successfully";
                                WebservicesFunction::addUserStaticToJson('', $user_id, $thin_app_id, $mobile, "TIMELINE", strtoupper($action_type), 'add_timeline_action');

                            } else {
                                $response['status'] = 0;
                                $response['message'] = "Timeline could not " . strtolower($action_type);
                            }
                        } else {

                            $response['status'] = 0;
                            $response['message'] = "Timeline could not " . strtolower($action_type);
                        }
                    } else {

                        $response['status'] = ($action_type == "LIKE") ? 0 : 1;
                        $response['message'] = "Timeline already " . strtolower($action_type);

                    }
                }
            } catch (Exception $e) {
                $response['status'] = 2;
                $response['message'] = "Something went wrong on server";
            }

            Custom::sendResponse($response);
            Custom::send_process_to_background();
            $data = Custom::get_timeline_notification_data($thin_app_id, $mobile, $action_id);
            if (!empty($data) && $send_notification === true) {
                $child_name = $data['child_name'];
                if ($action_type == "LIKE") {
                    $action_type = "liked";
                } else if ($action_type == "SHARE") {
                    $action_type = "shared";
                } else {
                    $action_type = "has seen";
                }

                if (!empty($data['message'])) {
                    $message = $data['action_username'] . " " . $action_type . " your child " . $child_name . "'s timeline '" . mb_strimwidth($data['message'], 0, 50, '...') . "'";
                } else {
                    $message = $data['action_username'] . " " . $action_type . " your child " . $child_name . "'s timeline";
                }

                $sendArray = array(
                    'channel_id' => 0,
                    'thinapp_id' => $thin_app_id,
                    'flag' => 'TIMELINE',
                    'title' => 'New Message',
                    'message' => mb_strimwidth($message, 0, 250, '...'),
                    'description' => '',
                    'chat_reference' => '',
                    'module_type' => 'TIMELINE',
                    'module_type_id' => 0,
                    'child_id' => $data['children_id'],
                    'firebase_reference' => ""
                );
                if (!empty($data['user_token'])) {
                    Custom::send_notification_via_token($sendArray, array($data['user_token']), $thin_app_id);
                }
            }


        }
        exit();

    }

    public static function get_timeline_list_day_wise()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $timeline_id = isset($data['timeline_id']) ? $data['timeline_id'] : 0;
            $child_id = isset($data['child_id']) ? $data['child_id'] : 0;
            try {
                if (empty($thin_app_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid thinapp id';
                } else if (empty($app_key)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid app key';
                } else if (empty($user_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid user id';
                } else if (empty($mobile)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid mobile';
                } else if (empty($timeline_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid timeline id';
                } else if (empty($child_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid childran id';
                } else {

                    $connection = ConnectionUtil::getConnection();
                    $query = "select  IF(cta_like.id > 0,'YES','NO') as is_like, IF(cta_share.id >0,'YES','NO') as is_share, ct.id as timeline_id, ctm.id as timeline_media_id, c.id as child_id, DATE(ct.created) as timeline_date,  c.child_name, ctm.message, c.gender, ctm.image, ctm.like_count, ctm.share_count, c.dob  from child_timeline_media as ctm join childrens as c on c.id = ctm.children_id join child_timelines as ct on ct.id = ctm.child_timeline_id left join child_timeline_actions as cta_like on cta_like.user_id = $user_id and ct.id = cta_like.child_timeline_id and cta_like.action_type ='LIKE' and cta_like.action_screen = 'DAYS' and cta_like.child_timeline_media_id = ctm.id left join child_timeline_actions as cta_share on cta_share.user_id = $user_id and ct.id = cta_share.child_timeline_id  and cta_share.action_type ='SHARE' and cta_share.action_screen = 'DAYS' and cta_share.child_timeline_media_id = ctm.id where ct.thinapp_id = $thin_app_id and ctm.update_status ='COMPLETED' and ct.status ='ACTIVE' and c.status ='ACTIVE' and ctm.child_timeline_id = $timeline_id group by timeline_media_id order by ctm.id desc";
                    $data_list = $connection->query($query);
                    if ($data_list->num_rows) {
                        $response['status'] = 1;
                        $response['message'] = "Timeline list found";
                        $timeline_list = mysqli_fetch_all($data_list, MYSQLI_ASSOC);
                        $response['data']['timeline_list'] = $timeline_list;
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "No timeline found";
                    }
                }
            } catch (Exception $e) {
                $response['status'] = 2;
                $response['message'] = "Something went wrong on server";
            }
            Custom::sendResponse($response);
        }
        exit();
    }

    public static function get_timeline_children_list()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            try {
                if (empty($thin_app_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid thinapp id';
                } else if (empty($app_key)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid app key';
                } else if (empty($user_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid user id';
                } else if (empty($mobile)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid mobile';
                } else {
                    $child_list = Custom::get_children_list_timeline($thin_app_id, $user_id, $mobile);
                    if (!empty($child_list)) {
                        $response['status'] = 1;
                        $response['message'] = "Children list found";
                        $response['data']['children_list'] = $child_list;
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "No children found";
                    }
                }
            } catch (Exception $e) {
                $response['status'] = 2;
                $response['message'] = "Something went wrong on server";
            }
            Custom::sendResponse($response);
        }
        exit();
    }


    public static function get_random_child_timline_image()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $child_id = isset($data['child_id']) ? $data['child_id'] : "";
            $collage_count = isset($data['collage_count']) ? $data['collage_count'] : "";
            try {
                if (empty($thin_app_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid thinapp id';
                } else if (empty($app_key)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid app key';
                } else if (empty($user_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid user id';
                } else if (empty($mobile)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid mobile';
                } else if (empty($child_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid child id';
                } else if (empty($collage_count)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid collage count';
                } else {
                    $connection = ConnectionUtil::getConnection();
                    $query = "SELECT image FROM child_timeline_media where children_id = $child_id and thinapp_id = $thin_app_id  ORDER BY RAND() LIMIT $collage_count";
                    $data_list = $connection->query($query);
                    if ($data_list->num_rows) {
                        $image_array = array_column(mysqli_fetch_all($data_list, MYSQLI_ASSOC), "image");
                        $total_images = count($image_array);
                        if ($total_images == $collage_count) {
                            $response['status'] = 1;
                            $response['message'] = "Collage list found";
                            $response['data']['collage_list'] = $image_array;
                        } else {
                            $response['status'] = 0;
                            $label = ($total_images > 1) ? "images" : "image";
                            $response['message'] = "This collage required minimum " . $collage_count . " " . $label;
                        }
                    } else {
                        $response['status'] = 0;
                        $label = ($collage_count > 1) ? "images" : "image";
                        $response['message'] = "This collage required minimum " . $collage_count . " " . $label;
                    }
                }
            } catch (Exception $e) {
                $response['status'] = 2;
                $response['message'] = "Something went wrong on server";
            }
            Custom::sendResponse($response);
        }
        exit();
    }


    /* child timeline code end  here */
    public static function add_user_payment($data = null)
    {

        ignore_user_abort(true);
        set_time_limit(0);
        if (empty($data)) {
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);
        }
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";

            $total_price = isset($data['total_price']) ? $data['total_price'] : "";
            $transaction_id = isset($data['transaction_id']) ? $data['transaction_id'] : "";
            $transaction_status = isset($data['transaction_status']) ? strtoupper($data['transaction_status']) : "";
            $remark = isset($data['remark']) ? strtoupper($data['remark']) : "";
            $payment_type = isset($data['payment_type']) ? strtoupper($data['payment_type']) : "";

            $send_notification = false;
            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else if (empty($total_price)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid price';
            } else if (empty($transaction_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid transaction';
            } else if ($transaction_status != "SUCCESS" && $transaction_status != "FAILURE") {
                $response['status'] = 0;
                $response['message'] = 'Invalid transaction status';
            } else if ($payment_type != "PAYTM" && $payment_type != "RAZORPAY") {
                $response['status'] = 0;
                $response['message'] = 'Invalid payment status';
            } else {
                $admin_data = Custom::get_thinapp_admin_data($thin_app_id);
                if (!empty($admin_data)) {
                    $payment_receiver = $admin_data['mobile'];
                    $connection = ConnectionUtil::getConnection();
                    $created = Custom::created();
                    $payment_receive_account = 'MENGAGE';
                    $credential = Custom::get_instamojo_credential($thin_app_id);
                    if ($credential) {
                        $apiKey = $credential['instamojo_api_key'];
                        $apiSecret = $credential['instamojo_api_secret'];
                        $salt = $credential['instamojo_salt'];
                        if (!empty($apiKey) || !empty($apiSecret) || !empty($salt)) {
                            $payment_receive_account = 'APP_ADMIN';
                        }
                    }


                    $sql = "INSERT INTO user_payments (payment_receive_account,thinapp_id, user_id, payment_sender, payment_receiver, payment_type, total_price, remark, transaction_id, transaction_status,  created, modified) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                    $stmt = $connection->prepare($sql);
                    $stmt->bind_param('ssssssssssss', $payment_receive_account, $thin_app_id, $user_id, $mobile, $payment_receiver, $payment_type, $total_price, $remark, $transaction_id, $transaction_status, $created, $created);
                    if ($stmt->execute()) {
                        $response['status'] = 1;
                        if ($transaction_status == "SUCCESS") {
                            $response['message'] = "Payment done successfully";
                        } else {
                            $response['message'] = "Sorry, payment could not done.";
                        }
                        WebservicesFunction::addUserStaticToJson('', $user_id, $thin_app_id, $mobile, 'USER_PAYMENT', strtoupper($transaction_status), 'add_user_payment');

                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Sorry payment could not done";
                    }
                } else {
                    $response['status'] = 0;
                    $response['message'] = "Invalid payment receiver";
                }

            }
            Custom::sendResponse($response);
            if (!empty($send_notification)) {
                Custom::send_process_to_background();
                $user_data = Custom::get_user_by_id($user_id);
                if (!empty($admin_data) && !empty($user_data)) {
                    $message = "Payment of  $total_price Rs. for app " . $admin_data['app_name'] . " has been successfully done by user " . $user_data['username'] . " (" . $user_data['mobile'] . ") ";
                    $sendArray = array(
                        'channel_id' => 0,
                        'thinapp_id' => $thin_app_id,
                        'flag' => 'USER_PAYMENT',
                        'title' => 'New Payment',
                        'message' => $message,
                        'description' => '',
                        'chat_reference' => '',
                        'module_type' => 'USER_PAYMENT',
                        'module_type_id' => 0,
                        'firebase_reference' => ""
                    );
                    Custom::send_notification_via_token($sendArray, array($admin_data['firebase_token']), $thin_app_id);
                    Custom::send_single_sms($admin_data['mobile'], $message, $thin_app_id);
                }

            }
        }
        exit();
    }

    public static function get_payment_history()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $role_id = isset($data['role_id']) ? $data['role_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $search = isset($data['search']) ? $data['search'] : "";
            $offset = isset($data['offset']) ? $data['offset'] : 0;
            $from_date = isset($data['from_date']) ? $data['from_date'] : date('d-m-Y');
            $to_date = isset($data['to_date']) ? $data['to_date'] : date('d-m-Y');


            $main_app_category = isset($data['main_app_category']) ? $data['main_app_category'] : "";
            $user_role = isset($data['user_role']) ? $data['user_role'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else if (empty($role_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid role';
            } else {

                $offset = $offset * PAGINATION_LIMIT;
                $limit = PAGINATION_LIMIT;
                $connection = ConnectionUtil::getConnection();
                $conditions = "";


                if ($main_app_category == "HOSPITAL") {

                    if ($user_role != "ADMIN" && $user_role != "RECEPTIONIST") {

                        $conditions = " and up.payment_sender = '$mobile'";

                    }

                    if (!empty($search)) {
                        $conditions .= " and up.payment_sender LIKE'%$search%' ";
                    }

                } else {
                    if ($role_id == 1) {
                        $conditions = " and up.payment_sender = '$mobile'";
                    } else if (!empty($search) && $role_id == 5) {
                        $conditions = " and up.payment_sender LIKE'%$search%' ";
                    }
                }

                if (!empty($from_date) && !empty($to_date) && empty($search)) {

                    $from_date = DateTime::createFromFormat('d-m-Y', $from_date);
                    $from_date = $from_date->format('Y-m-d');
                    $to_date = DateTime::createFromFormat('d-m-Y', $to_date);
                    $to_date = $to_date->format('Y-m-d');

                    $conditions .= " and DATE(up.created) >= '$from_date' and DATE(up.created) <= '$to_date' ";

                }

                $query = "select up.id, u.username as receiver_name, up.payment_receiver, ur.username as sender_name, up.payment_sender, up.payment_type, up.total_price, up.remark, up.transaction_status, DATE_FORMAT(up.created,'%d-%b-%Y') as date, DATE_FORMAT(up.created,'%I:%i %p') as time from user_payments as up left join users as u on u.mobile = up.payment_receiver and u.thinapp_id = up.thinapp_id left join users as ur on ur.mobile = up.payment_sender and ur.thinapp_id = up.thinapp_id where up.thinapp_id = $thin_app_id   $conditions order by up.id desc LIMIT $offset, $limit";
                $data_list = $connection->query($query);
                if ($data_list->num_rows) {
                    $response['status'] = 1;
                    $response['message'] = "Payment list fond";
                    $payment_list = mysqli_fetch_all($data_list, MYSQLI_ASSOC);
                    $response['data']['payment_list'] = $payment_list;
                } else {
                    $response['status'] = 0;
                    $response['message'] = "No payment list found";
                }
            }
            Custom::sendResponse($response);
        }
        exit();
    }


    public static function get_support_chat_app_list()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            try {
                if (empty($thin_app_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid thinapp id';
                } else if (empty($app_key)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid app key';
                } else if (empty($user_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid user id';
                } else if (empty($mobile)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid mobile';
                } else {
                    $connection = ConnectionUtil::getConnection();
                    $query = "select CONCAT_WS('_','SUPPORT',t.id) as chat_reference, t.id, t.name as app_name, u.mobile, u.username, u.image from thinapps as t join users as u on t.id = u.thinapp_id and u.role_id =5 and t.status ='ACTIVE' left join chat_users as cu on cu.chat_reference = CONCAT_WS('_','SUPPORT',t.id) and cu.chat_type ='SUPPORT_CHAT'  where t.category_name = 'DOCTOR' order by cu.created desc, t.name asc";
                    $data_list = $connection->query($query);
                    if ($data_list->num_rows) {
                        $app_list = mysqli_fetch_all($data_list, MYSQLI_ASSOC);
                        $response['status'] = 1;
                        $response['message'] = "App list found";
                        $response['data']['app_list'] = $app_list;
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "No app found";
                    }
                }
            } catch (Exception $e) {
                $response['status'] = 2;
                $response['message'] = "Something went wrong on server";
            }
            Custom::sendResponse($response);
        }
        exit();
    }

    public static function send_support_chat_notification()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $message = isset($data['message']) ? $data['message'] : "";
            $message_type = isset($data['message_type']) ? strtoupper($data['message_type']) : "";
            $is_support_user = isset($data['is_support_user']) ? $data['is_support_user'] : "";
            $chat_reference = isset($data['chat_reference']) ? $data['chat_reference'] : "";
            $file_path_url = isset($data['file_path_url']) ? $data['file_path_url'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if ($message_type != 'TEXT' && $message_type != 'IMAGE' && $message_type != 'OTHER') {
                $response['status'] = 0;
                $response['message'] = 'Invalid message_type';
            } else if ($is_support_user != 'YES' && $is_support_user != 'NO') {
                $response['status'] = 0;
                $response['message'] = 'Invalid user type';
            } else if (empty($chat_reference)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid reference';
            } else if ($message_type == 'IMAGE' && empty($file_path_url)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid file url';
            } else {

                $app_name = "";
                if (!$support_user_token = json_decode(WebservicesFunction::readJson('support_user_token'), true)) {
                    $connection = ConnectionUtil::getConnection();
                    $query = "select id,firebase_token from users  where is_support_user = 'YES' AND thinapp_id = " . DOCTOR_FACTORY_APP_ID;
                    $support_user_token = $connection->query($query);
                    if ($support_user_token->num_rows) {
                        $support_user_token = array_column(mysqli_fetch_all($support_user_token, MYSQLI_ASSOC), 'firebase_token');
                        WebservicesFunction::createJson('support_user_token', json_encode($support_user_token), "CREATE");
                    }
                }

                if ($is_support_user == "YES") {

                    $thin_app_id = explode("_", $chat_reference);
                    $thin_app_id = @$thin_app_id[1];
                    $get_app_admin_data = Custom::get_thinapp_admin_data($thin_app_id);

                    if ($message_type == "IMAGE" || $message_type == "OTHER") {
                        $message = " sent a file.";
                    }
                    $send_array = array(
                        'title' => 'New Message',
                        'channel_id' => 0,
                        'thinapp_id' => $thin_app_id,
                        'message' => mb_strimwidth("mEngage Support- " . $message, 0, 50, '...'),
                        'flag' => 'SUPPORT_CHAT',
                        'description' => '',
                        'type' => $message_type,
                        'chat_reference' => $chat_reference,
                        'file_path_url' => $file_path_url,
                        'module_type' => 'SUPPORT_CHAT',
                        'module_type_id' => 0

                    );

                } else {


                    if ($message_type == "IMAGE" || $message_type == "OTHER") {
                        $message = " sent a file.";
                    }

                    $thin_app_id = explode("_", $chat_reference);
                    $thin_app_id = @$thin_app_id[1];
                    if (isset($GLOBALS["APP_NAME_$thin_app_id"])) {
                        $app_name = $GLOBALS['connection'];
                    } else {
                        $app_data = Custom::getThinAppData($thin_app_id);
                        $GLOBALS["APP_NAME_$thin_app_id"] = $app_name = $app_data['name'];
                    }


                    $send_array = array(
                        'title' => 'New Message',
                        'channel_id' => 0,
                        'thinapp_id' => DOCTOR_FACTORY_APP_ID,
                        'message' => mb_strimwidth("$app_name - " . $message, 0, 50, '...'),
                        'flag' => 'SUPPORT_CHAT',
                        'description' => '',
                        'type' => $message_type,
                        'chat_reference' => $chat_reference,
                        'file_path_url' => $file_path_url,
                        'module_type' => 'SUPPORT_CHAT',
                        'module_type_id' => 0
                    );


                }

                if (!empty($support_user_token) || !empty($get_app_admin_data)) {
                    $response['status'] = 1;
                    $response['message'] = "Notification send";
                    $response['message_id'] = 1;
                } else {
                    $response['status'] = 0;
                    $response['message'] = "Invalid request parameter";
                }
            }
            echo json_encode($response);
            Custom::send_process_to_background();


            if ($is_support_user == "NO" && !empty($support_user_token)) {
                Custom::send_notification_via_token($send_array, $support_user_token, DOCTOR_FACTORY_APP_ID);
            } else if ($is_support_user == "YES" && !empty($get_app_admin_data)) {
                Custom::send_notification_via_token($send_array, $support_user_token, DOCTOR_FACTORY_APP_ID);
                Custom::send_notification_via_token($send_array, [$get_app_admin_data['firebase_token']], $thin_app_id);
            }

            $post = array();
            $post['thin_app_id'] = $thin_app_id;
            $post['app_key'] = $app_key;
            $post['user_id'] = $user_id;
            $post['from_mobile'] = $mobile;
            $post['to_mobile'] = $mobile;
            $post['to_username'] = $app_name;
            $post['chat_reference'] = $chat_reference;
            $post['chat_type'] = 'SUPPORT_CHAT';
            $res = WebservicesFunction::add_chat_user($post, true);

            exit;

        }
    }


    public static function load_appointment_address_by_id()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $address_id = isset($data['address_id']) ? $data['address_id'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter user id';
            } else if (empty($address_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter address id';
            } else {


                $query = "select id, place, address, country_id, state_id, city_id, separate_address from appointment_addresses where thinapp_id = $thin_app_id and id = $address_id";
                $connection = ConnectionUtil::getConnection();
                $service_message_list = $connection->query($query);
                if ($service_message_list->num_rows) {
                    $service_list = mysqli_fetch_assoc($service_message_list);
                    $response['status'] = 1;
                    $response['message'] = "Address  list found";
                    $response['data']['address_data'] = $service_list;
                    $country_id = $service_list['country_id'];
                    $state_id = $service_list['state_id'];

                    if (!$country_list = json_decode(WebservicesFunction::readJson("country_list"), true)) {
                        $country_list = Custom::getCountryList(true);
                        WebservicesFunction::createJson("country_list", json_encode($country_list), "CREATE");
                    }
                    if (!$state_list = json_decode(WebservicesFunction::readJson("state_list_$country_id"), true)) {
                        $state_list = Custom::getStateList($country_id, true);
                        WebservicesFunction::createJson("state_list_$country_id", json_encode($state_list), "CREATE");
                    }

                    if (!$city_list = json_decode(WebservicesFunction::readJson("city_list_$state_id"), true)) {
                        $city_list = Custom::getCityList($state_id, true);
                        WebservicesFunction::createJson("city_list_$state_id", json_encode($city_list), "CREATE");
                    }

                    $response['data']['country_data'] = $country_list;
                    $response['data']['state_data'] = $state_list;
                    $response['data']['city_data'] = $city_list;


                } else {
                    $response['status'] = 0;
                    $response['message'] = "No address found";
                }

            }
            echo json_encode($response);
            die;
        } else {
            exit();
        }
    }

    public static function get_appointment_category_by_id()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $category_id = isset($data['category_id']) ? $data['category_id'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter user id';
            } else if (empty($category_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter category id';
            } else {


                $query = "select app_cat.name,app_cat.image, app_cat.id from appointment_categories as app_cat  where app_cat.status = 'ACTIVE' AND app_cat.thinapp_id = $thin_app_id and app_cat.id=$category_id";
                $connection = ConnectionUtil::getConnection();
                $service_message_list = $connection->query($query);
                if ($service_message_list->num_rows) {
                    $service_list = mysqli_fetch_assoc($service_message_list);
                    $response['status'] = 1;
                    $response['message'] = "Address  list found";
                    $response['data']['category_data'] = $service_list;
                } else {
                    $response['status'] = 0;
                    $response['message'] = "No address found";
                }

            }
            echo json_encode($response);
            die;
        } else {
            exit();
        }
    }


    public static function get_appointment_service_detail()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $service_id = isset($data['service_id']) ? $data['service_id'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter user id';
            } else if (empty($service_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter service id';
            } else {


                $service_data = WebservicesFunction::get_service_data_by_id($service_id);
                if (!empty($service_data)) {
                    $response['status'] = 1;
                    $response['message'] = "Service  data found";
                    $response['data']['service_data'] = $service_data;
                } else {
                    $response['status'] = 0;
                    $response['message'] = "No service found";
                }

            }
            echo json_encode($response);
            die;
        } else {
            exit();
        }
    }


    public static function appointment_tracker_detail($data = null, $request_from_web = false)
    {
        $return = true;
        if (empty($data)) {
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);
            $return = false;
        }


        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : 0;
            $is_new_appointment = isset($data['is_new_appointment']) ? $data['is_new_appointment'] : "NO";
            $application_type = isset($data['application_type']) ? $data['application_type'] : "";

            try {
                if (empty($thin_app_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid thinapp id';
                } else if (empty($app_key)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid app key';
                } else if (empty($user_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid user id';
                } else if (empty($mobile)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid mobile';
                } else {
                    if (false && Custom::check_user_permission($thin_app_id, 'SHOW_USER_TO_APPOINTMENT_TRACKER') == "YES") {
                        $connection = ConnectionUtil::getConnection();
                        $query = "select  aa.address, app_staff.show_extend_time_on_tracker, acss.appointment_address_id as address_id, acss.appointment_datetime, acss.appointment_service_id as service_id, acss.appointment_staff_id as doctor_id, aa.latitude,aa.longitude, (select CONCAT_WS('#',IF(inner_acss.has_token='YES',IF(inner_acss.sub_token='YES','E',inner_acss.queue_number),'WI'),inner_acss.slot_time,IFNULL(inner_ac.first_name,inner_c.child_name)) from appointment_customer_staff_services as inner_acss left join appointment_customers as inner_ac on inner_ac.id = inner_acss.appointment_customer_id left join childrens as inner_c on inner_c.id = inner_acss.children_id  where inner_acss.status IN ('NEW','CONFIRM','RESCHEDULE') AND inner_acss.skip_tracker = 'NO' and DATE(inner_acss.appointment_datetime) = DATE(NOW())  and inner_acss.appointment_staff_id = acss.appointment_staff_id order by inner_acss.appointment_datetime limit 1 ) as current_string, app_staff.name as doctor_name, IFNULL(ac.first_name, c.child_name) as patient_name, acss.queue_number, acss.slot_time, IF(acss.status='CLOSED','NO','YES') as display_tracker  from appointment_customer_staff_services as acss  left join appointment_customers as ac on ac.id = acss.appointment_customer_id left join childrens as c on c.id = acss.children_id left join appointment_staffs as app_staff on app_staff.id= acss.appointment_staff_id left join appointment_addresses as aa on aa.id= acss.appointment_address_id  where acss.status IN ('NEW','CONFIRM','RESCHEDULE')  and DATE(acss.appointment_datetime) = DATE(NOW()) and ( (ac.mobile = '$mobile' AND ac.thinapp_id = $thin_app_id ) OR  (c.mobile ='$mobile' AND c.thinapp_id = $thin_app_id ) ) order by acss.appointment_datetime desc";
                        $service_message_list = $connection->query($query);
                        if ($service_message_list->num_rows) {
                            $list = mysqli_fetch_all($service_message_list, MYSQLI_ASSOC);
                            $tmp = $doctor_array = array();

                            foreach ($list as $key => $val) {
                                if (!array_key_exists($val['doctor_id'], $doctor_array)) {
                                    $doctor_array[$val['doctor_id']] = $val['doctor_id'];
                                    $current_string = $location = false;
                                    $time_string = 0;
                                    if (!empty($val['current_string'])) {
                                        $current_string = explode("#", $val['current_string']);
                                        $tracker_slot_time = $current_string[1];
                                        $patient_slot_time = $val['slot_time'];
                                        $datetime1 = new DateTime(date('Y-m-d') . " $patient_slot_time");
                                        $datetime2 = new DateTime(date('Y-m-d') . " $tracker_slot_time");
                                        $interval = $datetime1->diff($datetime2);
                                        $hours = $interval->format('%h');
                                        $minutes = $interval->format('%i');
                                        if ($hours > 0) {
                                            $time_string += $hours * 60;
                                        }
                                        if ($minutes > 0) {
                                            $time_string += $minutes;
                                        }
                                    }
                                    if (!empty($current_string[2])) {
                                        $location = explode("-", $current_string[2]);
                                    }

                                    $time = $val['slot_time'];
                                    if($val['show_extend_time_on_tracker'] =="YES"){
                                        $total_update_minutes = Custom::get_total_difference_minutes($val['service_id'], $val['address_id'], $val['doctor_id'], $val['appointment_datetime'], true);
                                        if (!empty($total_update_minutes)) {
                                            $selectedTime = date('H:i:s', strtotime($val['appointment_datetime']));
                                            $minutes_string = ($total_update_minutes >= 0) ? "+$total_update_minutes minutes" : "$total_update_minutes minutes";
                                            $time = strtotime($minutes_string, strtotime($selectedTime));
                                            $time = date('h:i A', $time);
                                        }
                                    }

                                    $tmp[] = array(
                                        'doctor_name' => $val['doctor_name'],
                                        'current_token' => isset($current_string[0]) ? $current_string[0] : 'N/A',
                                        'current_slot' => isset($current_string[1]) ? $current_string[1] : 'N/A',
                                        'latitude' => !empty($val['latitude']) ? $val['latitude'] : 0,
                                        'longitude' => !empty($val['longitude']) ? $val['longitude'] : 0,
                                        'patient_token' => $val['queue_number'],
                                        'patient_slot' => ($application_type=='FLUTTER')?$val['slot_time']:$time,
                                        'patient_estimate_time' => $time,
                                        'display_tracker' => (!empty($val['latitude']) && !empty($val['longitude'])) ? $val['display_tracker'] : 'NO',
                                        'display_message' => ($val['queue_number'] == @$current_string[0])?'YES':'NO',
                                        'time_left' => $time_string,
                                        'address' => $val['address']
                                    );

                                }
                            }
                            $response['status'] = 1;
                            $response['message'] = "Tracker list found";
                            $response['data']['app_list'] = $tmp;

                        } else {
                            $response['status'] = 0;
                            $response['message'] = "No appointment found";

                        }

                    } else {
                        $response['status'] = 0;
                        $response['message'] = "No appointment found";
                    }
                }
            } catch (Exception $e) {
                $response['status'] = 2;
                $response['message'] = "Something went wrong on server";
            }
            if ($return === false) {
                Custom::sendResponse($response);
            } else {
                return json_encode($response);
            }

        }
        exit();
    }

    public static function get_health_tip_detail()
    {


        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $health_tip_id = isset($data['health_tip_id']) ? $data['health_tip_id'] : "";
            try {
                if (empty($thin_app_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid thinapp id';
                } else if (empty($app_key)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid app key';
                } else if (empty($user_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid user id';
                } else if (empty($mobile)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid mobile';
                } else if (empty($health_tip_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid health tip id';
                } else {
                    $query = "SELECT SUBSTRING_INDEX(cdd.image,'/',-1) as image_name, cdd.media_type,cdd.id, cdd.title, cdd.image,cdd.category,cdd.like_count,cdd.view_count, cdd.share_count as total_share_count, cdd.description,IF(LOCATE('$mobile',cdd.liked_mobile)>0,'true','false') AS is_liked, sub_cat.sub_category_name FROM cms_doc_dashboards as cdd LEFT JOIN cms_doc_health_tip_sub_categories as sub_cat ON (cdd.sub_category_id = sub_cat.id) WHERE cdd.status= 'ACTIVE' and cdd.id = $health_tip_id";
                    $connection = ConnectionUtil::getConnection();
                    $service_message_list = $connection->query($query);
                    if ($service_message_list->num_rows) {
                        $service_list = mysqli_fetch_assoc($service_message_list);

                        $response['status'] = 1;
                        $response['message'] = "Data found";
                        $response['data']['health_detail'] = $service_list;
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "No address found";
                    }
                }
            } catch (Exception $e) {
                $response['status'] = 0;
                $response['message'] = "Something went wrong on server";
            }
            Custom::sendResponse($response);
        }
        exit();


    }

    public static function get_doctor_blog_message_detail()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $message_id = isset($data['message_id']) ? $data['message_id'] : "";
            $channel_id = isset($data['channel_id']) ? $data['channel_id'] : "";

            try {
                if (empty($thin_app_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid thinapp id';
                } else if (empty($app_key)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid app key';
                } else if (empty($user_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid user id';
                } else if (empty($mobile)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid mobile';
                } else if (empty($message_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid message id';
                } else if (empty($channel_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid channel id';
                } else {
                    $response_data = WebservicesFunction::fun_get_channel_messages_list($thin_app_id, $user_id, $channel_id, 1, 0, $message_id);
                    if (!empty($response_data)) {
                        $response['status'] = 1;
                        $response['message'] = "Message data found";
                        $response['data']['message'] = $response_data[0];
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "No message found";
                    }
                }
            } catch (Exception $e) {
                $response['status'] = 0;
                $response['message'] = "Something went wrong on server";
            }
            Custom::sendResponse($response);
        }
        exit();

    }


    public static function edit_app_banner()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $url = isset($data['url']) ? $data['url'] : "";
            $file_path = isset($data['file_path']) ? Custom::check_image_path_string($data['file_path']) : "";
            $index_number = isset($data['index_number']) ? $data['index_number'] : "";
            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else if (empty($file_path)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid file path';
            } else if ($index_number == "" && $index_number != 0) {
                $response['status'] = 0;
                $response['message'] = 'Invalid file index';
            } else {
                $connection = ConnectionUtil::getConnection();
                $created = Custom::created();
                $query = "select id from banners where thinapp_id = $thin_app_id and index_number = $index_number limit 1";
                $data = $connection->query($query);
                if ($data->num_rows) {
                    $data = mysqli_fetch_assoc($data);
                    $sql = "update banners set path = ?,url = ?, modified = ? where id = ?";
                    $stmt = $connection->prepare($sql);
                    $stmt->bind_param('ssss', $file_path, $url, $created, $data['id']);
                    if ($stmt->execute()) {
                        $response['status'] = 1;
                        $response['message'] = "Banner updated successfully";
                        $file_name = Custom::encrypt_decrypt('encrypt', "banner_$thin_app_id");
                        WebservicesFunction::deleteJson(array($file_name), "banner");

                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Sorry banner could not update";
                    }
                } else {

                    $sql = "INSERT INTO banners (thinapp_id, path, url, index_number,  created, modified  ) VALUES (?, ?, ?, ?, ?, ?)";
                    $stmt = $connection->prepare($sql);
                    $stmt->bind_param('ssssss', $thin_app_id, $file_path, $url, $index_number, $created, $created);
                    if ($stmt->execute()) {
                        $response['status'] = 1;
                        $response['message'] = "Banner updated successfully";
                        $file_name = Custom::encrypt_decrypt('encrypt', "banner_$thin_app_id");
                        WebservicesFunction::deleteJson(array($file_name), "banner");

                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Sorry banner could not update";
                    }
                }

            }
            Custom::sendResponse($response);
        }
        exit();


    }

    public static function get_consent_detail()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['app_key']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $consent_id = isset($data['consent_id']) ? $data['consent_id'] : "";
            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else if (empty($consent_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid consent id';
            } else {
                $consent_data = Custom::get_consent_by_id($thin_app_id, $consent_id);
                if (!empty($consent_data)) {
                    $return_array = array();


                    $return_array['consent_id'] = $consent_data['id'];
                    $return_array['consent_title'] = $consent_data['consent_title'];
                    $return_array['consent_message'] = $consent_data['consent_message'];
                    $return_array['signature_image'] = $consent_data['signature_image'];
                    $return_array['receiver_view_status'] = $consent_data['receiver_view_status'];
                    $return_array['view_time'] = date('H:i', strtotime($consent_data['view_time']));;
                    $return_array['view_date'] = date('d-M-Y', strtotime($consent_data['view_time']));;
                    $return_array['sent_date'] = date('d-M-Y', strtotime($consent_data['sent_time']));;
                    $return_array['sent_time'] = date('H:i', strtotime($consent_data['sent_time']));;
                    $return_array['username'] = $consent_data['username'];
                    $return_array['receiver_mobile'] = $consent_data['receiver_mobile'];
                    $return_array['action_date'] = date('d-M-Y', strtotime($consent_data['action_time']));;
                    $return_array['action_time'] = date('H:i', strtotime($consent_data['action_time']));;
                    $return_array['action_type'] = $consent_data['action_type'];
                    $response['status'] = 1;
                    $response['message'] = "Consent detail found.";
                    $response['data']['consent_detail'] = $return_array;
                } else {
                    $response['status'] = 0;
                    $response['message'] = "Sorry invalid consent";
                }
            }
            Custom::sendResponse($response);
        }
        exit();
    }

    public static function update_instamojo_setting()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $instamojo_api_key = !empty($data['api_key']) ? $data['api_key'] : "";
            $instamojo_api_secret = !empty($data['api_secret']) ? $data['api_secret'] : "";
            $instamojo_salt = !empty($data['salt']) ? $data['salt'] : "";
            $private_api_key = !empty($data['private_api_key']) ? $data['private_api_key'] : "";
            $private_auth_key = !empty($data['private_auth_key']) ? $data['private_auth_key'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else {
                $connection = ConnectionUtil::getConnection();
                $created = Custom::created();

                $sql = "UPDATE thinapps set instamojo_api_key =?, instamojo_api_secret = ?, instamojo_salt = ?, private_api_key=?, private_auth_key=?, modified =?  where id = ?";
                $stmt = $connection->prepare($sql);
                $stmt->bind_param('sssssss', $instamojo_api_key, $instamojo_api_secret, $instamojo_salt, $private_api_key, $private_auth_key, $created, $thin_app_id);
                if ($stmt->execute()) {
                    WebservicesFunction::deleteJson(array('instamojo_' . $thin_app_id), 'instamojo');
                    $response['status'] = 1;
                    $response['message'] = "Setting updated successfully";
                    WebservicesFunction::addUserStaticToJson('', $user_id, $thin_app_id, $mobile, "SETTING", "UPDATE SOCIAL SETTING", 'update_instamojo_setting');

                } else {
                    $response['status'] = 0;
                    $response['message'] = "Sorry setting could not update";
                }
            }
            Custom::sendResponse($response);
        }
        exit();
    }


    /* CLIPBOARD API START HERE */


    public static function get_all_patients_folders()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $role_id = isset($data['role_id']) ? $data['role_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $list_for = isset($data['list_for']) ? $data['list_for'] : "FOLDER";
            $show_closed_appointment = isset($data['show_closed_appointment']) ? $data['show_closed_appointment'] : "NO";
            $send_appointment_for = isset($data['send_appointment_for']) ? $data['send_appointment_for'] : "";
            $send_doctor_data = isset($data['send_doctor_data']) ? $data['send_doctor_data'] : "NO";
            $main_app_category = isset($data['main_app_category']) ? $data['main_app_category'] : "";
            $last_closed_appointment_id = isset($data['last_closed_appointment_id']) ? $data['last_closed_appointment_id'] : 0;
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : 0;
            $mode = isset($data['mode']) ? $data['mode'] : 'OPD';
            $offset = isset($data['offset']) ? $data['offset'] : '-1';
            $patientHistoryUrl = SITE_PATH . 'tracker/get_patient_history/';
            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else if (empty($role_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid role';
            } else {

                $connection = ConnectionUtil::getConnection();
                $conditions = "";
                if ($list_for == "FOLDER") {
                    if ($main_app_category == "HOSPITAL") {
                        //$query = "select CONCAT('$patientHistoryUrl',TO_BASE64(IFNULL(ac.thinapp_id,c.thinapp_id)),'/',TO_BASE64(IFNULL(ac.uhid,c.uhid))) as history_url, '' as payment_status, 'NO' as is_skip, df.id as folder_id, df.total_attachment, IFNULL(IFNULL(ac.first_name,c.child_name),df.folder_name) as folder_name,  IFNULL(ac.mobile,c.mobile) as mobile, IFNULL(u.username,df.folder_name) as name , (select GROUP_CONCAT(CONCAT_WS('##',in_df.id,in_df.file_path) ) from drive_files as in_df where in_df.drive_folder_id = df.id and in_df.file_category_master_id = 6 and in_df.status='ACTIVE' and in_df.is_pad_prescription ='YES' ) as last_prescription  from appointment_customer_staff_services as acss left join appointment_customers as ac on ac.id = acss.appointment_customer_id  left join childrens as c on c.id = acss.children_id  join drive_folders as df on ( df.appointment_customer_id = ac.id OR df.children_id = c.id)  left join users as u on u.mobile = ac.mobile and u.thinapp_id = ac.thinapp_id where  acss.appointment_staff_id = $doctor_id  group by acss.appointment_customer_id, acss.children_id";

                    }
                    $query = "select CONCAT('$patientHistoryUrl',TO_BASE64(c.thinapp_id),'/',TO_BASE64(c.uhid)) as history_url, '' as payment_status, 'NO' as is_skip, df.id as folder_id, df.total_attachment,  IFNULL(c.child_name,df.folder_name) as folder_name,  IF(c.child_number != '', c.mobile, df.folder_add_from_number ) as  mobile, IFNULL(u.username,df.folder_name) as name, (select GROUP_CONCAT(CONCAT_WS('##',in_df.id,in_df.file_path) ) from drive_files as in_df where in_df.drive_folder_id = df.id and in_df.file_category_master_id = 6 and in_df.status='ACTIVE' and in_df.is_pad_prescription ='YES' ) as last_prescription from drive_folders as df  left join users as u on df.folder_add_from_number = u.mobile and u.thinapp_id = df.thinapp_id  left join childrens as c on c.id = df.children_id and c.status = 'ACTIVE' where df.thinapp_id = $thin_app_id and (df.folder_add_from_number != '' OR df.child_number != '' ) group by df.id";


                } else if ($list_for == "APPOINTMENT") {

                    $order_by = " ORDER BY acss.appointment_datetime asc ";
                    if ($mode == 'OPD') {
                        if ($main_app_category != "HOSPITAL" && empty($doctor_id)) {
                            $doctor_data = Custom::get_doctor_by_mobile($mobile, $thin_app_id);
                            $doctor_id = !empty($doctor_data) ? $doctor_data['id'] : $doctor_id;
                        }
                        $status_condition = $custom_condition = $query = $limit = "";
                        if ($send_appointment_for == "OPEN" || $send_appointment_for == "CLOSED" || $send_appointment_for == "ALL") {
                            if ($send_appointment_for == "OPEN") {
                                $custom_condition = !empty($last_closed_appointment_id) ? " and acss.id != $last_closed_appointment_id" : '';
                                $status_condition = "( acss.status = 'NEW' OR acss.status = 'CONFIRM' OR acss.status = 'RESCHEDULE' )";
                            } else if ($send_appointment_for == "CLOSED") {
                                $status_condition = "( acss.status = 'CLOSED' )";
                            } else {
                                $status_condition = "( acss.status = 'NEW' OR acss.status = 'CONFIRM' OR acss.status = 'RESCHEDULE' OR acss.status = 'CLOSED'  )";
                            }
                        } else {
                            $status_condition = "( acss.status = 'NEW' OR acss.status = 'CONFIRM' OR acss.status = 'RESCHEDULE'  )";
                            $order_by = " ORDER BY acss.appointment_datetime asc ";
                            if ($show_closed_appointment == "YES") {
                                $status_condition = "( acss.status != 'CANCELED' )";
                            }
                        }

                        if (Custom::check_app_enable_permission($thin_app_id, 'SMART_CLINIC') && $send_appointment_for == "OPEN") {
                            $tracker_assign = Custom::getThinAppData($thin_app_id)['smart_clinic_tracker_queue'];
                            $order_key = ($tracker_assign=="MANUAL_ASSIGN")?"DESC":"ASC";
                            $order_by = " ORDER BY CASE WHEN acss.patient_queue_type='NONE' THEN CAST(acss.queue_number  AS DECIMAL(10,2)) WHEN acss.patient_queue_type <> 'NONE' THEN CAST(acss.show_after_queue AS DECIMAL(10,2)) END ASC, acss.queue_assign_type, acss.queue_check_in_datetime $order_key";
                            $custom_condition = " and acss.delete_status != 'DELETED' and acss.payment_status='SUCCESS' and acss.skip_tracker = 'NO' AND (acss.emergency_appointment ='NO' OR (acss.patient_queue_type='EMERGENCY_CHECKIN' AND acss.patient_queue_checked_in ='YES')) and ( acss.patient_queue_type='NONE'  OR acss.patient_queue_checked_in='YES' ) AND acss.patient_queue_type<>'LAB_TEST'";
                        }
                        $query = "SELECT acss.patient_queue_type,  acss.has_token, acss.emergency_appointment, IF(IFNULL(ac.dob,c.dob) != '0000-00-00', DATE_FORMAT(IFNULL(ac.dob,c.dob),'%d-%m-%Y'),'') as dob,  CONCAT('$patientHistoryUrl',TO_BASE64(IFNULL(ac.thinapp_id,c.thinapp_id)),'/',TO_BASE64(IFNULL(ac.uhid,c.uhid))) as history_url, IFNULL(ac.gender,c.gender) AS gender, IF(ac.age IS NOT NULL, ac.age,'') AS age, IF(acss.payment_status ='FAILURE' ,'PENDING',acss.payment_status) as payment_status, acss.skip_tracker as is_skip, df.total_attachment, IF(acss.appointment_customer_id > 0, 'CUSTOMER','CHILDREN') as type, IF(acss.appointment_customer_id > 0, acss.appointment_customer_id,acss.children_id) as edit_patient_id, acss.amount as fees, acss.slot_time as appointment_time, IF(acss.status ='CLOSED',0,1) AS order_status, IF(c.id IS NOT NULL,c.child_number,'') as patient_id, IF(ac.id IS NOT NULL,'CUSTOMER','CHILD') as type, acss.status, acss.id as appointment_id, df.id as folder_id, df.folder_name, IF(ac.id IS NOT NULL,df.folder_add_from_number,c.mobile) as mobile, IFNULL(ac.first_name,c.child_name) as name, acss.queue_number, DATE_FORMAT(acss.appointment_datetime,'%d-%m-%Y %h:%i %p') as appointment_datetime FROM appointment_customer_staff_services AS acss LEFT JOIN appointment_customers AS ac ON ac.id=acss.appointment_customer_id LEFT JOIN childrens AS c ON c.id = acss.children_id LEFT JOIN drive_folders AS df ON df.id = ( IF(ac.id IS NOT NULL,(SELECT id FROM drive_folders WHERE appointment_customer_id = ac.id LIMIT 1),(SELECT id FROM drive_folders WHERE children_id = c.id LIMIT 1)))  WHERE acss.thinapp_id = $thin_app_id AND acss.appointment_staff_id = $doctor_id  AND DATE(acss.appointment_datetime) = DATE(NOW()) AND $status_condition $custom_condition  $order_by ";
                    
                    } else if ($mode == 'IPD') {
                        $query = "select  CONCAT('$patientHistoryUrl',TO_BASE64(IFNULL(ac.thinapp_id,c.thinapp_id)),'/',TO_BASE64(IFNULL(ac.uhid,c.uhid))) as history_url, IFNULL(ac.gender,c.gender) AS gender, IF(ac.age IS NOT NULL, ac.age,'') AS age,  'PENDING' as payment_status, 'NO' AS is_skip, hi.patient_type as type, hi.patient_id as edit_patient_id, '0' as fees, DATE_FORMAT(hi.admit_date,'%d, %M') as appointment_time, '0' as order_status, hi.status, hi.id  as appointment_id, df.id as folder_id, df.folder_name, IFNULL(ac.mobile,c.mobile) as mobile, IFNULL(ac.first_name,c.child_name) as name, hi.ipd_unique_id as queue_number, '' as appointment_datetime from hospital_ipd as hi left join appointment_customers as ac on ac.id = hi.patient_id and hi.patient_type = 'CUSTOMER' left join childrens as c on c.id = hi.patient_id and hi.patient_type = 'CHILDREN' LEFT JOIN drive_folders AS df ON df.id = ( IF(ac.id IS NOT NULL,(SELECT id FROM drive_folders WHERE appointment_customer_id = ac.id LIMIT 1),(SELECT id FROM drive_folders WHERE children_id = c.id LIMIT 1))) where hi.status = 'ACTIVE' and hi.admit_status ='ADMIT' and hi.appointment_staff_id = $doctor_id group by hi.id";
                    } else {
                        $query = "select  CONCAT('$patientHistoryUrl',TO_BASE64(IFNULL(ac.thinapp_id,c.thinapp_id)),'/',TO_BASE64(IFNULL(ac.uhid,c.uhid))) as history_url, IFNULL(ac.gender,c.gender) AS gender, IF(ac.age IS NOT NULL, ac.age,'') AS age,  'PENDING' as payment_status, 'NO' AS is_skip, IF(ac.id IS NOT NULL, 'CUSTOMER','CHILDREN') as type, IF(ac.id IS NOT NULL, he.appointment_customer_id,he.children_id) as edit_patient_id, '0' as fees, DATE_FORMAT(he.admit_date,'%d, %M') as appointment_time, '0' as order_status, he.status, he.id  as appointment_id, df.id as folder_id, df.folder_name, IFNULL(ac.mobile,c.mobile) as mobile, IFNULL(ac.first_name,c.child_name) as name, '' as queue_number, '' as appointment_datetime from hospital_emergency as he left join appointment_customers as ac on ac.id = he.appointment_customer_id left join childrens as c on c.id = he.children_id LEFT JOIN drive_folders AS df ON df.id = ( IF(ac.id IS NOT NULL,(SELECT id FROM drive_folders WHERE appointment_customer_id = ac.id LIMIT 1),(SELECT id FROM drive_folders WHERE children_id = c.id LIMIT 1))) where he.status = 'ACTIVE' and he.appointment_staff_id = $doctor_id group by he.id";
                    }
                    if ($offset >= 0) {
                        $limit = 7;
                        $offset = $limit * $offset;
                        $limit = " limit $offset, $limit";
                        $query .= $limit;
                    }

                } else if ($list_for == "CHILD") {
                    // $connection->query("SET SESSION group_concat_max_len = 1000000");
                    $query = "select CONCAT('$patientHistoryUrl',TO_BASE64(c.thinapp_id),'/',TO_BASE64(c.uhid)) as history_url, '' as payment_status, 'NO' as is_skip, df.id as folder_id, df.total_attachment,  df.folder_name, ds.share_with_mobile as mobile, c.gender,c.dob, c.child_name as name, DATE_FORMAT(c.dob,'%d-%m-%Y') as dob, c.child_number as patient_number, c.id as patient_id from childrens as c join drive_folders as df on df.children_id = c.id right join drive_shares as ds on ds.drive_folder_id = df.id where c.thinapp_id = $thin_app_id and c.status = 'ACTIVE' order by c.child_name asc  ";

                }

                $data_list = $connection->query($query);
                if ($data_list->num_rows) {
                    $response['status'] = 1;
                    $response['message'] = "Folder list fond";
                    $folder_list = mysqli_fetch_all($data_list, MYSQLI_ASSOC);
                    foreach ($folder_list as $key => $value) {
                        if (empty($value['age']) && !empty($value['dob'])) {
                            $folder_list[$key]['age'] = Custom::get_age_from_dob($value['dob']);
                        }
                        $folder_list[$key]['queue_number'] = Custom::create_queue_number($value);
                        $folder_list[$key]['number_list'] = array();
                    }
                    if ($list_for == "APPOINTMENT") {
                        $response['data']['folder_list'] = $folder_list;

                    } else if ($list_for == "FOLDER") {
                        $tmp_array = array();
                        foreach ($folder_list as $key => $obj) {
                            $tmp_array[$key] = $obj;
                            if (!empty($obj['last_prescription'])) {
                                $img_array = array_reverse((explode(',', $obj['last_prescription'])));
                                $img_temp = array();
                                foreach ($img_array as $img_key => $img_value) {

                                    if ($img_key > 2) {
                                        break;
                                    } else {
                                        $data_array = explode("##", $img_value);
                                        $img_temp[$img_key]['file_id'] = @$data_array[0];
                                        $img_temp[$img_key]['file_path'] = @$data_array[1];
                                    }

                                }
                                $tmp_array[$key]['last_prescription'] = $img_temp;
                            } else {
                                $tmp_array[$key]['last_prescription'] = array();
                            }
                        }
                        $response['data']['folder_list'] = $tmp_array;
                    } else {
                        $tmp = array();
                        foreach ($folder_list as $img_key => $val) {
                            $tmp[$img_key] = $val;
                            $tmp[$img_key]['age'] = Custom::dob_elapsed_string($val['dob'], false, true);
                        }
                        $response['data']['folder_list'] = $tmp;

                    }


                } else {
                    $response['status'] = 0;
                    $response['message'] = "No list found";
                }

                $response['doctor_data'] = array();
                if ($send_doctor_data == "YES") {
                    $connection = ConnectionUtil::getConnection();
                    if ($main_app_category == "HOSPITAL") {
                        $condition = " app_staff.thinapp_id = $thin_app_id AND app_staff.status = 'ACTIVE' and app_staff.staff_type ='DOCTOR'";
                        if (!empty($doctor_id)) {
                            $condition .= " and app_staff.id=$doctor_id ";
                        } else {
                            $condition .= " and app_staff.mobile='$mobile' ";
                        }
                        $query = "select IF(app_staff.show_fees='YES' && app_ser.service_amount IS NOT NULL, app_ser.service_amount,'') as fees, app_staff.name, app_staff.mobile, app_staff.address, app_staff.profile_photo as profile_image, '' as working, ac.name as category, app_staff.sub_title as education, app_staff.registration_number from appointment_staffs as app_staff left join appointment_categories as ac on app_staff.appointment_category_id = ac.id left join appointment_staff_services as ass on ass.appointment_staff_id = app_staff.id left join appointment_services as app_ser on app_ser.id = ass.appointment_service_id where $condition";

                    } else {
                        $query = "select u.fees, u.username as name, u.mobile, u.address, u.image as profile_image, u.current_working as working, dc.category_name as category, u.education, u.registration_number from users as u left join department_categories as dc on u.department_category_id = dc.id where u.thinapp_id = $thin_app_id and u.role_id = 5 limit 1";
                    }


                    $service_message_list = $connection->query($query);
                    if ($service_message_list->num_rows) {
                        $response['doctor_data'] = mysqli_fetch_assoc($service_message_list);
                    }

                }

            }
            Custom::sendResponse($response);
        }
        exit();
    }

    public static function add_new_patient_folder()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $role_id = isset($data['role_id']) ? $data['role_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $patient_mobile = isset($data['patient_mobile']) ? Custom::create_mobile_number($data['patient_mobile']) : "";
            $patient_name = isset($data['patient_name']) ? $data['patient_name'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else if (empty($role_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid role';
            } else if (empty($patient_mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid patient mobile';
            } else if (empty($patient_name)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid patient name';
            } else {

                $patient_mobile = Custom::create_mobile_number($patient_mobile);
                $response['data']['folder_list'] = array();
                if ($patient_mobile) {

                    if (Custom::has_special_character($patient_name)) {
                        $response['status'] = 0;
                        $response['message'] = 'Please enter valid patient name';

                    } else {

                        $patient_id = 0;
                        $patient_data = Custom::get_customer_by_name($thin_app_id, $patient_name, $mobile);
                        if (!empty($patient_data)) {
                            $patient_id = $patient_data['id'];
                        }

                        $response = json_decode(Custom::create_and_share_folder($thin_app_id, $patient_mobile, $patient_name, 'CUSTOMER', $patient_id), true);
                        if ($response['status'] == 1) {
                            $response['message'] = "Folder add successfully";
                        }
                        $folder_list = Custom::get_default_and_child_folder($thin_app_id, $patient_mobile, $patient_name);
                        $response['data']['folder_list'] = ($folder_list) ? $folder_list : array();
                    }

                } else {
                    $response['status'] = 0;
                    $response['message'] = 'Please enter valid mobile number';
                }

            }
            Custom::sendResponse($response);
        }
        exit();
    }

    public static function get_prescription_tag_list()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $role_id = isset($data['role_id']) ? $data['role_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $request_for = isset($data['request_for']) ? $data['request_for'] : "PRESCRIPTION_TAG";
            $gender = isset($data['gender']) ? $data['gender'] : "MALE";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else if (empty($role_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid role';
            } else {

                if ($request_for == "PRESCRIPTION_TAG") {
                    $service_list = Custom::load_prescription_list($thin_app_id, $request_for);
                } else {
                    $service_list = Custom::load_prescription_list($thin_app_id, $request_for, $gender);
                }

                if ($service_list) {
                    $response['status'] = 1;
                    $response['message'] = "Tag list found";
                    $response['data']['tag_list'] = $service_list;
                } else {
                    $response['status'] = 0;
                    $response['message'] = "No tag found";
                }
            }
            Custom::sendResponse($response);
        }
        exit();
    }

    public static function update_prescription_layout()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $top = !empty($data['top']) ? $data['top'] : "";
            $bottom = !empty($data['bottom']) ? $data['bottom'] : "";
            $right = !empty($data['right']) ? $data['right'] : "";
            $left = !empty($data['left']) ? $data['left'] : "";
            $preview = !empty($data['preview']) ? $data['preview'] : "";
            $action_type = !empty($data['action_type']) ? $data['action_type'] : "";
            $prescription_id = !empty($data['prescription_id']) ? $data['prescription_id'] : "";
            $type = !empty($data['type']) ? $data['type'] : "LAYOUT";
            $template_type = !empty($data['template_type']) ? $data['template_type'] : "OPD";
            $old_layout = !empty($data['old_layout']) ? $data['old_layout'] : "YES";
            $template_name = !empty($data['template_name']) ? $data['template_name'] : "";
            $doctor_id = !empty($data['doctor_id']) ? $data['doctor_id'] : 0;

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else if (($type == 'LAYOUT' && $action_type == "EDIT" || $action_type == "ADD") && (empty($top) && empty($bottom) && empty($left) && empty($right))) {
                $response['status'] = 0;
                $response['message'] = 'Invalid layout';
            } else if ($type == 'LAYOUT' && !empty($top) && !Custom::check_image_path_string($top)) {
                $response['status'] = 0;
                $response['message'] = 'Top image not valid';
            } else if ($type == 'LAYOUT' && !empty($bottom) && !Custom::check_image_path_string($bottom)) {
                $response['status'] = 0;
                $response['message'] = 'Bottom image not valid';
            } else if ($type == 'LAYOUT' && !empty($right) && !Custom::check_image_path_string($right)) {
                $response['status'] = 0;
                $response['message'] = 'Right image not valid';
            } else if ($type == 'LAYOUT' && !empty($left) && !Custom::check_image_path_string($left)) {
                $response['status'] = 0;
                $response['message'] = 'Left image not valid';
            } else if (!empty($preview) && !Custom::check_image_path_string($preview)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid preview';
            } else if ($type == 'LAYOUT' && ($action_type == "EDIT" || $action_type == "DELETE") && empty($prescription_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid prescription id';
            } else {

                $connection = ConnectionUtil::getConnection();
                $created = Custom::created();
                if ($type == "LAYOUT") {

                    if (empty($doctor_id)) {
                        $doctor_data = Custom::get_doctor_by_mobile($mobile, $thin_app_id);
                        $doctor_id = !empty($doctor_data) ? $doctor_data['id'] : 0;
                    }

                    if ($action_type == "ADD" || $action_type == "EDIT" || $action_type == "DELETE") {

                        if ($action_type == "ADD") {

                            $sql = "INSERT INTO prescription_layouts (old_layout, template_name, template_type, thinapp_id, appointment_staff_id, top, bottom, `right`, `left`, preview, created, modified) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                            $stmt = $connection->prepare($sql);
                            $stmt->bind_param('ssssssssssss', $old_layout, $template_name, $template_type, $thin_app_id, $doctor_id, $top, $bottom, $right, $left, $preview, $created, $created);
                            if ($stmt->execute()) {
                                $response['status'] = 1;
                                $response['message'] = "Prescription add successfully";

                            } else {
                                $response['status'] = 0;
                                $response['message'] = "Sorry prescription could not add";
                            }

                        } else if ($action_type == "EDIT") {
                            //$prescription_data = Custom::get_prescription_layout_by_id($prescription_id);
                            $sql = "UPDATE prescription_layouts set template_name = ?, top =?, bottom = ?, `right` = ?, `left` =?, preview =?, modified =?  where id = ?";
                            $stmt = $connection->prepare($sql);
                            $stmt->bind_param('ssssssss', $template_name, $top, $bottom, $right, $left, $preview, $created, $prescription_id);
                            if ($stmt->execute()) {
                                $response['status'] = 1;
                                $response['message'] = "Prescription updated successfully";
                            } else {
                                $response['status'] = 0;
                                $response['message'] = "Sorry prescription could not update";
                            }
                        } else {
                            $status = "INACTIVE";
                            $sql = "UPDATE prescription_layouts set status=?, modified =?  where id = ?";
                            $stmt = $connection->prepare($sql);
                            $stmt->bind_param('sss', $status, $created, $prescription_id);
                            if ($stmt->execute()) {
                                $response['status'] = 1;
                                $response['message'] = "Prescription deleted successfully";
                            } else {
                                $response['status'] = 0;
                                $response['message'] = "Sorry prescription could not delete";
                            }

                        }

                    } else {
                        $prescription_layout_images = Custom::set_layout_array($top, $bottom, $left, $right);
                        $prescription_layout_images = serialize($prescription_layout_images);
                        $sql = "UPDATE thinapps set prescription_layout_images = ?, modified =?  where id = ?";
                        $stmt = $connection->prepare($sql);
                        $stmt->bind_param('sss', $prescription_layout_images, $created, $thin_app_id);
                        if ($stmt->execute()) {
                            WebservicesFunction::deleteJson(array('layout_' . $thin_app_id), 'prescription');
                            $response['status'] = 1;
                            $response['message'] = "Layout updated successfully";
                        } else {
                            $response['status'] = 0;
                            $response['message'] = "Sorry layout could not update";
                        }
                    }
                } else {

                    $sig_file = 'signature_' . $thin_app_id . "_$doctor_id";
                    $query = "select id from prescription_layouts where appointment_staff_id = $doctor_id and type = 'SIGNATURE' and status = 'ACTIVE'";
                    $connection = ConnectionUtil::getConnection();
                    $service_message_list = $connection->query($query);
                    if (!$service_message_list->num_rows) {
                        $sql = "INSERT INTO prescription_layouts (thinapp_id, appointment_staff_id,type, preview, created, modified) VALUES (?, ?, ?, ?, ?, ?)";
                        $stmt = $connection->prepare($sql);
                        $stmt->bind_param('ssssss', $thin_app_id, $doctor_id, $type, $preview, $created, $created);
                        if ($stmt->execute()) {
                            $response['status'] = 1;
                            $response['message'] = "Signature add successfully";
                            WebservicesFunction::deleteJson(array($sig_file), 'signature');
                        } else {
                            $response['status'] = 0;
                            $response['message'] = "Sorry prescription could not add";
                        }
                    } else {
                        $prescription_id = mysqli_fetch_assoc($service_message_list)['id'];
                        $sql = "UPDATE prescription_layouts set preview = ?, modified =?  where id = ?";
                        $stmt = $connection->prepare($sql);
                        $stmt->bind_param('sss', $preview, $created, $prescription_id);
                        if ($stmt->execute()) {

                            WebservicesFunction::deleteJson(array($sig_file), 'signature');
                            $response['status'] = 1;
                            $response['message'] = "Signature updated successfully";
                        } else {
                            $response['status'] = 0;
                            $response['message'] = "Sorry signature could not update";
                        }
                    }

                }


            }
            Custom::sendResponse($response);
        }
        exit();
    }

    public static function get_folder_prescription_list()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $folder_id = isset($data['folder_id']) ? $data['folder_id'] : "";
            $list_size = isset($data['list_size']) ? $data['list_size'] : 0;
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : 0;
            try {
                if (empty($thin_app_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid thinapp id';
                } else if (empty($app_key)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid app key';
                } else if (empty($user_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid user id';
                } else if (empty($mobile)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid mobile';
                } else if (empty($folder_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid folder id';
                } else {
                    $limit = "";
                    if (!empty($list_size)) {
                        $limit = " limit 0, $list_size";
                    }
                    $query = "select id as file_id, file_path,file_thumbnail, DATE_FORMAT(modified,'%d-%m-%Y') as date from drive_files where drive_folder_id = $folder_id and is_pad_prescription = 'YES' and file_path IS NOT NULL and doctor_id =$doctor_id order by modified desc $limit";
                    $connection = ConnectionUtil::getConnection();
                    $service_message_list = $connection->query($query);
                    if ($service_message_list->num_rows) {
                        $service_list = mysqli_fetch_all($service_message_list, MYSQL_ASSOC);
                        $response['status'] = 1;
                        $response['message'] = "Prescription found";
                        $response['data']['list'] = $service_list;
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "No prescription found";
                    }
                }
            } catch (Exception $e) {
                $response['status'] = 0;
                $response['message'] = "Something went wrong on server";
            }
            Custom::sendResponse($response);
        }
        exit();

    }

    public static function get_doctor_prescription_layout()
    {


        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : 0;
            $template_type = isset($data['template_type']) ? $data['template_type'] : 'OPD';
            $old_layout = isset($data['old_layout']) ? $data['old_layout'] : 'YES';
            try {
                if (empty($thin_app_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid thinapp id';
                } else if (empty($app_key)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid app key';
                } else if (empty($user_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid user id';
                } else if (empty($mobile)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid mobile';
                } else {

                    $query = "select id,template_name, top,bottom,`right`,`left`,preview from prescription_layouts where thinapp_id = $thin_app_id and appointment_staff_id = $doctor_id and type = 'LAYOUT' and old_layout = '$old_layout' and template_type = '$template_type' and status = 'ACTIVE'";

                    $connection = ConnectionUtil::getConnection();
                    $service_message_list = $connection->query($query);
                    if ($service_message_list->num_rows) {
                        $service_list = mysqli_fetch_all($service_message_list, MYSQL_ASSOC);
                        $response['status'] = 1;
                        $response['message'] = "Prescription found";
                        $response['data']['list'] = $service_list;
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "No prescription found";
                    }
                }
            } catch (Exception $e) {
                $response['status'] = 0;
                $response['message'] = "Something went wrong on server";
            }
            Custom::sendResponse($response);
        }
        exit();


    }

    public static function get_doctor_prescription_signature()
    {


        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : 0;
            try {
                if (empty($thin_app_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid thinapp id';
                } else if (empty($app_key)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid app key';
                } else if (empty($user_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid user id';
                } else if (empty($mobile)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid mobile';
                } else {

                    $query = "select id, preview as signature from prescription_layouts where thinapp_id = $thin_app_id and appointment_staff_id = $doctor_id and status = 'ACTIVE' and type = 'SIGNATURE' limit 1";

                    $connection = ConnectionUtil::getConnection();
                    $service_message_list = $connection->query($query);
                    if ($service_message_list->num_rows) {
                        $signature = mysqli_fetch_assoc($service_message_list);
                        $response['status'] = 1;
                        $response['message'] = "Signature found";
                        $response['data']['detail'] = $signature;
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "No signature found";
                    }
                }
            } catch (Exception $e) {
                $response['status'] = 0;
                $response['message'] = "Something went wrong on server";
            }
            Custom::sendResponse($response);
        }
        exit();


    }


    public static function get_doctor_profile()
    {


        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : "";
            try {
                if (empty($thin_app_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid thinapp id';
                } else if (empty($app_key)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid app key';
                } else if (empty($user_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid user id';
                } else if (empty($mobile)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid mobile';
                } else if (empty($doctor_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid doctor id';
                } else {

                    $query = "select app_staff.show_mobile, app_staff.name as name,app_staff.sub_title as education,app_staff.profile_photo,app_staff.mobile, app_staff.experience,app_staff.description,app_staff.address,IFNULL(ac.name,'N/A') as category_name from appointment_staffs as app_staff left join appointment_categories as ac on ac.id = app_staff.appointment_category_id where app_staff.id = $doctor_id";
                    $connection = ConnectionUtil::getConnection();
                    $service_message_list = $connection->query($query);
                    if ($service_message_list->num_rows) {
                        $profile = mysqli_fetch_assoc($service_message_list);
                        $response['status'] = 1;
                        $response['message'] = "Profile found";
                        $response['data']['profile'] = $profile;
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "No profile found";
                    }
                }
            } catch (Exception $e) {
                $response['status'] = 0;
                $response['message'] = "Something went wrong on server";
            }
            Custom::sendResponse($response);
        }
        exit();


    }

    public static function writing_save_prescription($data = null, $created_date = "")
    {

        $return = true;
        if (empty($data)) {
            $return = false;
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);
        }

        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $role_id = isset($data['role_id']) ? $data['role_id'] : "";
            $file_array = isset($data['file_array']) ? $data['file_array'] : "";
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : 0;
            $doctor_assigned_pen_id = isset($data['doctor_assigned_pen_id']) ? $data['doctor_assigned_pen_id'] : 0;
            $attachment_urls = isset($data['attachment_urls']) ? $data['attachment_urls'] : "";


            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else if (empty($file_array)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid file array';
            } else {
                $filter_array = $save_file_array = array();
                $send_notification = false;
                $created = !empty($created_date) ? $created_date : Custom::created();
                $connection = ConnectionUtil::getConnection();

                foreach ($file_array as $key => $file) {
                    $post = array();
                    $post['thin_app_id'] = $thin_app_id;
                    $post['user_id'] = $user_id;
                    $post['app_key'] = $app_key;
                    $post['mobile'] = $mobile;
                    $post['role_id'] = $role_id;
                    if (empty($file['file_id'])) {
                        $post['file_array'][0]['file_type'] = Custom::getFileType($file['file_name']);
                        $post['file_array'][0]['file_name'] = $file['file_name'];
                        $post['file_array'][0]['file_path'] = $file['file_path'];
                        $post['file_array'][0]['file_size'] = $file['file_size'];
                        $post['file_array'][0]['myscript_string'] = @$file['myscript_string'];
                        $post['file_array'][0]['myscript_instance_id'] = @$file['myscript_instance_id'];
                        $post['file_array'][0]['barcode'] = @$file['barcode'];
                        $post['file_array'][0]['raw_string'] = @$file['raw_string'];
                        $post['file_array'][0]['paper_unique_id'] = @$file['paper_unique_id'];
                        $post['file_array'][0]['appointment_id'] = @$file['appointment_id'];
                        $post['file_array'][0]['doctor_id'] = !empty($file['doctor_id']) ? $file['doctor_id'] : $doctor_id;
                        $post['file_array'][0]['doctor_assigned_pen_id'] = !empty($file['doctor_assigned_pen_id']) ? $file['doctor_assigned_pen_id'] : $doctor_assigned_pen_id;
                        $post['file_array'][0]['attachment_urls'] = !empty($file['attachment_urls']) ? $file['attachment_urls'] : $attachment_urls;
                        $post['file_array'][0]['time_stamp'] = !empty($file['time_stamp']) ? $file['time_stamp'] : '';
                        $file_type = $file['file_type'];

                        $post['listing_type'] = "OTHER";
                        $post['drive_folder_id'] = $file['drive_folder_id'];
                        $post['appointment_id'] = @$file['appointment_id'];
                        $post['created_date'] = $created_date;
                        $mode = isset($file['mode']) ? $file['mode'] : '';
                        $filter_array[$file['drive_folder_id']][] = array('file_name' => $file['file_name']);
                        if ($file_type == 'RECORDING') {
                            $post['category_id'] = 10;
                        } else {
                            $post['category_id'] = 6;
                            if ($mode == 'IPD') {
                                $post['category_id'] = 8;
                            } else if ($mode == 'EMERGENCY') {
                                $post['category_id'] = 9;
                            }
                            $post['is_pad_prescription'] = "YES";
                        }
                        $res = WebservicesFunction::add_file($post, true, true);
                        $res = json_decode($res, true);
                        if ($res['status'] == 1) {
                            $save_file_array[] = $res['data']['saved_file'][0]['file_id'];
                            $result[] = !empty($file['local_file_path']) ? $file['local_file_path'] : $file['file_path'];
                        } else {
                            $result[] = false;
                        }
                    } else {
                        if (!empty($file['myscript_string']) && !empty($file['myscript_instance_id'])) {
                            $sql = "UPDATE drive_files set drive_folder_id =?, myscript_string=?, myscript_instance_id =?, raw_string=?, file_name=?, file_size=?, file_path =?, modified =? where id =?";
                            $stmt = $connection->prepare($sql);
                            $stmt->bind_param('sssssssss', $file['drive_folder_id'], $file['myscript_string'], $file['myscript_instance_id'], $file['raw_string'], $file['file_name'], $file['file_size'], $file['file_path'], $created, $file['file_id']);

                            $sql = "update drive_folders set  modified = ? where id =?";
                            $stmt_count = $connection->prepare($sql);
                            $stmt_count->bind_param('ss', $created, $file['drive_folder_id']);

                        } else {
                            $sql = "UPDATE drive_files set raw_string=?, file_name=?, file_size=?, file_path =?, modified =? where id =?";
                            $stmt = $connection->prepare($sql);
                            $stmt->bind_param('ssssss', $file['raw_string'], $file['file_name'], $file['file_size'], $file['file_path'], $created, $file['file_id']);
                            $save_file_array[] = $file['file_id'];

                            $sql = "UPDATE drive_folders set  modified =? where id =?";
                            $stmt_count = $connection->prepare($sql);
                            $stmt_count->bind_param('ss', $created, $file['drive_folder_id']);
                        }

                        if ($stmt->execute()) {
                            $stmt_count->execute();
                            $result[] = !empty($file['local_file_path']) ? $file['local_file_path'] : $file['file_path'];
                        } else {
                            $result[] = false;
                        }
                    }
                }

                if (!in_array(false, $result) && !empty($result)) {
                    $response['status'] = 1;
                    $response['message'] = "Prescription upload successfully";
                    $response['success_files'] = $result;
                    $response['success_files_ids'] = $save_file_array;
                    $send_notification = true;
                } else {
                    $response['status'] = 0;
                    $response['message'] = "Sorry prescription could not upload";
                }

            }
            $notification = array(
                'send_notification' => $send_notification,
                'filter_array' => $filter_array,
                'filter_array' => $filter_array,
                'thin_app_id' => $thin_app_id,
                'mobile' => $mobile,
                'user_id' => $user_id
            );
            if ($return === true) {
                $response['notification'] = $notification;
                return json_encode($response);
            } else {
                Custom::sendResponse($response);
                Custom::send_process_to_background();
                $notification['doctor_only'] = false;
                Custom::send_save_prescription_notification($notification);
                $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : 0;
                if (!empty($save_file_array) && !empty($doctor_id)) {
                    /*foreach ($save_file_array as $key => $file_id) {
                        Custom::add_myscript_tag_with_file_id($thin_app_id, $user_id, $mobile, $doctor_id, $file_id);
                    }*/
                }

            }

        }
        exit();


    }




    /* CLIPBOARD API END HERE */

    /* MENGAGE APP API START*/

    public static function get_app_list_by_category()
    {


        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $category_name = isset($data['category_name']) ? $data['category_name'] : "ALL";
            $sub_category_name = isset($data['sub_category_name']) ? $data['sub_category_name'] : "";

            try {
                if (empty($thin_app_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid thinapp id';
                } else if (empty($app_key)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid app key';
                } else if (empty($user_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid user id';
                } else if (empty($mobile)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid mobile';
                } else {

                    if ($category_name == "ALL") {
                        $sub_cat_condition = "";
                        if (!empty($sub_category_name)) {
                            if (($sub_category_name == "TOP DOWNLOAD")) {
                                $sub_cat_condition = " having total_download > 0 order by total_download desc ";
                            } else if ($sub_category_name == "AVAILABLE") {
                                $sub_cat_condition = " having status = 'Available'";
                            } else if ($sub_category_name == "NEW DOCTOR") {
                                $sub_cat_condition = " and DATEDIFF(DATE(CURDATE()),t.created) <= 30";
                            } else if ($sub_category_name == "TOP FOLLOWER") {
                                $sub_cat_condition = " having total_follower > 0 order by total_follower desc ";
                            }
                        } else {
                            $sub_cat_condition = " order by total_download desc ";
                        }

                        $query = "select IF(aef.id IS NOT NULL,'YES','NO') AS smart_clinic, t.logo, IF((select id from mengage_app_follwoers where follow_thinapp_id = t.id and user_id = $user_id limit 1) IS NOT NULL,'YES', 'NO') as is_follower, IF((select id from appointment_staff_hours where thinapp_id = t.id and status = 'OPEN' limit 1) IS NOT NULL,'Available', 'Unavailable') as status, ( select count(id) as cnt from mengage_app_follwoers  where   follow_thinapp_id = t.id) as total_follower, dc.id as category_id, t.id as thin_app_id, t.name as app_name, t.package_name, t.apk_url, dc.category_name, (select count(id) from users where thinapp_id = t.id and role_id = 1) as total_download from thinapps as t join users as u on u.thinapp_id = t.id and u.role_id = 5 LEFT JOIN app_enable_functionalities AS aef ON aef.thinapp_id = t.id AND aef.app_functionality_type_id = 52 join department_categories as dc on ( ( dc.id IN( select hc.department_category_id from hospital_categories as hc where hc.thinapp_id = t.id and hc.status ='ACTIVE' )  ) OR ( dc.id = u.department_category_id )  ) WHERE t.category_name IN('DOCTOR','HOSPITAL') $sub_cat_condition";
                        
                        $connection = ConnectionUtil::getConnection();
                        $service_message_list = $connection->query($query);
                        if ($service_message_list->num_rows) {
                            $service_list = mysqli_fetch_all($service_message_list, MYSQL_ASSOC);
                            $data_array = $category_array = array();
                            $category_array['ALL']['category_id'] = 0;
                            $category_array['ALL']['category_name'] = 'ALL';

                            foreach ($service_list as $key => $value) {
                                if (@count($data_array[$value['category_name']]) < 10) {
                                    $category_array[$value['category_name']]['category_id'] = $value['category_id'];
                                    $category_array[$value['category_name']]['category_name'] = $value['category_name'];
                                    $data_array[$value['category_name']][] = $value;
                                }
                            }

                            // $data_array["ALL"]= $data_array;

                            $response['status'] = 1;
                            $response['message'] = "App list found";
                            $response['data']['category_list'] = array_values($category_array);
                            $response['data']['sub_category_list'] = Custom::get_app_sub_category_array();
                            $response['data']['list'] = $data_array;
                        } else {
                            $response['status'] = 0;
                            $response['message'] = "No app found";
                        }


                    } else {


                        $return_array = WebServicesFunction_2_3::mengage_get_app_common_data($category_name, $sub_category_name, $user_id);

                        if (!empty($return_array)) {
                            $response['status'] = 1;
                            $response['message'] = "App list found";
                            $response['data']['list'] = $return_array;
                        } else {
                            $response['status'] = 0;
                            $response['message'] = "No app found";
                        }
                    }

                }
            } catch (Exception $e) {
                $response['status'] = 0;
                $response['message'] = "Something went wrong on server";
            }
            Custom::sendResponse($response);
        }
        exit();


    }

    public static function mengage_get_app_common_data($category_name, $sub_category_name, $user_id)
    {
        $category_condition = ($category_name != 'ALL') ? " and dc.category_name = '$category_name' " : "";

        $select = " IF((select id from mengage_app_follwoers where follow_thinapp_id = t.id and user_id = $user_id limit 1) IS NOT NULL,'YES', 'NO') as is_follower, IF((select id from appointment_staff_hours where thinapp_id = t.id and status = 'OPEN' limit 1) IS NOT NULL,'Available', 'Unavailable') as status, t.logo, ( select count(id) as cnt from mengage_app_follwoers  where   follow_thinapp_id = t.id) as total_follower, dc.id as category_id, t.id as thin_app_id, t.name as app_name, t.package_name, t.apk_url, dc.category_name, (select count(id) from users where thinapp_id = t.id and role_id = 1) as total_download ";
        $join_tables = " thinapps as t join users as u on u.thinapp_id = t.id and u.role_id = 5 join department_categories as dc on ( ( dc.id IN( select hc.department_category_id from hospital_categories as hc where hc.thinapp_id = t.id and hc.status ='ACTIVE' )  ) OR ( dc.id = u.department_category_id )  ) $category_condition ";
        $sub_category_array = Custom::get_app_sub_category_array();;
        $connection = ConnectionUtil::getConnection();
        $return_array = array();
        $category_name = ($category_name == "ALL") ? "" : $category_name;
        foreach ($sub_category_array as $key => $cat) {

            if ((empty($sub_category_name) && $cat['category_name'] == "TOP DOWNLOAD") || (!empty($sub_category_name) && $sub_category_name == "TOP DOWNLOAD")) {
                $query = "select $select from $join_tables WHERE t.category_name = 'DOCTOR' having total_download >= 1 order by total_download desc";
                $service_message_list = $connection->query($query);
                $key_str = !empty($sub_category_name) ? $sub_category_name : $cat['category_name'];
                if ($service_message_list->num_rows) {
                    $return_array[$key_str] = mysqli_fetch_all($service_message_list, MYSQL_ASSOC);
                } else {
                    $return_array[$key_str] = array();
                }

            } else if ((empty($sub_category_name) && $cat['category_name'] == "AVAILABLE") || (!empty($sub_category_name) && $sub_category_name == "AVAILABLE")) {
                $query = "select $select from $join_tables join  appointment_staff_hours as ash on ash.thinapp_id = t.id and ash.status = 'OPEN' WHERE t.category_name IN('DOCTOR','HOSPITAL') group by t.id having status = 'Available'";
                $service_message_list = $connection->query($query);
                $key_str = !empty($sub_category_name) ? $sub_category_name : $cat['category_name'];
                if ($service_message_list->num_rows) {
                    $return_array[$key_str] = mysqli_fetch_all($service_message_list, MYSQL_ASSOC);
                } else {
                    $return_array[$key_str] = array();
                }
            } else if ((empty($sub_category_name) && $cat['category_name'] == "NEW DOCTOR") || (!empty($sub_category_name) && $sub_category_name == "NEW DOCTOR")) {
                $query = "select $select from $join_tables  WHERE t.category_name IN('DOCTOR','HOSPITAL') and DATEDIFF(DATE(CURDATE()),t.created) <= 15 order by t.created asc";
                $service_message_list = $connection->query($query);
                $key_str = !empty($sub_category_name) ? $sub_category_name : $cat['category_name'];
                if ($service_message_list->num_rows) {
                    $return_array[$key_str] = mysqli_fetch_all($service_message_list, MYSQL_ASSOC);
                } else {
                    $return_array[$key_str] = array();
                }
            } else if ((empty($sub_category_name) && $cat['category_name'] == "TOP FOLLOWER") || (!empty($sub_category_name) && $sub_category_name == "TOP FOLLOWER")) {
                $query = "select $select from $join_tables  WHERE t.category_name IN('DOCTOR','HOSPITAL') having total_follower > 0 order by total_follower desc";
                $service_message_list = $connection->query($query);
                $key_str = !empty($sub_category_name) ? $sub_category_name : $cat['category_name'];
                if ($service_message_list->num_rows) {

                    $return_array[$key_str] = mysqli_fetch_all($service_message_list, MYSQL_ASSOC);
                } else {
                    $return_array[$key_str] = array();
                }
            }
            if (!empty($sub_category_name)) {
                break;
            }
        }
        return $return_array;

    }


    public static function search_app_by_category()
    {


        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $category_name = isset($data['category_name']) ? $data['category_name'] : "ALL";
            $sub_category_name = isset($data['sub_category_name']) ? $data['sub_category_name'] : "";

            try {
                if (empty($thin_app_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid thinapp id';
                } else if (empty($app_key)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid app key';
                } else if (empty($user_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid user id';
                } else if (empty($mobile)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid mobile';
                } else if (empty($category_name)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid category name';
                } else {

                    $return_array = WebServicesFunction_2_3::mengage_get_app_common_data($category_name, $sub_category_name, $user_id);
                    if (!empty($return_array)) {
                        $response['status'] = 1;
                        $response['message'] = "App list found";
                        $response['data']['list'] = $return_array;
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "No app found";
                    }

                }
            } catch (Exception $e) {
                $response['status'] = 0;
                $response['message'] = "Something went wrong on server";
            }
            Custom::sendResponse($response);
        }
        exit();


    }


    public static function search_mengage_store_app()
    {


        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            /* request_type  = 'SEARCH', 'MORE' */
            $request_type = isset($data['request_type']) ? $data['request_type'] : "";
            $search = isset($data['search']) ? $data['search'] : 0;
            $category_name = isset($data['category_name']) ? $data['category_name'] : 'ALL';
            $sub_category_name = isset($data['sub_category_name']) ? $data['sub_category_name'] : 'ALL';

            try {
                if (empty($thin_app_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid thinapp id';
                } else if (empty($app_key)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid app key';
                } else if (empty($user_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid user id';
                } else if (empty($mobile)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid mobile';
                } else {
                    $condition = "";
                    if (!empty($search)) {
                        $condition = " and ( dc.category_name like '%$search%' OR t.name like '%$search%') ";
                    }
                    if ($category_name != "ALL") {
                        $condition .= " and dc.category_name = '$category_name' ";
                    }

                    if ($request_type == "MORE") {
                        if ($sub_category_name == "TOP DOWNLOAD") {
                            $condition .= " having total_download > 0 order by total_download desc ";
                        } else if ($sub_category_name == "TOP FOLLOWER") {
                            $condition .= " having total_follower > 0 order by total_follower desc ";
                        } else if ($sub_category_name == "AVAILABLE") {
                            $condition .= " having status ='Available' ";
                        } else if ($sub_category_name == "NEW DOCTOR") {
                            $condition .= " AND DATEDIFF(DATE(CURDATE()),t.created) <= 15 order by t.created asc ";
                        }
                    }
                    $query = "select IF(aef.id IS NOT NULL,'YES','NO') AS smart_clinic, t.logo, IF((select id from mengage_app_follwoers where follow_thinapp_id = t.id and user_id = $user_id limit 1) IS NOT NULL,'YES', 'NO') as is_follower, IF((select id from appointment_staff_hours where thinapp_id = t.id and status = 'OPEN' limit 1) IS NOT NULL,'Available', 'Unavailable') as status, ( select count(id) as cnt from mengage_app_follwoers  where   follow_thinapp_id = t.id) as total_follower, t.id as thin_app_id, t.name as app_name, t.package_name, t.apk_url, dc.category_name, (select count(id) from users where thinapp_id = t.id and role_id = 1) as total_download from thinapps as t join users as u on u.thinapp_id = t.id and u.role_id = 5 LEFT JOIN app_enable_functionalities AS aef ON aef.thinapp_id = t.id AND aef.app_functionality_type_id = 52 join department_categories as dc on ( ( dc.id IN( select hc.department_category_id from hospital_categories as hc where hc.thinapp_id = t.id and hc.status ='ACTIVE' )  ) OR ( dc.id = u.department_category_id )  ) WHERE t.category_name IN('DOCTOR','HOSPITAL') $condition";


                    $connection = ConnectionUtil::getConnection();
                    $service_message_list = $connection->query($query);
                    if ($service_message_list->num_rows) {
                        $service_list = mysqli_fetch_all($service_message_list, MYSQL_ASSOC);
                        $response['status'] = 1;
                        $response['message'] = "App list found";
                        $response['data']['list'] = $service_list;
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "No app found";
                    }
                }
            } catch (Exception $e) {
                $response['status'] = 0;
                $response['message'] = "Something went wrong on server";
            }
            Custom::sendResponse($response);
        }
        exit();


    }

    public static function get_app_detail()
    {


        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";

            try {
                if (empty($thin_app_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid thinapp id';
                } else if (empty($app_key)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid app key';
                } else if (empty($user_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid user id';
                } else if (empty($mobile)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid mobile';
                } else {

                    $query = "select t.logo, IFNULL(u.about_user,'') as about_user,  ( select count(id) as cnt from mengage_app_follwoers  where   follow_thinapp_id = t.id) as total_follower, t.id as thin_app_id, t.name as app_name, t.package_name, t.apk_url, dc.category_name, (select count(id) from users where thinapp_id = t.id and role_id = 1) as total_download from thinapps as t join users as u on u.thinapp_id = t.id and u.role_id = 5 join department_categories as dc on dc.id = u.department_category_id WHERE t.category_name IN('DOCTOR','HOSPITAL') and t.id = $thin_app_id";
                    $connection = ConnectionUtil::getConnection();
                    $service_message_list = $connection->query($query);
                    if ($service_message_list->num_rows) {
                        $service_list = mysqli_fetch_assoc($service_message_list);
                        $response['status'] = 1;
                        $response['message'] = "App list found";
                        $response['data']['detail'] = $service_list;

                    } else {
                        $response['status'] = 0;
                        $response['message'] = "No app found";
                    }
                }
            } catch (Exception $e) {
                $response['status'] = 0;
                $response['message'] = "Something went wrong on server";
            }
            Custom::sendResponse($response);
        }
        exit();


    }


    public static function menage_add_follower()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $follow_app_id = isset($data['follow_app_id']) ? $data['follow_app_id'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else if (empty($follow_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid follow app id';
            } else {

                $connection = ConnectionUtil::getConnection();
                $created = Custom::created();

                $query = "select id from mengage_app_follwoers where user_id = $user_id and follow_thinapp_id = $follow_app_id limit 1";
                $subscriber = $connection->query($query);
                if (!$subscriber->num_rows) {
                    $sql = "INSERT INTO mengage_app_follwoers (user_id, thinapp_id, follow_thinapp_id, created, modified) VALUES (?, ?, ?, ?, ?)";
                    $stmt = $connection->prepare($sql);
                    $stmt->bind_param('sssss', $user_id, $thin_app_id, $follow_app_id, $created, $created);
                    if ($stmt->execute()) {
                        $response['status'] = 1;
                        $response['message'] = "Follow successfully";
                        $response['data']['total_follower'] = Custom::get_follower_count($follow_app_id);
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Sorry app could not follow";
                    }

                } else {
                    $data = mysqli_fetch_assoc($subscriber);
                    $sql = "delete from mengage_app_follwoers where id = ?";
                    $stmt = $connection->prepare($sql);
                    $stmt->bind_param('s', $data['id']);
                    if ($stmt->execute()) {
                        $response['status'] = 1;
                        $response['message'] = "Unfollow successfully";
                        $response['data']['total_follower'] = Custom::get_follower_count($follow_app_id);
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Sorry app could not unfollow";
                    }
                }


            }
            Custom::sendResponse($response);
        }
        exit();


    }

    public static function mengage_followed_app_list()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $role_id = isset($data['role_id']) ? $data['role_id'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter mobile';
            } else {

                $response = $response_data = array();
                $connection = ConnectionUtil::getConnection();
                $query = "select t.logo, t.id as thin_app_id, t.name, c.id as channel_id, DATE_FORMAT(maf.created,'%d %M, %Y') as follow_date from mengage_app_follwoers as maf join users as u on u.id = maf.user_id join thinapps as t on t.id = maf.follow_thinapp_id join channels as c on c.app_id = maf.follow_thinapp_id and c.channel_status = 'DEFAULT' where maf.user_id = $user_id group by t.id";
                $subscriber = $connection->query($query);
                if ($subscriber->num_rows) {
                    $app_list = mysqli_fetch_all($subscriber, MYSQLI_ASSOC);
                    $response['data']['app_list'] = $app_list;
                    $response['status'] = 1;
                    $response['message'] = "App list found";
                } else {
                    $response['status'] = 0;
                    $response['message'] = "No app list found";
                }
            }
            echo json_encode($response);

        }
        exit();
    }

    /* MENGAGE APP API END*/


    /* TAB API START HERE */
    public static function tab_get_general_info($data = null)
    {

        $return = true;
        if (empty($data)) {
            $return = false;
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);

        }


        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $patient_id = isset($data['patient_id']) ? $data['patient_id'] : "";
            $patient_type = isset($data['patient_type']) ? $data['patient_type'] : "";
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : 0;

            try {
                if (empty($thin_app_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid thinapp id';
                } else if (empty($app_key)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid app key';
                } else if (empty($user_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid user id';
                } else if (empty($mobile)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid mobile';
                } else if (empty($patient_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid patient id';
                } else if ($patient_type != "CHILDREN" && $patient_type != "CUSTOMER") {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid patient type';
                } else {

                    if (empty($doctor_id)) {
                        $doctor_id = WebservicesFunction::get_staff_id_by_mobile($mobile, $thin_app_id);
                    }
                    $graph_url = SITE_PATH . 'chart/child_graph.php?t=' . $thin_app_id . '&&c=';
                    $invoice_url = SITE_PATH . 'invoice/patient/index.php?t=' . $thin_app_id . '&&di=' . $doctor_id . '&&pi=';
                    $medical_certificate_url = SITE_PATH . 'medical_certificate/medical_certificate.php?patient_type=' . $patient_type . '&user_id=' . $user_id . '&thinapp_id=' . $thin_app_id . '&patient_id=';
                    $patientHistoryUrl = SITE_PATH . 'tracker/get_patient_history/';
                    if ($patient_type == "CHILDREN") {
                        $query = "select  tpp.prescription_html, c.id as patient_id, 'CHILDREN' as patient_type, '' as age, CONCAT('$patientHistoryUrl',TO_BASE64(c.thinapp_id),'/',TO_BASE64(c.uhid)) as history_url, CONCAT('$invoice_url',c.id,'&&ty=CH','&&fi=',df.id) as invoice_url, CONCAT('$medical_certificate_url',c.id,'&folder_id=',df.id) as medical_certificate_url, CONCAT('$graph_url',c.id,'&&cat=') as graph_url, c.child_name as name, IF(DATE_FORMAT(c.dob,'%d-%m-%Y') ='00-00-0000','',DATE_FORMAT(c.dob,'%d-%m-%Y')) as dob, c.address, c.medical_history, c.mobile, c.parents_mobile, c.image, c.gender, df.id as folder_id, (select file_path from drive_files where drive_folder_id = df.id and is_tab_prescription = 'YES' order by id desc limit 1) as last_prescription from childrens as c left join drive_folders as df on c.id = df.children_id LEFT JOIN tab_patient_prescriptions tpp ON tpp.drive_file_id = (select id from drive_files where drive_folder_id = df.id and is_tab_prescription = 'YES' order by id desc limit 1) where c.id = $patient_id ";
                    } else {
                        $query = "select tpp.prescription_html, ac.id as patient_id, 'CUSTOMER' as patient_type, ac.age, CONCAT('$patientHistoryUrl',TO_BASE64(ac.thinapp_id),'/',TO_BASE64(ac.uhid)) as history_url, CONCAT('$invoice_url',ac.id,'&&ty=CU','&&fi=',df.id) as invoice_url, CONCAT('$medical_certificate_url',ac.id,'&folder_id=',df.id) as medical_certificate_url, '' as graph_url, ac.first_name as name, IF(DATE_FORMAT(ac.dob,'%d-%m-%Y') ='00-00-0000','',DATE_FORMAT(ac.dob,'%d-%m-%Y')) as dob , ac.address, ac.medical_history, ac.mobile, ac.parents_mobile, ac.profile_photo as image, ac.gender, df.id as folder_id, (select file_path from drive_files where drive_folder_id = df.id and is_tab_prescription = 'YES' order by id desc limit 1) as last_prescription  from appointment_customers as ac left join drive_folders as df on df.appointment_customer_id = ac.id LEFT JOIN tab_patient_prescriptions tpp ON tpp.drive_file_id = (select id from drive_files where drive_folder_id = df.id and is_tab_prescription = 'YES' order by id desc limit 1) where ac.id = $patient_id ";
                    }
                    $connection = ConnectionUtil::getConnection();
                    $service_message_list = $connection->query($query);
                    if ($service_message_list->num_rows) {
                        $service_list = mysqli_fetch_assoc($service_message_list);
                        $response['status'] = 1;
                        $response['message'] = "Patient found";
                        $response['data']['general_info'] = $service_list;
                        $response['data']['general_info']['prescription_html'] = !empty($service_list['prescription_html'])?base64_encode($service_list['prescription_html']):'';

                        if (empty($service_list['folder_id'])) {

                            $folder_id = Custom::get_patient_folder_id($thin_app_id, $patient_id, $patient_type);
                            $response['data']['general_info']['folder_id'] = !empty($folder_id) ? $folder_id : 0;
                            if (empty($folder_id) && $patient_type = "CUSTOMER") {
                                $patient_mobile = $service_list['mobile'];
                                $patient_name = $service_list['name'];
                                $result = json_decode(Custom::create_and_share_folder($thin_app_id, $patient_mobile, $patient_name, 'CUSTOMER', $patient_id), true);
                                if ($result['status'] == 1) {
                                    $response['data']['general_info']['folder_id'] = $result['folder_id'];
                                }
                            }
                        }

                        if (!empty($service_list['age'])) {
                            $response['data']['general_info']['age'] = $service_list['age'];
                        } else {
                            if (!empty($service_list['dob'])) {
                                $age_array = Custom::dob_elapsed_string($service_list['dob'], false, false);
                                $response['data']['general_info']['age'] = $age_array['year'] . "Y " . $age_array['month'] . "M";
                            } else {
                                $response['data']['general_info']['age'] = "N/A";
                            }

                        }

                        $response['data']['vitals'] = Custom::pad_get_patient_vitals($thin_app_id, $patient_id, $patient_type);
                        $reminder_array = Custom::pad_get_patient_reminder_list($thin_app_id, $patient_id, $patient_type);
                        $response['data']['reminders'] = empty($reminder_array) ? array() : $reminder_array;

                    } else {
                        $response['status'] = 0;
                        $response['message'] = "No patient found";
                    }
                }
            } catch (Exception $e) {
                $response['status'] = 0;
                $response['message'] = "Something went wrong on server";
            }
            if ($return === true) {
                return json_encode($response);
            } else {
                Custom::sendResponse($response);
            }

        }
        exit();


    }

    public static function tab_get_children_list($data = null)
    {


        $return = true;
        if (empty($data)) {
            $return = false;
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);
        }
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $request_for = isset($data['request_for']) ? $data['request_for'] : "";
            $send_app_data = isset($data['send_app_data']) ? $data['send_app_data'] : "NO";
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : 0;
            $address_id = isset($data['address_id']) ? $data['address_id'] : 0;
            $service_id = isset($data['service_id']) ? $data['service_id'] : 0;
            $single_id = isset($data['single_id']) ? $data['single_id'] : 0;
            $search = isset($data['search']) ? $data['search'] : 0;
            $date = isset($data['date']) ? $data['date'] : "";
            $offset = isset($data['offset']) ? $data['offset'] : "-1";
            $tab_synchronize_data = isset($data['tab_synchronize_data']) ? $data['tab_synchronize_data'] : false;


            try {
                if (empty($thin_app_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid thinapp id';
                } else if (empty($app_key)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid app key';
                } else if (empty($user_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid user id';
                } else if (empty($mobile)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid mobile';
                } else if ($request_for != "CHILDREN" && $request_for != "APPOINTMENT" && $request_for != "MEDICAL_RECORD" && $request_for != "CUSTOMER") {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid request type';
                } else {

                    $connection = ConnectionUtil::getConnection();
                    $order_by = $condition = "";
                    $graph_url = SITE_PATH . 'chart/child_graph.php?t=' . $thin_app_id . '&&c=';
                    $invoice_url = SITE_PATH . 'invoice/patient/index.php?t=' . $thin_app_id . '&&di=' . $doctor_id . '&&pi=';
                    $patientHistoryUrl = SITE_PATH . 'tracker/get_patient_history/';
                    $customer_url = $children_url = "";
                    if ($request_for == "CHILDREN") {
                        $medical_certificate_url = SITE_PATH . 'medical_certificate/medical_certificate.php?patient_type=CHILDREN&user_id=' . $user_id . '&thinapp_id=' . $thin_app_id . '&patient_id=';
                        $children_url = "CONCAT('$patientHistoryUrl',TO_BASE64(c.thinapp_id),'/',TO_BASE64(c.uhid)) as history_url, CONCAT('$invoice_url',c.id,'&&ty=CH','&&fi=',df.id) as invoice_url, CONCAT('$medical_certificate_url',c.id,'&folder_id=',df.id) as medical_certificate_url, CONCAT('$graph_url',c.id,'&&cat=') as graph_url, ";
                    } else if ($request_for == "CUSTOMER") {
                        $medical_certificate_url = SITE_PATH . 'medical_certificate/medical_certificate.php?patient_type=CUSTOMER&user_id=' . $user_id . '&thinapp_id=' . $thin_app_id . '&patient_id=';
                        $customer_url = " CONCAT('$patientHistoryUrl',TO_BASE64(ac.thinapp_id),'/',TO_BASE64(ac.uhid)) as history_url, CONCAT('$invoice_url',ac.id,'&&ty=CU','&&fi=',df.id) as invoice_url, CONCAT('$medical_certificate_url',ac.id,'&folder_id=',df.id) as medical_certificate_url, '' as graph_url, ";
                    }

                    if ($request_for == "CHILDREN") {
                        $order_by = " order by c.id desc ";
                        if (!empty($single_id)) {
                            $condition = " and c.id = $single_id ";
                        }
                        if($tab_synchronize_data===true){
                            $query = "select  IFNULL(df.id,0) AS folder_id, c.id as patient_id, CONCAT(c.mobile, IF(c.parents_mobile != '',', ',''), c.parents_mobile) as mobile, IF(DATE_FORMAT(c.dob,'%d-%m-%Y')='00-00-0000','N/A', DATE_FORMAT(c.dob,'%d-%m-%Y')) as dob, c.child_name as patient_name from childrens as c left join drive_folders as df on df.children_id = c.id  where c.thinapp_id = $thin_app_id and c.status = 'ACTIVE' $condition ";
                        }else{
                            $query = "select c.created, c.modified, $children_url '' as age, c.medical_history, c.uhid, c.address, c.parents_mobile, c.height, c.weight, c.head_circumference, c.bp_systolic, c.bp_diasystolic, c.bmi, c.bmi_status, c.temperature, c.o_saturation,  IFNULL(df.id,0) AS folder_id, '' as appointment_status, 'NO' as is_paid, 'NO' AS is_skip, '0' as appointment_id, 'CHILDREN' as user_type, c.id as patient_id, c.child_number as label, CONCAT(c.mobile, IF(c.parents_mobile != '',', ',''), c.parents_mobile) as mobile, IF(DATE_FORMAT(c.dob,'%d-%m-%Y')='00-00-0000','N/A', DATE_FORMAT(c.dob,'%d-%m-%Y')) as dob, c.child_name as patient_name, image as patient_image  from childrens as c left join drive_folders as df on df.children_id = c.id  where c.thinapp_id = $thin_app_id and c.status = 'ACTIVE' $condition ";
                        }

                    } else if ($request_for == "APPOINTMENT") {

                        if (!empty($single_id)) {
                            $condition = " and acss.id = $single_id ";
                        }else{
                            $condition = "and DATE(acss.appointment_datetime) = DATE(NOW())";
                            if (!empty($date)) {
                                $condition = "and DATE(acss.appointment_datetime) = '$date'";
                            }
                            if (!empty($single_id)) {
                                $condition .= " and acss.id = $single_id ";
                            }

                            $condition .= !empty($doctor_id) ? " and acss.appointment_staff_id =$doctor_id " : "";
                            $condition .= !empty($address_id) ? " and acss.appointment_address_id =$address_id " : "";
                            $condition .= !empty($service_id) ? " and acss.appointment_service_id =$service_id " : "";

                            $order_by = " order by acss.appointment_datetime asc ";
                        }

                        $query = "select acss.status, acss.payment_status, acss.appointment_datetime, acss.has_token, acss.queue_number, IFNULL(df.id,0) AS folder_id, if(acss.status ='CLOSED','CLOSED','NEW') as appointment_status, if(acss.payment_status ='SUCCESS','YES','NO') as is_paid, acss.skip_tracker AS is_skip, acss.id as appointment_id, if(ac.id IS NULL, 'CHILDREN','CUSTOMER') as user_type, IFNULL(ac.id,c.id) as patient_id, CONCAT_WS('##',acss.queue_number,if(acss.slot_time != '',acss.slot_time,'N/A')) as label, CONCAT(IFNULL(ac.mobile,c.mobile), if(IFNULL(ac.parents_mobile, c.parents_mobile) !='',', ',''),IFNULL(ac.parents_mobile, c.parents_mobile)) as mobile,  IFNULL(IF(DATE_FORMAT(IFNULL(ac.dob,c.dob),'%d-%m-%Y')='00-00-0000','N/A', DATE_FORMAT(IFNULL(ac.dob,c.dob),'%d-%m-%Y')),'N/A')  as dob, IFNULL(ac.first_name,c.child_name) as patient_name, IFNULL(ac.profile_photo,c.image) as patient_image, IFNULL(ac.gender,c.gender) as gender from appointment_customer_staff_services as acss left join appointment_customers as ac on ac.id= acss.appointment_customer_id left join childrens as c on c.id = acss.children_id left join drive_folders as df on df.id = acss.drive_folder_id where acss.thinapp_id = $thin_app_id AND acss.status NOT IN ('REFUND') and delete_status !='DELETED' $condition ";
                    } else if ($request_for == "MEDICAL_RECORD") {
                        $order_by = " order by df.modified desc ";
                        if (!empty($single_id)) {
                            $condition = " and df.id = $single_id ";
                        }
                        $query = "select  IFNULL(df.id,0) AS folder_id, '' as appointment_status, 'NO' as is_paid, 'NO' AS is_skip, '0' as appointment_id, if(ac.id IS NULL, 'CHILDREN','CUSTOMER') as user_type, IFNULL(c.id,ac.id) as patient_id, IFNULL(ac.uhid, c.uhid)as label, CONCAT(IFNULL(ac.mobile,c.mobile), if(IFNULL(ac.parents_mobile, c.parents_mobile) !='',', ',''), IFNULL(ac.parents_mobile, c.parents_mobile)) as mobile , IF(DATE_FORMAT(IFNULL(ac.dob,c.dob),'%d-%m-%Y')='00-00-0000','N/A', DATE_FORMAT(IFNULL(ac.dob,c.dob),'%d-%m-%Y')) as dob, IFNULL(ac.first_name,c.child_name) as patient_name, IFNULL(ac.profile_photo,c.image) as patient_image from drive_folders as df left join childrens as c on c.id = df.children_id  left join appointment_customers as ac on ac.id = df.appointment_customer_id where df.thinapp_id = $thin_app_id AND df.status = 'ACTIVE' $condition";

                    } else if ($request_for == "CUSTOMER") {
                        $order_by = " order by ac.id desc ";
                        if (!empty($single_id)) {
                            $condition = " and ac.id = $single_id ";
                        }
                        if($tab_synchronize_data===true){
                            $query = "select IFNULL(df.id,0) AS folder_id, ac.id as patient_id, CONCAT(ac.mobile, IF(ac.parents_mobile!='',', ',''), ac.parents_mobile) as mobile, IF(DATE_FORMAT(ac.dob,'%d-%m-%Y')='00-00-0000','N/A', DATE_FORMAT(ac.dob,'%d-%m-%Y')) as dob, ac.first_name as patient_name from appointment_customers as ac  left join drive_folders as df on df.appointment_customer_id = ac.id where ac.thinapp_id = $thin_app_id and ac.status = 'ACTIVE' $condition";
                        }else{
                            $query = "select ac.created, ac.modified,  $customer_url ac.age, ac.medical_history, ac.uhid, ac.address, ac.parents_mobile, ac.height, ac.weight, ac.head_circumference, ac.bp_systolic, ac.bp_diasystolic, ac.bmi, ac.bmi_status, ac.temperature, ac.o_saturation, IFNULL(df.id,0) AS folder_id, '' as appointment_status, 'NO' as is_paid, 'NO' AS is_skip, '0' as appointment_id, 'CUSTOMER' as user_type, ac.id as patient_id, '' as label, CONCAT(ac.mobile, IF(ac.parents_mobile!='',', ',''), ac.parents_mobile) as mobile, IF(DATE_FORMAT(ac.dob,'%d-%m-%Y')='00-00-0000','N/A', DATE_FORMAT(ac.dob,'%d-%m-%Y')) as dob, ac.first_name as patient_name, ac.profile_photo as patient_image, ac.gender  from appointment_customers as ac  left join drive_folders as df on df.appointment_customer_id = ac.id where ac.thinapp_id = $thin_app_id and ac.status = 'ACTIVE' $condition";
                        }
                    }
                    if (!empty($search)) {
                        $search = " having patient_name like '%$search%' OR mobile like '%$search%' ";
                        $query .= $search;
                    }


                    if ($offset != '-1') {
                        $limit = PAGINATION_LIMIT;
                        $offset = $offset * $limit;
                        $query .= $order_by . " limit $offset, $limit";
                    } else {
                        $query .= $order_by;
                    }
                    $subscriber = $connection->query($query);

                    /*********************************UPDATED BY VISHWAJEET START*******************/
                    $statsUrl = array();
                    $statsUrl['appointment'] = SITE_PATH . 'chart/appointment_stats_graph.php?p=' . $thin_app_id;
                    $statsUrl['medical_record'] = SITE_PATH . 'chart/medical_record_stats_graph.php?p=' . $thin_app_id;
                    $statsUrl['app_download'] = SITE_PATH . 'chart/app_download_stats_graph.php?p=' . $thin_app_id;
                    $statsUrl['sms'] = SITE_PATH . 'chart/sms_stats_graph.php?p=' . $thin_app_id;
                    $statsUrl['refer_doc'] = SITE_PATH . 'chart/refer_doc_stats_graph.php?p=' . $thin_app_id;
                    $statsUrl['blog'] = SITE_PATH . 'chart/blog_stats_graph.php?p=' . $thin_app_id;
                    $response['stats_url'] = $statsUrl;
                    /*********************************UPDATED BY VISHWAJEET END*******************/

                    if ($subscriber->num_rows) {
                        $child_list = mysqli_fetch_all($subscriber, MYSQLI_ASSOC);
                        $response['status'] = 1;
                        $response['message'] = " list found";
                        $response['data']['list'] = $child_list;
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "No list found";
                    }
                    $response['data']['app_data'] = array();
                    if ($send_app_data == "YES") {
                        $connection = ConnectionUtil::getConnection();
                        $query = "select aa.contact_number as mobile, aa.address, IF(app_sta.show_fees='YES' && app_ser.service_amount IS NOT NULL, app_ser.service_amount,'') as fees,  app_sta.name, app_sta.address, app_sta.profile_photo as profile_image, '' as working, app_cat.name as category, app_sta.sub_title as education, app_sta.registration_number from appointment_staffs  as app_sta left join appointment_categories as app_cat  on app_sta.appointment_category_id = app_cat.id left join appointment_staff_services as ass on ass.appointment_staff_id = app_sta.id left join appointment_services as app_ser on app_ser.id = ass.appointment_service_id left join appointment_addresses as aa on aa.id = (SELECT appointment_address_id FROM appointment_staff_addresses as asa WHERE aa.thinapp_id = asa.thinapp_id and  asa.appointment_staff_id = $doctor_id limit 1)   where app_sta.id =$doctor_id";
                        //$query = "select u.username as name, u.mobile, u.address, u.image as profile_image, u.current_working as working, dc.category_name as category, u.education, u.registration_number from users as u left join department_categories as dc on u.department_category_id = dc.id where u.thinapp_id = $thin_app_id and u.role_id = 5 limit 1";
                        $service_message_list = $connection->query($query);
                        if ($service_message_list->num_rows) {
                            $response['app_data'] = mysqli_fetch_assoc($service_message_list);
                        }
                    }

                }
            } catch (Exception $e) {
                $response['status'] = 0;
                $response['message'] = "Something went wrong on server";
            }

            if ($return === true) {
                return json_encode($response);
            } else {
                Custom::sendResponse($response);
            }

        }
        exit();


    }

    public static function tab_update_general_info($data = null)
    {

        $return_type = true;
        if (empty($data)) {
            $return_type = false;
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);
        }
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $medical_history = isset($data['medical_history']) ? $data['medical_history'] : "";
            $address = isset($data['address']) ? $data['address'] : "";
            $patient_mobile = isset($data['patient_mobile']) ? $data['patient_mobile'] : "";
            $patient_name = isset($data['patient_name']) ? $data['patient_name'] : "";
            $patient_age = isset($data['patient_age']) ? $data['patient_age'] : "";
            $other_mobile = isset($data['other_mobile']) ? $data['other_mobile'] : "";
            $patient_type = isset($data['patient_type']) ? $data['patient_type'] : "";
            $patient_id = isset($data['patient_id']) ? $data['patient_id'] : "";
            $dob = isset($data['dob']) ? $data['dob'] : "";
            $gender = isset($data['gender']) ? $data['gender'] : "";
            $update_from = isset($data['update_from']) ? $data['update_from'] : "APP";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else if (empty($patient_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid patient id';
            } else if (empty($patient_mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid patient mobile';
            } else if ($patient_type != "CHILDREN" && $patient_type != "CUSTOMER") {
                $response['status'] = 0;
                $response['message'] = 'Invalid patient type';
            } else if ($gender != "MALE" && $gender != "FEMALE") {
                $response['status'] = 0;
                $response['message'] = 'Invalid gender';
            } else {

                $connection = ConnectionUtil::getConnection();
                $result = array();

                if ($patient_type == "CHILDREN") {
                    $child_data = Custom::get_child_by_id($patient_id);
                    if (!empty($child_data)) {
                        $admin_data = Custom::get_thinapp_admin_data($thin_app_id);
                        $post['thin_app_id'] = $thin_app_id;
                        $post['app_key'] = APP_KEY;
                        $post['user_id'] = $admin_data['id'];
                        $post['mobile'] = $patient_mobile;
                        $post['parents_mobile'] = $other_mobile;
                        $post['child_id'] = $patient_id;
                        $post['image'] = $child_data['image'];
                        if ($update_from == "APP") {
                            $post['child_name'] = $child_data['child_name'];
                            $post['gender'] = $child_data['gender'];
                        } else {
                            $post['child_name'] = $patient_name;
                            $post['gender'] = $gender;
                        }
                        $post['dob'] = $dob;
                        $post['gender'] = $child_data['gender'];
                        $post['patient_address'] = $address;
                        $post['medical_history'] = $medical_history;
                        $post['patient_profession'] = $child_data['patient_profession'];
                        $post['parents_name'] = $child_data['parents_name'];
                        $post['birth_weight'] = $child_data['birth_weight'];
                        $post['birth_height'] = $child_data['birth_height'];
                        $post['birth_head_circumference'] = $child_data['birth_head_circumference'];
                        $post['special_remark'] = $child_data['special_remark'];
                        $post['blood_group'] = $child_data['blood_group'];
                        $result = WebservicesFunction::edit_child($post, true);
                        $result = json_decode($result, true);
                        if ($result['status'] == 1) {
                            $response['status'] = 1;
                            $response['message'] = "Info updated successfully";
                        } else {
                            $response['status'] = 0;
                            $response['message'] = $result['message'];
                        }
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Patient not found";
                    }

                } else {
                    $customer_data = Custom::get_customer_data($patient_id, $thin_app_id);
                    if (!empty($customer_data)) {
                        $search = Custom::search_customer_name($customer_data['thinapp_id'], $customer_data['mobile'], $patient_name);
                        if (empty($search) || @$search['id'] = $patient_id) {
                            if ($update_from == "APP") {
                                $patient_name = $customer_data['first_name'];
                                $patient_age = $customer_data['age'];
                            }
                            $sql = "update appointment_customers set first_name =?, age =?, gender = ?, parents_mobile=?, address=?, medical_history=?, dob=?  where id = ?";
                            $stmt = $connection->prepare($sql);
                            $dob = !empty($dob) ? date('Y-m-d', strtotime($dob)) : '';
                            $stmt->bind_param('ssssssss', $patient_name, $patient_age, $gender, $other_mobile, $address, $medical_history, $dob, $patient_id);
                            if ($stmt->execute()) {
                                $response['status'] = 1;
                                $response['message'] = "Info updated successfully";
                            } else {
                                $response['status'] = 0;
                                $response['message'] = "Sorry could not update.";
                            }
                        } else {
                            $response['status'] = 0;
                            $response['message'] = "Patient with this name already exist.";
                        }

                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Patient not found";
                    }
                }
            }
            if ($return_type === false) {
                Custom::sendResponse($response);
            } else {
                return json_encode($response);
            }
        }
        exit();


    }

    public static function tab_update_vital_info($data = null)
    {

        $return = true;
        if (empty($data)) {
            $return = false;
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);
        }

        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $patient_type = isset($data['patient_type']) ? $data['patient_type'] : "";
            $patient_id = isset($data['patient_id']) ? $data['patient_id'] : "";
            $vital_array = isset($data['vital_array']) ? $data['vital_array'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else if (empty($patient_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid patient id';
            } else if ($patient_type != "CHILDREN" && $patient_type != "CUSTOMER") {
                $response['status'] = 0;
                $response['message'] = 'Invalid patient type';
            } else if (empty($vital_array)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid vital array';
            } else {

                $vital_array = json_decode($vital_array, true)['vital_array'];
                if (array_key_exists('vital_id', $vital_array[0]) && array_key_exists('value', $vital_array[0])) {
                    $connection = ConnectionUtil::getConnection();
                    $connection->autocommit(false);
                    $total_result = array();
                    $created = Custom::created();
                    foreach ($vital_array as $key => $value) {

                        $master_data = Custom::get_patient_master_vital_by_id($thin_app_id, $patient_id, $patient_type, $value['vital_id']);
                        if (empty($master_data)) {
                            $sql = "INSERT INTO tab_patient_vitals (thinapp_id, tab_master_vital_id, patient_id, patient_type, `value`, created, modified) VALUES (?, ?, ?, ?, ?, ?, ?)";
                            $stmt = $connection->prepare($sql);
                            $stmt->bind_param('sssssss', $thin_app_id, $value['vital_id'], $patient_id, $patient_type, $value['value'], $created, $created);
                            $total_result[] = $stmt->execute();
                        } else {
                            $query = "update tab_patient_vitals set value =?,  modified =? where id = ?";
                            $stmt = $connection->prepare($query);
                            $stmt->bind_param('sss', $value['value'], $created, $master_data['tab_patient_vital_id']);
                            $total_result[] = $stmt->execute();
                        }

                    }
                    if (!in_array(false, $total_result)) {
                        $connection->commit();
                        $response['status'] = 1;
                        $response['message'] = "Vitals updated successfully";
                    } else {
                        $response['status'] = 1;
                        $response['message'] = "Sorry vitals could not update";
                    }
                } else {
                    $response['status'] = 1;
                    $response['message'] = "Invalid vitals array";
                }
            }
            if ($return === true) {
                return json_encode($response);
            } else {
                Custom::sendResponse($response);
            }

        }
        exit();


    }

    public static function tab_manage_reminder($data = null)
    {
        $return = true;
        if (empty($data)) {
            $return = false;
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);
        }

        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $patient_type = isset($data['patient_type']) ? $data['patient_type'] : "";
            $patient_id = isset($data['patient_id']) ? $data['patient_id'] : "";
            $action_type = isset($data['action_type']) ? $data['action_type'] : "";
            $message = isset($data['message']) ? $data['message'] : "";
            $reminder_date = isset($data['reminder_date']) ? $data['reminder_date'] : "";
            $reminder_id = isset($data['reminder_id']) ? $data['reminder_id'] : "";
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : 0;
            $created = isset($data['created']) ? $data['created'] : "";
            $modified = isset($data['modified']) ? $data['modified'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else if (empty($patient_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid patient id';
            } else if ($patient_type != "CHILDREN" && $patient_type != "CUSTOMER") {
                $response['status'] = 0;
                $response['message'] = 'Invalid patient type';
            } else if ($action_type != "ADD" && $action_type != "UPDATE" && $action_type != "DELETE") {
                $response['status'] = 0;
                $response['message'] = 'Invalid action type';
            } else if ($action_type == "ADD" && empty($message)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid message';
            } else if ($action_type == "ADD" && empty($doctor_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid doctor';
            } else if ($action_type == "ADD" && empty($reminder_date)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid reminder date';
            } else if (($action_type == "UPDATE" || $action_type == "DELETE") && empty($reminder_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid reminder id';
            } else {
                $label = "";
                $connection = ConnectionUtil::getConnection();
                $created = !empty($created) ? $created : Custom::created();
                $modified = !empty($modified) ? $modified : Custom::created();

                $reminder_date = date('Y-m-d', strtotime($reminder_date));
                if ($action_type == "ADD") {
                    $children_id = $appointment_customer_id = 0;
                    if ($patient_type == "CUSTOMER") {
                        $appointment_customer_id = $patient_id;
                    } else {
                        $children_id = $patient_id;
                    }
                    $add_via = "TAB";
                    $sql = "INSERT INTO follow_up_reminders (add_via, thinapp_id, doctor_id, children_id, appointment_customer_id, reminder_message, reminder_date,created,modified) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)";
                    $stmt = $connection->prepare($sql);
                    $stmt->bind_param('sssssssss', $add_via, $thin_app_id, $doctor_id, $children_id, $appointment_customer_id, $message, $reminder_date, $created, $modified);
                    $label = "add";
                } else if ($action_type == "UPDATE") {
                    $query = "update follow_up_reminders set reminder_message =?, reminder_date =?, modified =? where id = ?";
                    $stmt = $connection->prepare($query);
                    $stmt->bind_param('ssss', $message, $reminder_date, $modified, $reminder_id);
                    $label = "update";
                } else {
                    $query = "delete from  follow_up_reminders where id = ?";
                    $stmt = $connection->prepare($query);
                    $stmt->bind_param('s', $reminder_id);
                    $label = "delete";
                }
                if ($stmt->execute()) {
                    $response['status'] = 1;
                    $response['message'] = "Reminder $label successfully";
                    $response['server_id'] = ($action_type == "ADD") ? $stmt->insert_id : $reminder_id;
                    if ($return === false) {
                        $reminder_array = Custom::pad_get_patient_reminder_list($thin_app_id, $patient_id, $patient_type);
                        $response['data']['list'] = empty($reminder_array) ? array() : $reminder_array;
                    }

                } else {
                    $response['status'] = 1;
                    $response['message'] = "Sorry reminder could not $label";
                }
            }
            if ($return === true) {
                return json_encode($response);
            } else {
                Custom::sendResponse($response);
            }

        }
        exit();


    }

    public static function tab_get_prescription_category_list($data = null)
    {

        $return = true;
        if (empty($data)) {
            $return = false;
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);
        }

        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $category_id = isset($data['category_id']) ? $data['category_id'] : "";
            $patient_type = isset($data['patient_type']) ? $data['patient_type'] : "";
            $patient_id = isset($data['patient_id']) ? $data['patient_id'] : "";
            $prescription_id = isset($data['prescription_id']) ? $data['prescription_id'] : "";
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : 0;

            try {
                if (empty($thin_app_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid thinapp id';
                } else if (empty($app_key)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid app key';
                } else if (empty($user_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid user id';
                } else if (empty($mobile)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid mobile';
                } else if ($patient_type != "CHILDREN" && $patient_type != "CUSTOMER") {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid patient type';
                } else if (empty($patient_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid patient id';
                } else {

                    $connection = ConnectionUtil::getConnection();
                    $tab_prescription_layout_id = 0;
                    /*if (empty($prescription_id)) {
                        $pre_id = Custom::tab_check_current_prescription($thin_app_id, $patient_id, $patient_type);
                        $prescription_id = !empty($pre_id) ? $pre_id : 0;
                    }
                    if (empty($prescription_id)) {
                        $created = Custom::created();
                        $sql = "INSERT INTO tab_patient_prescriptions (thinapp_id, tab_prescription_layout_id, patient_id, patient_type, created, modified) VALUES (?, ?, ?, ?, ?, ?)";
                        $stmt = $connection->prepare($sql);
                        $stmt->bind_param('ssssss', $thin_app_id, $tab_prescription_layout_id, $patient_id, $patient_type, $created, $created);
                        if ($stmt->execute()) {
                            $prescription_id = $stmt->insert_id;
                        }
                    }*/


                    $file_name = "tab_category_list_$doctor_id";
                    if (!$service_list = json_decode(WebservicesFunction::readJson($file_name, "tab"), true)) {
                        $connection = ConnectionUtil::getConnection();
                        $query = "select tab_prescription_category_id as id,name,has_subcategory,icon_path from tab_prescription_categories as tpc where tpc.status='ACTIVE' and tpc.doctor_id = $doctor_id order by `index` asc";
                        $service_message_list = $connection->query($query);
                        if ($service_message_list->num_rows) {
                            $service_list = mysqli_fetch_all($service_message_list, MYSQL_ASSOC);
                            WebservicesFunction::createJson($file_name, json_encode($service_list), "CREATE", "tab");
                        }
                    }
                    $response['prescription_id'] = $prescription_id;
                    if (!empty($service_list)) {
                        $response['status'] = 1;
                        $response['message'] = "List found";
                        $response['data']['list'] = $service_list;
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "No list found";
                    }

                }
            } catch (Exception $e) {
                $response['status'] = 0;
                $response['message'] = "Something went wrong on server";
            }

            if ($return === true) {
                if (!empty($doctor_id)) {
                    Custom::clone_master_tab_steps($thin_app_id, $doctor_id);
                }
                return json_encode($response);
            } else {
                Custom::sendResponse($response);
                if (!empty($doctor_id)) {
                    Custom::send_process_to_background();
                    Custom::clone_master_tab_steps($thin_app_id, $doctor_id);
                }
            }


        }
        exit();
    }

    public static function tab_get_prescription_sub_category_list()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $category_id = isset($data['category_id']) ? $data['category_id'] : "";
            try {
                if (empty($thin_app_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid thinapp id';
                } else if (empty($app_key)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid app key';
                } else if (empty($user_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid user id';
                } else if (empty($mobile)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid mobile';
                } else if (empty($category_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid category id';
                } else {

                    $query = "select tps.id,tps.name,tps.icon_path, IF(tps.thinapp_id != 0,'YES','NO') AS is_delete from tab_prescription_subcategories as tps where ( tps.thinapp_id = $thin_app_id OR tps.thinapp_id = 0 ) and tps.status='ACTIVE' and tps.tab_prescription_category_id = $category_id";
                    $connection = ConnectionUtil::getConnection();
                    $service_message_list = $connection->query($query);
                    if ($service_message_list->num_rows) {
                        $service_list = mysqli_fetch_all($service_message_list, MYSQL_ASSOC);
                        $response['status'] = 1;
                        $response['message'] = "List found";
                        $response['data']['list'] = $service_list;
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "No list found";
                    }

                }
            } catch (Exception $e) {
                $response['status'] = 0;
                $response['message'] = "Something went wrong on server";
            }
            Custom::sendResponse($response);
        }
        exit();
    }

    public static function tab_get_prescription_template_list($data = null)
    {
        $return = true;
        if (empty($data)) {
            $return = false;
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);
        }

        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $category_id = isset($data['category_id']) ? $data['category_id'] : "";
            $sub_category_id = isset($data['sub_category_id']) ? $data['sub_category_id'] : 0;
            $key_count = isset($data['key_count']) ? $data['key_count'] : -1;
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : 0;
            $patient_id = isset($data['patient_id']) ? $data['patient_id'] : 0;
            $patient_type = isset($data['patient_type']) ? $data['patient_type'] : "";

            try {
                if (empty($thin_app_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid thinapp id';
                } else if (empty($app_key)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid app key';
                } else if (empty($user_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid user id';
                } else if (empty($mobile)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid mobile';
                } else if (empty($category_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid category id';
                } else {

                    $condition = "";
                    if ($category_id == INTERNAL_NOTES_MASTER_CATEGORY_ID && !empty($patient_id) && in_array($patient_type, array('CUSTOMER', 'CHILDREN'))) {
                        $condition = " and tpt.patient_id = $patient_id and tpt.patient_type = '$patient_type'";
                    }

                    $file_name = "tab_category_template_list_$category_id" . "_$doctor_id";
                    if (!$service_list = json_decode(WebservicesFunction::readJson($file_name, "tab"), true)) {
                        $connection = ConnectionUtil::getConnection();
                        $query = "select  tpt.is_bookmark, tpt.id, tpt.template_name, tpt.template_alias_name, tpt.template_id as template_array, tpt.tab_prescription_category_id as category_id, tpt.tab_prescription_sub_category_id as sub_category_id, tpc.name as category_name, tps.name as sub_category_name from tab_prescription_templates as tpt left join tab_prescription_categories as tpc on tpc.id = tpt.tab_prescription_category_id left join tab_prescription_subcategories as tps on tps.id = tpt.tab_prescription_sub_category_id where tpt.thinapp_id = $thin_app_id and tpt.status ='ACTIVE' and tpt.doctor_id = $doctor_id and tpt.tab_prescription_category_id = $category_id  $condition order by tpt.is_bookmark";
                        $service_message_list = $connection->query($query);
                        if ($service_message_list->num_rows) {
                            $service_list = mysqli_fetch_all($service_message_list, MYSQL_ASSOC);
                            WebservicesFunction::createJson($file_name, json_encode($service_list), "CREATE", "tab");
                        }
                    }

                    if (!empty($service_list)) {
                        $response['status'] = 1;
                        $response['message'] = "Template List found";
                        foreach ($service_list as $key_index => $list) {
                            $response['data']['list'][$key_index] = json_decode($list['template_array'], true);
                            $response['data']['list'][$key_index] = $list;
                        }
                        $keyword_count = Custom::get_prescription_keyword_count($category_id);
                        if (($keyword_count != $key_count) && ($key_count >= 0)) {
                            $file_name = "tab_prescription_category_keyword_" . $category_id;
                            if (!$key_word_array = json_decode(WebservicesFunction::readJson($file_name, "prescription"), true)) {
                                $connection = ConnectionUtil::getConnection();
                                $query = "select title from tab_prescription_keywords where tab_prescription_category_id = $category_id";
                                $service_message_list = $connection->query($query);
                                if ($service_message_list->num_rows) {
                                    $key_word_array = mysqli_fetch_all($service_message_list, MYSQLI_ASSOC);
                                    WebservicesFunction::createJson($file_name, json_encode($key_word_array), "CREATE", "prescription");
                                } else {
                                    $key_word_array = array();
                                }
                            }
                        }
                        $response['data']['keyword_list'] = !empty($key_word_array) ? $key_word_array : array();


                    } else {
                        $response['status'] = 0;
                        $response['message'] = "No template list found";
                    }
                }


            } catch (Exception $e) {
                $response['status'] = 0;
                $response['message'] = "Something went wrong on server";
            }
            if ($return === true) {
                return json_encode($response);
            } else {
                Custom::sendResponse($response);
            }

        }
        exit();
    }

    public static function tab_get_category_step($data = null)
    {
        $return = true;
        if (empty($data)) {
            $return = false;
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);
        }

        if ($_SERVER['REQUEST_METHOD'] === 'POST' || $return===true) {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $category_id = isset($data['category_id']) ? $data['category_id'] : "";
            $sub_category_id = isset($data['sub_category_id']) ? $data['sub_category_id'] : 0;
            $template_id = isset($data['template_id']) ? $data['template_id'] : 0;
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : 0;

            try {
                if (empty($thin_app_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid thinapp id';
                } else if (empty($app_key)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid app key';
                } else if (empty($user_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid user id';
                } else if (empty($mobile)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid mobile';
                } else if (empty($category_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid category id';
                } else {
                    $return_array = array();

                    $file_name = "tab_category_step_list_$category_id" . "_$doctor_id";
                    $template_array = $tmp_array = array();
                    if (!$return_array = json_decode(WebservicesFunction::readJson($file_name, "tab"), true)) {
                        $connection = ConnectionUtil::getConnection();
                        $query = "select tpt.company_name, tpt.composition, tpt.tag_type, tps.id as step_id, tps.step_title, tpt.id as tag_id, tpt.tag_name, tps.tab_master_prescription_step_id, tps.tab_prescription_category_id as master_category_id from tab_prescription_steps as tps left join tab_prescription_tags as tpt on tpt.tab_prescription_step_id = tps.id and tpt.status = 'ACTIVE' where tps.thinapp_id = $thin_app_id and tps.doctor_id = $doctor_id and tps.tab_prescription_category_id = $category_id and ( tps.tab_prescription_sub_category_id = $sub_category_id OR tps.tab_prescription_sub_category_id = 0) and tps.status = 'ACTIVE' order by tps.id, tpt.tag_name asc";
                        $service_message_list = $connection->query($query);
                        if ($service_message_list->num_rows) {
                            $list = mysqli_fetch_all($service_message_list, MYSQL_ASSOC);
                            foreach ($list as $key => $value) {
                                $return_array[$value['step_id']]['step_title'] = $value['step_title'];
                                $return_array[$value['step_id']]['step_id'] = $value['step_id'];
                                $return_array[$value['step_id']]['master_category_id'] = $value['master_category_id'];
                                $return_array[$value['step_id']]['tab_master_prescription_step_id'] = $value['tab_master_prescription_step_id'];
                                $tag_array = array();
                                if (!empty($value['tag_id'])) {
                                    $tag_array['tag_id'] = $value['tag_id'];
                                    $tag_array['tag_name'] = ($value['tag_name']);
                                    $tag_array['company_name'] = ($value['company_name']);
                                    $tag_array['composition'] = ($value['composition']);
                                    $tag_array['tag_type'] = ($value['tag_type']);
                                    $tag_array['tab_master_prescription_step_id'] = ($value['tab_master_prescription_step_id']);
                                    $tag_array['is_selected'] = @in_array($value['tag_id'], $tmp_array[$value['step_id']]) ? "YES" : "NO";
                                    $return_array[$value['step_id']]['tag_list'][] = $tag_array;
                                } else {
                                    $return_array[$value['step_id']]['tag_list'] = $tag_array;
                                }
                            }
                            $return_array = array_values($return_array);
                            WebservicesFunction::createJson($file_name, json_encode($return_array), "CREATE", "tab");
                        }
                    }

                    if (!empty($return_array)) {
                        $response['status'] = 1;
                        $response['message'] = "List found";
                        $response['data']['step_list'] = array_values($return_array);


                    } else {
                        $response['status'] = 0;
                        $response['message'] = "No list found";
                    }

                }
            } catch (Exception $e) {
                $response['status'] = 0;
                $response['message'] = "Something went wrong on server";
            }
            if ($return === true) {
                return json_encode($response);
            } else {
                Custom::sendResponse($response);
            }

        }
        exit();
    }

    public static function tab_manage_step_tag($data = null)
    {
        $return = true;
        if (empty($data)) {
            $return = false;
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);
        }

        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $step_id = isset($data['step_id']) ? $data['step_id'] : 0;
            $tag_id = isset($data['tag_id']) ? $data['tag_id'] : 0;
            $action_type = isset($data['action_type']) ? $data['action_type'] : "";
            $tag_name = isset($data['tag_name']) ? trim($data['tag_name']) : "";
            $doctor_id = isset($data['doctor_id']) ? trim($data['doctor_id']) : 0;
            $category_master_id = isset($data['category_master_id']) ? trim($data['category_master_id']) : 0;
            $tag_type = isset($data['tag_type']) ? trim($data['tag_type']) : "";
            $company_name = isset($data['company_name']) ? trim($data['company_name']) : "";
            $composition = isset($data['composition']) ? trim($data['composition']) : "";
            $tag_notes = isset($data['tag_notes']) ? trim($data['tag_notes']) : "";
            $created = isset($data['created']) ? $data['created'] : "";
            $modified = isset($data['modified']) ? $data['modified'] : "";


            try {
                if (empty($thin_app_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid thinapp id';
                } else if (empty($app_key)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid app key';
                } else if (empty($user_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid user id';
                } else if (empty($mobile)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid mobile';
                } else if ($action_type != "ADD" && $action_type != "UPDATE" && $action_type != "DELETE") {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid action type';
                } else if (($action_type == "UPDATE" || $action_type == "DELETE") && empty($step_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid step id';
                } else if (($action_type == "UPDATE" || $action_type == "ADD") && empty($tag_name)) {
                    $response['status'] = 0;
                    $response['message'] = 'Please enter tag name';
                } else {

                    $return_array = array();
                    $created = !empty($created) ? $created : Custom::created();
                    $modified = !empty($modified) ? $modified : Custom::created();

                    $connection = ConnectionUtil::getConnection();
                    if ($action_type == "ADD") {

                        if ($category_master_id == INTERNAL_NOTES_MASTER_CATEGORY_ID) {
                            $tag_name_array[0] = htmlentities($tag_name, ENT_QUOTES);
                        } else {
                            $tmp_list = explode("@#@#", $tag_name);
                            foreach ($tmp_list as $key => $value) {
                                $tag_name_array[$key] = htmlentities($value, ENT_QUOTES);
                            }
                        }
                        $tag_string = implode('","', $tag_name_array);
                        $query = "select  tag_name from tab_prescription_tags where tab_prescription_step_id=? and doctor_id = ? and tag_name IN (?) and status ='ACTIVE'";
                        $stmt_check = $stmt_query = $connection->prepare($query);
                        $stmt_check->bind_param("sss", $step_id, $doctor_id, $tag_string);
                        $stmt_check->execute();
                        $result = $stmt_check->get_result();
                        if (!$result->num_rows) {
                            $connection->autocommit(false);
                            $result_array = array();
                            foreach ($tag_name_array as $key => $tag_name) {
                                $sql = "INSERT INTO tab_prescription_tags (tag_notes, tag_type, company_name, composition, doctor_id, thinapp_id, tag_name, tab_prescription_step_id, created, modified) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                                $stmt = $connection->prepare($sql);
                                $stmt->bind_param('ssssssssss', $tag_notes, $tag_type, $company_name, $composition, $doctor_id, $thin_app_id, $tag_name, $step_id, $created, $modified);
                                if ($stmt->execute()) {
                                    $result_array[] = $stmt->insert_id;
                                } else {
                                    $result_array[] = false;
                                }
                            }

                            if (!empty($result_array) && !in_array(false, $result_array)) {
                                $connection->commit();
                                $step_master_category_id = Custom::get_step_master_category_id($step_id);
                                Custom::tab_delete_category_step_list_cache_file($doctor_id, $step_master_category_id);
                                $response['status'] = 1;
                                $response['message'] = "Tag added successfully";
                                $response['tag_id'] = implode(",", $result_array);
                            } else {
                                $response['status'] = 0;
                                $response['message'] = "Sorry tag could not add";
                            }


                        } else {
                            $list = mysqli_fetch_all($result, MYSQL_ASSOC);
                            $tag_list = array();
                            foreach ($list as $key => $tag) {
                                $tag_list[] = $tag['tag_name'];
                            }
                            $response['status'] = 0;
                            $response['message'] = implode(',', $tag_list) . " already exist";
                        }

                    } else if ($action_type == "UPDATE") {
                        $tag_name = htmlentities($tag_name, ENT_QUOTES);
                        $query = "select tag_name from tab_prescription_tags where id != ? and tab_prescription_step_id=? and UPPER(tag_name) = ? and status ='ACTIVE' limit 1";
                        $stmt_check = $connection->prepare($query);
                        $stmt_check->bind_param("sss", $tag_id, $step_id, $tag_name);
                        $stmt_check->execute();
                        $result = $stmt_check->get_result();
                        if (!$result->num_rows) {

                            $step_master_category_id = Custom::get_tag_master_category_id($tag_id);
                            Custom::tab_delete_category_step_list_cache_file($doctor_id, $step_master_category_id);

                            $query = "update tab_prescription_tags set tag_notes=?, tag_name =?, tag_type =?, company_name =?, composition=?, modified =? where id = ?";
                            $stmt = $connection->prepare($query);
                            $stmt->bind_param('sssssss', $tag_notes, $tag_name, $tag_type, $company_name, $composition, $modified, $tag_id);
                            if ($stmt->execute()) {
                                $response['status'] = 1;
                                $response['message'] = "Tag edited successfully";
                                $response['tag_id'] = $tag_id;

                            } else {
                                $response['status'] = 0;
                                $response['message'] = "Sorry tag could not edit";
                                $response['tag_id'] = $tag_id;
                            }
                        } else {
                            $response['status'] = 0;
                            $response['message'] = "Tag already exist";
                        }
                    } else {
                        $status = "INACTIVE";
                        $query = "update tab_prescription_tags set status =?,  modified =? where id = ?";
                        $stmt = $connection->prepare($query);
                        $stmt->bind_param('sss', $status, $modified, $tag_id);
                        if ($stmt->execute()) {
                            $step_master_category_id = Custom::get_tag_master_category_id($tag_id);
                            Custom::tab_delete_category_step_list_cache_file($doctor_id, $step_master_category_id);
                            $response['status'] = 1;
                            $response['message'] = "Tag delete successfully";
                        } else {
                            $response['status'] = 0;
                            $response['message'] = "Sorry tag could not delete";
                        }
                    }


                }
            } catch (Exception $e) {
                $response['status'] = 0;
                $response['message'] = "Something went wrong on server";
            }
            if ($return === true) {
                return json_encode($response);
            } else {
                Custom::sendResponse($response);
            }
        }
        exit();
    }

    public static function tab_add_template($data = null)
    {

        $return = true;
        if (empty($data)) {
            $return = false;
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);
        }

        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $category_id = isset($data['category_id']) ? $data['category_id'] : "";
            $sub_category_id = isset($data['sub_category_id']) ? $data['sub_category_id'] : "0";
            $data_array = isset($data['data_array']) ? $data['data_array'] : 0;
            $template_name = isset($data['template_name']) ? $data['template_name'] : "";
            $template_db_id = isset($data['template_id']) ? $data['template_id'] : 0;
            $doctor_id = isset($data['doctor_id']) ? trim($data['doctor_id']) : 0;
            $patient_id = isset($data['patient_id']) ? trim($data['patient_id']) : 0;
            $patient_type = isset($data['patient_type']) ? trim($data['patient_type']) : "";
            $template_for = isset($data['template_for']) ? trim($data['template_for']) : "TAB";


            try {
                if (empty($thin_app_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid thinapp id';
                } else if (empty($app_key)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid app key';
                } else if (empty($user_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid user id';
                } else if (empty($mobile)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid mobile';
                } else if (empty($category_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid category id';
                } else if (empty($data_array)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid data array';
                } else {

                    $return_array = array();
                    $created = Custom::created();
                    $connection = ConnectionUtil::getConnection();

                    $final_array = json_decode($data_array, true);
                    $name_string = array();
                    $final_array['category_id'] = $category_id;
                    $final_array['sub_category_id'] = $sub_category_id;

                    $template_id = $compare_template_id = $data_array;//Custom::create_template_array($final_array, true);
                    $data_array = json_decode($data_array, true)['template_array'];
                    //$compare_template_id = Custom::create_template_array($final_array);

                    $name_string = array();
                    foreach ($data_array as $main_key => $main_data) {
                        foreach ($main_data as $key => $step_data) {
                            $tmp = array();
                            if (!empty($step_data['selected_tag'])) {
                                foreach ($step_data['selected_tag'] as $tag_key => $tag) {
                                    $tmp[] = $tag['tag_title'];
                                }
                                $name_string[] = implode(',', $tmp);
                            }
                        }
                    }

                    if (count($name_string) > 0) {
                        $template_alias_name = implode(" : ", $name_string);
                        if (empty($template_name)) {
                            $template_name = $template_alias_name;
                        }
                    }

                    if (empty($template_db_id)) {
                        if ($category_id == INTERNAL_NOTES_MASTER_CATEGORY_ID && !empty($patient_id) && in_array($patient_type, array('CUSTOMER', 'CHILDREN'))) {
                            $sql = "INSERT INTO tab_prescription_templates (template_for,patient_id, patient_type, compare_template_id, doctor_id, thinapp_id, template_name, template_alias_name, template_id, tab_prescription_category_id, tab_prescription_sub_category_id,  created, modified) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                            $stmt = $connection->prepare($sql);
                            $stmt->bind_param('sssssssssssss', $template_for, $patient_id, $patient_type, $compare_template_id, $doctor_id, $thin_app_id, $template_name, $template_alias_name, $template_id, $category_id, $sub_category_id, $created, $created);
                        } else {
                            $sql = "INSERT INTO tab_prescription_templates (template_for, compare_template_id, doctor_id, thinapp_id, template_name, template_alias_name, template_id, tab_prescription_category_id, tab_prescription_sub_category_id,  created, modified) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                            $stmt = $connection->prepare($sql);
                            $stmt->bind_param('sssssssssss', $template_for, $compare_template_id, $doctor_id, $thin_app_id, $template_name, $template_alias_name, $template_id, $category_id, $sub_category_id, $created, $created);
                        }

                        if ($stmt->execute()) {
                            $cat = Custom::get_tab_prescription_cat_name($category_id, $sub_category_id);
                            Custom::tab_delete_template_list_cache_file($doctor_id, $category_id);
                            $response['status'] = 1;
                            $response['message'] = "Template add successfully";
                            $response['template_id'] = $stmt->insert_id;
                            $response['template_name'] = $template_name;
                            $response['template_alias_name'] = $template_alias_name;
                            $response['template_string'] = $template_id;
                            $response['category_name'] = @$cat['category_name'];
                            $response['sub_category_name'] = @$cat['sub_category_name'];
                        } else {
                            $response['status'] = 0;
                            $response['message'] = "Sorry template could not add";
                        }
                    } else {

                        $sql = "UPDATE tab_prescription_templates set compare_template_id =?, template_id =?, template_name =?, template_alias_name=?, modified =? where id =?";
                        $stmt = $connection->prepare($sql);
                        $stmt->bind_param('ssssss', $compare_template_id, $template_id, $template_name, $template_alias_name, $created, $template_db_id);
                        if ($stmt->execute()) {
                            $connection->commit();
                            $cat = Custom::get_tab_prescription_cat_name($category_id, $sub_category_id);
                            Custom::tab_delete_template_list_cache_file($doctor_id, $category_id);
                            $response['status'] = 1;
                            $response['message'] = "Template edit successfully";
                            $response['template_name'] = $template_name;
                            $response['template_alias_name'] = $template_alias_name;
                            $response['template_string'] = $template_id;
                            $response['template_id'] = $template_db_id;
                            $response['category_name'] = @$cat['category_name'];
                            $response['sub_category_name'] = @$cat['sub_category_name'];

                        } else {
                            $response['status'] = 0;
                            $response['message'] = "Sorry template could not edit";
                        }
                    }
                }
            } catch (Exception $e) {
                $response['status'] = 0;
                $response['message'] = "Something went wrong on server";
            }
            if ($return === true) {
                return json_encode($response);
            } else {
                Custom::sendResponse($response);
            }
        }
        exit();
    }

    public static function tab_prescription_keywords()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            try {
                if (empty($thin_app_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid thinapp id';
                } else if (empty($app_key)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid app key';
                } else if (empty($user_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid user id';
                } else if (empty($mobile)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid mobile';
                } else {

                    $file_name = "tab_prescription_keyword";
                    if (!$staff_data = json_decode(WebservicesFunction::readJson($file_name, "prescription"), true)) {
                        $connection = ConnectionUtil::getConnection();
                        $query = "select * from tab_prescription_keywords";
                        $service_message_list = $connection->query($query);
                        if ($service_message_list->num_rows) {
                            $staff_data = mysqli_fetch_all($service_message_list, MYSQLI_ASSOC);
                            WebservicesFunction::createJson($file_name, json_encode($staff_data), "CREATE", "prescription");
                        }
                    }
                    if ($staff_data) {
                        $response['status'] = 1;
                        $response['message'] = "Keywords list found";
                        $response['data']['list'] = $staff_data;
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "No keyword found";
                    }
                }
            } catch (Exception $e) {
                $response['status'] = 0;
                $response['message'] = "Something went wrong on server";
            }
            Custom::sendResponse($response);
        }
        exit();
    }

    public static function tab_add_step()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $step_title = isset($data['step_title']) ? trim($data['step_title']) : "";
            $category_id = isset($data['category_id']) ? trim($data['category_id']) : "";
            $sub_category_id = isset($data['sub_category_id']) ? trim($data['sub_category_id']) : 0;
            $doctor_id = isset($data['doctor_id']) ? trim($data['doctor_id']) : 0;

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else if (empty($category_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid category id';
            } else {

                $return_array = array();
                $created = Custom::created();
                $connection = ConnectionUtil::getConnection();
                $allow_add_step = false;
                if (empty($step_title)) {
                    $allow_add_step = true;
                    $step_title = Custom::get_total_step_count($thin_app_id, $category_id, $sub_category_id);
                    $step_title = "Step " . ($step_title + 1);
                }
                if ($allow_add_step === false) {
                    $query = "select  step_title from tab_prescription_steps where doctor_id = $doctor_id and thinapp_id = $thin_app_id and tab_prescription_category_id=$category_id and tab_prescription_sub_category_id= $sub_category_id and UPPER(step_title) ='" . strtoupper($step_title) . "' and status ='ACTIVE'";
                    $data = $connection->query($query);
                    if (!$data->num_rows) {
                        $allow_add_step = true;
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Step already exist";
                    }
                }

                if ($allow_add_step === true) {
                    $sql = "INSERT INTO tab_prescription_steps (doctor_id, thinapp_id, step_title, tab_prescription_category_id, tab_prescription_sub_category_id, created, modified) VALUES (?, ?, ?, ?, ?, ?,?)";
                    $stmt = $connection->prepare($sql);
                    $stmt->bind_param('sssssss', $doctor_id, $thin_app_id, $step_title, $category_id, $sub_category_id, $created, $created);
                    if ($stmt->execute()) {
                        $connection->commit();
                        $response['status'] = 1;
                        $response['message'] = "Step added successfully";
                        $response['data']['step_list'][0]['step_id'] = $stmt->insert_id;
                        $response['data']['step_list'][0]['step_title'] = $step_title;
                        $response['data']['step_list'][0]['tag_list'] = array();
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Sorry step could not add";
                    }
                }

            }
            Custom::sendResponse($response);
        }
        exit();


    }

    public static function tab_mangage_step()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $action_type = isset($data['action_type']) ? $data['action_type'] : "";
            $step_title = isset($data['step_title']) ? trim($data['step_title']) : "";
            $step_id = isset($data['step_id']) ? trim($data['step_id']) : "";
            $category_id = isset($data['category_id']) ? $data['category_id'] : "";
            $sub_category_id = isset($data['sub_category_id']) ? $data['sub_category_id'] : 0;
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : 0;

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else if (empty($step_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid step id';
            } else if (empty($category_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid category id';
            } else if ($action_type != "UPDATE" && $action_type != "DELETE") {
                $response['status'] = 0;
                $response['message'] = 'Invalid action type';
            } else {

                $return_array = array();
                $created = Custom::created();
                $connection = ConnectionUtil::getConnection();

                if ($action_type == "UPDATE") {
                    $sql = "UPDATE tab_prescription_steps set step_title =?, modified =? where id =?";
                    $stmt = $connection->prepare($sql);
                    $stmt->bind_param('sss', $step_title, $created, $step_id);
                    if ($stmt->execute()) {
                        $connection->commit();
                        $response['status'] = 1;
                        $response['message'] = "Step edit successfully";

                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Sorry step could not edit";
                    }
                } else {

                    $status = "INACTIVE";
                    $sql = "UPDATE tab_prescription_steps set status =?, modified =? where id =?";
                    $stmt = $connection->prepare($sql);
                    $stmt->bind_param('sss', $status, $created, $step_id);
                    if ($stmt->execute()) {
                        $connection->commit();
                        $response['status'] = 1;
                        $response['message'] = "Step delete successfully";
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Sorry step could not delete";
                    }


                }


            }
            Custom::sendResponse($response);
        }
        exit();


    }

    public static function tab_mangage_template($data = null)
    {

        $return = true;
        if (empty($data)) {
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);
        }

        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $action_type = isset($data['action_type']) ? $data['action_type'] : "";
            $template_id = isset($data['template_id']) ? trim($data['template_id']) : "";
            $template_name = isset($data['template_name']) ? trim($data['template_name']) : "";
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : 0;

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else if ($action_type == "UPDATE" && empty($template_name)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid template name';
            } else if ($action_type != "UPDATE" && $action_type != "DELETE") {
                $response['status'] = 0;
                $response['message'] = 'Invalid action type';
            } else {

                $return_array = array();
                $created = Custom::created();
                $connection = ConnectionUtil::getConnection();
                $template_data = Custom::tab_get_template_by_id($template_id);
                if (!empty($template_data)) {
                    if ($action_type == "UPDATE") {

                        if ($template_data['tab_prescription_category_id'] == INTERNAL_NOTES_MASTER_CATEGORY_ID) {
                            $template_array = json_decode($template_data['template_id'], true)['template_array'];
                            $final_array = array();
                            $final_array['template_array'][0][0] = $template_array[0][0];
                            $temp = $template_array[0][0]['selected_tag'][0];
                            $temp['tag_title'] = $template_name;
                            unset($final_array['template_array'][0][0]['selected_tag']);
                            $final_array['template_array'][0][0]['selected_tag'][0] = $temp;
                            $final_array = json_encode($final_array);
                            $sql = "UPDATE tab_prescription_templates set template_alias_name =?, template_name =?, template_id=?, compare_template_id=?, modified =? where id =?";
                            $stmt = $connection->prepare($sql);
                            $stmt->bind_param('ssssss', $template_name, $template_name, $final_array, $final_array, $created, $template_id);

                        } else {
                            $sql = "UPDATE tab_prescription_templates set template_name =?, modified =? where id =?";
                            $stmt = $connection->prepare($sql);
                            $stmt->bind_param('sss', $template_name, $created, $template_id);
                        }


                        if ($stmt->execute()) {
                            $connection->commit();
                            Custom::tab_delete_template_list_cache_file($doctor_id, $template_data['tab_prescription_category_id']);
                            $response['status'] = 1;
                            $response['message'] = "Template edit successfully";
                        } else {
                            $response['status'] = 0;
                            $response['message'] = "Sorry template could not edit";
                        }
                    } else {
                        $status = "INACTIVE";
                        $sql = "UPDATE tab_prescription_templates set status =?, modified =? where id =?";
                        $stmt = $connection->prepare($sql);
                        $stmt->bind_param('sss', $status, $created, $template_id);
                        if ($stmt->execute()) {
                            $connection->commit();
                            Custom::tab_delete_template_list_cache_file($doctor_id, $template_data['tab_prescription_category_id']);
                            $response['status'] = 1;
                            $response['message'] = "Template delete successfully";
                        } else {
                            $response['status'] = 0;
                            $response['message'] = "Sorry template could not delete";
                        }
                    }
                } else {
                    $response['status'] = 0;
                    $response['message'] = "Invalid template";
                }


            }
            if ($return === true) {

                return json_encode($response);
            } else {

                Custom::sendResponse($response);
            }
        }
        exit();


    }

    public static function tab_manage_sub_category()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $action_type = isset($data['action_type']) ? $data['action_type'] : "";
            $category_id = isset($data['category_id']) ? $data['category_id'] : "";
            $sub_category_id = isset($data['sub_category_id']) ? $data['sub_category_id'] : "";
            $sub_category_name = isset($data['sub_category_name']) ? trim($data['sub_category_name']) : "";
            try {
                if (empty($thin_app_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid thinapp id';
                } else if (empty($app_key)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid app key';
                } else if (empty($user_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid user id';
                } else if (empty($mobile)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid mobile';
                } else if (empty($category_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid category id';
                } else if ($action_type != "ADD" && $action_type != "UPDATE" && $action_type != "DELETE") {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid action type';
                } else if (empty($sub_category_name) && ($action_type == "ADD" || $action_type == "UPDATE")) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid sub category name';
                } else if (empty($sub_category_id) && ($action_type == "DELETE" || $action_type == "UPDATE")) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid sub category id';
                } else {

                    $return_array = array();
                    $created = Custom::created();
                    $connection = ConnectionUtil::getConnection();

                    if ($action_type == "ADD") {
                        $query = "select id from tab_prescription_subcategories where (thinapp_id= $thin_app_id OR thinapp_id= $thin_app_id ) and tab_prescription_category_id = $category_id and name = '$sub_category_name' limit 1";
                        $service_message_list = $connection->query($query);
                        if (!$service_message_list->num_rows) {
                            $sql = "INSERT INTO tab_prescription_subcategories (thinapp_id, name, tab_prescription_category_id, created, modified) VALUES (?, ?, ?, ?, ?)";
                            $stmt = $connection->prepare($sql);
                            $stmt->bind_param('sssss', $thin_app_id, $sub_category_name, $category_id, $created, $created);
                            if ($stmt->execute()) {
                                $response['status'] = 1;
                                $response['message'] = "Category add successfully";
                            } else {
                                $response['status'] = 0;
                                $response['message'] = "Sorry category could not add";
                            }
                        } else {
                            $response['status'] = 0;
                            $response['message'] = "Category already exist.";
                        }

                    } else if ($action_type == "UPDATE") {
                        $query = "select id from tab_prescription_subcategories where (thinapp_id= $thin_app_id OR thinapp_id= $thin_app_id ) and tab_prescription_category_id = $category_id and name = '$sub_category_name' and id != $sub_category_id limit 1";
                        $service_message_list = $connection->query($query);
                        if (!$service_message_list->num_rows) {
                            $sql = "UPDATE tab_prescription_subcategories set name =?, modified =? where id =?";
                            $stmt = $connection->prepare($sql);
                            $stmt->bind_param('sss', $sub_category_name, $created, $sub_category_id);
                            if ($stmt->execute()) {
                                $connection->commit();
                                $response['status'] = 1;
                                $response['message'] = "Category edit successfully";
                            } else {
                                $response['status'] = 0;
                                $response['message'] = "Sorry category could not edit";
                            }
                        } else {
                            $response['status'] = 0;
                            $response['message'] = "Category already exist.";
                        }
                    } else {
                        $status = "INACTIVE";
                        $sql = "UPDATE tab_prescription_subcategories set status =?, modified =? where id =?";
                        $stmt = $connection->prepare($sql);
                        $stmt->bind_param('sss', $status, $created, $sub_category_id);
                        if ($stmt->execute()) {
                            $connection->commit();
                            $response['status'] = 1;
                            $response['message'] = "Category delete successfully";
                        } else {
                            $response['status'] = 0;
                            $response['message'] = "Sorry category could not delete";
                        }
                    }
                }
            } catch (Exception $e) {
                $response['status'] = 0;
                $response['message'] = "Something went wrong on server";
            }
            Custom::sendResponse($response);
        }
        exit();
    }

    public static function tab_save_prescription($data, $return = false)
    {

        if (empty($data)) {
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);

        }

        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $role_id = isset($data['role_id']) ? $data['role_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $template_id_string = isset($data['template_id_string']) ? $data['template_id_string'] : "";
            $prescription_string = isset($data['prescription_string']) ? $data['prescription_string'] : "";
            $prescription_id = isset($data['prescription_id']) ? $data['prescription_id'] : "";
            $prescription_image = isset($data['prescription_image']) ? $data['prescription_image'] : "";
            $folder_id = isset($data['folder_id']) ? $data['folder_id'] : "";
            $prescription_type = isset($data['prescription_type']) ? $data['prescription_type'] : "STANDARD";
            $add_via = isset($data['add_via']) ? $data['add_via'] : "TAB";
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : 0;
            $patient_id = isset($data['patient_id']) ? $data['patient_id'] : 0;
            $patient_type = isset($data['patient_type']) ? $data['patient_type'] : '';
            $prescription_html = isset($data['prescription_html']) ? $data['prescription_html'] : '';


            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else if ($prescription_type == 'STANDARD' && empty($template_id_string)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid template id';
            } else if ($add_via == 'WEB' && empty($prescription_string)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid prescription string';
            } else if ($add_via == 'WEB' && empty($patient_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid patient id ';
            } else if ($add_via == 'WEB' && ($patient_type != 'CHILDREN' && $patient_type != 'CUSTOMER')) {
                $response['status'] = 0;
                $response['message'] = 'Invalid patient type ';
            } else if (empty($folder_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid folder id';
            } else if ($prescription_type != 'STANDARD' && $prescription_type != 'WRITING') {
                $response['status'] = 0;
                $response['message'] = 'Invalid prescription type';
            } else if ($add_via != 'WEB' && $add_via != 'TAB') {
                $response['status'] = 0;
                $response['message'] = 'Invalid media type';
            } else {

                $connection = ConnectionUtil::getConnection();

                $result = array();
                $tab_prescription_layout_id = 0;
                $created = Custom::created();
                $sql = "INSERT INTO tab_patient_prescriptions (prescription_array_string, prescription_html, doctor_id, add_via, prescription_path, thinapp_id, tab_prescription_layout_id, patient_id, patient_type, created, modified) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                $stmt = $connection->prepare($sql);
                $stmt->bind_param('sssssssssss', $prescription_string, $prescription_html, $doctor_id, $add_via, $prescription_image, $thin_app_id, $tab_prescription_layout_id, $patient_id, $patient_type, $created, $created);
                if ($stmt->execute()) {
                    $prescription_id = $stmt->insert_id;
                    $send_notification = true;
                    $response['status'] = 1;
                    $response['message'] = "Prescription save successfully";
                    $response['server_id'] = $prescription_id;

                } else {

                    $response['status'] = 0;
                    $response['message'] = "Sorry prescription could not save";
                }
            }
            if ($return === true) {
                return json_encode($response);
            } else {
                $prescription_id = $response['server_id'];
                Custom::sendResponse($response);
                Custom::send_process_to_background();
                if (!empty($prescription_image)) {
                    $data['base64'] = $prescription_image;
                    Custom::upload_web_prescription($data, true, $prescription_id);
                }
            }

        }
        exit();


    }

    public static function tab_manage_template_bookmark()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $template_id = isset($data['template_id']) ? $data['template_id'] : "";
            $is_bookmark = isset($data['is_bookmark']) ? $data['is_bookmark'] : "";
            try {
                if (empty($thin_app_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid thinapp id';
                } else if (empty($app_key)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid app key';
                } else if (empty($user_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid user id';
                } else if (empty($mobile)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid mobile';
                } else if (empty($template_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid template id';
                } else if ($is_bookmark != "YES" && $is_bookmark != "NO") {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid bookmark';
                } else {


                    $created = Custom::created();
                    $connection = ConnectionUtil::getConnection();
                    $sql = "UPDATE tab_prescription_templates set is_bookmark =?, modified =? where id =?";
                    $stmt = $connection->prepare($sql);
                    $stmt->bind_param('sss', $is_bookmark, $created, $template_id);
                    if ($stmt->execute()) {
                        $connection->commit();
                        $response['status'] = 1;
                        if ($is_bookmark == "YES") {
                            $response['message'] = "Template bookmarked successfully";
                        } else {
                            $response['message'] = "Template unbookmarked successfully";
                        }
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Sorry bookmark could not update";
                    }
                }
            } catch (Exception $e) {
                $response['status'] = 0;
                $response['message'] = "Something went wrong on server";
            }
            Custom::sendResponse($response);
        }
        exit();
    }

    public static function tab_update_patient_gender()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $patient_type = isset($data['patient_type']) ? $data['patient_type'] : "";
            $patient_id = isset($data['patient_id']) ? $data['patient_id'] : "";
            $gender = isset($data['gender']) ? $data['gender'] : "";
            $patient_name = isset($data['patient_name']) ? $data['patient_name'] : "";
            try {
                if (empty($thin_app_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid thinapp id';
                } else if (empty($app_key)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid app key';
                } else if (empty($user_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid user id';
                } else if (empty($mobile)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid mobile';
                } else if (empty($patient_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid patient id';
                } else if ($patient_type != "CUSTOMER" && $patient_type != "CHILDREN") {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid patient type';
                } else if ($gender != "MALE" && $gender != "FEMALE") {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid gender';
                } else {


                    $created = Custom::created();
                    $connection = ConnectionUtil::getConnection();

                    if (empty($patient_name)) {
                        if ($patient_type == "CUSTOMER") {
                            $sql = "UPDATE appointment_customers set gender =?, modified =? where id =?";
                        } else {
                            $sql = "UPDATE childrens set gender =?, modified =? where id =?";
                        }

                    } else {
                        if ($patient_type == "CUSTOMER") {
                            $sql = "UPDATE appointment_customers set first_name=?, gender =?, modified =? where id =?";
                        } else {
                            $sql = "UPDATE childrens set child_name = ?, gender =?, modified =? where id =?";
                        }

                    }


                    $stmt = $connection->prepare($sql);
                    if (empty($patient_name)) {
                        $stmt->bind_param('sss', $gender, $created, $patient_id);
                    } else {
                        $stmt->bind_param('ssss', $patient_name, $gender, $created, $patient_id);
                    }
                    if ($stmt->execute()) {
                        $connection->commit();
                        $response['status'] = 1;
                        $response['message'] = "Gender updated successfully";
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Sorry gender could not update";
                    }
                }
            } catch (Exception $e) {
                $response['status'] = 0;
                $response['message'] = "Something went wrong on server";
            }
            Custom::sendResponse($response);
        }
        exit();
    }

    public static function tab_add_patient($data = null)
    {

        $return_type = true;
        if (empty($data)) {
            $return_type = false;
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);
        }

        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $patient_type = isset($data['patient_type']) ? $data['patient_type'] : "";
            $patient_name = isset($data['patient_name']) ? trim($data['patient_name']) : "";
            $patient_mobile = isset($data['patient_mobile']) ? Custom::create_mobile_number($data['patient_mobile']) : "";
            $dob = isset($data['dob']) ? $data['dob'] : "";
            $gender = isset($data['gender']) ? strtoupper($data['gender']) : "";
            $send_notification = false;
            $patient_id = 0;
            try {
                if (empty($thin_app_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid thinapp id';
                } else if (empty($app_key)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid app key';
                } else if (empty($user_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid user id';
                } else if (empty($mobile) || !Custom::create_mobile_number($mobile)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid mobile';
                } else if ($patient_type != "CUSTOMER" && $patient_type != "CHILDREN") {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid patient type';
                } else if ($gender != "MALE" && $gender != "FEMALE") {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid gender';
                } else if (empty($patient_name)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid patient name';
                } else if (empty($patient_mobile) || !Custom::create_mobile_number($patient_mobile)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid patient mobile';
                } else if (empty($dob) && $patient_type == "CHILDREN") {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid patient dob';
                } else {

                    $mobile = Custom::create_mobile_number($mobile);
                    $patient_mobile = Custom::create_mobile_number($patient_mobile);
                    if ($patient_type == "CUSTOMER") {
                        $customer_data = Custom::search_customer_name($thin_app_id, $patient_mobile, $patient_name);
                        if (empty($customer_data)) {
                            $customer = array();
                            $customer['app_key'] = $app_key;
                            $customer['thin_app_id'] = $thin_app_id;
                            $customer['user_id'] = $user_id;
                            $customer['first_name'] = $patient_name;
                            $customer['dob'] = $dob;
                            $customer['mobile'] = $patient_mobile;
                            $customer['country_code'] = "+91";
                            $customer['gender'] = strtoupper($gender);
                            $customer['address'] = "";
                            $result = WebservicesFunction::appointment_add_customer($customer);
                            $result = $customer_data = json_decode($result, true);
                            if ($result['status'] == 1) {
                                $patient_id = $result['customer_id'];
                                $response['status'] = 1;
                                $response['message'] = "Patient Added Successfully";
                                $response['data'] = Custom::create_patient_urls($patient_id, $patient_type, $doctor_id = 0);
                                $res = json_decode(Custom::create_and_share_folder($thin_app_id, $patient_mobile, $patient_name, 'CUSTOMER', $patient_id), true);
                                $response['data']['folder_id'] = @$res['folder_id'];
                                $response['data']['patient_id'] = $patient_id;
                            } else {
                                $response['status'] = 0;
                                $response['message'] = $result['message'];
                            }
                        } else {
                            $response['status'] = 0;
                            $response['message'] = "Patient already exist.";
                        }

                    } else {
                        $child = array();
                        $child['app_key'] = $app_key;
                        $child['thin_app_id'] = $thin_app_id;
                        $child['user_id'] = $user_id;
                        $child['child_name'] = $patient_name;
                        $child['mobile'] = $patient_mobile;
                        $child['dob'] = $dob;
                        $child['gender'] = strtoupper($gender);
                        $child['add_vaccination'] = "NO";
                        $result = WebservicesFunction::add_child($child);
                        $result = $customer_data = json_decode($result, true);
                        if ($result['status'] == 1) {
                            $response['status'] = 1;
                            $response['message'] = "Children add successfully";
                            $response['data']['child_id'] = $result['child_id'];
                            $response['data']['folder_id'] = $result['folder_id'];
                            $send_notification = true;
                            $patient_id = $result['child_id'];

                        } else {
                            $response['status'] = 0;
                            $response['message'] = $result['message'];
                        }
                    }

                }
            } catch (Exception $e) {
                $response['status'] = 0;
                $response['message'] = "Something went wrong on server";
            }
            if ($return_type === false) {
                Custom::sendResponse($response);
                Custom::send_process_to_background();
                if ($send_notification === true && $patient_type == "CHILDREN" && !empty($patient_id)) {
                    Custom::send_child_add_sms_and_notification($thin_app_id, $patient_id);
                }
            } else {
                return json_encode($response);
            }


        }
        exit();
    }

    public static function tab_save_offline_prescription()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $role_id = isset($data['role_id']) ? $data['role_id'] : "";
            $file_array = isset($data['file_array']) ? $data['file_array'] : "";
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : 0;

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else if (empty($file_array)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid file array';
            } else {
                $filter_array = array();
                $send_notification = false;
                $created = Custom::created();
                $connection = ConnectionUtil::getConnection();
                $connection->autocommit(false);
                $post['thin_app_id'] = $thin_app_id;
                $post['user_id'] = $user_id;
                $post['app_key'] = $app_key;
                $post['mobile'] = $mobile;
                $post['role_id'] = $role_id;
                foreach ($file_array as $key => $file) {

                    $template_id = $file['template_id_string'];
                    $prescription_id = $file['prescription_id'];
                    $prescription_image = $file['file_path'];
                    $folder_id = $file['drive_folder_id'];

                    /* delete tab prescription template*/
                    $sql = "delete from tab_patient_prescription_templates where tab_patient_prescription_id =?";
                    $stmt_delete = $connection->prepare($sql);
                    $stmt_delete->bind_param('s', $prescription_id);
                    $delete_template = $stmt_delete->execute();

                    /* add new prescription */

                    $created = Custom::created();
                    $sql = "INSERT INTO tab_patient_prescription_templates (thinapp_id, tab_patient_prescription_id, template_string, created, modified) VALUES (?, ?, ?, ?, ?)";
                    $stmt = $connection->prepare($sql);
                    $stmt->bind_param('sssss', $thin_app_id, $prescription_id, $template_id, $created, $created);
                    $save_prescription = $stmt->execute();


                    $status = "COMPLETED";
                    $sql = "UPDATE tab_patient_prescriptions set prescription_path=?, prescripiton_status =?, modified =? where id =?";
                    $stmt = $connection->prepare($sql);
                    $stmt->bind_param('ssss', $prescription_image, $status, $created, $prescription_id);
                    $update_prescription = $stmt->execute();


                    /* add prescripiton to folder */
                    $post['file_array'][0]['file_type'] = Custom::getFileType($file['file_name']);
                    $post['file_array'][0]['file_name'] = $file['file_name'];
                    $post['file_array'][0]['file_path'] = $file['file_path'];
                    $post['file_array'][0]['file_size'] = $file['file_size'];
                    $post['listing_type'] = "OTHER";
                    $post['drive_folder_id'] = $folder_id;
                    $post['doctor_id'] = $doctor_id;
                    $filter_array[$folder_id][] = array('file_name' => $file['file_name']);
                    $post['category_id'] = 6;
                    $post['is_tab_prescription'] = "YES";
                    $res = WebservicesFunction::add_file($post, false, true);
                    $res = json_decode($res, true);
                    if ($res['status'] == 1 && $delete_template === true && $save_prescription === true && $update_prescription === true) {
                        $result[] = $file['local_file_path'];
                    } else {
                        $result[] = false;
                    }

                }

                if (!in_array(false, $result) && !empty($result)) {
                    $connection->commit();
                    $response['status'] = 1;
                    $response['message'] = "Prescription uploaded successfully";
                    $response['success_files'] = $result;
                    $send_notification = true;
                } else {
                    $connection->rollback();
                    $response['status'] = 0;
                    $response['message'] = "Sorry prescription could not upload";
                }

            }
            Custom::sendResponse($response);
            Custom::send_process_to_background();
            if ($send_notification === true && !empty($filter_array)) {
                foreach ($filter_array as $drive_folder_id => $file_array) {
                    Custom::send_notification_on_offline_save($thin_app_id, $drive_folder_id, $file_array, $mobile, $user_id);
                }
            }
        }
        exit();


    }

    public static function tab_update_offline_status()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $role_id = isset($data['role_id']) ? $data['role_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $offline_string = isset($data['offline_string']) ? $data['offline_string'] : "";
            $prescription_id = isset($data['prescription_id']) ? $data['prescription_id'] : "";
            $prescription_type = isset($data['prescription_type']) ? $data['prescription_type'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else if (empty($offline_string)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid offline string';
            } else if (empty($prescription_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid prescription id';
            } else if ($prescription_type != 'STANDARD' && $prescription_type != 'WRITING') {
                $response['status'] = 0;
                $response['message'] = 'Invalid prescription type';
            } else {

                $connection = ConnectionUtil::getConnection();
                $connection->autocommit(false);
                $result = array();
                $created = Custom::created();
                $status = "OFFLINE";
                $sql = "UPDATE tab_patient_prescriptions set prescription_type =?, offline_string=?, prescripiton_status =?, modified =? where id =?";
                $stmt = $connection->prepare($sql);
                $stmt->bind_param('sssss', $prescription_type, $offline_string, $status, $created, $prescription_id);
                if ($stmt->execute()) {
                    $connection->commit();

                    $response['status'] = 1;
                    $response['message'] = "Offline prescription saved";
                } else {
                    $connection->rollback();
                    $response['status'] = 0;
                    $response['message'] = "Sorry offline prescription could not saved";
                }


            }
            Custom::sendResponse($response);

        }
        exit();


    }

    public static function tab_add_patient_invoice()
    {
        $data = $_POST;
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            parse_str($data['form'], $data['form']);
            $new_data = $data['form'];
            $data = array_merge($new_data, $data);
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $patient_type = isset($data['patient_type']) ? $data['patient_type'] : "";
            $patient_name = isset($data['patient_name']) ? trim($data['patient_name']) : "";
            $patient_id = isset($data['patient_id']) ? trim($data['patient_id']) : "";
            $doctor_id = isset($data['doctor_id']) ? trim($data['doctor_id']) : "";
            $header = isset($data['header']) ? trim($data['header']) : "";
            $address_id = isset($data['address_id']) ? trim($data['address_id']) : "";
            $mobile = isset($data['mobile']) ? trim($data['mobile']) : "";
            $invoice_number = isset($data['invoice_number']) ? trim($data['invoice_number']) : "";
            $date = isset($data['date']) ? trim($data['date']) : "";
            $paid = isset($data['paid']) ? trim($data['paid']) : "";
            $amount_due = isset($data['amount_due']) ? trim($data['amount_due']) : "";
            $total = isset($data['total']) ? trim($data['total']) : "";
            $subtotal = isset($data['subtotal']) ? trim($data['subtotal']) : "";
            $terms = isset($data['terms']) ? trim($data['terms']) : "";
            $balance_due = isset($data['due']) ? trim($data['due']) : "";
            $folder_id = isset($data['folder_id']) ? trim($data['folder_id']) : "";
            $base64 = isset($data['base64']) ? trim($data['base64']) : "";
            $invoice_save = false;
            try {
                if (empty($thin_app_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid thinapp id';
                } else if ($patient_type != "CUSTOMER" && $patient_type != "CHILDREN") {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid patient type';
                } else if (empty($patient_name)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid patient name';
                } else if (empty($patient_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid patient id';
                } else if (!isset($data['item']) || !isset($data['description']) || !isset($data['unit_cost']) || !isset($data['quantity'])) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid item param';
                } else {

                    $connection = ConnectionUtil::getConnection();
                    $connection->autocommit(false);
                    $created = Custom::created();
                    $address_data = Custom::get_address_by_id($address_id, $thin_app_id);
                    $address = @$address_data['address'];
                    $sql = "INSERT INTO tab_patient_invoices ( thinapp_id, patient_id, patient_type, title, address, mobile, patient_name, invoice_number, invoice_date, amount_due, sub_total, total, amount_paid, balance_due, terms,  created, modified) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                    $stmt = $connection->prepare($sql);
                    $date = date('Y-m-d');
                    $stmt->bind_param('sssssssssssssssss', $thin_app_id, $patient_id, $patient_type, $header, $address, $mobile, $patient_name, $invoice_number, $date, $amount_due, $subtotal, $total, $paid, $balance_due, $terms, $created, $created);
                    if ($stmt->execute()) {
                        $invoice_id = $stmt->insert_id;
                        $saved_item = $save_address = array();

                        foreach ($data['item'] as $key => $list) {
                            $item = $list;
                            $description = $data['description'][$key];
                            $unit_cost = $data['unit_cost'][$key];
                            $quantity = ($data['quantity'][$key]) ? $data['quantity'][$key] : 0;
                            $price = ($data['price'][$key]) ? $data['price'][$key] : 0;
                            $sql = "INSERT INTO tab_patient_invoice_items (thinapp_id, tab_patient_invoice_id, item, description,  unit_cost, quantity, price, created, modified) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)";
                            $stmt_hour = $connection->prepare($sql);
                            $stmt_hour->bind_param('sssssssss', $thin_app_id, $invoice_id, $item, $description, $unit_cost, $quantity, $price, $created, $created);
                            $saved_item[] = $stmt_hour->execute();
                        }

                        /* update term & condition */
                        $sql = "UPDATE appointment_staffs set t_and_c =?, invoice_address_id =? where id =?";
                        $stmt_term = $connection->prepare($sql);
                        $stmt_term->bind_param('sss', $terms, $address_id, $doctor_id);

                        if (!in_array(false, $saved_item) && $stmt_term->execute()) {
                            $connection->commit();
                            $invoice_save = true;
                            $response['status'] = 1;
                            $response['message'] = "Invoice save successfully";

                        } else {
                            $response['status'] = 0;
                            $response['message'] = "Sorry invoice could not save";
                        }
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Sorry patient could not add";
                    }

                }
            } catch (Exception $e) {
                $response['status'] = 0;
                $response['message'] = "Something went wrong on server";
            }
            Custom::sendResponse($response);
            if (!empty($base64) && !empty($folder_id) && $invoice_save === true) {
                Custom::send_process_to_background();
                $file_path = Custom::uploadBase64FileToAws($base64);
                $get_admin_data = Custom::get_thinapp_admin_data($thin_app_id);
                $post['thin_app_id'] = $thin_app_id;
                $post['user_id'] = $get_admin_data['id'];
                $post['app_key'] = APP_KEY;
                $post['mobile'] = $get_admin_data['mobile'];
                $post['role_id'] = 5;
                $file_name = end(explode("/", $file_path));;
                $post['file_array'][0]['file_type'] = Custom::getFileType($file_path);
                $post['file_array'][0]['file_name'] = $file_name;
                $post['file_array'][0]['file_path'] = $file_path;
                $post['file_array'][0]['file_size'] = '20';
                $post['listing_type'] = "OTHER";
                $post['drive_folder_id'] = $folder_id;
                $filter_array[$folder_id][] = array('file_name' => $file_name);
                $post['category_id'] = 3;
                $res = WebservicesFunction::add_file($post, false, true);
                $res = json_decode($res, true);
                if ($res['status'] == 1) {
                    return true;
                } else {
                    return false;
                }

            }


        }
        exit();
    }

    public static function tab_add_tag()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $name = isset($data['name']) ? trim($data['name']) : "";
            $description = isset($data['description']) ? $data['description'] : "";
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : 0;
            try {
                if (empty($thin_app_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid thinapp id';
                } else if (empty($app_key)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid app key';
                } else if (empty($user_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid user id';
                } else if (empty($mobile)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid mobile';
                } else if (empty($name)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid tag name';
                } else if (empty($description)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid tag description';
                } else {
                    $created = Custom::created();
                    $connection = ConnectionUtil::getConnection();
                    $condition = " thinapp_id = $thin_app_id and status = 'ACTIVE' AND tag_for = 'TAB' and name ='$name' ";
                    if (!empty($doctor_id)) {
                        $condition .= " and doctor_id = $doctor_id";
                    }
                    $query = " select id from prescription_tags where $condition limit 1";
                    $service_message_list = $connection->query($query);
                    if (!$service_message_list->num_rows) {
                        $tag_for = 'TAB';
                        $sql = "INSERT INTO prescription_tags (thinapp_id, doctor_id, name, description,tag_for, created, modified) VALUES (?, ?, ?, ?, ?, ?, ?)";
                        $stmt = $connection->prepare($sql);
                        $stmt->bind_param('sssssss', $thin_app_id, $doctor_id, $name, $description, $tag_for, $created, $created);
                        if ($stmt->execute()) {
                            $response['status'] = 1;
                            $response['message'] = "Tag add successfully";
                            $response['tag_id'] = $stmt->insert_id;
                        } else {
                            $response['status'] = 0;
                            $response['message'] = "Sorry tag could not add";
                            $response['tag_id'] = 0;
                        }
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Tag already exist";
                        $response['tag_id'] = 0;
                    }

                }
            } catch (Exception $e) {
                $response['status'] = 0;
                $response['message'] = "Something went wrong on server";
            }
            Custom::sendResponse($response);
        }
        exit();
    }


    public static function tab_get_tag_list()
    {


        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : "";

            try {
                if (empty($thin_app_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid thinapp id';
                } else if (empty($app_key)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid app key';
                } else if (empty($user_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid user id';
                } else if (empty($mobile)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid mobile';
                } else {

                    $connection = ConnectionUtil::getConnection();
                    $condition = " thinapp_id = $thin_app_id and status = 'ACTIVE' AND tag_for = 'TAB' ";
                    if (!empty($doctor_id)) {
                        $condition .= " and doctor_id = $doctor_id";
                    }
                    $query = " select id, name, description from prescription_tags where $condition";
                    $service_message_list = $connection->query($query);
                    if ($service_message_list->num_rows) {
                        $service_list = mysqli_fetch_all($service_message_list, MYSQL_ASSOC);
                        $response['status'] = 1;
                        $response['message'] = "Tag found";
                        $response['data']['list'] = $service_list;
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "No tag found";
                    }

                }
            } catch (Exception $e) {
                $response['status'] = 0;
                $response['message'] = "Something went wrong on server";
            }
            Custom::sendResponse($response);
        }
        exit();


    }

    public static function tab_manage_tag(){
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $action_type = isset($data['action_type']) ? $data['action_type'] : "";
            $tag_id = isset($data['tag_id']) ? $data['tag_id'] : "";
            $name = isset($data['name']) ? trim($data['name']) : "";
            $description = isset($data['description']) ? ($data['description']) :"";
            $doctor_id = isset($data['doctor_id']) ? ($data['doctor_id']) :"";
            try {
                if (empty($thin_app_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid thinapp id';
                } else if (empty($app_key)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid app key';
                } else if (empty($user_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid user id';
                } else if (empty($mobile)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid mobile';
                }else if ($action_type != "UPDATE" && $action_type != "DELETE") {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid action type';
                }else if (empty($name) && ($action_type == "UPDATE")) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid tag name';
                }else if (empty($description) && ($action_type == "UPDATE")) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid tag description';
                }else if (empty($tag_id) && ($action_type == "DELETE" || $action_type == "UPDATE")) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid tag id';
                } else {

                    $return_array =array();
                    $created = Custom::created();
                    $connection = ConnectionUtil::getConnection();

                    if($action_type=="UPDATE"){

                        $connection = ConnectionUtil::getConnection();
                        $condition = " thinapp_id = $thin_app_id and status = 'ACTIVE' AND tag_for = 'TAB' and name ='$name' ";
                        if(!empty($doctor_id)){
                            $condition .= " and doctor_id = $doctor_id";
                        }
                        $query = " select id from prescription_tags where $condition limit 1";
                        $service_message_list = $connection->query($query);
                        $tag_data = mysqli_fetch_assoc($service_message_list);
                        if (empty($tag_data) || ($tag_data['id'] == $tag_id)) {
                            $sql = "UPDATE prescription_tags set name =?, description=?, modified =? where id =?";
                            $stmt = $connection->prepare($sql);
                            $stmt->bind_param('ssss', $name, $description, $created, $tag_id);
                            if($stmt->execute()){
                                $connection->commit();
                                $response['status'] = 1;
                                $response['message'] = "Tag edited successfully";
                            }else{
                                $response['status'] = 0;
                                $response['message'] = "Sorry tag could not edit";
                            }
                        }else{
                            $response['status'] = 0;
                            $response['message'] = "Tag already exist.";
                        }
                    }else{
                        $status = "INACTIVE";
                        $sql = "UPDATE prescription_tags set status =?, modified =? where id =?";
                        $stmt = $connection->prepare($sql);
                        $stmt->bind_param('sss', $status, $created, $tag_id);
                        if($stmt->execute()){
                            $connection->commit();
                            $response['status'] = 1;
                            $response['message'] = "Tag delete successfully";
                        }else{
                            $response['status'] = 0;
                            $response['message'] = "Sorry tag could not delete";
                        }
                    }
                }
            } catch (Exception $e) {
                $response['status'] = 0;
                $response['message'] = "Something went wrong on server";
            }
            Custom::sendResponse($response);
        }
        exit();
    }

    public static function tab_manage_prescription_type()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $role_id = isset($data['role_id']) ? $data['role_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $template_name = isset($data['template_name']) ? $data['template_name'] : "";
            $template_string = isset($data['template_string']) ? $data['template_string'] : "";
            $category_id = isset($data['category_id']) ? $data['category_id'] : 9;
            $sub_category_id = isset($data['sub_category_id']) ? $data['sub_category_id'] : 0;
            $action_type = isset($data['action_type']) ? $data['action_type'] : "";
            $prescription_type_id = isset($data['prescription_type_id']) ? $data['prescription_type_id'] : "";
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : 0;


            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else if (($action_type == 'ADD' || $action_type == 'UPDATE') && empty($template_name)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid template name';
            } else if (($action_type == 'ADD') && empty($template_string)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid template string';
            } else if (($action_type == 'DELETE' || $action_type == 'UPDATE') && empty($prescription_type_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid prescription type id';
            } else if ($action_type != 'ADD' && $action_type != 'UPDATE' && $action_type != 'DELETE') {
                $response['status'] = 0;
                $response['message'] = 'Invalid action type';
            } else {

                $connection = ConnectionUtil::getConnection();
                $created = Custom::created();
                $result = array();
                if ($action_type == "ADD") {
                    $template_data = Custom::get_tab_prescription_templates($thin_app_id, $category_id, $sub_category_id, $template_name, $doctor_id);
                    if (empty($template_data)) {
                        $template_type = "PATIENT_TEMPLATE";
                        $sql = "INSERT INTO tab_prescription_templates (template_type, doctor_id,thinapp_id, template_name, template_alias_name, template_id, tab_prescription_category_id, created, modified) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)";
                        $stmt = $connection->prepare($sql);
                        $stmt->bind_param('sssssssss', $template_type, $doctor_id, $thin_app_id, $template_name, $template_name, $template_string, $category_id, $created, $created);
                        if ($stmt->execute()) {
                            $response['status'] = 1;
                            $response['message'] = "Prescription save successfully";
                            $response['server_id'] = $stmt->insert_id;
                        } else {
                            $response['status'] = 0;
                            $response['message'] = "Sorry prescription could not save";
                        }
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Prescription template already exist";

                    }

                } else if ($action_type == "UPDATE") {

                    $template_data = Custom::get_tab_prescription_templates($thin_app_id, $category_id, $sub_category_id, $template_name, $doctor_id);
                    if (empty($template_data) || $template_data['id'] == $prescription_type_id) {
                        $sql = "update tab_prescription_templates set  template_name = ?, template_alias_name =?, modified =? where id =?";
                        $stmt = $connection->prepare($sql);
                        $stmt->bind_param('ssss', $template_name, $template_name, $created, $prescription_type_id);
                        if ($stmt->execute()) {
                            $response['status'] = 1;
                            $response['message'] = "Prescription updated successfully";
                        } else {
                            $response['status'] = 0;
                            $response['message'] = "Sorry prescription could not update";
                        }
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Prescription template already exist";

                    }

                } else {
                    $status = 'INACTIVE';
                    $sql = "update tab_prescription_templates set  status = ?, modified =? where id =?";
                    $stmt = $connection->prepare($sql);
                    $stmt->bind_param('sss', $status, $created, $prescription_type_id);
                    if ($stmt->execute()) {
                        $response['status'] = 1;
                        $response['message'] = "Template delete successfully";
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Sorry prescription could not delete";
                    }
                }
            }
            Custom::sendResponse($response);

        }
        exit();


    }


    /* TAB API END */

    public static function get_app_features_list()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $role_id = isset($data['role_id']) ? $data['role_id'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else {

                $query = "select aft.id, aft.label_value as name, aft.price, aft.description, IF(aef.id IS NULL,'NO','YES') as disable  from app_functionality_types as aft left join app_enable_functionalities as aef on aef.app_functionality_type_id = aft.id and aef.thinapp_id = $thin_app_id where status = 'Y' and  price > 0 having disable ='NO'";
                $connection = ConnectionUtil::getConnection();
                $service_message_list = $connection->query($query);
                if ($service_message_list->num_rows) {
                    $list = mysqli_fetch_all($service_message_list, MYSQLI_ASSOC);
                    $response['status'] = 1;
                    $response['message'] = "Features list found";
                    $response['data']['list'] = $list;
                } else {
                    $response['status'] = 0;
                    $response['message'] = "No features list found";
                }

            }
            Custom::sendResponse($response);
        }
        exit();


    }


    public static function buy_app_feature()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $feature_id = isset($data['feature_id']) ? $data['feature_id'] : "";
            $payment_status = isset($data['payment_status']) ? $data['payment_status'] : "";
            $price = isset($data['price']) ? $data['price'] : "";
            $remark = isset($data['remark']) ? $data['remark'] : "";
            $transaction_id = isset($data['transaction_id']) ? $data['transaction_id'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($feature_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid feature id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else if (empty($transaction_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid transaction id';
            } else if ($payment_status != "SUCCESS" && $payment_status != "FAILURE") {
                $response['status'] = 0;
                $response['message'] = 'Invalid payment status';
            } else if (empty($price)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid price';
            } else {
                $created = Custom::created();
                $result = array();
                $feature_add = array();
                $connection = ConnectionUtil::getConnection();
                $connection->autocommit(false);
                $ids_array = explode(',', $feature_id);
                foreach ($ids_array as $key => $feature_id) {
                    $sql = "INSERT INTO app_features_payments (user_id, thinapp_id, app_enable_functionality_id, total_price, remark, transaction_id, transaction_status, created, modified) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)";
                    $stmt = $connection->prepare($sql);
                    $stmt->bind_param('sssssssss', $user_id, $thin_app_id, $feature_id, $price, $remark, $transaction_id, $payment_status, $created, $created);
                    $result[] = $stmt->execute();

                    if ($payment_status == "SUCCESS") {
                        $sql = "INSERT INTO app_enable_functionalities (thinapp_id, app_functionality_type_id) VALUES (?, ?)";
                        $stmt1 = $connection->prepare($sql);
                        $stmt1->bind_param('ss', $thin_app_id, $feature_id);
                        $feature_add[] = $stmt1->execute();
                    }
                }


                if (!in_array(false, $result) && !in_array(false, $feature_add)) {
                    $connection->commit();
                    $response['status'] = 1;
                    if ($payment_status == "SUCCESS") {
                        WebservicesFunction::deleteJson(array('get_app_enabled_functionality_' . $thin_app_id), 'permission');
                        $response['message'] = "Feature add successfully";
                    } else {
                        $response['message'] = "Sorry, feature could not add.";
                    }
                } else {
                    $response['status'] = 0;
                    $response['message'] = "Sorry, feature could not add";
                }

            }
            Custom::sendResponse($response);
        }
        exit();


    }

    /* MENGAGE HOSPITAL MODULE START FROM HERE ADD BY MUNNA */
    public static function hospital_manage_department()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $name = isset($data['name']) ? trim($data['name']) : "";
            $image = isset($data['image']) ? $data['image'] : "";
            $department_id = isset($data['department_id']) ? $data['department_id'] : 0;
            $action_type = isset($data['action_type']) ? $data['action_type'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (($action_type == "UPDATE" || $action_type == "ADD") && empty($name)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter department name';
            } else if ($action_type != "ADD" && $action_type != "UPDATE" && $action_type != "DELETE") {
                $response['status'] = 0;
                $response['message'] = 'Invalid action type';
            } else if (($action_type == "UPDATE" || $action_type == "DELETE") && empty($department_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid department id';
            } else {

                $image = Custom::check_image_path_string($image);
                $connection = ConnectionUtil::getConnection();
                if ($action_type == "ADD" || $action_type == "UPDATE") {
                    $condition = "";
                    if ($action_type == "UPDATE") {
                        $condition = " and id != $department_id ";
                    }
                    $query = "select id from appointment_categories where thinapp_id = $thin_app_id and status = 'ACTIVE' and  name ='$name' $condition";
                    $service_message_list = $connection->query($query);
                    if (!$service_message_list->num_rows) {
                        $created = Custom::created();
                        if ($action_type == "ADD") {
                            $sql = "INSERT INTO appointment_categories (thinapp_id, user_id, name, image, created, modified  ) VALUES (?, ?, ?, ?, ?, ?)";
                            $stmt = $connection->prepare($sql);
                            $stmt->bind_param('ssssss', $thin_app_id, $user_id, $name, $image, $created, $created);
                        } else {
                            $sql = "UPDATE appointment_categories set name=?, image=?, modified =? where id =?";
                            $stmt = $connection->prepare($sql);
                            $stmt->bind_param('ssss', $name, $image, $created, $department_id);
                        }
                        $label = ($action_type == "ADD") ? "added" : "edit";
                        if ($stmt->execute()) {
                            $response['status'] = 1;
                            $response['message'] = "Department $label successfully";
                        	Custom::delete_hospital_cache($thin_app_id);
                        } else {
                            $response['status'] = 0;
                            $response['message'] = "Sorry department could not $label";
                        }
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Department already exist with this name";
                    }
                } else {
                    $status = "INACTIVE";
                    $created = Custom::created();
                    $sql = "UPDATE appointment_categories set status=?, modified =? where id =?";
                    $stmt = $connection->prepare($sql);
                    $stmt->bind_param('sss', $status, $created, $department_id);
                    if ($stmt->execute()) {
                        $response['status'] = 1;
                        $response['message'] = "Department deleted successfully";
                    	Custom::delete_hospital_cache($thin_app_id);
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Sorry department could not deleted";
                    }
                }


            }
            Custom::sendResponse($response);
        }
        exit();


    }

    public static function hospital_department_alpha_list()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $branch_id = isset($data['branch_id']) ? $data['branch_id'] : 0;
            $user_role = isset($data['user_role']) ? $data['user_role'] : "";


            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter mobile';
            } else {

                $response = $response_data = array();

                if (!empty($branch_id)) {
                    $condition = " and aaa.appointment_address_id = $branch_id";
                }

                if ($user_role != 'ADMIN') {
                    $condition .= " AND ac.name != 'RECEPTIONIST' ";
                }


                $query = "select * from ( (select '#' AS charactor) UNION ALL  (select DISTINCT(UPPER(LEFT(ac.name, 1))) as charactor from appointment_categories as ac left join appointment_address_associate as aaa on aaa.appointment_category_id = ac.id  where ac.thinapp_id = $thin_app_id and ac.status = 'ACTIVE' $condition )) as t order by t.charactor asc";
                $connection = ConnectionUtil::getConnection();
                $subscriber = $connection->query($query);
                if ($subscriber->num_rows) {
                    $response['status'] = 1;
                    $response['message'] = "Alphabets list found";
                    $response['data']['alphabet'] = mysqli_fetch_all($subscriber, MYSQLI_ASSOC);
                } else {
                    $response['status'] = 0;
                    $response['message'] = "No child list found";
                }

            }
            echo Custom::sendResponse($response);

        }
        exit();
    }

    public static function hospital_get_department_list()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $role_id = isset($data['role_id']) ? $data['role_id'] : "";
            $offset = isset($data['offset']) ? $data['offset'] : "";
            $search = isset($data['search']) ? $data['search'] : "";
            $request_from = isset($data['request_from']) ? $data['request_from'] : "";
            $address_id = isset($data['address_id']) ? $data['address_id'] : 0;
            $branch_id = isset($data['branch_id']) ? $data['branch_id'] : 0;
            $user_role = isset($data['user_role']) ? $data['user_role'] : "";
            $show_all_department = isset($data['show_all_department']) ? $data['show_all_department'] : "NO";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else if ($request_from != "SEARCH" && $request_from != "INDEX") {
                $response['status'] = 0;
                $response['message'] = 'Invalid search request';
            } else {
                $connection = ConnectionUtil::getConnection();
                $condition = "";


                if (!empty($branch_id)) {
                    // $condition .= " and aaa.appointment_address_id = $branch_id";
                }

                /* start adding search parameter to query */
                if ($search != "#" && !empty($search)) {
                    if ($request_from == "INDEX") {
                        $condition .= " AND name LIKE '$search%' ";
                    } else if ($request_from == "SEARCH") {
                        $condition .= " AND name LIKE '%$search%' ";
                    }
                }

                if ($user_role == 'USER' || $user_role == 'DOCTOR') {
                    $condition .= " AND name != 'RECEPTIONIST' ";
                }

                $query = "select ac.id,ac.name,ac.image, IF(aaa.id IS NOT NULL, 'YES','NO') as is_associated from appointment_categories as ac left join appointment_address_associate as aaa on aaa.appointment_category_id = ac.id and aaa.appointment_address_id = $address_id  where ac.thinapp_id = $thin_app_id and ac.status = 'ACTIVE' $condition group by ac.id  order by ac.name asc";


                $data_list = $connection->query($query);
                if ($data_list->num_rows) {
                    $list = mysqli_fetch_all($data_list, MYSQLI_ASSOC);
                    $response['status'] = 1;
                    $response['message'] = "Department list found";
                    $response['data']['list'] = $list;
                } else {
                    $response['status'] = 0;
                    $response['message'] = "Department list not found.";
                }
            }
            Custom::sendResponse($response);
        }
        exit();
    }

    public static function hospital_manage_address()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $place = isset($data['place']) ? strtoupper(trim($data['place'])) : "";
            $address = isset($data['address']) ? $data['address'] : "";
            $country_id = isset($data['country_id']) ? $data['country_id'] : "";
            $state_id = isset($data['state_id']) ? $data['state_id'] : "";
            $city_id = isset($data['city_id']) ? $data['city_id'] : "";
            $latitude = isset($data['latitude']) ? $data['latitude'] : 0;
            $longitude = isset($data['longitude']) ? $data['longitude'] : "";
            $address_id = isset($data['address_id']) ? $data['address_id'] : "";
            $action_type = isset($data['action_type']) ? strtoupper($data['action_type']) : "";
            $image = isset($data['image']) ? $data['image'] : "";
            $department_string = isset($data['department_string']) ? $data['department_string'] : "";
            $pincode = isset($data['pincode']) ? $data['pincode'] : "";
            $contact_number = isset($data['contact_number']) ? $data['contact_number'] : "";
            $emergency_number = isset($data['emergency_number']) ? $data['emergency_number'] : "";


            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else if ($action_type != "ADD" && $action_type != "UPDATE" && $action_type != "DELETE") {
                $response['status'] = 0;
                $response['message'] = 'Invalid action type.';
            } else if ($action_type != "DELETE" && empty($address)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter address.';
            } else if ($action_type != "DELETE" && (empty($address) || empty($latitude) || empty($longitude))) {
                $response['status'] = 0;
                $response['message'] = 'Please select address from map';
            } else if ($action_type != "DELETE" && empty($country_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please select country.';
            } else if ($action_type != "DELETE" && empty($state_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please select state.';
            } else if ($action_type != "DELETE" && empty($city_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please select city.';
            } else if ($action_type != "DELETE" && empty($place)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter place.';
            } else if (($action_type == "DELETE" || $action_type == "UPDATE") && empty($address_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter address id.';
            } else {
                $connection = ConnectionUtil::getConnection();
                $image = Custom::check_image_path_string($image);

                if ($action_type == "ADD" || $action_type == "UPDATE") {
                    if (!Custom::is_appointment_address_exist($thin_app_id, $place, $address, $address_id, $country_id, $state_id, $city_id)) {
                        $connection->autocommit(false);
                        $created = Custom::created();
                        if ($action_type == "ADD") {
                            $sql = "INSERT INTO appointment_addresses (pincode, contact_number, emergency_number, image, thinapp_id, place, address, country_id, state_id, city_id, latitude, longitude, created, modified) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                            $stmt_sub = $connection->prepare($sql);
                            $stmt_sub->bind_param('ssssssssssssss', $pincode, $contact_number, $emergency_number, $image, $thin_app_id, $place, $address, $country_id, $state_id, $city_id, $latitude, $longitude, $created, $created);
                        } else {
                            $sql = "UPDATE  appointment_addresses set pincode =?, contact_number =?, emergency_number =?, image = ?, place = ?, address = ?, country_id =?, state_id =?, city_id =?, latitude=?, longitude=?, modified = ? where id = ?";
                            $stmt_sub = $connection->prepare($sql);
                            $stmt_sub->bind_param('sssssssssssss', $pincode, $contact_number, $emergency_number, $image, $place, $address, $country_id, $state_id, $city_id, $latitude, $longitude, $created, $address_id);
                        }
                        $label = ($action_type == "ADD") ? "saved" : "edit";

                        if ($stmt_sub->execute()) {
                            if ($action_type == "ADD") {
                                $address_id = $stmt_sub->insert_id;
                            }

                            /* this code add add department to address start */
                            $result_array = array();
                            $sql = "delete from  appointment_address_associate  where appointment_address_id = ? and thinapp_id = ?";
                            $stmt_del = $connection->prepare($sql);
                            $stmt_del->bind_param('ss', $address_id, $thin_app_id);
                            $stmt_del->execute();
                            if (!empty($department_string)) {
                                $department_ids = explode(",", $department_string);
                                foreach ($department_ids as $key => $id) {
                                    $sql = "INSERT INTO appointment_address_associate (thinapp_id, appointment_category_id, appointment_address_id, created, modified) VALUES (?, ?, ?, ?, ?)";
                                    $stmt_depart = $connection->prepare($sql);
                                    $stmt_depart->bind_param('sssss', $thin_app_id, $id, $address_id, $created, $created);
                                    if ($stmt_depart->execute()) {
                                        $result_array[] = true;
                                    } else {
                                        $result_array[] = false;
                                    }
                                }
                            }
                            /* this code add add depratment to address end */
                            if (!in_array(false, $result_array)) {
                                $connection->commit();
                                $response['status'] = 1;
                                $response['message'] = "Address $label successfully";
                            } else {
                                $connection->rollback();
                                $response['status'] = 0;
                                $response['message'] = "Address could not $label";
                            }

                        } else {
                            $response['status'] = 0;
                            $response['message'] = "Address could not $label";
                        }
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Address already exist";
                    }
                } else {
                    $status = "INACTIVE";
                    $created = Custom::created();
                    $sql = "UPDATE appointment_addresses set status=?, modified =? where id =?";
                    $stmt = $connection->prepare($sql);
                    $stmt->bind_param('sss', $status, $created, $address_id);
                    if ($stmt->execute()) {
                        $response['status'] = 1;
                        $response['message'] = "Address deleted successfully";
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Sorry address could not deleted";
                    }
                }


            }
            Custom::sendResponse($response);
        }
        exit();


    }

    public static function hospital_get_address_list()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : 0;
            $offset = isset($data['offset']) ? $data['offset'] : "";
            $search = isset($data['search']) ? $data['search'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else {
                $connection = ConnectionUtil::getConnection();
                $condition = "";
                if (!empty($search)) {
                    $condition = " and ( aa.address like '%$search%' OR aa.place like '%$search%') ";
                }


                if (Custom::check_app_enable_permission($thin_app_id, 'NEW_QUICK_APPOINTMENT')) {
                    $query = "select IF(das.id IS NOT NULL, 'YES','NO') as is_associated, aa.latitude, aa.longitude, aa.id,aa.place,aa.address,aa.image,aa.country_id, aa.state_id, aa.city_id, c.name as country_name, s.name as state_name, city.name as city_name, aa.pincode,aa.contact_number, aa.contact_number, aa.emergency_number from appointment_addresses as aa join countries as c on c.id = aa.country_id join states as s on s.id = aa.state_id join cities as city on city.id = aa.city_id  left join doctor_appointment_setting as das on das.appointment_address_id = aa.id and das.doctor_id = $doctor_id AND das.setting_type = ( select app_staf.appointment_setting_type from  appointment_staffs as app_staf where app_staf.id = das.doctor_id )  and das.index_number = 1 where aa.thinapp_id = $thin_app_id and aa.status = 'ACTIVE' group by aa.id  order by aa.id desc";
                } else {
                    $query = "select IF(ass.id IS NOT NULL, 'YES','NO') as is_associated, aa.latitude, aa.longitude, aa.id,aa.place,aa.address,aa.image,aa.country_id, aa.state_id, aa.city_id, c.name as country_name, s.name as state_name, city.name as city_name, aa.pincode,aa.contact_number, aa.contact_number, aa.emergency_number from appointment_addresses as aa join countries as c on c.id = aa.country_id join states as s on s.id = aa.state_id join cities as city on city.id = aa.city_id  left join appointment_staff_addresses as ass on ass.appointment_address_id = aa.id and ass.appointment_staff_id = $doctor_id where aa.thinapp_id = $thin_app_id and aa.status = 'ACTIVE' $condition order by aa.id desc";
                }


                $data_list = $connection->query($query);
                if ($data_list->num_rows) {
                    $list = mysqli_fetch_all($data_list, MYSQLI_ASSOC);
                    $response['status'] = 1;
                    $response['message'] = "Address list found";
                    $response['data']['list'] = $list;
                } else {
                    $response['status'] = 0;
                    $response['message'] = "Address list not found.";
                }
            }
            Custom::sendResponse($response);
        }
        exit();
    }

    public static function hospital_manage_doctor_profile()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $name = isset($data['name']) ? $data['name'] : "";
            $sub_title = isset($data['education']) ? $data['education'] : "";
            $profile_photo = isset($data['profile_photo']) ? $data['profile_photo'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $doctor_mobile = isset($data['doctor_mobile']) ? $data['doctor_mobile'] : "";
            $address = isset($data['address']) ? $data['address'] : "";
            $country_code = isset($data['country_code']) ? $data['country_code'] : "";
            $description = isset($data['description']) ? $data['description'] : "";
            $enable_chat = isset($data['enable_chat']) ? $data['enable_chat'] : "";
            $experience = isset($data['experience']) ? $data['experience'] : "";
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : 0;
            $action_type = isset($data['action_type']) ? strtoupper(strtolower($data['action_type'])) : "";
            $department_id = isset($data['department_id']) ? $data['department_id'] : "";
            $address_id = isset($data['address_id']) ? $data['address_id'] : "";
            $show_mobile = isset($data['show_mobile']) ? $data['show_mobile'] : "YES";
            $show_fees = isset($data['show_fees']) ? $data['show_fees'] : "YES";
            $show_appointment_time = isset($data['show_appointment_time']) ? $data['show_appointment_time'] : "YES";
            $fees = isset($data['fees']) ? $data['fees'] : 0;
            $email = isset($data['email']) ? $data['email'] : "";
            $registration_number = isset($data['registration_number']) ? $data['registration_number'] : "";
            $role = isset($data['role']) ? $data['role'] : "DOCTOR";
            $country_id = isset($data['country_id']) ? $data['country_id'] : 0;
            $state_id = isset($data['state_id']) ? $data['state_id'] : 0;
            $city_id = isset($data['city_id']) ? $data['city_id'] : 0;
            $category_id = isset($data['category_id']) ? $data['category_id'] : 0;
            $current_working = isset($data['current_working']) ? $data['current_working'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter user id';
            } else if ($action_type != "DELETE" && empty($name)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter name';
            } else if ($action_type != "ADD" && $action_type != "UPDATE" && $action_type != "DELETE") {
                $response['status'] = 0;
                $response['message'] = 'Invalid action type';
            } else if (($action_type != "DELETE") && ($role != "DOCTOR" && $role != "RECEPTIONIST")) {
                $response['status'] = 0;
                $response['message'] = 'Invalid staff role';
            } else if (($action_type == "UPDATE" || $action_type == "DELETE") && empty($doctor_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid doctor id';
            } else if ($action_type != "DELETE" && (empty($doctor_mobile) || !Custom::create_mobile_number($doctor_mobile))) {
                $response['status'] = 0;
                $response['message'] = 'Please enter valid mobile number';
            } else if ($action_type != "DELETE" && empty($country_code)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter country code';
            } else if ($action_type != "DELETE" && empty($enable_chat)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid enable chat option';
            } else {
                try {

                    $msg_label = ($role == "DOCTOR") ? "doctor" : "receptionist";
                    $connection = ConnectionUtil::getConnection();
                    if ($action_type == "ADD") {
                        $is_allowed_add_doc = Custom::is_allowed_add_doc($thin_app_id);
                        if ($role == 'DOCTOR' && $is_allowed_add_doc > 0) {
                            $response['status'] = 0;
                            $response['message'] = "You have opted $is_allowed_add_doc doctor's package,Kindly inactive existing doctor to add new";
                        } else {
                            $doctor_mobile = Custom::create_mobile_number($doctor_mobile);
                            $created = Custom::created();
                            $working_days = Custom::getAllAppointmentDay();
                            if (!empty($working_days)) {

                                $is_staff_exist = Custom::get_doctor_record_by_mobile($doctor_mobile, $thin_app_id);
                                if (empty($is_staff_exist) || $is_staff_exist['status'] == "INACTIVE") {

                                    $connection->autocommit(FALSE);
                                    $app_user_id = Custom::get_user_by_mobile($thin_app_id, $doctor_mobile);
                                    $app_user_id = !empty($app_user_id) ? $app_user_id['id'] : 0;
                                    $profile_photo = Custom::check_image_path_string($profile_photo);
                                    if (empty($is_staff_exist)) {

                                        if ($app_user_id == 0) {
                                            $user_role_id = 1;
                                            $sql = "INSERT INTO users (role_id, username, mobile, thinapp_id, created, modified) VALUES (?, ?, ?, ?, ?, ?)";
                                            $stmt_user = $connection->prepare($sql);
                                            $stmt_user->bind_param('ssssss', $user_role_id, $name, $doctor_mobile, $thin_app_id, $created, $created);
                                            if ($stmt_user->execute()) {
                                                $app_user_id = $stmt_user->insert_id;
                                            }
                                        }

                                        $add_from = "HOSPITAL_APP";
                                        $password = md5(substr($doctor_mobile, -10));
                                        $sql = "INSERT INTO appointment_staffs (current_working, show_appointment_time, department_category_id, country_id, state_id, city_id, password, staff_type, registration_number, email, fees, show_mobile, show_fees, appointment_category_id, add_from, user_id, thinapp_id, experience, `name`,  sub_title, profile_photo, address, mobile, country_code, description, enable_chat, created, modified) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                                        $stmt = $connection->prepare($sql);
                                        $stmt->bind_param('ssssssssssssssssssssssssssss', $current_working, $show_appointment_time, $category_id, $country_id, $state_id, $city_id, $password, $role, $registration_number, $email, $fees, $show_mobile, $show_fees, $department_id, $add_from, $app_user_id, $thin_app_id, $experience, $name, $sub_title, $profile_photo, $address, $doctor_mobile, $country_code, $description, $enable_chat, $created, $created);
                                        if ($stmt->execute()) {
                                            $app_staff_id = $stmt->insert_id;
                                            $saved_hours = $save_address = array();

                                            foreach ($working_days as $key => $day) {
                                                $day_id = $day['id'];
                                                $time_from = APPOINTMENT_WORKING_START_TIME;
                                                $time_to = APPOINTMENT_WORKING_END_TIME;
                                                $sql = "INSERT INTO appointment_staff_hours (thinapp_id, user_id, appointment_staff_id, appointment_day_time_id,  time_from, time_to, created, modified) VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
                                                $stmt_hour = $connection->prepare($sql);
                                                $stmt_hour->bind_param('ssssssss', $thin_app_id, $user_id, $app_staff_id, $day_id, $time_from, $time_to, $created, $created);
                                                $saved_hours[] = $stmt_hour->execute();
                                            }

                                            if (!empty($address_id)) {
                                                $address_array = explode(',', $address_id);
                                                if (!empty($address_array) && count($address_array) > 0) {

                                                    foreach ($address_array as $key => $address_id) {
                                                        if ($address_id > 0) {

                                                            $time_from = APPOINTMENT_WORKING_START_TIME;
                                                            $time_to = APPOINTMENT_WORKING_END_TIME;
                                                            $sql = "INSERT INTO appointment_staff_addresses (thinapp_id, appointment_staff_id, appointment_address_id,  from_time, to_time, created) VALUES (?, ?, ?, ?, ?, ?)";
                                                            $stmt_address = $connection->prepare($sql);
                                                            $stmt_address->bind_param('ssssss', $thin_app_id, $app_staff_id, $address_id, $time_from, $time_to, $created);
                                                            $save_address[] = $stmt_address->execute();

                                                        }
                                                    }
                                                }
                                            }


                                            if (!in_array(false, $saved_hours) && !in_array(false, $save_address)) {
                                                $connection->commit();
                                                $response['status'] = 1;
                                                $response['message'] = ucfirst($msg_label) . " add successfully";
                                                $response['data']['staff_id'] = $app_staff_id;
                                            	Custom::delete_doctor_cache($app_staff_id);
                                            } else {
                                                $connection->rollback();
                                                $response['status'] = 0;
                                                $response['message'] = "Sorry $msg_label could not add";
                                            }
                                        } else {
                                            $response['status'] = 0;
                                            $response['message'] = "Sorry $msg_label could not add";
                                        }
                                    } else {


                                        $saved_hours = $save_address = array();
                                        $status = 'ACTIVE';
                                        $doctor_id = $is_staff_exist['id'];
                                        $sql = "update appointment_staffs set current_working =?, show_appointment_time =?, department_category_id =?, country_id =?, state_id =?, city_id =?, staff_type = ?, registration_number =?, email =?, fees =?, show_mobile =?, show_fees =?, appointment_category_id=?, experience =?, name =?,  sub_title =?, profile_photo =?, address =?, description =?, enable_chat =?, status = ?, modified =? where id = ?";
                                        $stmt = $connection->prepare($sql);
                                        $stmt->bind_param('sssssssssssssssssssssss', $current_working, $show_appointment_time, $category_id, $country_id, $state_id, $city_id, $role, $registration_number, $email, $fees, $show_mobile, $show_fees, $department_id, $experience, $name, $sub_title, $profile_photo, $address, $description, $enable_chat, $status, $created, $doctor_id);

                                        $sql = "delete from appointment_staff_addresses where appointment_staff_id =?";
                                        $stmt_delete_add = $connection->prepare($sql);
                                        $stmt_delete_add->bind_param('s', $doctor_id);


                                        if (!empty($address_id)) {
                                            $address_array = explode(',', $address_id);
                                            if (!empty($address_array) && count($address_array) > 0) {

                                                foreach ($address_array as $key => $address_id) {
                                                    if ($address_id > 0) {

                                                        $time_from = APPOINTMENT_WORKING_START_TIME;
                                                        $time_to = APPOINTMENT_WORKING_END_TIME;
                                                        $sql = "INSERT INTO appointment_staff_addresses (thinapp_id, appointment_staff_id, appointment_address_id,  from_time, to_time, created) VALUES (?, ?, ?, ?, ?, ?)";
                                                        $stmt_address = $connection->prepare($sql);
                                                        $stmt_address->bind_param('ssssss', $thin_app_id, $doctor_id, $address_id, $time_from, $time_to, $created);
                                                        $save_address[] = $stmt_address->execute();

                                                    }
                                                }
                                            }
                                        }


                                        if ($stmt->execute() && $stmt_delete_add->execute() && !in_array(false, $save_address)) {
                                            $connection->commit();
                                            $response['status'] = 1;
                                            $response['message'] = ucfirst($msg_label) . " add successfully";
                                            Custom::delete_doctor_cache($doctor_id);

                                        } else {
                                            $connection->rollback();
                                            $response['status'] = 0;
                                            $response['message'] = "Sorry $msg_label could not add";
                                        }
                                    }


                                } else {
                                    $label = ($is_staff_exist['staff_type'] == "RECEPTIONIST") ? "receptionist" : "doctor";
                                    $response['status'] = 0;

                                    $response['message'] = "This number already registered as a $label";
                                }
                            } else {
                                $response['status'] = 0;
                                $response['message'] = "Sorry no working day available";
                            }
                        }

                    } else if ($action_type == "UPDATE") {
                        $doctor_mobile = Custom::create_mobile_number($doctor_mobile);
                        $created = Custom::created();
                        $connection->autocommit(false);
                        $update_address = array();
                        $is_staff_exist = Custom::get_doctor_by_mobile($doctor_mobile, $thin_app_id);
                        if ($is_staff_exist['id'] == $doctor_id || empty($is_staff_exist)) {


                            $exist_address_id = Custom::get_doctor_address_id($doctor_id);
                            $delete_ids = array();


                            if (!empty($address_id)) {
                                $address_array = explode(',', $address_id);
                                $tmp_array = $address_array;
                                if (!empty($address_array) && count($address_array) > 0) {
                                    foreach ($address_array as $key => $address_id) {
                                        if (!in_array($address_id, $exist_address_id)) {
                                            $time_from = APPOINTMENT_WORKING_START_TIME;
                                            $time_to = APPOINTMENT_WORKING_END_TIME;
                                            $sql = "INSERT INTO appointment_staff_addresses (thinapp_id, appointment_staff_id, appointment_address_id,  from_time, to_time, created) VALUES (?, ?, ?, ?, ?, ?)";
                                            $stmt_address = $connection->prepare($sql);
                                            $stmt_address->bind_param('ssssss', $thin_app_id, $doctor_id, $address_id, $time_from, $time_to, $created);
                                            $update_address[] = $stmt_address->execute();
                                        } else {
                                            $key = array_search($address_id, $exist_address_id);
                                            if ($key !== false) {
                                                unset($exist_address_id[$key]);
                                            }

                                        }
                                    }

                                }
                            }
                            $delete_status = true;
                            if (!empty($exist_address_id)) {
                                $tmp = array();
                                foreach ($exist_address_id as $key => $address_id) {
                                    $sql = "delete from appointment_staff_addresses  where appointment_staff_id = ? and appointment_address_id =?";
                                    $stmt_delete = $connection->prepare($sql);
                                    $stmt_delete->bind_param('ss', $doctor_id, $address_id);
                                    $tmp[] = $stmt_delete->execute();
                                }
                                if (!in_array(false, $tmp)) {
                                    $delete_status = true;
                                } else {
                                    $delete_status = false;
                                }
                            }

                            $app_user_id = Custom::get_user_by_mobile($thin_app_id, $doctor_mobile);
                            $app_user_id = !empty($app_user_id) ? $app_user_id['id'] : 0;
                            $profile_photo = Custom::check_image_path_string($profile_photo);
                            $sql = "update appointment_staffs set current_working =?, department_category_id =?, country_id =?, state_id =?, city_id =?, staff_type =?, registration_number =?, email =?, fees =?, show_mobile =?, show_fees =?, appointment_category_id=?, user_id=?, experience =?, name =?,  sub_title =?, profile_photo =?, address =?, mobile =?, country_code =?, description =?, enable_chat =?, modified =? where id = ?";
                            $stmt = $connection->prepare($sql);
                            $stmt->bind_param('ssssssssssssssssssssssss', $current_working, $category_id, $country_id, $state_id, $city_id, $role, $registration_number, $email, $fees, $show_mobile, $show_fees, $department_id, $app_user_id, $experience, $name, $sub_title, $profile_photo, $address, $doctor_mobile, $country_code, $description, $enable_chat, $created, $doctor_id);
                            if ($stmt->execute() && !in_array(false, $update_address) && $delete_status === true) {

                                $connection->commit();
                                $response['status'] = 1;
                                $response['message'] = "Doctor edit successfully";
                                Custom::delete_doctor_cache($doctor_id);
                            } else {
                                $connection->rollback();
                                $response['status'] = 0;
                                $response['message'] = "Sorry doctor could not edit";
                            }
                        } else {
                            $label = ($is_staff_exist['staff_type'] == "RECEPTIONIST") ? "receptionist" : "doctor";
                            $response['status'] = 0;
                            $response['message'] = "This number already registered as a $label";
                        }
                    } else {
                        $status = "INACTIVE";
                        $created = Custom::created();
                        $sql = "update appointment_staffs set status =?, modified =? where id = ?";
                        $stmt = $connection->prepare($sql);
                        $stmt->bind_param('sss', $status, $created, $doctor_id);
                        if ($stmt->execute()) {
                            $response['status'] = 1;
                            $response['message'] = "Doctor deleted successfully";
                            Custom::delete_doctor_cache($doctor_id);

                        } else {
                            $response['status'] = 0;
                            $response['message'] = "Sorry doctor could not deleted";
                        }
                    }


                } catch (Exception $e) {

                }
            }
            Custom::sendResponse($response);
        }
        exit();

    }

	public static function hospital_get_doctor_list()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);


        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $offset = isset($data['offset']) ? $data['offset'] : "";
            $search = isset($data['search']) ? $data['search'] : "";
            $user_role = isset($data['user_role']) ? $data['user_role'] : "";
            $branch_id = isset($data['branch_id']) ? $data['branch_id'] : 0;
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : 0;
            $request_from = isset($data['request_from']) ? $data['request_from'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else {
                $connection = ConnectionUtil::getConnection();
                $condition = $branch_condition = "";
            	$branch_id = 0;

                $file_name = "hospital_get_doctor_list_$thin_app_id"."_".$user_role;
                if(true){
                    if ($user_role != "ADMIN") {
                        $condition .= " and app_staff.staff_type = 'DOCTOR' and app_staff.visible_for IN('BOTH','APP') ";
                    }

                	$condition .= " AND app_staff.show_time_slot_to_patient = 'YES' ";
                
                    /* start adding search parameter to query */
                    if (!empty($search)) {
                        $condition .= " AND ( app_staff.name LIKE '%$search%' OR dep_cat.name like '%$search%' )";
                    }

                    if (Custom::check_app_enable_permission($thin_app_id, 'NEW_QUICK_APPOINTMENT')) {
                        if (!empty($branch_id)) {
                            $branch_condition = " and ds.appointment_address_id = $branch_id ";
                        }
                        $setting_join = ($request_from == "CLINIC") ? " join " : " left join ";
                        $status = " (select  if(count(*) > 0 ,'Online','Offline') as time_string from doctor_appointment_setting as das join appointment_staffs  as app_sta on das.doctor_id = app_sta.id and das.setting_type = app_sta.appointment_setting_type and (das.appointment_day_time_id > 0 OR DATE(das.appointment_date) >= DATE(NOW()) ) where  das.doctor_id = app_staff.id and das.index_number = 1 and das.`status` ='ACTIVE' and TIME(NOW()) BETWEEN das.from_time and das.to_time) as status ";
                        $timing = " (select  GROUP_CONCAT(CONCAT(DATE_FORMAT(das.from_time,'%h:%i %p'),' - ', DATE_FORMAT(das.to_time,'%h:%i %p'))) as time_string from doctor_appointment_setting as das join appointment_staffs  as app_sta on das.doctor_id = app_sta.id and das.setting_type = app_sta.appointment_setting_type  where  das.doctor_id = app_staff.id and das.index_number = 1 and das.`status` ='ACTIVE' ) as timing ";
                        $query = "select $status, $timing, app_staff.allow_emergency_appointment, app_staff.current_working, app_staff.id as doctor_id, app_staff.sub_title as sub_title, app_staff.staff_type,  REPLACE(REPLACE(REPLACE(REPLACE(app_staff.name,'Dr',''),'.',''),'Doctor',''),' ','') AS sort_order, app_staff.name, SUBSTRING(app_staff.mobile,-10) as mobile, app_staff.profile_photo, app_staff.profile_photo as image, IFNULL(dep_cat.name,'N/A') as category, u.firebase_token, enable_chat as show_chat, show_mobile, show_fees from appointment_staffs as app_staff left join appointment_categories as dep_cat on dep_cat.id = app_staff.appointment_category_id and dep_cat.status='ACTIVE' $setting_join doctor_appointment_setting AS ds ON ds.doctor_id = app_staff.id and  app_staff.appointment_setting_type=ds.setting_type AND ( (ds.setting_type = 'DAY' and DAYOFWEEK(NOW()) = ds.appointment_day_time_id ) OR (ds.setting_type ='DATE' and  ds.appointment_date = DATE(NOW())) ) left join users as u on u.mobile = app_staff.mobile and u.thinapp_id = app_staff.thinapp_id where app_staff.thinapp_id = $thin_app_id  and app_staff.status = 'ACTIVE' $condition $branch_condition group by app_staff.id order by sort_order asc";

                    } else {
                        if (!empty($branch_id)) {
                            $branch_condition = " and asa.appointment_address_id = $branch_id ";
                        }
                        $query = "SELECT IF(ash.status='OPEN','Online','Offline') AS status, IFNULL(CONCAT(asa.from_time,' - ', asa.to_time),'') as timing, app_staff.allow_emergency_appointment, app_staff.current_working, app_staff.id as doctor_id, app_staff.sub_title as sub_title, app_staff.staff_type,  REPLACE(REPLACE(REPLACE(REPLACE(app_staff.name,'Dr',''),'.',''),'Doctor',''),' ','') AS sort_order, app_staff.name, SUBSTRING(app_staff.mobile,-10) as mobile, app_staff.profile_photo, app_staff.profile_photo as image, IFNULL(dep_cat.name,'N/A') as category, u.firebase_token, enable_chat as show_chat, show_mobile, show_fees from appointment_staffs as app_staff left join appointment_categories as dep_cat on dep_cat.id = app_staff.appointment_category_id and dep_cat.status='ACTIVE' left join appointment_staff_addresses asa on asa.appointment_staff_id = app_staff.id  left join appointment_staff_hours as ash on ash.appointment_staff_id = app_staff.id  and ash.appointment_day_time_id = (WEEKDAY(NOW())+1) left join users as u on u.mobile = app_staff.mobile and u.thinapp_id = app_staff.thinapp_id where app_staff.thinapp_id = $thin_app_id  and app_staff.status = 'ACTIVE' $condition $branch_condition group by app_staff.id order by sort_order asc";
                    }


                    $data_list = $connection->query($query);
                    $charactorArray =array();
                    if ($data_list->num_rows) {
                        $list = mysqli_fetch_all($data_list, MYSQLI_ASSOC);
                        $tmp = array();
                        $alphabet[] = array('charactor'=>"#");
                        foreach ($list as $key => $val) {
                            $tmp[$key] = $val;
                            $tmp[$key]['address_id'] = $branch_id;
                            unset($tmp[$key]['timing']);
                            $timing = explode(',', $val['timing']);
                            if (!empty($timing)) {
                                foreach ($timing as $t_key => $time) {
                                    $tmp[$key]['time_array'][] = array('status' => $val['status'], 'time' => $time);
                                }
                            }
                            $charactor = substr($val['name'], 0, 1);
                            if(!in_array($charactor, $charactorArray)){
                                if ($user_role != "ADMIN") {
                                    if($val['staff_type']=='DOCTOR'){
                                        $alphabet[] =array('charactor'=>$charactor);
                                    }
                                }else{
                                    $alphabet[] =array('charactor'=>$charactor);
                                }
                                $charactorArray[] = $charactor;
                            }

                        }

                        $response['status'] = 1;
                        $response['message'] = "Doctor list found";
                        $response['data']['list'] = array_values($tmp);
                        $response['data']['alphabet'] =$alphabet;
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Doctor list not found.";
                        $response['data']['list'] = array();
                    }


                    $response['data']['department'] = $response['data']['category_list'] = array();
                    $condition = "";


                    if (Custom::check_app_enable_permission($thin_app_id, 'NEW_QUICK_APPOINTMENT')) {
                        if($request_from=="CLINIC"){
                            if (!empty($branch_id)) {
                                $condition = " and das.appointment_address_id = $branch_id";
                            }
                            if ($user_role != 'ADMIN') {
                                $condition .= " AND ac.name != 'RECEPTIONIST' ";
                            }
                            $query = "select ac.id,ac.name,ac.image FROM doctor_appointment_setting AS das JOIN appointment_staffs AS staff ON staff.id = das.doctor_id JOIN  appointment_categories as ac ON ac.id = staff.appointment_category_id  where ac.thinapp_id = $thin_app_id and ac.status = 'ACTIVE'  $condition GROUP BY ac.id";
                        }else{
                            if ($user_role != 'ADMIN') {
                                $condition .= " AND ac.name != 'RECEPTIONIST' ";
                            }
                            $query = "select ac.id,ac.name,ac.image FROM  appointment_categories as ac where ac.thinapp_id = $thin_app_id and ac.status = 'ACTIVE'  $condition GROUP BY ac.id";
                        }
                    } else {
                        if (!empty($branch_id)) {
                            if($request_from=="CLINIC"){
                                $condition = " and aaa.appointment_address_id = $branch_id";
                            }
                        }
                        if ($user_role != 'ADMIN') {
                            $condition .= " AND ac.name != 'RECEPTIONIST' ";
                        }
                        if ($thin_app_id == '613') {
                            $query = "select * from (( select '0' as id, 'All' as name, 'http://mengage.s3-website.ap-south-1.amazonaws.com/20181018194140132363206.png' as image ) UNION ALL ( select ac.id,ac.name,ac.image from appointment_categories as ac left join appointment_address_associate as aaa on aaa.appointment_category_id = ac.id  where ac.thinapp_id = $thin_app_id and ac.status = 'ACTIVE' $condition group by ac.id)) as final order by final.name asc ";
                        } else {
                            $query = "select ac.id,ac.name,ac.image from appointment_categories as ac left join appointment_address_associate as aaa on aaa.appointment_category_id = ac.id  where ac.thinapp_id = $thin_app_id and ac.status = 'ACTIVE' $condition group by ac.id  order by ac.name asc";
                        }
                    }


                    $data_list = $connection->query($query);
                    if ($data_list->num_rows) {
                        $response['status'] = 1;
                        $list = mysqli_fetch_all($data_list, MYSQLI_ASSOC);
                        $response['data']['department'] = $list;
                    }

                    $query = "select app_staff.id, dc.id, dc.category_name, IF(app_staff.id IS NOT NULL,'YES','NO') as is_selected from department_categories dc left join appointment_staffs as app_staff on dc.id = app_staff.department_category_id and app_staff.id = $doctor_id order by dc.category_name asc";
                    $data_list = $connection->query($query);
                    if ($data_list->num_rows) {
                        $response['status'] = 1;
                        $list = mysqli_fetch_all($data_list, MYSQLI_ASSOC);
                        $response['data']['category_list'] = $list;
                    }
                    // WebservicesFunction::createJson($file_name,json_encode($response),"CREATE","thinapp");
                }
            }
            Custom::sendResponse($response);
        }
        exit();
    }
    public static function hospital_get_doctor_list_back()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);


        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $offset = isset($data['offset']) ? $data['offset'] : "";
            $search = isset($data['search']) ? $data['search'] : "";
            $user_role = isset($data['user_role']) ? $data['user_role'] : "";
            $branch_id = isset($data['branch_id']) ? $data['branch_id'] : 0;
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : 0;
            $request_from = isset($data['request_from']) ? $data['request_from'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else {
                $connection = ConnectionUtil::getConnection();
                $condition = $branch_condition = "";

                $file_name = "hospital_get_doctor_list_$thin_app_id"."_".$user_role;
                if(true){
                    if ($user_role != "ADMIN") {
                        $condition .= " and app_staff.staff_type = 'DOCTOR' and app_staff.visible_for IN('BOTH','APP') ";
                    }

                    /* start adding search parameter to query */
                    if (!empty($search)) {
                        $condition .= " AND ( app_staff.name LIKE '%$search%' OR dep_cat.name like '%$search%' )";
                    }

                    if (Custom::check_app_enable_permission($thin_app_id, 'NEW_QUICK_APPOINTMENT')) {
                        if (!empty($branch_id)) {
                            $branch_condition = " and ds.appointment_address_id = $branch_id ";
                        }
                        $setting_join = ($request_from == "CLINIC") ? " join " : " left join ";
                        $status = " (select  if(count(*) > 0 ,'Online','Offline') as time_string from doctor_appointment_setting as das join appointment_staffs  as app_sta on das.doctor_id = app_sta.id and das.setting_type = app_sta.appointment_setting_type and (das.appointment_day_time_id > 0 OR DATE(das.appointment_date) >= DATE(NOW()) ) where  das.doctor_id = app_staff.id and das.index_number = 1 and das.`status` ='ACTIVE' and TIME(NOW()) BETWEEN das.from_time and das.to_time) as status ";
                        $timing = " (select  GROUP_CONCAT(CONCAT(DATE_FORMAT(das.from_time,'%h:%i %p'),' - ', DATE_FORMAT(das.to_time,'%h:%i %p'))) as time_string from doctor_appointment_setting as das join appointment_staffs  as app_sta on das.doctor_id = app_sta.id and das.setting_type = app_sta.appointment_setting_type  where  das.doctor_id = app_staff.id and das.index_number = 1 and das.`status` ='ACTIVE' ) as timing ";
                        $query = "select $status, $timing, app_staff.allow_emergency_appointment, app_staff.current_working, app_staff.id as doctor_id, app_staff.sub_title as sub_title, app_staff.staff_type,  REPLACE(REPLACE(REPLACE(REPLACE(app_staff.name,'Dr',''),'.',''),'Doctor',''),' ','') AS sort_order, app_staff.name, SUBSTRING(app_staff.mobile,-10) as mobile, app_staff.profile_photo, app_staff.profile_photo as image, IFNULL(dep_cat.name,'N/A') as category, u.firebase_token, enable_chat as show_chat, show_mobile, show_fees from appointment_staffs as app_staff left join appointment_categories as dep_cat on dep_cat.id = app_staff.appointment_category_id and dep_cat.status='ACTIVE' $setting_join doctor_appointment_setting AS ds ON ds.doctor_id = app_staff.id and  app_staff.appointment_setting_type=ds.setting_type AND ( (ds.setting_type = 'DAY' and DAYOFWEEK(NOW()) = ds.appointment_day_time_id ) OR (ds.setting_type ='DATE' and  ds.appointment_date = DATE(NOW())) ) left join users as u on u.mobile = app_staff.mobile and u.thinapp_id = app_staff.thinapp_id where app_staff.thinapp_id = $thin_app_id  and app_staff.status = 'ACTIVE' $condition $branch_condition group by app_staff.id order by sort_order asc";

                    } else {
                        if (!empty($branch_id)) {
                            $branch_condition = " and asa.appointment_address_id = $branch_id ";
                        }
                        $status = " (select  IF(count(*) > 0,'Online','Offline')  from appointment_staff_hours as ash right join appointment_staff_addresses  as asa on ash.appointment_staff_id = asa.appointment_staff_id AND ( TIME(NOW()) BETWEEN   ADDTIME(asa.from_time,IF(RIGHT(asa.from_time,2) = 'PM','12:00:00','00:00:00')) AND ADDTIME(asa.from_time,IF(RIGHT(asa.to_time,2) = 'PM','12:00:00','00:00:00'))  ) AND asa.status = 'ACTIVE'  where  ash.appointment_staff_id = app_staff.id and ash.status = 'OPEN'  and ash.appointment_day_time_id = (WEEKDAY(NOW())+1) LIMIT 1) as status ";
                        $timing = " (select  GROUP_CONCAT(CONCAT(asa.from_time,' - ', asa.to_time)) as time_string from appointment_staff_hours as ash right join appointment_staff_addresses  as asa on ash.appointment_staff_id = asa.appointment_staff_id  AND asa.status = 'ACTIVE'  where  ash.appointment_staff_id = app_staff.id and ash.status = 'OPEN'  and ash.appointment_day_time_id = (WEEKDAY(NOW())+1) ) as timing ";
                        $query = "select $status, $timing, app_staff.allow_emergency_appointment, app_staff.current_working, app_staff.id as doctor_id, app_staff.sub_title as sub_title, app_staff.staff_type,  REPLACE(REPLACE(REPLACE(REPLACE(app_staff.name,'Dr',''),'.',''),'Doctor',''),' ','') AS sort_order, app_staff.name, SUBSTRING(app_staff.mobile,-10) as mobile, app_staff.profile_photo, app_staff.profile_photo as image, IFNULL(dep_cat.name,'N/A') as category, u.firebase_token, enable_chat as show_chat, show_mobile, show_fees from appointment_staffs as app_staff left join appointment_categories as dep_cat on dep_cat.id = app_staff.appointment_category_id and dep_cat.status='ACTIVE' left join appointment_staff_addresses asa on asa.appointment_staff_id = app_staff.id  left join appointment_staff_hours as ash on ash.appointment_staff_id = app_staff.id  and ash.appointment_day_time_id = (WEEKDAY(NOW())+1) left join users as u on u.mobile = app_staff.mobile and u.thinapp_id = app_staff.thinapp_id where app_staff.thinapp_id = $thin_app_id  and app_staff.status = 'ACTIVE' $condition $branch_condition group by app_staff.id order by sort_order asc";

                    }


                    $data_list = $connection->query($query);
                    if ($data_list->num_rows) {
                        $list = mysqli_fetch_all($data_list, MYSQLI_ASSOC);
                        $tmp = array();
                        foreach ($list as $key => $val) {
                            $tmp[$key] = $val;
                            $tmp[$key]['address_id'] = $branch_id;
                            unset($tmp[$key]['timing']);
                            $timing = explode(',', $val['timing']);
                            if (!empty($timing)) {
                                foreach ($timing as $t_key => $time) {
                                    $tmp[$key]['time_array'][] = array('status' => $val['status'], 'time' => $time);
                                }
                            }
                        }

                        $response['status'] = 1;
                        $response['message'] = "Doctor list found";
                        $response['data']['list'] = array_values($tmp);
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Doctor list not found.";
                        $response['data']['list'] = array();
                    }


                    $condition = " app_staff.status = 'ACTIVE'  AND app_staff.thinapp_id = $thin_app_id ";
                    if ($user_role != "ADMIN") {
                        $condition .= " and staff_type = 'DOCTOR' ";
                    }


                    if (Custom::check_app_enable_permission($thin_app_id, 'NEW_QUICK_APPOINTMENT')) {
                        if (!empty($branch_id)) {
                            $branch_condition = " and ds.appointment_address_id = $branch_id ";
                        }
                        $query = " select * from ((select '#' AS charactor) UNION ALL  (select DISTINCT(UPPER(LEFT(app_staff.name,1))) as charactor  from appointment_staffs as app_staff left join appointment_categories as dep_cat on dep_cat.id = app_staff.appointment_category_id and dep_cat.status = 'ACTIVE' LEFT JOIN doctor_appointment_setting AS ds ON ds.doctor_id = app_staff.id  left join users as u on u.mobile = app_staff.mobile and u.thinapp_id = app_staff.thinapp_id where  $condition )) as t order by t.charactor asc";
                    } else {
                        if (!empty($branch_id)) {
                            $branch_condition = " and asa.appointment_address_id = $branch_id ";
                        }
                        $query = " select * from ((select '#' AS charactor) UNION ALL  (select DISTINCT(UPPER(LEFT(app_staff.name,1))) as charactor  from appointment_staffs as app_staff left join appointment_categories as dep_cat on dep_cat.id = app_staff.appointment_category_id and dep_cat.status = 'ACTIVE' left join appointment_address_associate as aaa on aaa.appointment_category_id = app_staff.appointment_category_id  left join appointment_staff_addresses asa on asa.appointment_staff_id = app_staff.id join appointment_staff_hours as ash on ash.appointment_staff_id = app_staff.id  and ash.appointment_day_time_id = (WEEKDAY(NOW())+1) left join users as u on u.mobile = app_staff.mobile and u.thinapp_id = app_staff.thinapp_id where  $condition $branch_condition )) as t order by t.charactor asc";
                    }


                    $connection = ConnectionUtil::getConnection();
                    $subscriber = $connection->query($query);
                    $response['data']['alphabet'] = array();
                    if ($subscriber->num_rows) {
                        $response['data']['alphabet'] = mysqli_fetch_all($subscriber, MYSQLI_ASSOC);
                    }


                    $response['data']['department'] = $response['data']['category_list'] = array();
                    $condition = "";


                    if (Custom::check_app_enable_permission($thin_app_id, 'NEW_QUICK_APPOINTMENT')) {
                        if($request_from=="CLINIC"){
                            if (!empty($branch_id)) {
                                $condition = " and das.appointment_address_id = $branch_id";
                            }
                            if ($user_role != 'ADMIN') {
                                $condition .= " AND ac.name != 'RECEPTIONIST' ";
                            }
                            $query = "select ac.id,ac.name,ac.image FROM doctor_appointment_setting AS das JOIN appointment_staffs AS staff ON staff.id = das.doctor_id JOIN  appointment_categories as ac ON ac.id = staff.appointment_category_id  where ac.thinapp_id = $thin_app_id and ac.status = 'ACTIVE'  $condition GROUP BY ac.id";
                        }else{
                            if ($user_role != 'ADMIN') {
                                $condition .= " AND ac.name != 'RECEPTIONIST' ";
                            }
                            $query = "select ac.id,ac.name,ac.image FROM  appointment_categories as ac where ac.thinapp_id = $thin_app_id and ac.status = 'ACTIVE'  $condition GROUP BY ac.id";
                        }
                    } else {
                        if (!empty($branch_id)) {
                            if($request_from=="CLINIC"){
                                $condition = " and aaa.appointment_address_id = $branch_id";
                            }
                        }
                        if ($user_role != 'ADMIN') {
                            $condition .= " AND ac.name != 'RECEPTIONIST' ";
                        }
                        if ($thin_app_id == '613') {
                            $query = "select * from (( select '0' as id, 'All' as name, 'http://mengage.s3-website.ap-south-1.amazonaws.com/20181018194140132363206.png' as image ) UNION ALL ( select ac.id,ac.name,ac.image from appointment_categories as ac left join appointment_address_associate as aaa on aaa.appointment_category_id = ac.id  where ac.thinapp_id = $thin_app_id and ac.status = 'ACTIVE' $condition group by ac.id)) as final order by final.name asc ";
                        } else {
                            $query = "select ac.id,ac.name,ac.image from appointment_categories as ac left join appointment_address_associate as aaa on aaa.appointment_category_id = ac.id  where ac.thinapp_id = $thin_app_id and ac.status = 'ACTIVE' $condition group by ac.id  order by ac.name asc";
                        }
                    }


                    $data_list = $connection->query($query);
                    if ($data_list->num_rows) {
                        $response['status'] = 1;
                        $list = mysqli_fetch_all($data_list, MYSQLI_ASSOC);
                        $response['data']['department'] = $list;
                    }

                    $query = "select app_staff.id, dc.id, dc.category_name, IF(app_staff.id IS NOT NULL,'YES','NO') as is_selected from department_categories dc left join appointment_staffs as app_staff on dc.id = app_staff.department_category_id and app_staff.id = $doctor_id order by dc.category_name asc";
                    $data_list = $connection->query($query);
                    if ($data_list->num_rows) {
                        $response['status'] = 1;
                        $list = mysqli_fetch_all($data_list, MYSQLI_ASSOC);
                        $response['data']['category_list'] = $list;
                    }
                    //WebservicesFunction::createJson($file_name,json_encode($response),"CREATE","thinapp");
                }
            }
            Custom::sendResponse($response);
        }
        exit();
    }

    public static function hospital_get_doctor_list_all()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);


        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $offset = isset($data['offset']) ? $data['offset'] : "";
            $search = isset($data['search']) ? $data['search'] : "";
            $user_role = isset($data['user_role']) ? $data['user_role'] : "";
            $branch_id = isset($data['branch_id']) ? $data['branch_id'] : 0;

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else {
                $connection = ConnectionUtil::getConnection();
                $condition = $branch_condition = "";
                if ($user_role != "ADMIN") {
                    $condition = " and app_staff.staff_type = 'DOCTOR' ";
                }

                /* start adding search parameter to query */
                if (!empty($search)) {
                    $condition .= " AND ( app_staff.name LIKE '%$search%' OR dep_cat.name like '%$search%' )";
                }

                if (!empty($branch_id)) {
                    $branch_condition = " and asa.appointment_address_id = $branch_id ";
                }


                if (Custom::check_app_enable_permission($thin_app_id, 'NEW_QUICK_APPOINTMENT')) {
                    $status = " (select  if(count(*) > 0 ,'Online','Offline') as time_string from doctor_appointment_setting as das join appointment_staffs  as app_sta on das.doctor_id = app_sta.id and das.setting_type = app_sta.appointment_setting_type and (das.appointment_day_time_id > 0 OR DATE(das.appointment_date) >= DATE(NOW()) ) where  das.doctor_id = app_staff.id and das.index_number = 1 and das.`status` ='ACTIVE' and TIME(NOW()) BETWEEN das.from_time and das.to_time) as status ";
                    $timing = " (select  GROUP_CONCAT(CONCAT(DATE_FORMAT(das.from_time,'%h:%i %p'),' - ', DATE_FORMAT(das.to_time,'%h:%i %p'))) as time_string from doctor_appointment_setting as das join appointment_staffs  as app_sta on das.doctor_id = app_sta.id and das.setting_type = app_sta.appointment_setting_type  where  das.doctor_id = app_staff.id and das.index_number = 1 and das.`status` ='ACTIVE' ) as timing ";
                } else {
                    $status = " (select  IF(count(*) > 0,'Online','Offline')  from appointment_staff_hours as ash right join appointment_staff_addresses  as asa on ash.appointment_staff_id = asa.appointment_staff_id AND ( TIME(NOW()) BETWEEN   ADDTIME(asa.from_time,IF(RIGHT(asa.from_time,2) = 'PM','12:00:00','00:00:00')) AND ADDTIME(asa.from_time,IF(RIGHT(asa.to_time,2) = 'PM','12:00:00','00:00:00'))  ) AND asa.status = 'ACTIVE'  where  ash.appointment_staff_id = app_staff.id and ash.status = 'OPEN'  and ash.appointment_day_time_id = (WEEKDAY(NOW())+1) LIMIT 1) as status ";
                    $timing = " (select  GROUP_CONCAT(CONCAT(asa.from_time,' - ', asa.to_time)) as time_string from appointment_staff_hours as ash right join appointment_staff_addresses  as asa on ash.appointment_staff_id = asa.appointment_staff_id  AND asa.status = 'ACTIVE'  where  ash.appointment_staff_id = app_staff.id and ash.status = 'OPEN'  and ash.appointment_day_time_id = (WEEKDAY(NOW())+1) ) as timing ";
                }

                $query = "select $status, $timing, app_staff.id as doctor_id, app_staff.staff_type,  app_staff.name, REPLACE(REPLACE(REPLACE(REPLACE(app_staff.name,'Dr',''),'.',''),'Doctor',''),' ','') AS sort_order,  app_staff.sub_title, SUBSTRING(app_staff.mobile,-10) as mobile, app_staff.profile_photo as image, IFNULL(dep_cat.name,'Other') as category, IFNULL(dep_cat.id,'Other') as appointment_category_id, u.firebase_token, enable_chat as show_chat, show_mobile, show_fees from appointment_staffs as app_staff left join appointment_categories as dep_cat on dep_cat.id = app_staff.appointment_category_id and dep_cat.status='ACTIVE' left join appointment_staff_addresses asa on asa.appointment_staff_id = app_staff.id $branch_condition left join appointment_staff_hours as ash on ash.appointment_staff_id = app_staff.id  and ash.appointment_day_time_id = (WEEKDAY(NOW())+1) left join users as u on u.mobile = app_staff.mobile and u.thinapp_id = app_staff.thinapp_id where app_staff.thinapp_id = $thin_app_id  and app_staff.staff_type = 'DOCTOR'  and app_staff.status = 'ACTIVE' $condition group by doctor_id order by sort_order asc";


                $data_list = $connection->query($query);
                if ($data_list->num_rows) {
                    $list = mysqli_fetch_all($data_list, MYSQLI_ASSOC);
                    $tmp = array();
                    foreach ($list as $key => $val) {
                        $tmp[$key] = $val;
                        unset($tmp[$key]['timing']);
                        $timing = explode(',', $val['timing']);
                        if (!empty($timing)) {
                            foreach ($timing as $t_key => $time) {
                                $tmp[$key]['time_array'][] = array('status' => $val['status'], 'time' => $time);
                            }
                        }
                    }

                    $docList = array_values($tmp);


                    $condition = " app_staff.status = 'ACTIVE'  AND app_staff.thinapp_id = $thin_app_id ";
                    if ($user_role != "ADMIN") {
                        $condition .= " and staff_type = 'DOCTOR' ";
                    }

                    if (!empty($branch_id)) {
                        $branch_condition = " and aaa.appointment_address_id = $branch_id ";
                    }


                    $response['data']['department'] = array();
                    $condition = "";
                    if (!empty($branch_id)) {
                        $condition = " and aaa.appointment_address_id = $branch_id";
                    }

                    if ($user_role != 'ADMIN') {
                        $condition .= " AND ac.name != 'RECEPTIONIST' ";
                    }


                    $query = "select ac.id,ac.name,ac.image from appointment_categories as ac left join appointment_address_associate as aaa on aaa.appointment_category_id = ac.id  where ac.thinapp_id = $thin_app_id and ac.status = 'ACTIVE' $condition group by ac.id  order by ac.name asc";

                    $data_list = $connection->query($query);
                    if ($data_list->num_rows) {
                        $list = mysqli_fetch_all($data_list, MYSQLI_ASSOC);
                        $listToSend = array();
                        $response['data']['department_list'] = $list;
                        foreach ($list AS $dataChunk) {
                            $dataChunk['doctor_list'] = array();
                            $listToSend[] = $dataChunk;
                        }


                        $list = $listToSend;
                        foreach ($docList AS $docListChunk) {
                            $categoryID = $docListChunk['appointment_category_id'];
                            $found = false;
                            foreach ($listToSend AS $key => $listChunk) {
                                if ($listChunk['id'] == $categoryID) {
                                    $list[$key]['doctor_list'][] = $docListChunk;
                                    $found = true;
                                }
                            }
                            if ($found == false) {
                                $list[] = array('id' => $categoryID, 'name' => $categoryID, 'image' => '', 'doctor_list' => array($docListChunk));
                                $listToSend[] = array('id' => $categoryID, 'name' => $categoryID, 'image' => '', 'doctor_list' => array($docListChunk));
                            }
                        }
                        $response['data']['department'] = $list;
                        $response['status'] = 1;
                        $response['message'] = "Doctor list found.";

                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Doctor list not found.";
                        $response['data']['department'] = array();
                    }


                } else {
                    $response['status'] = 0;
                    $response['message'] = "Doctor list not found.";
                    $response['data']['department'] = array();
                }


            }
            Custom::sendResponse($response);
        }
        exit();
    }

    public static function hospital_get_address_detail()
    {


        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $address_id = isset($data['address_id']) ? $data['address_id'] : "";

            try {
                if (empty($thin_app_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid thinapp id';
                } else if (empty($app_key)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid app key';
                } else if (empty($user_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid user id';
                } else if (empty($mobile)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid mobile';
                } else if (empty($address_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid address id';
                } else {

                    $query = "select aa.id, aa.latitude, aa.longitude, aa.place,aa.address,aa.image,aa.country_id, aa.state_id, aa.city_id, c.name as country_name, s.name as state_name, city.name as city_name, aa.pincode,aa.contact_number, aa.contact_number, aa.emergency_number from appointment_addresses as aa left join countries as c on c.id = aa.country_id left join states as s on s.id = aa.state_id left join cities as city on city.id = aa.city_id where aa.id = $address_id";
                    $connection = ConnectionUtil::getConnection();
                    $list = $connection->query($query);
                    if ($list->num_rows) {
                        $list_data = mysqli_fetch_assoc($list);
                        $response['status'] = 1;
                        $response['message'] = "Address found";
                        $response['data']['detail'] = $list_data;

                    } else {
                        $response['status'] = 0;
                        $response['message'] = "No address found";
                    }
                }
            } catch (Exception $e) {
                $response['status'] = 0;
                $response['message'] = "Something went wrong on server";
            }
            Custom::sendResponse($response);
        }
        exit();


    }

    public static function hospital_get_doctor_detail()
    {


        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : "";

            try {
                if (empty($thin_app_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid thinapp id';
                } else if (empty($app_key)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid app key';
                } else if (empty($user_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid user id';
                } else if (empty($mobile)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid mobile';
                } else if (empty($doctor_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid doctor id';
                } else {

                    $query = "select stf.country_id, stf.city_id, stf.state_id, stf.department_category_id as category_id, stf.staff_type as role, stf.show_mobile, stf.id as doctor_id, stf.registration_number, SUBSTRING_INDEX(stf.experience, '.', 1) as experience_year, SUBSTRING_INDEX(stf.experience, '.',-1) as experience_month,   stf.email,stf.fees, stf.name, stf.sub_title as education, stf.profile_photo, RIGHT(stf.mobile,10) as doctor_mobile, stf.address, stf.description, stf.enable_chat, stf.experience, stf.appointment_category_id as department_id, stf.show_mobile, stf.show_fees from appointment_staffs as stf where stf.thinapp_id = $thin_app_id and stf.status = 'ACTIVE'  and stf.id = $doctor_id";
                    $connection = ConnectionUtil::getConnection();
                    $list = $connection->query($query);
                    if ($list->num_rows) {
                        $list_data = mysqli_fetch_assoc($list);
                        $response['status'] = 1;
                        $response['message'] = "Doctor found";
                        $response['data']['detail'] = $list_data;

                    } else {
                        $response['status'] = 0;
                        $response['message'] = "No doctor found";
                    }
                }
            } catch (Exception $e) {
                $response['status'] = 0;
                $response['message'] = "Something went wrong on server";
            }
            Custom::sendResponse($response);
        }
        exit();


    }

    public static function hospital_get_patient_list()
    {


        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $user_role = isset($data['user_role']) ? $data['user_role'] : "";
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : 0;
            $offset = isset($data['offset']) ? $data['offset'] : "";
            $search = isset($data['search']) ? $data['search'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($user_role)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user role';
            } else if (empty($offset) && $offset != 0) {
                $response['status'] = 0;
                $response['message'] = 'Invalid offset';
            } else {
                try {


                    $condition = "";
                    if ($user_role == "STAFF") {
                        $condition = " AND acss.appointment_staff_id = $doctor_id ";
                    }
                    if (!empty($search)) {
                        $condition .= " and ( c.child_name like '%$search%' OR ac.first_name like '%$search%' OR c.mobile like '%$search%' OR ac.mobile like '%$search%' ) ";
                    }

                    $limit = PAGINATION_LIMIT;
                    $offset = $offset * $limit;
                    $query = "select IFNULL(ac.first_name,c.child_name) as username, IF(u.app_installed_status ='INSTALLED' AND u.firebase_token <> '','YES','NO' ) as show_chat_icon, u.firebase_token, IFNULL(ac.mobile,c.mobile) as mobile from appointment_customer_staff_services as acss  join appointment_customers as ac on ac.id = acss.appointment_customer_id AND ac.status ='ACTIVE' left join childrens as c on c.id = acss.children_id AND c.status ='ACTIVE' left join users as u on (u.mobile = ac.mobile AND u.thinapp_id = ac.thinapp_id) OR (u.mobile = c.mobile AND u.thinapp_id = c.thinapp_id) where acss.thinapp_id = $thin_app_id $condition group by ac.id order by acss.id desc LIMIT  $offset, $limit";
                    $connection = ConnectionUtil::getConnection();
                    $message_list = $connection->query($query);
                    if ($message_list->num_rows) {
                        $user_data = mysqli_fetch_all($message_list, MYSQLI_ASSOC);
                        $response['status'] = 1;
                        $response['message'] = "List found";
                        $response['data']['mobile_list'] = $user_data;

                    } else {
                        $response['status'] = 1;
                        $response['message'] = "List Not Found";
                        $response['data']['mobile_list'] = array();
                    }
                    /* SEND TOTAL COUND TO SUBSCRIBER */

                    $condition = "";
                    if ($user_role == "STAFF") {
                        $condition = " AND acss.appointment_staff_id = $doctor_id ";
                    }
                    $query = "select count(acss.id) as total_subscriber from appointment_customer_staff_services as acss left join appointment_customers as ac on ac.id = acss.appointment_customer_id AND ac.status ='ACTIVE' left join childrens as c on c.id = acss.children_id AND c.status ='ACTIVE' where acss.thinapp_id = $thin_app_id $condition ";
                    $count_qry = $connection->query($query);
                    $count = mysqli_fetch_assoc($count_qry);
                    $response['total_subscriber'] = $count['total_subscriber'];


                } catch (Exception $e) {
                    $response['status'] = 0;
                    $response['message'] = "server error";
                }

            }
            Custom::sendResponse($response);
        }
        exit();
    }

    public static function hospital_get_branch_location_list()
    {


        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else {
                try {
                    $query = " select '0' as id, 'All Branch' as name, 'All Branch' as branch UNION select  aa.id, city.name, CONCAT(city.name,' - ',aa.address) as branch from appointment_addresses as aa join cities as city on city.id = aa.city_id where aa.thinapp_id = $thin_app_id and aa.status = 'ACTIVE'";
                    $connection = ConnectionUtil::getConnection();
                    $message_list = $connection->query($query);
                    if ($message_list->num_rows) {
                        $user_data = mysqli_fetch_all($message_list, MYSQLI_ASSOC);
                        $response['status'] = 1;
                        $response['message'] = "List found";
                        $response['data']['list'] = $user_data;

                    } else {
                        $response['status'] = 0;
                        $response['message'] = "No list found";
                    }
                } catch (Exception $e) {
                    $response['status'] = 0;
                    $response['message'] = "server error";
                }

            }
            Custom::sendResponse($response);
        }
        exit();
    }




    /* MENGAGE HOSPITAL MODULE END FROM HERE ADD BY MUNNA */


    /* LAB AND PHARMACY MODULE START FROM HERE */


    public static function lab_send_request()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $request_mobile = isset($data['request_mobile']) ? Custom::create_mobile_number($data['request_mobile']) : "";
            $name = isset($data['name']) ? trim($data['name']) : "";
            $role_type = isset($data['role_type']) ? trim($data['role_type']) : "LAB";
            $doctor_id = isset($data['doctor_id']) ? trim($data['doctor_id']) : 0;
            $isInhouse = isset($data['is_inhouse']) ? trim($data['is_inhouse']) : "NO";
            $lab_pharma_reg_no = isset($data['lab_pharma_reg_no']) ? trim($data['lab_pharma_reg_no']) : "";
            $lab_pharma_id = isset($data['lab_pharma_id']) ? trim($data['lab_pharma_id']) : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($request_mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile number';
            } else if (empty($name)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid name';
            } else if ($role_type != 'LAB' && $role_type != 'PHARMACY') {
                $response['status'] = 0;
                $response['message'] = 'Invalid role type';
            } else if ($lab_pharma_reg_no == '') {
                $response['status'] = 0;
                $response['message'] = 'Invalid reg no.';
            } else if ($lab_pharma_id == '') {
                $response['status'] = 0;
                $response['message'] = 'Invalid lab/pharma ID';
            } else {

                $send_notification = false;
                $lab_user_id = 0;
                $connection = ConnectionUtil::getConnection();
                $created = Custom::created();
                $allow = Custom::lab_allow_send_request($thin_app_id, $role_type, $request_mobile, $doctor_id);
                if (!empty($allow)) {

                    $user_data = Custom::get_user_by_mobile($thin_app_id, $request_mobile);
                    $password = md5(substr($request_mobile, -10));
                    $request_user_id = !empty($user__data) ? $user__data['id'] : 0;

                    $sql = "INSERT INTO lab_pharmacy_users (lab_pharma_reg_no, lab_pharma_id, password, thinapp_id, doctor_id, user_id, role_type, name, mobile,is_inhouse, created, modified) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                    $stmt_hour = $connection->prepare($sql);
                    $stmt_hour->bind_param('ssssssssssss', $lab_pharma_reg_no, $lab_pharma_id, $password, $thin_app_id, $doctor_id, $request_user_id, $role_type, $name, $request_mobile, $isInhouse, $created, $created);
                    if ($stmt_hour->execute()) {
                        $send_notification = true;
                        $lab_user_id = $stmt_hour->insert_id;

                        if ($isInhouse == 'YES') {
                            $uniqueID = substr($request_mobile . $lab_user_id, -10);
                            $sql1 = "INSERT INTO `lab_pharmacy_inhouse_user` (`thinapp_id`,`lab_pharmacy_user_id`,`mobile`,`unique_id`,`status`,`created`,`modified`) VALUES ('" . $thin_app_id . "','" . $lab_user_id . "','" . $request_mobile . "','" . $uniqueID . "','" . $created . "','" . $created . "')";
                            $connection->query($sql1);
                        }

                        $response['status'] = 1;
                        $response['message'] = "Request Sent Successfully";
                        $file_name = Custom::encrypt_decrypt('encrypt', "user_$request_mobile" . $thin_app_id);
                        WebservicesFunction::deleteJson(array($file_name), 'lab_user');
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Sorry request could not send.";
                    }

                } else {
                    $response['status'] = 0;
                    $response['message'] = "Request already send to this number.";
                }

            }
            Custom::sendResponse($response);
            if ($send_notification === true) {
                Custom::send_process_to_background();
                Custom::lab_send_request_notification($lab_user_id);
            }

        }
        exit();
    }

    public static function lab_get_lab_pharmacy_user_list()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $role_id = isset($data['role_id']) ? $data['role_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : 0;
            $search = isset($data['search']) ? $data['search'] : "";
            $main_app_category = isset($data['main_app_category']) ? $data['main_app_category'] : "";
            $role_type = isset($data['role_type']) ? trim($data['role_type']) : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else {
                $connection = ConnectionUtil::getConnection();
                $role_condition = !empty($role_type) ? " and lpu.role_type = '$role_type' " : "";
                $condition = " lpu.status = 'ACTIVE' and lpu.thinapp_id = $thin_app_id $role_condition ";
                if (!empty($search)) {
                    $condition .= " and ( lpu.name like '%$search%' OR lpu.mobile like '%$search%') ";
                }

                $user_role_type = Custom::get_appointment_role($mobile, $thin_app_id, $role_id);
                if ($user_role_type == "DOCTOR") {
                    $condition .= " and lpu.doctor_id = $doctor_id ";
                }
                if ($user_role_type == "USER") {
                    $condition .= " and lpu.mobile = '$mobile' ";
                }

                $query = "select  ( select count(*) from  lab_patient_uploaded_recordes  where status='ACTIVE' AND lab_pharmacy_user_id = lpu.id ) as total_prescripiton, lpu.is_verify, lpu.is_inhouse, IF(lpu.mobile = '$mobile','YES','NO') as is_lab_user, lpu.id, lpu.mobile, lpu.name, lpu.address, lpu.image, CONCAT(UCASE(LEFT(lpu.request_status, 1)),LCASE(SUBSTRING(lpu.request_status, 2))) as request_status from lab_pharmacy_users as lpu where $condition order by lpu.id desc";
                $data_list = $connection->query($query);
                if ($data_list->num_rows) {
                    $list = mysqli_fetch_all($data_list, MYSQLI_ASSOC);

                    $userIDS = array();

                    foreach ($list AS $val) {
                        if ($val['is_inhouse'] == 'YES') {
                            $userIDS[] = $val['id'];
                        }
                    }

                    $response['status'] = 1;
                    $response['message'] = "List found";
                    $response['data']['list'] = $list;
                } else {
                    $response['status'] = 0;
                    $response['message'] = "List not found.";
                }
            }
            Custom::sendResponse($response);
        }
        exit();
    }

    public static function lab_get_user_detail()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $lab_user_id = isset($data['lab_user_id']) ? $data['lab_user_id'] : 0;


            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else if (empty($lab_user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid lab user id';
            } else {
                $connection = ConnectionUtil::getConnection();
                $query = "select is_verify, role_type, lab_pharma_reg_no, lab_pharma_id, IF(mobile = '$mobile',is_editable,'NO') as is_editable,  IF(mobile = '$mobile','YES','NO') as is_lab_user, role_type, id, RIGHT(mobile,10) as mobile,name,address,latitude, longitude, discount,lab_name, image,CONCAT(UCASE(LEFT(request_status, 1)),LCASE(SUBSTRING(request_status, 2))) as request_status, is_inhouse from lab_pharmacy_users where id = $lab_user_id";
                $data_list = $connection->query($query);
                if ($data_list->num_rows) {
                    $detail = mysqli_fetch_assoc($data_list);
                    $response['status'] = 1;
                    $response['message'] = "Detail found";
                    $response['data']['detail'] = $detail;
                } else {
                    $response['status'] = 0;
                    $response['message'] = "Detail not found.";
                }
            }
            Custom::sendResponse($response);
        }
        exit();
    }

    public static function lab_update_user_detail($data = null)
    {

        $return = true;
        if (empty($data)) {
            $return = false;
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);

        }
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $lab_user_id = isset($data['lab_user_id']) ? $data['lab_user_id'] : 0;
            $name = isset($data['name']) ? $data['name'] : '';
            $lab_name = isset($data['lab_name']) ? $data['lab_name'] : '';
            $address = isset($data['address']) ? $data['address'] : '';
            $latitude = isset($data['latitude']) ? $data['latitude'] : '';
            $longitude = isset($data['longitude']) ? $data['longitude'] : '';
            $discount = isset($data['discount']) ? $data['discount'] : '';
            $image = isset($data['image']) ? $data['image'] : '';
            $action_type = isset($data['action_type']) ? $data['action_type'] : '';
            $request_mobile = isset($data['request_mobile']) ? Custom::create_mobile_number($data['request_mobile']) : '';
            $role_type = isset($data['role_type']) ? $data['role_type'] : '';
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : '';
            $lab_pharma_reg_no = isset($data['lab_pharma_reg_no']) ? $data['lab_pharma_reg_no'] : '';
            $lab_pharma_id = isset($data['lab_pharma_id']) ? $data['lab_pharma_id'] : '';

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else if ($action_type != 'UPDATE' && $action_type != 'ADD') {
                $response['status'] = 0;
                $response['message'] = 'Invalid action type';
            } else if ($role_type != 'LAB' && $role_type != 'PHARMACY') {
                $response['status'] = 0;
                $response['message'] = 'Invalid role type';
            } else if ($action_type == 'UPDATE' && empty($lab_user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid lab user id';
            } else if (empty($name)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid name';
            } else if (empty($lab_pharma_reg_no)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid reg no.';
            } else if (empty($lab_pharma_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid pharma id';
            } else if (empty($request_mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid request mobile';
            } else if (empty($lab_name)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid lab name';
            } else if (empty($address)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid address';
            } else if (empty($latitude) || empty($longitude)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid latitude or longitude';
            } else {
                $send_notification = $send_admin_notification = false;
                $connection = ConnectionUtil::getConnection();
                $created = Custom::created();
                $is_verify = "YES";
                if ($action_type == 'ADD') {
                    $allow = Custom::lab_allow_send_request($thin_app_id, $role_type, $request_mobile);
                    if ($allow) {
                        $user_data = Custom::get_user_by_mobile($thin_app_id, $request_mobile);
                        $request_user_id = !empty($user_data) ? $user_data['id'] : 0;
                        $request_send_by = 'LAB_PHARMACY';
                        $is_editable = "NO";
                        $password = md5(substr($request_mobile, -10));

                        $sql = "INSERT INTO lab_pharmacy_users (lab_pharma_reg_no, lab_pharma_id, password, is_editable, is_verify, thinapp_id, doctor_id, user_id, role_type, mobile, request_send_by, name, lab_name, discount, image, address, latitude, longitude, created, modified) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                        $stmt_hour = $connection->prepare($sql);
                        $stmt_hour->bind_param('ssssssssssssssssssss', $lab_pharma_reg_no, $lab_pharma_id, $password, $is_editable, $is_verify, $thin_app_id, $doctor_id, $request_user_id, $role_type, $request_mobile, $request_send_by, $name, $lab_name, $discount, $image, $address, $latitude, $longitude, $created, $created);
                        if ($stmt_hour->execute()) {
                            $send_notification = true;
                            $lab_user_id = $stmt_hour->insert_id;
                            $response['status'] = 1;
                            $response['message'] = "Request send successfully";
                            $file_name = Custom::encrypt_decrypt('encrypt', "user_$request_mobile" . $thin_app_id);
                            WebservicesFunction::deleteJson(array($file_name), 'lab_user');
                        } else {
                            $response['status'] = 0;
                            $response['message'] = "Sorry request could not send.";
                        }
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Request already send to this number.";
                    }
                } else {

                    $request_data = Custom::lab_get_request_data($thin_app_id, $role_type, $request_mobile);


                    if (empty($request_data) || $request_data['id'] == $lab_user_id) {
                        $request_user_id = 0;
                        if (!empty($request_data)) {
                            $request_user_id = $request_data['user_id'];
                        } else {
                            $user_data = Custom::get_user_by_mobile($thin_app_id, $request_mobile);
                            $request_user_id = !empty($user_data) ? $user_data['id'] : 0;
                        }

                        $is_editable = "NO";
                        $sql = "update lab_pharmacy_users set is_editable =?, user_id =?, mobile =?, is_verify=?, role_type =?, name = ?, lab_name =?, discount=?, image=?, address=?, latitude=?, longitude=?, modified=? where id = ?";
                        $stmt = $connection->prepare($sql);
                        $stmt->bind_param('ssssssssssssss', $is_editable, $request_user_id, $request_mobile, $is_verify, $role_type, $name, $lab_name, $discount, $image, $address, $latitude, $longitude, $created, $lab_user_id);
                        if ($stmt->execute()) {
                            $response['status'] = 1;
                            $response['message'] = "Request updated successfully";
                            $send_admin_notification = true;
                            $file_name = Custom::encrypt_decrypt('encrypt', "user_$request_mobile" . $thin_app_id);
                            WebservicesFunction::deleteJson(array($file_name), 'lab_user');
                        } else {
                            $response['status'] = 0;
                            $response['message'] = "Request could not update";
                        }
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "This number already " . strtolower($request_data['request_status']) . " request";
                    }

                }


            }
            if ($return === false) {
                Custom::sendResponse($response);
                Custom::send_process_to_background();
                if ($send_notification === true) {
                    Custom::lab_send_request_notification($lab_user_id);
                }
                if ($send_admin_notification === true) {
                    $admin_data = Custom::get_thinapp_admin_data($thin_app_id);
                    $message = $lab_name . " sent you proposal to  become your favourite " . strtolower($role_type);
                    $sendArray = array(
                        'channel_id' => 0,
                        'thinapp_id' => $thin_app_id,
                        'flag' => 'LAB_NEW_REQUEST',
                        'title' => 'New Message',
                        'message' => $message,
                        'description' => '',
                        'chat_reference' => '',
                        'module_type' => 'LAB_PHARMACY',
                        'module_type_id' => $lab_user_id,
                        'lab_user_id' => $lab_user_id,
                        'lab_user_role' => 'PATIENT',
                        'firebase_reference' => ""
                    );
                    if ($admin_data['app_installed_status'] == "INSTALLED") {
                        Custom::send_notification_via_token($sendArray, array($admin_data['firebase_token']), $thin_app_id);
                    }
                }
            } else {
                return json_encode($response);
            }

        }
        exit();
    }

    public static function lab_update_request_status()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $lab_user_id = isset($data['lab_user_id']) ? $data['lab_user_id'] : 0;
            $request_status = isset($data['request_status']) ? $data['request_status'] : '';

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else if (empty($lab_user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid lab user id';
            } else if ($request_status != "APPROVED" && $request_status != "REJECTED") {
                $response['status'] = 0;
                $response['message'] = 'Invalid request status';
            } else {
                $connection = ConnectionUtil::getConnection();
                $created = Custom::created();
                $send_notification = false;
                $sql = "update lab_pharmacy_users set action_by =?, request_status=?, approved_date=?,  modified=? where id = ?";
                $stmt = $connection->prepare($sql);
                $stmt->bind_param('sssss', $user_id, $request_status, $created, $created, $lab_user_id);
                if ($stmt->execute()) {

                    if ($request_status == 'APPROVED') {
                        $sql1 = "UPDATE `lab_pharmacy_inhouse_user` SET `status` = 'ACTIVE' WHERE `lab_pharmacy_user_id` = '" . $lab_user_id . "'";
                        $connection->query($sql1);
                    } else {
                        $sql1 = "UPDATE `lab_pharmacy_inhouse_user` SET `status` = 'INACTIVE' WHERE `lab_pharmacy_user_id` = '" . $lab_user_id . "'";
                        $connection->query($sql1);
                    }

                    $response['status'] = 1;
                    $send_notification = true;
                    $response['message'] = "Request " . strtolower($request_status) . " successfully";
                    $file_name = Custom::encrypt_decrypt('encrypt', "user_$mobile" . $thin_app_id);
                    WebservicesFunction::deleteJson(array($file_name), 'lab_user');
                } else {
                    $response['status'] = 0;
                    $response['message'] = "Request could not " . strtolower($request_status);
                }
            }
            Custom::sendResponse($response);
            Custom::send_process_to_background();
            if ($send_notification === true) {
                $user_data = Custom::lab_notification_data($lab_user_id);
                if ($user_data) {

                    $lab_name = !empty($user_data['lab_name']) ? $user_data['lab_name'] : $user_data['name'];
                    $message = $user_data['app_name'] . " has been " . strtolower($user_data['request_status']) . " your proposal for " . strtolower($user_data['role_type']) . " " . $lab_name;
                    $sendArray = array(
                        'channel_id' => 0,
                        'thinapp_id' => $thin_app_id,
                        'flag' => 'LAB_UPDATE_STATUS',
                        'title' => 'New Message',
                        'message' => $message,
                        'description' => '',
                        'chat_reference' => '',
                        'module_type' => 'LAB_PHARMACY',
                        'module_type_id' => $lab_user_id,
                        'lab_user_id' => $lab_user_id,
                        'lab_user_role' => ($request_status == "APPROVED") ? "LAB_OWNER" : "PATIENT",
                        'firebase_reference' => ""
                    );
                    if ($user_data['app_installed_status'] == "INSTALLED") {
                        Custom::send_notification_via_token($sendArray, array($user_data['firebase_token']), $thin_app_id);
                    } else {
                        Custom::send_single_sms($user_data['mobile'], $message, $thin_app_id);
                    }
                }
            }
        }
        exit();
    }

    public static function lab_get_user_list()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $role_id = isset($data['role_id']) ? $data['role_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $role_type = isset($data['role_type']) ? $data['role_type'] : "";
            $latitude = isset($data['latitude']) ? $data['latitude'] : 0;
            $longitude = isset($data['longitude']) ? $data['longitude'] : 0;

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else {
                $connection = ConnectionUtil::getConnection();
                $role_condition = !empty($role_type) ? " and lpu.role_type = '$role_type' " : "";

                if (!empty($latitude) && !empty($longitude)) {
                    $kilometer_query = " CONCAT(ROUND( 111.111 * DEGREES(ACOS(COS(RADIANS($latitude)) * COS(RADIANS(lpu.latitude)) * COS(RADIANS($longitude - lpu.longitude)) + SIN(RADIANS($latitude)) * SIN(RADIANS(lpu.latitude)))) ),'KM') as distance ";
                } else {
                    $kilometer_query = " '0' as distance ";
                }

                $condition = " lpu.status = 'ACTIVE' and lpu.thinapp_id = $thin_app_id and lpu.request_status = 'APPROVED' $role_condition";
                $query = "select $kilometer_query, lpu.id, lpu.lab_pharma_id, lpu.lab_pharma_reg_no, lpu.mobile, lpu.lab_name, lpu.address, lpu.image, lpu.discount, lpu.latitude, lpu.longitude, lpu.is_inhouse, u.firebase_token from lab_pharmacy_users as lpu left join users as u on u.mobile = lpu.mobile and u.thinapp_id = lpu.mobile left join lab_patient_uploaded_recordes as lpur on lpur.lab_pharmacy_user_id = lpu.id and lpur.user_id = $user_id where $condition group by lpu.id order by lpur.modified desc";
                $data_list = $connection->query($query);
                if ($data_list->num_rows) {
                    $list = mysqli_fetch_all($data_list, MYSQLI_ASSOC);
                    $response['status'] = 1;
                    $response['message'] = "List found";
                    $response['data']['list'] = $list;

                    $selectMedicalFolderSql = "SELECT `id` FROM `drive_folders` WHERE `folder_add_from_number` = '" . $mobile . "' AND `thinapp_id` = '" . $thin_app_id . "'";
                    $selectMedicalFolderRS = $connection->query($selectMedicalFolderSql);
                    $selectMedicalFolderData = mysqli_fetch_all($selectMedicalFolderRS, MYSQLI_ASSOC);
                    $folderIds = array();
                    foreach ($selectMedicalFolderData AS $val) {
                        $folderIds[] = $val['id'];
                    }

                    $idStr = "('" . implode("','", $folderIds) . "')";

                    $fileSql = "SELECT `drive_files`.*,DATE_FORMAT(`drive_files`.`created`,'%d-%m-%Y') as date, DATE_FORMAT(`drive_files`.`created`,'%h:%i %p') as time FROM `drive_files` WHERE `drive_folder_id` IN $idStr ORDER BY ID DESC";

                    $fileRS = $connection->query($fileSql);
                    $fileData = mysqli_fetch_all($fileRS, MYSQLI_ASSOC);
                    $response['data']['file_list'] = $fileData;

                } else {
                    $response['status'] = 0;
                    $response['message'] = "List not found.";
                }
            }
            Custom::sendResponse($response);
        }
        exit();
    }

    public static function lab_upload_patient_record()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $lab_pharmacy_user_id = isset($data['lab_pharmacy_user_id']) ? ($data['lab_pharmacy_user_id']) : "";
            $drive_file_id = isset($data['drive_file_id']) ? ($data['drive_file_id']) : 0;
            $mobile = isset($data['mobile']) ? ($data['mobile']) : "";
            $role_id = isset($data['role_id']) ? ($data['role_id']) : "";
            $file_path = isset($data['file_path']) ? Custom::check_image_path_string($data['file_path']) : "";
            $upload_from = isset($data['upload_from']) ? ($data['upload_from']) : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($lab_pharmacy_user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid lab user id';
            } else if ($upload_from != 'MEDICAL_RECORD' && $upload_from != 'OTHER') {
                $response['status'] = 0;
                $response['message'] = 'Invalid upload directory';
            } else if ($upload_from == 'OTHER' && empty($file_path)) {
                $response['status'] = 0;
                $response['message'] = 'Please upload file';
            } else {

                $send_notification = false;
                $upload_prescription_id = 0;
                $connection = ConnectionUtil::getConnection();
                $created = Custom::created();
                $sql = "INSERT INTO lab_patient_uploaded_recordes (thinapp_id, lab_pharmacy_user_id, user_id, drive_file_id, upload_from, file_path, created, modified) VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
                $stmt_hour = $connection->prepare($sql);
                $stmt_hour->bind_param('ssssssss', $thin_app_id, $lab_pharmacy_user_id, $user_id, $drive_file_id, $upload_from, $file_path, $created, $created);
                if ($stmt_hour->execute()) {
                    $send_notification = true;
                    $response['status'] = 1;
                    $upload_prescription_id = $stmt_hour->insert_id;
                    $response['message'] = "Prescription uploaded successfully";
                } else {
                    $response['status'] = 0;
                    $response['message'] = "Sorry prescription could not upload.";
                }

            }
            Custom::sendResponse($response);
            if ($send_notification === true) {
                $user_data = Custom::lab_upload_notification_data($upload_prescription_id);
                if ($user_data) {

                    $message = $user_data['username'] . " has uploaded new prescription. Click to view";
                    $sendArray = array(
                        'channel_id' => 0,
                        'thinapp_id' => $thin_app_id,
                        'flag' => 'LAB_PRESCRIPTION_UPLOAD',
                        'title' => 'New Message',
                        'message' => $message,
                        'description' => '',
                        'chat_reference' => '',
                        'module_type' => 'LAB_PHARMACY',
                        'module_type_id' => $lab_pharmacy_user_id,
                        'lab_user_id' => $lab_pharmacy_user_id,
                        'lab_user_role' => 'LAB_OWNER',
                        'firebase_reference' => "",
                        'user_mobile' => $user_data['mobile'],
                        'role_id' => $user_data['role_id'],
                    );
                    Custom::send_notification_via_token($sendArray, array($user_data['lab_user_token']), $thin_app_id);
                }
            }
        }
        exit();
    }

    public static function lab_upload_patient_record_from_folder()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $lab_pharmacy_user_id = isset($data['lab_pharmacy_user_id']) ? ($data['lab_pharmacy_user_id']) : "";
            //$drive_file_id = isset($data['drive_file_id']) ? ($data['drive_file_id']) : 0;
            $drive_file_id = isset($data['file_id']) ? ($data['file_id']) : "";
            $mobile = isset($data['mobile']) ? ($data['mobile']) : "";
            $role_id = isset($data['role_id']) ? ($data['role_id']) : "";
            $upload_from = isset($data['upload_from']) ? ($data['upload_from']) : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($lab_pharmacy_user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid lab user id';
            } else if ($upload_from != 'MEDICAL_RECORD' && $upload_from != 'OTHER') {
                $response['status'] = 0;
                $response['message'] = 'Invalid upload directory';
            } else if ($drive_file_id == '') {
                $response['status'] = 0;
                $response['message'] = 'Please upload file';
            } else {

                $send_notification = false;
                $upload_prescription_id = 0;
                $connection = ConnectionUtil::getConnection();
                $drive_file_id = explode(",", $drive_file_id);

                foreach ($drive_file_id AS $fileID) {

                    $filePathStr = "SELECT `file_path` FROM `drive_files` WHERE `id` = '" . $fileID . "' LIMIT 1";
                    $filePathRS = $connection->query($filePathStr);
                    $filePathData = mysqli_fetch_assoc($filePathRS);

                    $file_path = $filePathData['file_path'];

                    $created = Custom::created();
                    $sql = "INSERT INTO lab_patient_uploaded_recordes (thinapp_id, lab_pharmacy_user_id, user_id, drive_file_id, upload_from, file_path, created, modified) VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
                    $stmt_hour = $connection->prepare($sql);
                    $stmt_hour->bind_param('ssssssss', $thin_app_id, $lab_pharmacy_user_id, $user_id, $fileID, $upload_from, $file_path, $created, $created);
                    if ($stmt_hour->execute()) {
                        $send_notification = true;
                        $response['status'] = 1;
                        $upload_prescription_id = $stmt_hour->insert_id;
                        $response['message'] = "Prescription uploaded successfully";
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Sorry prescription could not upload.";
                    }
                }

            }
            Custom::sendResponse($response);
            if ($send_notification === true) {
                $user_data = Custom::lab_upload_notification_data($upload_prescription_id);
                if ($user_data) {

                    $message = $user_data['username'] . " has shared new prescription. Click to view";
                    $sendArray = array(
                        'channel_id' => 0,
                        'thinapp_id' => $thin_app_id,
                        'flag' => 'LAB_PRESCRIPTION_UPLOAD',
                        'title' => 'New Message',
                        'message' => $message,
                        'description' => '',
                        'chat_reference' => '',
                        'module_type' => 'LAB_PHARMACY',
                        'module_type_id' => $lab_pharmacy_user_id,
                        'lab_user_id' => $lab_pharmacy_user_id,
                        'lab_user_role' => 'LAB_OWNER',
                        'firebase_reference' => "",
                        'user_mobile' => $user_data['mobile'],
                        'role_id' => $user_data['role_id'],
                    );
                    Custom::send_notification_via_token($sendArray, array($user_data['lab_user_token']), $thin_app_id);
                }
            }
        }
        exit();
    }

    public static function lab_get_patient_upload_record_list($data = null)
    {
        $return = true;
        $method = 'POST';
        if (empty($data)) {
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);
            $return = false;
            $method = $_SERVER['REQUEST_METHOD'];
        }

        if ($method === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $role_id = isset($data['role_id']) ? $data['role_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $lab_pharmacy_user_id = isset($data['lab_pharmacy_user_id']) ? $data['lab_pharmacy_user_id'] : 0;
            $request_from = isset($data['request_from']) ? $data['request_from'] : 0;
            $role_type = isset($data['role_type']) ? $data['role_type'] : 'ALL';
            $search = isset($data['search']) ? $data['search'] : 0;
            $offset = isset($data['offset']) ? $data['offset'] : 0;
            $doctorID = isset($data['doctor_id']) ? $data['doctor_id'] : 0;

            $status_in_progress = isset($data['status_in_progress']) ? $data['status_in_progress'] : "";

            $status_new = isset($data['status_new']) ? $data['status_new'] : "";
            $status_closed = isset($data['status_closed']) ? $data['status_closed'] : "";
            $status_billing = isset($data['status_billing']) ? $data['status_billing'] : "";
            $checkedIn = isset($data['checked-in']) ? $data['checked-in'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else if (empty($lab_pharmacy_user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid lab user id';
            } else if ($request_from != 'ADMIN' && $request_from != 'PATIENT' && $request_from != 'LAB') {
                $response['status'] = 0;
                $response['message'] = 'Invalid request from';
            } else if ($role_type != 'ALL' && $role_type != 'LAB' && $role_type != 'PHARMACY') {
                $response['status'] = 0;
                $response['message'] = 'Invalid role type';
            } else {

                $connection = ConnectionUtil::getConnection();


                if (($role_type == 'LAB' || $role_type == 'PHARMACY') && $request_from == 'LAB') {

                    $labUserStr = "SELECT `id`,`is_inhouse`,`lab_name` FROM `lab_pharmacy_users` WHERE `mobile` = '" . $mobile . "' AND `thinapp_id` = '" . $thin_app_id . "' AND `role_type` = '" . $role_type . "' AND `status` = 'ACTIVE' AND `request_status` = 'APPROVED' LIMIT 1";
                    $labUserRS = $connection->query($labUserStr);
                    if ($labUserRS->num_rows) {
                        $labUserData = mysqli_fetch_assoc($labUserRS);
                        $isInhouse = $labUserData['is_inhouse'];
                        $labName = $labUserData['lab_name'];
                        $lab_pharmacy_user_id = $labUserData['id'];
                    } else {
                        $isInhouse = "NO";
                        $labName = "";
                        $lab_pharmacy_user_id = 0;
                    }


                } else {
                    $labUserStr = "SELECT `is_inhouse`,`lab_name` FROM `lab_pharmacy_users` WHERE `id` = '" . $lab_pharmacy_user_id . "' LIMIT 1";
                    $labUserRS = $connection->query($labUserStr);
                    $labUserData = mysqli_fetch_assoc($labUserRS);
                    $isInhouse = $labUserData['is_inhouse'];
                    $labName = $labUserData['lab_name'];
                }


                if ($lab_pharmacy_user_id > 0) {
                    if ($isInhouse == 'NO') {
                        $condition = " lab_patient_uploaded_recordes.status = 'ACTIVE' and lab_patient_uploaded_recordes.lab_pharmacy_user_id = $lab_pharmacy_user_id ";
                        if (!empty($search)) {
                            $condition .= " AND ( pat.username like '%$search%' OR pat.mobile like '%$search%' ) ";
                        }

                        if ($request_from == "PATIENT" && $role_id == 1) {
                            $condition .= " AND lab_patient_uploaded_recordes.user_id = $user_id ";
                        }

                        if ($role_type != "ALL") {
                            $condition .= " AND lab_pharmacy_users.role_type = '$role_type' ";
                        }

                        $from_date = (isset($data['from_date']) && !empty($data['from_date'])) ? date('Y-m-d', strtotime($data['from_date'])) : date('Y-m-d');
                        $to_date = (isset($data['to_date']) && !empty($data['to_date'])) ? date('Y-m-d', strtotime($data['to_date'])) : date('Y-m-d');

                        if (!empty($from_date) && !empty($to_date)) {
                            $condition .= " AND DATE(lab_patient_uploaded_recordes.created) >= '$from_date' AND DATE(lab_patient_uploaded_recordes.created) <= '$to_date' ";
                        }


                        $status_new = isset($data['status_new']) ? $data['status_new'] : "";
                        $status_in_progress = isset($data['status_in_progress']) ? $data['status_in_progress'] : "";
                        $status_closed = isset($data['status_closed']) ? $data['status_closed'] : "";

                        if (!empty($status_new) || !empty($status_in_progress) || !empty($status_closed)) {
                            $arr = array();
                            if (!empty($status_new)) {
                                $arr[] = $status_new;
                            }
                            /* if (!empty($status_in_progress)) {
                                $arr[] = $status_in_progress;
                            } */
                            if (!empty($status_closed)) {
                                $arr[] = $status_closed;
                            }
                            $stat = "('" . implode("','", $arr) . "')";
                            $condition .= " AND (IF(`lab_pharmacy_file_status`.`status` = '' OR `lab_pharmacy_file_status`.`status` IS NULL, 'NEW', `lab_pharmacy_file_status`.`status`)) IN " . $stat;
                        }

                        $offset = $offset * PAGINATION_LIMIT;
                        $limit = PAGINATION_LIMIT;
                        $query = "select '0' AS `appointment_id`,'0' AS `doctor_id`,'' AS `doctor_name`, '0' AS `appointment_customer_id`,'0' AS `children_id`,'0' AS `queue_number`,lab_patient_uploaded_recordes.id, 'from_lab' AS `type_from`, lab_pharmacy_users.lab_name, pat.username as patient_name, pat.mobile as patient_mobile, lab_patient_uploaded_recordes.file_path, DATE_FORMAT(lab_patient_uploaded_recordes.created,'%d-%m-%Y') as date, DATE_FORMAT(lab_patient_uploaded_recordes.created,'%h:%i %p') as time,IF(`lab_pharmacy_file_status`.`status` = '' OR `lab_pharmacy_file_status`.`status` IS NULL, 'NEW', `lab_pharmacy_file_status`.`status`) AS `file_status` from lab_patient_uploaded_recordes left join lab_pharmacy_users on lab_pharmacy_users.id= lab_patient_uploaded_recordes.lab_pharmacy_user_id left join users as pat on pat.id = lab_patient_uploaded_recordes.user_id LEFT JOIN `lab_pharmacy_file_status` ON (`lab_pharmacy_file_status`.`lab_pharmacy_user_id` = '" . $lab_pharmacy_user_id . "' AND `lab_pharmacy_file_status`.`lab_patient_uploaded_record_id` = `lab_patient_uploaded_recordes`.`id`) where  $condition order by lab_patient_uploaded_recordes.modified desc LIMIT " . $limit . " OFFSET " . $offset;

                        $data_list = $connection->query($query);
                        if ($data_list->num_rows) {
                            $list = mysqli_fetch_all($data_list, MYSQLI_ASSOC);
                            $response['status'] = 1;
                            $response['message'] = "List found";
                            $response['data']['list'] = $list;
                        } else {
                            $response['status'] = 0;
                            $response['message'] = "List not found.";
                        }
                    } else {
                        $condition = "";
                        $condition1 = "";

                        $to_date = (isset($data['to_date']) && !empty($data['to_date'])) ? date('Y-m-d', strtotime($data['to_date'])) : date('Y-m-d');


                        if (isset($data['from_date'])) {
                            $from_date = (isset($data['from_date']) && !empty($data['from_date'])) ? date('Y-m-d', strtotime($data['from_date'])) : date('Y-m-d');
                            $condition .= " AND DATE(`appointment_customer_staff_services`.`appointment_datetime`) >= '$from_date'";
                            $condition1 .= " AND DATE(`lab_patient_token_list`.`token_datetime`) >= '$from_date'";
                        }

                        if (isset($data['to_date'])) {
                            $to_date = (isset($data['to_date']) && !empty($data['to_date'])) ? date('Y-m-d', strtotime($data['to_date'])) : date('Y-m-d');
                            $condition .= " AND DATE(`appointment_customer_staff_services`.`appointment_datetime`) <= '$to_date' ";
                            $condition1 .= " AND DATE(`lab_patient_token_list`.`token_datetime`) <= '$to_date' ";
                        }

                        if (!empty($status_new) || !empty($status_closed) || !empty($status_billing) || !empty($checkedIn)) {
                            $arr = array();


                            if ($status_new == 'ALL') {
                                if (empty($status_closed)) {
                                    $arr = array('NEW', 'CHECKED-IN', 'BILLING');
                                }

                            } else if (!empty($status_new)) {
                                $arr[] = $status_new;
                            }

                            if (!empty($status_closed)) {
                                $arr[] = $status_closed;
                            }

                            if (!empty($status_billing)) {
                                $arr[] = $status_billing;
                            }

                            if (!empty($checkedIn)) {
                                $arr[] = $checkedIn;
                            }

                            //echo $stat = "('" . implode("','", $arr) . "')"; die;
                            $stat = "('" . implode("','", $arr) . "')";
                            $condition .= " AND (IF(`lab_pharmacy_file_status`.`status` = '' OR `lab_pharmacy_file_status`.`status` IS NULL, 'NEW', `lab_pharmacy_file_status`.`status`)) IN " . $stat;
                            $condition1 .= " AND (IF(`lab_pharmacy_file_status`.`status` = '' OR `lab_pharmacy_file_status`.`status` IS NULL, 'NEW', `lab_pharmacy_file_status`.`status`)) IN " . $stat;

                        }

                        if ($doctorID > 0) {
                            $condition .= " AND `appointment_customer_staff_services`.`appointment_staff_id` = '" . $doctorID . "'";
                        }

                        if (!empty($search)) {
                            $condition .= " HAVING ( patient_name like '%$search%' OR patient_mobile like '%$search%' ) ";
                            $condition1 .= " HAVING ( patient_name like '%$search%' OR patient_mobile like '%$search%' ) ";
                        }

                        $offset = $offset * PAGINATION_LIMIT;
                        $limit = PAGINATION_LIMIT;
                        $appointmentSql = "SELECT * FROM (
 SELECT 
 'FROM_APPOINTMENT' AS `type`,
 `appointment_customer_staff_services`.`id` AS `id`,
 '0' AS `lab_patient_token_list_id`,
 `appointment_customer_staff_services`.`id` AS `appointment_customer_staff_service_id`,
 `appointment_customer_staff_services`.`appointment_customer_id` AS `appointment_customer_id`,
 if(`appointment_customer_staff_services`.`has_token` = 'YES',`appointment_customer_staff_services`.`queue_number`,CONCAT('WI-',`appointment_customer_staff_services`.`queue_number`)) AS `queue_number`,
 `appointment_customer_staff_services`.`children_id` AS `children_id`,
 `appointment_customer_staff_services`.`appointment_staff_id` AS `appointment_staff_id`,
 `appointment_customer_staff_services`.`appointment_datetime` AS `appointment_datetime`,
 `appointment_customer_staff_services`.`status` AS `status`,`childrens`.`child_number`,
 IF(`appointment_customers`.`first_name` = '' OR `appointment_customers`.`first_name` IS NULL, `childrens`.`child_name`, `appointment_customers`.`first_name`) AS `patient_name`,
 IF(`appointment_customers`.`mobile` = '' OR `appointment_customers`.`mobile` IS NULL, `childrens`.`mobile`, `appointment_customers`.`mobile`) AS `patient_mobile`,
 'from_drive' AS `type_from`,
 '" . $labName . "' AS `lab_name`,
 DATE_FORMAT(`appointment_customer_staff_services`.`appointment_datetime`,'%d-%m-%Y') as date,
 DATE_FORMAT(`appointment_customer_staff_services`.`appointment_datetime`,'%h:%i %p') as time,
 `appointment_staffs`.`name` AS `doctor_name`,
 IF(`lab_pharmacy_file_status`.`status` = '' OR `lab_pharmacy_file_status`.`status` IS NULL, 'NEW', `lab_pharmacy_file_status`.`status`) AS `file_status`,
 IF(`lab_pharmacy_file_status`.`medicine_taken_days` = '' OR `lab_pharmacy_file_status`.`medicine_taken_days` IS NULL,'0',`lab_pharmacy_file_status`.`medicine_taken_days`) AS medicine_taken_days,
 IF(`lab_pharmacy_file_status`.`medicine_prescribed_days` = '' OR `lab_pharmacy_file_status`.`medicine_prescribed_days` IS NULL,'0',`lab_pharmacy_file_status`.`medicine_prescribed_days`) AS medicine_prescribed_days,
 IF(`lab_pharmacy_file_status`.`medicine_due_days` = '' OR `lab_pharmacy_file_status`.`medicine_due_days` IS NULL,'0',`lab_pharmacy_file_status`.`medicine_due_days`) AS medicine_due_days,
 IF(`lab_pharmacy_tracker`.`id` = '' OR `lab_pharmacy_tracker`.`id` IS NULL, 'NO', 'YES') AS `is_token_visible`
 FROM
 `appointment_customer_staff_services`  LEFT JOIN `appointment_customers` ON (`appointment_customers`.`id` = `appointment_customer_staff_services`.`appointment_customer_id`)
 LEFT JOIN `childrens` ON (`childrens`.`id` = `appointment_customer_staff_services`.`children_id`)
 LEFT JOIN `appointment_staffs` ON(`appointment_staffs`.`id` = `appointment_customer_staff_services`.`appointment_staff_id`)
 LEFT JOIN `lab_pharmacy_file_status` ON (`lab_pharmacy_file_status`.`lab_pharmacy_user_id` = '" . $lab_pharmacy_user_id . "' AND `lab_pharmacy_file_status`.`appointment_customer_staff_service_id` = `appointment_customer_staff_services`.`id`)
 LEFT JOIN `lab_pharmacy_tracker` ON ( `lab_pharmacy_tracker`.`appointment_customer_staff_service_id` = `appointment_customer_staff_services`.`id` AND `lab_pharmacy_tracker`.`status` = 'ACTIVE' AND `lab_pharmacy_tracker`.`lab_pharmacy_user_id` = '" . $lab_pharmacy_user_id . "' )
 WHERE
 `appointment_customer_staff_services`.`status` IN ('CLOSED')
 AND `appointment_customer_staff_services`.`thinapp_id` = '" . $thin_app_id . "'
 " . $condition . "
 
 
 UNION All
 
 SELECT 
'FROM_LAB' AS `type`,
`lab_patient_token_list`.`id` AS `id`,
`lab_patient_token_list`.`id` AS `lab_patient_token_list_id`,
 '0' AS `appointment_customer_staff_service_id`,
 `lab_patient_token_list`.`appointment_customer_id` AS `appointment_customer_id`,
 `lab_patient_token_list`.`token` AS `queue_number`,
 `lab_patient_token_list`.`children_id` AS `children_id`,
 '0' AS `appointment_staff_id`,
 `lab_patient_token_list`.`token_datetime` AS `appointment_datetime`,
 'NEW' AS `status`,
 `childrens`.`child_number`,
 IF(`appointment_customers`.`first_name` = '' OR `appointment_customers`.`first_name` IS NULL, `childrens`.`child_name`, `appointment_customers`.`first_name`) AS `patient_name`,
 IF(`appointment_customers`.`mobile` = '' OR `appointment_customers`.`mobile` IS NULL,`childrens`.`mobile`, `appointment_customers`.`mobile`) AS `patient_mobile`,
 'from_drive' AS `type_from`,
 '" . $labName . "' AS `lab_name`,
 DATE_FORMAT(`lab_patient_token_list`.`token_datetime`,'%d-%m-%Y') as date,
 DATE_FORMAT(`lab_patient_token_list`.`token_datetime`,'%h:%i %p') as time,
 '' AS `doctor_name`,
 IF(`lab_pharmacy_file_status`.`status` = '' OR `lab_pharmacy_file_status`.`status` IS NULL, 'NEW', `lab_pharmacy_file_status`.`status`) AS `file_status`,
 IF(`lab_pharmacy_file_status`.`medicine_taken_days` = '' OR `lab_pharmacy_file_status`.`medicine_taken_days` IS NULL,'0',`lab_pharmacy_file_status`.`medicine_taken_days`) AS medicine_taken_days,
 IF(`lab_pharmacy_file_status`.`medicine_prescribed_days` = '' OR `lab_pharmacy_file_status`.`medicine_prescribed_days` IS NULL,'0',`lab_pharmacy_file_status`.`medicine_prescribed_days`) AS medicine_prescribed_days,
 IF(`lab_pharmacy_file_status`.`medicine_due_days` = '' OR `lab_pharmacy_file_status`.`medicine_due_days` IS NULL,'0',`lab_pharmacy_file_status`.`medicine_due_days`) AS medicine_due_days,
 'NO' AS `is_token_visible`
 FROM `lab_patient_token_list` 
 LEFT JOIN `appointment_customers` ON (`appointment_customers`.`id` = `lab_patient_token_list`.`appointment_customer_id`)
 LEFT JOIN `childrens` ON (`childrens`.`id` = `lab_patient_token_list`.`children_id`)
 LEFT JOIN `lab_pharmacy_file_status` ON (`lab_pharmacy_file_status`.`lab_pharmacy_user_id` = '" . $lab_pharmacy_user_id . "' AND `lab_pharmacy_file_status`.`lab_patient_token_list_id` = `lab_patient_token_list`.`id`)
 WHERE
 `lab_patient_token_list`.`lab_pharmacy_user_id` = '" . $lab_pharmacy_user_id . "'
 " . $condition1 . "
 ) AS `datatoshow`
 ORDER BY `appointment_datetime` DESC LIMIT " . $limit . " OFFSET " . $offset;
                        $appointmentRS = $connection->query($appointmentSql);

                        if ($appointmentRS->num_rows) {
                            $appointmentData = mysqli_fetch_all($appointmentRS, MYSQLI_ASSOC);
                            $list = array();
                            foreach ($appointmentData AS $key => $data) {
                                $list[$key] = $data;
                                if (!empty($data['appointment_customer_id'])) {
                                    $folderSql = "SELECT `id` FROM `drive_folders` WHERE `appointment_customer_id` = '" . $data['appointment_customer_id'] . "' AND `thinapp_id` = '" . $thin_app_id . "' LIMIT 1";
                                    $folderRS = $connection->query($folderSql);
                                    $folderData = mysqli_fetch_assoc($folderRS);
                                    $folderID = $folderData['id'];
                                    $fileSql = "SELECT `id`,`file_type`,`file_path` FROM `drive_files` WHERE `drive_folder_id` = '" . $folderID . "' AND `file_category_master_id` = '6' and status ='ACTIVE' order by modified desc";
                                    $fileRS = $connection->query($fileSql);
                                    $fileList = mysqli_fetch_all($fileRS, MYSQLI_ASSOC);
                                    $list[$key]['file_list'] = $fileList;
                                    $list[$key]['drive_folder_id'] = $folderID;
                                } else if ($data['children_id']) {
                                    $folderSql = "SELECT `id` FROM `drive_folders` WHERE `children_id` = '" . $data['children_id'] . "' AND `thinapp_id` = '" . $thin_app_id . "' LIMIT 1";
                                    $folderRS = $connection->query($folderSql);
                                    $folderData = mysqli_fetch_assoc($folderRS);
                                    $folderID = $folderData['id'];
                                    $fileSql = "SELECT `id`,`file_type`,`file_path` FROM `drive_files` WHERE `drive_folder_id` = '" . $folderID . "' AND `file_category_master_id` = '6' and status ='ACTIVE' order by modified desc";
                                    $fileRS = $connection->query($fileSql);
                                    $fileList = mysqli_fetch_all($fileRS, MYSQLI_ASSOC);
                                    $list[$key]['file_list'] = $fileList;
                                    $list[$key]['drive_folder_id'] = $folderID;
                                }
                            }

                            $response['data']['list'] = $list;
                            $response['status'] = 1;
                            $response['message'] = "List found.";

                        } else {
                            $response['status'] = 0;
                            $response['message'] = "List not found.";
                        }

                    }
                } else {
                    $response['status'] = 0;
                    $response['message'] = "List not found.";
                }

            }
            $response['is_inhouse'] = $isInhouse;
            if ($return === false) {
                Custom::sendResponse($response);
            } else {
                return $response;
            }
        }
        exit();
    }

    public static function lab_delete_user()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $lab_user_id = isset($data['lab_user_id']) ? $data['lab_user_id'] : 0;
            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else if (empty($lab_user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid lab user id';
            } else {
                $connection = ConnectionUtil::getConnection();
                $created = Custom::created();
                $status = "INACTIVE";
                $lab_user_data = Custom::lab_get_user_by_id($lab_user_id);
                if ($lab_user_data) {
                    $sql = "update lab_pharmacy_users set status = ?, modified=? where id = ?";
                    $stmt = $connection->prepare($sql);
                    $stmt->bind_param('sss', $status, $created, $lab_user_id);
                    if ($stmt->execute()) {
                        $response['status'] = 1;
                        $response['message'] = "User delete successfully";
                        $request_mobile = $lab_user_data['mobile'];
                        $file_name = Custom::encrypt_decrypt('encrypt', "user_$request_mobile" . $thin_app_id);
                        WebservicesFunction::deleteJson(array($file_name), 'lab_user');
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "User could not delete";
                    }
                } else {
                    $response['status'] = 0;
                    $response['message'] = "User not found";
                }

            }
            Custom::sendResponse($response);
        }
        exit();

    }

    public static function lab_get_doctor_list()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else {
                $connection = ConnectionUtil::getConnection();

                $sql = "SELECT `id`,`name` FROM `appointment_staffs` WHERE `thinapp_id` = '" . $thin_app_id . "' AND `status` = 'ACTIVE'";
                $RS = $connection->query($sql);

                if ($RS->num_rows) {

                    $data = mysqli_fetch_all($RS, MYSQLI_ASSOC);
                    $response['data']['list'] = $data;
                    $response['status'] = 1;
                    $response['message'] = "List found";
                } else {
                    $response['status'] = 0;
                    $response['message'] = "User not found";
                }

            }
            Custom::sendResponse($response);
        }
        die;
    }

    public static function lab_update_file_status($data = null)
    {

        $return = true;
        $method = 'POST';
        if (empty($data)) {
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);
            $dataFromApp = json_decode($request, true);
            $return = false;
            $method = $_SERVER['REQUEST_METHOD'];
        }

        if ($method === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $lab_user_id = isset($data['lab_user_id']) ? $data['lab_user_id'] : 0;
            $type = isset($data['type']) ? $data['type'] : "";
            $appointmentCustomerStaffServiceID = isset($data['appointment_customer_staff_service_id']) ? $data['appointment_customer_staff_service_id'] : 0;
            $appointmentStaffID = isset($data['appointment_staff_id']) ? $data['appointment_staff_id'] : 0;
            $appointmentCustomerID = isset($data['appointment_customer_id']) ? $data['appointment_customer_id'] : 0;
            $childrenID = isset($data['children_id']) ? $data['children_id'] : 0;
            $file_id = isset($data['file_id']) ? $data['file_id'] : 0;
            $status = isset($data['status']) ? $data['status'] : 0;
            $role_type = isset($data['role_type']) ? $data['role_type'] : 'ALL';
            $lab_patient_token_list_id = isset($data['lab_patient_token_list_id']) ? $data['lab_patient_token_list_id'] : 0;
            $appointment_type = isset($data['appointment_type']) ? $data['appointment_type'] : "FROM_APPOINTMENT";


            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else if (empty($lab_user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid lab user id';
            } else if (empty($type)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid type';
            } else if (empty($file_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid file';
            } else if (empty($status)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid status';
            } else {
                $connection = ConnectionUtil::getConnection();
                $created = Custom::created();


                if ($role_type == 'LAB' || $role_type == 'PHARMACY') {

                    $labUserStr = "SELECT `id`,`is_inhouse`,`lab_name` FROM `lab_pharmacy_users` WHERE `mobile` = '" . $mobile . "' AND `thinapp_id` = '" . $thin_app_id . "' AND `role_type` = '" . $role_type . "' AND `request_status` = 'APPROVED' AND `status` = 'ACTIVE' LIMIT 1";
                    $labUserRS = $connection->query($labUserStr);
                    if ($labUserRS->num_rows) {
                        $labUserData = mysqli_fetch_assoc($labUserRS);
                        $lab_user_id = $labUserData['id'];
                    }


                }


                if ($type == "from_lab") {
                    $drive_file_id = 0;
                    $lab_patient_uploaded_record_id = $file_id;
                } else {
                    $drive_file_id = $file_id;
                    $lab_patient_uploaded_record_id = 0;
                }


                if ($appointmentCustomerStaffServiceID > 0) {
                    $sql = "SELECT `queue_number`,`appointment_datetime` FROM `appointment_customer_staff_services` WHERE `id` = '" . $appointmentCustomerStaffServiceID . "' LIMIT 1";
                    $RS = $connection->query($sql);
                    $data = mysqli_fetch_assoc($RS);
                    $queue_number = $data['queue_number'];
                    $appointment_datetime = $data['appointment_datetime'];
                } else if ($lab_patient_token_list_id > 0) {
                    $sql = "SELECT `token`,`token_datetime` FROM `lab_patient_token_list` WHERE `id` = '" . $lab_patient_token_list_id . "' LIMIT 1";
                    $RS = $connection->query($sql);
                    $data = mysqli_fetch_assoc($RS);
                    $queue_number = $data['token'];
                    $appointment_datetime = $data['token_datetime'];
                } else {
                    $queue_number = "";
                    $appointment_datetime = "";
                }


                $condition = "";

                if ($drive_file_id > 0) {
                    if ($lab_patient_token_list_id > 0) {
                        $condition = "`lab_patient_token_list_id` = '" . $lab_patient_token_list_id . "'";
                    } else {
                        $condition = "`appointment_customer_staff_service_id` = '" . $drive_file_id . "'";
                    }

                } else {
                    $condition = "`lab_patient_uploaded_record_id` = '" . $lab_patient_uploaded_record_id . "'";
                }

                $check = "SELECT `id` FROM `lab_pharmacy_file_status` WHERE `lab_pharmacy_user_id` = '" . $lab_user_id . "' AND " . $condition;

                $checkRS = $connection->query($check);
                $updateMedDay = "";
                if ($status == "BILLING") {
                    $medicine_taken_days = isset($dataFromApp['medicine_taken_days']) ? $dataFromApp['medicine_taken_days'] : 0;
                    $medicine_prescribed_days = isset($dataFromApp['medicine_prescribed_days']) ? $dataFromApp['medicine_prescribed_days'] : 0;
                    $medicine_due_days = ($medicine_prescribed_days - $medicine_taken_days);
                    $updateMedDay = "`medicine_taken_days` = '" . $medicine_taken_days . "',`medicine_prescribed_days` = '" . $medicine_prescribed_days . "',`medicine_due_days` = '" . $medicine_due_days . "',";
                }
                if ($checkRS->num_rows) {

                    $updateSql = "UPDATE `lab_pharmacy_file_status` SET " . $updateMedDay . "`status` = '" . $status . "',`modified`='" . $created . "' WHERE `lab_pharmacy_user_id` = '" . $lab_user_id . "' AND " . $condition;

                    if ($connection->query($updateSql)) {
                        $response['status'] = 1;
                        $response['message'] = "Status updated successfully";
                    } else {
                        $response['status'] = 1;
                        $response['message'] = "Status could not be updated successfully";
                    }

                } else {

                    $insertSql = "INSERT INTO `lab_pharmacy_file_status` SET " . $updateMedDay . "`lab_pharmacy_user_id` = '" . $lab_user_id . "',`lab_patient_token_list_id` = '" . $lab_patient_token_list_id . "',`type` = '" . $appointment_type . "', `appointment_customer_staff_service_id` = '" . $appointmentCustomerStaffServiceID . "', `appointment_staff_id` = '" . $appointmentStaffID . "', `appointment_customer_id` = '" . $appointmentCustomerID . "', `children_id` = '" . $childrenID . "', `queue_number` = '" . $queue_number . "', `appointment_datetime` = '" . $appointment_datetime . "', `drive_file_id` = '" . $drive_file_id . "', `lab_patient_uploaded_record_id` = '" . $lab_patient_uploaded_record_id . "', `status` = '" . $status . "', `modified` = '" . $created . "', `created` = '" . $created . "' ";
                    if ($connection->query($insertSql)) {
                        $response['status'] = 1;
                        $response['message'] = "Status updated successfully";
                    } else {
                        $response['status'] = 1;
                        $response['message'] = "Status could not be updated successfully";
                    }
                }


            }
            if ($return === false) {
                Custom::sendResponse($response);
            } else {
                return $response;
            }
        }
        exit();
    }

    public static function lab_upload_file_to_patient_child_folder()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $role_id = isset($data['role_id']) ? $data['role_id'] : "";
            $childrenID = isset($data['children_id']) ? $data['children_id'] : "";
            $folderID = isset($data['drive_folder_id']) ? $data['drive_folder_id'] : "";
            $categoryID = isset($data['category_id']) ? $data['category_id'] : "6";
            $appointmentCustomerID = isset($data['appointment_customer_id']) ? $data['appointment_customer_id'] : "";
            $file_array = isset($data['file_array']) ? $data['file_array'] : "";
            $file_name = isset($data['file_name']) ? $data['file_name'] : "";
            $file_path = isset($data['file_path']) ? $data['file_path'] : "";
            $file_size = isset($data['file_size']) ? $data['file_size'] : "";


            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else if (empty($file_path)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid file';
            } else if ($childrenID == "" && $appointmentCustomerID == "") {
                $response['status'] = 0;
                $response['message'] = 'Invalid customer ID';
            } else {

                $connection = ConnectionUtil::getConnection();
                $post['thin_app_id'] = $thin_app_id;
                $post['user_id'] = $user_id;
                $post['app_key'] = $app_key;
                $post['mobile'] = $mobile;
                $post['role_id'] = $role_id;


                $post['file_array'][0]['file_type'] = Custom::getFileType($file_name);
                $post['file_array'][0]['file_name'] = $file_name;
                $post['file_array'][0]['file_path'] = $file_path;
                $post['file_array'][0]['file_size'] = $file_size;
                $post['listing_type'] = "OTHER";


                /*if($data['appointment_customer_id'] != '')
                            {
                                echo  $folderSql = "SELECT `drive_folders`.`id` FROM `appointment_customers` LEFT JOIN `drive_folders` ON (`appointment_customers`.`mobile` = `drive_folders`.`folder_add_from_number` AND `drive_folders`.`thinapp_id` = `appointment_customers`.`thinapp_id`) WHERE `appointment_customers`.`id` = '".$appointmentCustomerID."' AND `appointment_customers`.`thinapp_id` = '".$thin_app_id."' LIMIT 1"; die;
                                $folderRS = $connection->query($folderSql);
                                $folderData = mysqli_fetch_assoc($folderRS);
                                $folderID = $folderData['id'];


                            }
                            else
                            {
                                $folderSql = "SELECT `drive_folders`.`id` FROM  `childrens` LEFT JOIN `drive_folders` ON (`childrens`.`child_number` = `drive_folders`.`child_number` AND `drive_folders`.`thinapp_id` = `childrens`.`thinapp_id`) WHERE `childrens`.`id` = '".$appointmentCustomerID."' AND `childrens`.`thinapp_id` = '".$thin_app_id."' LIMIT 1";
                                $folderRS = $connection->query($folderSql);
                                $folderData = mysqli_fetch_assoc($folderRS);
                                $folderID = $folderData['id'];

                            } */


                $post['drive_folder_id'] = $folderID;


                $post['category_id'] = $categoryID;
                $post['is_pad_prescription'] = "NO";

                $res = WebservicesFunction::add_file($post, true, true);
                $res = json_decode($res, true);


            }
            Custom::sendResponse($res);

        }
        exit();


    }

    public static function lab_update_traker_token($data = null)
    {
        $return = true;
        $method = 'POST';
        if (empty($data)) {
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);
            $return = false;
            $method = $_SERVER['REQUEST_METHOD'];
        }

        if ($method === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $lab_user_id = isset($data['lab_user_id']) ? $data['lab_user_id'] : 0;
            $role_type = isset($data['role_type']) ? $data['role_type'] : 'ALL';
            $appointmentCustomerStaffServiceID = isset($data['appointment_customer_staff_service_id']) ? $data['appointment_customer_staff_service_id'] : 0;
            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else if (empty($lab_user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid lab user id';
            } else {
                $connection = ConnectionUtil::getConnection();
                $created = Custom::created();

                if ($role_type == 'LAB' || $role_type == 'PHARMACY') {

                    $labUserStr = "SELECT `id`,`is_inhouse`,`lab_name` FROM `lab_pharmacy_users` WHERE `mobile` = '" . $mobile . "' AND `thinapp_id` = '" . $thin_app_id . "' AND `role_type` = '" . $role_type . "' AND `request_status` = 'APPROVED' AND `status` = 'ACTIVE' LIMIT 1";
                    $labUserRS = $connection->query($labUserStr);
                    if ($labUserRS->num_rows) {
                        $labUserData = mysqli_fetch_assoc($labUserRS);
                        $lab_user_id = $labUserData['id'];
                    }


                }

                if ($appointmentCustomerStaffServiceID > 0) {
                    $selectSql = "SELECT `id` FROM `lab_pharmacy_tracker` WHERE `lab_pharmacy_user_id` = '" . $lab_user_id . "' LIMIT 1";
                    $selectRS = $connection->query($selectSql);
                    if ($selectRS->num_rows) {
                        $updateSql = "UPDATE `lab_pharmacy_tracker` SET `status` = 'ACTIVE', `appointment_customer_staff_service_id` = '" . $appointmentCustomerStaffServiceID . "',`modified` = '" . $created . "' WHERE `lab_pharmacy_user_id` = '" . $lab_user_id . "'";
                        if ($connection->query($updateSql)) {
                            $response['status'] = 1;
                            $response['message'] = 'Status updated successfully';
                        } else {
                            $response['status'] = 0;
                            $response['message'] = 'Could not update status';
                        }
                    } else {
                        $insertSql = "INSERT INTO `lab_pharmacy_tracker` SET `status` = 'ACTIVE', `appointment_customer_staff_service_id` = '" . $appointmentCustomerStaffServiceID . "', `lab_pharmacy_user_id` = '" . $lab_user_id . "',`thinapp_id` = '" . $thin_app_id . "',`modified` = '" . $created . "',`created` = '" . $created . "'";
                        if ($connection->query($insertSql)) {
                            $response['status'] = 1;
                            $response['message'] = 'Status updated successfully';
                        } else {
                            $response['status'] = 0;
                            $response['message'] = 'Could not update status';
                        }
                    }
                } else {
                    $updateSql = "UPDATE `lab_pharmacy_tracker` SET `status` = 'INACTIVE',`modified` = '" . $created . "' WHERE `lab_pharmacy_user_id` = '" . $lab_user_id . "'";
                    if ($connection->query($updateSql)) {
                        $response['status'] = 1;
                        $response['message'] = 'Status updated successfully';
                    } else {
                        $response['status'] = 0;
                        $response['message'] = 'Could not update status';
                    }
                }

            }
            if ($return === false) {
                Custom::sendResponse($response);
            } else {
                return $response;
            }
        }
        exit();
    }

    public static function lab_add_patient($data = null)
    {

        $return_type = true;
        if (empty($data)) {
            $return_type = false;
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);
        }

        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $patient_type = isset($data['patient_type']) ? $data['patient_type'] : "CUSTOMER";
            $patient_name = isset($data['patient_name']) ? trim($data['patient_name']) : "";
            $patient_mobile = isset($data['patient_mobile']) ? Custom::create_mobile_number($data['patient_mobile']) : "";
            //$dob = isset($data['dob']) ? $data['dob'] : "";
            //$gender = isset($data['gender']) ? strtoupper($data['gender']) : "";
            $fileUrl = isset($data['image']) ? $data['image'] : "";
            $lab_pharmacy_user_id = isset($data['lab_pharmacy_user_id']) ? $data['lab_pharmacy_user_id'] : 0;
            $send_notification = false;
            $patient_id = 0;
            try {
                if (empty($thin_app_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid thinapp id';
                } else if (empty($app_key)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid app key';
                } else if (empty($user_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid user id';
                } else if (empty($fileUrl)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid file url';
                } else if (empty($lab_pharmacy_user_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid user id';
                } else if (empty($mobile) || !Custom::create_mobile_number($mobile)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid mobile';
                } else if ($patient_type != "CUSTOMER" && $patient_type != "CHILDREN") {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid patient type';
                } else if (empty($patient_name)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid patient name';
                } else if (empty($patient_mobile) || !Custom::create_mobile_number($patient_mobile)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid patient mobile';
                } else if (empty($dob) && $patient_type == "CHILDREN") {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid patient dob';
                } else {

                    $mobile = Custom::create_mobile_number($mobile);
                    $patient_mobile = Custom::create_mobile_number($patient_mobile);
                    if ($patient_type == "CUSTOMER") {
                        $customer_data = Custom::search_customer_name($thin_app_id, $patient_mobile, $patient_name);
                        if (empty($customer_data)) {
                            $customer = array();
                            $customer['app_key'] = $app_key;
                            $customer['thin_app_id'] = $thin_app_id;
                            $customer['user_id'] = $user_id;
                            $customer['first_name'] = $patient_name;
                            //$customer['dob'] = $dob;
                            $customer['mobile'] = $patient_mobile;
                            $customer['country_code'] = "+91";
                            //$customer['gender'] = strtoupper($gender);
                            //$customer['address'] = "";
                            $result = WebservicesFunction::appointment_add_customer($customer);
                            $result = $customer_data = json_decode($result, true);
                            if ($result['status'] == 1) {

                                $response['status'] = 1;
                                $response['message'] = "Patient Added Successfully";

                                $connection = ConnectionUtil::getConnection();

                                $countToken = "SELECT COUNT(`id`) AS `total` FROM `lab_patient_token_list` WHERE `thinapp_id` = '" . $thin_app_id . "' AND DATE(token_datetime) = DATE(NOW()) LIMIT 1";
                                $countTokenSql = $connection->query($countToken);
                                $countTokenData = mysqli_fetch_assoc($countTokenSql);
                                $count = $countTokenData['total'];
                                $token = 'WP' . ($count + 1);
                                $sql = "INSERT INTO `lab_patient_token_list` (`thinapp_id`,`lab_pharmacy_user_id`,`appointment_customer_id`,`children_id`,`file_url`,`token`,`token_datetime`,`created`,`modified`) VALUES ('" . $thin_app_id . "','" . $lab_pharmacy_user_id . "','" . $result['customer_id'] . "','0','" . $fileUrl . "','" . $token . "','" . date('Y-m-d H:i') . "','" . date('Y-m-d H:i') . "','" . date('Y-m-d H:i') . "')";
                                $connection->query($sql);
                                $res = Custom::create_and_share_folder($thin_app_id, $patient_mobile, $patient_name, 'CUSTOMER', $result['customer_id']);

                            } else {
                                $response['status'] = 0;
                                $response['message'] = $result['message'];
                            }
                        } else {

                            $countToken = "SELECT COUNT(`id`) AS `total` FROM `lab_patient_token_list` WHERE `thinapp_id` = '" . $thin_app_id . "' AND DATE(token_datetime) = DATE(NOW()) LIMIT 1";
                            $countTokenSql = $connection->query($countToken);
                            $countTokenData = mysqli_fetch_assoc($countTokenSql);
                            $count = $countTokenData['total'];
                            $token = WP . ($count + 1);

                            $sql = "INSERT INTO `lab_patient_token_list` (`thinapp_id`,`lab_pharmacy_user_id`,`appointment_customer_id`,`children_id`,`file_url`,`token`,`token_datetime`,`created`,`modified`) VALUES ('" . $thin_app_id . "','" . $lab_pharmacy_user_id . "','" . $customer_data['id'] . "','0','" . $fileUrl . "','" . $token . "','" . date('Y-m-d H:i:s') . "','" . date('Y-m-d H:i:s') . "','" . date('Y-m-d H:i:s') . "')";
                            $connection = ConnectionUtil::getConnection();
                            $connection->query($sql);


                            $response['status'] = 1;
                            $response['message'] = "Patient already exist.";
                        }

                    }

                    /* else {
                        $child = array();
                        $child['app_key'] = $app_key;
                        $child['thin_app_id'] = $thin_app_id;
                        $child['user_id'] = $user_id;
                        $child['child_name'] = $patient_name;
                        $child['mobile'] = $patient_mobile;
                        $child['dob'] = $dob;
                        $child['gender'] = strtoupper($gender);
                        $result = WebservicesFunction::add_child($child);
                        $result = $customer_data = json_decode($result, true);
                        if ($result['status'] == 1) {
                            $response['status'] = 1;
                            $response['message'] = "Children add successfully";
                            $send_notification = true;
                            $patient_id = $result['child_id'];

                        } else {
                            $response['status'] = 0;
                            $response['message'] = $result['message'];
                        }
                    }*/

                }
            } catch (Exception $e) {
                $response['status'] = 0;
                $response['message'] = "Something went wrong on server";
            }
            Custom::sendResponse($response);
            Custom::send_process_to_background();

        } else {
            return json_encode($response);
        }


        exit();
    }

    public static function lab_add_custom_token()
    {
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $request = file_get_contents("php://input");
            $data = json_decode($request, true);
            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $appointmentCusromerID = isset($data['appointment_customer_id']) ? $data['appointment_customer_id'] : 0;
            $childrenID = isset($data['children_id']) ? $data['children_id'] : 0;
            $lab_pharmacy_user_id = isset($data['lab_pharmacy_user_id']) ? $data['lab_pharmacy_user_id'] : 0;
            $fileUrl = isset($data['image']) ? $data['image'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($lab_pharmacy_user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid lab id';
            } else if (empty($fileUrl)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid file url';
            } else if (empty($appointmentCusromerID) && empty($childrenID)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid patient ID';
            } else {
                $connection = ConnectionUtil::getConnection();
                $connection->autocommit(true);
                $countToken = "SELECT COUNT(`id`) AS `total` FROM `lab_patient_token_list` WHERE `thinapp_id` = '" . $thin_app_id . "' AND DATE(token_datetime) = DATE(NOW()) LIMIT 1";
                $countTokenSql = $connection->query($countToken);
                $countTokenData = mysqli_fetch_assoc($countTokenSql);
                $count = $countTokenData['total'];
                $token = 'WP' . ($count + 1);

                //$sql1 = "INSERT INTO `lab_patient_token_list` (`thinapp_id`,`lab_pharmacy_user_id`,`appointment_customer_id`,`children_id`,`file_url`,`token`,`token_datetime`,`created`,`modified`) VALUES ('".$thin_app_id."','".$lab_pharmacy_user_id."','".$appointmentCusromerID."','".$childrenID."','".$fileUrl."','".$token."','".date('Y-m-d H:i:s')."','".date('Y-m-d H:i:s')."','".date('Y-m-d H:i:s')."')";


                $date = date('Y-m-d H:i:s');

                $sql1 = "INSERT INTO `lab_patient_token_list` (`thinapp_id`,`lab_pharmacy_user_id`,`appointment_customer_id`,`children_id`,`file_url`,`token`,`token_datetime`,`created`,`modified`) VALUES (?,?,?,?,?,?,?,?,?)";
                $stmt = $connection->prepare($sql1);
                $stmt->bind_param('sssssssss', $thin_app_id, $lab_pharmacy_user_id, $appointmentCusromerID, $childrenID, $fileUrl, $token, $date, $date, $date);

                if ($stmt->execute()) {
                    $response['status'] = 1;
                    $response['message'] = "Added.";
                } else {
                    $response['status'] = 0;
                    $response['message'] = "Could not save.";
                }
            }
            echo json_encode($response);
            die;

        }
    }

    public static function lab_get_patient_list()
    {


        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $user_role = isset($data['user_role']) ? $data['user_role'] : "";
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : 0;
            $search = isset($data['search']) ? $data['search'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else {
                try {


                    $condition = "";
                    /*if ($user_role == "STAFF") {
                        $condition = " AND acss.appointment_staff_id = $doctor_id ";
                    }*/
                    if (!empty($search)) {
                        $condition .= " and ( c.mobile like '%$search%' OR ac.mobile like '%$search%' ) ";
                    }

                    $limit = PAGINATION_LIMIT;
                    $offset = $offset * $limit;
                    $query = "SELECT * FROM ( select appointment_customers.first_name as username, 
                        appointment_customers.id as patient_id, 
                        'PATIENT' as patient_type, 
                        appointment_customers.uhid as uhid, 
                        drive_folders.id AS folder_id, 
                        appointment_customers.created as created_date, 
                        appointment_customers.mobile as mobile 
                        from 
                        appointment_customers 
                        LEFT JOIN `drive_folders` ON (`drive_folders`.`appointment_customer_id` = appointment_customers.id ) 
                        where 
                        appointment_customers.status ='ACTIVE'
                        AND appointment_customers.mobile like '%" . $search . "%'
                        AND appointment_customers.thinapp_id = '" . $thin_app_id . "'
                        
                        UNION
                        
                        select childrens.child_name as username, 
                        childrens.id as patient_id, 
                        'CHILDREN' as patient_type, 
                        childrens.uhid as uhid, 
                        drive_folders.id AS folder_id, 
                        childrens.created as created_date, 
                        childrens.mobile as mobile 
                        from 
                        childrens 
                        LEFT JOIN `drive_folders` ON (`drive_folders`.`children_id` = childrens.id ) 
                        where 
                        childrens.status ='ACTIVE'
                        AND childrens.mobile like '%" . $search . "%'
                        AND childrens.thinapp_id ='" . $thin_app_id . "' ) AS data_to_send
                        ORDER BY created_date DESC";

                    $connection = ConnectionUtil::getConnection();
                    $message_list = $connection->query($query);
                    if ($message_list->num_rows) {
                        $user_data = mysqli_fetch_all($message_list, MYSQLI_ASSOC);
                        $response['status'] = 1;
                        $response['message'] = "List found";
                        $response['data']['mobile_list'] = $user_data;

                    } else {
                        $response['status'] = 0;
                        $response['message'] = "List Not Found";
                        $response['data']['mobile_list'] = array();
                    }


                } catch (Exception $e) {
                    $response['status'] = 0;
                    $response['message'] = "server error";
                }

            }
            Custom::sendResponse($response);
        }
        exit();
    }


    /* LAB AND PHARMACY MODULE END FROM HERE */


    public static function appointment_update_current_token()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $token_number = isset($data['token_number']) ? trim($data['token_number']) : "";
            $doctor_id = isset($data['doctor_id']) ? trim($data['doctor_id']) : 0;

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($doctor_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid doctor id';
            } else {

                $send_notification = false;

                $connection = ConnectionUtil::getConnection();
                $created = Custom::created();
                $query = "select id from appointment_current_token_numbers where doctor_id = $doctor_id and DATE(appointment_date) = DATE(NOW()) and status = 'ACTIVE'  LIMIT 1";
                $data_list = $connection->query($query);
                if (!$data_list->num_rows) {

                    $date = date('Y-m-d');
                    $sql = "INSERT INTO appointment_current_token_numbers (thinapp_id, doctor_id, appointment_date, token_number, created, modified  ) VALUES (?, ?, ?, ?, ?, ?)";
                    $stmt = $connection->prepare($sql);
                    $stmt->bind_param('ssssss', $thin_app_id, $doctor_id, $date, $token_number, $created, $created);
                } else {
                    $tracker_data = mysqli_fetch_assoc($data_list);
                    if (!empty($token_number)) {
                        $sql = "UPDATE appointment_current_token_numbers set token_number =?, modified = ?  where id = ?";
                        $stmt = $connection->prepare($sql);
                        $stmt->bind_param('sss', $token_number, $created, $tracker_data['id']);
                    } else {
                        $sql = "delete from  appointment_current_token_numbers where id = ?";
                        $stmt = $connection->prepare($sql);
                        $stmt->bind_param('s', $tracker_data['id']);
                    }
                }
                if ($stmt->execute()) {
                    if (!empty($token_number)) {
                        $send_notification = true;
                    }
                    $response['status'] = 1;
                    $response['message'] = "Token update successfully";

                } else {
                    $response['status'] = 0;
                    $response['message'] = "Sorry token could not update";
                }

            }
            Custom::sendResponse($response);
            if ($send_notification === true) {
                Custom::send_process_to_background();

                $query = "select u.firebase_token from appointment_customer_staff_services as acss left join appointment_customers as ac on ac.id = acss.appointment_customer_id left join childrens as c on c.id = acss.children_id left join users as u on (u.mobile = ac.mobile and u.thinapp_id = ac.thinapp_id) OR (u.mobile = c.mobile and u.thinapp_id = c.thinapp_id) where acss.appointment_staff_id = $doctor_id and acss.status IN('NEW','CONFIRM','RESCHEDULE') and DATE(acss.appointment_datetime) = DATE(NOW()) group by u.id";
                $connection = ConnectionUtil::getConnection();
                $service_message_list = $connection->query($query);
                if ($service_message_list->num_rows) {
                    $token_array = array_column(mysqli_fetch_all($service_message_list, MYSQLI_ASSOC), 'firebase_token');
                    $message = "Token number is : $token_number";
                    $sendArray = array(
                        'channel_id' => 0,
                        'thinapp_id' => $thin_app_id,
                        'flag' => 'TOKEN_UPDATE',
                        'title' => 'New Message',
                        'message' => $message,
                        'description' => '',
                        'chat_reference' => '',
                        'module_type' => 'APPOINTMENT_TOKEN',
                        'module_type_id' => $token_number,
                        'firebase_reference' => ""
                    );
                    if (!empty($token_array)) {
                        Custom::send_notification_via_token($sendArray, $token_array, $thin_app_id);
                    }
                }


            }

        }
        exit();
    }

    public static function appointment_dashboard_tracker_doctor()
    {


        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid patient mobile';
            } else {
                try {
                    $query = "select app_sta.id as doctor_id, app_sta.profile_photo, app_sta.name, IFNULL(actn.token_number,0) as doctor_token, acss.queue_number as token_number from appointment_customer_staff_services as acss left join appointment_customers as ac on ac.id = acss.appointment_customer_id and ac.mobile = '$mobile' left join childrens as c on c.id = acss.children_id and c.mobile ='$mobile' left join appointment_staffs as app_sta on app_sta.id = acss.appointment_staff_id left join appointment_current_token_numbers as actn on actn.doctor_id = acss.appointment_staff_id and DATE(actn.appointment_date) = DATE(NOW()) and actn.`status` = 'ACTIVE' where acss.thinapp_id = $thin_app_id and  acss.status IN('NEW','CONFIRM','RESCHEDULE') and DATE(acss.appointment_datetime) = DATE(NOW()) and has_token = 'YES' group by app_sta.id  limit 20";
                    $connection = ConnectionUtil::getConnection();
                    $message_list = $connection->query($query);
                    if ($message_list->num_rows) {
                        $user_data = mysqli_fetch_all($message_list, MYSQLI_ASSOC);
                        $response['status'] = 1;
                        $response['message'] = "List found";
                        $response['data']['list'] = $user_data;
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "List Not Found";
                    }
                } catch (Exception $e) {
                    $response['status'] = 0;
                    $response['message'] = "server error";
                }

            }
            Custom::sendResponse($response);
        }
        exit();
    }


    public static function clipboard_main_search()
    {


        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $search = isset($data['search']) ? $data['search'] : "";
            $search_type = isset($data['search_type']) ? $data['search_type'] : "ALL";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid patient mobile';
            } else if (empty($search)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter value to search';
            } else {
                try {

                    $query = "";
                    $patient_query = "(select DATE_FORMAT(ac.dob,'%d-%m-%Y') as dob, ac.age, ac.gender, '0' as appointment_id, '' as queue_number, '' as patient_id, ac.id as edit_patient_id, ac.first_name as name, ac.mobile, df.id as folder_id, 'PATIENT' as data_type from appointment_customers as ac join drive_folders as df on df.appointment_customer_id = ac.id where ac.thinapp_id = $thin_app_id and (ac.first_name like '%$search%' OR ac.mobile like '%$search%'))";
                    $appointment_search = !empty($search) ? " and ( acss.queue_number = '$search' OR ac.first_name like'%$search%' OR c.child_name like'%$search%' ) " : "";
                    $appointment_query = "(select  IFNULL(DATE_FORMAT(ac.dob,'%d-%m-%Y'),DATE_FORMAT(c.dob,'%d-%m-%Y')) as dob , IFNULL(ac.gender,c.gender) as gender, IFNULL(ac.age,'') as age, acss.id as appointment_id, acss.queue_number, '' as patient_id,  IFNULL(ac.id,c.id) as edit_patient_id, df.folder_name as name, IFNULL(ac.mobile,c.mobile) as mobile, df.id as folder_id, 'APPOINTMENT' as data_type from appointment_customer_staff_services as acss left join appointment_customers as ac on ac.id = acss.appointment_customer_id and acss.children_id = 0 left join childrens as c on c.id = acss.children_id and acss.appointment_customer_id = 0  join drive_folders as df on (df.folder_add_from_number = ac.mobile and ac.thinapp_id = df.thinapp_id ) OR (c.child_number = df.child_number and c.thinapp_id = df.thinapp_id) where DATE(acss.appointment_datetime) = DATE(NOW())  AND  acss.thinapp_id = $thin_app_id $appointment_search and acss.status IN ('NEW','CONFIRM','RESCHEDULE') )";
                    $folder_query = "(select  '' as dob, '' as age, '' as gender, '0' as appointment_id, '' as queue_number, '' as patient_id, IF(df.appointment_customer_id > 0,df.appointment_customer_id,df.children_id ) as edit_patient_id, df.folder_name as name, ds.share_with_mobile as mobile, df.id as folder_id, 'FOLDER' as data_type from drive_shares  as ds join drive_folders as df on df.id = ds.drive_folder_id and df.appointment_customer_id > 0 where  ds.thinapp_id = $thin_app_id and (df.folder_name like '%$search%' OR ds.share_with_mobile LIKE '%$search%' ))";
                    $child_query = "(select DATE_FORMAT(c.dob,'%d-%m-%Y') as dob, '' as age , c.gender, '0' as appointment_id, '' as queue_number, c.child_number as patient_id, c.id as edit_patient_id, c.child_name as name, c.mobile, df.id as folder_id, 'CHILDREN' as data_type from childrens as c join drive_folders as df on c.child_number = df.child_number and df.thinapp_id = c.thinapp_id where c.thinapp_id = $thin_app_id and (c.child_name like '%$search%' OR c.mobile like '%$search%' OR c.parents_mobile like '%$search%' ))";
                    if ($search_type == "APPOINTMENT") {
                        $query = $appointment_query;
                    } else if ($search_type == "PATIENT") {
                        $query = " $patient_query UNION ALL $child_query ";
                    } else if ($search_type == "FOLDER") {
                        $query = $folder_query;
                    } else {
                        $query = "$appointment_query UNION ALL $patient_query UNION ALL $folder_query UNION ALL $child_query ";
                    }
                    $connection = ConnectionUtil::getConnection();
                    $message_list = $connection->query($query);
                    if ($message_list->num_rows) {
                        $user_data = mysqli_fetch_all($message_list, MYSQLI_ASSOC);
                        $final_array = array();
                        foreach ($user_data as $key => $value) {

                            $value['dob'] = (!empty($value['dob']) && $value['dob'] != '00-00-0000') ? $value['dob'] : '';
                            if (empty($value['age']) && !empty($value['dob'])) {
                                $value['age'] = Custom::get_age_from_dob($value['dob']);
                            }
                            $final_array[] = $value;
                        }
                        $response['status'] = 1;
                        $response['message'] = "List found";
                        $response['data']['list'] = $final_array;

                    } else {
                        $response['status'] = 0;
                        $response['message'] = "List Not Found";
                    }
                } catch (Exception $e) {
                    $response['status'] = 0;
                    $response['message'] = "server error";
                }

            }
            Custom::sendResponse($response);
        }
        exit();
    }

    public static function clipboard_add_patient($data = null)
    {

        $return_type = true;
        if (empty($data)) {
            $return_type = false;
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);
        }

        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $patient_type = isset($data['patient_type']) ? $data['patient_type'] : "";
            $patient_name = isset($data['patient_name']) ? trim($data['patient_name']) : "";
            $patient_mobile = isset($data['patient_mobile']) ? Custom::create_mobile_number($data['patient_mobile']) : "";
            $dob = isset($data['dob']) ? $data['dob'] : "";
            $gender = isset($data['gender']) ? strtoupper($data['gender']) : "";
            $send_notification = false;
            $patient_id = 0;
            try {
                if (empty($thin_app_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid thinapp id';
                } else if (empty($app_key)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid app key';
                } else if (empty($user_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid user id';
                } else if (empty($mobile)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid mobile';
                } else if ($patient_type != "CUSTOMER" && $patient_type != "CHILDREN") {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid patient type';
                } else if ($gender != "MALE" && $gender != "FEMALE") {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid gender';
                } else if (empty($patient_name)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid patient name';
                } else if (empty($patient_mobile)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid patient mobile';
                } else if (empty($dob) && $patient_type == "CHILDREN") {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid patient dob';
                } else {


                    if ($patient_type == "CUSTOMER") {
                        $customer_data = Custom::search_customer_name($thin_app_id, $patient_mobile, $patient_name);
                        if (empty($customer_data)) {
                            $customer = array();
                            $customer['app_key'] = $app_key;
                            $customer['thin_app_id'] = $thin_app_id;
                            $customer['user_id'] = $user_id;
                            $customer['first_name'] = $patient_name;
                            $customer['dob'] = $dob;
                            $customer['mobile'] = $patient_mobile;
                            $customer['country_code'] = "+91";
                            $customer['gender'] = strtoupper($gender);
                            $customer['address'] = "";
                            $result = WebservicesFunction::appointment_add_customer($customer);
                            $result = $customer_data = json_decode($result, true);
                            if ($result['status'] == 1) {
                                $res = json_decode(Custom::create_and_share_folder($thin_app_id, $patient_mobile, $patient_name, 'CUSTOMER', $result['customer_id']), true);


                                $response['status'] = 1;
                                $response['message'] = "Patient Added Successfully";
                                $folder_id = $res['folder_id'];
                                $response['data']['age'] = '';
                                if (!empty($dob)) {
                                    $age = Custom::dob_elapsed_string($dob, false, false);
                                    $age_label = "";
                                    if (!empty($age)) {
                                        if ($age['year'] > 0) {
                                            $age_label = $age['year'] . "Y ";
                                        }
                                        if ($age['month'] > 0) {
                                            $age_label .= $age['month'] . "M ";
                                        }
                                    }

                                    $response['data']['age'] = $age_label;
                                }
                                $response['data']['patient_name'] = $patient_name;
                                $response['data']['patient_mobile'] = $patient_mobile;
                                $response['data']['dob'] = $dob;
                                $response['data']['gender'] = $gender;
                                $response['data']['folder_id'] = $folder_id;


                            } else {
                                $response['status'] = 0;
                                $response['message'] = $result['message'];
                            }
                        } else {
                            $response['status'] = 0;
                            $response['message'] = "Patient already exist.";
                        }

                    } else {
                        $child = array();
                        $child['app_key'] = $app_key;
                        $child['thin_app_id'] = $thin_app_id;
                        $child['user_id'] = $user_id;
                        $child['child_name'] = $patient_name;
                        $child['mobile'] = $patient_mobile;
                        $child['dob'] = $dob;
                        $child['gender'] = strtoupper($gender);
                        $child['add_vaccination'] = 'NO';
                        $result = WebservicesFunction::add_child($child);
                        $result = $customer_data = json_decode($result, true);
                        if ($result['status'] == 1) {
                            $response['status'] = 1;
                            $response['message'] = "Children add successfully";
                            $child_id = $result['child_id'];
                            $send_notification = true;
                            $patient_id = $result['child_id'];
                            $response['data']['age'] = '';
                            if (!empty($dob)) {
                                $age = Custom::dob_elapsed_string($dob, false, false);
                                $age_label = "";
                                if (!empty($age)) {
                                    if ($age['year'] > 0) {
                                        $age_label = $age['year'] . "Y ";
                                    }
                                    if ($age['month'] > 0) {
                                        $age_label .= $age['month'] . "M ";
                                    }
                                }

                                $response['data']['age'] = $age_label;
                            }
                            $response['data']['patient_name'] = $patient_name;
                            $response['data']['patient_mobile'] = $patient_mobile;
                            $response['data']['dob'] = $dob;
                            $response['data']['gender'] = $gender;
                            $folder_data = Custom::get_child_folder_data($child_id, $thin_app_id);
                            $folder_id = !empty($folder_data) ? $folder_data['id'] : 0;
                            $response['data']['folder_id'] = $folder_id;

                        } else {
                            $response['status'] = 0;
                            $response['message'] = $result['message'];
                        }
                    }

                }
            } catch (Exception $e) {
                $response['status'] = 0;
                $response['message'] = "Something went wrong on server";
            }
            if ($return_type === false) {
                Custom::sendResponse($response);
                Custom::send_process_to_background();
                if ($send_notification === true && $patient_type == "CHILDREN" && !empty($patient_id)) {
                    Custom::send_child_add_sms_and_notification($thin_app_id, $patient_id);
                }
            } else {
                return json_encode($response);
            }


        }
        exit();
    }

    public static function add_banner_stats()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $banner = isset($data['path']) ? trim($data['path']) : "";


            try {
                if (empty($thin_app_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid thinapp id';
                } else if (empty($app_key)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid app key';
                } else if (empty($user_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid user id';
                } else if (empty($mobile)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid mobile';
                } else if (empty($banner)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid banner path';
                } else {
                    $created = Custom::created();
                    $connection = ConnectionUtil::getConnection();
                    $sql = "INSERT INTO banner_clicks (thinapp_id, user_id, banner, created) VALUES (?, ?, ?, ?)";
                    $stmt = $connection->prepare($sql);
                    $stmt->bind_param('ssss', $thin_app_id, $user_id, $banner, $created);
                    if ($stmt->execute()) {
                        $response['status'] = 1;
                        $response['message'] = "Click add successfully";

                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Sorry click could not add";
                    }
                }
            } catch (Exception $e) {
                $response['status'] = 0;
                $response['message'] = "Something went wrong on server";
            }
            Custom::sendResponse($response);
        }
        exit();
    }

    public static function manage_prescription_setting()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $action_type = isset($data['action_type']) ? $data['action_type'] : "";
            $title = isset($data['title']) ? $data['title'] : "";

            $top_weight = isset($data['top_weight']) ? $data['top_weight'] : 0;
            $bottom_weight = isset($data['bottom_weight']) ? $data['bottom_weight'] : 0;
            $left_weight = isset($data['left_weight']) ? $data['left_weight'] : 0;
            $right_weight = isset($data['right_weight']) ? $data['right_weight'] : 0;
            $middle_weight = isset($data['middle_weight']) ? $data['middle_weight'] : 0;
            $side_weight = isset($data['side_weight']) ? $data['side_weight'] : 0;
            $default_weight = isset($data['default_weight']) ? $data['default_weight'] : 0;
            $patient_detail_height = isset($data['patient_detail_height']) ? $data['patient_detail_height'] : 0;
            $right_weight_text = isset($data['right_weight_text']) ? $data['right_weight_text'] : 0;


            $module_type = isset($data['module_type']) ? $data['module_type'] : "";
            $doctor_id = isset($data['doctor_id']) ? trim($data['doctor_id']) : 0;
            $setting_id = isset($data['setting_id']) ? trim($data['setting_id']) : 0;

            try {
                if (empty($thin_app_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid thinapp id';
                } else if (empty($app_key)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid app key';
                } else if (empty($user_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid user id';
                } else if (empty($mobile)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid mobile';
                } else if ($module_type != "TAB" && $module_type != "CLIPBOARD") {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid module type';
                } else if ($action_type != "ADD" && $action_type != "UPDATE" && $action_type != "DELETE") {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid action type';
                } else if (($action_type == "UPDATE" || $action_type == "DELETE") && empty($setting_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid setting id';
                } else if (($action_type == "UPDATE" || $action_type == "ADD") && $module_type == "CLIPBOARD" && empty($title)) {
                    $response['status'] = 0;
                    $response['message'] = 'Please enter title';
                } else if ($action_type == "ADD" && (empty($right_weight) && empty($side_weight) && empty($default_weight) && empty($top_weight) && empty($bottom_weight) && empty($left_weight) && empty($middle_weight))) {
                    $response['status'] = 0;
                    $response['message'] = 'Please weight param';
                } else {

                    $return_array = array();
                    $created = Custom::created();
                    $connection = ConnectionUtil::getConnection();
                    if ($action_type == "ADD") {
                        $add_value = true;
                        if ($module_type == "CLIPBOARD") {
                            $query = "select  title from app_prescription_settings where thinapp_id = $thin_app_id and doctor_id = $doctor_id  and module_type= '$module_type' and  UPPER(title) = '" . strtoupper($title) . "' and status ='ACTIVE' limit 1";
                            $data = $connection->query($query);
                            if ($data->num_rows) {
                                $add_value = false;
                            }
                        }

                        if ($add_value === true) {
                            $sql = "INSERT INTO app_prescription_settings (user_id, doctor_id, thinapp_id, title, patient_detail_height, right_weight_text, right_weight, default_weight, side_weight, top_weight, bottom_weight, left_weight, middle_weight, module_type, created, modified) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                            $stmt = $connection->prepare($sql);
                            $stmt->bind_param('ssssssssssssssss', $user_id, $doctor_id, $thin_app_id, $title, $patient_detail_height, $right_weight_text, $right_weight, $default_weight, $side_weight, $top_weight, $bottom_weight, $left_weight, $middle_weight, $module_type, $created, $created);
                            if ($stmt->execute()) {
                                $response['status'] = 1;
                                $response['message'] = "Setting added successfully";
                                $response['setting_id'] = $stmt->insert_id;
                            } else {
                                $response['status'] = 0;
                                $response['message'] = "Sorry setting could not add";
                            }
                        } else {

                            $response['status'] = 0;
                            $response['message'] = "Title name already exist";
                        }


                    } else if ($action_type == "UPDATE") {


                        $update_flag = false;
                        if ($module_type == "CLIPBOARD") {
                            $query = "select  title from app_prescription_settings where id != $setting_id  and module_type= '$module_type' and  UPPER(title) = '" . strtoupper($title) . "' and status ='ACTIVE' limit 1";
                            $data = $connection->query($query);
                            if (!$data->num_rows) {
                                $update_flag = true;
                            } else {
                                $response['status'] = 0;
                                $response['message'] = "Title name already exist";
                            }
                        } else {
                            $update_flag = true;
                        }

                        if ($update_flag === true) {

                            $query = "update app_prescription_settings set title =?, patient_detail_height =?, right_weight_text=?, right_weight =?, side_weight =?, default_weight =?, top_weight=?, bottom_weight=?, left_weight=?, middle_weight=?, modified =? where id =?";
                            $stmt = $connection->prepare($query);
                            $stmt->bind_param('ssssssssssss', $title, $patient_detail_height, $right_weight_text, $right_weight, $side_weight, $default_weight, $top_weight, $bottom_weight, $left_weight, $middle_weight, $created, $setting_id);
                            if ($stmt->execute()) {
                                $response['status'] = 1;
                                $response['message'] = "Setting edited successfully";
                            } else {
                                $response['status'] = 0;
                                $response['message'] = "Sorry setting could not edit";
                            }
                        }


                    } else {
                        $status = "INACTIVE";
                        $query = "update app_prescription_settings set status =?,  modified =? where id = ?";
                        $stmt = $connection->prepare($query);
                        $stmt->bind_param('sss', $status, $created, $setting_id);
                        if ($stmt->execute()) {
                            $response['status'] = 1;
                            $response['message'] = "Setting delete successfully";
                        } else {
                            $response['status'] = 0;
                            $response['message'] = "Sorry setting could not delete";
                        }
                    }
                }
            } catch (Exception $e) {
                $response['status'] = 0;
                $response['message'] = "Something went wrong on server";
            }
            Custom::sendResponse($response);
        }
        exit();
    }

    public static function get_prescription_setting_list()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $role_id = isset($data['role_id']) ? $data['role_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : 0;
            $module_type = isset($data['module_type']) ? $data['module_type'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if ($module_type != "TAB" && $module_type != "CLIPBOARD") {
                $response['status'] = 0;
                $response['message'] = 'Invalid module type';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else {
                $connection = ConnectionUtil::getConnection();
                if ($module_type == "CLIPBOARD") {
                    $query = "select id, title,top_weight,bottom_weight,left_weight,middle_weight from app_prescription_settings where doctor_id = $doctor_id and status = 'ACTIVE' and module_type='$module_type'";
                    $data_list = $connection->query($query);
                    if ($data_list->num_rows) {
                        $list = mysqli_fetch_all($data_list, MYSQLI_ASSOC);
                        $response['status'] = 1;
                        $response['message'] = "List found";
                        $response['data']['list'] = $list;
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "List not found.";
                    }

                } else {
                    $query = "select id as setting_id, top_weight,bottom_weight,left_weight,middle_weight,patient_detail_height, right_weight_text, right_weight, side_weight from app_prescription_settings where doctor_id = $doctor_id and status = 'ACTIVE' and module_type='$module_type' limit 1";
                    $data_list = $connection->query($query);
                    if ($data_list->num_rows) {
                        $custom_data = mysqli_fetch_assoc($data_list);
                        $response['status'] = 1;
                        $response['message'] = "Data found";
                        $response['data'] = $custom_data;
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Data not found.";
                    }
                }
            }
            Custom::sendResponse($response);
        }
        exit();
    }

    public static function get_module_sent_sms_count_list()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else {
                $connection = ConnectionUtil::getConnection();
                $query = "select count(*) as total, 'Vaccination' as title from sent_sms_details where ( message_text LIKE '%vaccination%' || message_text LIKE '%child%') and thinapp_id = $thin_app_id and status ='SUCCESS' UNION ALL select count(*) as total, 'Appointment' as title from sent_sms_details where message_text LIKE '%appointment%' and thinapp_id = $thin_app_id and status ='SUCCESS' UNION ALL select count(*) as total, 'Chat' as title from sent_sms_details where message_text LIKE '%chat%' and thinapp_id = $thin_app_id and status ='SUCCESS' UNION ALL select count(*) as total, 'Medical Record' as title from sent_sms_details where ( message_text LIKE '%folder%' || message_text LIKE '%file%' || message_text LIKE '%share%' || message_text LIKE '%unshare%' || message_text LIKE '%memo%') and thinapp_id = $thin_app_id and status ='SUCCESS' UNION ALL select count(*) as total, 'Consent' as title from sent_sms_details where message_text LIKE '%consent%' and thinapp_id = $thin_app_id and status ='SUCCESS' UNION ALL select count(*) as total, 'Refer' as title from sent_sms_details where message_text LIKE '%refer%' and thinapp_id = $thin_app_id and status ='SUCCESS' UNION ALL select count(*) as total, 'OTP' as title from sent_sms_details where message_text LIKE '%one%time%password%' and thinapp_id = $thin_app_id and status ='SUCCESS'";
                $data_list = $connection->query($query);
                if ($data_list->num_rows) {
                    $list = mysqli_fetch_all($data_list, MYSQLI_ASSOC);
                    $response['status'] = 1;
                    $response['message'] = "List found";
                    $response['data']['list'] = $list;
                } else {
                    $response['status'] = 0;
                    $response['message'] = "List not found.";
                }
            }
            Custom::sendResponse($response);
        }
        exit();
    }

    public static function manage_custom_prescription()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $action_type = isset($data['action_type']) ? $data['action_type'] : "";
            $height = isset($data['height']) ? $data['height'] : 0;
            $left_margin = isset($data['left_margin']) ? $data['left_margin'] : 0;
            $top_margin = isset($data['top_margin']) ? $data['top_margin'] : 0;
            $width = isset($data['width']) ? $data['width'] : 0;
            $alpha = isset($data['alpha']) ? $data['alpha'] : 0;
            $path = isset($data['path']) ? $data['path'] : 0;
            $module_type = isset($data['module_type']) ? $data['module_type'] : "";
            $doctor_id = isset($data['doctor_id']) ? trim($data['doctor_id']) : 0;

            try {
                if (empty($thin_app_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid thinapp id';
                } else if (empty($app_key)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid app key';
                } else if (empty($user_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid user id';
                } else if (empty($mobile)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid mobile';
                } else if ($module_type != "TAB" && $module_type != "CLIPBOARD") {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid module type';
                } else if ($action_type != "ADD" && $action_type != "UPDATE" && $action_type != "DELETE") {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid action type';
                } else if (($action_type == "UPDATE" || $action_type == "DELETE") && empty($doctor_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid setting id';
                } else if ($action_type == "ADD" && (empty($left_margin) && empty($top_margin) && empty($height) && empty($width) && empty($alpha) && empty($path))) {
                    $response['status'] = 0;
                    $response['message'] = 'Please param';
                } else {

                    $return_array = array();
                    $created = Custom::created();
                    $connection = ConnectionUtil::getConnection();
                    if ($action_type != "DELETE") {
                        $query = "select  id from custom_prescription_layouts where thinapp_id = $thin_app_id and doctor_id = $doctor_id  and module_type= '$module_type' and status ='ACTIVE' limit 1";
                        $data = $connection->query($query);
                        if (!$data->num_rows) {
                            $sql = "INSERT INTO custom_prescription_layouts (user_id, doctor_id, thinapp_id, left_margin, top_margin, width, height, alpha, path, module_type, created, modified) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                            $stmt = $connection->prepare($sql);
                            $stmt->bind_param('ssssssssssss', $user_id, $doctor_id, $thin_app_id, $left_margin, $top_margin, $width, $height, $alpha, $path, $module_type, $created, $created);
                            if ($stmt->execute()) {
                                $response['status'] = 1;
                                $response['message'] = "Layout added successfully";
                            } else {
                                $response['status'] = 0;
                                $response['message'] = "Sorry layout could not add";
                            }
                        } else {
                            $id = mysqli_fetch_assoc($data);
                            $query = "update custom_prescription_layouts set left_margin =?, top_margin =?, width =?, height=?, alpha=?, path=?, modified =? where id = ?";
                            $stmt = $connection->prepare($query);
                            $stmt->bind_param('ssssssss', $left_margin, $top_margin, $width, $height, $alpha, $path, $created, $id['id']);
                            if ($stmt->execute()) {
                                $response['status'] = 1;
                                $response['message'] = "Layout edited successfully";
                            } else {
                                $response['status'] = 0;
                                $response['message'] = "Sorry layout could not edit";
                            }
                        }


                    } else {
                        $status = "INACTIVE";
                        $query = "update custom_prescription_layouts set status =?,  modified =? where thinapp_id = ? and doctor_id = ?";
                        $stmt = $connection->prepare($query);
                        $stmt->bind_param('ssss', $status, $created, $thin_app_id, $doctor_id);
                        if ($stmt->execute()) {
                            $response['status'] = 1;
                            $response['message'] = "Layout delete successfully";
                        } else {
                            $response['status'] = 0;
                            $response['message'] = "Sorry layout could not delete";
                        }
                    }
                }
            } catch (Exception $e) {
                $response['status'] = 0;
                $response['message'] = "Something went wrong on server";
            }
            Custom::sendResponse($response);
        }
        exit();
    }

    public static function get_custom_layout()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $doctor_id = isset($data['doctor_id']) ? trim($data['doctor_id']) : 0;
            $module_type = isset($data['module_type']) ? $data['module_type'] : "";

            try {
                if (empty($thin_app_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid thinapp id';
                } else if (empty($app_key)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid app key';
                } else if (empty($user_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid user id';
                } else if (empty($mobile)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid mobile';
                } else if ($module_type != "TAB" && $module_type != "CLIPBOARD") {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid module type';
                } else {

                    $connection = ConnectionUtil::getConnection();
                    $query = "select  id,width,height,alpha,path,left_margin,top_margin from custom_prescription_layouts where thinapp_id = $thin_app_id and doctor_id = $doctor_id  and module_type= '$module_type' and status ='ACTIVE' limit 1";
                    $data = $connection->query($query);
                    if ($data->num_rows) {
                        $response['status'] = 1;
                        $response['message'] = "Layout found";
                        $response['data']['detail'] = mysqli_fetch_assoc($data);
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Layout not found";
                    }
                }
            } catch (Exception $e) {
                $response['status'] = 0;
                $response['message'] = "Something went wrong on server";
            }
            Custom::sendResponse($response);
        }
        exit();
    }

    public static function edit_appointment_patient($data = null)
    {

        $return_type = true;
        if (empty($data)) {
            $return_type = false;
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);
        }
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $patient_mobile = isset($data['patient_mobile']) ? Custom::create_mobile_number($data['patient_mobile']) : "";
            $patient_type = isset($data['patient_type']) ? $data['patient_type'] : "";
            $patient_id = isset($data['patient_id']) ? $data['patient_id'] : "";
            $folder_id = isset($data['folder_id']) ? $data['folder_id'] : "";
            $dob = isset($data['dob']) ? $data['dob'] : "";
            $gender = isset($data['gender']) ? $data['gender'] : "";
            $patient_name = isset($data['patient_name']) ? trim($data['patient_name']) : "";
            $patient_address = isset($data['patient_address']) ? trim($data['patient_address']) : "";
            $request_from = isset($data['request_from']) ? trim($data['request_from']) : "APP";
            $email = isset($data['email']) ? trim($data['email']) : "";
            $profile_photo = isset($data['profile_photo']) ? $data['profile_photo'] : "";
            $age = isset($data['age']) ? $data['age'] : "";
            $parents_name = isset($data['parents_name']) ? $data['parents_name'] : "";
            $parents_mobile = isset($data['parents_mobile']) ? $data['parents_mobile'] : "";
            $medical_history = isset($data['medical_history']) ? $data['medical_history'] : "";
            $marital_status = isset($data['marital_status']) ? $data['marital_status'] : "";
            $blood_group = isset($data['blood_group']) ? $data['blood_group'] : "";
            $relation_prefix = isset($data['relation_prefix']) ? $data['relation_prefix'] : "";
            $height = isset($data['height']) ? $data['height'] : "";
            $weight = isset($data['weight']) ? $data['weight'] : "";
            $head_circumference = isset($data['head_circumference']) ? $data['head_circumference'] : "";
            $conceive_date = isset($data['conceive_date']) ? $data['conceive_date'] : "";
            $expected_date = isset($data['expected_date']) ? $data['expected_date'] : "";
            $third_party_uhid = isset($data['third_party_uhid']) ? $data['third_party_uhid'] : "";
            $bp_systolic = isset($data['bp_systolic']) ? $data['bp_systolic'] : "";
            $bp_diasystolic = isset($data['bp_diasystolic']) ? $data['bp_diasystolic'] : "";
            $bmi = isset($data['bmi']) ? $data['bmi'] : "";
            $bmi_status = isset($data['bmi_status']) ? $data['bmi_status'] : "";
            $temperature = isset($data['temperature']) ? $data['temperature'] : "";
            $third_party_uhid = isset($data['third_party_uhid']) ? $data['third_party_uhid'] : "";
            $o_saturation = isset($data['o_saturation']) ? $data['o_saturation'] : "";
            $field1 = isset($data['field1']) ? $data['field1'] : "";
            $field2 = isset($data['field2']) ? $data['field2'] : "";
            $field3 = isset($data['field3']) ? $data['field3'] : "";
            $field4 = isset($data['field4']) ? $data['field4'] : "";
            $field5 = isset($data['field5']) ? $data['field5'] : "";
            $field6 = isset($data['field6']) ? $data['field6'] : "";
            $title = isset($data['title']) ? $data['title'] : "";
            $patient_category = isset($data['patient_category']) ? $data['patient_category'] : "";


            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else if (empty($patient_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid patient id';
            } else if (empty($patient_mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid patient mobile';
            } else if ($patient_type != "CHILDREN" && $patient_type != "CHILD" && $patient_type != "CUSTOMER") {
                $response['status'] = 0;
                $response['message'] = 'Invalid patient type';
            } else if (empty($folder_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid folder id';
            } else if (empty($patient_name)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid patient name';
            } else {

                $connection = ConnectionUtil::getConnection();
                $result = array();

                if ($patient_type == "CHILDREN" || $patient_type == "CHILD") {
                    $child_data = Custom::get_child_by_id($patient_id);
                    if (!empty($child_data)) {
                        $admin_data = Custom::get_thinapp_admin_data($thin_app_id);
                        $post['thin_app_id'] = $thin_app_id;
                        $post['app_key'] = APP_KEY;
                        $post['user_id'] = $admin_data['id'];
                        $post['mobile'] = $patient_mobile;
                        $post['parents_mobile'] = $child_data['parents_mobile'];
                        $post['child_id'] = $patient_id;
                        $post['image'] = $child_data['image'];
                        $post['child_name'] = $patient_name;
                        $dob = empty($dob) ? $child_data['dob'] : $dob;
                        $post['dob'] = $dob;
                        $gender = empty($gender) ? $child_data['gender'] : $gender;
                        $post['gender'] = $gender;
                        $patient_address = empty($patient_address) ? $child_data['address'] : $patient_address;

                        $post['patient_address'] = $patient_address;
                        $post['patient_profession'] = $child_data['patient_profession'];
                        $post['parents_name'] = $child_data['parents_name'];
                        $post['birth_weight'] = $child_data['birth_weight'];
                        $post['birth_height'] = $child_data['birth_height'];
                        $post['birth_head_circumference'] = $child_data['birth_head_circumference'];
                        $post['special_remark'] = $child_data['special_remark'];
                        $post['medical_history'] = $child_data['medical_history'];
                        $post['blood_group'] = $child_data['blood_group'];
                        $result = WebservicesFunction::edit_child($post, true);
                        $result = json_decode($result, true);
                        if ($result['status'] == 1) {
                            $response['status'] = 1;
                            $response['message'] = "Patient updated successfully";
                            $response['data']['folder_id'] = $folder_id;
                            $response['data']['customer_id'] = ($patient_type == "CUSTOMER") ? $patient_id : 0;
                            $response['data']['children_id'] = ($patient_type == "CHILDREN" || $patient_type == "CHILD") ? $patient_id : 0;
                            $response['data']['age'] = "";
                            if (!empty($dob)) {
                                $age = Custom::dob_elapsed_string($dob, false, false);
                                $age_label = "";
                                if (!empty($age)) {
                                    if ($age['year'] > 0) {
                                        $age_label = $age['year'] . "Y ";
                                    }
                                    if ($age['month'] > 0) {
                                        $age_label .= $age['month'] . "M ";
                                    }
                                }

                                $response['data']['age'] = $age_label;
                            }


                        } else {
                            $response['status'] = 0;
                            $response['message'] = $result['message'];
                        }
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Patient not found";
                    }

                } else {

                    $customer_data = Custom::get_customer_data($patient_id, $thin_app_id);
                    if (!empty($customer_data)) {
                        $created = Custom::created();
                        $search_customer = array();
                        if ($patient_mobile != '+919999999999') {
                            $search_customer = Custom::search_customer_name($thin_app_id, $patient_mobile, $patient_name);
                        }

                        $profile_photo = isset($data['profile_photo']) ? $data['profile_photo'] : @$customer_data['profile_photo'];
                        $country_id = isset($data['country_id']) ? $data['country_id'] : @$customer_data['country_id'];
                        $state_id = isset($data['state_id']) ? $data['state_id'] : @$customer_data['state_id'];
                        $city_id = isset($data['city_id']) ? $data['city_id'] : @$customer_data['city_id'];
                        $city_name = isset($data['city_name']) ? $data['city_name'] : @$customer_data['city_name'];

                        if (empty($search_customer) || $search_customer['id'] == $patient_id) {

                            if ($request_from == "WEB") {
                                $dob = !empty($dob) ? date('Y-m-d', strtotime($dob)) : '';
                                $sql = "update appointment_customers set patient_category=?, title =?, bp_systolic =?, bp_diasystolic =?, bmi =?, bmi_status =?, temperature =?, o_saturation =?, field1 =?, field2 =?, field3 =?, field4 =?, field5 =?, field6 =?, third_party_uhid =?, conceive_date=?, expected_date=?, first_name=?, mobile=?, dob=?, age =?, gender=?, address =?,  relation_prefix=?, parents_name=?, email=?, profile_photo=?, parents_mobile=?, country_id=?, state_id =?, city_id=?,city_name=?, marital_status=?, height=?, weight=?, head_circumference=?, blood_group=?  where id = ?";
                                $stmt = $connection->prepare($sql);
                                $stmt->bind_param('ssssssssssssssssssssssssssssssssssssss', $patient_category, $title, $bp_systolic, $bp_diasystolic, $bmi, $bmi_status, $temperature, $o_saturation, $field1, $field2, $field3, $field4, $field5, $field6, $third_party_uhid, $conceive_date, $expected_date, $patient_name, $patient_mobile, $dob, $age, $gender, $patient_address, $relation_prefix, $parents_name, $email, $profile_photo, $parents_mobile, $country_id, $state_id, $city_id, $city_name, $marital_status, $height, $weight, $head_circumference, $blood_group, $patient_id);

                            } else {
                                $sql = "update appointment_customers set address =?, gender = ?, mobile=?, first_name=?, dob=?  where id = ?";
                                $stmt = $connection->prepare($sql);
                                $dob = !empty($dob) ? date('Y-m-d', strtotime($dob)) : '';
                                $stmt->bind_param('ssssss', $patient_address, $gender, $patient_mobile, $patient_name, $dob, $patient_id);

                            }


                            if ($stmt->execute()) {


                                $folder_data = Custom::get_patient_folder($thin_app_id, $patient_id);
                                if (!empty($folder_data)) {
                                    $sql = "update drive_folders set folder_name =?, folder_add_from_number = ?, modified=? where id = ?";
                                    $stmt = $connection->prepare($sql);
                                    $stmt->bind_param('ssss', $patient_name, $patient_mobile, $created, $folder_data['id']);
                                    if ($stmt->execute()) {
                                        $share_to_user_id = Custom::get_user_by_mobile($thin_app_id, $patient_mobile);
                                        $share_to_user_id = !empty($share_to_user_id) ? $share_to_user_id['id'] : 0;
                                        $sql = "update drive_shares set share_with_mobile = ?, share_to_user_id=?, modified=? where id = ? and share_with_mobile = ?";
                                        $stmt = $connection->prepare($sql);
                                        $stmt->bind_param('sssss', $patient_mobile, $share_to_user_id, $created, $folder_data['id'], $customer_data['mobile']);
                                        if ($stmt->execute()) {
                                            $folder_id = @$folder_data['id'];
                                        } else {
                                            $folder_id = $folder_data;
                                        }
                                    } else {
                                        $folder_id = 0;
                                    }

                                } else {
                                    $folder_data = json_decode(Custom::create_and_share_folder($thin_app_id, $patient_mobile, $patient_name, 'CUSTOMER', $patient_id), true);
                                    $folder_id = @$folder_data['folder_id'];

                                }
                                $response['status'] = 1;
                                $response['message'] = "Patient edited successfully";
                                $response['data']['folder_id'] = $folder_id;
                                $response['data']['customer_id'] = ($patient_type == "CUSTOMER") ? $patient_id : 0;
                                $response['data']['children_id'] = ($patient_type == "CHILDREN" || $patient_type == "CHILD") ? $patient_id : 0;
                                $age_label = "";
                                if(!empty($dob) && $dob!='0000-00-00'){
                                    $age = Custom::dob_elapsed_string($dob, false, false);
                                    if (!empty($age)){
                                        if ($age['year'] > 0) {
                                            $age_label = $age['year'] . "Y ";
                                        }
                                        if ($age['month'] > 0) {
                                            $age_label .= $age['month'] . "M ";
                                        }
                                    }
                                }

                                $response['data']['age'] = $age_label;
                            } else {
                                $response['status'] = 0;
                                $response['message'] = "Sorry patient could not update.";
                            }
                        } else {
                            $response['status'] = 0;
                            $response['message'] = "Patient with this mobile and name already exist.";
                        }
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Patient not found";
                    }
                }
            }
            if ($return_type === false) {
                Custom::sendResponse($response);
            } else {
                return json_encode($response);
            }
        }
        exit();


    }

    public static function appointment_skip($data = null, $return = false)
    {

        if (empty($data)) {
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);
        }
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $appointment_id = isset($data['appointment_id']) ? $data['appointment_id'] : 0;
            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else if (empty($appointment_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid appointment id';
            } else {
                $connection = ConnectionUtil::getConnection();
                $created = Custom::created();
                $status = "YES";
                $appointment_data = Custom::get_appointment_by_id($appointment_id, $thin_app_id);
                if ($appointment_data) {
                    $sql = "update appointment_customer_staff_services set skip_tracker = ?, patient_queue_type=?, show_after_queue=?, patient_queue_checked_in=?,  modified=? where id = ?";
                    $stmt = $connection->prepare($sql);
                    $patient_queue_type = 'NONE';
                    $patient_queue_checked_in = 'NO';
                    $show_after_queue = '';
                    $stmt->bind_param('ssssss', $status, $patient_queue_type,$show_after_queue,  $patient_queue_checked_in, $created, $appointment_id);
                    if ($stmt->execute()) {
                        $response['status'] = 1;
                        $response['message'] = "Appointment skipped successfully";
                        $appointment_data = Custom::get_appointment_by_id($appointment_id);
                        $response['data']['button_list'] = Custom::create_appointment_button_array($thin_app_id, $appointment_user_role,$appointment_data);
                        $file_name = 'doctor_tracker_' . $appointment_data['appointment_staff_id'] . "_" . date('Ymd', strtotime($appointment_data['appointment_datetime']));
                        WebservicesFunction::deleteJson(array($file_name), "tracker");
                    	
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Appointment could not skipped";
                    }
                } else {
                    $response['status'] = 0;
                    $response['message'] = "Appointment not found";
                }

            }
            if ($return === true) {
                $response['data'] = $appointment_data;
                return json_encode($response);
            } else {
                Custom::sendResponse($response);
                if (!empty($appointment_data)) {
                    Custom::send_process_to_background();
                    $token_array = Custom::get_upcoming_appointment_user_token($thin_app_id, $appointment_data['appointment_staff_id'], $appointment_data['appointment_address_id'], $appointment_id);
                    if (!empty($token_array)) {
                        $option = array(
                            'thinapp_id' => $thin_app_id,
                            'staff_id' => 0,
                            'customer_id' => 0,
                            'service_id' => 0,
                            'channel_id' => 0,
                            'role' => "CUSTOMER",
                            'flag' => 'APPOINTMENT_TRACKER',
                            'title' => "New Tracker Request",
                            'message' => "Your tracker message",
                            'description' => "Your tracker message",
                            'chat_reference' => '',
                            'module_type' => 'APPOINTMENT_TRACKER',
                            'module_type_id' => 0,
                            'firebase_reference' => ""
                        );
                        Custom::send_notification_via_token($option, $token_array, $thin_app_id);
                    }

                	if(Custom::check_app_enable_permission($thin_app_id, 'QUEUE_MANAGEMENT_APP')){
                    $doctor_id =$appointment_data['appointment_staff_id'];
                    $res = Custom::fortisUpdateToken($thin_app_id,$doctor_id);
                    Custom::emitSocet(array('doctor_id'=>$doctor_id,'thin_app_id'=>$thin_app_id));
                }
                
                    Custom::update_tracker_time_difference($appointment_id);
                    $result = Custom::manage_emergency_tracker_cache($appointment_id, "DELETE");
                    Custom::send_web_tracker_notification($thin_app_id);
                }
            }

        }
        exit();
    }

    public static function get_sms_stats_list()
    {


        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $offset = isset($data['offset']) ? $data['offset'] : "";
            $from_date = isset($data['from_date']) ? $data['from_date'] : "";
            $to_date = isset($data['to_date']) ? $data['to_date'] : "";
            $list_for = isset($data['list_for']) ? $data['list_for'] : "ALL";
            $total = isset($data['total']) ? $data['total'] : 0;


            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($offset) && $offset != 0) {
                $response['status'] = 0;
                $response['message'] = 'Invalid offset';
            } else {
                try {

                    $limit = PAGINATION_LIMIT;
                    $offset = $offset * $limit;
                    $condition = $name = $join_qry = "";
                    $date_condition = " DATE(ssd.created) = '" . date('Y-m-d') . "'";
                    if (!empty($from_date) && !empty($to_date)) {
                        $from_date = DateTime::createFromFormat('d-m-Y', $from_date);
                        $from_date = $from_date->format('Y-m-d');

                        $to_date = DateTime::createFromFormat('d-m-Y', $to_date);
                        $to_date = $to_date->format('Y-m-d');
                        $date_condition = "  DATE(ssd.created) >= '$from_date' and DATE(ssd.created) <= '$to_date'";
                    }


                    $module_type = "(CASE WHEN  ssd.message_text LIKE '%vaccine%' || ssd.message_text LIKE '%vaccination%' || ssd.message_text LIKE '%child%' THEN 'VACCINATION' WHEN ssd.message_text LIKE '%appointment%' THEN 'APPOINTMENT' WHEN ssd.message_text LIKE '%chat%' THEN 'CHAT' WHEN ssd.message_text LIKE '%consent%' THEN 'CONSENT' WHEN ssd.message_text LIKE '%refer%' THEN 'REFER' WHEN ssd.message_text LIKE '%folder%' || ssd.message_text LIKE '%file%' || ssd.message_text LIKE '%share%' || ssd.message_text LIKE '%unshare%' || ssd.message_text LIKE '%memo%' THEN 'MEDICAL RECORD' WHEN ssd.message_text LIKE '%one%time%password%' THEN 'OTP' ELSE 'OTHER' END)";
                    if ($list_for != "ALL") {
                        if ($list_for == "VACCINATION") {
                            $condition = " and ( ssd.message_text LIKE '%vaccine%' || ssd.message_text LIKE '%vaccination%' || ssd.message_text LIKE '%child%') ";
                            $module_type = "VACCINATION";
                            // $join_qry = " join childrens as c on ( c.mobile = ssd.receiver_mobile || c.parents_mobile = ssd.receiver_mobile ) and c.thinapp_id = ssd.thinapp_id and c.status = 'ACTIVE'";
                        } else if ($list_for == "APPOINTMENT") {
                            $condition = " and ( ssd.message_text LIKE '%appointment%' ) ";
                            $module_type = "'APPOINTMENT'";

                        } else if ($list_for == "CHAT") {
                            $condition = " and ( ssd.message_text LIKE '%chat%' ) ";
                            $module_type = "'CHAT'";
                        } else if ($list_for == "CONSENT") {
                            $condition = " and ( ssd.message_text LIKE '%consent%' ) ";
                            $module_type = "'CONSENT'";
                        } else if ($list_for == "REFER") {
                            $condition = " and ( ssd.message_text LIKE '%refer%' ) ";
                            $module_type = "'REFER'";
                        } else if ($list_for == "OTP") {
                            $condition = " and( ssd.message_text LIKE '%one%time%password%' ) ";
                            $module_type = "'OTP'";
                        } else if ($list_for == "MEDICAL_RECORD") {
                            $condition = " and ( ssd.message_text LIKE '%folder%' || ssd.message_text LIKE '%file%' || ssd.message_text LIKE '%share%' || ssd.message_text LIKE '%unshare%' || ssd.message_text LIKE '%memo%' ) ";
                            $module_type = "'MEDICAL RECORD'";
                        }
                    }

                    $condition .= " and ssd.thinapp_id = $thin_app_id";
                    $query = "select '$module_type' as module_type, ssd.message_text, ssd.receiver_mobile as name,  ssd.receiver_mobile as mobile, ssd.status, DATE_FORMAT(ssd.created,'%d-%m-%Y') as date, DATE_FORMAT(ssd.created,'%H:%i') as time from sent_sms_details as ssd where  $date_condition $condition order by ssd.created desc limit $offset, $limit";
                    $connection = ConnectionUtil::getConnection();
                    $message_list = $connection->query($query);
                    if ($message_list->num_rows) {
                        $message_list = mysqli_fetch_all($message_list, MYSQLI_ASSOC);
                        $final_array = array();
                        foreach ($message_list as $key => $list) {
                            $final_array[$key] = $list;
                            $final_array[$key]['message_text'] = urldecode($list['message_text']);
                        }
                        $response['status'] = 1;
                        $response['message'] = "List found";
                        $response['data']['list'] = $final_array;

                    } else {
                        $response['status'] = 0;
                        $response['message'] = "List Not Found";

                    }

                    /* SEND TOTAL COUND TO SUBSCRIBER */

                    $response['total'] = $total;
                    if (empty($total)) {
                        $query = "select count(*) as total from sent_sms_details as ssd where  $date_condition $condition";
                        $count_qry = $connection->query($query);
                        $count = mysqli_fetch_assoc($count_qry);
                        $response['total'] = $count['total'];
                    }


                } catch (Exception $e) {
                    $response['total'] = $total;
                    $response['status'] = 0;
                    $response['message'] = "server error";
                }

            }
            Custom::sendResponse($response);
        }
        exit();
    }

    public static function manage_folder_data()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $source_folder = isset($data['source_folder']) ? $data['source_folder'] : 0;
            $destination_folder = isset($data['destination_folder']) ? $data['destination_folder'] : 0;
            $files = isset($data['files']) ? $data['files'] : 0;
            $action = isset($data['action']) ? $data['action'] : "";
            $destination_category = isset($data['destination_category']) ? $data['destination_category'] : "";


            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($source_folder)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid source folder';
            } else if (empty($destination_folder)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid destination folder';
            } else if (empty($files)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid files';
            } else if (empty($destination_category)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid destination category';
            } else if ($action != 'MOVE' && $action != 'DELETE') {
                $response['status'] = 0;
                $response['message'] = 'Invalid action';
            } else {
                try {

                    $connection = ConnectionUtil::getConnection();
                    $connection->autocommit(false);
                    $created = Custom::created();
                    $files = explode(",", $files);
                    if (is_array($files) && !empty($files)) {

                        $source_data = Custom::get_folder_by_id($source_folder);
                        $destination_data = Custom::get_folder_by_id($destination_folder);

                        $update_drive_file = $delete_share = $update_source = $update_destination = true;
                        if (!empty($source_data) && !empty($destination_data)) {

                            $files = '"' . implode('","', $files) . '"';
                            $query = "select id from drive_files where  id IN($files) and drive_folder_id = $source_folder";
                            $data = $connection->query($query);
                            if ($data->num_rows) {

                                $data_ids = array_column(mysqli_fetch_all($data, MYSQLI_ASSOC), 'id');
                                $update_files_count = count($data_ids);

                                $source_total_file = $source_data['total_file_count'] - $update_files_count;
                                $source_total_file = ($source_total_file > 0) ? $source_total_file : 0;

                                $source_total_share = $source_data['share_count'] - $update_files_count;
                                $source_total_share = ($source_total_share > 0) ? $source_total_share : 0;

                                $destination_total_file = $destination_data['total_file_count'] + $update_files_count;

                                if ($action == "MOVE") {
                                    /* update drive files with new folder */
                                    $tmp = array();
                                    foreach ($data_ids as $key => $id) {
                                        $query = "update drive_files set drive_folder_id =?, file_category_master_id =?, modified =? where id= ?";
                                        $stmt_df_update = $connection->prepare($query);
                                        $stmt_df_update->bind_param('ssss', $destination_folder, $destination_category, $created, $id);
                                        $tmp[] = $stmt_df_update->execute();
                                    }
                                    if (!in_array(false, $tmp)) {
                                        $update_drive_file = true;
                                    } else {
                                        $update_drive_file = false;
                                    }


                                } else {
                                    /* update drive files with new folder */
                                    $tmp = array();
                                    foreach ($data_ids as $key => $id) {
                                        $query = "delete from  drive_files where id =?";
                                        $stmt_df_update = $connection->prepare($query);
                                        $stmt_df_update->bind_param('s', $id);
                                        $tmp[] = $stmt_df_update->execute();
                                    }
                                    if (!in_array(false, $tmp)) {
                                        $update_drive_file = true;
                                    } else {
                                        $update_drive_file = false;
                                    }

                                }


                                /* delete source folder share for selected files */

                                $tmp = array();
                                foreach ($data_ids as $key => $id) {
                                    $query = "delete from  drive_shares  where drive_file_id =?";
                                    $stmt_delete_share = $connection->prepare($query);
                                    $stmt_delete_share->bind_param('s', $id);
                                    $tmp[] = $stmt_delete_share->execute();
                                }
                                if (!in_array(false, $tmp)) {
                                    $delete_share = true;
                                } else {
                                    $delete_share = false;
                                }

                                /* Update count of files and share for source folder */
                                $query = "update drive_folders set total_file_count =?, share_count=?, modified =? where id = ?";
                                $stmt_update_source_folder = $connection->prepare($query);
                                $stmt_update_source_folder->bind_param('ssss', $source_total_file, $source_total_share, $created, $source_folder);
                                $update_destination = $stmt_update_source_folder->execute();

                                if ($action == "MOVE") {
                                    /* Update count of files and share for destination folder */
                                    $query = "update drive_folders set total_file_count =?, modified =? where id = ?";
                                    $stmt_update_desti_folder = $connection->prepare($query);
                                    $stmt_update_desti_folder->bind_param('sss', $destination_total_file, $created, $destination_folder);
                                    $update_destination = $stmt_update_desti_folder->execute();
                                }


                                if ($update_drive_file && $delete_share && $update_source && $update_destination) {
                                    $connection->commit();
                                    $response['status'] = 1;
                                    $response['message'] = "File moved successfully";
                                    if ($action == "DELETE") {
                                        $response['message'] = "File deleted successfully";
                                    }

                                } else {
                                    $response['status'] = 0;
                                    $response['message'] = "Sorry file could not move";
                                }
                            } else {
                                $response['status'] = 0;
                                $response['message'] = "Invalid folder files";

                            }

                        } else {
                            $response['status'] = 0;
                            $response['message'] = "Invalid source folder";
                        }
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Please select file first";
                    }

                } catch (Exception $e) {
                    $response['status'] = 0;
                    $response['message'] = "server error";
                }

            }
            Custom::sendResponse($response);
        }
        exit();


    }

    public static function upload_attachment()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $role_id = isset($data['role_id']) ? $data['role_id'] : "";
            $file_array = isset($data['file_array']) ? $data['file_array'] : "";
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : 0;

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else if (empty($file_array)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid file array';
            } else {
                $filter_array = array();
                $send_notification = false;
                $created = Custom::created();
                $connection = ConnectionUtil::getConnection();
                $post['thin_app_id'] = $thin_app_id;
                $post['user_id'] = $user_id;
                $post['app_key'] = $app_key;
                $post['mobile'] = $mobile;
                $post['role_id'] = $role_id;
                $total_upload = $drive_folder_id = 0;
                foreach ($file_array as $key => $file) {
                    $post['file_array'][0]['file_type'] = Custom::getFileType($file['file_name']);
                    $post['file_array'][0]['file_name'] = $file['file_name'];
                    $post['file_array'][0]['file_path'] = $file['file_path'];
                    $post['file_array'][0]['file_size'] = $file['file_size'];
                    $post['listing_type'] = "OTHER";
                    $post['drive_folder_id'] = $drive_folder_id = $file['drive_folder_id'];
                    $post['time_stamp'] = isset($file['time_stamp']) ? $file['time_stamp'] : '';
                    $post['doctor_id'] = $doctor_id;
                    $filter_array[$file['drive_folder_id']][] = array('file_name' => $file['file_name']);
                    $post['category_id'] = 7;
                    $post['is_attachment'] = "YES";
                    $res = WebservicesFunction::add_file($post, false, true);
                    $res = json_decode($res, true);
                    if ($res['status'] == 1) {
                        $result[] = $file['local_file_path'];
                        $total_upload++;
                    } else {
                        $result[] = false;
                    }
                }

                if (!in_array(false, $result) && !empty($result) && count($file_array) == $total_upload) {

                    $query = "update drive_folders set total_attachment = total_attachment + ?, modified =? where id = ?";
                    $stmt = $connection->prepare($query);
                    $stmt->bind_param('sss', $total_upload, $created, $drive_folder_id);
                    $stmt->execute();
                    $connection->commit();
                    $response['status'] = 1;
                    $response['message'] = "Attachment upload successfully";
                    $response['total'] = Custom::get_folder_attachment_count($thin_app_id, $drive_folder_id);

                } else {
                    $response['status'] = 0;
                    $response['message'] = "Sorry attachment could not upload";
                    $response['total'] = 0;
                }

            }
            Custom::sendResponse($response);


        }
        exit();


    }

    public static function get_folder_attachment_list()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $folder_id = isset($data['folder_id']) ? $data['folder_id'] : "";
            try {
                if (empty($thin_app_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid thinapp id';
                } else if (empty($app_key)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid app key';
                } else if (empty($user_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid user id';
                } else if (empty($mobile)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid mobile';
                } else if (empty($folder_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid folder id';
                } else {

                    $query = "select id as file_id, file_path,file_thumbnail, DATE_FORMAT(modified,'%d-%m-%Y') as date from drive_files where drive_folder_id = $folder_id and file_category_master_id = 7 and file_path IS NOT NULL order by modified desc";
                    $connection = ConnectionUtil::getConnection();
                    $service_message_list = $connection->query($query);
                    if ($service_message_list->num_rows) {
                        $service_list = mysqli_fetch_all($service_message_list, MYSQL_ASSOC);
                        $response['status'] = 1;
                        $response['message'] = "Attachment found";
                        $response['data']['list'] = $service_list;
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "No attachment found";
                    }
                }
            } catch (Exception $e) {
                $response['status'] = 0;
                $response['message'] = "Something went wrong on server";
            }
            Custom::sendResponse($response);
        }
        exit();

    }

    public static function delete_folder_attachment()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $folder_id = isset($data['folder_id']) ? $data['folder_id'] : "";
            $file_id = isset($data['file_id']) ? $data['file_id'] : "";
            try {
                if (empty($thin_app_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid thinapp id';
                } else if (empty($app_key)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid app key';
                } else if (empty($user_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid user id';
                } else if (empty($mobile)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid mobile';
                } else if (empty($folder_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid folder id';
                } else if (empty($file_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid file id';
                } else {

                    $connection = ConnectionUtil::getConnection();
                    $connection->autocommit(false);
                    $created = Custom::created();
                    $query = "delete from drive_files where drive_folder_id =? and id =?";
                    $smtp = $connection->prepare($query);
                    $smtp->bind_param('ss', $folder_id, $file_id);

                    $query = "update drive_folders set total_attachment = total_attachment - 1, modified =? where id =?";
                    $smtp_update = $connection->prepare($query);
                    $smtp_update->bind_param('ss', $created, $folder_id);
                    if ($smtp->execute() && $smtp_update->execute()) {
                        $connection->commit();
                        $response['status'] = 1;
                        $response['message'] = "Attachment delete successfully";
                        $response['total'] = Custom::get_folder_attachment_count($thin_app_id, $folder_id);
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "No attachment delete";
                        $response['total'] = 0;
                    }
                }
            } catch (Exception $e) {
                $response['status'] = 0;
                $response['message'] = "Something went wrong on server";
            }
            Custom::sendResponse($response);
        }
        exit();

    }

    public static function get_login_device_list()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $device_id = isset($data['device_id']) ? $data['device_id'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($device_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid device id';
            } else {
                $connection = ConnectionUtil::getConnection();
                $query = "select ulds.id as login_stats_id, ud.device_id, ud.email,ud.modal_name, ud.brand_name, ud.mobile,ud.imei,DATE_FORMAT(ulds.created,'%d-%m-%Y %H:%i:%s') as login_datetime , ulds.status from user_login_device_stats as ulds join user_devices as ud on ud.id = ulds.user_device_id where  ulds.user_id =$user_id order by ulds.id desc";
                $data_list = $connection->query($query);
                if ($data_list->num_rows) {
                    $list = mysqli_fetch_all($data_list, MYSQLI_ASSOC);
                    $response['status'] = 1;
                    $response['message'] = "List found";
                    $response['data']['list'] = $list;
                } else {
                    $response['status'] = 0;
                    $response['message'] = "List not found.";
                }
            }
            Custom::sendResponse($response);
        }
        exit();
    }

    public static function send_login_verification_otp()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $login_stats_id = isset($data['login_stats_id']) ? $data['login_stats_id'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($login_stats_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid login stats id';
            } else {
                $user_data = Custom::get_user_by_id($user_id);
                if (!empty($user_data)) {
                    $verification_code = Custom::getRandomString(4);
                    $option = array(
                        'username' => $user_data['username'],
                        'mobile' => $user_data['mobile'],
                        'verification' => $verification_code,
                        'thinapp_id' => $thin_app_id
                    );
                    $result = Custom::send_otp($option);
                    if (strtoupper($result->Status) == "SUCCESS") {
                        $created = Custom::created();
                        $connection = ConnectionUtil::getConnection();
                        $sql = "update user_login_device_stats set otp = ?, modified=? where id = ?";
                        $stmt = $connection->prepare($sql);
                        $stmt->bind_param('sss', $verification_code, $created, $login_stats_id);
                        $connection->autocommit(true);
                        if ($stmt->execute()) {

                            $response['status'] = 1;
                            $response['message'] = "Verification code send successfully";
                        } else {
                            $response['status'] = 0;
                            $response['message'] = "Verification code could not send";
                        }
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "System unable to send OTP";
                    }
                } else {
                    $response['status'] = 0;
                    $response['message'] = "Invalid user";
                }

            }
            Custom::sendResponse($response);
        }
        exit();
    }

    public static function logout_from_device($data=null)
    {

        if(empty($data)){
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);
        }


        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $login_stats_id = isset($data['login_stats_id']) ? $data['login_stats_id'] : "";
            $otp = isset($data['otp']) ? $data['otp'] : "";
            $delete_by = isset($data['delete_by']) ? $data['delete_by'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($login_stats_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid login stats id';
            } else if (empty($otp) && $delete_by != 'SUPPORT_ADMIN') {
                $response['status'] = 0;
                $response['message'] = 'Invalid OTP';
            } else {
                $query = "select ulds.id, ulds.otp, ud.device_id, ulds.user_id from user_login_device_stats as ulds join user_devices as ud on ud.id = ulds.user_device_id where ulds.id = $login_stats_id limit 1";
                $connection = ConnectionUtil::getConnection();
                $service_message_list = $connection->query($query);
                if ($service_message_list->num_rows) {
                    $user_data = mysqli_fetch_assoc($service_message_list);
                    if ($user_data['otp'] == $otp ||$delete_by ='SUPPORT_ADMIN') {
                        $created = Custom::created();
                        $connection = ConnectionUtil::getConnection();
                        $status = 'INACTIVE';
                        $sql = "update user_login_device_stats set status = ?, modified=? where id = ?";
                        $stmt = $connection->prepare($sql);
                        $stmt->bind_param('sss', $status, $created, $login_stats_id);
                        if ($stmt->execute()) {
                            $response['status'] = 1;
                            $response['message'] = "User logout successfully";
                            $file_name = "active_" . $user_data['user_id'] . "_" . $user_data['device_id'];
                            WebservicesFunction::deleteJson(array($file_name), 'login_users');

                        } else {
                            $response['status'] = 0;
                            $response['message'] = "Sorry user could not logout";
                        }
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Please enter valid OTP";
                    }
                } else {
                    $response['status'] = 0;
                    $response['message'] = "Invalid login user";
                }

            }
            Custom::sendResponse($response);
        }
        exit();
    }

    public static function web_manage_patient($data = null)
    {

        $return_type = true;
        if (empty($data)) {
            $return_type = false;
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);
        }
        if (!empty($data)) {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $medical_history = isset($data['medical_history']) ? $data['medical_history'] : "";
            $address = isset($data['address']) ? $data['address'] : "";

            $patient_mobile = isset($data['patient_mobile']) ? $data['patient_mobile'] : "";
            $patient_name = isset($data['patient_name']) ? $data['patient_name'] : "";
            $parents_mobile = isset($data['parents_mobile']) ? $data['parents_mobile'] : "";
            $parents_name = isset($data['parents_name']) ? $data['parents_name'] : "";

            $patient_type = isset($data['patient_type']) ? $data['patient_type'] : "";
            $patient_id = isset($data['patient_id']) ? $data['patient_id'] : "";
            $dob = isset($data['dob']) ? $data['dob'] : "";
            $gender = isset($data['gender']) ? $data['gender'] : "";
            $action = isset($data['action']) ? $data['action'] : "";
            $age = isset($data['age']) ? $data['age'] : "";
            $profile_photo = isset($data['profile_photo']) ? $data['profile_photo'] : "";
            $email = isset($data['email']) ? $data['email'] : "";


            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else if (empty($patient_name)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid patient name';
            } else if (empty($patient_mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid patient mobile';
            } else if ($patient_type != "CHILDREN" && $patient_type != "CUSTOMER") {
                $response['status'] = 0;
                $response['message'] = 'Invalid patient type';
            } else if ($patient_type == "UPDATE" && empty($patient_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid patient id';
            } else if ($gender != "MALE" && $gender != "FEMALE") {
                $response['status'] = 0;
                $response['message'] = 'Invalid gender';
            } else if ($action != "ADD" && $action != "UPDATE") {
                $response['status'] = 0;
                $response['message'] = 'Invalid action';
            } else {

                $connection = ConnectionUtil::getConnection();
                $result = array();

                if ($patient_type == "CHILDREN") {
                    $child_data = Custom::get_child_by_id($patient_id);
                    if (!empty($child_data)) {

                        if ($action == 'ADD') {

                            $admin_data = Custom::get_thinapp_admin_data($thin_app_id);
                            $child = array();
                            $child['app_key'] = APP_KEY;
                            $child['thin_app_id'] = $thin_app_id;
                            $child['user_id'] = $admin_data['id'];;
                            $child['child_name'] = $patient_name;
                            $child['mobile'] = $patient_mobile;
                            $child['dob'] = $dob;
                            $child['gender'] = strtoupper($gender);
                            $child['add_vaccination'] = 'NO';
                            $result = WebservicesFunction::add_child($child);
                            $result = $customer_data = json_decode($result, true);
                            if ($result['status'] == 1) {
                                $response['status'] = 1;
                                $response['message'] = "Children add successfully";
                                $send_notification = true;
                                $patient_id = $result['child_id'];
                            } else {
                                $response['status'] = 0;
                                $response['message'] = $result['message'];
                            }

                        } else {
                            $admin_data = Custom::get_thinapp_admin_data($thin_app_id);
                            $post['thin_app_id'] = $thin_app_id;
                            $post['app_key'] = APP_KEY;
                            $post['user_id'] = $admin_data['id'];
                            $post['mobile'] = $patient_mobile;
                            $post['parents_mobile'] = $parents_mobile;
                            $post['child_id'] = $patient_id;
                            $post['image'] = $child_data['image'];
                            $post['child_name'] = $child_data['child_name'];
                            $post['dob'] = $dob;
                            $post['gender'] = $child_data['gender'];
                            $post['patient_address'] = $address;
                            $post['medical_history'] = $medical_history;
                            $post['patient_profession'] = $child_data['patient_profession'];
                            $post['parents_name'] = $child_data['parents_name'];
                            $post['birth_weight'] = $child_data['birth_weight'];
                            $post['birth_height'] = $child_data['birth_height'];
                            $post['birth_head_circumference'] = $child_data['birth_head_circumference'];
                            $post['special_remark'] = $child_data['special_remark'];
                            $post['blood_group'] = $child_data['blood_group'];
                            $result = WebservicesFunction::edit_child($post, true);
                            $result = json_decode($result, true);
                            if ($result['status'] == 1) {
                                $response['status'] = 1;
                                $response['message'] = "Info updated successfully";
                            } else {
                                $response['status'] = 0;
                                $response['message'] = $result['message'];
                            }
                        }
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Patient not found";
                    }

                } else {

                    if ($action == 'ADD') {

                        $customer_data = Custom::search_customer_name($thin_app_id, $patient_mobile, $patient_name);
                        if (empty($customer_data)) {
                            $customer = array();
                            $customer['app_key'] = $app_key;
                            $customer['thin_app_id'] = $thin_app_id;
                            $customer['user_id'] = $user_id;
                            $customer['patient_name'] = $patient_name;
                            $customer['dob'] = $dob;
                            $customer['mobile'] = $patient_mobile;
                            $customer['country_code'] = "+91";
                            $customer['profile_photo'] = $profile_photo;
                            $customer['gender'] = strtoupper($gender);
                            $customer['age'] = $age;
                            $customer['address'] = $address;
                            $customer['email'] = $email;
                            $customer['parents_mobile'] = $parents_mobile;
                            $customer['parents_name'] = $parents_name;
                            $customer['medical_history'] = $medical_history;

                            $result = WebservicesFunction::appointment_add_customer($customer);
                            $result = $customer_data = json_decode($result, true);
                            if ($result['status'] == 1) {
                                $response['status'] = 1;
                                $response['message'] = "Patient Added Successfully";
                                $res = Custom::create_and_share_folder($thin_app_id, $patient_mobile, $patient_name, 'CUSTOMER', $result['customer_id']);
                            } else {
                                $response['status'] = 0;
                                $response['message'] = $result['message'];
                            }
                        } else {
                            $response['status'] = 0;
                            $response['message'] = "Patient already exist.";
                        }
                    } else {

                        $customer = array();
                        $customer['app_key'] = $app_key;
                        $customer['thin_app_id'] = $thin_app_id;
                        $customer['user_id'] = $user_id;
                        $customer['patient_name'] = $patient_name;
                        $customer['dob'] = $dob;
                        $customer['mobile'] = $mobile;
                        $customer['patient_mobile'] = $patient_mobile;
                        $customer['country_code'] = "+91";
                        $customer['profile_photo'] = $profile_photo;
                        $customer['gender'] = strtoupper($gender);
                        $customer['age'] = $age;
                        $customer['address'] = $address;
                        $customer['email'] = $email;
                        $customer['parents_mobile'] = $parents_mobile;
                        $customer['parents_name'] = $parents_name;
                        $customer['medical_history'] = $medical_history;
                        $customer['patient_id'] = $patient_id;
                        $result = WebservicesFunction::appointment_edit_customer($customer);
                        $response = $customer_data = json_decode($result, true);
                    }

                }
            }
            if ($return_type === false) {
                Custom::sendResponse($response);
            } else {
                return json_encode($response);
            }
        }
        exit();


    }

    public static function manage_patient_illness_tag()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $action_type = isset($data['action_type']) ? $data['action_type'] : "";
            $tag_name = isset($data['tag_name']) ? trim($data['tag_name']) : "";
            $message = isset($data['message']) ? trim($data['message']) : "";
            $cycle_time = isset($data['cycle_time']) ? strtoupper($data['cycle_time']) : "";
            $course_time = isset($data['course_time']) ? strtoupper($data['course_time']) : "";
            $doctor_id = isset($data['doctor_id']) ? ($data['doctor_id']) : "";
            $tag_id = isset($data['tag_id']) ? ($data['tag_id']) : 0;
            try {
                if (empty($thin_app_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid thinapp id';
                } else if (empty($app_key)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid app key';
                } else if (empty($user_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid user id';
                } else if (empty($mobile)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid mobile';
                } else if ($action_type != 'ADD' && $action_type != "UPDATE" && $action_type != "DELETE") {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid action type';
                } else if (empty($tag_name) && ($action_type == "ADD" || $action_type == "UPDATE")) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid tag name';
                } else if (!empty($cycle_time) && empty($course_time) && ($action_type == "ADD" || $action_type == "UPDATE")) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid course time';
                } else if (empty($tag_id) && ($action_type == "DELETE" || $action_type == "UPDATE")) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid tag id';
                } else {

                    $return_array = array();
                    $created = Custom::created();
                    $connection = ConnectionUtil::getConnection();

                    if ($action_type == "ADD") {

                        $connection = ConnectionUtil::getConnection();
                        $condition = " thinapp_id = $thin_app_id and status = 'ACTIVE' AND  tag_name ='$tag_name' ";
                        if (!empty($doctor_id)) {
                            $condition .= " and doctor_id = $doctor_id";
                        }
                        $query = " select id from patient_illness_tags where $condition limit 1";
                        $service_message_list = $connection->query($query);

                        if (!$service_message_list->num_rows) {
                            $sql = "INSERT INTO patient_illness_tags (thinapp_id, doctor_id, tag_name, message, cycle_time, course_time, created, modified) VALUES (?,?,?,?,?, ?,?,?)";
                            $stmt = $connection->prepare($sql);
                            $stmt->bind_param('ssssssss', $thin_app_id, $doctor_id, $tag_name, $message, $cycle_time, $course_time, $created, $created);
                            if ($stmt->execute()) {
                                $connection->commit();
                                $response['status'] = 1;
                                $response['message'] = "Tag added successfully";
                            } else {
                                $response['status'] = 0;
                                $response['message'] = "Sorry tag could not add";
                            }
                        } else {
                            $response['status'] = 0;
                            $response['message'] = "Tag already exist";
                        }
                    } else if ($action_type == "UPDATE") {

                        $connection = ConnectionUtil::getConnection();
                        $condition = " thinapp_id = $thin_app_id and status = 'ACTIVE' AND tag_name ='$tag_name' ";
                        if (!empty($doctor_id)) {
                            $condition .= " and doctor_id = $doctor_id";
                        }
                        $query = " select id from patient_illness_tags where $condition limit 1";
                        $service_message_list = $connection->query($query);
                        $tag_data = mysqli_fetch_assoc($service_message_list);
                        if (empty($tag_data) || ($tag_data['id'] == $tag_id)) {
                            $sql = "UPDATE patient_illness_tags set tag_name =?, message=?, cycle_time=?, course_time=?, modified =? where id =?";
                            $stmt = $connection->prepare($sql);
                            $stmt->bind_param('ssssss', $tag_name, $message, $cycle_time, $course_time, $created, $tag_id);
                            if ($stmt->execute()) {
                                $connection->commit();
                                $response['status'] = 1;
                                $response['message'] = "Tag edited successfully";
                            } else {
                                $response['status'] = 0;
                                $response['message'] = "Sorry tag could not edit";
                            }
                        } else {
                            $response['status'] = 0;
                            $response['message'] = "Tag already exist";
                        }
                    } else {

                        $sql = "delete from  patient_illness_tags where id =?";
                        $stmt = $connection->prepare($sql);
                        $stmt->bind_param('s', $tag_id);
                        if ($stmt->execute()) {
                            $connection->commit();
                            $response['status'] = 1;
                            $response['message'] = "Tag delete successfully";
                        } else {
                            $response['status'] = 0;
                            $response['message'] = "Sorry tag could not delete";
                        }
                    }
                }
            } catch (Exception $e) {
                $response['status'] = 0;
                $response['message'] = "Something went wrong on server";
            }
            Custom::sendResponse($response);
        }
        exit();
    }

    public static function patient_illness_tag_list()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : "";
            $patient_type = isset($data['patient_type']) ? $data['patient_type'] : "";
            $patient_id = isset($data['patient_id']) ? $data['patient_id'] : "";
            $order_by = isset($data['order_by']) ? $data['order_by'] : "ALPHABATIC";
            $send_doctor_list = isset($data['send_doctor_list']) ? $data['send_doctor_list'] : 'NO';
            try {
                if (empty($thin_app_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid thinapp id';
                } else if (empty($app_key)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid app key';
                } else if (empty($user_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid user id';
                } else if (empty($mobile)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid mobile';
                } else {
                    $connection = ConnectionUtil::getConnection();
                    $label = "Tag";
                    if ($send_doctor_list == "YES") {
                        $query = " ( select '' as id, 'All Doctor' as doctor_name ) UNION ALL ( select id, name as doctor_name  from appointment_staffs as staff  where staff.status = 'ACTIVE' and staff.thinapp_id = $thin_app_id and staff.staff_type='DOCTOR' order by staff.name asc )";
                        $label = "Doctor";
                    } else {
                        $condition = " pit.thinapp_id = $thin_app_id and pit.status = 'ACTIVE' ";
                        if (!empty($doctor_id)) {
                            $condition .= " and pit.doctor_id = $doctor_id";
                        }
                        if (!empty($patient_id) && !empty($patient_type)) {
                            $on = ($patient_type == 'CHILDREN') ? " pt.children_id = $patient_id" : " pt.appointment_customer_id = $patient_id";
                            $on = " on pit.id = pt.patient_illness_tag_id and $on";
                            $order_by = ($order_by == 'RECENT') ? ' pt.id  desc ' : ' pit.tag_name asc ';
                            $order_by = " order by $order_by";
                            $query = " select pit.id, pit.tag_name, pit.message, pit.cycle_time, pit.cycle_time, pit.course_time, IF(pt.id IS NOT NULL, 'YES','NO') AS is_selected  from patient_illness_tags as pit left join patient_tags as pt $on where $condition $order_by";
                        } else {
                            $order_by = ($order_by == 'RECENT') ? ' pit.id  desc ' : ' pit.tag_name asc ';
                            $order_by = " order by $order_by";
                            $query = " select pit.id, pit.tag_name, pit.message, pit.cycle_time, pit.cycle_time, pit.course_time, 'NO' AS is_selected  from patient_illness_tags as pit where $condition $order_by";
                        }

                    }
                    $service_message_list = $connection->query($query);
                    if ($service_message_list->num_rows) {
                        $service_list = mysqli_fetch_all($service_message_list, MYSQL_ASSOC);
                        $response['status'] = 1;
                        $response['message'] = "$label found";
                        $response['data']['list'] = $service_list;
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "No $label Found";
                    }

                }
            } catch (Exception $e) {
                $response['status'] = 0;
                $response['message'] = "Something went wrong on server";
            }
            Custom::sendResponse($response);
        }
        exit();
    }

    public static function add_illness_tag_to_patient($data = null)
    {

        $return = true;
        if (empty($data)) {
            $return = false;
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);

        }
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : "";
            $patient_type = isset($data['patient_type']) ? $data['patient_type'] : "";
            $patient_id = isset($data['patient_id']) ? $data['patient_id'] : "";
            $tag_id = isset($data['tag_id']) ? $data['tag_id'] : "";

            try {
                if (empty($thin_app_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid thinapp id';
                } else if (empty($app_key)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid app key';
                } else if (empty($user_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid user id';
                } else if (empty($mobile)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid mobile';
                } else if (empty($doctor_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid doctor';
                } else if (empty($patient_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid patient';
                } else if (empty($tag_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Please select tag';
                } else if ($patient_type != 'CUSTOMER' && $patient_type != 'CHILDREN' && $patient_type != 'CHILD') {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid patient type';
                } else {

                    $connection = ConnectionUtil::getConnection();
                    $connection->autocommit(false);
                    if (!empty($tag_id)) {

                        $result = array();
                        $condition = ($patient_type == 'CUSTOMER') ? " appointment_customer_id = ?" : " children_id = ?";
                        $condition = " doctor_id = ? and $condition";
                        $sql = "delete from patient_tags where  $condition";
                        $stmt_delete_date = $connection->prepare($sql);
                        $stmt_delete_date->bind_param('ss', $doctor_id, $patient_id);
                        $result[] = $stmt_delete_date->execute();
                        $tag_id = explode(',', $tag_id);
                        $appointment_customer_id = $children_id = 0;
                        if ($patient_type == "CUSTOMER") {
                            $appointment_customer_id = $patient_id;
                        } else {
                            $children_id = $patient_id;
                        }

                        foreach ($tag_id as $key => $id) {
                            if (!empty($id)) {
                                $created = Custom::created();
                                $sql = "INSERT INTO patient_tags (thinapp_id, doctor_id, appointment_customer_id, children_id,  patient_illness_tag_id,  created) VALUES (?, ?, ?, ?, ?, ?)";
                                $stmt = $connection->prepare($sql);
                                $stmt->bind_param('ssssss', $thin_app_id, $doctor_id, $appointment_customer_id, $children_id, $id, $created);
                                $result[] = $stmt->execute();
                            }

                        }
                        if (!in_array(false, $result)) {
                            $connection->commit();
                            $response['status'] = 1;
                            $response['message'] = "Tag save successfully";
                        } else {
                            $response['status'] = 0;
                            $response['message'] = "Sorry tag could not save";
                        }

                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Please select tag";
                    }

                }
            } catch (Exception $e) {
                $response['status'] = 0;
                $response['message'] = "Something went wrong on server";
            }
            if ($return === true) {
                return json_encode($response);
            } else {
                Custom::sendResponse($response);
            }
        }
        exit();


    }

    public static function update_hospital_profile()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $profile_name = isset($data['profile_name']) ? $data['profile_name'] : "";
            $profile_photo = isset($data['profile_photo']) ? $data['profile_photo'] : "";
            $registration_number = isset($data['registration_number']) ? $data['registration_number'] : "";
            $emergency_number = isset($data['emergency_number']) ? $data['emergency_number'] : "";
            $establishment_year = isset($data['establishment_year']) ? $data['establishment_year'] : "";
            $description = isset($data['description']) ? $data['description'] : "";
            $category_ids = isset($data['category_ids']) ? $data['category_ids'] : "";
            $email = isset($data['email']) ? $data['email'] : "";
            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else {
                $connection = ConnectionUtil::getConnection();
                $created = Custom::created();
                $profile_photo = Custom::check_image_path_string($profile_photo);
                $profile_photo = ($profile_photo !== false) ? $profile_photo : '';
                $sql = "update thinapps set email =?, profile_name = ?, profile_photo =?, registration_number=?, emergency_number=?, establishment_year=?, description=?, modified=? where id = ?";
                $stmt = $connection->prepare($sql);
                $stmt->bind_param('sssssssss', $email, $profile_name, $profile_photo, $registration_number, $emergency_number, $establishment_year, $description, $created, $thin_app_id);
                if ($stmt->execute()) {
                    $response['status'] = 1;
                    $response['message'] = "Profile update successfully";
                    if (!empty($category_ids)) {
                        $category_ids = explode(',', $category_ids);
                        $res = Custom::update_app_categories($thin_app_id, $category_ids);
                    }

                } else {
                    $response['status'] = 0;
                    $response['message'] = "User could update profile";
                }

            }
            Custom::sendResponse($response);
        }
        exit();
    }

    public static function get_hospital_profile()
    {


        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $send_category = isset($data['send_category']) ? $data['send_category'] : "NO";

            try {
                if (empty($thin_app_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid thinapp id';
                } else if (empty($app_key)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid app key';
                } else if (empty($user_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid user id';
                } else if (empty($mobile)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid mobile';
                } else {


                    if ($send_category == "YES") {

                        $query = "select profile_name, email, profile_photo, registration_number, emergency_number, establishment_year, description from thinapps where id =  $thin_app_id";
                        $connection = ConnectionUtil::getConnection();
                        $list = $connection->query($query);
                        if ($list->num_rows) {
                            $list_data = mysqli_fetch_assoc($list);
                            $response['status'] = 1;
                            $response['message'] = "Profile found";
                            $response['data']['detail'] = $list_data;
                            $response['data']['category_list'] = array();
                            $query = "select dc.id, dc.category_name, IF(hc.id IS NOT NULL,'YES','NO') as is_selected from department_categories dc left join hospital_categories as hc on dc.id = hc.department_category_id and hc.thinapp_id = $thin_app_id and hc.status = 'ACTIVE' order by dc.category_name asc";
                            $connection = ConnectionUtil::getConnection();
                            $service_message_list = $connection->query($query);
                            if ($service_message_list->num_rows) {
                                $response['data']['category_list'] = mysqli_fetch_all($service_message_list, MYSQLI_ASSOC);
                            }
                        } else {
                            $response['status'] = 0;
                            $response['message'] = "No data found";
                        }


                    } else {
                        $query = "select profile_name, email, profile_photo, registration_number, emergency_number, establishment_year, description from thinapps where id =  $thin_app_id";
                        $connection = ConnectionUtil::getConnection();
                        $list = $connection->query($query);
                        if ($list->num_rows) {
                            $list_data = mysqli_fetch_assoc($list);
                            $response['status'] = 1;
                            $response['message'] = "Profile found";
                            $response['data']['detail'] = $list_data;

                        } else {
                            $response['status'] = 0;
                            $response['message'] = "No data found";
                        }
                    }
                }

            } catch (Exception $e) {
                $response['status'] = 0;
                $response['message'] = "Something went wrong on server";
            }
            Custom::sendResponse($response);
        }
        exit();


    }

    public static function get_recording_list()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $folder_id = isset($data['folder_id']) ? $data['folder_id'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($folder_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid folder id';
            } else {
                $connection = ConnectionUtil::getConnection();
                $query = "select df.file_name, df.file_path, DATE_FORMAT(df.created,'%d-%m-%Y') as date from drive_files as df where df.drive_folder_id = $folder_id and df.file_category_master_id = 10 and df.file_type = 'AUDIO' AND df.listing_type = 'OTHER' and df.status = 'ACTIVE' order by df.id desc";
                $data_list = $connection->query($query);
                if ($data_list->num_rows) {
                    $list = mysqli_fetch_all($data_list, MYSQLI_ASSOC);
                    $response['status'] = 1;
                    $response['message'] = "List found";
                    $response['data']['list'] = $list;
                } else {
                    $response['status'] = 0;
                    $response['message'] = "List not found.";
                }
            }
            Custom::sendResponse($response);
        }
        exit();
    }


    /* new appointment setting module start */

    public static function get_doctor_appointment_setting()
    {


        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : 0;
            $setting_date = isset($data['setting_date']) ? $data['setting_date'] : '';
            $day_number = isset($data['day_number']) ? $data['day_number'] : 1;
            $setting_type = isset($data['setting_type']) ? $data['setting_type'] : '';
            $send_list = isset($data['send_list']) ? $data['send_list'] : 'YES';

            try {
                if (empty($thin_app_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid thinapp id';
                } else if (empty($app_key)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid app key';
                } else if (empty($user_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid user id';
                } else if (empty($mobile)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid mobile';
                } else if (empty($doctor_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid doctor';
                } else {

                    $condition = "";
                    if (empty($setting_type)) {
                        $get_doctor_data = Custom::get_doctor_by_id($doctor_id, $thin_app_id);
                        $setting_type = !empty($get_doctor_data) ? $get_doctor_data['appointment_setting_type'] : $setting_type;
                    }

                    if ($setting_type == "DAY") {

                        if ($send_list == 'YES') {
                            $dowMap = array('Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun');
                            foreach ($dowMap as $key => $day_name) {
                                $day_id = $key + 1;
                                $is_selected = ($day_id == $day_number) ? "YES" : "NO";
                                $response['data']['day_list'][] = array('id' => $day_id, 'day' => $day_name, 'is_selected' => $is_selected);
                            }
                        }

                        if (empty($day_number)) {
                            $param = date('N');
                        } else {
                            $param = $day_number;
                        }

                        $condition = " and setting_type = '$setting_type'";

                    } else if ($setting_type == "DATE") {

                        if ($send_list == 'YES') {
                            $begin = new DateTime(date('Y-m-d'));
                            $end = new DateTime(date('Y-m-d', strtotime("+1 Month")));


                            $daterange = new DatePeriod($begin, new DateInterval('P1D'), $end);
                            $current_date = date('d-D-M-Y');
                            foreach ($daterange as $key => $date) {
                                $new_date = $date->format("d-D-M-Y");
                                $send_date = $new_date . '-' . $date->format("Y/m/d");
                                $date_slot[$key]['date'] = implode("##", explode("-", $send_date));
                                $date_slot[$key]['is_selected'] = ($new_date == $current_date) ? "YES" : "NO";
                            }
                            $response['data']['date_list'] = $date_slot;
                        }

                        if (empty($setting_date)) {
                            $setting_date = $begin->format("Y-m-d");;
                        } else {
                            $date = DateTime::createFromFormat('Y/m/d', $setting_date);
                            $setting_date = $date->format('Y-m-d');
                        }
                        $param = $setting_date;
                        $condition = " and setting_type = '$setting_type' and DATE(appointment_date) >= '$setting_date'";

                    }

                    $tmp_add = array();
                    $address_list = Custom::doctor_appointment_address_list($thin_app_id, $doctor_id, $setting_type, $param);
                    if (!empty($address_list)) {
                        foreach ($address_list as $key => $add) {
                            $tmp_add[$add['address_id']]['address_id'] = $add['address_id'];
                            $tmp_add[$add['address_id']]['address'] = $add['address'];
                            $tmp_add[$add['address_id']]['is_associated'] = $add['is_associated'];
                            if ($add['is_associated'] == 'YES') {
                                $tmp_add[$add['address_id']]['time_array'][] = array('from_time' => $add['from_time'], 'to_time' => $add['to_time']);
                            } else {
                                $tmp_add[$add['address_id']]['time_array'][] = array('from_time' => '08:00 AM', 'to_time' => '08:00 PM');
                            }
                        }
                    } else {
                        $address_list = array();
                    }

                    $service_list = Custom::doctor_appointment_service_list($thin_app_id, $doctor_id, $setting_type, $param);
                    $response['data']['service_list'] = !empty($service_list) ? $service_list : array();
                    $response['data']['address_list'] = array_values($tmp_add);
                    $response['data']['setting_type'] = $setting_type;
                    $response['data']['send_list'] = $send_list;
                    $response['status'] = 1;
                    $response['message'] = "Data found";
                }
            } catch (Exception $e) {
                $response['status'] = 0;
                $response['message'] = "Something went wrong on server";
            }

            if ($setting_type == 'DAY') {
                $response['title'] = 'Are you sure you want to activate day wise appointment setting?';
                $response['warning'] = "If you want to activate day wise appointment setting then date wise setting automatically deactivate.";
            } else {
                $response['title'] = 'Are you sure you want to activate date wise appointment setting?';
                $response['warning'] = "If you want to activate date wise appointment setting then day wise setting automatically deactivate.";
            }


            Custom::sendResponse($response);
        }
        exit();


    }


    public static function update_doctor_appointment_setting()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $data_string = isset($data['data_string']) ? $data['data_string'] : "";
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else if (empty($data_string)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid data string';
            } else if (empty($doctor_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid doctor id';
            } else {
                $connection = ConnectionUtil::getConnection();
                $created = Custom::created();

                $data_array = json_decode($data_string, true);
                $data_array = $data_array[0];
                $setting_type = @$data_array['setting_type'];
                if ($setting_type == 'DAY' || $setting_type == 'DATE') {

                    $service_array = array_column($data_array['service_array_list'], 'service_id');
                    $address_array = $data_array['address_array_list'];
                    foreach ($address_array as $key => $address) {
                        foreach ($address['time_array_list'] as $key => $time) {

                            $from_time = date("H:i", strtotime($time['from_time']));
                            $to_time = date("H:i", strtotime($time['to_time']));
                            $tmp_data[] = array('appointment_address_id' => $address['address_id'], 'from_time' => $from_time, 'to_time' => $to_time);
                        }
                    }
                    $added_service = array();
                    foreach ($service_array as $key => $service_id) {
                        foreach ($tmp_data as $tmp_key => $row) {
                            $row['appointment_service_id'] = $service_id;
                            $row['index_number'] = $key + 1;
                            $added_service[] = $row;
                        }
                    }
                    $connection = ConnectionUtil::getConnection();
                    $connection->autocommit(false);
                    $final_array = $result = array();
                    if ($setting_type == 'DAY') {
                        $day_array = array_column($data_array['day_array_list'], 'day_id');
                        foreach ($day_array as $key => $day_id) {
                            foreach ($added_service as $tmp_key => $row) {
                                $row['appointment_day_time_id'] = $day_id;
                                $final_array[] = $row;
                            }
                            /* delete day last configuration */
                            $sql = "delete from doctor_appointment_setting where doctor_id = ? and setting_type = ? and appointment_day_time_id =?";
                            $stmt_delete_day = $connection->prepare($sql);
                            $stmt_delete_day->bind_param('sss', $doctor_id, $setting_type, $day_id);
                            $result[] = $stmt_delete_day->execute();

                        }
                    } else {
                        $day_array = array_column($data_array['date_array_list'], 'date');
                        foreach ($day_array as $key => $date) {
                            foreach ($added_service as $tmp_key => $row) {
                                $row['appointment_date'] = $date;
                                $final_array[] = $row;
                            }
                            /* delete day last configuration */
                            $sql = "delete from doctor_appointment_setting where doctor_id = ? and setting_type = ? and appointment_date =?";
                            $stmt_delete_date = $connection->prepare($sql);
                            $stmt_delete_date->bind_param('sss', $doctor_id, $setting_type, $date);
                            $result[] = $stmt_delete_date->execute();
                        }
                    }

                    if (!empty($final_array)) {


                        $created = Custom::created();
                        foreach ($final_array as $key => $val) {
                            $appointment_day_time_id = 0;
                            $appointment_date = '';
                            if ($setting_type == 'DAY') {
                                $appointment_day_time_id = $val['appointment_day_time_id'];
                            } else {
                                $appointment_date = $val['appointment_date'];
                            }

                            $sql = "INSERT INTO doctor_appointment_setting (index_number, thinapp_id, doctor_id, appointment_address_id, appointment_service_id,appointment_day_time_id, appointment_date, from_time,to_time, setting_type, created  ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                            $stmt = $connection->prepare($sql);
                            $stmt->bind_param('sssssssssss', $val['index_number'], $thin_app_id, $doctor_id, $val['appointment_address_id'], $val['appointment_service_id'], $appointment_day_time_id, $appointment_date, $val['from_time'], $val['to_time'], $setting_type, $created);
                            $result[] = $stmt->execute();

                        }

                        $doctor_data = Custom::get_doctor_by_id($doctor_id, $thin_app_id);
                        if (!empty($doctor_data) && $doctor_data['appointment_setting_type'] != $setting_type) {
                            /* update doctor setting type for new appoint day wise or date wise */
                            $sql = "UPDATE appointment_staffs set appointment_setting_type =?, modified =?  where id = ?";
                            $stmt_update_type = $connection->prepare($sql);
                            $stmt_update_type->bind_param('sss', $setting_type, $created, $doctor_id);
                            $result = $stmt_update_type->execute();


                        }


                        if (!in_array(false, $result)) {
                            $connection->commit();
                            $response['status'] = 1;
                            $response['message'] = "Settings saved successfully";
                            Custom::delete_doctor_cache($doctor_id);


                        } else {
                            $connection->rollback();
                            $response['status'] = 0;
                            $response['message'] = "Sorry, setting could not save";
                        }
                    } else {
                        $connection->rollback();
                        $response['status'] = 0;
                        $response['message'] = "Sorry, setting could not save";
                    }


                } else {
                    $response['status'] = 0;
                    $response['message'] = "Invalid data";
                }


            }
            Custom::sendResponse($response);
        }
        exit();
    }

    public static function new_quick_appointment($data = null, $return = false)
    {


        if (empty($data)) {
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);

        }

        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $role_id = isset($data['role_id']) ? $data['role_id'] : "";
            $appointment_user_role = isset($data['appointment_user_role']) ? $data['appointment_user_role'] : "";
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : "0";


            $background = array();

            if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user';
            } else if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else if (empty($role_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid role';
            } else {


                $response['data']['day_list'] = array();
                $response['data']['service_list'] = array();
                $response['data']['address_list'] = array();
                $response['data']['slot_list'] = array();
                $response['data']['recent_list'] = array();
                $address_id = $service_id = 0;
                $date_slot = array();

                $doctor_data = Custom::get_doctor_by_id($doctor_id, $thin_app_id);
                if (!empty($doctor_data) && in_array($doctor_data['visible_for'], array('BOTH', 'APP'))) {


                    $setting_type = $doctor_data['appointment_setting_type'];
                    if ($setting_type == 'DAY') {
                        $param = date('N');
                    } else {
                        $param = date('Y-m-d');
                    }
                    $service_list = Custom::get_service_by_date($thin_app_id, $doctor_id, $setting_type, $param);
                    $service_amount = "";
                    if (!empty($service_list)) {
                        $response['data']['service_list'] = $service_list;
                        $service_id = $service_list[0]['service_id'];
                        $service_amount = $service_list[0]['service_amount'];
                    	 $video_consulting_amount = $service_list[0]['video_consulting_amount'];
                        $audio_consulting_amount = $service_list[0]['audio_consulting_amount'];
                        $chat_consulting_amount = $service_list[0]['chat_consulting_amount'];
                        $address_list = Custom::get_address_by_date($thin_app_id, $doctor_id, $service_id, $setting_type, $param);
                        if (!empty($address_list)) {
                            $address_id = $address_list[0]['address_id'];
                            $response['data']['address_list'] = $address_list;
                        }
                    }

                    /* get doctor profile data */
                    $profile['doctor_name'] = $doctor_data['name'];
                    $profile['education'] = $doctor_data['sub_title'];
                    $profile['profile_photo'] = $doctor_data['profile_photo'];
                    $profile['experience'] = Custom::create_experience_string($doctor_data['experience'], 'SMALL');
                    $profile['fees'] = $service_amount;
                	$profile['video_consulting_amount'] = $video_consulting_amount;
                    $profile['audio_consulting_amount'] = $audio_consulting_amount;
                    $profile['chat_consulting_amount'] = $chat_consulting_amount;
                    
                    $profile['show_fees'] = $doctor_data['show_fees'];
                    $profile['allow_emergency_appointment'] = $doctor_data['allow_emergency_appointment'];
                    $profile['emergency_appointment_fee'] = $doctor_data['emergency_appointment_fee'];
                	$profile['is_online_consulting'] = $doctor_data['is_online_consulting'];
                    $profile['is_offline_consulting'] = $doctor_data['is_offline_consulting'];
                    $profile['allow_block_appointment_slot'] = "NO";
                    if ($appointment_user_role == "RECEPTIONIST") {
                        $profile['allow_block_appointment_slot'] = Custom::allow_block_appointment_slot($thin_app_id, $user_id);
                    }
                    $response['data']['profile'] = $profile;

                    /* get recent patient list */
                    $appointment_role = !empty($appointment_user_role) ? $appointment_user_role : Custom::get_appointment_role($mobile, $thin_app_id, $role_id);
                    if ($appointment_role == "USER") {
                        $response['data']['recent_list'] = Custom::get_customer_list_by_mobile($thin_app_id, $mobile, $role_id, true, 15);
                    }
                    $begin = new DateTime(date('Y-m-d'));
                    $end = new DateTime(date('Y-m-d', strtotime("+1 Month")));

                    $block_date = Custom::get_doctor_blocked_date($thin_app_id, $address_id, $doctor_id, 15, $begin, 'YES');

                    $daterange = new DatePeriod($begin, new DateInterval('P1D'), $end);
                    $current_date = date('d-D-M-Y');
                    foreach ($daterange as $key => $date) {
                        $new_date = $date->format("d-D-M-Y");

                        $date_slot[$key]['date'] = implode("##", explode("-", $new_date)) . "##" . $date->format("Y-m-d");
                        $date_slot[$key]['is_selected'] = ($new_date == $current_date) ? "YES" : "NO";
                        $date_slot[$key]['is_date_blocked'] = in_array($date->format("Y-m-d"), $block_date) ? "YES" : "NO";

                    }

                    $response['data']['day_list'] = $date_slot;
                    $show_book_more_token = ($appointment_role != 'USER') ? true : false;
                    $thin_app_data = Custom::getThinAppData($thin_app_id);
                    $expire_slot = !empty($thin_app_data)?$thin_app_data['show_expire_token_slot']=='YES':false;
                    $slot_array = Custom::new_get_appointment_slot($thin_app_id, $doctor_id, $service_id, $address_id, $setting_type, date('Y-m-d'), false, $show_book_more_token, $appointment_role,$expire_slot);
                    if (!empty($slot_array)) {
                        $response['data']['slot_list'] = $slot_array;
                    }


                    /* get blocked slot */
                    $response['data']['blocked_slot'] = '';
                    $connection = ConnectionUtil::getConnection();
                    $block_slots = Custom::get_doctor_blocked_slot($connection, $thin_app_id, $address_id, $doctor_id, date('Y-m-d'), $service_id);
                    if (!empty($block_slots) && !array_key_exists('ALL_SLOT', $block_slots)) {
                        $tmp_slots = array_column($slot_array, 'slot');
                        $block_slots = array_intersect($tmp_slots, $block_slots);
                        $response['data']['blocked_slot'] = !empty($block_slots) ? implode(',', $block_slots) : '';
                    }


                    $response['status'] = 1;
                    $response['message'] = "Data found";

                } else {
                    $response['status'] = 0;
                    $response['message'] = "Doctor profile not found";
                }

            }
            if ($return === true) {
                return json_encode($response);
            } else {
                Custom::sendResponse($response);
            }

        }
        exit;
    }

    public static function get_appointment_request_data($data = null, $return = false)
    {

        if (empty($data)) {
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);
        }

        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $role_id = isset($data['role_id']) ? $data['role_id'] : "";
            $appointment_user_role = isset($data['appointment_user_role']) ? $data['appointment_user_role'] : "";
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : "";
            $date = isset($data['date']) ? date('Y-m-d', strtotime($data['date'])) : date('Y-m-d');
            $service_id = isset($data['service_id']) ? $data['service_id'] : 0;
            $address_id = isset($data['address_id']) ? $data['address_id'] : 0;


            $background = array();

            if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user';
            } else if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else if (empty($role_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid role';
            } else {


                $send_blocked_slot = true;
                $response['data']['service_list'] = $response['data']['address_list'] = array();
                $response['data']['blocked_slot'] = "";
                $doctor_data = Custom::get_doctor_by_id($doctor_id, $thin_app_id);
                if (!empty($doctor_data)) {

                    $setting_type = $doctor_data['appointment_setting_type'];
                    if ($setting_type == 'DAY') {
                        $param = date('N', strtotime($date));
                    } else {
                        $param = $date;
                    }
                    if (empty($service_id) && empty($address_id)) {
                        $service_list = Custom::get_service_by_date($thin_app_id, $doctor_id, $setting_type, $param);
                        $service_amount = "";
                        if (!empty($service_list)) {
                            $response['data']['service_list'] = $service_list;
                            $service_id = $service_list[0]['service_id'];
                            $service_amount = $service_list[0]['service_amount'];
                            $address_list = Custom::get_address_by_date($thin_app_id, $doctor_id, $service_id, $setting_type, $param);
                            if (!empty($address_list)) {
                                $address_id = $address_list[0]['address_id'];
                                $response['data']['address_list'] = $address_list;
                            }
                        }


                    } else if (empty($address_id)) {
                        $address_list = Custom::get_address_by_date($thin_app_id, $doctor_id, $service_id, $setting_type, $param);
                        if (!empty($address_list)) {
                            $address_id = $address_list[0]['address_id'];
                            $response['data']['address_list'] = $address_list;
                        }

                    }

                    $response['data']['slot_list'] = array();
                    $appointment_user_role = !empty($appointment_user_role) ? $appointment_user_role : Custom::get_appointment_role($mobile, $thin_app_id, $role_id);
                    $show_book_more_token = ($appointment_user_role != 'USER') ? true : false;
                    $thin_app_data = Custom::getThinAppData($thin_app_id);
                    $expired_slots = ($thin_app_data['show_expire_token_slot'] == "YES" && in_array($appointment_user_role, array('ADMIN', 'RECEPTIONIST', 'DOCTOR', 'STAFF'))) ? true : false;
                    $slot_array = Custom::new_get_appointment_slot($thin_app_id, $doctor_id, $service_id, $address_id, $setting_type, $date, false, $show_book_more_token, $appointment_user_role,$expired_slots);
                    if ($send_blocked_slot === true) {
                        /* get blocked slot */
                        $connection = ConnectionUtil::getConnection();
                        $block_slots = Custom::get_doctor_blocked_slot($connection, $thin_app_id, $address_id, $doctor_id, $date, $service_id);
                        if (!array_key_exists('ALL_SLOT', $block_slots)) {
                            $tmp_slots = array();
                            if (!empty($block_slots)) {
                                $tmp_slots = array_column($slot_array, 'slot');
                            }
                            $block_slots = array_intersect($tmp_slots, $block_slots);
                        } else {
                            $block_slots = array_column($slot_array, 'slot');

                        }

                        $response['data']['blocked_slot'] = !empty($block_slots) ? implode(',', $block_slots) : '';
                    }
                    $response['data']['slot_list'] = !empty($slot_array) ? $slot_array : array();

                    $response['status'] = 1;
                    $response['message'] = "Data found";

                } else {
                    $response['status'] = 0;
                    $response['message'] = "Doctor profile not found";
                }


            }
            if ($return === true) {
                return json_encode($response);
            } else {
                Custom::sendResponse($response);
            }

        }
        exit;
    }


    public static function new_get_doctor_appointment_list()
    {


        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $role_id = isset($data['role_id']) ? $data['role_id'] : "";
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : "";
            $address_id = isset($data['address_id']) ? $data['address_id'] : "";
            $service_id = isset($data['service_id']) ? $data['service_id'] : "";
            $booking_date = !empty($data['booking_date']) ? date("Y-m-d", strtotime($data['booking_date'])) : date('Y-m-d');
            $appointment_status = isset($data['appointment_status']) ? strtoupper(trim($data['appointment_status'])) : "TOTAL";
            $application_type = isset($data['application_type']) ? $data['application_type'] : "";
            $first_load = isset($data['first_load']) ? $data['first_load'] : 'YES';
            $appointment_user_role = isset($data['appointment_user_role']) ? $data['appointment_user_role'] : '';
            $background = array();


            if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user';
            } else if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else if (empty($role_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid role';
            } else if (empty($doctor_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid doctor';
            } else {

                $connection = ConnectionUtil::getConnection();

                $response['data']['appointment_list'] = array();
                $response['data']['service_list'] = array();
                $response['data']['address_list'] = array();
                $doctor_data = Custom::get_doctor_by_id($doctor_id, $thin_app_id);
                if (!empty($doctor_data) && in_array($doctor_data['visible_for'], array('BOTH', 'APP'))) {


                    /* get day list */


                    $setting_type = $doctor_data['appointment_setting_type'];
                    if ($setting_type == 'DAY') {
                        $param = date('N', strtotime($booking_date));
                    } else {
                        $param = $booking_date;
                    }


                    /* get service and address list */
                    $service_amount = "";
                    if (empty($service_id) && empty($address_id)) {
                        $service_list = Custom::get_service_by_date($thin_app_id, $doctor_id, $setting_type, $param);
                        if (!empty($service_list)) {
                            $response['data']['service_list'] = $service_list;
                            $service_id = $service_list[0]['service_id'];
                            $service_amount = $service_list[0]['service_amount'];
                            $address_list = Custom::get_address_by_date($thin_app_id, $doctor_id, $service_id, $setting_type, $param);
                            if (!empty($address_list)) {
                                $address_id = $address_list[0]['address_id'];
                                $response['data']['address_list'] = $address_list;
                            }
                        }
                    }

                    /* get  address list */
                    if (empty($address_id)) {
                        $address_list = Custom::get_address_by_date($thin_app_id, $doctor_id, $service_id, $setting_type, $param);
                        if (!empty($address_list)) {
                            $address_id = $address_list[0]['address_id'];
                            $response['data']['address_list'] = $address_list;
                        }
                    }

                    /* get doctor profile data */
                    if ($first_load == 'YES') {
                        $profile['doctor_name'] = $doctor_data['name'];
                        $profile['education'] = $doctor_data['sub_title'];
                        $profile['profile_photo'] = $doctor_data['profile_photo'];
                        $profile['experience'] = Custom::create_experience_string($doctor_data['experience'], 'SMALL');
                        $profile['fees'] = $service_amount;
                        $profile['show_fees'] = $doctor_data['show_fees'];
                        $response['data']['profile'] = $profile;


                        $begin = new DateTime(date('Y-m-d', strtotime("-2 days")));
                        $end = new DateTime(date('Y-m-d', strtotime("+1 Month")));

                        $block_date = Custom::get_doctor_blocked_date($thin_app_id, $address_id, $doctor_id, 100, $begin, 'YES');
                        $daterange = new DatePeriod($begin, new DateInterval('P1D'), $end);
                        foreach ($daterange as $key => $date) {
                            $new_date = $date->format("d-D-M-Y");
                            $compare_date = $date->format("Y-m-d");

                            $date_slot[$key]['date'] = implode("##", explode("-", $new_date)) . "##" . $date->format("Y-m-d");
                            $date_slot[$key]['is_selected'] = ($compare_date == $booking_date) ? "YES" : "NO";
                            $date_slot[$key]['is_date_blocked'] = in_array($date->format("Y-m-d"), $block_date) ? "YES" : "NO";
                        }
                        $response['data']['day_list'] = $date_slot;
                    }


                    /* get appointment list */

                    $appointment_list = Custom::get_doctor_appointment_list_new($connection, $thin_app_id, $doctor_id, $service_id, $address_id, $booking_date, $appointment_status,0,$appointment_user_role);
                    $response['data']['filter_list'] = Custom::getDoctorAppointmentCountByAddress($connection,$thin_app_id, $doctor_id,$address_id,$booking_date,$service_id,$application_type);

                    if (!empty($appointment_list)) {
                        $response['data']['appointment_list'] = $appointment_list;
                    }

                    if ($first_load == 'YES') {
                        $response['status'] = 1;
                        $response['message'] = "Data found";

                    } else {
                        $response['status'] = 1;
                        $response['message'] = "Data found";
                    }


                } else {
                    $response['status'] = 0;
                    $response['message'] = "Doctor profile not found";
                }
            }
            Custom::sendResponse($response);
        }
        exit;
    }

    public static function new_get_doctor_appointment_schedule()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($doctor_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid doctor id';
            } else {
                $connection = ConnectionUtil::getConnection();
                $query = "select das.id, adt.day_name, aa.address, das.appointment_address_id, DATE_FORMAT(das.appointment_date,'%d %M, %Y') as appointment_date, das.appointment_day_time_id, das.setting_type, DATE_FORMAT(das.from_time,'%h:%i %p') as from_time, DATE_FORMAT(das.to_time,'%h:%i %p') as to_time from doctor_appointment_setting as das join appointment_staffs as app_sta on app_sta.id = das.doctor_id and app_sta.appointment_setting_type = das.setting_type left join appointment_addresses as aa on aa.id = das.appointment_address_id left join appointment_day_times as adt on adt.id= das.appointment_day_time_id where das.index_number = 1 and (DATE(das.appointment_date) >= DATE(NOW()) OR das.appointment_day_time_id > 0) and das.doctor_id = $doctor_id order by das.appointment_day_time_id, das.appointment_date,das.id ";
                $data_list = $connection->query($query);
                if ($data_list->num_rows) {
                    $list = mysqli_fetch_all($data_list, MYSQLI_ASSOC);
                    $return = array();
                    $address_tmp = array();
                    foreach ($list as $key => $value) {
                        $label = ($value['setting_type'] == 'DATE') ? $value['appointment_date'] : $value['day_name'];
                        $tmp = array('from_time' => $value['from_time'], 'to_time' => $value['to_time']);;
                        if (!array_key_exists($label . $value['appointment_address_id'], $address_tmp)) {

                            $return[$label][$value['appointment_address_id']]['address'] = $value['address'];
                            $return[$label][$value['appointment_address_id']]['time_list'][] = $tmp;
                        } else {
                            $total_time = count($return[$label][$value['appointment_address_id']]['time_list']);
                            $return[$label][$value['appointment_address_id']]['time_list'][$total_time] = $tmp;
                        }

                        $address_tmp[$label . $value['appointment_address_id']] = $value['address'];

                    }
                    $final_array = $tmp = array();

                    foreach ($return as $key => $value) {
                        $tmp['date'] = $key;
                        $tmp['address_list'] = array_values($return[$key]);
                        $final_array[$key] = $tmp;
                    }
                    $response['status'] = 1;
                    $response['message'] = "Schedule found";
                    $response['data']['schedule_list'] = array_values($final_array);
                } else {
                    $response['status'] = 0;
                    $response['message'] = "Schedule not found.";
                }
            }
            Custom::sendResponse($response);
        }
        exit();
    }


    /* new appointment setting module end */


    /*post visit chat module start */

    public static function get_validity_appointment_list()
    {


        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile number';
            } else {
                $connection = ConnectionUtil::getConnection();
                $query = "set @difference =0";
                $data_list = $connection->query($query);
                $query = "select  dpvc.id as chat_visit_id,  @difference:= (DATEDIFF(DATE_ADD(acss.appointment_datetime,INTERVAL app_ser.service_validity_time-1 DAY),DATE(NOW()))+1) as difference, app_ser.service_validity_time, u.firebase_token, app_sta.mobile, if(acss.status = 'CLOSED',acss.status,'RUNNING') AS appointment_status,acss.appointment_staff_id as doctor_id,  IFNULL(ac.id,c.id) as patient_id, app_sta.post_visit_chat_fee as fees, app_sta.profile_photo, acss.id as appointment_id, IFNULL(DATE_FORMAT(acss.appointment_datetime, '%h:%i %p, %d-%M'),'') as date_time, IF(@difference > 1,CONCAT(@difference,' Days'),if(@difference < 0 ,'', CONCAT(@difference,' Day'))) as validity, IFNULL(ac.first_name,c.child_name) as patient_name, app_sta.name as doctor_name, acss.queue_number as token_number, if(dpvc.chat_status IS NOT NULL ,dpvc.chat_status,'INACTIVE') AS chat_status from appointment_customer_staff_services as acss left join doctor_post_visit_chat as dpvc on acss.id = dpvc.appointment_customer_staff_service_id  left join appointment_customers as ac on ac.id = acss.appointment_customer_id left join childrens as c on c.id = acss.children_id left join appointment_staffs as app_sta on app_sta.id = acss.appointment_staff_id left join users as u on u.mobile = app_sta.mobile and u.thinapp_id = app_sta.thinapp_id left join appointment_services as app_ser on app_ser.id = acss.appointment_service_id where acss.thinapp_id = $thin_app_id and acss.status IN('NEW','CONFIRM','RESCHEDULE','CLOSED') and ( ac.mobile = '$mobile' OR c.mobile = '$mobile' ) and acss.booking_validity_attempt = 1  group by acss.appointment_parent_id having  (difference <= app_ser.service_validity_time and difference > 0 and chat_status != 'CLOSED') OR (chat_status = 'ACTIVE') order by acss.id, dpvc.id desc ";
                $data_list = $connection->query($query);
                if ($data_list->num_rows) {
                    $list = mysqli_fetch_all($data_list, MYSQLI_ASSOC);
                    $response['status'] = 1;
                    $response['message'] = "Appointment found";
                    $response['data']['appointment_list'] = $list;
                } else {
                    $response['status'] = 0;
                    $response['message'] = "Appointment not found.";
                }
            }
            Custom::sendResponse($response);
        }
        exit();
    }

    public static function start_post_visit_chat()
    {


        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $appointment_id = isset($data['appointment_id']) ? $data['appointment_id'] : "";
            $transaction_id = isset($data['transaction_id']) ? $data['transaction_id'] : "";
            $fees = isset($data['fees']) ? $data['fees'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else if (empty($appointment_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid appointment id';
            } else if (empty($transaction_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid transaction';
            } else if (empty($fees)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid fees';
            } else {

                $connection = ConnectionUtil::getConnection();
                $doctor_data = Custom::get_doctor_data_via_appointment_id($appointment_id);
                if (!empty($doctor_data)) {
                    $created = Custom::created();
                    $doctor_id = $doctor_data['id'];
                    $sql = "INSERT INTO doctor_post_visit_chat (transaction_id, thinapp_id, doctor_id, user_id, amount, appointment_customer_staff_service_id, start_date_time, created, modified) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)";
                    $stmt = $connection->prepare($sql);
                    $stmt->bind_param('sssssssss', $transaction_id, $thin_app_id, $doctor_id, $user_id, $fees, $appointment_id, $created, $created, $created);
                    if ($stmt->execute()) {
                        $response['status'] = 1;
                        $response['message'] = "Chat start successfully";
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Sorry  chat could not start";
                    }
                } else {
                    $response['status'] = 0;
                    $response['message'] = "Doctor not found";
                }
            }
            Custom::sendResponse($response);
        }
        exit();


    }

    public static function get_post_visit_chat_history()
    {


        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : 0;
            $from_date = isset($data['from_date']) ? $data['from_date'] : "";
            $search = isset($data['search']) ? $data['search'] : "";
            $to_date = isset($data['to_date']) ? $data['to_date'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile number';
            } else {
                $connection = ConnectionUtil::getConnection();
                $condition = $having = "";
                $doctor_fees = 0;
                if (empty($doctor_id)) {
                    $condition = " and dpvc.user_id = $user_id and  dpvc.chat_status = 'CLOSED' ";
                    $date_field = "acss.appointment_datetime";
                    $mobile_condition = " app_sta.mobile ";
                    $user_join = " left join users as u on u.thinapp_id = app_sta.thinapp_id and u.mobile = app_sta.mobile ";

                } else {

                    if (!empty($from_date) && !empty($to_date) && empty($search)) {

                        $from_date = DateTime::createFromFormat('d-m-Y', $from_date);
                        $from_date = $from_date->format('Y-m-d');
                        $to_date = DateTime::createFromFormat('d-m-Y', $to_date);
                        $to_date = $to_date->format('Y-m-d');
                        $condition .= " and DATE(dpvc.created) >= '$from_date' and DATE(dpvc.created) <= '$to_date' ";

                    } else if (!empty($search)) {
                        $having = " having ( patient_name like '%$search%' OR mobile like '%$search%' )";
                    } else {
                        $current = date('Y-m-d');
                        $condition .= " and DATE(dpvc.created) = '$current'";
                    }


                    $mobile_condition = " app_sta.mobile ";
                    $condition .= " and dpvc.doctor_id = $doctor_id ";
                    $date_field = "dpvc.created";
                    $user_join = " left join users as u on (u.thinapp_id = ac.thinapp_id and u.mobile = ac.mobile) OR  (u.thinapp_id = c.thinapp_id and u.mobile = c.mobile) ";

                }

                $query = "select u.firebase_token, dpvc.id as chat_visit_id,  $mobile_condition as mobile, app_sta.id as doctor_id,  IFNULL(ac.id,c.id) as patient_id,  app_sta.post_visit_chat_fee as fees, app_sta.profile_photo, acss.id as appointment_id, DATE_FORMAT($date_field, '%h:%i %p, %d-%M') as date_time, if(app_ser.service_validity_time > 1,CONCAT(app_ser.service_validity_time,' Days'),CONCAT(app_ser.service_validity_time,' Day')) as validity, IFNULL(ac.first_name,c.child_name) as patient_name, app_sta.name as doctor_name, acss.queue_number as token_number, dpvc.chat_status from doctor_post_visit_chat as dpvc  left join appointment_customer_staff_services as acss on acss.id = dpvc.appointment_customer_staff_service_id left join appointment_customers as ac on ac.id = acss.appointment_customer_id  left join childrens as c on c.id = acss.children_id  left join appointment_staffs as app_sta on app_sta.id = acss.appointment_staff_id $user_join left join appointment_services as app_ser on app_ser.id = acss.appointment_service_id where  acss.thinapp_id = $thin_app_id $condition  group by dpvc.id $having order by dpvc.modified desc";


                $data_list = $connection->query($query);
                if ($data_list->num_rows) {
                    $list = mysqli_fetch_all($data_list, MYSQLI_ASSOC);
                    $doctor_fees = $list[0]['fees'];
                    $response['status'] = 1;
                    $response['message'] = "History found";
                    $response['data']['appointment_list'] = $list;
                } else {
                    $response['status'] = 0;
                    $response['message'] = "History not found.";
                }
                if (empty($doctor_fees) && !empty($doctor_id)) {
                    $doctor_data = Custom::get_doctor_by_id($doctor_id, $thin_app_id);
                    if ($doctor_data) {
                        $doctor_fees = $doctor_data['post_visit_chat_fee'];
                    }

                }
                $response['fees'] = $doctor_fees;

            }
            Custom::sendResponse($response);
        }
        exit();
    }

    public static function update_post_visit_fees()
    {


        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : "";
            $fees = isset($data['fees']) ? $data['fees'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else if (empty($doctor_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid doctor id';
            } else if (empty($fees)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter fees';
            } else {

                $connection = ConnectionUtil::getConnection();
                $doctor_data = Custom::get_doctor_by_id($doctor_id, $thin_app_id);
                if (!empty($doctor_data)) {
                    $created = Custom::created();
                    $sql = "update appointment_staffs set post_visit_chat_fee = ?, modified =? where id = ?";
                    $stmt = $connection->prepare($sql);
                    $stmt->bind_param('sss', $fees, $created, $doctor_id);
                    if ($stmt->execute()) {
                        $response['status'] = 1;
                        $response['message'] = "Fees update successfully";
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Sorry  fees could not update";
                    }
                } else {
                    $response['status'] = 0;
                    $response['message'] = "Doctor not found";
                }
            }
            Custom::sendResponse($response);
        }
        exit();


    }

    public static function close_post_visit_chat()
    {


        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $chat_visit_id = isset($data['chat_visit_id']) ? $data['chat_visit_id'] : 0;

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else if (empty($chat_visit_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid chat id';
            } else {

                $connection = ConnectionUtil::getConnection();
                $created = Custom::created();
                $status = 'CLOSED';
                $sql = "update doctor_post_visit_chat set chat_status = ?, closed_date_time =?, closed_by =?, modified =? where id = ?";
                $stmt = $connection->prepare($sql);
                $stmt->bind_param('sssss', $status, $created, $user_id, $created, $chat_visit_id);
                if ($stmt->execute()) {
                    $response['status'] = 1;
                    $response['message'] = "Chat closed successfully";
                } else {
                    $response['status'] = 0;
                    $response['message'] = "Sorry  chat could not closed";
                }
            }
            Custom::sendResponse($response);
        }
        exit();


    }

    /*post visit chat module end */

    public static function new_get_my_folder_list($data = null)
    {
        $return = true;
        if (empty($data)) {
            $return = false;
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);
        	
        }
    	
    		
    
        $response = array();

        $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
        $app_key = isset($data['app_key']) ? $data['app_key'] : "";
        $user_id = isset($data['user_id']) ? $data['user_id'] : "";
        $role_id = isset($data['role_id']) ? $data['role_id'] : "";
        $mobile = isset($data['mobile']) ? $data['mobile'] : "";
        $search = isset($data['search']) ? trim($data['search']) : "";
        $offset = isset($data['offset']) ? $data['offset'] : "";
        $main_app_category = isset($data['main_app_category']) ? $data['main_app_category'] : "";
        $user_role = isset($data['user_role']) ? $data['user_role'] : "";
        $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : 0;
        $tag_id = isset($data['tag_id']) ? $data['tag_id'] : '0';
        $selected_doctor_id = isset($data['selected_doctor_id']) ? $data['selected_doctor_id'] : 0;
		
    	

        if (empty($thin_app_id)) {
            $response['status'] = 0;
            $response['message'] = 'Invalid thinapp id';
        } else if (empty($app_key)) {
            $response['status'] = 0;
            $response['message'] = 'Invalid app key';
        } else if (empty($mobile)) {
            $response['status'] = 0;
            $response['message'] = 'Invalid mobile';
        } else if (empty($user_id)) {
            $response['status'] = 0;
            $response['message'] = 'Invalid user id';
        } else {


            $limit = 20;
            $tmp_user_id = $user_id;
            if (!empty($tag_id)) {
                $join = " join ";
                $tag_id = explode(',', $tag_id);
                $tag_id = '"' . implode('","', $tag_id) . '"';

            } else {
                $join = " left join ";
                $tag_id = '0';
            }
        	
        	if($main_app_category=="DOCTOR"){
                $user_role = Custom::get_appointment_role($mobile, $thin_app_id, $role_id);
            }
        
            $offset = $offset * $limit;
            $limit = "limit $offset, $limit";
            if (!empty($search)) {
                $search = " having ( patient_name like '%$search%' OR patient_mobile like '%$search%' OR folder_name like '%$search%' OR uhid = '$search' )";
                $limit = "";
            }

            $condition = " df.user_id = $tmp_user_id OR ds.share_to_user_id = $user_id  OR ac.mobile = '$mobile' OR c.mobile = '$mobile' ";
            $filter_doctor_id = $doctor_id;
            if ($selected_doctor_id > 0 || ($role_id == 1 && in_array($user_role, array("DOCTOR", "STAFF")) && !empty($doctor_id))) {
                $selected_doctor_id = !empty($selected_doctor_id) ? $selected_doctor_id : $doctor_id;
                $filter_doctor_id = $selected_doctor_id;
            }
            if (in_array($user_role, array('ADMIN', 'STAFF', 'DOCTOR'))) {
                $condition .= " OR acss.appointment_staff_id = $filter_doctor_id ";
            }

            $total_file_count = " df.total_file_count ";
            $receptionist_permission = Custom::check_user_permission($thin_app_id, 'RECEPTIONIST_CAN_MANAGE_PATIENT_MEDICAL_RECORDS');
            if (($user_role == "RECEPTIONIST" && $receptionist_permission == "YES")) {
                $admin_data = Custom::get_thinapp_admin_data($thin_app_id);
                if (!empty($admin_data)) {
                    $tmp_user_id = $admin_data['id'];
                    $condition = " df.user_id = $tmp_user_id OR ds.share_to_user_id = $user_id  OR ac.mobile = '$mobile' OR c.mobile = '$mobile' ";
                }

            } else if ($role_id == 1 && ($user_role == "DOCTOR" || $user_role == "STAFF")) {

                $condition = "  df.default_prescription_folder = 'YES' OR acss.appointment_staff_id = $filter_doctor_id OR  df.user_id = $user_id OR ds.share_with_mobile = '$mobile' OR ds.share_to_user_id = $user_id";
                if (!empty($doctor_id)) {
                        $total_file_count = " (select count(d_file.id) from drive_files as d_file where d_file.drive_folder_id = df.id and  ( d_file.doctor_id =$doctor_id OR d_file.share_with_doctor_id = $doctor_id  ) and d_file.status = 'ACTIVE') AS total_file_count ";
               
                }

            } else if ($user_role == "USER") {
                $auto_share = Custom::check_user_permission($thin_app_id, 'AUTOMATIC_FOLDER_SHARE', true);
                if ($auto_share == "NO" || $auto_share === false) {
                    $condition = " df.user_id = $user_id OR ds.share_with_mobile = '$mobile' ";
                }

                $category_ids[] = "10";
                $category_ids[] = "7";
                $show_ipd = Custom::check_user_permission($thin_app_id, 'SHOW_IPD_CATEGORY_TO_PATIENT');
                if ($show_ipd == "NO" || $show_ipd === false) {
                    $category_ids[] = "8";
                }
                if (!empty($category_ids)) {
                    $category_ids = implode(',', $category_ids);
                    $total_file_count = " (select count(d_file.id) from drive_files as d_file where d_file.drive_folder_id = df.id and  d_file.file_category_master_id NOT IN($category_ids) and d_file.status = 'ACTIVE') AS total_file_count ";
                }
            }

             $doctor_condition = "";
            if(!empty($selected_doctor_id)){
                $doctor_condition = "OR (acss.appointment_staff_id = $selected_doctor_id AND acss.thinapp_id = $thin_app_id)";
            }
            $drive_file_join = " left join appointment_customer_staff_services as acss on acss.drive_folder_id = df.id AND   ( ( acss.id = (select i_acss.id from appointment_customer_staff_services as i_acss where i_acss.drive_folder_id = df.id  limit 1 )) $doctor_condition ) ";




            if ($selected_doctor_id > 0) {

                $doctor_data = Custom::get_doctor_by_id($selected_doctor_id, $thin_app_id);
                $doctor_user_id = $doctor_data['user_id'];
                $doctor_mobile = $doctor_data['mobile'];
                $created_by_condition = "";
                if (!empty($doctor_data['user_id'])) {
                    $create_by = $doctor_data['user_id'];
                    $created_by_condition = " ac.customer_created_by = $create_by OR c.child_add_by_id =$create_by OR ";
                }
                  $condition = " $created_by_condition d_file.doctor_id = $selected_doctor_id OR d_file.share_with_doctor_id = $selected_doctor_id OR df.default_prescription_folder = 'YES' OR acss.appointment_staff_id = $selected_doctor_id OR df.user_id = $doctor_user_id  OR ds.share_with_mobile = '$doctor_mobile' ";
              
                $drive_file_join .= " left join drive_files as d_file on d_file.drive_folder_id = df.id ";


            }

            $connection = ConnectionUtil::getConnection();
            $addCustomFile = false;
            $chkThinapp = "SELECT `show_custom_folder` FROM `thinapps` WHERE `id` = '" . $thin_app_id . "' AND `show_custom_folder` = 'Y' LIMIT 1";
            $chkThinappSql = $connection->query($chkThinapp);
            if ($chkThinappSql->num_rows) {
                $addCustomFile = true;
            }

			$group_by = ($thin_app_id==128)?" patient_mobile ":" df.id ";
            $query = "select df.id as folder_id, acss.id as appointment_id, ds.id as drive_share_id,  IF(c.id IS NOT NULL,'YES','NO') as is_child, df.allow_add_file, 'NO' as is_instruction_bucket,  IF(df.user_id = $user_id,'YES','NO') as is_owner, IF(df.user_id != $user_id and ds.id IS NOT NULL,'YES','NO') as share_folder,  IFNULL(IFNULL(ac.first_name,c.child_name),df.folder_name) as folder_name, IFNULL(IFNULL(ac.first_name,c.child_name),u.username) as patient_name,IFNULL(IFNULL(ac.mobile,c.mobile),u.mobile) as patient_mobile, df.share_count, $total_file_count, IFNULL(ac.uhid, c.uhid) as uhid, DATE_FORMAT(df.created,'%d, %M %y %h:%i %p') as created, df.description from drive_folders as df  left join appointment_customers as ac on ac.id = df.appointment_customer_id left join childrens as c on c.id = df.children_id $drive_file_join left join users as u on u.id = df.user_id  $join  patient_tags as pt on ( ac.id = pt.appointment_customer_id OR pt.children_id = c.id ) and pt.patient_illness_tag_id IN($tag_id) left join drive_shares as ds  on df.id = ds.drive_folder_id and ds.thinapp_id = df.thinapp_id AND ds.shared_object='FOLDER'  WHERE df.thinapp_id = $thin_app_id and ( $condition ) and df.is_instruction_bucket = 'NO'  group by $group_by  $search order by  df.modified desc,acss.created desc $limit";
            if($user_id==87689){
               // echo $query;die;
            }
        	$data_list = $connection->query($query);
            if ($data_list->num_rows) {
                $list = mysqli_fetch_all($data_list, MYSQLI_ASSOC);
                $final = array();
                foreach ($list as $key => $val) {

                    $final[$key] = $val;
                    if ($addCustomFile == true) {
                        $patMobile = $final[$key]['patient_mobile'];
                        $curtFileCount = "SELECT `current_file_count` FROM `custome_folder_file_count` WHERE `mobile` = '" . $patMobile . "' AND `thinapp_id` = '" . $thin_app_id . "' LIMIT 1";
                        $curtFileCountSql = $connection->query($curtFileCount);
                        if ($curtFileCountSql->num_rows) {
                            $curtFileCountData = mysqli_fetch_assoc($curtFileCountSql);
                            $curtFileCount = $curtFileCountData['current_file_count'];
                            $final[$key]['total_file_count'] = ($final[$key]['total_file_count'] + $curtFileCount);
                        }
                    }
                    $final[$key]['folder_path'] = FOLDER_PATH . Custom::encodeVariable($val['folder_id']);
                    $final[$key]['folder_static_path'] = FOLDER_STATIC_PATH . Custom::encodeVariable($val['folder_id']);
                }
                $response['status'] = 1;
                $response['message'] = "Medical folders available";
                $response['data']['folder_list'] = $final;
            } else {
                $response['status'] = 0;
                $response['message'] = "Medical folders not available.";
            }

        }
        if ($return === true) {
            return json_encode($response);
        } else {
            Custom::sendResponse($response);
        }
        exit();
    }


    /* ivr module start here */

    public static function ivr_response($get_request_parma = null)
    {

        $book_type = "IVR";
        $direct_pass_request = false;
        if (empty($get_request_parma) && $_SERVER['REQUEST_METHOD'] == 'POST') {
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);
            $from = isset($data['from']) ? Custom::create_mobile_number($data['from']) : "";
            $to = isset($data['to']) ? Custom::create_mobile_number() : "";
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : 0;
            $input = isset($data['input']) ? $data['input'] : "";
            $sms_arr = isset($data['sms_arr']) ? $data['sms_arr'] : "";
            $call_sid = 0;
            $time_of_day = "";
            $booking_date = date('Y-m-d');
            $valid_input_string = false;
            if (!empty($input)) {
                $tmp = explode("#", $input);
                if (count($tmp) == 5) {
                    $flag = strtoupper(trim($tmp[0]));
                    $doctor_code = trim($tmp[1]);
                    $customer_name = @trim($tmp[2]);
                    $date = @trim($tmp[3]);
                    $time_of_day = @trim($tmp[4]);
                    if ($flag == "BOOK" && is_numeric($doctor_code) && !empty($customer_name) && is_numeric($date) && $date <= 31 && !empty($time_of_day)) {
                        $booking_date = Custom::nextOccurrence($date);
                        $valid_input_string = true;
                    }
                } else if (count($tmp) == 4) {

                    $flag = strtoupper(trim($tmp[0]));
                    $customer_name = @trim($tmp[1]);
                    $date = @trim($tmp[2]);
                    $time_of_day = @trim($tmp[3]);
                    if ($flag == "BOOK" && !empty($customer_name) && is_numeric($date) && $date <= 31 && !empty($time_of_day)) {
                        $booking_date = Custom::nextOccurrence($date);
                        $doctor_code = Custom::get_app_default_doctor_code($thin_app_id);
                        $valid_input_string = true;
                    }
                }
            }
            $book_type = "SMS";
            $direct_pass_request = true;

        } else {

            $custom_time = false;


            $_GET = $get_request_parma;
            $call_sid = isset($_GET['CallSid']) ? $_GET['CallSid'] : 0;
            $last_data = Custom::get_ivr_call_sid_cache_data($call_sid);
        
        	
            if (!empty($last_data)) {
                if (isset($last_data['custom_data'])) {
                    $_GET = $last_data;
                }
            }


            $book_type = "IVR";
            $booking_date = date('Y-m-d');
            if (isset($_GET['custom_data']) && !empty($_GET['appointment_date'])) {
                $booking_date = $_GET['appointment_date'];
            }
            $to = isset($_GET['To']) ? $_GET['To'] : "";

            if (isset($_GET['custom_data']) && !empty($_GET['doctor_code'])) {
                $doctor_code = $_GET['doctor_code'];
            } else {
                $doctor_code = Custom::get_doctor_ivr_code($to);
            }

            $valid_input_string = true;

            $from = isset($_GET['From']) ? Custom::create_mobile_number($_GET['From']) : "";

            $digits = isset($_GET['digits']) ? trim(str_replace('"', '', $_GET['digits'])) : "";
            $time_flag = isset($_GET['time_flag']) ? $_GET['time_flag'] : "";

            if (isset($_GET['custom_data']) && $_GET['custom_data'] == "YES") {
                $direct_pass_request = true;
                $time_of_day = $time_flag;
                $custom_time = true;
                if (isset($_GET['custom_data']) && !empty($_GET['doctor_code'])) {
                    $doctor_code = $_GET['doctor_code'];
                } else {
                    $doctor_code = Custom::get_doctor_ivr_code($to);
                }

            } else if (!empty($digits) && !empty($doctor_code)) {
                $time_flag = str_replace('"', '', $digits);
                $direct_pass_request = true;
                if ($time_flag == "1") {
                    $time_of_day = "MORNING";
                } else if ($time_flag == "2") {
                    $time_of_day = "AFTERNOON";
                } else if ($time_flag == "3") {
                    $time_of_day = "EVENING";
                }
            } else if (!empty($time_flag)) {
                $doctor_code = $digits;
                $direct_pass_request = true;
                if ($time_flag == "1") {
                    $time_of_day = "MORNING";
                } else if ($time_flag == "2") {
                    $time_of_day = "AFTERNOON";
                } else if ($time_flag == "3") {
                    $time_of_day = "EVENING";
                }
            } else {
                $file_name = "input_" . $call_sid;
                if (!$doctor_code = json_decode(WebservicesFunction::readJson($file_name, "ivr"), true)) {
                    $direct_pass_request = false;
                    WebservicesFunction::createJson($file_name, json_encode($digits), "CREATE", "ivr");
                } else {
                    $direct_pass_request = true;
                    if ($digits == "1") {
                        $time_of_day = "MORNING";
                    } else if ($digits == "2") {
                        $time_of_day = "AFTERNOON";
                    } else if ($digits == "3") {
                        $time_of_day = "EVENING";
                    }
                }
            }

        }


        if ($direct_pass_request === true) {
            $connection = ConnectionUtil::getConnection();
            $appointment_id = $token_number = $doctor_ivr_id = $thin_app_id = 0;
        	
            if (empty($from)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid from number ';
            } else if (empty($to)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid to number';
            } else {

                $doctor_code = str_replace('"', '', $doctor_code);
                $sms_response = "";
                $notification_data = false;


                if (!empty($doctor_code) && $valid_input_string === true) {


                    $query = "SELECT * FROM doctors_ivr WHERE doctor_code =$doctor_code limit 1";

                    $service_message_list = $connection->query($query);
                    if ($service_message_list->num_rows) {

                        $doctor_ivr = mysqli_fetch_assoc($service_message_list);
                    	if($doctor_ivr['doctor_status']=='Active'){
                        $list = array();
                        $thin_app_id = $doctor_ivr["thinapp_id"];
                        $doctor_id = $doctor_ivr["doctor_id"];
                        $doctor_mobile = $doctor_ivr["mobile_no"];
                        $created = Custom::created();

                        /*if (($doctor_mobile == $to && $book_type == "SMS") || $book_type == "IVR") {*/
                        if ($book_type == "SMS" || $book_type == "IVR") {
                            if (Custom::check_app_enable_permission($thin_app_id, 'NEW_QUICK_APPOINTMENT')) {
                                $doctor_data = Custom::ive_get_doctor_custom_data($thin_app_id, $doctor_id, true);
                            } else {
                                $doctor_data = Custom::ive_get_doctor_custom_data($thin_app_id, $doctor_id);
                            }

                            if (!empty($doctor_data)) {
                                $doctor_ivr_id = $doctor_ivr['id'];
                                $available_slot = false;
                                $address_id = $doctor_data['address_id'];
                                $service_id = 0;
								
                            	if($thin_app_id==588 && $time_of_day == "EVENING"){
                                        //$address_id = '900';
                                 }

                                $available_slot = Custom::get_doctor_next_available_slot($thin_app_id, $doctor_id, $address_id, $booking_date, $time_of_day, $custom_time, "USER");
                                if ($available_slot !== false) {


                                    if (empty($customer_name)) {
                                        $customer_id = Custom::get_customer_first_id_by_mobile($thin_app_id, $from);
                                    } else {
                                        $customer_id = Custom::search_customer_name($thin_app_id, $from, $customer_name);
                                        $customer_id = !empty($customer_id) ? $customer_id['id'] : 0;
                                    }


                                    if (empty($customer_id)) {
                                        $customer_mobile = $from;
                                        if (empty($customer_name)) {
                                            $customer_name = $from;
                                        }
                                    } else {
                                        $customer_mobile = $customer_name = "";
                                    }

                                    $post = array();
                                    $post['app_key'] = APP_KEY;
                                    $post['thin_app_id'] = $thin_app_id;
                                    $post['user_id'] = $doctor_data['user_id'];
                                    $post['role_id'] = $doctor_data['role_id'];
                                    $post['mobile'] = $doctor_data['mobile'];
                                    $post['booking_date'] = $booking_date;
                                    $post['slot_time'] = $available_slot;
                                    $post['doctor_id'] = $doctor_id;
                                    $post['user_type'] = "CUSTOMER";
                                    $post['children_id'] = 0;
                                    $post['address_id'] = $address_id;
                                    $post['service_id'] = $service_id;
                                    $post['customer_id'] = $customer_id;
                                    $post['customer_name'] = $customer_name;
                                    $post['customer_mobile'] = $customer_mobile;
                                    $post['gender'] = "MALE";
                                    $post['payment_type'] = "CASH";
                                    $post['transaction_id'] = "";
                                    $post['appointment_user_role'] = "USER";
                                    $chk_result = WebservicesFunction::check_appointment_validity($post, true);
                                    if ($chk_result['status'] == 1) {
                                        $book_type = "IVR";
                                        $result = json_decode(WebservicesFunction::add_new_appointment($post, true, $book_type, $time_of_day), true);
                                    	
                                        if ($result['status'] == 1) {
                                            $notification_data = $result['notification_data'];
                                            $appointment_id = $result['data']['appointment_id'];
                                            $token_number = $result['data']['token_number'];
                                            $response['status'] = 1;
                                            $response["message"] = $result['message'];
                                            if ($book_type == "IVR") {
                                                $response["message"] = "Aapka token number $token_number hai.";
                                            	WebservicesFunction::createJson('call_sid_' . $call_sid, $response["message"], 'CREATE', 'ivr');
                                            
                                            }

                                        } else {
                                            $response["status"] = 1;
                                            $response["message"] = $result['message'];

                                            if ($book_type == "IVR") {
                                                //WebservicesFunction::createJson(date('Ymdhis'), $result['message'], 'CREATE', 'cms');
                                                $response["message"] = "Aapka token book nahi ho paya hai";
                                            }
                                        }
                                    } else {
                                        $response["status"] = 1;
                                        $response["message"] = $chk_result['message'];
                                        if ($book_type == "IVR") {
                                            $response["message"] = "Aapka token pehle se book hai";
                                        }
                                    }
                                } else {
                                    $response["status"] = 1;
                                    $response["message"] = "sabhi token book ho chuke hai";

                                }

                            } else {
                                $response["status"] = 1;
                                $response["message"] = "Doctor abhi available nahi hai";
                            }
                        } else {
                            exit();
                        }
                        }else{
                            $response["status"] = 1;
                            $response["message"] = "Doctor not using this facility now.";
                        }


                    } else {
                        $response["status"] = 1;
                        $response["message"] = "Sorry your have enter invalid doctor code";
                    }

                } else {
                    $response["status"] = 1;
                    if ($valid_input_string === false) {
                        $message = "Please enter correct input to book appointment";
                    } else {

                        $message = "Sorry your have enter invalid doctor code";;
                    }
                    $response["message"] = $message;
                }
            }

        
        	if ($book_type == "IVR") {
                $message = $response['message'];
                WebservicesFunction::createJson('call_sid_' . $call_sid, $message, 'CREATE', 'ivr');
                if (!empty($file_name)) {
                    WebServicesFunction::deleteJson(array($file_name), 'ivr');
                }
            }
        
            unset($response["data"]);
            Custom::sendResponse($response);
            Custom::send_process_to_background();

			
        
            $created = Custom::created();
            $sql = "INSERT INTO ivr_call_log (call_sid, booking_type, doctor_ivr_id, thinapp_id, patient_mobile, doctor_mobile, call_start, token_no,  appointment_id, created, modified) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
            $stmt = $connection->prepare($sql);
            $stmt->bind_param('sssssssssss', $call_sid, $book_type, $doctor_ivr_id, $thin_app_id, $to, $from, $created, $token_number, $appointment_id, $created, $created);
            $stmt->execute();
            

       
            if (!empty($notification_data)) {
                Custom::send_book_appointment_notification($notification_data);
            } else if ($book_type == "SMS" && !empty($thin_app_id)) {
                Custom::send_single_sms($from, $response["message"], $thin_app_id);
            }
        }


        exit();

    }

    /* this method use for custom ivr respoinse string*/
    public static function custom_ivr($get_request_param = null)
    {

        if (!empty($get_request_param)) {
            $_GET = $get_request_param;
        }


        $call_sid = isset($_GET['CallSid']) ? $_GET['CallSid'] : 0;
        $from = isset($_GET['From']) ? Custom::create_mobile_number($_GET['From']) : "";
        $to = isset($_GET['To']) ? $_GET['To'] : "";
        $digits = isset($_GET['digits']) ? trim(str_replace('"', '', $_GET['digits'])) : "";
        $ivr_step_name = isset($_GET['ivr_step_name']) ? $_GET['ivr_step_name'] : "";
        $ivr_step_end = isset($_GET['ivr_step_name']) ? $_GET['ivr_step_end'] : 0;
        $doctor_ivr_data = Custom::get_doctor_ivr_data($to);
        $doctor_id = 0;
        if (!empty($doctor_ivr_data)) {
            $last_data = Custom::get_ivr_call_sid_cache_data($call_sid);
            if (!empty($last_data) && isset($last_data['doctor_id']) && isset($last_data['doctor_code'])) {
                $doctor_id = $last_data['doctor_id'];
            } else {
                foreach ($doctor_ivr_data as $key => $value) {
                    $doctor_id = $key;
                    $data_array['doctor_code'] = $value['doctor_code'];
                    break;
                }
            }
            $ivr_sub_step_name = Custom::get_ivr_sub_step_name($doctor_id, $ivr_step_name, $digits);
            $data_array['CallSid'] = $call_sid;
            $data_array['From'] = $from;
            $data_array['To'] = $to;

            $data_array['custom_data'] = 'YES';
            if ($ivr_step_name == "DASHBOARD_MENU") {
                if (strtoupper($ivr_sub_step_name) == "APPOINTMENT") {
                    $data_array['appointment_date'] = date('Y-m-d');
                    $data_array['time_flag'] = ($ivr_step_end == 1) ? 'CURRENT' : '';
                    Custom::update_iver_call_sid_cache($call_sid, $data_array);
                    if ($ivr_step_end == 1) {
                        WebServicesFunction_2_3::ivr_response($data_array);
                    }

                }
            } else if ($ivr_step_name == "SELECT_DOCTOR") {
                $tmp = array_values($doctor_ivr_data);
                $doctor_ids = array_column($tmp, 'doctor_id');
                $selected_doctor_data = Custom::get_doctor_ivr_data_by_input($digits, $doctor_ids);
                if (!empty($selected_doctor_data)) {
                    $data_array['doctor_id'] = $selected_doctor_data['doctor_id'];
                    $data_array['doctor_code'] = $selected_doctor_data['doctor_code'];
                	if ($ivr_step_end == 1) {
                        $data_array['time_flag'] = 'CURRENT';
                        $data_array['appointment_date'] = date('Y-m-d');
                    }
                    Custom::update_iver_call_sid_cache($call_sid, $data_array);
                    if ($ivr_step_end == 1) {
                        WebServicesFunction_2_3::ivr_response($data_array);
                    }
                }
            } else if ($ivr_step_name == "APPOINTMENT_DAY") {
                $last_data = Custom::get_ivr_call_sid_cache_data($call_sid);
                $data_array['time_flag'] = !empty($last_data['time_flag']) ? $last_data['time_flag'] : 'CURRENT';
                if (strtoupper($ivr_sub_step_name) == "TODAY") {
                    $data_array['appointment_date'] = date('Y-m-d');
                    Custom::update_iver_call_sid_cache($call_sid, $data_array);
                    if ($ivr_step_end == 1) {
                        WebServicesFunction_2_3::ivr_response($data_array);
                    }
                } else if (strtoupper($ivr_sub_step_name) == "TOMORROW") {
                    $data_array['appointment_date'] = date('Y-m-d', strtotime("+1 day"));
                    Custom::update_iver_call_sid_cache($call_sid, $data_array);
                    if ($ivr_step_end == 1) {
                        WebServicesFunction_2_3::ivr_response($data_array);
                    }
                } else if (strtoupper($ivr_sub_step_name) == "DAY AFTER TOMORROW") {
                    $data_array['appointment_date'] = date('Y-m-d', strtotime("+2 day"));
                    Custom::update_iver_call_sid_cache($call_sid, $data_array);
                    if ($ivr_step_end == 1) {
                        WebServicesFunction_2_3::ivr_response($data_array);
                    }
                }

            } else if ($ivr_step_name == "APPOINTMENT_TIME") {
                $last_data = Custom::get_ivr_call_sid_cache_data($call_sid);
                $data_array['appointment_date'] = !empty($last_data['appointment_date']) ? $last_data['appointment_date'] : date('Y-m-d');
            	if($ivr_step_end==1 && empty($last_data)){
                    $data_array['time_flag'] = 'CURRENT';
                    Custom::update_iver_call_sid_cache($call_sid, $data_array);
                    WebServicesFunction_2_3::ivr_response($data_array);
                }
            
            	  
            
                if (strtoupper($ivr_sub_step_name) == "MORNING") {
                    $data_array['time_flag'] = 'MORNING';
                    Custom::update_iver_call_sid_cache($call_sid, $data_array);
                    if ($ivr_step_end == 1) {
                        WebServicesFunction_2_3::ivr_response($data_array);
                    }
                } else if (strtoupper($ivr_sub_step_name) == "AFTERNOON") {
                    $data_array['time_flag'] = 'AFTERNOON';
                    Custom::update_iver_call_sid_cache($call_sid, $data_array);
                    if ($ivr_step_end == 1) {
                        WebServicesFunction_2_3::ivr_response($data_array);
                    }
                } else if (strtoupper($ivr_sub_step_name) == "EVENING") {
                    $data_array['time_flag'] = 'EVENING';
                    Custom::update_iver_call_sid_cache($call_sid, $data_array);
                 
                	if ($ivr_step_end == 1) {
                        WebServicesFunction_2_3::ivr_response($data_array);
                    }
                }

            }
        }
        exit();

    }

    public static function ivr_response_back($get_request_parma = null)
    {

        $book_type = "IVR";
        $direct_pass_request = false;
        if (empty($get_request_parma) && $_SERVER['REQUEST_METHOD'] == 'POST') {
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);

            $to = isset($data['to']) ? Custom::create_mobile_number($data['to']) : "";
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : 0;
            $input = isset($data['input']) ? $data['input'] : "";
            $from = isset($data['from']) ? Custom::create_mobile_number($data['from']) : "";
            $sms_arr = isset($data['sms_arr']) ? json_decode($data['sms_arr'], true) : "";
            $call_sid = 0;
            $time_of_day = "";
            $booking_date = date('Y-m-d');
            $valid_input_string = false;

            if (!empty($input)) {
                $tmp = explode("#", $input);
                if (count($tmp) == 5) {
                    $flag = strtoupper(trim($tmp[0]));
                    $doctor_code = trim($tmp[1]);
                    $customer_name = @trim($tmp[2]);
                    $date = @trim($tmp[3]);
                    $time_of_day = @trim($tmp[4]);
                    if ($flag == "BOOK" && is_numeric($doctor_code) && !empty($customer_name) && is_numeric($date) && $date <= 31 && !empty($time_of_day)) {
                        $booking_date = Custom::nextOccurrence($date);
                        $valid_input_string = true;
                    }
                } else if (count($tmp) == 4) {

                    $flag = strtoupper(trim($tmp[0]));
                    $customer_name = @trim($tmp[1]);
                    $date = @trim($tmp[2]);
                    $time_of_day = @trim($tmp[3]);
                    if ($flag == "BOOK" && !empty($customer_name) && is_numeric($date) && $date <= 31 && !empty($time_of_day)) {
                        $booking_date = Custom::nextOccurrence($date);
                        $doctor_code = Custom::get_app_default_doctor_code($thin_app_id);
                        $valid_input_string = true;
                    }
                }
                $book_type = "SMS";
                $direct_pass_request = true;
            } else if (!empty($sms_arr)) {
                $addedOne = false;
                $notAdded = $bookedString = array();
                foreach ($sms_arr AS $key => $val) {
                    if (!in_array($val['input'], $bookedString)) {
                        $from = Custom::create_mobile_number($val['sender_no']);
                        $tmp = explode("#", $val['input']);
                        if (count($tmp) == 5) {
                            $flag = strtoupper(trim($tmp[0]));
                            $doctor_code = trim($tmp[1]);
                            $customer_name = @trim($tmp[2]);
                            $date = @trim($tmp[3]);
                            $time_of_day = @trim($tmp[4]);
                            if ($flag == "BOOK" && is_numeric($doctor_code) && !empty($customer_name) && is_numeric($date) && $date <= 31 && !empty($time_of_day)) {
                                $booking_date = Custom::nextOccurrence($date);
                                $valid_input_string = true;
                            }
                        } else if (count($tmp) == 4) {

                            $flag = strtoupper(trim($tmp[0]));
                            $customer_name = @trim($tmp[1]);
                            $date = @trim($tmp[2]);
                            $time_of_day = @trim($tmp[3]);
                            if ($flag == "BOOK" && !empty($customer_name) && is_numeric($date) && $date <= 31 && !empty($time_of_day)) {
                                $booking_date = Custom::nextOccurrence($date);
                                $doctor_code = Custom::get_app_default_doctor_code($thin_app_id);
                                $valid_input_string = true;
                            }
                        }
                        $book_type = "SMS";
                        $direct_pass_request = true;
                        if ($direct_pass_request === true) {

                            if (empty($from)) {
                                $response['status'] = 0;
                                $response['message'] = 'Invalid from number ';
                            } else if (empty($to)) {
                                $response['status'] = 0;
                                $response['message'] = 'Invalid to number';
                            } else {

                                if (isset($doctor_code)) {
                                    $doctor_code = str_replace('"', '', $doctor_code);
                                } else {
                                    $doctor_code = "";
                                }

                                $sms_response = "";
                                $notification_data = false;

                                $appointment_id = $token_number = $doctor_ivr_id = $thin_app_id = 0;
                                $connection = ConnectionUtil::getConnection();
                                if (!empty($doctor_code) && $valid_input_string === true) {


                                    $query = "SELECT * FROM doctors_ivr WHERE doctor_code =$doctor_code limit 1";

                                    $service_message_list = $connection->query($query);
                                    if ($service_message_list->num_rows) {

                                        $doctor_ivr = mysqli_fetch_assoc($service_message_list);
                                        $list = array();
                                        $thin_app_id = $doctor_ivr["thinapp_id"];
                                        $doctor_id = $doctor_ivr["doctor_id"];
                                        $doctor_mobile = $doctor_ivr["mobile_no"];
                                        $created = Custom::created();

                                        /*if (($doctor_mobile == $to && $book_type == "SMS") || $book_type == "IVR") {*/
                                        if ($book_type == "SMS" || $book_type == "IVR") {
                                            if (Custom::check_app_enable_permission($thin_app_id, 'NEW_QUICK_APPOINTMENT')) {
                                                $doctor_data = Custom::ive_get_doctor_custom_data($thin_app_id, $doctor_id, true);
                                            } else {
                                                $doctor_data = Custom::ive_get_doctor_custom_data($thin_app_id, $doctor_id);
                                            }

                                            if (!empty($doctor_data)) {
                                                $doctor_ivr_id = $doctor_ivr['id'];
                                                $available_slot = false;
                                                $address_id = $doctor_data['address_id'];
                                                $service_id = 0;
                                                if (Custom::check_app_enable_permission($thin_app_id, 'NEW_QUICK_APPOINTMENT')) {
                                                    $service_id = $doctor_data['service_id'];
                                                    $slot_list = Custom::new_get_appointment_slot($thin_app_id, $doctor_id, $service_id, $address_id, $doctor_data['setting_type'], $booking_date);
                                                } else {
                                                    $slot_list = Custom::load_doctor_slot_by_address($booking_date, $doctor_id, $doctor_data['service_slot_duration'], $thin_app_id, $address_id);
                                                }

                                                if (!empty($slot_list)) {

                                                    if (strtoupper($time_of_day) == "MORNING") {
                                                        $time_from = "00:00:00";
                                                        $time_to = "11:59:00";
                                                    } else if (strtoupper($time_of_day) == "AFTERNOON") {
                                                        $time_from = "12:00:00";
                                                        $time_to = "16:59:00";
                                                    } else if (strtoupper($time_of_day) == "EVENING") {
                                                        $time_from = "17:00:00";
                                                        $time_to = "23:59:00";
                                                    } else {
                                                        $time_from = false;
                                                        $time_to = false;
                                                    }
                                                    if ($time_from !== false && $time_to !== false) {
                                                        $time_from = strtotime($booking_date . ' ' . $time_from);
                                                        $time_to = strtotime($booking_date . ' ' . $time_to);
                                                        foreach ($slot_list as $key => $slot) {
                                                            $slot_format = DateTime::createFromFormat('h:i A', $slot['slot']);
                                                            $slot_format = strtotime($booking_date . ' ' . $slot_format->format("H:i:s"));
                                                            if ($slot['status'] == 'AVAILABLE' && ($slot_format >= $time_from && $slot_format <= $time_to)) {
                                                                $available_slot = $slot['slot'];
                                                                break;
                                                            }
                                                        }
                                                    }

                                                }

                                                if ($available_slot !== false) {


                                                    if (empty($customer_name)) {
                                                        $customer_id = Custom::get_customer_first_id_by_mobile($thin_app_id, $from);
                                                    } else {
                                                        $customer_id = Custom::search_customer_name($thin_app_id, $from, $customer_name);
                                                        $customer_id = !empty($customer_id) ? $customer_id['id'] : 0;
                                                    }


                                                    if (empty($customer_id)) {
                                                        $customer_mobile = $from;
                                                        if (empty($customer_name)) {
                                                            $customer_name = $from;
                                                        }
                                                    } else {
                                                        $customer_mobile = $customer_name = "";
                                                    }

                                                    $post = array();
                                                    $post['app_key'] = APP_KEY;
                                                    $post['thin_app_id'] = $thin_app_id;
                                                    $post['user_id'] = $doctor_data['user_id'];
                                                    $post['role_id'] = $doctor_data['role_id'];
                                                    $post['mobile'] = $doctor_data['mobile'];
                                                    $post['booking_date'] = $booking_date;
                                                    $post['slot_time'] = $available_slot;
                                                    $post['doctor_id'] = $doctor_id;
                                                    $post['user_type'] = "CUSTOMER";
                                                    $post['children_id'] = 0;
                                                    $post['address_id'] = $address_id;
                                                    $post['service_id'] = $service_id;
                                                    $post['customer_id'] = $customer_id;
                                                    $post['customer_name'] = $customer_name;
                                                    $post['customer_mobile'] = $customer_mobile;
                                                    $post['gender'] = "MALE";
                                                    $post['payment_type'] = "CASH";
                                                    $post['transaction_id'] = "";
                                                    $post['appointment_user_role'] = "ADMIN";
                                                    $chk_result = WebservicesFunction::check_appointment_validity($post, true);
                                                    if ($chk_result['status'] == 1) {

                                                        $result = json_decode(WebservicesFunction::add_new_appointment($post, true, 'SMS'), true);
                                                        if ($result['status'] == 1) {
                                                            $notification_data = $result['notification_data'];

                                                            $bookedString[] = $val;
                                                            $appointment_id = $result['data']['appointment_id'];
                                                            $token_number = $result['data']['token_number'];
                                                            $response['status'] = 1;
                                                            $response["message"] = $result['message'];
                                                            if ($book_type == "IVR") {
                                                                $response["message"] = "Aapka token number $token_number hai.";

                                                            }
                                                            $addedOne = true;
                                                        } else {

                                                            $response["status"] = 1;
                                                            $response["message"] = $result['message'];
                                                            if ($book_type == "IVR") {
                                                                $response["message"] = "Aapka appointment phale se book hai!! Appointment already booked for this number!!  Thankyou!!";
                                                            }
                                                        }
                                                    } else {
                                                        $response["status"] = 1;
                                                        $response["message"] = $chk_result['message'];
                                                        if ($book_type == "IVR") {
                                                            $response["message"] = "Aapka appointment phale se book hai!! Appointment already booked for this number!!  Thankyou!!";
                                                        }
                                                    }
                                                } else {

                                                    $response["status"] = 1;
                                                    $response["message"] = "Doctor abhi available nahi hai !! Appointment slots are not available currently";
                                                }

                                            } else {

                                                $response["status"] = 1;
                                                $response["message"] = "Doctor abhi available nahi hai !! Appointment slots are not available currently";
                                            }
                                        } else {
                                            exit();
                                        }


                                    } else {
                                        $response["status"] = 1;
                                        $response["message"] = "Sorry your have enter invalid doctor code";
                                    }
                                } else {
                                    $response["status"] = 1;
                                    if ($valid_input_string === false) {
                                        $message = "Please enter correct input to book appointment";
                                    } else {

                                        $message = "Sorry your have enter invalid doctor code";;
                                    }
                                    $response["message"] = $message;
                                }
                            }

                            unset($response["data"]);
                            //Custom::sendResponse($response);
                            //Custom::send_process_to_background();


                            $created = Custom::created();
                            $sql = "INSERT INTO ivr_call_log (call_sid, booking_type, doctor_ivr_id, thinapp_id, patient_mobile, doctor_mobile, call_start, token_no,  appointment_id, created, modified) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                            $stmt = $connection->prepare($sql);
                            $stmt->bind_param('sssssssssss', $call_sid, $book_type, $doctor_ivr_id, $thin_app_id, $to, $from, $created, $token_number, $appointment_id, $created, $created);
                            $stmt->execute();
                            if ($book_type == "IVR") {
                                $message = $response['message'];
                                WebservicesFunction::createJson('call_sid_' . $call_sid, $message, 'CREATE', 'ivr');
                                if (!empty($file_name)) {
                                    WebServicesFunction::deleteJson(array($file_name), 'ivr');
                                }
                            }

                            if (!empty($notification_data)) {
                                Custom::send_book_appointment_notification($notification_data);
                            } else if ($book_type == "SMS" && !empty($thin_app_id)) {
                                Custom::send_single_sms($from, $response["message"], $thin_app_id);
                            }
                        }
                    }
                }
                if ($addedOne == true) {
                    $dataToSend['status'] = 1;
                    $dataToSend['message'] = "Successfully Added";
                    $dataToSend['data']['not_added'] = $notAdded;
                } else {
                    $dataToSend['status'] = 0;
                    $dataToSend['message'] = "Not Added";
                    $dataToSend['data']['not_added'] = $notAdded;
                }
                Custom::sendResponse($dataToSend);
                die;
                $direct_pass_request = false;

            }


        } else {
            $booking_date = date('Y-m-d');
            $valid_input_string = true;
            $_GET = $get_request_parma;
            $call_sid = isset($_GET['CallSid']) ? $_GET['CallSid'] : 0;
            $from = isset($_GET['From']) ? Custom::create_mobile_number($_GET['From']) : "";
            $to = isset($_GET['To']) ? Custom::create_mobile_number($_GET['To']) : "";
            $digits = isset($_GET['digits']) ? trim(str_replace('"', '', $_GET['digits'])) : "";

            $file_name = "input_" . $call_sid;
            if (!$doctor_code = json_decode(WebservicesFunction::readJson($file_name, "ivr"), true)) {
                $direct_pass_request = false;
                WebservicesFunction::createJson($file_name, json_encode($digits), "CREATE", "ivr");
            } else {
                $direct_pass_request = true;
                if ($digits == "1") {
                    $time_of_day = "MORNING";
                } else if ($digits == "2") {
                    $time_of_day = "AFTERNOON";
                } else if ($digits == "3") {
                    $time_of_day = "EVENING";
                }

            }

        }

        if ($direct_pass_request === true) {

            if (empty($from)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid from number ';
            } else if (empty($to)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid to number';
            } else {

                $doctor_code = str_replace('"', '', $doctor_code);
                $sms_response = "";
                $notification_data = false;
                $upcoming_slots = array();

                $appointment_id = $token_number = $doctor_ivr_id = $thin_app_id = 0;
                $connection = ConnectionUtil::getConnection();
                if (!empty($doctor_code) && $valid_input_string === true) {


                    $query = "SELECT * FROM doctors_ivr WHERE doctor_code =$doctor_code limit 1";

                    $service_message_list = $connection->query($query);
                    if ($service_message_list->num_rows) {

                        $doctor_ivr = mysqli_fetch_assoc($service_message_list);
                        $list = array();
                        $thin_app_id = $doctor_ivr["thinapp_id"];
                        $doctor_id = $doctor_ivr["doctor_id"];
                        $doctor_mobile = $doctor_ivr["mobile_no"];
                        $created = Custom::created();

                        /*if (($doctor_mobile == $to && $book_type == "SMS") || $book_type == "IVR") {*/
                        if ($book_type == "SMS" || $book_type == "IVR") {
                            if (Custom::check_app_enable_permission($thin_app_id, 'NEW_QUICK_APPOINTMENT')) {
                                $doctor_data = Custom::ive_get_doctor_custom_data($thin_app_id, $doctor_id, true);
                            } else {
                                $doctor_data = Custom::ive_get_doctor_custom_data($thin_app_id, $doctor_id);
                            }

                            if (!empty($doctor_data)) {
                                $doctor_ivr_id = $doctor_ivr['id'];
                                $available_slot = false;
                                $address_id = $doctor_data['address_id'];

                                $service_id = 0;
                                $available_slot = Custom::get_doctor_next_available_slot($thin_app_id, $doctor_id, $address_id, $booking_date, $time_of_day);

                                if ($available_slot !== false) {


                                    if (empty($customer_name)) {
                                        $customer_id = Custom::get_customer_first_id_by_mobile($thin_app_id, $from);
                                    } else {
                                        $customer_id = Custom::search_customer_name($thin_app_id, $from, $customer_name);
                                        $customer_id = !empty($customer_id) ? $customer_id['id'] : 0;
                                    }


                                    if (empty($customer_id)) {
                                        $customer_mobile = $from;
                                        if (empty($customer_name)) {
                                            $customer_name = $from;
                                        }
                                    } else {
                                        $customer_mobile = $customer_name = "";
                                    }

                                    $post = array();
                                    $post['app_key'] = APP_KEY;
                                    $post['thin_app_id'] = $thin_app_id;
                                    $post['user_id'] = $doctor_data['user_id'];
                                    $post['role_id'] = $doctor_data['role_id'];
                                    $post['mobile'] = $doctor_data['mobile'];
                                    $post['booking_date'] = $booking_date;
                                    $post['slot_time'] = $available_slot;
                                    $post['doctor_id'] = $doctor_id;
                                    $post['user_type'] = "CUSTOMER";
                                    $post['children_id'] = 0;
                                    $post['address_id'] = $address_id;
                                    $post['service_id'] = $service_id;
                                    $post['customer_id'] = $customer_id;
                                    $post['customer_name'] = $customer_name;
                                    $post['customer_mobile'] = $customer_mobile;
                                    $post['gender'] = "MALE";
                                    $post['payment_type'] = "CASH";
                                    $post['transaction_id'] = "";
                                    $post['appointment_user_role'] = "ADMIN";
                                    $chk_result = WebservicesFunction::check_appointment_validity($post, true);
                                    if ($chk_result['status'] == 1) {

                                        $result = json_decode(WebservicesFunction::add_new_appointment($post, true, $book_type, $time_of_day), true);
                                        if ($result['status'] == 1) {
                                            $notification_data = $result['notification_data'];

                                            $appointment_id = $result['data']['appointment_id'];
                                            $token_number = $result['data']['token_number'];

                                            $response['status'] = 1;
                                            $response["message"] = $result['message'];
                                            if ($book_type == "IVR") {
                                                $response["message"] = "Thankyou, Aapka token number $token_number hai!! Your appointment token number is $token_number!!";
                                            }

                                        } else {
                                            $response["status"] = 1;
                                            $response["message"] = $result['message'];
                                            if ($book_type == "IVR") {
                                                $response["message"] = "Aapka appointment phale se book hai!! Appointment already booked for this number!!  Thankyou!!";
                                            }
                                        }
                                    } else {
                                        $response["status"] = 1;
                                        $response["message"] = $chk_result['message'];
                                        if ($book_type == "IVR") {
                                            $response["message"] = "Aapka appointment phale se book hai!! Appointment already booked for this number!!  Thankyou!!";
                                        }
                                    }
                                } else {
                                    $response["status"] = 1;
                                    $response["message"] = "Doctor abhi available nahi hai !! Appointment slots are not available currently";
                                }

                            } else {
                                $response["status"] = 1;
                                $response["message"] = "Doctor abhi available nahi hai !! Appointment slots are not available currently";
                            }
                        } else {
                            exit();
                        }


                    } else {
                        $response["status"] = 1;
                        $response["message"] = "Sorry your have enter invalid doctor code";
                    }
                } else {
                    $response["status"] = 1;
                    if ($valid_input_string === false) {
                        $message = "Please enter correct input to book appointment";
                    } else {

                        $message = "Sorry your have enter invalid doctor code";;
                    }
                    $response["message"] = $message;
                }
            }

            unset($response["data"]);
            Custom::sendResponse($response);
            Custom::send_process_to_background();


            try {
                $created = Custom::created();
                $sql = "INSERT INTO ivr_call_log (call_sid, booking_type, doctor_ivr_id, thinapp_id, patient_mobile, doctor_mobile, call_start, token_no,  appointment_id, created, modified) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                $stmt = $connection->prepare($sql);
                $stmt->bind_param('sssssssssss', $call_sid, $book_type, $doctor_ivr_id, $thin_app_id, $to, $from, $created, $token_number, $appointment_id, $created, $created);
                $stmt->execute();
                if ($book_type == "IVR") {
                    $message = $response['message'];
                    WebservicesFunction::createJson('call_sid_' . $call_sid, $message, 'CREATE', 'ivr');
                    if (!empty($file_name)) {
                        WebServicesFunction::deleteJson(array($file_name), 'ivr');
                    }
                }
            } catch (Exception $e) {

            }


            if (!empty($notification_data)) {
                Custom::send_book_appointment_notification($notification_data);
            } else if ($book_type == "SMS" && !empty($thin_app_id)) {
                Custom::send_single_sms($from, $response["message"], $thin_app_id);
            }
        }

        exit();

    }

    public static function ivr_end_call($get_request_data)
    {

        if (!empty($get_request_data) && $_SERVER['REQUEST_METHOD'] == 'POST') {
            $_GET = $get_request_data;
            $CallSid = isset($_GET['CallSid']) ? $_GET['CallSid'] : 0;
            $StartTime = isset($_GET['StartTime']) ? $_GET['StartTime'] : '';
            $EndTime = isset($_GET['EndTime']) ? $_GET['EndTime'] : '';
            $CurrentTime = isset($_GET['CurrentTime']) ? $_GET['CurrentTime'] : '';


            if (empty($CallSid)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid caller id';
            } else {
                $connection = ConnectionUtil::getConnection();


                $query = "SELECT di.call_charge FROM ivr_call_log as icl join  doctors_ivr as di on icl.doctor_ivr_id = di.id  WHERE icl.call_sid = '$CallSid' limit 1";
                $connection = ConnectionUtil::getConnection();
                $service_message_list = $connection->query($query);
                if ($service_message_list->num_rows) {

                    $data = mysqli_fetch_assoc($service_message_list);
                    $call_charge = $data['call_charge'];
                    $created = Custom::created();
                    $Duration = "00:00:00";
                    if (!empty($StartTime) && !empty($CurrentTime)) {
                        $start = new DateTime($StartTime);
                        $current = new DateTime($CurrentTime);
                        $dteDiff = $start->diff($current);
                        $Duration = $dteDiff->format("%H:%I:%S");
                        $hours = $minutes = $seconds = 0;
                        sscanf($Duration, "%d:%d:%d", $hours, $minutes, $seconds);
                        $time_seconds = $hours * 3600 + $minutes * 60 + $seconds;
                        $call_rate = (ceil($time_seconds / 60)) * $call_charge;

                    }
                    $sql = "UPDATE ivr_call_log set call_start =?, call_end =?, call_duration = ?, call_charge=?, call_rate=?,  modified = ? where call_sid = ?";
                    $stmt = $connection->prepare($sql);
                    $stmt->bind_param('sssssss', $StartTime, $CurrentTime, $Duration, $call_charge, $call_rate, $created, $CallSid);
                    if ($stmt->execute()) {
                        $response['status'] = 1;
                        $response['message'] = "Call end successfully";
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Sorry call could not end";
                    }
                } else {
                    $response['status'] = 0;
                    $response['message'] = "invalid call id";
                }

            }
            Custom::sendResponse($response);
        }
        exit();
    }
    /* ivr module end here */

    /* barcode prescription start here */
    public static function get_patient_detail_via_barcode()
    {


        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $barcode = isset($data['barcode']) ? $data['barcode'] : "";
            $type = isset($data['type']) ? $data['type'] : "CLIPBOARD";
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : "0";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile number';
            } else if (empty($barcode)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid barcode';
            } else {
                $connection = ConnectionUtil::getConnection();
                $detail = array();
                if (!empty($barcode) && $type == 'CLIPBOARD') {
                    $tmp_barcode = Custom::get_barcode_data($barcode);
                    if (!empty($tmp_barcode)) {
                        if ($tmp_barcode['STATUS'] == 'ONLINE' && $tmp_barcode['MODULE'] == 'APPOINTMENT') {
                            $appointment_id = $tmp_barcode['ID'];
                            $query = "select acss.emergency_appointment, acss.id as appointment_id, acss.status as appointment_status, acss.appointment_staff_id as doctor_id, dfile.id as file_id, IFNULL(ac.dob,c.dob) as dob, IFNULL(ac.age,'') as age, dfile.file_path, IFNULL(ac.id,c.id) as edit_patient_id, IF(c.id IS NOT NULL,'CHILDREN','CUSTOMER') as patient_type, IFNULL(IFNULL(ac.id,c.id),0) as patient_id, IFNULL(IFNULL(ac.first_name,c.child_name),'Anonymous') as patient_name, IFNULL(IFNULL(ac.uhid, c.uhid),0) as uhid, IFNULL(IFNULL(ac.mobile,c.mobile),RIGHT(SUBSTRING_INDEX(file_name,'_',1),10)) as mobile, df.id as folder_id, IFNULL(IFNULL(ac.gender,c.gender),'') as gender from appointment_customer_staff_services as acss   left join  appointment_customers as ac on ac.id = acss.appointment_customer_id left join childrens as c on c.id= acss.children_id  join drive_folders as df on (df.appointment_customer_id = ac.id or df.children_id = c.id) left join drive_files as dfile on dfile.drive_folder_id = df.id and dfile.barcode = '$barcode'  WHERE acss.id = $appointment_id";
                            $appointment = $connection->query($query);
                            if ($appointment->num_rows) {
                                $detail = mysqli_fetch_assoc($appointment);
                                $result = Custom::manage_emergency_tracker_cache($appointment_id);
                                if (empty($detail['age']) && !empty($detail['dob']) && $detail['dob'] != '0000-00-00') {
                                    $detail['age'] = Custom::get_age_from_dob($detail['dob']);
                                }
                            }
                        }
                    }
                }

                if (empty($detail)) {
                    $condition = " dfile.thinapp_id = $thin_app_id and  dfile.barcode = '$barcode'";
                    if ($type == "PEN") {
                        $condition = " dfile.thinapp_id = $thin_app_id and dfile.paper_unique_id = '$barcode'";
                    }
                    $query = "select dfile.doctor_id, dfile.file_path, dfile.id as file_id, IFNULL(ac.age,'') as age, IFNULL(ac.dob,c.dob) as dob, IFNULL(ac.id,c.id) as edit_patient_id, IF(c.id IS NOT NULL,'CHILDREN','CUSTOMER') as patient_type, IFNULL(IFNULL(ac.id,c.id),0) as patient_id, IFNULL(IFNULL(ac.first_name,c.child_name),'Anonymous') as patient_name, IFNULL(IFNULL(ac.uhid, c.uhid),0) as uhid, IFNULL(IFNULL(ac.mobile,c.mobile),RIGHT(SUBSTRING_INDEX(file_name,'_',1),10)) as mobile, df.id as folder_id, IFNULL(IFNULL(ac.gender,c.gender),'') as gender from drive_files as dfile join drive_folders as df on df.id = dfile.drive_folder_id  left join appointment_customers as ac on ac.id = df.appointment_customer_id left join childrens as c on c.id= df.children_id where $condition limit 1";
                    $detail_con = $connection->query($query);
                    if ($detail_con->num_rows) {
                        $detail = mysqli_fetch_assoc($detail_con);

                        if (empty($detail['age']) && !empty($detail['dob']) && $detail['dob'] != '0000-00-00') {
                            $detail['age'] = Custom::get_age_from_dob($detail['dob']);
                        }
                    }
                }
                if (!empty($detail)) {
                    $response['status'] = 1;
                    $response['message'] = "Detail found";
                    $response['data']['detail'] = $detail;
                    $response['data']['detail']['is_editable'] = "YES";//($detail['doctor_id']==$doctor_id)?'YES':'NO';
                } else {
                    $response['status'] = 0;
                    $response['message'] = "Detail not found.";
                }
            }
            Custom::sendResponse($response);
        }
        exit();
    }

    public static function save_barcode_prescription($data = null, $pending_request_file_name = null, $send_response_first = true, $created_date = "")
    {

        ignore_user_abort(true);
        set_time_limit(0);

        $return = true;
        $save_file_data_array = array();
        if (empty($data)) {
            $return = false;
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);
        }
        $backup_file_name = "";
        if (!empty($data)) {
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : 0;
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : 0;
            if (empty($pending_request_file_name)) {
                $backup_file_name = date('YmdHis') . "-$thin_app_id" . "-$doctor_id";
                $save_file_data_array['data'] = $data;
                $save_file_data_array['data']['created'] = Custom::created();
                Custom::write_file_into_folder('myscript_pending_request', $backup_file_name, $save_file_data_array);
            } else {
                $save_file_data_array['data'] = $data;
                $tmp_file = explode(".", $pending_request_file_name);
                if (count($tmp_file) == 2) {
                    $backup_file_name = $tmp_file[0];
                } else {

                    $backup_file_name = $pending_request_file_name;
                }

            }

        }

        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $role_id = isset($data['role_id']) ? $data['role_id'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $barcode = isset($data['barcode']) ? $data['barcode'] : "";
            $raw_string = isset($data['raw_string']) ? $data['raw_string'] : "";
            $base64 = isset($data['base64']) ? $data['base64'] : "";
            $mode = isset($data['mode']) ? $data['mode'] : "OPD";
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : "0";
            $request_via = isset($data['request_via']) ? $data['request_via'] : "CLIPBOARD";
            $paper_unique_id = isset($data['paper_unique_id']) ? $data['paper_unique_id'] : "";
            $file_id = isset($data['file_id']) ? $data['file_id'] : 0;
            $drive_folder_id = isset($data['folder_id']) ? $data['folder_id'] : 0;
            $doctor_assigned_pen_id = isset($data['doctor_assigned_pen_id']) ? $data['doctor_assigned_pen_id'] : 0;
            $attachment_urls = isset($data['attachment_urls']) ? $data['attachment_urls'] : 0;
            $time_stamp = isset($data['time_stamp']) ? $data['time_stamp'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile number';
            } else if (empty($raw_string)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid row data';
            } else if (empty($base64)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid prescription image data';
            } else {


                $new_prescription = true;
                $save_file_id = 0;
                $new_patient_added = "NO";
                $label = $my_script_string = $number_array = $instanceId = "";
                $detail = $tag_array = $unique_condition = array();
                $prescription_id = $appointment_id = 0;
                $connection = ConnectionUtil::getConnection();

                if (empty($drive_folder_id)) {


                    if (!empty($file_id)) {
                        $unique_condition = " and dfile.id = $file_id";
                    } else {
                        if ($request_via == 'PEN') {
                            $unique_condition = " and dfile.paper_unique_id !='' and dfile.paper_unique_id = '$paper_unique_id'";
                        } else {
                            $unique_condition = " and dfile.barcode !='' and dfile.barcode = '$barcode'";
                        }
                    }


                    $query = "select dfile.raw_string, df.default_prescription_folder, dfile.id as prescription_id, df.id as folder_id  from drive_files as dfile join drive_folders as df on df.id = dfile.drive_folder_id  left join  appointment_customers as ac on ac.id = df.appointment_customer_id left join childrens as c on c.id= df.children_id where dfile.thinapp_id = $thin_app_id $unique_condition limit 1";
                    $detail_list = $connection->query($query);
                    if (($detail_list->num_rows && !empty($barcode)) || !empty($file_id)) {
                        $detail = mysqli_fetch_assoc($detail_list);
                        $prescription_id = $detail['prescription_id'];
                        $drive_folder_id = $detail['folder_id'];
                        $new_prescription = false;

                        if (!empty($detail['raw_string'])) {
                            $old_storks_array = json_decode($detail['raw_string'], true);
                            $old_storks = $old_storks_array['inputUnits'][0]['components'];
                            $new_storks = json_decode($raw_string, true)['inputUnits'][0]['components'];
                            $old_storks_array['inputUnits'][0]['components'] = array_merge($old_storks, $new_storks);
                            $raw_string = json_encode($old_storks_array);;

                        }

                    }

                }
                $msg_lbl = ($new_prescription === true) ? 'save' : 'update';
                $response['status'] = 1;
                $response['message'] = "Prescription $msg_lbl successfully.";
                if ($send_response_first === true) {
                    Custom::sendResponse($response);
                    Custom::send_process_to_background();
                }

                $return_array = array();
                $content = @file_get_contents(LOCAL_PATH . "app/webroot/myscript_pending_request/" . $backup_file_name . ".json");
                if (!empty($content)) {
                    $tmp = @json_decode($content, true);
                    if (!empty($tmp['myscript_response'])) {
                        $return_array[] = $tmp['myscript_response'];
                    }
                }

                check_again:
                $my_script_key = Custom::getMyScriptActiveKey();
                if (!empty($my_script_key) && empty($return_array) || @$return_array[0]['result']['error'] == 'AccountCounterThresholdReachedException' || @$return_array[0]['result']['error'] == 'RecognitionApiTimedOutException') {
                    $fields = array(
                        'applicationKey' => $my_script_key,
                        'textInput' => $raw_string
                    );
                    $return_array = array();
                    $ch = curl_init();
                    curl_setopt($ch, CURLOPT_URL, MYSCRIPT_URL);
                    curl_setopt($ch, CURLOPT_POST, true);
                    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
                    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
                    curl_setopt($ch, CURLOPT_POSTFIELDS, ($fields));
                    $return_array[] = json_decode(curl_exec($ch), true);
                    curl_close($ch);
                }
                if (isset($return_array[0]['result']['textSegmentResult']['candidates'][0]['label'])) {

                    Custom::setMyScriptActiveKey($my_script_key);
                    $save_file_data_array['myscript_response'] = $return_array[0];
                    if (!empty($backup_file_name)) {
                        Custom::write_file_into_folder('myscript_pending_request', $backup_file_name, $save_file_data_array);
                    }

                    $label = $my_script_string = $return_array[0]['result']['textSegmentResult']['candidates'][0]['label'];
                    $instanceId = $return_array[0]['instanceId'];
                    preg_match_all('!\d{7,10}!', $label, $matches);
                    $patient_mobile = $patient_name = "";
                    if (!empty($matches[0])) {

                        $number_array = $matches[0];
                        foreach ($matches[0] as $key => $number) {
                            if (strlen(trim($number)) == 10) {
                                $patient_mobile = trim($number);
                                break;
                            }
                        }

                    }


                    /* token reading block  */
                    /* token read from bracket in first line start*/
                    $label_array = explode("\n", $label);
                    preg_match_all('/\(([0-9 ]+?)\)/', $label_array[0], $matches);
                    if (!empty($matches[1])) {
                        foreach ($matches[1] as $key => $token) {
                            $token = trim($token);
                            if (strlen($token) <= 3) {
                                $token_number = $token;
                                break;
                            }
                        }
                    }
                    /* token read from without bracket in first line*/
                    if (empty($token_number)) {
                        $arr = preg_split('/\s*\(.*?\)\s*/', $label_array[0]);
                        $string = implode(' ', $arr);

                        preg_match_all('!\d+!', $string, $matches);
                        //preg_match_all('/\([0-9. ]+?\)/', $string, $matches);
                        foreach ($matches[0] as $key => $token) {
                            $token = trim($token);
                            if (strlen($token) <= 3) {
                                $token_number = $token;
                                break;
                            }
                        }

                        /* token read from  bracket with whole page*/
                        if (empty($token_number)) {
                            preg_match_all('/\(([0-9 ]+?)\)/', $label, $matches);
                            foreach ($matches[1] as $key => $token) {
                                $token = trim($token);
                                if (strlen($token) <= 3) {
                                    $token_number = $token;
                                    break;
                                }
                            }

                        }
                    }


                    /* get customer name from my script */
                    $name_index = empty($token_number) ? 0 : 1;
                    if (isset($label_array[$name_index])) {
                        $patient_name = preg_replace("/[0-9]/", "", $label_array[$name_index]);
                        $patient_name = trim($patient_name);
                    }
                    $patient_name = empty($patient_name) ? $patient_mobile : $patient_name;


                    if (empty($drive_folder_id)) {

                        if (!empty($detail)) {

                            if (strlen($patient_mobile) == 10 && $detail['default_prescription_folder'] == 'YES') {
                                $patient_mobile = Custom::create_mobile_number($patient_mobile);
                                $customer_data = Custom::get_first_customer_by_mobile($thin_app_id, $patient_mobile);
                                if (empty($customer_data)) {
                                    if (empty($patient_name)) {
                                        $patient_name = $patient_mobile;
                                    }
                                    $gender = 'MALE';
                                    if (preg_match("/FEMALE/", strtoupper($label)) == 1 || preg_match("/FEMALE/", strtoupper($label)) == 1) {
                                        $gender = preg_match("/FEMALE/", strtoupper($label)) ? 'FEMALE' : 'MALE';
                                    }

                                    $customer = array();
                                    $customer['app_key'] = $app_key;
                                    $customer['thin_app_id'] = $thin_app_id;
                                    $customer['user_id'] = $user_id;
                                    $customer['first_name'] = $patient_name;
                                    $customer['dob'] = '';
                                    $customer['mobile'] = $patient_mobile;
                                    $customer['country_code'] = "+91";
                                    $customer['gender'] = $gender;
                                    $customer['address'] = "";
                                    $result = WebservicesFunction::appointment_add_customer($customer);
                                    $result = $customer_data = json_decode($result, true);
                                    if ($result['status'] == 1) {
                                        $response['status'] = 1;
                                        $response['message'] = "Patient Added Successfully";
                                        $new_patient_added = "YES";
                                        $res = json_decode(Custom::create_and_share_folder($thin_app_id, $patient_mobile, $patient_name, 'CUSTOMER', $result['customer_id']), true);
                                        $drive_folder_id = @$res['folder_id'];

                                    } else {
                                        $response['status'] = 0;
                                        $response['message'] = $result['message'];
                                    }
                                } else {
                                    $drive_folder_id = $customer_data['folder_id'];
                                }

                            } else {
                                $drive_folder_id = $detail['folder_id'];

                            }
                        } else {
                            /* check barcode belongs to appointemnt or not */
                            if (!empty($barcode)) {
                                $tmp_barcode = Custom::get_barcode_data($barcode);
                                if (!empty($tmp_barcode)) {
                                    if ($tmp_barcode['STATUS'] == 'ONLINE' && $tmp_barcode['MODULE'] == 'APPOINTMENT') {
                                        $appointment_id = $tmp_barcode['ID'];

                                        $query = "select acss.id, df.id as folder_id from appointment_customer_staff_services as acss   left join  appointment_customers as ac on ac.id = acss.appointment_customer_id left join childrens as c on c.id= acss.children_id left join drive_folders as df on (df.appointment_customer_id = ac.id or df.children_id = c.id)  WHERE acss.id = $appointment_id";
                                        $appointment = $connection->query($query);
                                        if ($appointment->num_rows) {
                                            $appointment = mysqli_fetch_assoc($appointment);
                                            $drive_folder_id = $appointment['folder_id'];
                                            $appointment_id = $appointment['id'];
                                        }
                                    } else {
                                        /* get today match appointment  via token number or mobile number */
                                        if (!empty($token_number) || !empty($number_array)) {
                                            $date = !empty($created_date) ? date('Y-m-d', strtotime($created_date)) : date('Y-m-d');
                                            if (strtotime($date) >= strtotime(date('Y-m-d'))) {
                                                $status_label = "'NEW','CONFIRM','RESCHEDULE','CLOSED'";
                                            } else {
                                                $status_label = "'NEW','CONFIRM','RESCHEDULE','CLOSED','EXPIRED'";
                                            }

                                            $tmp_number_string = $condition_string = "";
                                            if (!empty($number_array)) {
                                                $tmp_number_tmp = array();
                                                foreach ($number_array as $key => $num) {
                                                    $tmp_number_tmp[] = "(ac.mobile like '%$num%' OR c.mobile like'%$num%')";
                                                }
                                                $tmp_number_string = implode(" OR ", $tmp_number_tmp);
                                                if (!empty($token_number)) {
                                                    $tmp_number_string = " ( (acss.queue_number='$token_number') OR ( $tmp_number_string ) ) ";
                                                } else {
                                                    $tmp_number_string = " ( $tmp_number_string ) ";
                                                }
                                            } else if (!empty($token_number)) {
                                                $tmp_number_string = "( acss.queue_number='$token_number' )";
                                            }

                                            $query = "select acss.id, df.id as folder_id from appointment_customer_staff_services as acss  left join  appointment_customers as ac on ac.id = acss.appointment_customer_id left join childrens as c on c.id= acss.children_id left join drive_folders as df on (df.appointment_customer_id = ac.id or df.children_id = c.id)  WHERE acss.thinapp_id = $thin_app_id and  $tmp_number_string and DATE(acss.appointment_datetime) = '$date' and acss.status IN($status_label) and acss.appointment_staff_id = $doctor_id limit 1";
                                            $appointment = $connection->query($query);
                                            if ($appointment->num_rows) {
                                                $appointment = mysqli_fetch_assoc($appointment);
                                                $drive_folder_id = $appointment['folder_id'];
                                                $appointment_id = $appointment['id'];
                                            }
                                        }

                                    }


                                }


                            } else {

                                /* get today match appointment  via token number or mobile number */
                                if (!empty($token_number) || !empty($number_array)) {
                                    $date = date('Y-m-d');
                                    $tmp_number_string = $condition_string = "";
                                    if (!empty($number_array)) {
                                        $tmp_number_tmp = array();
                                        foreach ($number_array as $key => $num) {
                                            $tmp_number_tmp[] = "(ac.mobile like '%$num%' OR c.mobile like'%$num%')";
                                        }
                                        $tmp_number_string = implode(" OR ", $tmp_number_tmp);
                                        if (!empty($token_number)) {
                                            $tmp_number_string = " ( (acss.queue_number='$token_number') OR ( $tmp_number_string ) ) ";
                                        } else {
                                            $tmp_number_string = " ( $tmp_number_string ) ";
                                        }
                                    } else if (!empty($token_number)) {
                                        $tmp_number_string = "( acss.queue_number='$token_number' )";
                                    }

                                    $query = "select acss.id, df.id as folder_id from appointment_customer_staff_services as acss  left join  appointment_customers as ac on ac.id = acss.appointment_customer_id left join childrens as c on c.id= acss.children_id left join drive_folders as df on (df.appointment_customer_id = ac.id or df.children_id = c.id)  WHERE acss.thinapp_id = $thin_app_id and  $tmp_number_string and DATE(acss.appointment_datetime) = '$date' and acss.status IN('NEW','CONFIRM','RESCHEDULE','CLOSED') and acss.appointment_staff_id = $doctor_id limit 1";
                                    $appointment = $connection->query($query);
                                    if ($appointment->num_rows) {
                                        $appointment = mysqli_fetch_assoc($appointment);
                                        $drive_folder_id = $appointment['folder_id'];
                                        $appointment_id = $appointment['id'];
                                    }
                                }
                            }

                        }

                    }


                    if (empty($drive_folder_id) && strlen($patient_mobile) == 10) {

                        /* create patient if match number equal to 10 digit */

                        $patient_mobile = Custom::create_mobile_number($patient_mobile);
                        $customer_data = array();
                        /* search customer by patient name */
                        if (!empty($patient_name)) {
                            $customer_data = Custom::get_customer_by_name($thin_app_id, $patient_name, $patient_mobile);
                        }
                        /* get patient via mobile number if patient name not exixt */
                        if (empty($customer_data)) {
                            $customer_data = Custom::get_first_customer_by_mobile($thin_app_id, $patient_mobile);
                        }

                        if (!empty($customer_data)) {
                            if (empty($customer_data['folder_id'])) {
                                $folder_id = Custom::get_patient_folder($thin_app_id, $customer_data['id']);
                                if (empty($folder_id)) {
                                    $res = json_decode(Custom::create_and_share_folder($thin_app_id, $patient_mobile, $customer_data['first_name'], 'CUSTOMER', $customer_data['id']), true);
                                    $customer_data['folder_id'] = @$res['folder_id'];
                                }
                            }
                        }

                        if (empty($customer_data)) {
                            if (empty($patient_name)) {
                                $patient_name = $patient_mobile;
                            }

                            $gender = 'MALE';
                            if (preg_match("/FEMALE/", strtoupper($label)) == 1 || preg_match("/FEMALE/", strtoupper($label)) == 1) {
                                $gender = preg_match("/FEMALE/", strtoupper($label)) ? 'FEMALE' : 'MALE';
                            }
                            $customer = array();
                            $customer['app_key'] = $app_key;
                            $customer['thin_app_id'] = $thin_app_id;
                            $customer['user_id'] = $user_id;
                            $customer['first_name'] = $patient_name;
                            $customer['dob'] = '';
                            $customer['mobile'] = $patient_mobile;
                            $customer['country_code'] = "+91";
                            $customer['gender'] = $gender;
                            $customer['address'] = "";
                            $result = WebservicesFunction::appointment_add_customer($customer);
                            $result = $customer_data = json_decode($result, true);
                            if ($result['status'] == 1) {
                                $response['status'] = 1;
                                $response['message'] = "Patient Added Successfully";
                                $new_patient_added = "YES";
                                $res = json_decode(Custom::create_and_share_folder($thin_app_id, $patient_mobile, $patient_name, 'CUSTOMER', $result['customer_id']), true);
                                $drive_folder_id = @$res['folder_id'];
                            } else {
                                $response['status'] = 0;
                                $response['message'] = $result['message'];
                            }
                        } else {
                            $drive_folder_id = $customer_data['folder_id'];
                        }
                    }

                    if (empty($drive_folder_id)) {
                        /* if all caondition could not match than add prescription to default folder */
                        $default = Custom::get_app_default_prescription_folder($thin_app_id);
                        if (empty($default)) {
                            $drive_folder_id = Custom::add_app_default_prescription_folder($thin_app_id);
                        } else {
                            $drive_folder_id = $default['id'];
                        }
                    }

                    /* final get folder id from above code */

                    if (!empty($drive_folder_id)) {
                        $file_name = $patient_mobile;
                        $file_name .= "_" . date('YmdHis') . rand() . ".png";
                        $file_path = Custom::uploadBase64FileToAws($base64, $file_name);
                        if (!empty($file_path)) {
                            $label = $return_array[0]['result']['textSegmentResult']['candidates'][0]['label'];
                            $instanceId = $return_array[0]['instanceId'];
                            $post['app_key'] = APP_KEY;
                            $post['thin_app_id'] = $thin_app_id;
                            $post['user_id'] = $user_id;
                            $post['role_id'] = $role_id;
                            $post['mobile'] = $mobile;
                            $post['doctor_id'] = $doctor_id;
                            $file_array[] = array(
                                'file_name' => trim($file_name),
                                'file_path' => $file_path,
                                'file_size' => Custom::getBase64ImageSize($base64),
                                'file_type' => 'PRESCRIPTION',
                                'mode' => $mode,
                                'drive_folder_id' => $drive_folder_id,
                                'appointment_id' => 0,
                                'myscript_string' => $label,
                                'myscript_instance_id' => $instanceId,
                                'barcode' => $barcode,
                                'raw_string' => $raw_string,
                                'file_id' => $prescription_id,
                                'paper_unique_id' => $paper_unique_id,
                                'doctor_id' => $doctor_id,
                                'doctor_assigned_pen_id' => $doctor_assigned_pen_id,
                                'attachment_urls' => $attachment_urls,
                                'time_stamp' => $time_stamp
                            );
                            $post['file_array'] = $file_array;
                            $save_result = json_decode(WebServicesFunction_2_3::writing_save_prescription($post, $created_date), true);
                            if ($save_result['status'] == 1) {
                                $response['status'] = 1;
                                $msg_lbl = !empty($prescription_id) ? "update" : "save";
                                $response['message'] = "Prescription $msg_lbl successfully.";
                                $response['data']['new_patient'] = $new_patient_added;
                                if (!empty($backup_file_name)) {
                                    Custom::delete_file_from_folder('myscript_pending_request', array($backup_file_name));
                                }
                            } else {
                                $response['status'] = 0;
                                $response['message'] = $save_result['message'];
                            }
                        } else {
                            $response['status'] = 0;
                            $response['message'] = "Sorry, prescription could not upload";
                        }

                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Sorry, folder not found";
                    }
                } else {
                    if (@$return_array[0]['result']['error'] == 'AccountCounterThresholdReachedException') {
                        Custom::setMyScriptkeyInactive($my_script_key);
                    }
                    $allow_next_request = true;
                    $all_keys = Custom::getAllMyScriptKeys();
                    if (!empty($all_keys)) {
                        $active_keys = array_column($all_keys, 'status');
                        if (!in_array('ACTIVE', $active_keys)) {
                            $allow_next_request = false;
                        }
                    }
                    if (@$return_array[0]['result']['error'] == 'AccountCounterThresholdReachedException' && $allow_next_request === true) {
                        goto check_again;
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Invalid prescription row data";
                        $save_file_data_array['myscript_response'] = $return_array[0];
                        if (!empty($backup_file_name)) {
                            Custom::write_file_into_folder('myscript_pending_request', $backup_file_name, $save_file_data_array);
                        }
                    }

                }

            }


            $background = array();
            if (isset($save_result['notification'])) {
                $background['notification'] = $save_result['notification'];
                $background['drive_folder_id'] = $drive_folder_id;
                $background['my_script_string'] = $my_script_string;
                $background['connection'] = $connection;
                $background['thin_app_id'] = $thin_app_id;
                $background['doctor_id'] = $doctor_id;
                $background['user_id'] = $user_id;
                $background['mobile'] = $mobile;
                $background['number_array'] = $number_array;
                $background['token_number'] = $token_number;
                $background['appointment_id'] = $appointment_id;
            }
            if ($return === true) {
                $response['background'] = $background;
                return json_encode($response);
            } else {
                Custom::sendResponse($response);
                Custom::send_process_to_background();
                if (!empty($background)) {
                    Custom::send_save_barcode_prescription_notification($background);
                }

            }


        }
        exit();
    }

    /* barcode prescripiton end here */

    public static function save_pen_prescription()
    {


        ignore_user_abort(true);
        set_time_limit(0);
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $role_id = isset($data['role_id']) ? $data['role_id'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $prescription_array = isset($data['prescription_array']) ? $data['prescription_array'] : "";
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : "0";
            $folder_id = isset($data['folder_id']) ? $data['folder_id'] : "0";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile number';
            } else if (empty($prescription_array)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid row data';
            } else {
                $response_result = array();
                $total_page_save = 0;
                $prescription_array = json_decode($prescription_array, true)['prescription_array'];
                foreach ($prescription_array as $key => $value) {
                    $post = array();
                    $post['thin_app_id'] = $thin_app_id;
                    $post['app_key'] = $app_key;
                    $post['user_id'] = $user_id;
                    $post['mobile'] = $mobile;
                    $post['mode'] = 'OPD';
                    $post['doctor_id'] = !empty($value['doctor_id']) ? $value['doctor_id'] : $doctor_id;
                    $post['raw_string'] = $value['raw_string'];
                    $post['base64'] = $value['base64'];
                    $post['request_via'] = 'PEN';
                    $post['paper_unique_id'] = @$value['page_id'];
                    $post['file_id'] = @$value['file_id'];
                    $post['folder_id'] = @$folder_id;
                    $post['doctor_assigned_pen_id'] = @$value['doctor_assigned_pen_id'];
                    $post['attachment_urls'] = @$value['attachment_urls'];
                    $response_result[$key] = json_decode(WebServicesFunction_2_3::save_barcode_prescription($post), true);
                    if ($response_result[$key]['status'] == 1) {
                        $total_page_save++;
                    }
                }
            }

            if ($total_page_save > 0) {
                $response['status'] = 1;
                $response['message'] = "$total_page_save prescription save successfully";
            } else {
                $response['status'] = 0;
                $response['message'] = 'Sorry prescription could not save';
            }
            Custom::sendResponse($response);
            Custom::send_process_to_background();
            if (!empty($response_result)) {
                foreach ($response_result as $key => $value) {
                    if (isset($value['background'])) {
                        Custom::send_save_barcode_prescription_notification($value['background']);
                    }
                }
            }

        }
        exit();
    }

    public static function book_appointment_via_face_reader()
    {


        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? Custom::create_mobile_number($data['mobile']) : "";
            $customer_mobile = isset($data['customer_mobile']) ? Custom::create_mobile_number($data['customer_mobile']) : "";
            $customer_name = isset($data['customer_name']) ? trim($data['customer_name']) : "";
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : "0";
            $address_id = isset($data['address_id']) ? $data['address_id'] : "0";
            $service_id = isset($data['service_id']) ? $data['service_id'] : "0";
            $is_emergency_appointment = isset($data['is_emergency_appointment']) ? $data['is_emergency_appointment'] : "NO";
            $gender = isset($data['gender']) ? $data['gender'] : "";
            $age = isset($data['age']) ? $data['age'] : "";
            $address = isset($data['address']) ? $data['address'] : "";
            $patient_type = isset($data['patient_type']) ? $data['patient_type'] : "";
            $patient_id = isset($data['patient_id']) ? $data['patient_id'] : "";
            if (!empty($doctor_id) && $doctor_data = Custom::get_doctor_by_id($doctor_id, $thin_app_id)) {
                $thin_app_id = @$doctor_data['thinapp_id'];
                $mobile = @$doctor_data['mobile'];
                $user_id = !empty($doctor_data['user_id'])?$doctor_data['user_id']:$user_id;
            } else {
                $get_thin_app_data = Custom::get_face_app_data($mobile);
                $thin_app_id = @$get_thin_app_data['thinapp_id'];
                $mobile = @$get_thin_app_data['mobile'];
                $doctor_id = @$get_thin_app_data['doctor_id'];
                $user_id = !empty($get_thin_app_data['user_id'])?$get_thin_app_data['user_id']:$user_id;
            }


            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile number';
            } else if (empty($customer_mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile number';
            } else if (empty($doctor_id)) {
                $response['status'] = 0;
                $response['message'] = 'Doctor is not register as MEngage user';
            } else {

				$app_data = Custom::getThinAppData($thin_app_id);
                $booking_date = date('Y-m-d');
                $current_time = date('H:i:s');
                $time_of_day = "MORNING";
                if (strtotime($current_time) >= strtotime("00:00:00") && strtotime($current_time) <= strtotime("11:59:00")) {
                    $time_of_day = "MORNING";
                } else if (strtotime($current_time) >= strtotime("12:00:00") && strtotime($current_time) <= strtotime("16:59:00")) {
                    $time_of_day = "AFTERNOON";
                } else if (strtotime($current_time) >= strtotime("17:00:00") && strtotime($current_time) <= strtotime("23:59:00")) {
                    $time_of_day = "EVENING";
                }

                $notification_data = false;
                $token_number = $doctor_ivr_id = 0;
                if (Custom::check_app_enable_permission($thin_app_id, 'NEW_QUICK_APPOINTMENT')) {
                    $doctor_data = Custom::ive_get_doctor_custom_data($thin_app_id, $doctor_id, true);
                } else {
                    $doctor_data = Custom::ive_get_doctor_custom_data($thin_app_id, $doctor_id);
                }

                if (!empty($doctor_data)) {
                    $available_slot = false;
                    $queue_number = 0;
                    $custom_token = "NO";
                    $appointment_type = "";
                    $address_id = empty($address_id) ? $doctor_data['address_id'] : $address_id;
                    $available_slot = Custom::get_doctor_next_available_slot($thin_app_id, $doctor_id, $address_id, $booking_date, "CURRENT", true, "USER", $service_id);
                    if ($available_slot === false) {
                        $book_more_slot = Custom::load_doctor_slot_by_address($booking_date, $doctor_id, $doctor_data['service_slot_duration'], $thin_app_id, $address_id, false, "ADMIN", true, true);
                        $book_more_slot = end($book_more_slot);
                        if ($book_more_slot['custom_slot'] == 'YES') {
                            $available_slot = $book_more_slot['slot'];
                            $queue_number = $book_more_slot['queue_number'];
                            $custom_token = "YES";
                            $appointment_type = "ADD_MORE_TOKEN";
                        }
                    }

                    if ($available_slot !== false || $is_emergency_appointment == "YES") {

                        $children_id = $customer_id = 0;
                        $valid_patient = true;
                        if (($patient_type == "CUSTOMER" || $patient_type == "CHILDREN") && !empty($patient_id)) {
                            if ($patient_type == "CUSTOMER") {
                                $customer_id = $patient_id;
                                $search_patient_data = Custom::search_customer_name($thin_app_id, $customer_mobile, $customer_name);
                                if (empty($search_patient_data) || $search_patient_data['id'] == $patient_id) {
                                    $created = Custom::created();
                                    $connection = ConnectionUtil::getConnection();
                                    $sql = "update appointment_customers set first_name = ?, age=?, gender=?, address=?, modified=? where id = ?";
                                    $stmt_df = $connection->prepare($sql);
                                    $stmt_df->bind_param('ssssss', $customer_name, $age, $gender, $address, $created, $patient_id);
                                    $stmt_df->execute();
                                } else {
                                    $valid_patient = false;
                                }
                            } else {
                                $children_id = $patient_id;
                                $search_child_data = Custom::search_child_name($thin_app_id, $customer_mobile, $customer_name);
                                if (empty($search_child_data) || $search_child_data['id'] == $patient_id) {
                                    $created = Custom::created();
                                    $connection = ConnectionUtil::getConnection();
                                    if ($search_child_data['has_vaccination'] == "NO") {
                                        $sql = "update childrens set child_name = ?, gender=?, address=?, modified=? where id = ?";
                                        $stmt_df = $connection->prepare($sql);
                                        $stmt_df->bind_param('sssss', $customer_name, $gender, $address, $created, $patient_id);
                                    } else {
                                        $sql = "update childrens set child_name = ?, address=?, modified=? where id = ?";
                                        $stmt_df = $connection->prepare($sql);
                                        $stmt_df->bind_param('ssss', $customer_name, $address, $created, $patient_id);
                                    }
                                    $stmt_df->execute();
                                } else {
                                    $valid_patient = false;
                                }
                            }


                        } else {
                            if (!empty($customer_name)) {
                                $customer_id = Custom::search_customer_name($thin_app_id, $customer_mobile, $customer_name);
                                $customer_id = !empty($customer_id) ? $customer_id['id'] : 0;
                            } else {
                                $customer_id = Custom::get_customer_first_id_by_mobile($thin_app_id, $customer_mobile);
                            }
                            if (empty($customer_id)) {
                                if (empty($customer_name)) {
                                    $customer_name = $customer_mobile;
                                }
                            } else {
                                $customer_mobile = $customer_name = "";
                            }
                        }

                        if ($valid_patient) {
                            $post = array();
                            $post['app_key'] = APP_KEY;
                            $post['thin_app_id'] = $thin_app_id;
                            $post['user_id'] = $doctor_data['user_id'];
                            $post['role_id'] = $doctor_data['role_id'];
                            $post['mobile'] = $doctor_data['mobile'];
                            $post['booking_date'] = $booking_date;
                            $post['slot_time'] = $available_slot;
                            $post['doctor_id'] = $doctor_id;
                            $post['user_type'] = "CUSTOMER";
                            $post['children_id'] = 0;
                            $post['address_id'] = $address_id;
                            $post['service_id'] = $service_id;
                            $post['customer_id'] = $customer_id;
                            $post['customer_name'] = $customer_name;
                            $post['customer_mobile'] = $customer_mobile;
                            $post['gender'] = $gender;
                            $post['age'] = $age;
                            $post['address'] = $address;
                            $post['payment_type'] = "CASH";
                            $post['transaction_id'] = "";
                            $post['appointment_user_role'] = "ADMIN";
                            $post['custom_token'] = $custom_token;
                            $post['queue_number'] = $queue_number;
                            $post['appointment_type'] = $appointment_type;
                        	$post['checked_in'] = $app_data['kiosk_booking_auto_checkin'];
                            if ($is_emergency_appointment == "YES") {
                                $post['emergency_appointment'] = $is_emergency_appointment;
                            }

                            $chk_result = WebservicesFunction::check_appointment_validity($post, true);
                            if ($chk_result['status'] == 1 || $is_emergency_appointment == "YES") {
                                $result = json_decode(WebservicesFunction::add_new_appointment($post, true, 'FACE_READER_TAB', $time_of_day), true);
                                if ($result['status'] == 1) {
                                    $notification_data = $result['notification_data'];
                                    $response['status'] = 1;
                                    $response["message"] = $result['message'];
                                    $get_appointment_data = Custom::get_appointment_by_id($result['data']['appointment_id']);
                                    $response["token"] = Custom::create_queue_number($get_appointment_data);
                                    $response["time"] = ($is_emergency_appointment == "NO")?$result['data']['time']:"-";
                                } else {
                                    $response["status"] = 0;
                                    $response["message"] = $result['message'];
                                }
                            } else {
                                $response["status"] = 0;
                                $response["message"] = $chk_result['message'];

                            }

                        } else {
                            $response["status"] = 0;
                            $response["message"] = "Patient already register with this number";

                        }


                    } else {
                        $response["status"] = 0;
                        $response["message"] = "Doctor is not available currently";
                    }

                } else {
                    $response["status"] = 0;
                    $response["message"] = "Doctor is not register as MEngage user";
                }


                unset($response["data"]);

            }
            Custom::sendResponse($response);
            Custom::send_process_to_background();
            if (!empty($notification_data)) {
                Custom::send_book_appointment_notification($notification_data);
            }
        }
        exit();
    }

    public static function get_app_category_list()
    {


        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else {

                $query = "select dc.id, dc.category_name, IF(hc.id IS NOT NULL,'YES','NO') as is_selected from department_categories dc left join hospital_categories as hc on dc.id = hc.department_category_id and hc.thinapp_id = $thin_app_id and hc.status = 'ACTIVE' order by dc.category_name asc";
                $connection = ConnectionUtil::getConnection();
                $service_message_list = $connection->query($query);
                if ($service_message_list->num_rows) {
                    $list = mysqli_fetch_all($service_message_list, MYSQLI_ASSOC);
                    $response['status'] = 1;
                    $response['message'] = "Category found";
                    $response['data']['list'] = $list;
                } else {
                    $response['status'] = 0;
                    $response['message'] = "No category found";
                }

            }
            Custom::sendResponse($response);
        }
        exit();


    }

    public static function pen_get_doctor_list()
    {


        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else {

                $query = "select  doctor.id as doctor_id, doctor.name, doctor.mobile,  GROUP_CONCAT(CONCAT_WS('##',dap.id,dap.pen_mac_address)) as pen_mac_address, GROUP_CONCAT(dap.pen_name) as pen_name  from appointment_staffs as doctor left join doctor_assigned_pen as dap on doctor.id = dap.doctor_id and dap.status ='ACTIVE'  where doctor.thinapp_id = $thin_app_id and doctor.staff_type = 'DOCTOR' and doctor.status = 'ACTIVE' group by doctor.id order by doctor.name asc";
                $connection = ConnectionUtil::getConnection();
                $service_message_list = $connection->query($query);
                if ($service_message_list->num_rows) {
                    $list = mysqli_fetch_all($service_message_list, MYSQLI_ASSOC);
                    $response['status'] = 1;
                    $response['message'] = "Doctor found";
                    $response['data']['list'] = $list;
                } else {
                    $response['status'] = 0;
                    $response['message'] = "No doctor found";
                }

            }
            Custom::sendResponse($response);
        }
        exit();


    }

    public static function pen_update_doctor_mac_address()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $doctor_id = !empty($data['doctor_id']) ? $data['doctor_id'] : 0;
            $mac_address = !empty($data['mac_address']) ? trim($data['mac_address']) : "";
            $pen_name = !empty($data['pen_name']) ? trim($data['pen_name']) : "";
            $pen_assigned_id = !empty($data['pen_assigned_id']) ? trim($data['pen_assigned_id']) : 0;


            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else if (empty($doctor_id) && empty($pen_assigned_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid doctor and pen id';
            } else {
                $connection = ConnectionUtil::getConnection();

                if (!empty($pen_assigned_id)) {
                    $connection = ConnectionUtil::getConnection();
                    $created = Custom::created();
                    $status = 'INACTIVE';
                    $sql = "UPDATE doctor_assigned_pen set status =?, modified =?  where id = ?";
                    $stmt = $connection->prepare($sql);
                    $stmt->bind_param('sss', $status, $created, $pen_assigned_id);
                    if ($stmt->execute()) {
                        $response['status'] = 1;
                        $response['message'] = "Pen unassigned successfully";
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Sorry pen could not unassigned";
                    }
                } else {
                    $query = "select app_staff.name from appointment_staffs as app_staff join doctor_assigned_pen as dap on dap.doctor_id = app_staff.id WHERE  app_staff.thinapp_id = $thin_app_id and dap.status = 'ACTIVE' AND  dap.pen_mac_address != '' and dap.pen_mac_address = '$mac_address' LIMIT 1";
                    $connection = ConnectionUtil::getConnection();
                    $service_message_list = $connection->query($query);
                    if (!$service_message_list->num_rows) {
                        if (!empty($mac_address)) {
                            $created = Custom::created();
                            $sql = "INSERT INTO doctor_assigned_pen (thinapp_id, doctor_id, pen_name, pen_mac_address, created, modified  ) VALUES (?, ?, ?, ?, ?, ?)";
                            $stmt = $connection->prepare($sql);
                            $stmt->bind_param('ssssss', $thin_app_id, $doctor_id, $pen_name, $mac_address, $created, $created);
                            if ($stmt->execute()) {
                                $response['status'] = 1;
                                $response['message'] = "Pen assigned successfully";
                            } else {
                                $response['status'] = 0;
                                $response['message'] = "Sorry pen could not assigned";
                            }
                        } else {
                            $response['status'] = 0;
                            $response['message'] = "Invalid mac address";
                        }
                    } else {
                        $doctor = mysqli_fetch_assoc($service_message_list);
                        $response['status'] = 0;
                        $response['message'] = "This pen already used by " . $doctor['name'];
                    }
                }


            }
            Custom::sendResponse($response);
        }
        exit();
    }

    public static function get_pen_prescription_upload_history()
    {


        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $offset = isset($data['offset']) ? $data['offset'] : "";
            $from_date = isset($data['from_date']) ? $data['from_date'] : "";
            $to_date = isset($data['to_date']) ? $data['to_date'] : "";


            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($offset) && $offset != 0) {
                $response['status'] = 0;
                $response['message'] = 'Invalid offset';
            } else {
                try {

                    $limit = 50;
                    $offset = $offset * $limit;
                    $condition = "df.doctor_assigned_pen_id > 0 and df.thinapp_id = $thin_app_id";
                    $date_condition = " and DATE(df.created) = '" . date('Y-m-d') . "'";
                    if (!empty($from_date) && !empty($to_date)) {
                        $from_date = DateTime::createFromFormat('d-m-Y', $from_date);
                        $from_date = $from_date->format('Y-m-d');
                        $to_date = DateTime::createFromFormat('d-m-Y', $to_date);
                        $to_date = $to_date->format('Y-m-d');
                        $date_condition = " and DATE(df.created) >= '$from_date' and DATE(df.created) <= '$to_date'";
                    }

                    $condition .= $date_condition;
                    $query = "select count(concat(df.doctor_id,df.doctor_assigned_pen_id)) as total, dap.pen_name, doctor.name as doctor_name from drive_files as df join doctor_assigned_pen as dap on df.doctor_assigned_pen_id = dap.id left join appointment_staffs as doctor on  df.doctor_id = doctor.id where $condition group by concat(df.doctor_id,df.doctor_assigned_pen_id)  limit $offset, $limit";
                    $connection = ConnectionUtil::getConnection();
                    $message_list = $connection->query($query);
                    if ($message_list->num_rows) {
                        $final_array = mysqli_fetch_all($message_list, MYSQLI_ASSOC);
                        $response['status'] = 1;
                        $response['message'] = "List found";
                        $response['data']['list'] = $final_array;
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "List Not Found";

                    }


                } catch (Exception $e) {

                    $response['status'] = 0;
                    $response['message'] = "server error";
                }

            }
            Custom::sendResponse($response);
        }
        exit();
    }

    public static function get_doctor_current_token_number()
    {


        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : "";


            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($doctor_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid doctor';
            } else {
                try {

                    $query = "select acss.queue_number from appointment_customer_staff_services as acss where acss.appointment_staff_id = $doctor_id and DATE(acss.appointment_datetime) = DATE(NOW()) and acss.status IN('NEW','CONFIRM','RESCHEDULE') order by acss.appointment_datetime limit 1";
                    $connection = ConnectionUtil::getConnection();
                    $message_list = $connection->query($query);
                    if ($message_list->num_rows) {
                        $final_array = mysqli_fetch_all($message_list, MYSQLI_ASSOC);
                        $response['status'] = 1;
                        $response['message'] = "List found";
                        $response['data']['list'] = $final_array;

                    } else {
                        $response['status'] = 0;
                        $response['message'] = "List Not Found";

                    }

                } catch (Exception $e) {

                    $response['status'] = 0;
                    $response['message'] = "server error";
                }

            }
            Custom::sendResponse($response);
        }
        exit();
    }


    public static function tracker_manage_service()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $list_array = isset($data['list_array']) ? $data['list_array'] : "";
            $appointment_id = isset($data['appointment_id']) ? $data['appointment_id'] : 0;
            $action_type = isset($data['action_type']) ? $data['action_type'] : "";
            $selected_type = !empty($data['selected_type']) ? $data['selected_type'] : 'SERVICE';
            if (!empty($data['selected_type'])) {
                $selected_type = $data['selected_type'];
            } else {
                $selected_type = Custom::get_appointment_selected_type($appointment_id);
                $selected_type = !empty($selected_type) ? $selected_type : 'SERVICE';
            }


            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if ($action_type != "ADD" && $action_type != "LIST") {
                $response['status'] = 0;
                $response['message'] = 'Invalid action type';
            } else if ($action_type == "ADD" && empty($list_array)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid services';
            } else {


                if ($action_type == "ADD") {

                    $appointment_data = $result = array();

                    $appointment_data = Custom::get_appointment_custom_data($appointment_id);
                    $list_array = @json_decode($list_array, true)['template_array'];
                    if (!empty($appointment_data) && !empty($list_array)) {
                        $connection = ConnectionUtil::getConnection();
                        $connection->autocommit(false);
                        $sql = "delete from  tracker_time_differences where appointment_id = ?";
                        $delete_stmt = $connection->prepare($sql);
                        $delete_stmt->bind_param('s', $appointment_id);
                        $delete_stmt->execute();
                        foreach ($list_array as $key => $value) {

                            $created = Custom::created();
                            $doctor_id = $appointment_data['appointment_staff_id'];
                            $service_id = $appointment_data['appointment_service_id'];
                            $address_id = $appointment_data['appointment_address_id'];
                            if ($value['is_default'] == "NO" && $value['is_selected'] == "YES" && $selected_type == "SERVICE") {
                                $assigned_service_id = $value['service_id'];
                                $service_data = Custom::get_service_by_id($assigned_service_id);
                                $minutes = 0;
                                if (!empty($service_data)) {
                                    $minutes = (int)$service_data['service_slot_duration'];
                                }
                                $appointment_date = date('Y-m-d', strtotime($appointment_data['appointment_datetime']));
                                $sql = "INSERT INTO tracker_time_differences (thinapp_id, doctor_id, address_id, service_id, assigned_service_id, appointment_id, minutes, appointemnt_date,  created, modified  ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                                $stmt = $connection->prepare($sql);
                                $stmt->bind_param('ssssssssss', $thin_app_id, $doctor_id, $address_id, $service_id, $assigned_service_id, $appointment_id, $minutes, $appointment_date, $created, $created);
                                $result[] = $stmt->execute();
                            } else if ($selected_type == "TEMPLATE" || $selected_type == "TIME_STRING") {

                                $selected_value = $value['service_name'];
                                $assigned_service_id = 0;
                                $minutes = 0;
                                if ($selected_type == "TIME_STRING") {
                                    $tmp = explode("##", $selected_value);
                                    $hours = preg_replace('/\D/', '', $tmp[0]);
                                    $minutes = preg_replace('/\D/', '', $tmp[1]);
                                    $minutes = ($hours * 60) + $minutes;
                                }
                                if ($selected_type == "TEMPLATE") {
                                    if (strpos(strtolower($selected_value), "min") !== false || strpos(strtolower($selected_value), "mins") !== false) {
                                        $minutes = preg_replace('/\D/', '', $selected_value);
                                    } else if (strpos(strtolower($selected_value), "hour") !== false || strpos(strtolower($selected_value), "hours") !== false) {
                                        $hours = preg_replace('/\D/', '', $selected_value);
                                        $minutes = ($hours * 60);
                                    }
                                }
                                $appointment_date = date('Y-m-d', strtotime($appointment_data['appointment_datetime']));
                                $sql = "INSERT INTO tracker_time_differences (selected_type, selected_value, thinapp_id, doctor_id, address_id, service_id, assigned_service_id, appointment_id, minutes, appointemnt_date,  created, modified  ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                                $stmt = $connection->prepare($sql);
                                $stmt->bind_param('ssssssssssss', $selected_type, $selected_value, $thin_app_id, $doctor_id, $address_id, $service_id, $assigned_service_id, $appointment_id, $minutes, $appointment_date, $created, $created);
                                $result[] = $stmt->execute();
                            }
                        }
                        if (!in_array(false, $result)) {
                            $connection->commit();
                            $response['status'] = 1;
                            $response['message'] = "Service update successfully";
                            $doctor_id = $appointment_data['appointment_staff_id'];
                            $address_id = $appointment_data['appointment_address_id'];
                            Custom::delete_tracker_time_difference_cache($appointment_data['appointment_datetime'], $doctor_id, $address_id);
                        } else {
                            $response['status'] = 0;
                            $response['message'] = "Sorry service could not update";
                        }
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Invalid list or appointment";
                    }
                } else {
                    $template_array = array("1 Min", "2 Mins", "3 Mins", "4 Mins", "5 Mins", "6 Mins", "7 Mins", "8 Mins", "9 Mins", "10 Mins", "15 Mins", "20 Mins", "30 Mins", "1 Hour", "2 Hours");
                    $minutes_array = array("0 Min", "1 Min", "2 Mins", "3 Mins", "4 Mins", "5 Mins", "6 Mins", "7 Mins", "8 Mins", "9 Mins", "10 Mins", "11 Mins", "12 Mins", "13 Mins", "14 Mins", "15 Mins", "16 Mins", "17 Mins", "18 Mins", "19 Mins", "20 Mins", "21 Mins", "22 Mins", "23 Mins", "24 Mins", "25 Mins", "26 Mins", "27 Mins", "28 Mins", "29 Mins", "30 Mins", "31 Mins", "32 Mins", "33 Mins", "34 Mins", "35 Mins", "36 Mins", "37 Mins", "38 Mins", "39 Mins", "40 Mins", "41 Mins", "42 Mins", "43 Mins", "44 Mins", "45 Mins", "46 Mins", "47 Mins", "48 Mins", "49 Mins", "50 Mins", "51 Mins", "52 Mins", "53 Mins", "54 Mins", "55 Mins", "56 Mins", "57 Mins", "58 Mins", "59 Mins", "60 Mins");
                    $hours_array = array("0 Hour", "1 Hour", "2 Hours", "3 Hours", "4 Hours", "5 Hours", "6 Hours", "7 Hours", "8 Hours", "9 Hours", "10 Hours", "11 Hours", "12 Hours", "13 Hours", "14 Hours", "15 Hours", "16 Hours", "17 Hours", "18 Hours", "19 Hours", "20 Hours", "21 Hours", "22 Hours", "23 Hours", "24 Hours");
                    $connection = ConnectionUtil::getConnection();
                    $query = "SELECT app_ser.id AS service_id, '' as selected_value, app_ser.name AS service_name,  IF(( SELECT @app_service_id:= acss.appointment_service_id from appointment_customer_staff_services AS acss  WHERE acss.id = $appointment_id ) = app_ser.id,'YES','NO') AS is_default  , if( ( @app_service_id = app_ser.id ) OR (( SELECT COUNT(*) from tracker_time_differences AS ttd  WHERE ttd.appointment_id = $appointment_id AND ttd.assigned_service_id = app_ser.id AND ttd.STATUS = 'ACTIVE' and ttd.selected_type ='SERVICE' ) = 1), 'YES','NO') AS is_selected  FROM appointment_services AS app_ser WHERE app_ser.thinapp_id = $thin_app_id AND app_ser.STATUS = 'ACTIVE' ORDER BY app_ser.NAME asc";
                    $list = $connection->query($query);
                    if ($list->num_rows) {
                        $final_array = mysqli_fetch_all($list, MYSQLI_ASSOC);
                        $response['status'] = 1;
                        $response['message'] = "List found";
                        $response['data']['list'] = $final_array;
                        $response['data']['selected_type'] = $selected_type;
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "List Not Found";
                    }

                    $selected_values = array();
                    if ($selected_type == "TIME_STRING" || $selected_type == "TEMPLATE") {
                        $query = "SELECT ttd.selected_value FROM tracker_time_differences AS ttd WHERE ttd.appointment_id = $appointment_id AND selected_type = '$selected_type'";
                        $list = $connection->query($query);
                        if ($list->num_rows) {
                            $final_array = mysqli_fetch_all($list, MYSQLI_ASSOC);
                            $selected_values = array_column($final_array, 'selected_value');
                        }
                    }

                    /* CODE FOR TEMPLATE ARRAY*/
                    foreach ($template_array as $key => $template) {
                        $temp = array();
                        $temp['service_id'] = 0;
                        $temp['is_default'] = 'NO';
                        $temp['service_name'] = $template;
                        if (!empty($selected_values) && in_array($template, $selected_values) && $selected_type == "TEMPLATE") {
                            $temp['is_selected'] = 'YES';
                        } else {
                            $temp['is_selected'] = 'NO';
                        }
                        $response['data']['template'][] = $temp;
                    }
                    /* CODE FOR MINUTES ARRAY*/
                    foreach ($minutes_array as $key => $minutes) {
                        $temp = array();
                        $temp['service_id'] = 0;
                        $temp['is_default'] = 'NO';
                        $temp['service_name'] = $minutes;
                        if (!empty($selected_values[0]) && strpos($selected_values[0], $minutes) !== false && $selected_type == "TIME_STRING") {
                            $temp['is_selected'] = 'YES';
                        } else {
                            $temp['is_selected'] = 'NO';
                        }
                        $response['data']['minutes'][] = $temp;
                    }

                    /* CODE FOR HOURS ARRAY*/
                    foreach ($hours_array as $key => $hours) {
                        $temp = array();
                        $temp['service_id'] = 0;
                        $temp['is_default'] = 'NO';
                        $temp['service_name'] = $hours;
                        if (!empty($selected_values[0]) && strpos($selected_values[0], $hours) !== false && $selected_type == "TIME_STRING") {
                            $temp['is_selected'] = 'YES';
                        } else {
                            $temp['is_selected'] = 'NO';
                        }
                        $response['data']['hours'][] = $temp;
                    }
                }


            }
            Custom::sendResponse($response);
            Custom::send_process_to_background();
            if ($action_type == "ADD") {
                if (!empty($appointment_id)) {
                    $appointment_data = WebservicesFunction::get_appointment_all_data_id($appointment_id);
                    if (!empty($appointment_data)) {
                        $token_array = Custom::get_upcoming_appointment_user_token($thin_app_id, $appointment_data['doctor_id'], $appointment_data['address_id'], $appointment_data['appointment_id']);
                        if (!empty($token_array)) {
                            $option = array(
                                'thinapp_id' => $thin_app_id,
                                'staff_id' => 0,
                                'customer_id' => 0,
                                'service_id' => 0,
                                'channel_id' => 0,
                                'role' => "CUSTOMER",
                                'flag' => 'APPOINTMENT_TRACKER',
                                'title' => "New Tracker Request",
                                'message' => "Your tracker message",
                                'description' => "Your tracker message",
                                'chat_reference' => '',
                                'module_type' => 'APPOINTMENT_TRACKER',
                                'module_type_id' => 0,
                                'firebase_reference' => ""
                            );
                            Custom::send_notification_via_token($option, $token_array, $thin_app_id);
                        }
                    }
                }
            }
        }
        exit();


    }

    public static function get_user_app_list()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $role_type = isset($data['role_type']) ? $data['role_type'] : "";
            $mobile = isset($data['mobile']) ? Custom::create_mobile_number($data['mobile']) : "";
            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($role_type)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile number';
            } else if (!in_array($role_type, array('ADMIN', 'LAB', 'PHARMACY', 'DOCTOR', 'RECEPTIONIST'))) {
                $response['status'] = 0;
                $response['message'] = 'Invalid role type';
            } else {
                $connection = ConnectionUtil::getConnection();
                if ($role_type == "ADMIN") {
                    $query = "select t.id, t.name from users as u join thinapps as t on t.id = u.thinapp_id join customer_lead as cl on cl.app_id = u.thinapp_id and cl.status = 'DONE' where u.mobile = '$mobile' and u.role_id = 5 order by t.name asc";
                } else {
                    if ($role_type == 'LAB' || $role_type == 'PHARMACY') {
                        $query = "select t.id, t.name from lab_pharmacy_users AS lpu join thinapps as t on t.id = lpu.thinapp_id WHERE lpu.mobile = '$mobile' and lpu.role_type = '$role_type' AND lpu.STATUS='ACTIVE' AND lpu.request_status ='APPROVED' order by t.name ASC";
                    } else {
                        $query = "select t.id, t.name from appointment_staffs as app_staff join thinapps as t on t.id = app_staff.thinapp_id join customer_lead as cl on cl.app_id = app_staff.thinapp_id and cl.status = 'DONE' where app_staff.mobile = '$mobile' and app_staff.staff_type = '$role_type' AND app_staff.`status`='ACTIVE' order by t.name asc";
                    }
                }
                $data_list = $connection->query($query);
                if ($data_list->num_rows) {
                    $list = mysqli_fetch_all($data_list, MYSQLI_ASSOC);
                    $response['status'] = 1;
                    $response['message'] = "List found";
                    $response['data']['list'] = $list;
                } else {
                    $response['status'] = 0;
                    $response['message'] = "List not found.";
                }
            }
            Custom::sendResponse($response);
        }
        exit();
    }

    public static function edit_app_package()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $package_name = isset($data['package_name']) ? $data['package_name'] : "";
            $firebase_project_id = isset($data['firebase_project_id']) ? $data['firebase_project_id'] : "";
            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($package_name)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid package name';
            } else {
                $connection = ConnectionUtil::getConnection();
                $created = Custom::created();
                $apk_url = Custom::create_playstor_url($package_name);
                $firebase_server_key = '';
                if($firebase_project_id=='670774162115'){
                    $firebase_server_key = FIREBASE_KEY;
                }else if($firebase_project_id=='1085453419620'){
                    $firebase_server_key = FIREBASE_KEY_MENGAGE_TECH_PROJECT;
                }

                $web_booking_url = "";
                $url = SITE_PATH."doctor/department/".base64_encode($thin_app_id);
                $url = Custom::short_url($url);
                if(!empty($url)){
                    $web_booking_url =$url;
                }
                $sql = "update thinapps set web_booking_url =?, firebase_server_key=?, apk_url=?, package_name = ?,  modified = ? where id = ?";
                $stmt = $connection->prepare($sql);
                $stmt->bind_param('ssssss', $web_booking_url, $firebase_server_key, $apk_url, $package_name, $created, $thin_app_id);
                if ($stmt->execute()) {
                    $response['status'] = 1;
                    $response['message'] = "Package updated successfully";
                    WebservicesFunction::deleteJson(array("get_app_enabled_functionality_$thin_app_id"), 'permission');
                } else {
                    $response['status'] = 0;
                    $response['message'] = "Sorry package could not update";
                }

            }
            Custom::sendResponse($response);
        }
        exit();


    }

    public static function send_follow_up_alert($data = null)
    {


        $return_type = true;
        if (empty($data)) {
            $return_type = false;
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);
        }

        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $follow_up_id = isset($data['follow_up_id']) ? $data['follow_up_id'] : "";
            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($follow_up_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid follow up id';
            } else {
                $response['status'] = 1;
                $response['message'] = "Follow up notification sent";
                $send_notification = true;
            }

            Custom::sendResponse($response);
            Custom::send_process_to_background();
            if ($send_notification) {
                $query = "SELECT u.app_installed_status, t.name as app_name, IFNULL(ac.first_name,c.child_name) AS patient_name, IFNULL(ac.mobile,c.mobile) AS patient_mobile, app_staff.name as doctor_name, fur.reminder_date, fur.created AS follow_up_created, u.firebase_token FROM follow_up_reminders AS fur JOIN thinapps AS t ON t.id = fur.thinapp_id LEFT JOIN appointment_staffs AS app_staff ON fur.doctor_id = app_staff.id LEFT JOIN appointment_customers AS ac ON ac.id = fur.appointment_customer_id LEFT JOIN childrens AS c ON c.id = fur.children_id LEFT JOIN users AS u ON ( (u.mobile = ac.mobile AND u.thinapp_id = ac.thinapp_id) OR (u.mobile = c.mobile AND u.thinapp_id = c.thinapp_id) ) WHERE fur.id = $follow_up_id limit 1";
                $connection = ConnectionUtil::getConnection();
                $row_data = $connection->query($query);
                if ($row_data->num_rows) {
                    $patient_data = mysqli_fetch_assoc($row_data);
                    $reminder_date = $patient_data['reminder_date'];
                    if (!empty($patient_data['doctor_name'])) {
                        $doctor_name = Custom::get_doctor_first_name($patient_data['doctor_name']);
                    } else {
                        $doctor_name = $patient_data['app_name'];
                    }
                    $label_date = date('Y-m-d', strtotime($reminder_date));
                    $date = date('d/m/Y', strtotime($reminder_date));
                    $label = Custom::get_date_label($label_date);
                    $message = "Your appointment with  $doctor_name is due on $label " . $date . ". Please book an appointment.";
                    $pat_mobile = $patient_data['patient_mobile'];
                    $option = array(
                        'thinapp_id' => $thin_app_id,
                        'channel_id' => 0,
                        'role' => "USER",
                        'flag' => 'FOLLOW_UP',
                        'title' => mb_strimwidth('Reminder for doctor ' . $doctor_name, 0, 100, '...'),
                        'module_title' => mb_strimwidth('Reminder for doctor ' . $doctor_name, 0, 100, '...'),
                        'message' => mb_strimwidth($message, 0, 250, '...'),
                        'description' => "",
                        'chat_reference' => '',
                        'module_type' => 'FOLLOW_UP',
                        'module_type_id' => $follow_up_id,
                        'child_id' => 0,
                        'firebase_reference' => ""

                    );

                    if (!empty($patient_data['firebase_token'])) {
                        Custom::send_notification_via_token($option, array($patient_data['firebase_token']), $thin_app_id);
                    }
                    if (!empty($pat_mobile)) {
                        Custom::send_single_sms($pat_mobile, ($message), $thin_app_id);
                    }


                }
            }

        }
        exit();

    }

    public static function upload_third_party_attachemnt()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $third_party_uhid = isset($data['third_party_uhid']) ? $data['third_party_uhid'] : "";
            $attachment_file_path = isset($data['file_path']) ? $data['file_path'] : "";
            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($third_party_uhid)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid uhid ';
            } else if (empty($attachment_file_path)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid file path';
            } else {
                $attachment_file_path = trim($attachment_file_path);
                $save_file_name = Custom::getFileName($attachment_file_path);
                $save_file_type = Custom::getFileType($save_file_name);
                $save_file_size = Custom::getRemoteFileSize($attachment_file_path, "MB");
                $connection = ConnectionUtil::getConnection();
                $query = "SELECT u.id as user_id, u.thinapp_id, u.mobile, df.id AS folder_id, df.created FROM appointment_customers AS ac JOIN drive_folders AS df ON df.appointment_customer_id =ac.id JOIN users AS u ON u.thinapp_id = 134 AND  u.role_id = 5 WHERE ac.thinapp_id = $thin_app_id AND ac.third_party_uhid = '$third_party_uhid'";
                $list = $connection->query($query);
                if ($list->num_rows) {
                    $data = mysqli_fetch_assoc($list);
                    $user_id = $data['user_id'];
                    $thin_app_id = $data['thinapp_id'];
                    $drive_folder_id = $data['folder_id'];
                    $created = $data['created'];
                    $mobile = $data['mobile'];
                    $save_category_id = 2;
                    $third_party_attachemnt = "YES";
                    $sql = "INSERT INTO drive_files (third_party_attachemnt, file_category_master_id, user_id, thinapp_id, mobile, file_type, file_name, file_size, file_path, drive_folder_id, created, modified) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                    $stmt_attachemnt = $connection->prepare($sql);
                    $stmt_attachemnt->bind_param('ssssssssssss', $third_party_attachemnt, $save_category_id, $user_id, $thin_app_id, $mobile, $save_file_type, $save_file_name, $save_file_size, $attachment_file_path, $drive_folder_id, $created, $created);
                    if ($stmt_attachemnt->execute()) {
                        $total = 1;
                        $query = "update drive_folders set total_file_count = total_file_count + ? where id = ?";
                        $stmt_update_source_folder = $connection->prepare($query);
                        $stmt_update_source_folder->bind_param('ss', $total, $drive_folder_id);
                        if ($stmt_update_source_folder->execute()) {
                            $response['status'] = 1;
                            $response['message'] = "File save successfully";
                        } else {
                            $response['status'] = 0;
                            $response['message'] = "File could not save";
                        }

                    } else {
                        $response['status'] = 0;
                        $response['message'] = "File could not save";
                    }

                } else {
                    $response['status'] = 0;
                    $response['message'] = "User Not Found";
                }
            }
        }


        echo json_encode($response);
        die;


    }

    public static function add_app_stack_trace()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $message = isset($data['message']) ? ($data['message']) : "";
            $device_info = isset($data['device_info']) ? ($data['device_info']) : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($message)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid message';
            } else {


                $connection = ConnectionUtil::getConnection();
                $created = Custom::created();
                $sql = "INSERT INTO app_stack_traces (thinapp_id, user_id, message, device_info, created) VALUES (?, ?, ?, ?, ?)";
                $stmt_hour = $connection->prepare($sql);
                $stmt_hour->bind_param('sssss', $thin_app_id, $user_id, $message, $device_info, $created);
                if ($stmt_hour->execute()) {
                    $response['status'] = 1;
                    $response['message'] = "Add successfully";
                } else {
                    $response['status'] = 0;
                    $response['message'] = "Unable to save.";
                }

            }
            Custom::sendResponse($response);

        }
        exit();
    }


    public static function export_mobile_contact()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $list_array = isset($data['list_array']) ? ($data['list_array']) : "";
            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($list_array)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid contact list';
            } else {

                $response['status'] = 1;
                $response['message'] = "Patient Add successfully";
                Custom::send_process_to_background();
                Custom::sendResponse($response);
                $total_patient_save = $not_save = $duplicate_patient = 0;
                $list_array = json_decode($list_array['arr'], true);
                foreach ($list_array as $key => $patient) {
                    $patient_mobile = $patient['mobile'];
                    $patient_name = $patient['name'];
                    $customer_data = Custom::search_customer_name($thin_app_id, $patient_mobile, $patient_name);
                    if (empty($customer_data)) {
                        $customer = array();
                        $customer['app_key'] = $app_key;
                        $customer['thin_app_id'] = $thin_app_id;
                        $customer['user_id'] = $user_id;
                        $customer['first_name'] = $patient_name;
                        $customer['mobile'] = $patient_mobile;
                        $customer['country_code'] = "+91";
                        $result = WebservicesFunction::appointment_add_customer($customer);
                        $result = $customer_data = json_decode($result, true);
                        if ($result['status'] == 1) {
                            $response['status'] = 1;
                            $response['message'] = "Patient Added Successfully";
                            $response['total_patient_save'] = $total_patient_save++;
                        } else {
                            $response['status'] = 0;
                            $response['message'] = $result['message'];
                            $response['patient_not_save'] = $not_save++;
                        }
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Patient already exist.";
                        $response['duplicate'] = $duplicate_patient++;
                    }
                }

            }


        }
        exit();
    }

    public static function get_contact_us_detail()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else {

                $response['status'] = 1;
                $response['message'] = "Detail Found";
                $response['data']['email'] = SUPPORT_EMAIL;
                $response['data']['mobile'] = SUPPORT_MOBILE;
                $response['data']['address'] = SUPPORT_ADDRESS;
                $response['data']['whats_app_number'] = SUPPORT_WHATS_APP_NUMBER;
            }
            Custom::sendResponse($response);

        }
        exit();
    }

    public static function update_drive_setting()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $gd_api_key = !empty($data['gd_api_key']) ? $data['gd_api_key'] : "";
            $gd_client_id = !empty($data['gd_client_id']) ? $data['gd_client_id'] : "";
            $gd_access_token = !empty($data['gd_access_token']) ? $data['gd_access_token'] : "";
            $od_client_id = !empty($data['od_client_id']) ? $data['od_client_id'] : "";
            $od_client_secret = !empty($data['od_client_secret']) ? $data['od_client_secret'] : "";
            $od_access_token = !empty($data['od_access_token']) ? $data['od_access_token'] : "";
            $db_api_key = !empty($data['db_api_key']) ? $data['db_api_key'] : "";
            $db_client_secret = !empty($data['db_client_secret']) ? $data['db_client_secret'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else {
                $connection = ConnectionUtil::getConnection();
                $created = Custom::created();
                $sql = "UPDATE thinapps set gd_api_key =?, gd_client_id = ?, gd_access_token = ?, od_client_id=?, od_client_secret=?, od_access_token=?, db_api_key=?, db_client_secret =?,  modified =?  where id = ?";
                $stmt = $connection->prepare($sql);
                $stmt->bind_param('ssssssssss', $gd_api_key, $gd_client_id, $gd_access_token, $od_client_id, $od_client_secret, $od_access_token, $db_api_key, $db_client_secret, $created, $thin_app_id);
                if ($stmt->execute()) {
                    $response['status'] = 1;
                    $response['message'] = "Setting updated successfully";
                } else {
                    $response['status'] = 0;
                    $response['message'] = "Sorry setting could not update";
                }
            }
            Custom::sendResponse($response);
        }
        exit();
    }


    public static function manage_block_patient()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $action = isset($data['action']) ? $data['action'] : "";
            $patient_mobile = isset($data['patient_mobile']) ? Custom::create_mobile_number($data['patient_mobile']) : "";
            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($patient_mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid patient mobile ';
            } else if ($action != 'BLOCK' && $action != 'UNBLOCK') {
                $response['status'] = 0;
                $response['message'] = 'Invalid action';
            } else {
                try {
                    $created = Custom::created();
                    $query = "SELECT abu.* FROM app_blocked_users AS abu WHERE abu.thinapp_id = $thin_app_id AND abu.mobile ='$patient_mobile' limit 1 ";
                    $connection = ConnectionUtil::getConnection();
                    $data_list = $connection->query($query);
                    if ($data_list->num_rows) {
                        $data_list = mysqli_fetch_assoc($data_list);
                        $status = ($action == 'BLOCK') ? 'ACTIVE' : 'INACTIVE';
                        $label = ($action == 'BLOCK') ? 'block' : 'unblock';
                        $sql = "update app_blocked_users set status = ?, modified=? where id = ?";
                        $stmt = $connection->prepare($sql);
                        $stmt->bind_param('sss', $status, $created, $data_list['id']);
                        if ($stmt->execute()) {
                            $response['status'] = 1;
                            $response['message'] = "Patient $label" . "ed successfully";
                        } else {
                            $response['status'] = 0;
                            $response['message'] = "Sorry patient could not $label";
                        }
                    } else {
                        $sql = "INSERT INTO app_blocked_users (thinapp_id, mobile, created, modified) VALUES (?, ?, ?, ?)";
                        $stmt = $connection->prepare($sql);
                        $stmt->bind_param('ssss', $thin_app_id, $patient_mobile, $created, $created);
                        if ($stmt->execute()) {
                            $response['status'] = 1;
                            $response['message'] = "Patient blocked successfully";
                        } else {
                            $response['status'] = 0;
                            $response['message'] = "Sorry patient could not block";
                        }
                    }
                } catch (Exception $e) {
                    $response['status'] = 0;
                    $response['message'] = "server error";
                }

            }
            Custom::sendResponse($response);
        }
        exit();
    }

    public static function get_doctor_appointment_service_list()
    {


        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : "";
            $address_id = isset($data['address_id']) ? $data['address_id'] : "";


            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($doctor_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid doctor';
            } else if (empty($address_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid address';
            } else {
                try {
                    if (Custom::check_app_enable_permission($thin_app_id, 'NEW_QUICK_APPOINTMENT')) {
                        $query = "SELECT $address_id as address_id, das.doctor_id, ser.id, ser.name AS service_name FROM doctor_appointment_setting AS das join appointment_services AS ser ON ser.id = das.appointment_service_id JOIN appointment_staffs AS staff ON staff.id = das.doctor_id WHERE das.setting_type = staff.appointment_setting_type AND das.status = 'ACTIVE' AND das.doctor_id = $doctor_id AND das.appointment_address_id = $address_id GROUP BY das.appointment_service_id";
                    } else {
                        $query = "SELECT $address_id as address_id, ass.appointment_staff_id as doctor_id, ser.id, ser.name AS service_name FROM appointment_staff_services AS ass join appointment_services AS ser ON ser.id = ass.appointment_service_id WHERE ass.status = 'ACTIVE' AND ass.appointment_staff_id = $doctor_id";
                    }
                    $connection = ConnectionUtil::getConnection();
                    $message_list = $connection->query($query);
                    if ($message_list->num_rows) {
                        $final_array = mysqli_fetch_all($message_list, MYSQLI_ASSOC);
                        $response['status'] = 1;
                        $response['message'] = "List found";
                        $response['data']['list'] = $final_array;
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "List Not Found";

                    }
                } catch (Exception $e) {

                    $response['status'] = 0;
                    $response['message'] = "server error";
                }

            }
            Custom::sendResponse($response);
        }
        exit();
    }

    public static function kos_number_verification_otp()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile number';
            } else {
                $verification_code = Custom::getRandomString(4);
                if ($thin_app_id == 134 && $mobile == "+919610639103") {
                    $verification_code = 2222;
                }
                $option = array(
                    'username' => $mobile,
                    'mobile' => $mobile,
                    'verification' => $verification_code,
                    'thinapp_id' => $thin_app_id
                );

                if (Custom::send_otp($option)) {
                    $response['status'] = 1;
                    $response['message'] = "OTP send successfully";
                    $response['data']['otp'] = base64_encode($verification_code);
                } else {
                    $response['status'] = 0;
                    $response['message'] = "Verification code could not send";
                }
            }
            Custom::sendResponse($response);
        }
        exit();
    }

    public static function get_appointment_by_number()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['customer_mobile']) ? Custom::create_mobile_number($data['customer_mobile']) : "";
            $customer_name = isset($data['customer_name']) ? trim($data['customer_name']) : "";
            $list_for = isset($data['list_for']) ? $data['list_for'] : "APPOINTMENT";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile number';
            } else {
                $connection = ConnectionUtil::getConnection();
                $patientHistoryUrl = SITE_PATH . 'tracker/get_patient_history/';
                if ($list_for == "PATIENT") {
                    $query = "SELECT * FROM (SELECT CONCAT('$patientHistoryUrl',TO_BASE64(ac.thinapp_id),'/',TO_BASE64(ac.uhid)) as history_url, ac.first_name AS patient_name, ac.id AS patient_id  FROM appointment_customers AS ac WHERE ac.mobile = '$mobile' AND ac.status='ACTIVE' and ac.thinapp_id = $thin_app_id UNION ALL SELECT CONCAT('$patientHistoryUrl',TO_BASE64(c.thinapp_id),'/',TO_BASE64(c.uhid)) as history_url, c.child_name AS patient_name, c.id AS patient_id FROM childrens AS c WHERE c.mobile = '$mobile' AND c.status='ACTIVE' AND c.thinapp_id = $thin_app_id) final ORDER BY final.patient_name asc";
                    $list_object = $connection->query($query);
                    if ($list_object->num_rows) {
                        $response['status'] = 1;
                        $response['message'] = "Patient Found";
                        $response['data']['list'] = mysqli_fetch_all($list_object, MYSQL_ASSOC);
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "No patient list found";
                    }
                } else if ($list_for == "PRESCRIPTION" || $list_for == "LAB_REPORT") {
                    $category = ($list_for=="LAB_REPORT")?"4,5":"6";
                    $label = ($list_for=="LAB_REPORT")?"report":"prescription";
                    $query = "SELECT * FROM ( SELECT ac.first_name AS patient_name, fi.id AS file_id, df.id AS folder_id, fi.file_path, DATE_FORMAT(fi.created,'%d-%m-%Y %H:%i') AS created  FROM appointment_customers AS ac JOIN drive_folders AS df ON df.appointment_customer_id = ac.id JOIN drive_files AS fi ON fi.drive_folder_id = df.id AND fi.file_category_master_id IN($category) WHERE ac.mobile = '$mobile' AND ac.status='ACTIVE' and ac.thinapp_id = $thin_app_id UNION ALL SELECT c.child_name AS patient_name, fi.id AS file_id, df.id AS folder_id, fi.file_path, DATE_FORMAT(fi.created,'%d-%m-%Y %H:%i') AS created FROM childrens AS c JOIN drive_folders AS df ON df.children_id = c.id JOIN drive_files AS fi ON fi.drive_folder_id = df.id AND fi.file_category_master_id IN($category) WHERE c.mobile = '$mobile' AND c.status='ACTIVE' AND c.thinapp_id = $thin_app_id)  final ORDER BY final.file_id desc";
                    $list_object = $connection->query($query);
                    if ($list_object->num_rows) {
                        $response['status'] = 1;
                        $response['message'] = ucfirst($label)." Found";
                        $response['data']['list'] = mysqli_fetch_all($list_object, MYSQL_ASSOC);
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "No $label list found";
                    }
                } else {
                    $condition = "";
                    if (!empty($customer_name)) {
                        $condition = " AND ( ac.first_name = '$customer_name' OR c.child_name = '$customer_name') ";
                    }

                    $query = "SELECT CONCAT('$patientHistoryUrl',TO_BASE64(acss.thinapp_id),'/',TO_BASE64(IFNULL(ac.uhid,c.uhid))) as history_url, aa.address, acss.id AS appointment_id, acss.amount, acss.payment_status, staff.name AS doctor_name, acss.queue_number AS token_number, IFNULL(ac.first_name,c.child_name) AS patient_name, acss.slot_time AS time FROM appointment_customer_staff_services AS acss join appointment_addresses as aa on aa.id = acss.appointment_address_id left JOIN appointment_customers AS ac ON ac.id = acss.appointment_customer_id LEFT JOIN childrens AS c ON c.id = acss.children_id JOIN appointment_staffs AS staff ON  acss.appointment_staff_id = staff.id WHERE acss.status IN('NEW','CONFIRM','RESCHEDULE') AND DATE(acss.appointment_datetime) = DATE(NOW())  AND acss.thinapp_id = $thin_app_id AND ( ac.mobile = '$mobile' OR c.mobile = '$mobile') $condition ORDER BY acss.appointment_datetime asc";
                    $list_object = $connection->query($query);
                    if ($list_object->num_rows) {
                        $response['status'] = 1;
                        $response['message'] = "Appointment Found";
                        $response['data']['list'] = mysqli_fetch_all($list_object, MYSQL_ASSOC);
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "No appointment booked for this user";
                    }
                }


            }
            Custom::sendResponse($response);
        }
        exit();
    }

    public static function order_prescription_medicine()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $patient_mobile = isset($data['patient_mobile']) ? Custom::create_mobile_number($data['patient_mobile']) : "";
            $patient_name = isset($data['patient_name']) ? trim($data['patient_name']) : "";
            $prescription_id = isset($data['prescription_id']) ? trim($data['prescription_id']) : 0;
            $prescription_url = isset($data['prescription_url']) ? trim($data['prescription_url']) : "";
            $state = isset($data['state']) ? trim($data['state']) : "";
            $city = isset($data['city']) ? trim($data['city']) : "";
            $address = isset($data['address']) ? trim($data['address']) : "";
            $order_from = isset($data['order_from']) ? trim($data['order_from']) : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($patient_mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid patient mobile';
            } else if (empty($prescription_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid prescription id';
            } else if (empty($prescription_url)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid prescription url';
            } else if (empty($address)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid address';
            } else if (empty($order_from)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid address';
            } else {
                $connection = ConnectionUtil::getConnection();
                $query = "SELECT d_file.doctor_id, d_file.drive_folder_id, df.appointment_customer_id, df.children_id, pmo.status AS order_status, u.id AS user_id FROM drive_files AS d_file JOIN drive_folders AS df ON df.id = d_file.drive_folder_id  LEFT JOIN users AS  u ON  u.mobile ='$patient_mobile' and u.thinapp_id = d_file.thinapp_id LEFT join prescription_medicine_orders AS pmo ON pmo.id = (SELECT MAX(inner_pmo.id) FROM prescription_medicine_orders AS inner_pmo WHERE inner_pmo.prescription_id = $prescription_id ) WHERE d_file.id = $prescription_id limit 1";
                $data_object = $connection->query($query);
                if ($data_object->num_rows) {
                    $custom_data = mysqli_fetch_assoc($data_object);
                    $drive_folder_id = $custom_data['drive_folder_id'];
                    $doctor_id = $custom_data['doctor_id'];
                    $appointment_customer_id = $custom_data['appointment_customer_id'];
                    $children_id = $custom_data['children_id'];
                    $order_status = $custom_data['order_status'];
                    $created_by_user_id = $user_id;
                    if ($thin_app_id == MENGAGE_CLINIC) {
                        $created_by_user_id = $custom_data['user_id'];
                    }

                    if ($order_status != 'PENDING') {
                        $created = Custom::created();
                        $connection->autocommit(false);
                        $query = "INSERT INTO prescription_medicine_orders (created_by_user_id, thinapp_id,doctor_id,prescription_id,prescription_url, drive_folder_id,appointment_customer_id, children_id, patient_name, state, city, address, patient_mobile, created,modified) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                        $connection = ConnectionUtil::getConnection();
                        $stmt = $connection->prepare($query);
                        $stmt->bind_param('sssssssssssssss', $created_by_user_id, $thin_app_id, $doctor_id, $prescription_id, $prescription_url, $drive_folder_id, $appointment_customer_id, $children_id, $patient_name, $state, $city, $address, $patient_mobile, $created, $created);
                        if ($stmt->execute()) {
                            $prescription_medicine_order_id = $stmt->insert_id;
                            $sql = "INSERT INTO prescription_medicine_order_tracker (thinapp_id, created_by_user_id, prescription_medicine_order_id, created,modified) VALUES (?, ?, ?, ?, ?)";
                            $stmt = $connection->prepare($sql);
                            $stmt->bind_param('sssss', $thin_app_id, $created_by_user_id, $prescription_medicine_order_id, $created, $created);
                            if ($stmt->execute()) {
                                $connection->commit();
                                $response['status'] = 1;
                                $response['message'] = "Your order place successfully";
                            } else {
                                $connection->rollback();
                                $response['status'] = 0;
                                $response['message'] = "Sorry your order could not place";
                            }
                        } else {
                            $response['status'] = 0;
                            $response['message'] = "Sorry your order could not place";
                        }
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Your order for this prescription under process";
                    }
                } else {
                    $response['status'] = 0;
                    $response['message'] = "Invalid prescription data";
                }
            }
            Custom::sendResponse($response);
        }
        exit();
    }

    public static function trigger_send_custom_folder_file_add_notification()
    {
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, "http://mengage.in/doctor/cron_jobs/send_custom_folder_file_add_notification.php");
        curl_setopt($ch, CURLOPT_POST, true);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
        curl_exec($ch);
        curl_close($ch);
        $response['status'] = 1;
        $response['message'] = "OTP send successfully";
        Custom::sendResponse($response);
        exit();
    }


    public static function get_sms_template_list($data = null)
    {

        $return_type = true;
        if (empty($data)) {
            $return_type = false;
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);
        }

        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : 0;

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile number';
            } else {

                $connection = ConnectionUtil::getConnection();
                if ($doctor_id > 0) {
                    $query = "SELECT COUNT(*) AS total FROM sms_templates mst left join sms_templates as st on st.master_template_id = mst.id and st.doctor_id = $doctor_id  where mst.status ='ACTIVE' AND mst.thinapp_id = 0 AND st.id IS NULL";
                    $list_object = $connection->query($query);
                    $total = mysqli_fetch_assoc($list_object)['total'];
                    if ($total > 0) {
                        $created = Custom::created();
                        $query = "INSERT INTO sms_templates (thinapp_id,doctor_id,master_template_id, `key`,message,created,modified) SELECT ?,?,mst.id,mst.`key`,mst.message,?,? FROM sms_templates as mst left join sms_templates as st on st.master_template_id = mst.id and st.doctor_id = $doctor_id  where mst.status ='ACTIVE' AND mst.thinapp_id = 0 AND st.id IS NULL";
                        $connection = ConnectionUtil::getConnection();
                        $stmt = $connection->prepare($query);
                        $stmt->bind_param('ssss', $thin_app_id, $doctor_id, $created, $created);
                        $stmt->execute();
                    }
                }

                $query = "SELECT id, `key`, message  FROM sms_templates where status = 'ACTIVE' and  doctor_id = $doctor_id order by id desc";
                $list_object = $connection->query($query);
                if ($list_object->num_rows) {
                    $response['status'] = 1;
                    $response['message'] = "Template list found";
                    $response['data']['list'] = mysqli_fetch_all($list_object, MYSQL_ASSOC);
                } else {
                    $response['status'] = 0;
                    $response['message'] = "No template list found";
                }
            }
            if ($return_type === true) {
                return json_encode($response);
            } else {
                Custom::sendResponse($response);
            }
        }
        exit();
    }

    public static function manage_sms_template($data = null)
    {

        $return_type = true;
        if (empty($data)) {
            $return_type = false;
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);
        }

        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : 0;
            $template_id = isset($data['template_id']) ? $data['template_id'] : 0;
            $action_type = isset($data['action_type']) ? $data['action_type'] : '';
            $message = isset($data['message']) ? $data['message'] : '';

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile number';
            } else if (empty($doctor_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid doctor id';
            } else if (!in_array($action_type, array('ADD', 'UPDATE', 'DELETE'))) {
                $response['status'] = 0;
                $response['message'] = 'Invalid action';
            } else if (in_array($action_type, array('ADD', 'UPDATE')) && empty($message)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter message';
            } else if (in_array($action_type, array('DELETE', 'UPDATE')) && empty($template_id)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter template id';
            } else {

                $connection = ConnectionUtil::getConnection();
                $created = Custom::created();
                $key = $label = "";
                if ($action_type == "ADD") {
                    $sql = "INSERT INTO sms_templates (thinapp_id, doctor_id, `key`, message, created,modified) VALUES (?, ?, ?, ?, ?, ?)";
                    $stmt = $connection->prepare($sql);
                    $stmt->bind_param('ssssss', $thin_app_id, $doctor_id, $key, $message, $created, $created);
                    $label = "add";
                } else if ($action_type == "UPDATE") {
                    $query = "update sms_templates set message =?, modified =? where id = ?";
                    $stmt = $connection->prepare($query);
                    $stmt->bind_param('sss', $message, $created, $template_id);
                    $label = "update";
                } else {
                    $status = 'INACTIVE';
                    $query = "update sms_templates set status =?, modified =? where id = ?";
                    $stmt = $connection->prepare($query);
                    $stmt->bind_param('sss', $status, $created, $template_id);
                    $label = "delete";
                }
                if ($stmt->execute()) {
                    $response['status'] = 1;
                    $response['message'] = "Template $label successfully";
                } else {
                    $response['status'] = 1;
                    $response['message'] = "Sorry template could not $label";
                }

            }
            if ($return_type === true) {
                return json_encode($response);
            } else {
                Custom::sendResponse($response);
            }


        }
        exit();
    }

    public static function send_kiosk_notification()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $voice_url = isset($data['voice_url']) ? $data['voice_url'] : "";
            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile number';
            } else if (empty($voice_url)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid voie url';
            } else {
                $user_data = Custom::get_user_by_mobile(MENGAGE_CLINIC, $mobile);
                if (!empty($user_data)) {
                    $option = array(
                        'thinapp_id' => MENGAGE_CLINIC,
                        'channel_id' => 0,
                        'role' => "USER",
                        'flag' => 'KIOSK_VOICE_ALERT',
                        'title' => '',
                        'module_title' => '',
                        'message' => $voice_url,
                        'description' => "",
                        'chat_reference' => '',
                        'module_type' => 'KIOSK_VOICE_ALERT',
                        'module_type_id' => 0,
                        'child_id' => 0,
                        'firebase_reference' => ""
                    );
                    if (!empty($user_data['firebase_token'])) {
                        Custom::send_notification_via_token($option, array($user_data['firebase_token']), $thin_app_id);
                    }
                    $response['status'] = 1;
                    $response['message'] = 'Alert send successfully';
                } else {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid user data';
                }
            }
            Custom::sendResponse($response);


        }
        exit();
    }

    public static function tab_service_category_list($data = null)
    {

        $return_type = true;
        if (empty($data)) {
            $return_type = false;
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);
        }

        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : 0;

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile number';
            } else {

                $connection = ConnectionUtil::getConnection();
                if ($doctor_id > 0) {
                    $clone_result = Custom::add_doctor_default_category_and_service_for_clinic($thin_app_id, $doctor_id);
                }

                $query = "SELECT hsc.name as category_name, hsc.id as category_id, mp.id as service_id, mp.name as service_name, mp.price  FROM hospital_service_categories as hsc left join medical_products as mp on mp.hospital_service_category_id = hsc.id and mp.status='ACTIVE' where hsc.status = 'ACTIVE' and  hsc.doctor_id = $doctor_id and record_for ='CLINIC'";
                $list_object = $connection->query($query);
                if ($list_object->num_rows) {
                    $final_array = array();
                    $list = mysqli_fetch_all($list_object, MYSQL_ASSOC);
                    foreach ($list as $key => $value) {
                        $final_array[$value['category_id']]['category_id'] = $value['category_id'];
                        $final_array[$value['category_id']]['category_name'] = $value['category_name'];
                        $service_array = array();
                        if (!empty($value['service_id'])) {
                            $service_array = array('service_id' => $value['service_id'], 'service_name' => $value['service_name'], 'price' => $value['price']);;
                            $final_array[$value['category_id']]['service_list'][] = $service_array;
                        } else {
                            $final_array[$value['category_id']]['service_list'] = $service_array;
                        }
                    }
                    $response['status'] = 1;
                    $response['message'] = "Category list found";
                    $response['data']['list'] = array_values($final_array);
                } else {
                    $response['status'] = 0;
                    $response['message'] = "No category list found";
                }
            }
            if ($return_type === true) {
                return json_encode($response);
            } else {
                Custom::sendResponse($response);
            }
        }
        exit();
    }

    public static function tab_manage_category_and_service($data = null)
    {

        $return_type = true;
        if (empty($data)) {
            $return_type = false;
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);
        }

        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : 0;
            $action_type = isset($data['action_type']) ? $data['action_type'] : "";
            $category_id = isset($data['category_id']) ? $data['category_id'] : 0;
            $service_id = isset($data['service_id']) ? $data['service_id'] : 0;
            $name = isset($data['name']) ? $data['name'] : 0;
            $price = isset($data['price']) ? $data['price'] : 0;
            $action_for = isset($data['action_for']) ? $data['action_for'] : "";


            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile number';
            } else if (!in_array($action_for, array('CATEGORY', 'SERVICE'))) {
                $response['status'] = 0;
                $response['message'] = 'Invalid action for';
            } else if (!in_array($action_type, array('ADD', 'UPDATE', 'DELETE'))) {
                $response['status'] = 0;
                $response['message'] = 'Invalid action type';
            } else if (in_array($action_type, array('UPDATE', 'DELETE')) && empty($category_id) && $action_for == "CATEGORY") {
                $response['status'] = 0;
                $response['message'] = 'Invalid category id';
            } else if (in_array($action_type, array('UPDATE', 'DELETE')) && empty($service_id) && $action_for == "SERVICE") {
                $response['status'] = 0;
                $response['message'] = 'Invalid service id';
            } else if (in_array($action_type, array('UPDATE', 'ADD')) && empty($name)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid name';
            } else {

                $connection = ConnectionUtil::getConnection();
                $created = Custom::created();
                $save_data = true;
                if ($action_type == "ADD") {
                    if ($action_for == "CATEGORY" && !Custom::is_category_or_service_name_exist($action_for, $thin_app_id, $name, $doctor_id)) {
                        $sql = "INSERT INTO hospital_service_categories (thinapp_id, doctor_id, name, record_for, created,modified) VALUES (?, ?, ?, ?, ?, ?)";
                        $stmt = $connection->prepare($sql);
                        $record_for = 'CLINIC';
                        $stmt->bind_param('ssssss', $thin_app_id, $doctor_id, $name, $record_for, $created, $created);
                    } else if ($action_for == "SERVICE" && !Custom::is_category_or_service_name_exist($action_for, $thin_app_id, $name, $doctor_id, $category_id)) {
                        $sql = "INSERT INTO medical_products (thinapp_id, doctor_id, hospital_service_category_id, name, price, created,modified) VALUES (?, ?, ?, ?, ?, ?, ?)";
                        $stmt = $connection->prepare($sql);
                        $stmt->bind_param('sssssss', $thin_app_id, $doctor_id, $category_id, $name, $price, $created, $created);
                    } else {
                        $save_data = false;
                    }
                    $label = "add";
                } else if ($action_type == "UPDATE") {
                    if ($action_for == "CATEGORY" && !Custom::is_category_or_service_name_exist($action_for, $thin_app_id, $name, $doctor_id, $category_id)) {
                        $query = "update hospital_service_categories set name =?, modified =? where id = ?";
                        $stmt = $connection->prepare($query);
                        $stmt->bind_param('sss', $name, $created, $category_id);
                    } else if ($action_for == "SERVICE" && !Custom::is_category_or_service_name_exist($action_for, $thin_app_id, $name, $doctor_id, $category_id, $service_id)) {
                        $query = "update medical_products set name =?, price=?, modified =? where id = ?";
                        $stmt = $connection->prepare($query);
                        $stmt->bind_param('ssss', $name, $price, $created, $service_id);
                    } else {
                        $save_data = false;
                    }
                    $label = "update";
                } else {
                    $status = 'INACTIVE';
                    $label = "delete";
                    if ($action_type == "DELETE" && $action_for == "CATEGORY") {
                        $query = "update hospital_service_categories set status =?, modified =? where id = ?";
                        $stmt = $connection->prepare($query);
                        $stmt->bind_param('sss', $status, $created, $category_id);
                    } else {
                        $query = "update medical_products set status =?, modified =? where id = ?";
                        $stmt = $connection->prepare($query);
                        $stmt->bind_param('sss', $status, $created, $service_id);
                    }
                }
                if ($save_data === true) {
                    if ($stmt->execute()) {
                        $connection->commit();
                        $response['status'] = 1;
                        $response['message'] = ucfirst(strtolower($action_for)) . " $label successfully";
                        if ($action_type == "ADD") {
                            $response['server_id'] = $stmt->insert_id;
                        }
                        $file_name = "doctor_service_$doctor_id";
                        WebservicesFunction::deleteJson(array($file_name), 'CLINIC');

                    } else {
                        $response['status'] = 1;
                        $response['message'] = "Sorry " . strtolower($action_for) . " could not $label";
                    }
                } else {
                    $response['status'] = 1;
                    $response['message'] = ucfirst(strtolower($action_for)) . " name already exist";
                }
            }
            if ($return_type === true) {
                return json_encode($response);
            } else {
                Custom::sendResponse($response);
            }
        }
        exit();
    }

    public static function add_patient_payment($data = null)
    {

        $return_type = true;
        if (empty($data)) {
            $return_type = false;
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);
        }

        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : 0;
            $address_id = isset($data['address_id']) ? $data['address_id'] : 0;
            $patient_id = isset($data['patient_id']) ? $data['patient_id'] : 0;
            $patient_type = isset($data['patient_type']) ? $data['patient_type'] : "";
            $paid_amount = isset($data['paid_amount']) ? $data['paid_amount'] : 0;
            $total_amount = isset($data['total_amount']) ? $data['total_amount'] : 0;
            $charged_amount = isset($data['charged_amount']) ? $data['charged_amount'] : 0;
            $service_array = isset($data['service_array']) ? json_decode($data['service_array'], true)['service_array'] : "0";
            $date = isset($data['date']) ? $data['date'] : "";
            $appointment_id = isset($data['appointment_id']) ? $data['appointment_id'] : "0";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile number';
            } else if (empty($doctor_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid doctor id';
            } else if (empty($address_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid address id';
            } else if (empty($patient_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid patient id';
            } else if (empty($paid_amount)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid paid amount';
            } else if (empty($service_array)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid service array';
            } else if ($patient_type != 'CUSTOMER' && $patient_type != 'CHILDREN') {
                $response['status'] = 0;
                $response['message'] = 'Invalid patient type';
            } else {

                $connection = ConnectionUtil::getConnection();
                $connection->autocommit(false);
                $created = Custom::created();
                $is_opd = !empty($appointment_id)?'Y':"N";

                $is_direct_billing = !empty($appointment_id)?"NO":"YES";
                $payment_add_via = "CLINIC";
                $save_service = array();

                $appointment_customer_id = $children_id = 0;
                if ($patient_type == "CUSTOMER") {
                    $appointment_customer_id = $patient_id;
                } else {
                    $children_id = $patient_id;
                }


                $sql = "INSERT INTO medical_product_orders (clinic_total_amount, appointment_customer_staff_service_id, thinapp_id, appointment_staff_id, appointment_address_id, children_id, appointment_customer_id, charged_amount, total_amount, is_opd, is_direct_billing, created_by_user_id, payment_add_via, created, modified) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                $stmt = $connection->prepare($sql);
                $stmt->bind_param('sssssssssssssss', $total_amount, $appointment_id, $thin_app_id, $doctor_id, $address_id, $children_id, $appointment_customer_id, $charged_amount, $paid_amount, $is_opd, $is_direct_billing, $user_id, $payment_add_via, $created, $created);
                if ($stmt->execute()) {
                    $medical_product_order_id = $stmt->insert_id;
                    $response['payment_id'] = $medical_product_order_id;
                    foreach ($service_array as $key => $service) {
                        $medical_product_id = $service['id'];
                        $service_amount = $service['service_amount'];
                        $service_paid_amount = $service['service_paid_amount'];
                        $qty = 1;
                        $service_name = empty($medical_product_id)?'OPD':"";
                        $sql = "INSERT INTO medical_product_order_details (service, appointment_customer_staff_service_id, quantity, thinapp_id, medical_product_order_id, medical_product_id, appointment_staff_id, children_id, appointment_customer_id, product_price, amount, total_amount, created, modified) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                        $stmt = $connection->prepare($sql);
                        $stmt->bind_param('ssssssssssssss', $service_name, $appointment_id, $qty, $thin_app_id, $medical_product_order_id, $medical_product_id, $doctor_id, $children_id, $appointment_customer_id, $service_amount, $service_amount, $service_paid_amount, $created, $created);
                        if ($stmt->execute()) {
                            $save_service[] = true;
                            $response['service_array'][$key] = $stmt->insert_id;
                        } else {
                            $save_service[] = false;
                        }
                    }

                    $due_amount_status = Custom::update_patient_due_amount($total_amount, $thin_app_id, $medical_product_order_id, $user_id, $paid_amount, $patient_id, $patient_type);
                    if (!empty($save_service) && !in_array(false, $save_service) && $due_amount_status) {
                        if (!empty($appointment_id)) {
                            $app_status = "CONFIRM";
                            $status = "SUCCESS";
                            $sql = "UPDATE appointment_customer_staff_services SET amount =?, medical_product_order_id =?, payment_by_user_id =?,  status = ?, payment_status = ?,  modified = ? where id = ?";
                            $stmt = $connection->prepare($sql);
                            $stmt->bind_param('sssssss', $total_amount, $medical_product_order_id, $user_id, $app_status, $status, $created, $appointment_id);
                            $stmt->execute();
                        }


                        $connection->commit();
                        $response['status'] = 1;
                        $response['message'] = "Payment create successfully";
                    } else {
                        $connection->rollback();
                        $response['status'] = 0;
                        $response['message'] = "Sorry payment could not add";
                    }
                } else {
                    $connection->rollback();
                    $response['status'] = 0;
                    $response['message'] = "Sorry payment could not add";
                }
            }
            if ($return_type === true) {
                return json_encode($response);
            } else {
                Custom::sendResponse($response);
            }
        }
        exit();
    }

    public static function show_emergency_on_tracker()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $appointment_id = isset($data['appointment_id']) ? $data['appointment_id'] : "";
            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile number';
            } else if (empty($appointment_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid appointment';
            } else {
                if (Custom::manage_emergency_tracker_cache($appointment_id)) {
                    $response['status'] = 1;
                    $response['message'] = "Tracker update successfully";
                } else {
                    $response['status'] = 0;
                    $response['message'] = "Sorry tracker could not update";
                }
            }
            Custom::sendResponse($response);
        }
        exit();

    }


    public static function tab_save_medical_certificate($data = null)
    {
        $return_type = true;
        if (empty($data)) {
            $return_type = false;
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);
        }
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : 0;
            $address_id = isset($data['address_id']) ? $data['address_id'] : 0;
            $patient_id = isset($data['patient_id']) ? $data['patient_id'] : 0;
            $patient_type = isset($data['patient_type']) ? $data['patient_type'] : "";
            $doctor_name = isset($data['doctor_name']) ? $data['doctor_name'] : "";
            $patient_name = isset($data['patient_name']) ? $data['patient_name'] : "";
            $disease = isset($data['disease']) ? $data['disease'] : "";
            $start_date = isset($data['start_date']) ? $data['start_date'] : "";
            $end_date = isset($data['end_date']) ? $data['end_date'] : "";
            $start_treatment = isset($data['start_treatment']) ? $data['start_treatment'] : "";
            $end_treatment = isset($data['end_treatment']) ? $data['end_treatment'] : "";
            $location = isset($data['location']) ? $data['location'] : "";
            $date = isset($data['date']) ? $data['date'] : "";
            $base64 = isset($data['base64']) ? $data['base64'] : "";
            $clinic_name = isset($data['clinic_name']) ? $data['clinic_name'] : "";
            $folder_id = isset($data['folder_id']) ? $data['folder_id'] : "";
            $certificate_html = isset($data['certificate_html']) ? $data['certificate_html'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile number';
            } else if (empty($doctor_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid doctor id';
            } else if (empty($patient_name)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid patient name';
            } else if (empty($patient_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid patient id';
            } else if (empty($base64)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid patient id';
            } else if ($patient_type != 'CUSTOMER' && $patient_type != 'CHILDREN') {
                $response['status'] = 0;
                $response['message'] = 'Invalid patient type';
            } else {

                $connection = ConnectionUtil::getConnection();
                $created = Custom::created();
                $sql = "INSERT INTO medical_certificates (html_string, thinapp_id, doctor_id, patient_id, address_id, patient_type, doctor_name_top, doctor_name, patient_name, disease, start_date, end_date, start_treatment, end_treatment, location, `date`, image, clinic_name,   created, modified) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                $stmt = $connection->prepare($sql);
                $stmt->bind_param('ssssssssssssssssssss', $certificate_html, $thin_app_id, $doctor_id, $patient_id, $address_id, $patient_type, $doctor_name, $doctor_name, $patient_name, $disease, $start_date, $end_date, $start_treatment, $end_treatment, $location, $date, $base64, $clinic_name, $created, $created);
                if ($stmt->execute()) {
                    $certificate_id = $stmt->insert_id;
                    $response['status'] = 1;
                    $response['message'] = "Certificate save successfully";
                    $response['server_id'] = $certificate_id;
                } else {
                    $connection->rollback();
                    $response['status'] = 0;
                    $response['message'] = "Sorry certificate could not save";
                }
            }
            Custom::sendResponse($response);
            Custom::send_process_to_background();
            if (!empty($base64) && !empty($folder_id) && !empty($certificate_id)) {
                $file_path = Custom::uploadBase64FileToAws($base64);
                $file_name = end(explode("/", $file_path));;
                $get_admin_data = Custom::get_thinapp_admin_data($thin_app_id);
                $post['thin_app_id'] = $thin_app_id;
                $post['user_id'] = $get_admin_data['id'];
                $post['app_key'] = APP_KEY;
                $post['mobile'] = $get_admin_data['mobile'];
                $post['role_id'] = 5;
                $post['file_array'][0]['file_type'] = Custom::getFileType($file_path);
                $post['file_array'][0]['file_name'] = $file_name;
                $post['file_array'][0]['file_path'] = $file_path;
                $post['file_array'][0]['file_size'] = Custom::getRemoteFileSize($file_path, "MB");
                $post['listing_type'] = "OTHER";
                $post['drive_folder_id'] = $folder_id;
                $filter_array[$folder_id][] = array('file_name' => $file_name);
                $post['category_id'] = 6;
                $post['is_medical_certificate'] = "YES";
                $result = json_decode(WebservicesFunction::add_file($post, false, true), true);
                if ($result['status'] == 1) {
                    if (!empty($certificate_id)) {
                        $created = Custom::created();
                        $drive_file_id = $result['data']['saved_file'][0]['file_id'];
                        $connection = ConnectionUtil::getConnection();
                        $connection->autocommit(true);
                        $query = "update medical_certificates set drive_file_id =?, image=?, modified =? where id = ?";
                        $stmt = $connection->prepare($query);
                        $stmt->bind_param('ssss', $drive_file_id, $file_path, $created, $certificate_id);
                        $stmt->execute();
                    }
                }

            }

        }
        exit();
    }


    public static function tab_synchronize_data()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : 0;
            $synchronize_for = isset($data['synchronize_for']) ? $data['synchronize_for'] : "";
            $data_string = isset($data['data_string']) ? $data['data_string'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile number';
            } else if (empty($doctor_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid doctor id';
            } else {

                try{


                $data_string = json_decode($data_string, true);
                $return_array = $upload_prescription = array();
                if (!empty($data_string[key($data_string)])) {


                    if ($synchronize_for == "DOCTOR") {
                        foreach ($data_string as $table_name => $data_array) {
                            if (strtoupper($table_name) == "DOCTORS") {
                                foreach ($data_array as $index => $doctor) {
                                    $return_array[$table_name][$index] = array('local_id' => $doctor['id'], 'server_id' => 0);
                                    $connection = ConnectionUtil::getConnection();
                                    $doctor_mobile = Custom::create_mobile_number($doctor['mobile']);
                                    $doctor_data = Custom::get_doctor_by_mobile($doctor_mobile, $thin_app_id);
                                    if (empty($patient['server_id']) && empty($doctor_data)) {
                                        $user_data = Custom::get_user_by_mobile($thin_app_id, $doctor_mobile);
                                        $doctor_user_id = !empty($user_data) ? $user_data['id'] : 0;
                                        $sql = "INSERT INTO appointment_staffs (thinapp_id, user_id, name, mobile, sub_title, created, modified  ) VALUES (?, ?, ?, ?, ?, ?, ?)";
                                        $stmt = $connection->prepare($sql);
                                        $stmt->bind_param('sssssss', $thin_app_id, $doctor_user_id, $doctor['name'], $doctor_mobile, $doctor['degree'], $doctor['created'], $doctor['modified']);
                                        if ($stmt->execute()) {
                                            $new_doctor_id = $stmt->insert_id;
                                            $time_from = APPOINTMENT_WORKING_START_TIME;
                                            $time_to = APPOINTMENT_WORKING_END_TIME;
                                            if ($working_days = Custom::appointment_day_list()) {
                                                foreach ($working_days as $key => $days) {
                                                    $sql = "INSERT INTO appointment_staff_hours (thinapp_id, user_id, appointment_staff_id, appointment_day_time_id, time_from, time_to) VALUES (?, ?, ?, ?, ?, ?)";
                                                    $stmt_days = $connection->prepare($sql);
                                                    $stmt_days->bind_param('ssssss', $thin_app_id, $doctor_user_id, $new_doctor_id, $days['id'], $time_from, $time_to);
                                                    $stmt_days->execute();
                                                }
                                            }
                                            $return_array[$table_name][$index] = array('local_id' => $doctor['id'], 'server_id' => $stmt->insert_id);
                                        }
                                    } else {
                                        if ($doctor['status'] == 'ACTIVE') {
                                            $user_data = Custom::get_user_by_mobile($thin_app_id, $doctor_mobile);
                                            $doctor_user_id = !empty($user_data) ? $user_data['id'] : 0;
                                            $query = "update appointment_staffs set user_id =?, name=?, mobile=?, sub_title=?,  modified =? where id = ?";
                                            $stmt = $connection->prepare($query);
                                            $stmt->bind_param('ssssss', $doctor_user_id, $doctor['name'], $doctor_mobile, $doctor['degree'], $doctor['modified'], $doctor_data['id']);
                                            $stmt->execute();
                                        } else {
                                            $status = 'INACTIVE';
                                            $query = "update appointment_staffs set status=?, modified =? where id = ?";
                                            $stmt = $connection->prepare($query);
                                            $stmt->bind_param('sss', $status, $doctor['modified'], $doctor_data['id']);
                                            $stmt->execute();
                                        }
                                        $return_array[$table_name][$index] = array('local_id' => $doctor['id'], 'server_id' => $doctor_data['id']);
                                        Custom::delete_doctor_cache($doctor_data['id'], $thin_app_id);
                                    }
                                }
                            }
                        }

                    } else if ($synchronize_for == "ADDRESS") {
                        foreach ($data_string as $table_name => $data_array) {
                            if (strtoupper($table_name) == "APPOINTMENT_ADDRESSES") {
                                foreach ($data_array as $index => $address) {
                                    $return_array[$table_name][$index] = array('local_id' => $address['id'], 'server_id' => 0);
                                    $connection = ConnectionUtil::getConnection();
                                    if (empty($patient['server_id'])) {
                                        $sql = "INSERT INTO appointment_addresses (thinapp_id, country_id, state_id, city_id, place, clinic_name, separate_address, address, latitude, longitude, pincode, contact_number, emergency_number,  created, modified  ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                                        $stmt = $connection->prepare($sql);
                                        $stmt->bind_param('sssssssssssssss', $thin_app_id, $address['country_id'], $address['state_id'], $address['city_id'], $address['place'], $address['clinic_name'], $address['separate_address'], $address['address'], $address['latitude'], $address['longitude'], $address['pincode'], $address['contact_number'], $address['emergency_number'], $address['created'], $address['modified']);
                                        if ($stmt->execute()) {
                                            $return_array[$table_name][$index] = array('local_id' => $address['id'], 'server_id' => $stmt->insert_id);
                                        }
                                    } else {
                                        if ($address['status'] == 'ACTIVE') {
                                            $query = "update appointment_addresses set country_id=?, state_id=?, city_id=?, place=?, clinic_name=?, separate_address=?, address=?, latitude=?, longitude=?, pincode=?, contact_number=?, emergency_number=?,  created=?, modified=? where id = ?";
                                            $stmt = $connection->prepare($query);
                                            $stmt->bind_param('sssssssssssssss', $address['country_id'], $address['state_id'], $address['city_id'], $address['place'], $address['clinic_name'], $address['separate_address'], $address['address'], $address['latitude'], $address['longitude'], $address['pincode'], $address['contact_number'], $address['emergency_number'], $address['created'], $address['modified'], $address['server_id']);
                                            $stmt->execute();
                                        } else {
                                            $status = 'INACTIVE';
                                            $query = "update appointment_addresses set status=?, modified =? where id = ?";
                                            $stmt = $connection->prepare($query);
                                            $stmt->bind_param('sss', $status, $address['modified'], $address['server_id']);
                                            $stmt->execute();
                                        }
                                        $return_array[$table_name][$index] = array('local_id' => $address['id'], 'server_id' => $address['server_id']);

                                    }
                                }
                            }
                        }

                    } else if ($synchronize_for == "PATIENT") {
                        foreach ($data_string as $table_name => $data_array) {
                            if (strtoupper($table_name) == "APPOINTMENT_CUSTOMERS") {
                                foreach ($data_array as $index => $patient) {
                                    $patient_mobile = Custom::create_mobile_number($patient['mobile']);

                                    if (empty($patient['server_id'])) {
                                        $customer_data = Custom::search_customer_name($thin_app_id, $patient_mobile, $patient['first_name']);
                                        if (empty($customer_data)) {
                                            $post['app_key'] = APP_KEY;
                                            $post['user_id'] = $user_id;
                                            $post['thin_app_id'] = $thin_app_id;
                                            $post['mobile'] = $mobile;
                                            $post['patient_type'] = 'CUSTOMER';
                                            $post['patient_name'] = $patient['first_name'];
                                            $post['patient_mobile'] = $patient_mobile;
                                            if (!empty($patient['dob']) && strtolower($patient['dob']) !='n/a' && strtolower($patient['dob']) !='null') {
                                                $dob = str_replace("/", "-", $patient['dob']);
                                                $dob = DateTime::createFromFormat("d-m-Y", $dob);
                                                $post['dob'] = $dob->format('Y-m-d');
                                            }
                                            $post['age'] = $patient['age'];
                                            $post['gender'] = $patient['gender'];
                                            $result = json_decode(WebServicesFunction_2_3::tab_add_patient($post), true);
                                            $return_array[$table_name][$index] = array('local_id' => $patient['id'], 'server_id' => 0, 'folder_id' => 0);
                                            if ($result['status'] == 1) {
                                                $return_array[$table_name][$index] = array('local_id' => $patient['id'], 'server_id' => $result['data']['patient_id'], 'folder_id' => $result['data']['folder_id']);
                                                $vitals = Custom::tab_update_patient_vitals($thin_app_id, $result['data']['patient_id'], "CUSTOMER", $patient);
                                            }
                                        } else {
                                            $return_array[$table_name][$index] = array('local_id' => $patient['id'], 'server_id' => $customer_data['id'], 'folder_id' => $customer_data['folder_id']);
                                        }
                                    } else {
                                        if ($patient['status'] == "ACTIVE") {
                                            $post['app_key'] = APP_KEY;
                                            $post['user_id'] = $user_id;
                                            $post['mobile'] = $mobile;
                                            $post['thin_app_id'] = $thin_app_id;
                                            $post['patient_type'] = "CUSTOMER";
                                            $post['patient_id'] = $patient['server_id'];
                                            $post['patient_mobile'] = $patient_mobile;
                                            $post['age'] = $patient['age'];
                                            $post['gender'] = $patient['gender'];
                                            $post['patient_name'] = $patient['first_name'];
                                            if (!empty($patient['dob']) && strtolower($patient['dob']) !='n/a' && strtolower($patient['dob']) !='null') {
                                                $dob = str_replace("/", "-", $patient['dob']);
                                                $dob = DateTime::createFromFormat("d-m-Y", $dob);
                                                $post['dob'] = $dob->format('Y-m-d');
                                            }
                                            $response = json_decode(WebServicesFunction_2_3::tab_update_general_info($post), true);
                                            $vitals = Custom::tab_update_patient_vitals($thin_app_id, $patient['server_id'], "CUSTOMER", $patient);

                                        } else {
                                            $result = Custom::delete_tab_patient($thin_app_id, $patient['server_id'], "CUSTOMER");
                                        }
                                        $return_array[$table_name][$index] = array('local_id' => $patient['id'], 'server_id' => $patient['server_id'], 'folder_id' => $patient['folder_id']);
                                    }


                                }
                            } else if (strtoupper($table_name) == "CHILDRENS") {
                                foreach ($data_array as $index => $patient) {
                                    $patient_mobile = Custom::create_mobile_number($patient['mobile']);

                                    if (empty($patient['server_id'])) {
                                        $child_data = Custom::create_child_by_name($thin_app_id, $patient_mobile, $patient['child_name']);
                                        if (empty($child_data)) {
                                            $post['app_key'] = APP_KEY;
                                            $post['user_id'] = $user_id;
                                            $post['thin_app_id'] = $thin_app_id;
                                            $post['mobile'] = $mobile;
                                            $post['patient_type'] = 'CHILDREN';
                                            $post['patient_name'] = $patient['child_name'];
                                            $post['patient_mobile'] = $patient_mobile;
                                            if (!empty($patient['dob']) && strtolower($patient['dob']) !='n/a' && strtolower($patient['dob']) !='null') {
                                                $dob = str_replace("/", "-", $patient['dob']);
                                                $dob = DateTime::createFromFormat("d-m-Y", $dob);
                                                $post['dob'] = $dob->format('Y-m-d');
                                            }
                                            $post['age'] = @$patient['age'];
                                            $post['gender'] = $patient['gender'];
                                            $result = json_decode(WebServicesFunction_2_3::tab_add_patient($post), true);
                                            $return_array[$table_name][$index] = array('local_id' => $patient['id'], 'server_id' => 0, 'folder_id' => 0);
                                            if ($result['status'] == 1) {
                                                $return_array[$table_name][$index] = array('local_id' => $patient['id'], 'server_id' => $result['data']['child_id'], 'folder_id' => $result['data']['folder_id']);
                                                $vitals = Custom::tab_update_patient_vitals($thin_app_id, $result['data']['child_id'], "CHILDREN", $patient);
                                            }
                                        } else {
                                            $return_array[$table_name][$index] = array('local_id' => $patient['id'], 'server_id' => $child_data['id'], 'folder_id' => $child_data['folder_id']);
                                        }
                                    } else {
                                        if ($patient['status'] == "ACTIVE") {
                                            $post['app_key'] = APP_KEY;
                                            $post['user_id'] = $user_id;
                                            $post['mobile'] = $mobile;
                                            $post['thin_app_id'] = $thin_app_id;
                                            $post['patient_type'] = "CHILDREN";
                                            $post['patient_id'] = $patient['server_id'];
                                            $post['patient_mobile'] = $patient_mobile;
                                            $post['age'] = @$patient['age'];
                                            $post['gender'] = $patient['gender'];
                                            $post['patient_name'] = $patient['child_name'];
                                            if (!empty($patient['dob']) && strtolower($patient['dob']) !='n/a' && strtolower($patient['dob']) !='null') {
                                                $dob = str_replace("/", "-", $patient['dob']);
                                                $dob = DateTime::createFromFormat("d-m-Y", $dob);
                                                $post['dob'] = $dob->format('Y-m-d');
                                            }
                                            $response = json_decode(WebServicesFunction_2_3::tab_update_general_info($post), true);
                                            $vitals = Custom::tab_update_patient_vitals($thin_app_id, $patient['server_id'], "CHILDREN", $patient);
                                        } else {
                                            $result = Custom::delete_tab_patient($thin_app_id, $patient['server_id'], "CHILDREN");
                                        }
                                        $return_array[$table_name][$index] = array('local_id' => $patient['id'], 'server_id' => $patient['server_id'], 'folder_id' => $patient['folder_id']);
                                    }

                                }
                            }
                        }

                    } else if ($synchronize_for == "CATEGORY") {
                        foreach ($data_string as $table_name => $data_array) {
                            if (strtoupper($table_name) == "HOSPITAL_SERVICE_CATEGORIES") {
                                foreach ($data_array as $index => $category) {
                                    $return_array[$table_name][$index] = array('local_id' => $category['id'], 'server_id' => 0);
                                    if (empty($category['server_id'])) {
                                        $post['app_key'] = APP_KEY;
                                        $post['user_id'] = $user_id;
                                        $post['thin_app_id'] = $thin_app_id;
                                        $post['mobile'] = $mobile;
                                        $post['doctor_id'] = $doctor_id;
                                        $post['category_id'] = 0;
                                        $post['service_id'] = 0;
                                        $post['name'] = $name = $category['name'];
                                        $post['price'] = 0;
                                        $post['action_for'] = $action_for = "CATEGORY";
                                        $post['action_type'] = "ADD";
                                        $category_id = Custom::is_category_or_service_name_exist($action_for, $thin_app_id, $name, $doctor_id);
                                        if (empty($category_id)) {
                                            $response = json_decode(WebServicesFunction_2_3::tab_manage_category_and_service($post), true);
                                            if ($response['status'] == 1) {
                                                $return_array[$table_name][$index] = array('local_id' => $category['id'], 'server_id' => $response['server_id']);
                                            }
                                        } else {
                                            $return_array[$table_name][$index] = array('local_id' => $category['id'], 'server_id' => $category_id);
                                        }
                                    } else {
                                        $post['app_key'] = APP_KEY;
                                        $post['user_id'] = $user_id;
                                        $post['thin_app_id'] = $thin_app_id;
                                        $post['mobile'] = $mobile;
                                        $post['doctor_id'] = $doctor_id;
                                        $post['category_id'] = $category['server_id'];
                                        $post['service_id'] = 0;
                                        $post['name'] = $name = $category['name'];
                                        $post['price'] = 0;
                                        $post['action_for'] = $action_for = "CATEGORY";
                                        $post['action_type'] = ($category['status'] == 'ACTIVE') ? "UPDATE" : "DELETE";
                                        $response = json_decode(WebServicesFunction_2_3::tab_manage_category_and_service($post), true);
                                        $return_array[$table_name][$index] = array('local_id' => $category['id'], 'server_id' => $category['server_id']);
                                    }
                                }
                            }
                        }
                    } else if ($synchronize_for == "SERVICES") {
                        foreach ($data_string as $table_name => $data_array) {
                            if (strtoupper($table_name) == "MEDICAL_PRODUCTS") {
                                foreach ($data_array as $index => $service) {
                                    $return_array[$table_name][$index] = array('local_id' => $service['id'], 'server_id' => 0);
                                    if (empty($service['server_id'])) {
                                        $post['app_key'] = APP_KEY;
                                        $post['user_id'] = $user_id;
                                        $post['thin_app_id'] = $thin_app_id;
                                        $post['mobile'] = $mobile;
                                        $post['doctor_id'] = $doctor_id;
                                        $post['category_id'] = $category_id = $service['hospital_service_category_id'];
                                        $post['service_id'] = 0;
                                        $post['name'] = $name = $service['name'];
                                        $post['price'] = $service['price'];
                                        $post['action_for'] = $action_for = "SERVICE";
                                        $post['action_type'] = "ADD";
                                        $service_id = Custom::is_category_or_service_name_exist($action_for, $thin_app_id, $name, $doctor_id, $category_id);
                                        if (empty($service_id)) {
                                            $response = json_decode(WebServicesFunction_2_3::tab_manage_category_and_service($post), true);
                                            if ($response['status'] == 1) {
                                                $return_array[$table_name][$index] = array('local_id' => $service['id'], 'server_id' => $response['server_id']);
                                            }
                                        } else {
                                            $return_array[$table_name][$index] = array('local_id' => $service['id'], 'server_id' => $service_id);
                                        }
                                    } else {
                                        $post['app_key'] = APP_KEY;
                                        $post['user_id'] = $user_id;
                                        $post['thin_app_id'] = $thin_app_id;
                                        $post['mobile'] = $mobile;
                                        $post['doctor_id'] = $doctor_id;
                                        $post['category_id'] = $service['hospital_service_category_id'];
                                        $post['service_id'] = $service['server_id'];
                                        $post['name'] = $service['name'];
                                        $post['price'] = $service['price'];
                                        $post['action_for'] = "SERVICE";
                                        $post['action_type'] = ($service['status'] == 'ACTIVE') ? "UPDATE" : "DELETE";
                                        $response = json_decode(WebServicesFunction_2_3::tab_manage_category_and_service($post), true);
                                        $return_array[$table_name][$index] = array('local_id' => $service['id'], 'server_id' => $service['server_id']);
                                    }
                                }
                            }
                        }
                    } else if ($synchronize_for == "PAYMENT") {
                        $connection = ConnectionUtil::getConnection();
                        foreach ($data_string as $table_name => $data_array) {
                            if (strtoupper($table_name) == "PATIENT_PAYMENT") {
                                foreach ($data_array as $index => $payment) {
                                    $return_array[$table_name][$index] = array('local_id' => $payment['id'], 'server_id' => 0);
                                    if (empty($payment['server_id'])) {
                                        $address_id = $payment['address_id'];
                                        $children_id = $payment['children_id'];
                                        $appointment_customer_id = $payment['appointment_customer_id'];
                                        $charged_amount = $payment['charged_amount'];
                                        $paid_amount = $payment['paid_amount'];
                                        $total_amount = $clinic_total_amount = $payment['total_amount'];
                                        $created = $payment['created'];
                                        $is_opd = "Y";
                                        $payment_add_via = "CLINIC";
                                        $sql = "INSERT INTO medical_product_orders (clinic_total_amount, thinapp_id, appointment_staff_id, appointment_address_id, children_id, appointment_customer_id, charged_amount, total_amount, is_opd, created_by_user_id, payment_add_via, created, modified) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                                        $stmt = $connection->prepare($sql);
                                        $stmt->bind_param('sssssssssssss', $clinic_total_amount, $thin_app_id, $doctor_id, $address_id, $children_id, $appointment_customer_id, $charged_amount, $paid_amount, $is_opd, $user_id, $payment_add_via, $created, $created);
                                        if ($stmt->execute()) {
                                            $medical_product_order_id = $stmt->insert_id;
                                            $return_array[$table_name][$index] = array('local_id' => $payment['id'], 'server_id' => $medical_product_order_id);
                                            $patient_id = $appointment_customer_id;
                                            $patient_type = "CUSTOMER";
                                            if (!empty($children_id)) {
                                                $patient_id = $children_id;
                                                $patient_type = "CHILDREN";
                                            }
                                            $due_amount_status = Custom::update_patient_due_amount($total_amount, $thin_app_id, $medical_product_order_id, $user_id, $paid_amount, $patient_id, $patient_type);
                                        }
                                    } else {
                                        $return_array[$table_name][$index] = array('local_id' => $payment['id'], 'server_id' => $payment['server_id']);
                                    }
                                }
                            }
                        }
                    } else if ($synchronize_for == "PAYMENT_DETAILS") {
                        $connection = ConnectionUtil::getConnection();
                        foreach ($data_string as $table_name => $data_array) {
                            if (strtoupper($table_name) == "PATIENT_PAYMENT_DETAILS") {
                                foreach ($data_array as $index => $payment_detail) {
                                    $medical_product_order_id = $payment_detail['patient_payment_server_id'];
                                    $detail_id = Custom::tab_get_payment_order_detail_id($medical_product_order_id, $payment_detail['medical_products_server_id']);
                                    $return_array[$table_name][$index] = array('local_id' => $payment_detail['id'], 'server_id' => $detail_id);
                                    $payment_data = Custom::tab_get_medical_product_order($medical_product_order_id);
                                    $service_data = Custom::tab_get_service_data($payment_detail['medical_products_server_id']);
                                    if ($detail_id == 0 && !empty($payment_data) && !empty($service_data)) {
                                        $appointment_id = 0;
                                        $children_id = $payment_data['children_id'];
                                        $appointment_customer_id = $payment_data['appointment_customer_id'];
                                        $created = $payment_data['created'];
                                        $medical_product_id = $payment_detail['patient_payment_server_id'];
                                        $service_amount = $service_data['price'];
                                        $service_paid_amount = $payment_detail['price'];
                                        $qty = 1;
                                        $sql = "INSERT INTO medical_product_order_details (appointment_customer_staff_service_id, quantity, thinapp_id, medical_product_order_id, medical_product_id, appointment_staff_id, children_id, appointment_customer_id, product_price, amount, total_amount, created, modified) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                                        $stmt = $connection->prepare($sql);
                                        $stmt->bind_param('sssssssssssss', $appointment_id, $qty, $thin_app_id, $medical_product_order_id, $medical_product_id, $doctor_id, $children_id, $appointment_customer_id, $service_amount, $service_amount, $service_paid_amount, $created, $created);
                                        if ($stmt->execute()) {
                                            $return_array[$table_name][$index] = array('local_id' => $payment_detail['id'], 'server_id' => $stmt->insert_id);
                                        }
                                    }
                                }
                            }
                        }
                    } else if ($synchronize_for == "CERTIFICATE") {

                        foreach ($data_string as $table_name => $data_array) {
                            if (strtoupper($table_name) == "PATIENT_CERTIFICATE") {

                                foreach ($data_array as $index => $certificate) {
                                    $post['app_key'] = APP_KEY;
                                    $post['user_id'] = $user_id;
                                    $post['mobile'] = $mobile;
                                    $post['thin_app_id'] = $thin_app_id;
                                    $post['patient_id'] = $certificate['patient_id'];
                                    $post['address_id'] = $certificate['address_id'];
                                    $post['folder_id'] = $certificate['folder_id'];
                                    $post['patient_type'] = $certificate['patient_type'];
                                    $post['patient_name'] = $certificate['patient_name'];
                                    $post['disease'] = $certificate['disease'];
                                    $post['start_date'] = $certificate['start_date'];
                                    $post['end_date'] = $certificate['end_date'];
                                    $post['start_treatment'] = $certificate['start_treatment'];
                                    $post['end_treatment'] = $certificate['end_treatment'];
                                    $post['location'] = $certificate['location'];
                                    $post['date'] = $certificate['date'];
                                    $post['base64'] = $certificate['base64'];
                                    $post['clinic_name'] = $certificate['clinic_name'];
                                    $post['doctor_id'] = $doctor_id;
                                    $post['doctor_name'] = $certificate['doctor_name'];
                                    WebServicesFunction_2_3::tab_save_medical_certificate($post);
                                }
                            }
                        }
                    } else if ($synchronize_for == "VITALS") {
                        $connection = ConnectionUtil::getConnection();
                        foreach ($data_string as $table_name => $data_array) {
                            if (strtoupper($table_name) == "TAB_PATIENT_VITALS") {
                                foreach ($data_array as $index => $vitals) {
                                    $return_array[$table_name][$index] = array('local_id' => $vitals['id'], 'server_id' => 0);
                                    $sql = "INSERT INTO tab_patient_vitals (thinapp_id, doctor_id, tab_master_vital_id, patient_id, patient_type, value, created, modified  ) VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
                                    $stmt = $connection->prepare($sql);
                                    $stmt->bind_param('ssssssss', $thin_app_id, $doctor_id, $vitals['tab_master_vital_id'], $vitals['patient_id'], $vitals['patient_type'], $vitals['value'], $vitals['created'], $vitals['modified']);
                                    if ($stmt->execute()) {
                                        $return_array[$table_name][$index] = array('local_id' => $vitals['id'], 'server_id' => $stmt->insert_id);
                                    }
                                }
                            }
                        }
                    } else if ($synchronize_for == "REMINDER") {
                        foreach ($data_string as $table_name => $data_array) {
                            if (strtoupper($table_name) == "TAB_PATIENT_REMINDERS") {
                                foreach ($data_array as $index => $reminder) {
                                    $return_array[$table_name][$index] = array('local_id' => $reminder['id'], 'server_id' => 0);
                                    if (empty($reminder['server_id'])) {
                                        $post['app_key'] = APP_KEY;
                                        $post['user_id'] = $user_id;
                                        $post['thin_app_id'] = $thin_app_id;
                                        $post['mobile'] = $mobile;
                                        $post['doctor_id'] = $doctor_id;
                                        $post['patient_id'] = $reminder['patient_id'];
                                        $post['patient_type'] = $reminder['patient_type'];
                                        $post['reminder_date'] = $reminder['reminder_date'];
                                        $post['message'] = $reminder['message'];
                                        $post['action_type'] = "ADD";
                                        $post['created'] = $reminder['created'];
                                        $post['modified'] = $reminder['modified'];
                                        $response = json_decode(WebServicesFunction_2_3::tab_manage_reminder($post), true);
                                        if ($response['status'] == 1) {
                                            $return_array[$table_name][$index] = array('local_id' => $reminder['id'], 'server_id' => $response['server_id']);
                                        }
                                    } else {
                                        $post['app_key'] = APP_KEY;
                                        $post['user_id'] = $user_id;
                                        $post['thin_app_id'] = $thin_app_id;
                                        $post['mobile'] = $mobile;
                                        $post['doctor_id'] = $doctor_id;
                                        $post['patient_id'] = $reminder['patient_id'];
                                        $post['patient_type'] = $reminder['patient_type'];
                                        $post['reminder_date'] = $reminder['reminder_date'];
                                        $post['message'] = $reminder['message'];
                                        $post['created'] = $reminder['created'];
                                        $post['modified'] = $reminder['modified'];
                                        $post['action_type'] = ($reminder['status'] == 'ACTIVE') ? "UPDATE" : "DELETE";
                                        $response = json_decode(WebServicesFunction_2_3::tab_manage_reminder($post), true);
                                        $return_array[$table_name][$index] = array('local_id' => $reminder['id'], 'server_id' => $reminder['server_id']);
                                    }
                                }
                            }
                        }
                    } else if ($synchronize_for == "PRESCRIPTION_CATEGORY_STEPS_TAGS") {
                        foreach ($data_string as $table_name => $data_array) {
                            if (strtoupper($table_name) == "TAB_MASTER_PRESCRIPTION_TAGS") {
                                foreach ($data_array as $index => $tag) {
                                    $return_array[$table_name][$index] = array('local_id' => $tag['id'], 'server_id' => 0);
                                    if (empty($tag['server_id'])) {
                                        $post['app_key'] = APP_KEY;
                                        $post['user_id'] = $user_id;
                                        $post['thin_app_id'] = $thin_app_id;
                                        $post['mobile'] = $mobile;
                                        $post['doctor_id'] = $doctor_id;
                                        $post['step_id'] = $tag['tab_master_prescription_step_id'];
                                        $post['category_master_id'] = 0;
                                        $post['tag_name'] = $tag['tag_name'];
                                        $post['company_name'] = $tag['company_name'];
                                        $post['composition'] = $tag['composition'];
                                        $post['tag_type'] = $tag['medicine_type'];
                                        $post['tag_notes'] = $tag['medicine_notes'];
                                        $post['action_type'] = "ADD";
                                        $post['created'] = $tag['created'];
                                        $post['modified'] = $tag['modified'];
                                        $response = json_decode(WebServicesFunction_2_3::tab_manage_step_tag($post), true);
                                        if ($response['status'] == 1) {
                                            $return_array[$table_name][$index] = array('local_id' => $tag['id'], 'server_id' => $response['tag_id']);
                                        }
                                    } else {
                                        $post['app_key'] = APP_KEY;
                                        $post['user_id'] = $user_id;
                                        $post['thin_app_id'] = $thin_app_id;
                                        $post['mobile'] = $mobile;
                                        $post['doctor_id'] = $doctor_id;
                                        $post['step_id'] = $tag['tab_master_prescription_step_id'];
                                        $post['category_master_id'] = 0;
                                        $post['tag_id'] = $tag['server_id'];
                                        $post['tag_name'] = $tag['tag_name'];
                                        $post['company_name'] = $tag['company_name'];
                                        $post['composition'] = $tag['composition'];
                                        $post['tag_type'] = $tag['medicine_type'];
                                        $post['tag_notes'] = $tag['medicine_notes'];
                                        $post['created'] = $tag['created'];
                                        $post['modified'] = $tag['modified'];
                                        $post['action_type'] = ($tag['status'] == 'ACTIVE') ? "UPDATE" : "DELETE";
                                        $response = json_decode(WebServicesFunction_2_3::tab_manage_step_tag($post), true);
                                        $return_array[$table_name][$index] = array('local_id' => $tag['id'], 'server_id' => $tag['server_id']);
                                    }
                                }
                            }
                        }
                    } else if ($synchronize_for == "PRESCRIPTION_TEMPLATES") {
                        foreach ($data_string as $table_name => $data_array) {
                            if (strtoupper($table_name) == "TAB_PRESCRIPTION_TEMPLATES") {
                                foreach ($data_array as $index => $template) {
                                    $return_array[$table_name][$index] = array('local_id' => $template['id'], 'server_id' => 0);
                                    $connection = ConnectionUtil::getConnection();
                                    if (empty($template['server_id'])) {

                                        $sql = "INSERT INTO tab_prescription_templates (thinapp_id, doctor_id, `type`, template_type, tab_prescription_category_id, patient_id, patient_type,  template_alias_name, template_name , template_id, compare_template_id, `status`, is_bookmark, created, modified) values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
                                        $stmt = $connection->prepare($sql);
                                        $stmt->bind_param('sssssssssssssss', $thin_app_id, $doctor_id, $template['type'], $template['template_type'], $template['tab_prescription_category_id'], $template['patient_id'], $template['patient_type'], $template['template_alias_name'], $template['template_name'], $template['template_id'], $template['compare_template_id'], $template['status'], $template['is_bookmark'], $template['created'], $template['modified']);
                                        if ($stmt->execute()) {
                                            $return_array[$table_name][$index] = array('local_id' => $template['id'], 'server_id' => $stmt->insert_id);
                                        }

                                    } else {
                                        if ($template['status'] == 'ACTIVE') {
                                            $sql = "UPDATE tab_prescription_templates set type=?, compare_template_id=?, template_type=?, tab_prescription_category_id=?, patient_id=?, patient_type=?,  template_alias_name =?, template_name =?, template_id=?, compare_template_id=?, created=?, modified =?, status=?, is_bookmark=? where id =?";
                                            $stmt = $connection->prepare($sql);
                                            $stmt->bind_param('sssssssssssssss', $template['type'], $template['compare_template_id'], $template['template_type'], $template['tab_prescription_category_id'], $template['patient_id'], $template['patient_type'], $template['template_alias_name'], $template['template_name'], $template['template_id'], $template['compare_template_id'], $template['created'], $template['modified'], $template['status'], $template['is_bookmark'], $template['server_id']);
                                            $stmt->execute();
                                        } else {
                                            $sql = "UPDATE tab_prescription_templates set template_name =?, modified =? where id =?";
                                            $stmt = $connection->prepare($sql);
                                            $stmt->bind_param('sss', $template_name, $created, $template['servier_id']);
                                            $stmt->execute();
                                        }
                                        $return_array[$table_name][$index] = array('local_id' => $template['id'], 'server_id' => $template['server_id']);
                                    }
                                }
                            }
                        }
                    } else if ($synchronize_for == "PATIENT_PRESCRIPTION") {
                        foreach ($data_string as $table_name => $data_array) {
                            if (strtoupper($table_name) == "TAB_PATIENT_PRESCRIPTION") {
                                foreach ($data_array as $index => $prescription) {
                                    $return_array[$table_name][$index] = array('local_id' => $prescription['id'], 'server_id' => 0);
                                    $connection = ConnectionUtil::getConnection();
                                    if (empty($prescription['server_id'])) {
                                        $sql = "INSERT INTO tab_patient_prescriptions (thinapp_id, doctor_id,  tab_prescription_layout_id, prescription_path, patient_id, patient_type, offline_string, created, modified) values(?,?,?,?,?,?,?,?,?)";
                                        $stmt = $connection->prepare($sql);
                                        $stmt->bind_param('sssssssss', $thin_app_id, $doctor_id, $prescription['tab_prescription_layout_id'], $prescription['prescription_path'], $prescription['patient_id'], $prescription['patient_type'], $prescription['offline_string'], $prescription['created'], $prescription['modified']);
                                        if ($stmt->execute()) {
                                            $prescription_id = $stmt->insert_id;
                                            $return_array[$table_name][$index] = array('local_id' => $prescription['id'], 'server_id' => $prescription_id);
                                            $upload_prescription[$index] = array(
                                                'thin_app_id' => $thin_app_id,
                                                'user_id' => $thin_app_id,
                                                'mobile' => $thin_app_id,
                                                'role_id' => $thin_app_id,
                                                'doctor_id' => $thin_app_id,
                                                'patient_id' => $prescription['patient_id'],
                                                'patient_type' => $prescription['patient_type'],
                                                'base64' => $prescription['offline_string'],
                                                'prescription_id' => $prescription_id
                                            );
                                        }
                                    } else {
                                        $return_array[$table_name][$index] = array('local_id' => $prescription['id'], 'server_id' => $prescription['server_id']);
                                    }
                                }
                            }
                        }
                    }
                }

                if (!empty($return_array)) {
                    $response['status'] = 1;
                    $response['message'] = "Data synchronize successfully";
                } else {
                    $response['status'] = 0;
                    $response['message'] = "Sorry data mismatch  to synchronize ";
                }

                if ($synchronize_for == "DOCTOR") {
                    $response['status'] = 1;
                    if (!isset($return_array['doctors'])) {
                        $return_array['doctors'] = array();
                    }

                    $return_array['doctors_list'] = Custom::tab_get_doctor_list($thin_app_id);
                    if (empty($return_array['doctors_list'])) {
                        $return_array['doctors_list'] = array();
                    }
                } else if ($synchronize_for == "ADDRESS") {
                    $response['status'] = 1;
                    if (!isset($return_array['appointment_addresses'])) {
                        $return_array['appointment_addresses'] = array();
                    }

                    $return_array['addresses_list'] = Custom::tab_get_address_list($thin_app_id);
                    if (empty($return_array['addresses_list'])) {
                        $return_array['addresses_list'] = array();
                    }
                } else if ($synchronize_for == "PATIENT") {
                    $response['status'] = 1;
                    $post['app_key'] = APP_KEY;
                    $post['user_id'] = $user_id;
                    $post['mobile'] = $mobile;
                    $post['thin_app_id'] = $thin_app_id;
                    $post['request_for'] = "CUSTOMER";
                    $post['tab_synchronize_data'] = true;
                    $return_array['customer_list'] = $return_array['children_list'] = $return_array['stats_url'] = array();
                    $list = json_decode(WebServicesFunction_2_3::tab_get_children_list($post), true);
                    if ($list['status'] == 1) {
                        $return_array['customer_list'] = $list['data']['list'];
                        $return_array['stats_url'] = $list['stats_url'];
                    }
                    $post['request_for'] = "CHILDREN";
                    $list = json_decode(WebServicesFunction_2_3::tab_get_children_list($post), true);
                    if ($list['status'] == 1) {
                        $return_array['children_list'] = $list['data']['list'];
                        $return_array['stats_url'] = $list['stats_url'];
                    }

                    if (!isset($return_array['appointment_customers'])) {
                        $return_array['appointment_customers'] = array();
                    }
                    if (!isset($return_array['childrens'])) {
                        $return_array['childrens'] = array();
                    }

                } else if ($synchronize_for == "CATEGORY") {
                    $response['status'] = 1;
                    if (!isset($return_array['hospital_service_categories'])) {
                        $return_array['hospital_service_categories'] = array();
                    }
                    $return_array['category_list'] = Custom::tab_get_hospital_service_category_list($doctor_id);
                    if (empty($return_array['category_list'])) {
                        $return_array['category_list'] = array();
                    }
                } else if ($synchronize_for == "SERVICES") {
                    $response['status'] = 1;
                    if (!isset($return_array['medical_products'])) {
                        $return_array['medical_products'] = array();
                    }
                    $return_array['service_list'] = Custom::tab_get_medical_product_list($doctor_id);
                    if (empty($return_array['service_list'])) {
                        $return_array['service_list'] = array();
                    }
                } else if ($synchronize_for == "PAYMENT") {
                    $response['status'] = 1;
                    if (!isset($return_array['patient_payment'])) {
                        $return_array['patient_payment'] = array();
                    }
                    $return_array['payment_list'] = Custom::tab_get_payment_list($doctor_id);
                    if (empty($return_array['payment_list'])) {
                        $return_array['payment_list'] = array();
                    }
                } else if ($synchronize_for == "PAYMENT_DETAILS") {
                    $response['status'] = 1;
                    if (!isset($return_array['patient_payment_details'])) {
                        $return_array['patient_payment_details'] = array();
                    }

                    $return_array['payment_detail_list'] = Custom::tab_get_payment_order_detail_list($doctor_id);
                    if (empty($return_array['payment_detail_list'])) {
                        $return_array['payment_detail_list'] = array();
                    }
                } else if ($synchronize_for == "VITALS") {
                    $response['status'] = 1;
                    if (!isset($return_array['tab_patient_vitals'])) {
                        $return_array['tab_patient_vitals'] = array();
                    }

                    $return_array['patient_vitals_list'] = Custom::tab_get_patient_vital_list($doctor_id);
                    if (empty($return_array['patient_vitals_list'])) {
                        $return_array['patient_vitals_list'] = array();
                    }
                } else if ($synchronize_for == "REMINDER") {
                    $response['status'] = 1;
                    if (!isset($return_array['tab_patient_reminders'])) {
                        $return_array['tab_patient_reminders'] = array();
                    }

                    $return_array['reminders_list'] = Custom::tab_get_patient_reminder_list($doctor_id);
                    if (empty($return_array['reminders_list'])) {
                        $return_array['reminders_list'] = array();
                    }
                } else if ($synchronize_for == "SMS_TEMPLATES") {
                    $response['status'] = 1;
                    if (!isset($return_array['sms_templates'])) {
                        $return_array['sms_templates'] = array();
                    }
                    $return_array['sms_templates_list'] = Custom::tab_get_sms_template_list($doctor_id);
                    if (empty($return_array['sms_templates_list'])) {
                        $return_array['sms_templates_list'] = array();
                    }
                } else if ($synchronize_for == "PRESCRIPTION_CATEGORY") {
                    $response['status'] = 1;
                    if (!isset($return_array['tab_prescription_categories'])) {
                        $return_array['tab_prescription_categories'] = array();
                    }
                    $return_array['prescription_category_list'] = Custom::tab_get_prescription_category_list();
                    if (empty($return_array['prescription_category_list'])) {
                        $return_array['prescription_category_list'] = array();
                    }
                } else if ($synchronize_for == "PRESCRIPTION_CATEGORY_STEPS") {
                    $response['status'] = 1;
                    if (!isset($return_array['tab_master_prescription_steps'])) {
                        $return_array['tab_master_prescription_steps'] = array();
                    }
                    $return_array['prescription_category_step_list'] = Custom::tab_get_prescription_step_list();
                    if (empty($return_array['prescription_category_step_list'])) {
                        $return_array['prescription_category_step_list'] = array();
                    }
                } else if ($synchronize_for == "PRESCRIPTION_CATEGORY_STEPS_TAGS") {
                    $response['status'] = 1;
                    if (!isset($return_array['tab_master_prescription_tags'])) {
                        $return_array['tab_master_prescription_tags'] = array();
                    }
                    $return_array['prescription_step_tag_list'] = Custom::tab_get_prescription_step_tag_list($doctor_id);
                    if (empty($return_array['prescription_step_tag_list'])) {
                        $return_array['prescription_step_tag_list'] = array();
                    }
                } else if ($synchronize_for == "PRESCRIPTION_TEMPLATES") {
                    $response['status'] = 1;
                    if (!isset($return_array['tab_prescription_templates'])) {
                        $return_array['tab_prescription_templates'] = array();
                    }
                    $return_array['prescription_templates_list'] = Custom::tab_get_prescription_template_list($doctor_id);
                    if (empty($return_array['prescription_templates_list'])) {
                        $return_array['prescription_templates_list'] = array();
                    }
                } else if ($synchronize_for == "CERTIFICATE") {
                    $response['status'] = 1;
                    if (!isset($return_array['patient_certificate'])) {
                        $return_array['patient_certificate'] = array();
                    }

                } else if ($synchronize_for == "PATIENT_PRESCRIPTION") {
                    $response['status'] = 1;
                    if (!isset($return_array['tab_patient_prescriptions'])) {
                        $return_array['tab_patient_prescriptions'] = array();
                    }
                }
                }catch(Exception $e){
                        $e->getMessage();
                }
            }

            $response['data'] = $return_array;
            Custom::sendResponse($response);
            if($thin_app_id==494){
                WebservicesFunction::createJson("patient_list",json_encode($response),"CREATE","tmp_patient_list");
            }
            Custom::send_process_to_background();
            if (!empty($upload_prescription) && $synchronize_for == "PATIENT_PRESCRIPTION") {
                foreach ($upload_prescription as $key => $data_array) {
                    $folder_id = Custom::get_patient_folder_id($thin_app_id, $data_array['patient_id'], $data_array['patient_type']);
                    if (!empty($folder_id)) {
                        $data_array['folder_id'] = $folder_id;
                        Custom::upload_web_prescription($data_array, false, $data_array['prescription_id']);
                    }
                }
            }

        }
        exit();
    }


    public static function upload_file_to_aws($tmp_obj=null) {
        $response =array();
        if(empty($tmp_obj)){
            $_FILES= $_FILES['image'];
        }else{
            $_FILES= $tmp_obj;
        }

        if(!empty($_FILES) || !empty($_FILES['image'])){
            $_FILES = !empty($_FILES['image'])?$_FILES['image']:$_FILES;
            $tmp_filename = $_FILES['tmp_name'];
            $type = $_FILES['type'];
            $name = explode(".",$_FILES['name']);
            $typeArray = explode("/",$_FILES['type']);
            $ext = end($name);
            $new_file_name = date('YmdHis').rand().".".$ext;
            try{
                $bucket = AWS_BUCKET;
                $option = unserialize(AWS);
                $s3 = new Aws\S3\S3Client($option);
                $result = $s3->putObject(array(
                    'Bucket'       => $bucket,
                    'Key'          => $new_file_name,
                    'SourceFile'   => $tmp_filename,
                    'LocationConstraint' => $option['region'],
                    'ContentType'  => $type,
                    'ACL'          => 'public-read',
                    'StorageClass' => 'STANDARD'

                ));
                if($result['@metadata']['statusCode']==200){
                    /* remove resized image from server */
                    if($_FILES['tmp_name'] != $tmp_filename && file_exists($tmp_filename)){
                        @chown($tmp_filename,0777);
                        @unlink($tmp_filename);
                    }
                    $response['url'] =  $result['@metadata']['effectiveUri'];
                    $response['file_name'] =  $_FILES['name'];
                    $response['status'] = 1;
                    $response['message']= "File upload successfully";
                }else{
                    $response['status'] = 0;
                    $response['message']= "File could not upload";
                }
            }catch (Exception $e){
            }
        }else{
            $response['status'] = 0;
            $response['message']= "File object is empty";
        }

        if(!empty($tmp_obj)){
            return json_encode($response);
        }else{
            Custom::sendResponse($response);die;
        }


    }


    public static function get_dashboard_data()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);

        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $role_id = isset($data['role_id']) ? $data['role_id'] : "";
            $role = isset($data['appointment_user_role']) ? $data['appointment_user_role'] : "";
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : "";
            $branch_id = isset($data['branch_id']) ? $data['branch_id'] : 0;
            $app_main_category = isset($data['app_main_category']) ? $data['app_main_category'] : 'DOCTOR';
            $d_width = isset($data['d_width']) ? $data['d_width'] : "";
            $d_height = isset($data['d_height']) ? $data['d_height'] : "";

            if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user';
            } else if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            } else if (empty($role_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid role';
            } else {
                $return= $category_array = $sub_category_array = array();
                if(!$permission = WebservicesFunction::readJson('get_app_enabled_functionality_' . $thin_app_id, 'permission')){
                    $result = Custom::get_app_functionality_data($thin_app_id, $user_id, $mobile,$app_main_category,$d_height,$d_width);
                    $permission = WebservicesFunction::readJson('get_app_enabled_functionality_' . $thin_app_id, 'permission');
                }

                if(!empty($permission = $permission['data']['features'])){
                    if($permission['QUICK_APPOINTMENT'] =="YES" || $permission['NEW_QUICK_APPOINTMENT'] =="YES" ){
                        if($role !="USER"  || ($role=="USER" && ($permission['SHOW_APPOINTMENT_TO_USER'] =="YES" || $permission['SHOW_USER_TO_QUICK_APPOINTMENT'] == "YES"))){
                            $category_array[] =array('label'=>'Appointment','icon'=>Custom::dashboard_icon_array('APPOINTMENT'),'key'=>'APPOINTMENT');
                        }
                    }if($permission['DOCUMENT_MANAGEMENT'] =="YES" ){
                        if($role !="USER"  || ($role=="USER" && $permission['SHOW_DOCUMENT_TO_USER'] =="YES")){
                            $category_array[] =array('label'=>'Medical Record','icon'=>Custom::dashboard_icon_array('MEDICAL_RECORD'),'key'=>'MEDICAL_RECORD');
                        }
                    }if($permission['NEW_LETTER'] =="YES" ){
                        if($role !="USER"  || ($role=="USER" && $permission['SHOW_NEWS_LETTER_TO_USER'] =="YES")){
                            $category_array[] =array('label'=>'Blog','icon'=>Custom::dashboard_icon_array('BLOG'),'key'=>'BLOG');
                        }
                    }if($permission['HEALTH_TIP'] =="YES" ){
                        if($role !="USER"  || ($role=="USER" && $permission['SHOW_USER_TO_HEALTH_TIP'] =="YES")){
                            $category_array[] =array('label'=>'Health Tip','icon'=>Custom::dashboard_icon_array('HEALTH_TIP'),'key'=>'HEALTH_TIP');
                        }
                    }if($permission['CHAT'] =="YES" ){
                        if($role !="USER"  || ($role=="USER" && $permission['SHOW_USER_TO_CHAT'] =="YES")){
                            $category_array[] =array('label'=>'Chat','icon'=>Custom::dashboard_icon_array('CHAT'),'key'=>'CHAT');
                        }
                    }if($permission['SETTING'] =="YES" ){
                        if($role =="ADMIN"){
                            $category_array[] =array('label'=>'Setting','icon'=>Custom::dashboard_icon_array('SETTING'),'key'=>'SETTING');
                        }
                    }if($permission['REMINDER'] =="YES" ){
                        if($role !="USER"  || ($role=="USER" && $permission['SHOW_USER_TO_REMINDER'] =="YES")){
                            $sub_category_array[] =array('label'=>'Reminder','icon'=>Custom::dashboard_icon_array('REMINDER'),'key'=>'REMINDER');
                        }
                    }if($permission['PAYMENT'] =="YES" ){
                        if($role =="USER"  || ($role=="USER" && $permission['SHOW_PAYMENT_TO_USER'] =="YES")){
                            $sub_category_array[] =array('label'=>'Payment','icon'=>Custom::dashboard_icon_array('PAYMENT'),'key'=>'PAYMENT');
                        }
                    }

                    if($permission['PAYMENT'] =="YES" ){
                        if($role =="USER"  || ($role=="USER" && $permission['SHOW_PAYMENT_TO_USER'] =="YES")){
                            $sub_category_array[] =array('label'=>'Payment','icon'=>Custom::dashboard_icon_array('PAYMENT'),'key'=>'PAYMENT');
                        }
                    }

                    if($permission['VACCINATION'] =="YES" && ( $role == "ADMIN" || $role = "DOCTOR") ){
                        $sub_category_array[] =array('label'=>'Vaccination','icon'=>Custom::dashboard_icon_array('VACCINATION'),'key'=>'VACCINATION');
                    }

                    $cms_list = Custom::get_app_cms_list($thin_app_id);
                    if(!empty($cms_list)){
                        foreach($cms_list as $key => $cms){
                            $sub_category_array[] =array('label'=>$cms['icon_name'],'icon'=>$cms['icon_path'],'key'=>'','url'=>$cms['target_link']);
                        }
                    }

                    $response['data']['appointment_user_role'] = 'USER';
                    if (!empty($mobile) && !empty($role_id)) {
                        if ($response['data']['APP_CATEGORY'] == "HOSPITAL") {
                            $response['data']['appointment_user_role'] = Custom::hospital_get_user_role($mobile, $thin_app_id, $role_id);
                        } else {
                            $response['data']['appointment_user_role'] = Custom::get_appointment_role($mobile, $thin_app_id, $role_id);
                        }
                    }
                    if ($response['data']['appointment_user_role'] == 'USER') {
                        $response['data']['doctor_id'] = Custom::get_thin_app_default_doctor_id($thin_app_id);
                    } else {
                        $response['data']['doctor_id'] = WebservicesFunction::get_staff_id_by_mobile($mobile, $thin_app_id);
                    }
                    $response['data']['banner'] = $banner = Custom::get_app_banners($thin_app_id);
                    if (empty($banner)) {
                        $response['data']['banner'] = array();
                    }

                    $response['status'] = 1;
                    $response['message'] = "Dashboard list found";
                    $response['list']['main_category'] = $category_array;
                    $response['list']['sub_category'] = $sub_category_array;
                }else{
                    $response['status'] = 0;
                    $response['message'] = "Dashboard not available";
                }

                Custom::sendResponse($response);

            }
            exit;
        }


    }

    public static function pharmacy_add_reminder()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {


            $thinappID = isset($data['thin_app_id']) ? $data['thin_app_id'] : 0;
            $doctorID = isset($data['doctor_id']) ? $data['doctor_id'] : 0;
            $appointmentID = isset($data['appointment_id']) ? $data['appointment_id'] : 0;
            $userID = isset($data['user_id']) ? $data['user_id'] : 0;
            $medicineID = isset($data['medicine_id']) ? $data['medicine_id'] : 0;
            $pharmacyID = isset($data['pharmacy_id']) ? $data['pharmacy_id'] : 0;
            $branchID = isset($data['branch_id']) ? $data['branch_id'] : 0;
            $medicineName = isset($data['medicine_name']) ? $data['medicine_name'] : "";
            $medicineType = isset($data['medicine_type']) ? $data['medicine_type'] : "";
            $remarks = isset($data['remarks']) ? $data['remarks'] : "";
            $customerType = isset($data['customer_type']) ? $data['customer_type'] : "";
            $customerID = isset($data['customer_id']) ? $data['customer_id'] : "";
            $customerName = isset($data['customer_name']) ? $data['customer_name'] : "";
            $customerMobile = isset($data['customer_mobile']) ? $data['customer_mobile'] : "";
            $diagnosisDetails = isset($data['diagnosis_details']) ? $data['diagnosis_details'] : "";
            $morning = isset($data['morning']) ? $data['morning'] : "NO";
            $afternoon = isset($data['afternoon']) ? $data['afternoon'] : "NO";
            $evening = isset($data['evening']) ? $data['evening'] : "NO";
            $night = isset($data['night']) ? $data['night'] : "NO";
            $sos = isset($data['sos']) ? $data['sos'] : "NO";
            $totalDays = isset($data['total_days']) ? $data['total_days'] : 0;
            $startDate = isset($data['start_date']) ? $data['start_date'] : date('d-m-Y');
            $doseQuantity = isset($data['dose_quantity']) ? $data['dose_quantity'] : "";
            $dataToSend = array();

            if($thinappID == 0){
                $dataToSend = array("status"=>0,"message"=>"Invalid thinapp!");
            }
            else if($userID == 0){
                $dataToSend = array("status"=>0,"message"=>"Invalid user!");
            }
            else if($medicineName == ""){
                $dataToSend = array("status"=>0,"message"=>"Invalid madicine name!");
            }
            else if($medicineType == ""){
                $dataToSend = array("status"=>0,"message"=>"Invalid madicine type!");
            }
            else if($customerType == ""){
                $dataToSend = array("status"=>0,"message"=>"Invalid customer type!");
            }
            else if($customerID == 0){
                $dataToSend = array("status"=>0,"message"=>"Invalid customer!");
            }
            else if($totalDays == 0){
                $dataToSend = array("status"=>0,"message"=>"Invalid days!");
            }
            else{

                $startDate = DateTime::createFromFormat('d-m-Y', $startDate);
                $startDate = $startDate->format('Y-m-d');

                $currentTime = date("H");
                $morningTillTime = "12";
                $afternoonTillTime = "16";
                $eveningTillTime = "20";
                $nightStartTime = "19";
                $nightTillTime = "04";
                $addDay = 0;
                $doseCountPerDay = 0;


                if($morning == 'YES')
                {
                    if($morningTillTime > $currentTime)
                    {
                        $addDay = 1;
                    }
                }
                else if($afternoon == 'YES')
                {
                    $doseCountPerDay++;
                    if($afternoonTillTime > $currentTime)
                    {
                        $addDay = 1;
                    }
                }
                else if($evening == 'YES')
                {
                    $doseCountPerDay++;
                    if($eveningTillTime > $currentTime)
                    {
                        $addDay = 1;
                    }
                }
                else if($night == 'YES')
                {
                    $doseCountPerDay++;
                    if( !($currentTime > $nightStartTime || $currentTime < $nightTillTime) )
                    {
                        $addDay = 1;
                    }
                }



                if($morning == 'YES')
                {
                    $doseCountPerDay++;
                }

                if($afternoon == 'YES')
                {
                    $doseCountPerDay++;
                }

                if($evening == 'YES')
                {
                    $doseCountPerDay++;
                }

                if($night == 'YES')
                {
                    $doseCountPerDay++;
                }


                $endDate = date('Y-m-d', strtotime($startDate. ' + '.($totalDays+$addDay).' days'));
                $totalDose = $totalDays*$doseCountPerDay;
                $takenDose = 0;
                $remainingDose = $totalDose;

                if($totalDose == 0)
                {
                    $dataToSend = array("status"=>0,"message"=>"Invalid dose!");
                }
                else
                {

                    $insertPharmacyMedicineReminderSql = "INSERT INTO `pharmacy_medicine_reminders` SET `thinapp_id` = '$thinappID',`appointment_id` = '$appointmentID',`doctor_id` = '$doctorID',`user_id` = '$userID',`medicine_id` = '$medicineID',`pharmacy_id` = '$pharmacyID',`branch_id` = '$branchID',`medicine_name` = '$medicineName',`medicine_type` = '$medicineType',`remarks` = '$remarks',`customer_type` = '$customerType',`customer_id` = '$customerID',`customer_name` = '$customerName',`customer_mobile` = '$customerMobile',`diagnosis_details` = '$diagnosisDetails',`morning` = '$morning',`afternoon` = '$afternoon',`evening` = '$evening',`night` = '$night',`sos` = '$sos',`dose_quantity`='$doseQuantity',`total_days` = '$totalDays',`total_dose` = '$totalDose',`taken_dose` = '$takenDose',`remaining_dose` = '$remainingDose',`start_date` = '$startDate',`end_date` = '$endDate'";
                    $connection = ConnectionUtil::getConnection();
                    if($connection->query($insertPharmacyMedicineReminderSql))
                    {
                        $pharmacyMedicineReminderID = $connection->insert_id;

                        $endDate = date('Y-m-d', strtotime($endDate.'+1 day'));
                        $begin = new DateTime($startDate);
                        $end = new DateTime($endDate);
                        $daterange = new DatePeriod($begin, new DateInterval('P1D'), $end);
                        $interval = array();
                        foreach($daterange as $date){
                            $date = $date->format("Y-m-d");

                            $insertSql = "INSERT INTO `pharmacy_medicine_reminder_data` (`pharmacy_medicine_reminder_id`,`date`) VALUES ('".$pharmacyMedicineReminderID."','".$date."')";
                            $connection->query($insertSql);

                        }

                        $dataToSend = array("status"=>1,"message"=>"Success!");



                    }
                    else
                    {
                        $dataToSend = array("status"=>0,"message"=>"Something went wrong!");
                    }



                }




            }

            Custom::sendResponse($dataToSend);

        }
    }

    public static function pharmacy_get_reminder()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $today = date("Y-m-d");
            $thinappID = isset($data['thin_app_id']) ? $data['thin_app_id'] : 0;
            $patientID = isset($data['patient_id']) ? $data['patient_id'] : 0;
            $patientType = isset($data['patient_type']) ? $data['patient_type'] : "";

            if ($thinappID == 0) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            }
            else if($patientID == 0)
            {
                $response['status'] = 0;
                $response['message'] = 'Invalid patient id';
            }
            else if($patientType == "")
            {
                $response['status'] = 0;
                $response['message'] = 'Invalid patient type!';
            }
            else
            {

                $sql = "SELECT `pharmacy_medicine_reminder_data`.*,DATE_FORMAT(`pharmacy_medicine_reminders`.`end_date`,'%d-%m-%Y') AS `end_date`, DATE_FORMAT(`pharmacy_medicine_reminders`.`start_date`,'%d-%m-%Y') AS `start_date`,`pharmacy_medicine_reminders`.`diagnosis_details`, `pharmacy_medicine_reminders`.`medicine_name`, `pharmacy_medicine_reminders`.`medicine_type`, `pharmacy_medicine_reminders`.`remarks`, `pharmacy_medicine_reminders`.`dose_quantity`, `pharmacy_medicine_reminders`.`morning` AS `has_morning`, `pharmacy_medicine_reminders`.`afternoon` AS `has_afternoon`, `pharmacy_medicine_reminders`.`evening` AS `has_evening`, `pharmacy_medicine_reminders`.`night` AS `has_night`, `pharmacy_medicine_reminders`.`sos` AS `has_sos`, `pharmacy_medicine_reminders`.`remaining_dose` from `pharmacy_medicine_reminder_data` LEFT JOIN `pharmacy_medicine_reminders` ON (`pharmacy_medicine_reminders`.`id` = `pharmacy_medicine_reminder_data`.`pharmacy_medicine_reminder_id`) WHERE `pharmacy_medicine_reminder_data`.`date` = '".$today."' AND `pharmacy_medicine_reminder_data`.`status` = 'ACTIVE' AND `pharmacy_medicine_reminders`.`thinapp_id` = '".$thinappID."' AND `pharmacy_medicine_reminders`.`customer_id` = '".$patientID."' AND `pharmacy_medicine_reminders`.`customer_type` = '".$patientType."'";

                $connection = ConnectionUtil::getConnection();

                $reminderRS = $connection->query($sql);

                $morningData = array();
                $afternoonData = array();
                $eveningData = array();
                $nightData = array();
                $sosData = array();

                $dataToSend = array(
                    "morning" =>$morningData,
                    "afternoon" =>$afternoonData,
                    "evening" =>$eveningData,
                    "night" =>$nightData,
                    "sos" =>$sosData,
                );

                while($data = mysqli_fetch_assoc($reminderRS)){

                    $totalRemaining = $data["remaining_dose"];
                    $showMorning = false;
                    $showAfternoon = false;
                    $showEvening = false;
                    $showNight = false;
                    $showSos = false;

                    if($totalRemaining > 0 && $data["has_morning"] == "YES")
                    {
                        $totalRemaining--;
                        $showMorning = true;
                    }
                    if($totalRemaining > 0 && $data["has_afternoon"] == "YES")
                    {
                        $totalRemaining--;
                        $showAfternoon = true;
                    }
                    if($totalRemaining > 0 && $data["has_evening"] == "YES")
                    {
                        $totalRemaining--;
                        $showEvening = true;
                    }
                    if($totalRemaining > 0 && $data["has_night"] == "YES")
                    {
                        $totalRemaining--;
                        $showNight = true;
                    }
                    if($totalRemaining > 0 && $data["has_sos"] == "YES")
                    {
                        $showSos = true;
                    }


                    if($showMorning == true)
                    {
                        $arrayToAdd = array(
                            "id" => $data["id"],
                            "pharmacy_medicine_reminder_id" => $data["pharmacy_medicine_reminder_id"],
                            "date" => $data["date"],
                            "start_date" => $data["start_date"],
                            "end_date" => $data["end_date"],
                            "has_taken" => $data["morning"],
                            "medicine_name" => $data["medicine_name"],
                            "medicine_type" => $data["medicine_type"],
                            "remarks" => $data["remarks"],
                            "diagnosis_details" => $data["diagnosis_details"],
                            "dose_quantity" => $data["dose_quantity"]
                        );

                        $morningData[] = $arrayToAdd;

                    }

                    if($showAfternoon == true)
                    {
                        $arrayToAdd = array(
                            "id" => $data["id"],
                            "pharmacy_medicine_reminder_id" => $data["pharmacy_medicine_reminder_id"],
                            "date" => $data["date"],
                            "start_date" => $data["start_date"],
                            "end_date" => $data["end_date"],
                            "has_taken" => $data["afternoon"],
                            "medicine_name" => $data["medicine_name"],
                            "medicine_type" => $data["medicine_type"],
                            "remarks" => $data["remarks"],
                            "diagnosis_details" => $data["diagnosis_details"],
                            "dose_quantity" => $data["dose_quantity"]
                        );

                        $afternoonData[] = $arrayToAdd;

                    }

                    if($showEvening == true)
                    {
                        $arrayToAdd = array(
                            "id" => $data["id"],
                            "pharmacy_medicine_reminder_id" => $data["pharmacy_medicine_reminder_id"],
                            "date" => $data["date"],
                            "start_date" => $data["start_date"],
                            "end_date" => $data["end_date"],
                            "has_taken" => $data["evening"],
                            "medicine_name" => $data["medicine_name"],
                            "medicine_type" => $data["medicine_type"],
                            "remarks" => $data["remarks"],
                            "diagnosis_details" => $data["diagnosis_details"],
                            "dose_quantity" => $data["dose_quantity"]
                        );

                        $eveningData[] = $arrayToAdd;

                    }

                    if($showNight == true)
                    {
                        $arrayToAdd = array(
                            "id" => $data["id"],
                            "pharmacy_medicine_reminder_id" => $data["pharmacy_medicine_reminder_id"],
                            "date" => $data["date"],
                            "start_date" => $data["start_date"],
                            "end_date" => $data["end_date"],
                            "has_taken" => $data["night"],
                            "medicine_name" => $data["medicine_name"],
                            "medicine_type" => $data["medicine_type"],
                            "remarks" => $data["remarks"],
                            "diagnosis_details" => $data["diagnosis_details"],
                            "dose_quantity" => $data["dose_quantity"]
                        );

                        $nightData[] = $arrayToAdd;

                    }

                    if($showSos == true)
                    {
                        $arrayToAdd = array(
                            "id" => $data["id"],
                            "pharmacy_medicine_reminder_id" => $data["pharmacy_medicine_reminder_id"],
                            "date" => $data["date"],
                            "start_date" => $data["start_date"],
                            "end_date" => $data["end_date"],
                            "has_taken" => $data["sos"],
                            "medicine_name" => $data["medicine_name"],
                            "medicine_type" => $data["medicine_type"],
                            "remarks" => $data["remarks"],
                            "diagnosis_details" => $data["diagnosis_details"],
                            "dose_quantity" => $data["dose_quantity"]
                        );

                        $sosData[] = $arrayToAdd;

                    }

                }


                $dataToSend["morning"] = $morningData;
                $dataToSend["afternoon"] = $afternoonData;
                $dataToSend["evening"] = $eveningData;
                $dataToSend["night"] = $nightData;
                $dataToSend["sos"] = $sosData;

                $response = array(
                    "status"=>1,
                    "message"=>"List found!",
                    "data"=>$dataToSend
                );

            }

            Custom::sendResponse($response);die;
        }
    }

    public static function pharmacy_get_patient_list(){
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
                        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
                            $today = date("Y-m-d");
                            $thinappID = isset($data['thin_app_id']) ? $data['thin_app_id'] : 0;
                            $userID = isset($data['user_id']) ? $data['user_id'] : 0;
                            $mobile = isset($data['mobile']) ? $data['mobile'] : "";

                            if ($thinappID == 0) {
                                $response['status'] = 0;
                                $response['message'] = 'Invalid thinapp id';
                            } else if ($userID == 0) {
                                $response['status'] = 0;
                                $response['message'] = 'Invalid user id';
                            } else if ($mobile == "") {
                                $response['status'] = 0;
                                $response['message'] = 'Invalid mobile';
                            } else {


                                        $sqlPatient = "SELECT `first_name` AS `patient_name`, `id` AS `patient_id`, 'CUSTOMER' AS `patient_type` FROM `appointment_customers` WHERE `mobile` = '".$mobile."' AND `thinapp_id` = '".$thinappID."' AND `status` = 'ACTIVE'";

                                        $sqlChildren = "SELECT `child_name` AS `patient_name`, `id` AS `patient_id`, 'CHILDREN' AS `patient_type` FROM `childrens` WHERE `mobile` = '".$mobile."' AND `thinapp_id` = '".$thinappID."' AND `status` = 'ACTIVE'";

                                        $connection = ConnectionUtil::getConnection();
                                        $sqlPatient = $connection->query($sqlPatient);
                                        $sqlChildren = $connection->query($sqlChildren);

                                        $patientData = mysqli_fetch_all($sqlPatient,MYSQL_ASSOC);
                                        $childrenData = mysqli_fetch_all($sqlChildren,MYSQL_ASSOC);

                                        $dataToSend = array_merge($patientData,$childrenData);

                                        if(!empty($dataToSend))
                                        {
                                            $response = array(
                                                "status" => 1,
                                                "message" => "List found!",
                                                "data" => $dataToSend
                                            );

                                            $response['status'] = 1;
                                            $response['message'] = "Tracker update successfully";
                                        }
                                        else
                                        {
                                            $response['status'] = 0;
                                            $response['message'] = "List not found!";
                                        }

                                        Custom::sendResponse($response);

                            }
                        }
    }

    public static function pharmacy_update_status(){
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $today = date("Y-m-d");
            $thinappID = isset($data['thin_app_id']) ? $data['thin_app_id'] : 0;
            $reminderDataID = isset($data['reminder_data_id']) ? $data['reminder_data_id'] : 0;
            $time = isset($data['time']) ? $data['time'] : '';

            if($thinappID == 0){
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            }
            else if($reminderDataID == 0)
            {
                $response['status'] = 0;
                $response['message'] = 'Invalid reminder data id';
            }
            else if($time == '')
            {
                $response['status'] = 0;
                $response['message'] = 'Invalid time';
            }
            else
            {


                $sql = "UPDATE `pharmacy_medicine_reminder_data` SET `$time` = 'YES' WHERE `id` = '$reminderDataID'";
                $connection = ConnectionUtil::getConnection();
                if($connection->query($sql))
                {
                    $response['status'] = 1;
                    $response['message'] = 'Success!';
                }
                else
                {
                    $response['status'] = 0;
                    $response['message'] = 'Something went wrong!';
                }

            }

            Custom::sendResponse($response); die;

        }
    }


    public static function pharmacy_manage_reminder()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $action_type = isset($data['action_type']) ? $data['action_type'] : "";
            $reminder_id = isset($data['reminder_id']) ? $data['reminder_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : 0;
            $medicine_id = isset($data['medicine_id']) ? trim($data['medicine_id']) : 0;
            $pharmacy_id = isset($data['pharmacy_id']) ? trim($data['pharmacy_id']) : 0;
            $branch_id = isset($data['branch_id']) ? trim($data['branch_id']) : 0;
            $medicine_name = isset($data['medicine_name']) ? trim($data['medicine_name']) : "";
            $day_time_m = isset($data['day_time_m']) ? trim($data['day_time_m']) : "NO";
            $day_time_n = isset($data['day_time_n']) ? trim($data['day_time_n']) : "NO";
            $day_time_a = isset($data['day_time_a']) ? trim($data['day_time_a']) : "NO";
            $day_time_e = isset($data['day_time_e']) ? trim($data['day_time_e']) : "NO";
            $day_time_s = isset($data['day_time_s']) ? trim($data['day_time_s']) : "NO";
            $medicine_type = isset($data['medicine_type']) ? trim($data['medicine_type']) : "NO";
            $dose_quantity = isset($data['dose_quantity']) ? trim($data['dose_quantity']) : "";
            $remarks = isset($data['remarks']) ? trim($data['remarks']) : "";
            $start_date = isset($data['start_date']) ? trim($data['start_date']) : "";
            $end_date = isset($data['end_date']) ? trim($data['end_date']) : "";
            $medicine_duration = isset($data['medicine_duration']) ? trim($data['medicine_duration']) : "";
            $customer_type = isset($data['customer_type']) ? trim($data['customer_type']) : "";
            $customer_id = isset($data['customer_id']) ? trim($data['customer_id']) : "";
            $customer_name = isset($data['customer_name']) ? trim($data['customer_name']) : "";
            $customer_mobile = isset($data['customer_mobile']) ? Custom::create_mobile_number($data['customer_mobile']) : "";
            $diagnosis_details = isset($data['diagnosis_details']) ? trim($data['diagnosis_details']) : "";


            try {
                if (empty($thin_app_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid thinapp id';
                } else if (empty($app_key)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid app key';
                } else if (empty($user_id)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid user id';
                } else if ($action_type =="ADD" &&  empty($customer_mobile)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid customer mobile';
                } else if ($action_type =="ADD" && empty($customer_name)) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid customer name';
                } else if (!in_array($action_type,array('ADD','DELETE','TAKEN'))) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid action type';
                } else if (empty($reminder_id) && in_array($action_type,array('DELETE','TAKEN'))) {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid reminder id';
                } else {
                    $created =Custom::created();
                    $send_notification = false;
                    $connection = ConnectionUtil::getConnection();
                    if($action_type=="ADD"){
                        if(empty($customer_id)){
                            $customer_type='CUSTOMER';
                            $customer_detail = Custom::search_customer_name($thin_app_id,$customer_mobile,$customer_name);
                            if(!empty($customer_detail)){
                                $customer_id = $customer_detail['id'];
                            }else{
                                $customer = array();
                                $customer['app_key'] = $app_key;
                                $customer['thin_app_id'] = $thin_app_id;
                                $customer['user_id'] = $user_id;
                                $customer['first_name'] = $customer_name;
                                $customer['mobile'] = $customer_mobile;
                                $customer['country_code'] = "+91";
                                $result = json_decode(WebservicesFunction::appointment_add_customer($customer),true);
                                if($result['status']==1){
                                    $customer_id = $result['customer_id'];
                                }
                            }
                        }
                        if(!empty($customer_id)){
                            if(!empty($start_date)){
                                $start_date = DateTime::createFromFormat('d-m-Y', str_replace("/","-",$start_date))->format("Y-m-d");
                                if($start_date!='1970-01-01' && is_numeric($medicine_duration)){
                                    $end_date= date('Y-m-d', strtotime($start_date. " + $medicine_duration days"));
                                    $end_date = ($end_date=='1970-01-01')?'':$end_date;
                                }
                            }
                            $sql = "INSERT INTO pharmacy_medicine_reminders (thinapp_id, doctor_id, user_id, medicine_id, pharmacy_id, branch_id, medicine_name, day_time_m, day_time_n, day_time_a, day_time_e, day_time_s, medicine_type, dose_quantity, remarks, start_date, end_date, medicine_duration, customer_type, customer_id, customer_name, customer_mobile, diagnosis_details) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                            $stmt = $connection->prepare($sql);
                            $stmt->bind_param('sssssssssssssssssssssss', $thin_app_id, $doctor_id, $user_id, $medicine_id, $pharmacy_id, $branch_id, $medicine_name, $day_time_m, $day_time_n, $day_time_a, $day_time_e, $day_time_s, $medicine_type, $dose_quantity, $remarks, $start_date, $end_date, $medicine_duration,$customer_type,$customer_id, $customer_name, $customer_mobile, $diagnosis_details);
                            if ($stmt->execute()) {
                                $response['status'] = 1;
                                $reminder_id = $stmt->insert_id;
                                $response['message'] = "Reminder save successfully";
                                $query = "select pmr.*, DATE_FORMAT(pmr.start_date,'%d-%m-%Y') as start_date, DATE_FORMAT(pmr.end_date,'%d-%m-%Y') as end_date from pharmacy_medicine_reminders as pmr WHERE pmr.reminder_id =  $reminder_id";
                                $list = $connection->query($query);
                                $result = mysqli_fetch_assoc($list);
                                $result['reminder_id'] = (int)$result['reminder_id'];
                                $response['data']['detail'] = $result;
                                $send_notification=true;
                            } else {
                                $response['status'] = 0;
                                $response['message'] = "Sorry, reminder could not save";
                            }
                        }else{
                            $response['status'] = 0;
                            $response['message'] = "Sorry patient not found";
                        }
                    }else if($action_type == 'TAKEN'){
                        $sql = "UPDATE pharmacy_medicine_reminders set medicine_taken =?, modified_date = ?  where reminder_id = ?";
                        $stmt = $connection->prepare($sql);
                        $status = 'YES';
                        $stmt->bind_param('sss', $status, $created, $reminder_id);
                        $stmt = $connection->prepare($sql);

                        if ($stmt->execute()) {
                            $response['status'] = 1;
                            $response['message'] = "Reminder deleted successfully";
                        } else {
                            $response['status'] = 0;
                            $response['message'] = "Sorry reminder could not delete";
                        }
                    }else{

                        $sql = "UPDATE pharmacy_medicine_reminders set status =?, modified_date = ?  where reminder_id = ?";
                        $stmt = $connection->prepare($sql);
                        $status = 'INACTIVE';
                        $stmt->bind_param('sss', $status, $created, $reminder_id);
                        if ($stmt->execute()) {
                            $response['status'] = 1;
                            $response['message'] = "Reminder deleted successfully";
                        } else {
                            $response['status'] = 0;
                            $response['message'] = "Sorry reminder could not delete";
                        }
                    }


                }
            } catch (Exception $e) {
                $response['status'] = 0;
                $response['message'] = "Something went wrong on server";
            }
            Custom::sendResponse($response);
            Custom::send_process_to_background();
            if($send_notification===true){
                $token = Custom::get_customer_firebase_token_by_id($thin_app_id,$customer_id,$customer_type);
                if(!empty($token)){
                    $sendArray = array(
                        'channel_id' => 0,
                        'thinapp_id' => $thin_app_id,
                        'flag' => 'PHARMACY_MEDICINE_REMINDER',
                        'title' => 'Reminder',
                        'message' => '',
                        'description' => '',
                        'chat_reference' => '',
                        'module_type' => 'PHARMACY_MEDICINE_REMINDER',
                        'module_type_id' => 0,
                        'firebase_reference' => ""
                    );
                    Custom::send_notification_via_token($sendArray, array($token), $thin_app_id);
                }
            }

        }
        exit();
    }

    public static function pharmacy_reminder_list()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            }  else {
                $query = "select pmr.*, DATE_FORMAT(pmr.start_date,'%d-%m-%Y') as start_date, DATE_FORMAT(pmr.end_date,'%d-%m-%Y') as end_date from pharmacy_medicine_reminders as pmr WHERE pmr.thinapp_id = $thin_app_id and pmr.customer_mobile = '$mobile' and pmr.status = 'ACTIVE' ";
                $connection = ConnectionUtil::getConnection();
                $list = $connection->query($query);
                if ($list->num_rows) {
                    $response['reminder_list'] = mysqli_fetch_assoc($list);
                    $response['status'] = 1;
                    $response['message'] = "User logout successfully";
                } else {
                    $response['status'] = 0;
                    $response['message'] = "No remider list found";
                }
            }
            Custom::sendResponse($response);
        }
        exit();
    }

    public static function pharmacy_doctor_list()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $response = array();
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            }  else {
                $query = "SELECT t.id as app_id, staff.id AS doctor_id, staff.name AS doctor_name from appointment_staffs AS  staff JOIN thinapps AS t ON t.id =staff.thinapp_id AND t.category_name IN('HOSPITAL','DOCTOR') AND t.STATUS='ACTIVE' WHERE staff.staff_type='DOCTOR' AND staff.status = 'ACTIVE' order by staff.name asc";
                $connection = ConnectionUtil::getConnection();
                $list = $connection->query($query);
                if ($list->num_rows) {
                    $list = mysqli_fetch_all($list,MYSQL_ASSOC);
                    $final_array =array();
                    foreach($list as $key => $doctor){
                        $final_array[$doctor['app_id']][] =array('doctor_id'=>$doctor['doctor_id'],'doctor_name'=>$doctor['doctor_name']);
                    }
                    $response['list'] =$final_array;
                    $response['status'] = 1;
                    $response['message'] = "Doctor list found";
                } else {
                    $response['status'] = 0;
                    $response['message'] = "No doctor found";
                }
            }
            Custom::sendResponse($response);
        }
        exit();
    }

    public static function pharmacy_appointment_list()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $response = array();
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            }else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else {

                $condition = !empty($doctor_id)?" and acss.appointment_staff_id =$doctor_id ":"";
                $query = "SELECT IFNULL(ac.mobile,c.mobile) as patient_mobile,IFNULL(ac.uhid,c.uhid) as uhid, DriveFiles.file_path, acss.has_token, acss.emergency_appointment, acss.id AS appointment_id, acss.queue_number, staff.NAME AS doctor_name, staff.mobile AS doctor_mobile, IFNULL(ac.first_name,c.child_name) AS patient_name, IFNULL(ac.id,c.id) AS patient_id, IF(ac.id IS NOT NULL,'CUSTOMER','CHILDREN') AS patient_type, DATE_FORMAT(DATE(acss.appointment_datetime),'%d-%m-%Y') AS appointment_date, acss.slot_time AS appointment_time FROM appointment_customer_staff_services AS acss LEFT JOIN drive_files AS DriveFiles ON DriveFiles.appointment_customer_staff_service_id = acss.id LEFT JOIN appointment_customers AS ac ON ac.id = acss.appointment_customer_id LEFT JOIN childrens AS c ON c.id = acss.children_id LEFT JOIN appointment_staffs AS staff ON staff.id = acss.appointment_staff_id WHERE acss.thinapp_id = $thin_app_id AND DATE(acss.appointment_datetime) =DATE(NOW()) and acss.STATUS != 'CANCELED' AND acss.payment_status ='SUCCESS' $condition ORDER BY acss.appointment_datetime ASC ";
                $connection = ConnectionUtil::getConnection();
                $list = $connection->query($query);
                if ($list->num_rows) {
                    $list = mysqli_fetch_all($list,MYSQL_ASSOC);
                    foreach($list as $key => $doctor){
                        $list[$key]['queue_number'] =Custom::create_queue_number($doctor);
                    }
                    $response['list'] =$list;
                    $response['status'] = 1;
                    $response['message'] = "Appointment list found";
                } else {
                    $response['status'] = 0;
                    $response['message'] = "No appointment list found";
                }
            }
            Custom::sendResponse($response);
        }
        exit();
    }

    public static function lab_appointment_list()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $response = array();
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            }else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            }  else {

                $condition = !empty($doctor_id)?" and acss.appointment_staff_id =$doctor_id ":"";
                $query = "SELECT IFNULL(ac.uhid,c.uhid) as uhid, IFNULL(ac.age,'') as age, IFNULL(ac.gender,c.gender) as gender, acss.referred_by, GROUP_CONCAT(mp.name) AS service_name, IFNULL(ac.mobile,c.mobile) as patient_mobile, acss.has_token, acss.emergency_appointment, acss.id AS appointment_id, acss.queue_number, staff.NAME AS doctor_name, IFNULL(ac.first_name,c.child_name) AS patient_name, IFNULL(ac.id,c.id) AS patient_id, IF(ac.id IS NOT NULL,'CUSTOMER','CHILDREN') AS patient_type, DATE_FORMAT(DATE(acss.appointment_datetime),'%d-%m-%Y') AS appointment_date, acss.slot_time AS appointment_time FROM appointment_customer_staff_services AS acss JOIN medical_product_order_details AS mpod ON mpod.appointment_customer_staff_service_id = acss.id  JOIN medical_products mp ON mp.id = mpod.medical_product_id JOIN  hospital_service_categories AS hsc ON hsc.id = mp.hospital_service_category_id LEFT JOIN appointment_customers AS ac ON ac.id = acss.appointment_customer_id LEFT JOIN childrens AS c ON c.id = acss.children_id LEFT JOIN appointment_staffs AS staff ON staff.id = acss.appointment_staff_id WHERE acss.thinapp_id = $thin_app_id AND DATE(acss.appointment_datetime) =DATE(NOW()) and acss.STATUS != 'CANCELED' AND acss.payment_status ='SUCCESS'  AND hsc.hospital_service_category_type_id = 5 $condition GROUP BY acss.id  ORDER BY acss.appointment_datetime ASC ";
                $connection = ConnectionUtil::getConnection();
                $list = $connection->query($query);
                if ($list->num_rows) {
                    $list = mysqli_fetch_all($list,MYSQL_ASSOC);
                    foreach($list as $key => $doctor){
                        $list[$key]['queue_number'] =Custom::create_queue_number($doctor);
                    }
                    $response['list'] =$list;
                    $response['status'] = 1;
                    $response['message'] = "Appointment list found";
                } else {
                    $response['status'] = 0;
                    $response['message'] = "No appointment list found";
                }
            }
            Custom::sendResponse($response);
        }
        exit();
    }

    public static function get_social_link()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else {
                if (!$list = WebservicesFunction::readJson('social_setting_' . $thin_app_id, 'social_setting')) {
                    $query = "select twitter_usename, facebook_url,  website_url,  twitter_url,  youtube_url,  pinterest_url,  linkedin_url,  instagram_url  from thinapps where id = $thin_app_id limit 1";
                    $connection = ConnectionUtil::getConnection();
                    $message_list = $connection->query($query);
                    $list = mysqli_fetch_assoc($message_list);
                    WebservicesFunction::createJson('social_setting_' . $thin_app_id, $list, 'CREATE', 'social_setting');
                }
                if (!empty($list)) {

                    $return['mengage_url'] = SITE_PATH;
                    $return['instagram_url'] = !empty($list['instagram_url'])?$list['instagram_url']:'https://www.instagram.com/';
                    $return['linkedin_url'] = !empty($list['linkedin_url'])?$list['linkedin_url']:'https://in.linkedin.com/company/mengage';

                    $response['list'] =$return;
                    $response['status'] = 1;
                    $response['message'] = "Social List Found";
                } else {
                    $response['status'] = 0;
                    $response['message'] = "No social list found";
                }
            }
            Custom::sendResponse($response);
        }
        exit();
    }

    public static function search_patient_list()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $response = array();
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $appointment_user_role = isset($data['appointment_user_role']) ? $data['appointment_user_role'] : "USER";
            $search = isset($data['search']) ? $data['search'] : "";
            $request_from = isset($data['request_from']) ? $data['request_from'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            }else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            }  else {

                $limit = " limit 15";
                $condition ="";
                $customer_condition = " ac.thinapp_id = $thin_app_id AND ac.status ='ACTIVE'";
                $children_condition = " c.thinapp_id = $thin_app_id AND c.status ='ACTIVE'";

                if($request_from != 'CLINIC' && $appointment_user_role=="USER"){
                    $customer_condition .= " and ac.mobile ='$mobile' ";
                    $children_condition .= " and c.mobile ='$mobile' ";
                }
                if(!empty($search)){
                    $field =  is_numeric($search)?'final.mobile':'final.name';
                    $condition .= " where $field like'%$search%' ";
                }
                $query = "SELECT * FROM ( select 'CUSTOMER' as user_type, ac.address, ac.age, ac.id as customer_id, RIGHT(ac.mobile,10) AS mobile, ac.first_name as name ,ac.gender from appointment_customers as ac where $customer_condition UNION ALL select  'CHILDREN' as user_type, c.address, '' as age, c.id as customer_id, RIGHT(c.mobile,10) AS mobile, c.child_name as name ,c.gender from childrens as c  where $children_condition ) AS final $condition order by final.name $limit ";
                $connection = ConnectionUtil::getConnection();
                $list = $connection->query($query);
                if ($list->num_rows) {
                    $customer_list=array();
                    $list =mysqli_fetch_all($list,MYSQLI_ASSOC);;
                    foreach($list as $key => $value){
                        $customer_list[$key ]= $value;
                        $age_array = Custom::create_age_array($value['age']);
                        $customer_list[$key ]['year']= @$age_array['Year'];
                        $customer_list[$key ]['month']= @$age_array['Month'];
                    }
                    $response['customer_list'] = $customer_list;
                    $response['status'] = 1;
                    $response['message'] = "list found";
                } else {
                    $response['status'] = 0;
                    $response['message'] = "No list found";
                }
            }
            Custom::sendResponse($response);
        }
        exit();
    }

    public static function center_pharmacy_app_and_doctor_list()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $response = array();
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            }  else {
                $query = "SELECT t.name as app_name, t.id as app_id, staff.id AS doctor_id, staff.name AS doctor_name from appointment_staffs AS  staff JOIN thinapps AS t ON t.id =staff.thinapp_id AND t.category_name IN('HOSPITAL','DOCTOR') AND t.STATUS='ACTIVE' WHERE staff.staff_type='DOCTOR' AND staff.status = 'ACTIVE' order by staff.name asc";
                $connection = ConnectionUtil::getConnection();
                $list = $connection->query($query);
                if ($list->num_rows) {
                    $list = mysqli_fetch_all($list,MYSQL_ASSOC);
                    $final_array =array();
                    foreach($list as $key => $doctor){
                        $final_array[$doctor['app_id']]['app_name'] =$doctor['app_name'];
                        $final_array[$doctor['app_id']]['doctor_list'][] =array('doctor_id'=>$doctor['doctor_id'],'doctor_name'=>$doctor['doctor_name']);
                    }
                    $response['list'] =$final_array;
                    $response['status'] = 1;
                    $response['message'] = "Doctor list found";
                } else {
                    $response['status'] = 0;
                    $response['message'] = "No doctor found";
                }
            }
            Custom::sendResponse($response);
        }
        exit();
    }

    public static function get_doctor_running_token_detail()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $doctor_id = isset($data['doctor_id']) ? $data['doctor_id'] : "";
            $address_id = isset($data['address_id']) ? $data['address_id'] : "";
            $service_id = isset($data['service_id']) ? $data['service_id'] : "";
            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($doctor_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid doctor id';
            }else if (empty($address_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid address id';
            }else if (empty($service_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid service id';
            }  else {

                $current_token = $current_time = $next_available_token= $next_available_time= "N/A";
                if (Custom::check_app_enable_permission($thin_app_id, 'SMART_CLINIC')) {
                    $list = Custom::getDoctorWebTrackerDataUpcomingList(array($doctor_id),$thin_app_id,1);

                    if($list[$doctor_id]['patient_queue_type']=='EMERGENCY_CHECKIN'){
                        $current_token ="Emergecy";
                    }else if($list[$doctor_id]['patient_queue_type']=='REPORT_CHECKIN'){
                        $current_token ="Report Patient";
                    }else if($list[$doctor_id]['patient_queue_type']=='LATE_CHECKIN'){
                        $current_token ="Late Patient";
                    }else{
                        $current_token =!empty($list[$doctor_id]['current_token'])?$list[$doctor_id]['current_token']:"N/A";
                        $current_time =!empty($list[$doctor_id]['current_time'])?$list[$doctor_id]['current_time']:"N/A";
                    }

                }else{
                    $query = "SELECT acss.created, acss.has_token, acss.sub_token, acss.emergency_appointment, acss.custom_token, acss.queue_number, acss.slot_time FROM appointment_customer_staff_services AS acss WHERE acss.appointment_staff_id = $doctor_id AND acss.appointment_address_id =$address_id AND DATE(acss.appointment_datetime) = DATE(NOW()) AND acss.`status` IN('NEW','CONFIMR','RESCHEDULE') AND acss.skip_tracker ='NO' AND acss.delete_status = 'NONE' ORDER BY acss.appointment_datetime asc, acss.created asc LIMIT 1";
                    $connection = ConnectionUtil::getConnection();
                    $list = $connection->query($query);
                    if ($list->num_rows) {
                        $tracker_data =  mysqli_fetch_assoc($list);
                        $current_token = Custom::create_queue_number($tracker_data);
                        $current_time = ($tracker_data['emergency_appointment']=='YES')?date('h:i A',strtotime($tracker_data['created'])):$tracker_data['slot_time'];
                    }
                }


                $next_available_token = "";
                $available_slot = Custom::get_doctor_next_available_slot($thin_app_id, $doctor_id, $address_id, date('Y-m-d'), 'CURRENT', true, "USER");
                $booking_date =date('Y-m-d');
                if(!empty($available_slot)){
                    if (Custom::check_app_enable_permission($thin_app_id, 'NEW_QUICK_APPOINTMENT')) {
                        $doctor_data = Custom::ive_get_doctor_custom_data($thin_app_id, $doctor_id, true);
                        $service_id = !empty($service_id)?$service_id:$doctor_data['service_id'];
                        $slot_array = Custom::new_get_appointment_slot($thin_app_id, $doctor_id, $service_id, $address_id, $doctor_data['setting_type'], $booking_date,true,false,"USER");
                        $next_available_token = !empty($slot_array[$available_slot]['token']) ? $slot_array[$available_slot]['token'] : false;
                    } else {
                        $doctor_data = Custom::ive_get_doctor_custom_data($thin_app_id, $doctor_id);
                        $slot_array = Custom::load_doctor_slot_by_address($booking_date, $doctor_id, $doctor_data['service_slot_duration'], $thin_app_id, $address_id,true,"USER");
                        $next_available_token = !empty($slot_array[$available_slot]['queue_number']) ? $slot_array[$available_slot]['queue_number'] : false;
                    }
                }else{
                    $doctor_data = Custom::ive_get_doctor_custom_data($thin_app_id, $doctor_id);
                    $book_more_slot = Custom::load_doctor_slot_by_address($booking_date, $doctor_id, $doctor_data['service_slot_duration'], $thin_app_id, $address_id, false, "ADMIN", true, true);
                    $book_more_slot = end($book_more_slot);
                    if(@$book_more_slot['custom_slot']=='YES'){
                        $available_slot = @$book_more_slot['slot'];
                        $next_available_token = @$book_more_slot['queue_number'];
                    }
                }

                $response['data']['current_token'] = $current_token;
                $response['data']['current_time'] = $current_time;
                $response['data']['next_available_token'] = !empty($next_available_token)?$next_available_token:'N/A';
                $response['data']['next_available_time'] = !empty($available_slot)?$available_slot:'N/A';
                $response['status'] = 1;
                $response['message'] = "Tracker data found";
            }
            Custom::sendResponse($response);
        }
        exit();
    }

    public static function send_to_lab($data=null)
    {

        if(empty($data)){
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);
        }

        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $appointment_id = !empty($data['appointment_id']) ? $data['appointment_id'] : "";
            $appointment_user_role = !empty($data['appointment_user_role']) ? $data['appointment_user_role'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            }else if (empty($appointment_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid appointment id';
            } else {
                $send_notification = false;
                $connection = ConnectionUtil::getConnection();
                $created = Custom::created();
                $sql = "UPDATE appointment_customer_staff_services set send_to_lab_datetime=?, modified=?, patient_queue_type =?, skip_tracker =?, patient_queue_checked_in=? where id = ?";
                $stmt = $connection->prepare($sql);
                $lab_test = "LAB_TEST";
                $skip_tracker = "NO";
                $modified =Custom::created();
                $patient_queue_checked_in = "NO";
                $stmt->bind_param('ssssss',$created, $modified, $lab_test, $skip_tracker, $patient_queue_checked_in,  $appointment_id);
                if ($stmt->execute()) {
                    $send_notification = true;
                    $response['status'] = 1;
                    $appointment_data = Custom::get_appointment_by_id($appointment_id);
                    $response['data']['button_list'] = Custom::create_appointment_button_array($thin_app_id, $appointment_user_role,$appointment_data);
                    $response['message'] = "Send to lab successfully";
                } else {
                    $response['status'] = 0;
                    $response['message'] = "Unble to send";
                }
            }
            Custom::sendResponse($response);
            if($send_notification){
                Custom::send_process_to_background();
                $result = Custom::manage_emergency_tracker_cache($appointment_id,"DELETE");
                Custom::update_tracker_time_difference($appointment_id);
                Custom::send_web_tracker_notification($thin_app_id);
            }

        }
        exit();
    }

    public static function check_in_patient($data=null,$return=false)
    {
        
        if(empty($data)){
            $request = file_get_contents("php://input");
            $data = json_decode($request, true);
            $return = true;
        }
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $mobile = isset($data['mobile']) ? $data['mobile'] : "";
            $appointment_id = !empty($data['appointment_id']) ? $data['appointment_id'] : "";
            $check_in_type = !empty($data['check_in_type']) ? strtoupper(strtolower($data['check_in_type'])) : "";
            $doctor_id = !empty($data['doctor_id']) ? $data['doctor_id'] : "";
            $appointment_user_role = !empty($data['appointment_user_role']) ? $data['appointment_user_role'] : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            } else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid mobile';
            }else if (empty($appointment_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid appointment id';
            } else {
                $send_notification = false;
                $appointment_data = Custom::get_appointment_by_id($appointment_id);
                if(!empty($appointment_data)){
                    $connection = ConnectionUtil::getConnection();
                    $patient_queue_checked_in = "YES";
                    $patient_queue_type = strtoupper($check_in_type);
                    $skip_tracker = "NO";
                    $queue_assign_type =1;
                    $queue_check_in_datetime = $check_in_datetime= date('Y-m-d H:i:s');
                    $show_after_queue =Custom::get_auto_assign_token($appointment_data['appointment_staff_id'],$thin_app_id,$check_in_type);
                    if(strtoupper($check_in_type)=="EARLY_CHECKIN"){
                        $first_datetime_data = Custom::get_first_checking_datetime_after_token_data(date('Y-m-d'), $appointment_data['appointment_staff_id'], $appointment_data['appointment_service_id'], $appointment_data['appointment_address_id'],$show_after_queue);
                        if(!empty($first_datetime_data)){
                            $queue_check_in_datetime = $first_datetime_data['less_date'];
                        }
                    }

                    $sql = "UPDATE appointment_customer_staff_services set check_in_datetime =?, patient_queue_type =?, skip_tracker =?, patient_queue_checked_in=?, show_after_queue=?, queue_assign_type=?, queue_check_in_datetime =? where id = ?";
                    $stmt = $connection->prepare($sql);
                    $stmt->bind_param('ssssssss', $check_in_datetime, $patient_queue_type, $skip_tracker, $patient_queue_checked_in, $show_after_queue, $queue_assign_type, $queue_check_in_datetime, $appointment_id);
                    if ($stmt->execute()) {
                        $send_notification = true;
                        $response['status'] = 1;
                        $appointment_data = Custom::get_appointment_by_id($appointment_id);
                        $response['data']['button_list'] = Custom::create_appointment_button_array($thin_app_id, $appointment_user_role,$appointment_data);
                        $response['message'] = "Checkin successfully";
                    } else {
                        $response['status'] = 0;
                        $response['message'] = "Unable to checkin";
                    }
                }else{
                    $response['status'] = 0;
                    $response['message'] = "Invalid appointment";
                }

            }
            if($return===true){
               return json_encode($response);
            }else{
                Custom::sendResponse($response);
                if($send_notification){
                    Custom::send_process_to_background();
                    $result = Custom::manage_emergency_tracker_cache($appointment_id,"DELETE");
                    Custom::update_tracker_time_difference($appointment_id);
                    Custom::send_web_tracker_notification($thin_app_id);
                }
            }


        }
       exit();
    }

    public static function get_appointment_list_via_number()
    {
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $response = array();
            $app_key = isset($data['app_key']) ? $data['app_key'] : "";
            $user_id = isset($data['user_id']) ? $data['user_id'] : "";
            $thin_app_id = isset($data['thin_app_id']) ? $data['thin_app_id'] : "";
            $patient_mobile = isset($data['patient_mobile']) ? Custom::create_mobile_number($data['patient_mobile']) : "";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            }else if (empty($app_key)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid app key';
            } else if (empty($user_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid user id';
            }else if (empty($patient_mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid patient mobile number';
            }  else {

                $query = "SELECT acss.id,acss.emergency_appointment, acss.sub_token, acss.appointment_datetime,acss.patient_queue_type, IFNULL(ac.first_name,c.child_name) AS patient_name FROM appointment_customer_staff_services AS acss LEFT JOIN appointment_customers AS ac ON ac.id =acss.appointment_customer_id LEFT JOIN childrens AS c ON c.id = acss.children_id WHERE acss.thinapp_id = $thin_app_id  AND DATE(acss.appointment_datetime) = DATE(NOW()) AND acss.`status` IN('NEW','CONFIRM','RESCHEDULE') AND acss.payment_status = 'SUCCESS' AND acss.patient_queue_checked_in ='NO' AND (ac.mobile='$patient_mobile' OR c.mobile='$patient_mobile') ORDER BY acss.appointment_datetime ASC LIMIT 5";
                $connection = ConnectionUtil::getConnection();
                $list = $connection->query($query);
                if ($list->num_rows) {
                    $customer_list=array();
                    $list =mysqli_fetch_all($list,MYSQLI_ASSOC);;
                    foreach($list as $key => $value){
                        $customer_list[$key]['appointment_id']= $value['id'];
                        $customer_list[$key]['patient_name']= $value['patient_name'];
                        $customer_list[$key]['report_checkin']= "REPORT_CHECKIN";
                        if($value['patient_queue_type']=='NONE' && ($value['emergency_appointment']=="YES" || $value['sub_token']=='YES')){
                            $customer_list[$key]['checkin_type'] ="EMERGENCY_CHECKIN";
                        }else if($value['patient_queue_type']=='LAB_TEST'){
                            $customer_list[$key]['checkin_type'] ="REPORT_CHECKIN";
                        }else{
                            $customer_list[$key]['checkin_type'] = (strtotime($value['appointment_datetime'] > strtotime(date('Y-m-d H:i'))))?'EARLY_CHECKIN':'LATE_CHECKIN';
                        }
                    }
                    $response['appointment_list'] = $customer_list;
                    $response['status'] = 1;
                    $response['message'] = "list found";
                } else {
                    $response['status'] = 0;
                    $response['message'] = "No list found";
                }
            }
            Custom::sendResponse($response);
        }
        exit();
    }

	
    public static function whatsapp_callback(){
    	//WebservicesFunction::createJson(date('Ymdhis'),json_encode($_POST),"CREATE","NOT_TO_DELETE_CACHE/whatsapp");die;
        $file_name = $_REQUEST['MessageSid'];
        $MessageStatus = $_REQUEST['SmsStatus'];
    	$MessageDetail = $_REQUEST['MessageStatus'];
    
        $sent_via = "WEB";
        $router_name = "TWELLIO";
        $created = Custom::created();
        $sms_type = "WHATSAPP_SMS";
        $status = "SUCCESS";
        $thin_app_id = 0;
        $message="";
        if($data = json_decode(WebservicesFunction::readJson($file_name,"NOT_TO_DELETE_CACHE/whatsapp"),true)){
            $thin_app_id = !empty($data['thin_app_id'])?$data['thin_app_id']:0;
            $message = (isset($data['callback_sms']))?$data['callback_sms']:"";
            $mobile = (isset($data['mobile']))?$data['mobile']:"";
        }
        $sendSms = false;
        if($MessageStatus=='failed' || $MessageStatus =='Undelivered'){
            $status = "FAILED";
            $sendSms = true;
        	if(!empty($thin_app_id) && !empty($message)){
                $res = Custom::send_single_sms($data['mobile'],$message,$thin_app_id,false,false);
            }
        	WebservicesFunction::deleteJson(array($file_name),"NOT_TO_DELETE_CACHE/whatsapp"); 
        }
    	if($status=="FAILED" || $MessageStatus =='delivered'){
        	if(!empty($mobile) && !empty($thin_app_id))
        {
            $connection = ConnectionUtil::getConnection();
            $sql = "INSERT INTO sent_sms_details (receiver_mobile, thinapp_id, `status`, message_text, sent_via, router_name, sms_response_id,created,modified,sms_type,response_detail) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?)";
            $stmt = $connection->prepare($sql);
            $stmt->bind_param('sssssssssss', $mobile, $thin_app_id, $status, $message, $sent_via,$router_name,$file_name,$created,$created,$sms_type,$MessageDetail);
            $res =  $stmt->execute();
            WebservicesFunction::deleteJson(array($file_name),"NOT_TO_DELETE_CACHE/whatsapp"); 
        }	
        
        }

        

       
    	die('success');

    }

	 public static function chatboat_doctor_categories_list()
    {
        $response = array();
        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if (isset($data['thin_app_id'])) {
            $thin_app_id = $data['thin_app_id'];
            $sql = "SELECT dc.* FROM `department_categories` as dc  join  appointment_staffs as staff on staff.department_category_id = dc.id  WHERE dc.department_name = 'DOCTOR' and staff.staff_type='DOCTOR' and staff.thinapp_id=$thin_app_id and staff.status='ACTIVE' group by dc.category_name ORDER BY dc.category_name DESC";
            $connection = ConnectionUtil::getConnection();
            $dataRS = $connection->query($sql);
            $dataToSend = mysqli_fetch_all($dataRS, MYSQLI_ASSOC);
            $response['status'] = 1;
            $response['data'] = $dataToSend;
        } else {
            $response['status'] = 0;
            $response['message'] = "No record found";
        }
        echo json_encode($response);
        exit();
    }


    public static function get_doctor_list_via_category_id()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? base64_decode($data['thin_app_id']) : "";
            $category_id = isset($data['category_id']) ? base64_decode($data['category_id']) : "";
            $doctor_id = isset($data['category_id']) ? base64_decode($data['doctor_id']) : "";
            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp id';
            }else {
                $condition = "and staff.department_category_id = $category_id";
                if(!empty($doctor_id)){
                    $condition = " and staff.id = $doctor_id ";
                }

                $query = "SELECT staff.profile_photo, aa.id AS address_id, aa.address, staff.id, staff.name as doctor_name, staff.department_category_id from appointment_staffs as staff  left join appointment_staff_addresses as asa on asa.appointment_staff_id = staff.id LEFT JOIN appointment_addresses AS aa ON aa.id = asa.appointment_address_id AND aa.`status`='ACTIVE'  where staff.thinapp_id=$thin_app_id $condition  and staff.staff_type='DOCTOR' AND staff.status = 'ACTIVE'  order by staff.name asc";

                $connection = ConnectionUtil::getConnection();
                $list = $connection->query($query);
                if ($list->num_rows) {
                    $data_list = mysqli_fetch_all($list,MYSQLI_ASSOC);
                    $tmp_data=array();
                    foreach ($data_list as $key => $doctor){
                        $tmp_data[$doctor['id']]['id'] =$doctor['id'];
                        $tmp_data[$doctor['id']]['doctor_name'] =$doctor['doctor_name'];
                        $tmp_data[$doctor['id']]['doctor_photo'] =$doctor['profile_photo'];
                        $tmp =array(
                            'address_id'=>$doctor['address_id'],
                            'address'=>$doctor['address'],
                        );
                        $tmp_data[$doctor['id']]['address_list'][] =$tmp;
                    }
                    foreach ($tmp_data as $key => $all_data){
                        $response['doctor_list'][] =$all_data;
                    }

                    $begin = new DateTime(date('Y-m-d'));
                    $end = new DateTime(date('Y-m-d', strtotime("+5 Days")));
                    $daterange = new DatePeriod($begin, new DateInterval('P1D'), $end);
                    $current_date = date("Y-m-d");
                    $tomorrow = new DateTime(date('Y-m-d', strtotime("+1 Days")));
                    foreach ($daterange as $key => $date) {
                        $new_date = $date->format("Y-m-d");
                        $label = $date->format("d M");
                        $date_slot[$key]['date'] = $new_date;
                        $date_slot[$key]['label'] =$label;
                        if($new_date == $current_date){
                            $date_slot[$key]['label'] ='Today';
                        }else if($new_date == $tomorrow->format("Y-m-d")){
                            $date_slot[$key]['label'] ='Tomorrow';
                        }
                    }



                    $response['days'] =$date_slot;
                    $response['status'] = 1;
                    $response['message'] = "List Found";
                } else {
                    $response['status'] = 0;
                    $response['message'] = "No list found";
                }
            }
            Custom::sendResponse($response);
        }
        exit();
    }


    public static function chatboat_doctor_time_slot()
    {


        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? base64_decode($data['thin_app_id']) : "";
            $doctor_id = isset($data['doctor_id']) ? base64_decode($data['doctor_id']) : "";
            $address_id = isset($data['address_id']) ? base64_decode($data['address_id']) : "";
            $booking_date = isset($data['booking_date']) ? date("Y-m-d", strtotime(base64_decode($data['booking_date']))) : "";
            $service_id = isset($data['service_id']) ? $data['service_id'] : 0;
            $appointment_user_role = "USER";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp';
            }else if (empty($doctor_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid doctor';
            } else if (empty($booking_date)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid date';
            }else if (empty($address_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid address';
            } else {


                $doctor_data = Custom::get_doctor_by_id($doctor_id);
                $mobile = $doctor_data['mobile'];
                $role_id = 1;
                $appointment_user_role = !empty($appointment_user_role) ? $appointment_user_role : Custom::get_appointment_role($mobile, $thin_app_id, $role_id);
                if (Custom::check_app_enable_permission($thin_app_id, 'QUICK_APPOINTMENT')) {
                    $service_data = Custom::get_doctor_service_data($doctor_id);
                    $show_expire_token_slot = !empty($service_data['show_expire_token_slot'])?$service_data['show_expire_token_slot']:"NO";
                    $expired_slots = ($show_expire_token_slot == "YES") ? true : false;
                    $service_slot_duration = $service_data['service_slot_duration'];
                    $slot_list = Custom::load_doctor_slot_by_address($booking_date, $doctor_id, $service_slot_duration, $thin_app_id, $address_id, false, $appointment_user_role,true,$expired_slots);
                } else {

                    $doctor_data = Custom::get_doctor_by_id($doctor_id, $thin_app_id);
                    if(in_array($appointment_user_role,array('ADMIN','RECEPTIONIST','DOCTOR','STAFF'))){
                        $app_data = Custom::getThinAppData($thin_app_id);
                        $show_expire_token_slot = !empty($app_data['show_expire_token_slot'])?$app_data['show_expire_token_slot']:"NO";
                        $expired_slots = ($show_expire_token_slot == "YES") ? true : false;
                    }else{
                        $expired_slots = false;
                    }
                    $slot_list = Custom::new_get_appointment_slot($thin_app_id, $doctor_id, $service_id, $address_id, @$doctor_data['appointment_setting_type'], $booking_date,false,false,$appointment_user_role,$expired_slots);
                }

                if (!empty($slot_list)) {
                    $response['status'] = 1;
                    $response['message'] = "Slots Found";
                    $response['slot_list'] = $slot_list;
                } else {
                    $response['status'] = 0;
                    $response['message'] = "This slot is not available";
                }
            }

            Custom::sendResponse($response);
        }
        exit;
    }


    public static function chatboat_appointment_booking()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? base64_decode($data['thin_app_id']) : "";
            $doctor_id = isset($data['doctor_id']) ? base64_decode($data['doctor_id']) : "";
            $address_id = isset($data['address_id']) ? base64_decode($data['address_id']) : "";
            $booking_date = isset($data['booking_date']) ? date("Y-m-d", strtotime(base64_decode($data['booking_date']))) : "";
            $service_id = isset($data['service_id']) ? $data['service_id'] : 0;
            $appointment_user_role = "USER";

            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp';
            }else if (empty($doctor_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid doctor';
            } else if (empty($booking_date)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid date';
            }else if (empty($address_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid address';
            } else {


                $doctor_data = Custom::get_doctor_by_id($doctor_id);
                $mobile = $doctor_data['mobile'];
                $role_id = 1;
                $appointment_user_role = !empty($appointment_user_role) ? $appointment_user_role : Custom::get_appointment_role($mobile, $thin_app_id, $role_id);
                if (Custom::check_app_enable_permission($thin_app_id, 'QUICK_APPOINTMENT')) {
                    $service_data = Custom::get_doctor_service_data($doctor_id);
                    $show_expire_token_slot = !empty($service_data['show_expire_token_slot'])?$service_data['show_expire_token_slot']:"NO";
                    $expired_slots = ($show_expire_token_slot == "YES") ? true : false;
                    $service_slot_duration = $service_data['service_slot_duration'];
                    $slot_list = Custom::load_doctor_slot_by_address($booking_date, $doctor_id, $service_slot_duration, $thin_app_id, $address_id, false, $appointment_user_role,true,$expired_slots);
                } else {

                    $doctor_data = Custom::get_doctor_by_id($doctor_id, $thin_app_id);
                    if(in_array($appointment_user_role,array('ADMIN','RECEPTIONIST','DOCTOR','STAFF'))){
                        $app_data = Custom::getThinAppData($thin_app_id);
                        $show_expire_token_slot = !empty($app_data['show_expire_token_slot'])?$app_data['show_expire_token_slot']:"NO";
                        $expired_slots = ($show_expire_token_slot == "YES") ? true : false;
                    }else{
                        $expired_slots = false;
                    }
                    $slot_list = Custom::new_get_appointment_slot($thin_app_id, $doctor_id, $service_id, $address_id, @$doctor_data['appointment_setting_type'], $booking_date,false,false,$appointment_user_role,$expired_slots);
                }

                if (!empty($slot_list)) {
                    $response['status'] = 1;
                    $response['message'] = "Slots Found";
                    $response['slot_list'] = $slot_list;
                } else {
                    $response['status'] = 0;
                    $response['message'] = "This slot is not available";
                }
            }

            Custom::sendResponse($response);
        }
        exit;
    }

   public static function chatboat_book_appointment()
    {

        $request = file_get_contents("php://input");
        $data = json_decode($request, true);
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $response = array();
            $thin_app_id = isset($data['thin_app_id']) ? base64_decode($data['thin_app_id']) : "";
            $doctor_id = isset($data['doctor_id']) ? base64_decode($data['doctor_id']) : "";
            $address_id = isset($data['address_id']) ? base64_decode($data['address_id']) : "";
            $patient_id = isset($data['patient_id']) ? base64_decode($data['patient_id']) : "";
            $patient_type = isset($data['patient_type']) ? ($data['patient_type']) : "";
            $booking_date = isset($data['booking_date']) ? date("Y-m-d", strtotime(($data['booking_date']))) : "";
            $queue_number = isset($data['queue_number']) ? ($data['queue_number']) : "";
            $time_slot = isset($data['time_slot']) ? ($data['time_slot']) : "";
            $appointment_user_role = "USER";
            $book_for =isset($data['book_for']) ? ($data['book_for']) : "self";


            $patient_name =isset($data['patient_name']) ? ($data['patient_name']) : "";
            $patient_mobile =isset($data['patient_mobile']) ? Custom::create_mobile_number($data['patient_mobile']) : "";
            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid thinapp';
            }else if (empty($doctor_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid doctor';
            } else if (empty($booking_date)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid date';
            }else if (empty($address_id)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid address';
            }else if (empty($patient_name)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter patient name';
            }else if (empty($patient_mobile)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter 10 digit mobile number';
            }else if (empty($time_slot)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid time slot';
            }else if (empty($queue_number)) {
                $response['status'] = 0;
                $response['message'] = 'Invalid token';
            }else if ($book_for!='self' && empty($patient_name)) {
                $response['status'] = 0;
                $response['message'] = 'Please enter patient name';
            }else if ($patient_type != 'CUSTOMER' && $patient_type != 'CHILDREN') {
                $response['status'] = 0;
                $response['message'] = 'Invalid patient type';
            } else {




                $search_patient =Custom::get_customer_by_name($thin_app_id,$patient_name,$patient_mobile);
                if(empty($search_patient)){
                    $search_patient =Custom::get_first_customer_by_mobile($thin_app_id,$patient_mobile);
                }
                if(!empty($search_patient)){

                    $user_id = $search_patient['user_id'];
                    $connection = ConnectionUtil::getConnection();
                    $connection->autocommit(false);
                    $folder_id =$search_patient['folder_id'];
                    $patient_id =$search_patient['id'];
                    $query = "update appointment_customers set first_name =?, modified =? where id = ?";
                    $stmt_patient = $connection->prepare($query);
                    $stmt_patient->bind_param('sss', $patient_name, $created, $patient_id);
                    $query = "update drive_folders set folder_name=?, modified =? where id = ?";
                    $stmt_folder = $connection->prepare($query);
                    $stmt_folder->bind_param('sss', $patient_name, $created, $folder_id);
                    if ($stmt_patient->execute() && $stmt_folder->execute()) {
                        $connection->commit();
                    }
                }else{
                    $app_admin_data = Custom::get_thinapp_admin_data($thin_app_id);
                    $user_id = $app_admin_data['id'];
                    $customer = array();
                    $customer['app_key'] = APP_KEY;
                    $customer['thin_app_id'] = $thin_app_id;
                    $customer['user_id'] = $user_id;
                    $customer['first_name'] = $patient_name;
                    $customer['mobile'] = $patient_mobile;
                    $customer['country_code'] = "+91";
                    $result = WebservicesFunction::appointment_add_customer($customer);
                    $result = $customer_data = json_decode($result, true);
                    if ($result['status'] == 1) {
                        $patient_id = $result['customer_id'];
                    }else if (!empty($result['customer_id'])){
                        $patient_id = $result['customer_id'];
                    }
                }

                $post = array();
                $role_id = !empty($get_user_data) ? $get_user_data['role_id'] : 1;
            	
            	if(empty($user_id)){
                    $app_admin_data = Custom::get_thinapp_admin_data($thin_app_id);
                    $user_id = $app_admin_data['id'];
                }
            
                $post['app_key'] = APP_KEY;
                $post['thin_app_id'] = $thin_app_id;
                $post['user_id'] = $user_id;
                $post['role_id'] = 1;
                $post['mobile'] = $patient_mobile;
                $post['booking_date'] = $booking_date;
                $post['slot_time'] = $time_slot;
                $post['doctor_id'] = $doctor_id;
                $post['user_type'] = $patient_type;
                $post['children_id'] = 0;
                $post['address_id'] = $address_id;
                $post['customer_id'] = $patient_id;
                $post['queue_number'] = $queue_number;
                $post['customer_dob'] = '';
                $post['appointment_user_role'] = "USER";
                $post['payment_type'] = "CASH";
                $response = WebservicesFunction::check_appointment_validity($post, true);
                if ($response['status'] == 1) {
                    $convenience_fee = 0;//$response['data']['convenience_fee'];
                    $response = json_decode(WebservicesFunction::add_new_appointment($post, true, 'CHAT_BOAT'), true);
                    if ($response['status'] == 1) {
                        $notification_data = $response['notification_data'];
                        $tmp['status'] ='1';
                        $tmp['message'] =$response['message'];
                    	$tmp['convenience_fee'] =!empty($convenience_fee)?$convenience_fee:0;
                        $tmp['data'] =$response['data'];
                        $response=$tmp;
                    }
                }

            }

            Custom::sendResponse($response);
            if (!empty($notification_data)) {
                Custom::send_process_to_background();
              //  $result = Custom::send_book_appointment_notification($notification_data);
               // $result = Custom::send_web_tracker_notification($thin_app_id);
            }
        }
        exit;
    }

	

}

