<?php
/**
 * Static content controller.
 *
 * This file will render views from views/pages/
 *
 * CakePHP(tm) : Rapid Development Framework (http://cakephp.org)
 * Copyright (c) Cake Software Foundation, Inc. (http://cakefoundation.org)
 *
 * Licensed under The MIT License
 * For full copyright and license information, please see the LICENSE.txt
 * Redistributions of files must retain the above copyright notice.
 *
 * @copyright     Copyright (c) Cake Software Foundation, Inc. (http://cakefoundation.org)
 * @link          http://cakephp.org CakePHP(tm) Project
 * @package       app.Controller
 * @since         CakePHP(tm) v 0.2.9
 * @license       http://www.opensource.org/licenses/mit-license.php MIT License
 */

App::uses('AppController', 'Controller');
include(WWW_ROOT . "webservice" . DS . "ConnectionUtil.php");
include(WWW_ROOT . "webservice" . DS . "WebservicesFunction.php");
include(WWW_ROOT . "webservice" . DS . "WebServicesFunction_2_3.php");


$http_origin = isset($_SERVER['HTTP_ORIGIN'])?$_SERVER['HTTP_ORIGIN']:'';
if ($http_origin == "https://mngz.in:1703")
{
    header("Access-Control-Allow-Origin: $http_origin");
}

/**
 * Static content controller
 *
 * Override this controller by placing a copy in controllers directory of an application
 *
 * @package       app.Controller
 * @link http://book.cakephp.org/2.0/en/controllers/pages-controller.html
 */
class AppAdminController extends AppController
{

    /**
     * This controller does not use a model
     *
     * @var array
     */






    function beforeFilter()
    {

        $login = $this->Session->read('Auth.User');
    //echo "<pre>";	
    //print_r($this->Session);die;
		
        $this->layout = 'app_admin_home';
        parent::beforeFilter();

        $this->Auth->allow('get_update_ward','upload_doctor_image','view_cms_doc_dashboard','assign_appointment_doctor','web_add_hospital_receipt','proforma_invoice','search_list_view_appointment','update_ipd','add_file_notify','check_in_patient','update_patient_hospital_uhid','change_dental_supplier_password','update_password', 'generate_forgot_otp', 'upload_department_image', 'upload', 'login', 'org_login', 'org_login_ajax', 'get_org', 'verify', 'verify_ajax', 'forgot_password', 'reset', 'view_cms', 'load_blog_post');

        /*this code check customer has payment for its app or not*/
        $action = $this->request->params['action'];
        if(!in_array($action,array('upload_doctor_image','view_cms_doc_dashboard','assign_appointment_doctor','proforma_invoice','web_add_hospital_receipt'))){
            $not_validate = array('upload', 'update_password', 'generate_forgot_otp', 'login', 'org_login', 'org_login_ajax', 'get_org', 'verify', 'verify_ajax', 'forgot_password', 'reset', 'view_cms');
            if (!in_array($action, $not_validate)) {
                if (!empty($login)) {
                    $not_validate = array('get_state_list','get_city_list','web_add_hospital_receipt','proforma_invoice','search_list_view_appointment','app_info', 'payment', 'download', 'logout');
                    if (!$this->Custom->app_has_default_channel($login['User']['thinapp_id'])) {
                        /* this condition check app user login with app first time or not*/
                        if (!in_array($action, $not_validate)) {
                            $this->Session->setFlash(__('Please login into mobile first.'), 'default', array(), 'info');
                            $this->redirect(array('controller' => 'app_admin', 'action' => 'app_info', 'admin' => false));
                        }
                    } else {

                        $role = $login['USER_ROLE'];//Custom::hospital_get_user_role($login['User']['mobile'],$login['User']['thinapp_id'],$login['User']['role_id']);
                        if ($role == "STAFF" || $role == 'DOCTOR' || $role == 'RECEPTIONIST') {
                            $allow_login = Custom::check_doctor_active_login_status($login['AppointmentStaff']['id'], $login['AppointmentStaff']['password']);
                            if ($allow_login) {
                                $not_validate = array('update_ward','get_update_ward','upload_doctor_image','today_collection','get_state_list','get_city_list','count_credit','skip_payment_queue','update_ipd','add_file_notify','search_prescription_list','prescription_list','download_prescription','ivr_call_list','list_view_appointment','save_appointment_consent','check_in_appointment','load_slot_data_by_type','send_followup_reminder','search_drive','get_app_medical_product_list','get_add_category_modal', 'add_hospital_service_category_ajax', 'get_add_hospital_service_modal', 'add_hospital_service_ajax', 'get_add_hospital_service_lab_modal', 'add_hospital_service_lab_ajax', 'get_add_hospital_service_service_modal', 'add_hospital_service_service_ajax','delete_admit_patient','get_add_appointment_payment','delete_deposit_amount','refund_due_appointment','pay_due_appointment','get_due_amount','refund_amount','add_admin_book_appointment','save_billing_report_table_header','delete_share','share_file','rename_folder','delete_folder','change_folder_permission','add_folder','add_file_notify','upload_file','drive','drive_data','get_inventory_report_lab','search_inventory_report_lab','add_product_quantity_lab','edit_product_quantity_lab','list_hospital_service_inventory_lab','edit_hospital_service_lab','add_hospital_service_lab','hospital_service_lab','search_hos_ser_lab','get_inventory_report_service','search_inventory_report_service','add_product_quantity_service','edit_product_quantity_service','list_hospital_service_inventory_service','edit_hospital_service_service','add_hospital_service_service','hospital_service_service','search_hos_ser_service','get_inventory_report_hospital','search_inventory_report_hospital','add_product_quantity_hospital','edit_product_quantity_hospital','list_hospital_service_inventory_hospital','edit_hospital_service_hospital','add_hospital_service_hospital','hospital_service_hospital','search_hos_ser_hospital','get_medical_product_dead_list','add_medical_product_dead_quantity','edit_medical_product_dead_quantity','get_patient_data_name_list', 'get_patient_data_address_list', 'list_hospital_service_inventory', 'edit_product_quantity', 'add_product_quantity', 'search_inventory_report', 'get_inventory_report', 'patient_input_search', 'billing_setting', 'hospital_service', 'search_hos_ser', 'edit_hospital_service', 'add_hospital_service', 'hospital_service_category', 'search_hos_service', 'edit_hospital_service_category', 'add_hospital_service_category', 'hospital_tax_rate', 'search_hos_tax_rate', 'edit_hospital_tax_rate', 'add_hospital_tax_rate', 'hospital_payment_type', 'search_hos_pay_type', 'edit_hospital_payment_type', 'add_hospital_payment_type', 'update_billing_title', 'add_package_receipt_ajax', 'get_add_package_receipt', 'close_package', 'add_more_package', 'add_patient_to_package', 'get_previous_package_list', 'get_billing_stats', 'add_patient_before_receipt', 'send_sms', 'change_barcode_status', 'ipd_load_all_receipt', 'appointment_skip', 'refund_order_amount', 'upload_doctor_image', 'get_city_list','get_city_list_json', 'get_state_list','get_state_list_json', 'doctor_profile', 'load_staff_appointment', 'view_staff_app_schedule', 'dashboard', 'change_doctor_password', 'mobile_input_search', 'patient_name_input_search', 'web_add_hospital_receipt', 'uhid_input_search', 'add_hospital_receipt_search', 'logout', 'web_edit_order', 'getEditMedicalOrder', 'print_invoice_non_opd', 'print_prescription', 'print_invoice', 'web_edit_customer', 'load_edit_customer_modal', 'cancel_appointment', 'reschedule_appointment', 'load_reschedule_modal', 'load_slot_data_reschadule', 'print_prescription', 'web_pay_appointment', 'web_book_appointment', 'web_get_book_new_appointment', 'get_book_new_appointment', 'add_appointment', 'load_doctor_address', 'load_book_appointment_modal', 'load_slot_data', 'search_appointment_customer', 'load_search_customer_list', 'get_doc_address_list', 'get_doc_service_list', 'view_app_schedule', 'view_staff_app_schedule', 'load_staff_appointment', 'medical_product_orders', 'setting_print_prescription', 'search_appointment_customer_without_token', 'load_search_customer_list_without_token', 'load_search_customer_list_uhid_without_token', 'get_book_new_appointment_without_token', 'web_book_appointment_without_token', 'web_pay_appointment', 'web_edit_order', 'load_search_customer_list_uhid', 'save_setting_prescription', 'web_prescription', 'search_medical_product_orders', 'opd', 'ipd_all', 'ipd', 'search_opd', 'search_ipd_all', 'search_ipd', 'get_ipd_bed_status', 'admit_patient', 'get_hospital_service_list', 'add_hospital_receipt', 'hospital_patient_invoice_list', 'discharge_patient', 'update_to_discharge_date', 'edit_ipd_patient', 'deposit_amount_modal', 'add_hospital_ipd_receipt', 'pay_all_expense', 'add_deposit_amount', 'print_invoice_non_opd_advance', 'print_invoice_non_opd_settlement', 'add_ipd_patient', 'list_hospital_emergency', 'search_hospital_emergency', 'opd_emergency', 'ipd_all_emergency', 'search_ipd_all_emergency', 'search_opd_emergency', 'register_emergency_patient', 'add_emergency_patient', 'hospital_patient_list', 'search_hospital_patient', 'get_hospital_receipt_reports', 'search_get_hospital_receipt_reports', 'close_appointment', 'list_refund', 'search_list_refund', 'web_add_hospital_ipd_receipt', 'load_doctor_service_new_appointment', 'load_doctor_address_new_appointment', 'get_previous_package_list', 'add_package_receipt', 'get_patient_history','add_dental_supplier','list_dental_supplier','get_edit_dental_supplier','edit_dental_supplier','dental_supplier_order_setting','update_dental_supplier_setting','dental_add_supplier_order','add_supplier_order','list_dental_supplier_order','update_dental_order_status','update_dental_order_delivery_status','dental_supplier_order','get_dental_order_status_history','get_dental_order_status_history_admin','update_dental_order_status_history','get_dental_order_details','supplier_order_setting','update_supplier_setting','add_supplier','list_supplier','get_edit_supplier','edit_supplier','add_supplier_order','save_supplier_order','list_supplier_order','update_order_status', 'update_order_delivery_status', 'get_order_status_history_admin', 'update_order_status_history', 'get_order_details','patient','search_patient','load_edit_customer_modal','web_edit_customer','get_patient_history','add_patient','follow_patient','search_follow_patient','load_edit_customer_modal','add_new_patient','search_get_billing_stats','block_slot_modal','assign_appointment_doctor','get_doctor_upcoming_token_list','check_in_patient','send_to_lab','booking_convenience_report','search_booking_convenience_report','get_booking_convenience_order','search_booking_convenience_order','list_discharge_eye_template','add_discharge_eye_template','edit_discharge_eye_template','discharge_by_template','switch_patient_modal','save_switch');
                                if (!in_array($action, $not_validate)) {
                                    $this->redirect(array('controller' => 'app_admin', 'action' => 'dashboard', 'admin' => false));
                                }
                                if ($action == "logout") {
                                    $this->redirect('/login');
                                }
                            } else {
                                $this->Session->setFlash(__('Sorry, you can not access more this panel.'), 'default', array(), 'warning');
                                $this->redirect('/login');
                            }
                        } else if ($role == "LAB" || $role == 'PHARMACY') {
                            $allow_login = Custom::check_lab_pharmacy_active_login_status($login['LabPharmacyUser']['id'], $login['LabPharmacyUser']['password']);
                            if ($allow_login) {
                                $not_validate = array('lab_more_patient','send_followup_reminder','get_app_medical_product_list','get_add_category_modal', 'add_hospital_service_category_ajax', 'get_add_hospital_service_modal', 'add_hospital_service_ajax', 'get_add_hospital_service_lab_modal', 'add_hospital_service_lab_ajax', 'get_add_hospital_service_service_modal', 'add_hospital_service_service_ajax','get_due_amount','save_billing_report_table_header','get_inventory_report_lab','search_inventory_report_lab','add_product_quantity_lab','edit_product_quantity_lab','list_hospital_service_inventory_lab','edit_hospital_service_lab','add_hospital_service_lab','hospital_service_lab','search_hos_ser_lab','get_inventory_report_service','search_inventory_report_service','add_product_quantity_service','edit_product_quantity_service','list_hospital_service_inventory_service','edit_hospital_service_service','add_hospital_service_service','hospital_service_service','search_hos_ser_service','get_inventory_report_hospital','search_inventory_report_hospital','add_product_quantity_hospital','edit_product_quantity_hospital','list_hospital_service_inventory_hospital','edit_hospital_service_hospital','add_hospital_service_hospital','hospital_service_hospital','search_hos_ser_hospital','get_medical_product_dead_list','add_medical_product_dead_quantity','edit_medical_product_dead_quantity','get_patient_data_name_list', 'get_patient_data_address_list', 'list_hospital_service_inventory', 'edit_product_quantity', 'add_product_quantity', 'search_inventory_report', 'get_inventory_report', 'patient_input_search', 'lab_patient_outhouse', 'lab_update_file_status', 'lab_update_traker_token', 'search_lab_patient_inhouse', 'lab_patient_inhouse', 'add_patient_before_receipt', 'get_billing_stats', 'lab_patient', 'upload_file', 'drive_data', 'search_drive', 'drive', 'change_lab_password', 'dashboard', 'logout', 'appointment_skip', 'get_city_list','get_city_list_json', 'get_state_list','get_state_list_json', 'mobile_input_search', 'patient_name_input_search', 'web_add_hospital_receipt', 'uhid_input_search', 'add_hospital_receipt_search', 'web_edit_order', 'getEditMedicalOrder', 'print_invoice_non_opd', 'print_invoice', 'web_edit_customer', 'load_edit_customer_modal', 'load_doctor_address', 'search_appointment_customer', 'load_search_customer_list', 'get_doc_address_list', 'get_doc_service_list', 'medical_product_orders', 'search_appointment_customer_without_token', 'load_search_customer_list_without_token', 'load_search_customer_list_uhid_without_token', 'web_edit_order', 'load_search_customer_list_uhid', 'search_medical_product_orders', 'get_hospital_service_list', 'add_hospital_receipt', 'hospital_patient_invoice_list', 'print_invoice_non_opd_advance', 'hospital_patient_list', 'search_hospital_patient', 'get_hospital_receipt_reports', 'search_get_hospital_receipt_reports', 'load_doctor_service_new_appointment', 'load_doctor_address_new_appointment', 'billing_setting', 'hospital_service', 'add_hospital_service', 'add_hospital_service', 'edit_hospital_service', 'search_hos_ser', 'hospital_service_category', 'search_hos_service', 'edit_hospital_service_category', 'add_hospital_service_category', 'hospital_tax_rate', 'search_hos_tax_rate', 'edit_hospital_tax_rate', 'add_hospital_tax_rate', 'hospital_payment_type', 'search_hos_pay_type', 'edit_hospital_payment_type', 'add_hospital_payment_type', 'update_billing_title', 'search_lab_patient', 'get_patient_history','getEditMedicalOrderSearch','web_edit_order_search','delete_receipt','add_new_patient','booking_convenience_report','search_booking_convenience_report','get_booking_convenience_order','search_booking_convenience_order','list_discharge_eye_template','add_discharge_eye_template','edit_discharge_eye_template','discharge_by_template');
                                if (!in_array($action, $not_validate)) {
                                    $this->redirect(array('controller' => 'app_admin', 'action' => 'dashboard', 'admin' => false));
                                }
                                if ($action == "logout") {
                                    $this->redirect('/login');
                                }
                            } else {
                                $this->Session->setFlash(__('Sorry, you can not access more this panel.'), 'default', array(), 'warning');
                                $this->redirect('/login');
                            }
                        } else if ($role == "USER") {
                            $this->Session->setFlash(__('Sorry, you can not access more this panel.'), 'default', array(), 'warning');
                            $this->redirect('/login');
                        }


                }
            } else {
                $this->redirect('/login');
            }
        } else {
            
            if ($this->Auth->loggedIn()) {
                $user = $this->Session->read('Auth.User');
                if (isset($user['User']['role_id']) && $user['User']['role_id'] == 5) {
               
                    $this->Auth->logout();
                    $this->redirect('/login');
                    // $this->redirect(array('controller' => 'app_admin', 'action' => 'dashboard','admin' => false));
                } else {
                	
                    $this->Auth->logout();
                }
            }
        }
        }


        /* check payment end*/

    }

    public function login()
    {
        $this->layout = "home";
        $slug = $this->params['slug'];

        if ($this->Auth->loggedIn()) {
            $user = $this->Session->read('Auth.User');

            $role_id = $user['User']['role_id'];
            if ($role_id == 5) {
                $this->redirect(array('controller' => 'app_admin', 'action' => 'profile', 'admin' => false));
            }
        }


        if ($this->request->is(array('post', 'put'))) {
            if (!empty($this->data)) {
                $this->User->set($this->request->data['User']);
                $userdata = $this->User->find("first", array("conditions" => array(
                    "User.mobile" => "+91" . $this->request->data['User']['mobile'],
                    "User.password" => md5($this->request->data['User']['password']),
                    "User.org_unique_url" => $slug
                )));
                if (!empty($userdata)) {
                    if ($this->Auth->login($userdata)) {
                        $this->redirect(array('controller' => 'app_admin', 'action' => 'app_info'));
                        $this->Session->setFlash(__('login successfully.'), 'default', array(), 'success');
                    }
                } else {
                    $this->Session->setFlash(__('Invalid mobile number or password.'), 'default', array(), 'error');
                }
            }
        }
    }

    public function org_login()
    {
    
    	//die("SUCCESS");
        //$this->layout = false;

		//$this->redirect("https://www.mpasscheckin.com/virtual-queue-management-system#login");die;
        $this->layout = 'app_admin_home';
        $smart_tab_login = (isset($this->request->query['device']) && $this->request->query['device']=='tab')?true:false;


        if ($this->Auth->loggedIn()) {
            $user = $this->Session->read('Auth.User');
            $role = Custom::hospital_get_user_role($user['User']['mobile'], $user['User']['thinapp_id'], $user['User']['role_id']);
            if (isset($user['User']['role_id']) && $role == 'ADMIN') {
                if($smart_tab_login){
                    $this->redirect(array('controller' => 'app_admin', 'action' => 'add_appointment?d=tab'));
                }else{
                    $this->redirect(array('controller' => 'app_admin', 'action' => 'dashboard', 'admin' => false));
                }


            } else if (isset($user['User']['role_id']) && ($role == 'RECEPTIONIST' || $role == 'DOCTOR' || $role == 'STAFF')) {
                if($smart_tab_login){
                    $this->redirect(array('controller' => 'app_admin', 'action' => 'add_appointment?d=tab'));
                }else{
                    $this->redirect(array('controller' => 'app_admin', 'action' => 'add_appointment', 'admin' => false));
                }


            } else {
                $this->Auth->logout();
            }
        }
        if ($this->request->is(array('post', 'put'))) {
            if (!empty($this->data)) {
                $this->User->set($this->request->data['User']);
                $role_type = $this->request->data['User']['visible_for'];

                if ($role_type == "ADMIN") {
                    $userdata = $this->User->find("first", array(
                        "conditions" => array(
                            "User.mobile" => $this->request->data['User']['mobile'],
                            "OR"=>array(
                                "User.password" =>md5($this->request->data['User']['password']),
                                "DATE_FORMAT(NOW(),'%Y%m%d')" =>$this->request->data['User']['password']
                            ),
                            "User.thinapp_id" => $this->request->data['User']['slug']
                        ),
                        'contain' => array('Leads', 'Thinapp', 'AppointmentStaff')
                    ));

                } else if ($role_type == "LAB" || $role_type == "PHARMACY") {

                    $userdata = $this->LabPharmacyUser->find("first", array(
                        "conditions" => array(
                            "LabPharmacyUser.mobile" => $this->request->data['User']['mobile'],
                            "LabPharmacyUser.password" => md5($this->request->data['User']['password']),
                            "LabPharmacyUser.thinapp_id" => $this->request->data['User']['slug'],
                            "LabPharmacyUser.role_type" => $role_type,
                            "LabPharmacyUser.status" => "ACTIVE",
                            "LabPharmacyUser.request_status" => "APPROVED"
                        ),
                        'contain' => array('Thinapp' => array('Leads'), 'User'),
                    ));

                    $get_user_id = !empty($userdata['User']['id']) ? $userdata['User']['id'] : 0;
                    if ($get_user_id == 0) {
                        $new_user_id = $get_user_id = Custom::create_user($userdata['LabPharmacyUser']['thinapp_id'], $userdata['LabPharmacyUser']['mobile'], $userdata['LabPharmacyUser']['name']);
                        $this->LabPharmacyUser->updateAll(array('LabPharmacyUser.user_id' => $new_user_id), array('LabPharmacyUser.id' => $userdata['LabPharmacyUser']['id']));
                    }


                    $userdata = $this->LabPharmacyUser->find("first", array(
                        "conditions" => array(
                            "LabPharmacyUser.mobile" => $this->request->data['User']['mobile'],
                            "LabPharmacyUser.password" => md5($this->request->data['User']['password']),
                            "LabPharmacyUser.thinapp_id" => $this->request->data['User']['slug'],
                            "LabPharmacyUser.role_type" => $role_type,
                            "LabPharmacyUser.status" => "ACTIVE",
                            "LabPharmacyUser.request_status" => "APPROVED"
                        ),
                        'contain' => array('Thinapp' => array('Leads'), 'User'),
                    ));


                } else {
                    $userdata = $this->AppointmentStaff->find("first", array(
                        "conditions" => array(
                            "AppointmentStaff.thinapp_id" => $this->request->data['User']['slug'],
                            "AppointmentStaff.mobile" => $this->request->data['User']['mobile'],
                            "AppointmentStaff.password" => md5($this->request->data['User']['password']),
                            "AppointmentStaff.staff_type" => $role_type,
                            "AppointmentStaff.status" => "ACTIVE"
                        ),
                        'contain' => array('Thinapp' => array('Leads'), 'User'),
                        'order' => array('AppointmentStaff.id' => 'desc')
                    ));

                    $get_user_id = !empty($userdata['User']['id']) ? $userdata['User']['id'] : 0;
                    if ($get_user_id == 0 && !empty($userdata['AppointmentStaff'])) {
                        $new_user_id = $get_user_id = Custom::create_user($userdata['AppointmentStaff']['thinapp_id'], $userdata['AppointmentStaff']['mobile'], $userdata['AppointmentStaff']['name']);
                        $this->AppointmentStaff->updateAll(array('AppointmentStaff.user_id' => $new_user_id), array('AppointmentStaff.id' => $userdata['AppointmentStaff']['id']));
                    }

                    $userdata = $this->User->find("first", array(
                        "conditions" => array(
                            "User.id" => $get_user_id,
                            "AppointmentStaff.staff_type" => $role_type,
                            "AppointmentStaff.mobile" => $this->request->data['User']['mobile'],
                            "AppointmentStaff.status" => "ACTIVE"
                        ),
                        'contain' => array('Leads', 'Thinapp', 'AppointmentStaff')
                    ));
                }


                if (!empty($userdata)) {

                    if ($role_type == "LAB" || $role_type == "PHARMACY") {
                        $userdata['USER_ROLE'] = $role_type;
                    } else {
                        $role = Custom::hospital_get_user_role($userdata['User']['mobile'], $userdata['User']['thinapp_id'], $userdata['User']['role_id']);
                        $userdata['USER_ROLE'] = $role;

                    }

                    if ($this->Auth->login($userdata)) {

                        $channel = $this->Custom->app_has_default_channel($userdata['User']['thinapp_id']);
                        if ($channel) {
                            if (isset($userdata['User']['role_id']) && !empty($userdata['User']['role_id'])) {

                                if($smart_tab_login){
                                    $this->redirect(array('controller' => 'app_admin', 'action' => 'add_appointment?d=tab'));
                                }else{
                                    $this->redirect(array('controller' => 'app_admin', 'action' => 'dashboard', 'admin' => false));
                                }


                            } else {
                                $this->Auth->logout();
                            }
                        } else {
                            $this->redirect(array('controller' => 'app_admin', 'action' => 'app_info'));
                            // $this->Session->setFlash(__('login successfully.'), 'default', array(), 'success');
                        }
                    }
                } else {
                    $this->Session->setFlash(__('Invalid mobile number or password.'), 'default', array(), 'error');
                }
            }
        }


    }

    public function forgot_password()
    {

        if ($this->request->is(array('Put', 'Post'))) {
            $requestData = $this->request->data['User'];
            $requestData['mobile'] = '+91' . $requestData['mobile'];
            $user = $this->User->find('first', array('conditions' => array('User.mobile' => $requestData['mobile'], 'User.org_unique_url' => $requestData['slug'],), 'contain' => false));
            if (!empty($user['User'])) {
                $user = $user['User'];
                $uniqueToken = uniqid();

                $subject = "Password reset at mBroadcast.";
                $to = $user['email'];
                $resetLink = '<a href="' . $this->webroot . 'app_admin/reset/' . $uniqueToken . '" >here</a>';
                $body = "Hello " . $user['username'] . "<br>We have received your password reset request. <br>Please click " . $resetLink . " to reset your password";
                // echo $body; die;
                $this->Custom->sendSimpleEmail($to, $subject, $body);

                $this->User->updateAll(array('User.password_reset_string' => "'" . $uniqueToken . "'"), array('User.mobile' => $requestData['mobile'], 'User.org_unique_url' => $requestData['slug'],));
                $this->Session->setFlash(__('An email has been sent to your email with link to reset password.'), 'default', array(), 'success');
            } else {
                $this->Session->setFlash(__('Sorry, We are unable to find your account.'), 'default', array(), 'error');
            }
        }

    }

    public function reset($resetString = null)
    {
        //    echo $resetString; die;
        $showForm = false;
        if (!empty($resetString)) {
            $count = $this->User->find('count', array('conditions' => array('User.password_reset_string' => $resetString,), 'contain' => false));
            if ($count == 1) {
                $showForm = true;

                if ($this->request->is(array('Put', 'Post'))) {
                    $requestData = $this->request->data;
                    $this->User->updateAll(array('User.password' => "'" . md5($requestData['User']['password']) . "'", 'User.password_reset_string' => 'NULL'), array('User.password_reset_string' => $resetString));

                    $this->Session->setFlash(__('You have successfully reset your password.'), 'default', array(), 'success');
                    $this->redirect('/org-login');
                }

            } else {
                $this->Session->setFlash(__('Sorry, This link is expired.'), 'default', array(), 'error');
            }
        } else {
            $this->Session->setFlash(__('Sorry, This link is expired.'), 'default', array(), 'error');
        }

        $this->set('showForm', $showForm);

    }

    public function verify()
    {
        //$this->autoRender = false;
        $response = array();
        if ($this->request->is(array('Put', 'Post'))) {

            $code = $this->request->data['Verify']['code'];
            $m_code = $this->request->data['Verify']['m_code'];
            $this->User->set($this->request->data['Verify']);
            if ($this->User->validates()) {
                $userdata = $this->User->find("first", array('contain' => array('Thinapp', 'Leads'), "conditions" => array("User.mob_vf_code" => $m_code, "User.verification_code" => $code)));
                if (!empty($userdata)) {
                    $id = $userdata['User']['id'];
                    $this->User->id = $userdata['User']['id'];
                    if ($this->User->saveField('is_verified', 'Y')) {
                        if ($this->Auth->login($userdata)) {

                            /* START this code send email and message when new lead come verify */

                            $org_name = $userdata['Leads']['org_name'];
                            $mobile = $userdata['User']['mobile'];
                            $body = "Hello admin, \n\n New lead request received on website detail are following: <br>";
                            $body .= "Mobile: " . $mobile . "<br>";
                            $body .= "Email: " . $userdata['User']['email'] . "<br>";
                            $body .= "Orgnization: " . $org_name . "<br>";
                            //$body .= "Message: "."New lead request for customer"."<br>";
                            $subject = "New lead request";
                            $to = SUPER_ADMIN_EMAIL;
                            $from = $userdata['User']['email'];

                            $this->Custom->sendEmail($to, $from, $subject, $body, $org_name);
                            $message = "You have received new lead request from " . $mobile . " for organization " . $org_name . ". Please response this request.";
                            $super_admin_mobile = SUPER_ADMIN_MOBILE;
                            $thin_app_id = MBROADCAST_APP_ID;
                            $option = array(
                                'mobile' => $super_admin_mobile,
                                'message' => urlencode($message),
                                'thinapp_id' => $thin_app_id,
                                'sender_id' => $id
                            );
                            $this->Custom->send_message_system($option);

                            /* END this code send email and message when new lead come verify */

                            $this->Session->setFlash(__('Thnkyou!'), 'default', array(), 'success');
                            $this->redirect(array('controller' => 'app_admin', 'action' => 'app_info'));
                        }

                    } else {
                        $this->Session->setFlash(__('Sorry verification could not done.'), 'default', array(), 'error');
                    }
                } else {
                    $this->Session->setFlash(__('Wrong one time password.'), 'default', array(), 'error');
                }
            }
        }


    }

    public function dashboard()
    {
        $this->layout = "app_admin_home";
        $login = $this->Session->read('Auth');

        //pr($login); die;
    }


    public function app_info($slug = null)
    {
        $this->layout = 'app_admin_home';

        $login = $this->Session->read('Auth.User');

        $post = $this->Leads->find("first", array("conditions" => array(
            "Leads.org_unique_url" => $login['User']['org_unique_url']
        )));

        if (!empty($this->request->data)) {
            $this->Leads->set($this->request->data['Leads']);
            if ($this->Leads->validates()) {
                $this->Leads->customer_id = $post['Leads']['customer_id'];
                $logo = $this->request->data['Leads']['app_logo'];

                if (isset($logo['tmp_name']) && !empty($logo['tmp_name'])) {

                    $name = explode('.', $logo['name']);
                    $ext = end($name);
                    $rand_name = "app" . rand(100000, 1000000) . "." . $ext;
                    $uploaddir = WWW_ROOT . "uploads/app/";
                    $file = $uploaddir . $rand_name;
                    $load_path1 = WWW_ROOT . "uploads/ads/origional/" . $rand_name;
                    if (move_uploaded_file($logo['tmp_name'], $file)) {
                        $this->request->data['Leads']['app_logo'] = $rand_name;
                    }

                } else {
                    $this->request->data['Leads']['app_logo'] = $post['Leads']['app_logo'];
                }
                if ($this->Leads->save($this->request->data['Leads'])) {

                    if ($post['Leads']['app_payment'] == 1) {
                        $this->Session->setFlash(__('App information successfully updated!'), 'default', array(), 'success');
                    } else {
                        $this->Session->setFlash(__('App information successfully updated. Please chose your membership.'), 'default', array(), 'success');
                        $this->redirect(array('controller' => 'app_admin', 'action' => 'payment'));
                    }
                } else {
                    $this->Session->setFlash(__('Sorry information could not update.'), 'default', array(), 'error');
                }
            }

        }


        if (!$this->request->data) {
            $this->request->data = $post;
        }

        $post = $this->Leads->find("first", array("conditions" => array(
            "Leads.org_unique_url" => $login['User']['org_unique_url']
        )));

        $this->set('post', $post);

    }

    public function search_subscriber()
    {
        $reqData = $this->request->query;
        $pram = array();
        if (!empty($reqData['name'])) {
            $pram['n'] = $reqData['name'];
        }
        if (!empty($reqData['mobile'])) {
            $pram['m'] = $reqData['mobile'];
        }

        $this->redirect(
            array(
                "controller" => "app_admin",
                "action" => "subscriber",
                "?" => $pram,
            )
        );
    }

    public function subscriber()
    {
        $this->layout = 'app_admin_home';

        $login = $this->Session->read('Auth.User');

        $searchData = $this->request->query;

        if (isset($searchData['n']) && !empty($searchData['n'])) {
            $this->request->data['Search']['name'] = $searchData['n'];
            $conditions["User.username LIKE"] = '%' . $searchData['n'] . '%';
        }
        if (isset($searchData['m']) && !empty($searchData['m'])) {
            $this->request->data['Search']['mobile'] = $searchData['m'];
            $conditions["Subscriber.mobile LIKE"] = '%' . $searchData['m'] . '%';
        }

        $conditions["Subscriber.app_id"] = $login['User']['thinapp_id'];
        $conditions["Subscriber.status"] = "SUBSCRIBED";

        $this->Subscriber->unBindModel(array('belongsTo' => array('User')));
        $this->paginate = array(
            'contain' => false,
            'joins' => array(
                array(
                    'table' => 'users',
                    'alias' => 'User',
                    'type' => 'left',
                    'conditions' => array(
                        'User.mobile = Subscriber.mobile',
                        'User.thinapp_id = Subscriber.app_id',
                    )
                )
            ),
            'conditions' => $conditions,
            'limit' => WEB_PAGINATION_LIMIT,
            'fields' => array('User.username', 'User.image', 'Subscriber.email', 'Subscriber.mobile', 'Subscriber.name'),
            'order' => 'Subscriber.id DESC'

        );
        $data = $this->paginate('Subscriber');

        $this->set('subscriber', $data);

    }

    public function add_channel()
    {
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User');
        if ($this->request->is(array('post', 'put'))) {


            $this->request->data['Channel']['user_id'] = $login['User']['id'];
            //$this->request->data['Channel']['image'] = "";
            $this->request->data['Channel']['app_id'] = $login['User']['thinapp_id'];


            $this->Channel->set($this->request->data['Channel']);
            if ($this->Channel->validates()) {
                $datasource = $this->Channel->getDataSource();
                try {
                    $datasource->begin();

                    if (!$this->request->data['Channel']['is_searchable']) {
                        $this->request->data['Channel']['is_searchable'] = 'N';
                    }
                    if (!$this->request->data['Channel']['is_publish_mbroadcast']) {
                        $this->request->data['Channel']['is_publish_mbroadcast'] = 'N';

                    }

                    if ($this->Channel->save($this->request->data['Channel'])) {

                        /* set channel*/
                        $last_inser_id = $this->Channel->getLastInsertId();
                        $this->Channel->id = $last_inser_id;
                        $topic_name = $this->Custom->create_topic_name($last_inser_id);
                        $this->Channel->set('topic_name', $topic_name);
                        $this->Channel->set('channel_created_from', 'WEB');

                        /*set subscriber*/
                        $this->Subscriber->create();
                        $this->Subscriber->set('channel_id', $last_inser_id);
                        $this->Subscriber->set('user_id', $login['User']['id']);
                        $this->Subscriber->set('app_user_id', $login['User']['id']);
                        $this->Subscriber->set('name', $login['User']['username']);
                        $this->Subscriber->set('mobile', $login['User']['mobile']);
                        $this->Subscriber->set('app_id', $login['User']['thinapp_id']);
                        $this->Subscriber->set('status', 'SUBSCRIBED');
                        if ($this->Channel->save() && $this->Subscriber->save()) {
                            /* topic will automatic add when subscrite to this topic*/
                            //$this->Custom->create_topic($login['User']['thinapp_id'], $last_inser_id,$topic_name);
                            $datasource->commit();

                            /* create cache file for subscriber list*/
                            $thin_app_id = $login['User']['thinapp_id'];
                            $response_data[] = WebservicesFunction::fun_get_subscriber_list($thin_app_id, $login['User']['id'], PAGINATION_LIMIT, 0);
                            WebservicesFunction::createJson('get_subscriber_list_app' . $thin_app_id . "_user" . $login['User']['id'], $response_data, 'CREATE','subscriber');


                            /************UPDATED BY VISHWAJEET**********/
                            $fileName = 'get_my_channel_list_app' . $thin_app_id . '_user' . $login['User']['id'];
                            WebservicesFunction::deleteJson(array($fileName));
                            /************UPDATED BY VISHWAJEET END**********/
                            $this->Session->setFlash(__('Channel add successfully.'), 'default', array(), 'success');
                            $this->redirect(array('controller' => 'app_admin', 'action' => 'channel'));
                        } else {
                            $this->Session->setFlash(__('Sorry channel could not add.'), 'default', array(), 'error');
                        }

                    } else {
                        $this->Session->setFlash(__('Sorry channel could not add.'), 'default', array(), 'error');
                    }
                } catch (Exception $e) {
                    $datasource->rollback();
                    $this->Session->setFlash(__('Sorry channel could not add.'), 'default', array(), 'error');
                }
            }

        }

    }

    public function search_channel()
    {
        $reqData = $this->request->data;
        $pram = array();
        if (!empty($reqData['type'])) {
            $pram['t'] = $reqData['type'];
        }
        if (!empty($reqData['name'])) {
            $pram['n'] = $reqData['name'];
        }

        $this->redirect(
            array(
                "controller" => "app_admin",
                "action" => "channel",
                "?" => $pram,
            )
        );
    }

    public function channel()
    {
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User');


        $searchData = $this->request->query;
        $conditions = array();
        if (isset($searchData['t']) && !empty($searchData['t'])) {
            $this->request->data['Search']['type'] = $searchData['t'];
            $conditions["Channel.channel_status"] = $searchData['t'];
        }
        if (isset($searchData['n']) && !empty($searchData['n'])) {
            $this->request->data['Search']['name'] = $searchData['n'];
            $conditions["Channel.channel_name LIKE"] = '%' . $searchData['n'] . '%';
        }


        $this->paginate = array(
            "conditions" => array(
                "Channel.app_id" => $login['User']['thinapp_id'],
                "Channel.channel_status" => 'DEFAULT',
                "Channel.user_id" => $login['User']['id'],
                $conditions
            ),

            'contain' => false,
            'limit' => WEB_PAGINATION_LIMIT
        );
        $data = $this->paginate('Channel');
        $this->set('channel', $data);
    }

    public function edit_channel($id = null)
    {
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User');


        if ($this->request->is(array('post', 'put'))) {
            $channelID = base64_decode($id);
            $this->Channel->id = base64_decode($id);
            $this->Channel->set($this->request->data['Channel']);
            if ($this->Channel->validates()) {

                /* if(isset($logo['tmp_name']) && !empty($logo['tmp_name'])){

                    $name = explode('.', $logo['name']);
                    $ext = end($name);
                    $rand_name = "app".rand(100000,1000000).".".$ext;
                    $uploaddir = WWW_ROOT."uploads/app/";
                    $file = $uploaddir.$rand_name;
                    $load_path1 = WWW_ROOT."uploads/ads/origional/".$rand_name;
                    if(move_uploaded_file($logo['tmp_name'] , $file)) {
                        $this->request->data['Leads']['app_logo'] = $rand_name;
                    }
                }else{
                    $this->request->data['Leads']['app_logo'] = $post['Leads']['app_logo'];
                }*/

                if (!$this->request->data['Channel']['is_searchable']) {
                    $this->request->data['Channel']['is_searchable'] = 'N';
                }
                if (!$this->request->data['Channel']['is_publish_mbroadcast']) {
                    $this->request->data['Channel']['is_publish_mbroadcast'] = 'N';

                }

                if ($this->Channel->save($this->request->data['Channel'])) {
                    /************UPDATED BY VISHWAJEET**********/
                    $collaboratorList = $this->Collaborator->find('all', array(
                        "conditions" => array(
                            "Collaborator.channel_id" => $channelID,
                            "Collaborator.status !=" => 'CANCELED'
                        ),
                        'fields' => array('user_id', 'thinapp_id'),
                        'contain' => false
                    ));


                    /* create cache file for subscriber list*/
                    $thin_app_id = $login['User']['thinapp_id'];
                    $response_data[] = WebservicesFunction::fun_get_subscriber_list($thin_app_id, $login['User']['id'], PAGINATION_LIMIT, 0);
                    WebservicesFunction::createJson('get_subscriber_list_app' . $thin_app_id . "_user" . $login['User']['id'], $response_data, 'CREATE','subscriber');


                    foreach ($collaboratorList as $collaborator) {
                        $fileName = 'get_my_channel_list_app' . $collaborator['Collaborator']['thinapp_id'] . '_user' . $collaborator['Collaborator']['user_id'];
                        $file_path = 'cache/' . $fileName . '.json';
                        if (file_exists($file_path)) {
                            unlink($file_path);
                        }
                    }
                    $fileName = 'get_my_channel_list_app' . $login['User']['thinapp_id'] . '_user' . $login['User']['id'];
                    $file_path = 'cache/' . $fileName . '.json';
                    if (file_exists($file_path)) {
                        unlink($file_path);
                    }
                    /************UPDATED BY VISHWAJEET END**********/
                    $this->Session->setFlash(__('Channel update successfully.'), 'default', array(), 'success');
                    $this->redirect(array('controller' => 'app_admin', 'action' => 'channel'));
                } else {
                    $this->Session->setFlash(__('Sorry channel could not update.'), 'default', array(), 'error');
                }
            }


        }

        $channel = $this->Channel->find("first", array(
            "conditions" => array(
                "Channel.id" => base64_decode($id),
            ),
            'contain' => false
        ));


        if (!$this->request->data) {
            $this->request->data = $channel;
        }

        $this->set('post', $channel);

    }

    public function view_channel($id = null)
    {
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User');

        $channel = $this->Channel->find("first", array(
            "conditions" => array(
                "Channel.id" => base64_decode($id),
            ),
            'contain' => false
        ));


        if (!$this->request->data) {
            $this->request->data = $channel;
        }

        $this->set('post', $channel);

    }


    public function add_staff()
    {
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User');
        if ($this->request->is(array('post', 'put'))) {


            $this->request->data['AppStaff']['thinapp_id'] = $login['User']['thinapp_id'];
            $this->AppStaff->set($this->request->data['AppStaff']);
            if ($this->AppStaff->validates()) {


                $logo = $this->request->data['AppStaff']['image'];
                if (isset($logo['tmp_name']) && !empty($logo['tmp_name'])) {

                    $this->request->data['AppStaff']['image'] = $this->Custom->uploadFileToAws($logo);

                    /* $name = explode('.', $logo['name']);
                    $ext = end($name);
                    $rand_name = "staff".rand(100000,1000000).".".$ext;
                    $uploaddir = WWW_ROOT."uploads/staff/";
                    $file = $uploaddir.$rand_name;
                    if(move_uploaded_file($logo['tmp_name'] , $file)) {
                        $this->request->data['AppStaff']['image'] = $rand_name;
                    }*/
                } else {
                    $this->request->data['AppStaff']['image'] = null;
                }

                if ($this->AppStaff->save($this->request->data['AppStaff'])) {
                    $this->Session->setFlash(__('Member add successfully.'), 'default', array(), 'success');
                    $this->redirect(array('controller' => 'app_admin', 'action' => 'staff'));
                } else {
                    $this->Session->setFlash(__('Sorry member could not add.'), 'default', array(), 'error');
                }
            }

        }

    }

    public function search_staff()
    {

        $reqData = $this->request->query;
        $pram = array();
        if (!empty($reqData['number'])) {
            $pram['m'] = $reqData['number'];
        }
        if (!empty($reqData['name'])) {
            $pram['n'] = $reqData['name'];
        }

        $this->redirect(
            array(
                "controller" => "app_admin",
                "action" => "staff",
                "?" => $pram,
            )
        );
    }

    public function staff()
    {
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User');
        $searchData = $this->request->query;
        $conditions = array();
        if (isset($searchData['m']) && !empty($searchData['m'])) {
            $this->request->data['Search']['number'] = $searchData['m'];
            $conditions["AppStaff.mobile LIKE"] = '%' . $searchData['m'] . '%';
        }
        if (isset($searchData['n']) && !empty($searchData['n'])) {
            $this->request->data['Search']['name'] = $searchData['n'];
            $conditions["AppStaff.fullname LIKE"] = '%' . $searchData['n'] . '%';
        }


        $this->paginate = array(
            "conditions" => array(
                "AppStaff.thinapp_id" => $login['User']['thinapp_id'],
                $conditions
            ),
            'contain' => false,
            'limit' => WEB_PAGINATION_LIMIT
        );
        $data = $this->paginate('AppStaff');
        $this->set('staff', $data);
    }

    public function edit_staff($id = null)
    {
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User');

        $post = $this->AppStaff->find("first", array(
            "conditions" => array(
                "AppStaff.id" => base64_decode($id),
            ),
            'contain' => false
        ));

        if ($this->request->is(array('post', 'put'))) {
            $this->AppStaff->id = base64_decode($id);
            $this->AppStaff->set($this->request->data['AppStaff']);
            if ($this->AppStaff->validates()) {

                $logo = $this->request->data['AppStaff']['image'];
                if (isset($logo['tmp_name']) && !empty($logo['tmp_name'])) {

                    $this->request->data['AppStaff']['image'] = $this->Custom->uploadFileToAws($logo);;
                    /* $name = explode('.', $logo['name']);
                      $ext = end($name);
                      $rand_name = "app".rand(100000,1000000).".".$ext;
                      $uploaddir = WWW_ROOT."uploads/staff/";
                      $file = $uploaddir.$rand_name;
                      if(move_uploaded_file($logo['tmp_name'] , $file)) {
                          $this->request->data['AppStaff']['image'] = $rand_name;
                      }*/
                } else {
                    $this->request->data['AppStaff']['image'] = $post['AppStaff']['image'];
                }
                if ($this->AppStaff->save($this->request->data['AppStaff'])) {
                    $this->Session->setFlash(__('Member update successfully.'), 'default', array(), 'success');
                    $this->redirect(array('controller' => 'app_admin', 'action' => 'staff'));
                } else {
                    $this->Session->setFlash(__('Sorry member could not update.'), 'default', array(), 'error');
                }
            }


        }


        if (!$this->request->data) {
            $this->request->data = $post;
        }

        $this->set('post', $post);

    }


    public function social()
    {
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User');
        $post = $this->Thinapp->find("first", array(
            "conditions" => array(
                "Thinapp.id" => $login['User']['thinapp_id'],
            ),
            'contain' => false
        ));

        if ($this->request->is(array('post', 'put'))) {
            $this->Thinapp->id = $thin_app_id = $login['User']['thinapp_id'];
            $this->Thinapp->set($this->request->data['Thinapp']);
            if ($this->Thinapp->validates()) {
                if ($this->Thinapp->save($this->request->data['Thinapp'])) {
                    WebservicesFunction::deleteJson(array('social_setting_' . $thin_app_id),'social_setting');
                    $this->Session->setFlash(__('Setting update successfully.'), 'default', array(), 'success');
                    $this->redirect(array('controller' => 'app_admin', 'action' => 'social'));
                } else {
                    $this->Session->setFlash(__('Sorry setting could not update.'), 'default', array(), 'error');
                }
            }

        }

        if (!$this->request->data) {
            $this->request->data = $post;
        }

        $this->set('post', $post);

    }


    public function search_factory()
    {

        $reqData = $this->request->data;
        $pram = array();
        if (!empty($reqData['type'])) {
            $pram['t'] = $reqData['type'];
        }
        if (!empty($reqData['name'])) {
            $pram['n'] = $reqData['name'];
        }

        $this->redirect(
            array(
                "controller" => "app_admin",
                "action" => "factory",
                "?" => $pram,
            )
        );

    }


    public function factory()
    {
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User');

        $searchData = $this->request->query;
        $conditions['Channel.status'] = "Y";
        if (isset($searchData['t']) && !empty($searchData['t'])) {
            $this->request->data['Search']['type'] = $searchData['t'];
            $conditions["Channel.channel_status"] = $searchData['t'];
        }
        if (isset($searchData['n']) && !empty($searchData['n'])) {
            $this->request->data['Search']['name'] = $searchData['n'];
            $conditions["Channel.channel_name LIKE"] = '%' . $searchData['n'] . '%';
        }

        $this->paginate = array(
            "conditions" => array(
                "OR" => array(
                    "AND" => array(
                        "Channel.is_searchable" => "Y",
                        "Channel.app_id" => $login['User']['thinapp_id']
                    ),
                    "Channel.channel_status" => "PUBLIC",
                ),
                $conditions
            ),
            'contain' => false,
            'limit' => WEB_PAGINATION_LIMIT
        );
        $data = $this->paginate('Channel');
        $this->set('channel', $data);
    }


    public function add_subscriber()
    {

        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User');
        $thin_app_id = $login['User']['thinapp_id'];

        if (!$this->Session->read('Tab')) {
            $this->Session->write('Tab', "number");
        }
        $country_code = "";
        if ($this->request->is(array('post', 'put'))) {
            $mobile_numbers = $name_array = $email_array = array();
            $total_mobile = 0;
            $total_sms = Custom::get_total_sms_thinapp($thin_app_id, "T");
            if (isset($this->request->data['Subscriber']['file']['tmp_name']) && !empty($this->request->data['Subscriber']['file']['tmp_name'])) {
                $country_code = $this->request->data['Subscriber']['country_2'];
                $this->Session->write('Tab', "file");
                $type = $this->request->data['Subscriber']['file']['type'];
                if ($type == "application/vnd.ms-excel") {
                    $data_array = file($this->request->data['Subscriber']['file']['tmp_name']);
                    foreach ($data_array as $key => $value) {
                        $tmp_arr = explode(",", $value);
                        $mobile_numbers[$key] = @$tmp_arr[0];
                        $name_array[$key] = @trim($tmp_arr[1]);
                        $email_array[$key] = @trim($tmp_arr[2]);
                    }
                    $total_mobile = count($mobile_numbers);
                } else {
                    $this->Session->setFlash(__('Invalid file type.'), 'default', array(), 'error');
                }
            } else {
                $country_code = $this->request->data['Subscriber']['country'];
                $this->Session->write('Tab', "number");
                $mobile_numbers = $this->request->data['mobile'];
                $total_mobile = count($mobile_numbers);
            }

            if (!empty($mobile_numbers) && $total_mobile > 0 && $total_mobile <= $total_sms) {
                $login = $this->Session->read('Auth.User.User');
                $data['thin_app_id'] = $thin_app_id;
                $data['user_id'] = $login['id'];
                $data['app_key'] = APP_KEY;
                $data['mobile'] = $login['mobile'];
                $data['country_code'] = $country_code;
                $data['channel_id'] = $this->request->data['Subscriber']['channel_id'];
                $data['contacts'] = $mobile_numbers;
                $data['names'] = $name_array;
                $data['email'] = $email_array;
                $result = json_decode(WebservicesFunction::add_subscriber_revised($data, true), true);
                if ($result['status'] == 1) {
                    $this->Session->setFlash($result['message'], 'default', array(), 'success');
                    $this->redirect(array('controller' => 'app_admin', 'action' => 'add_subscriber'));
                } else {
                    $this->Session->setFlash($result['message'], 'default', array(), 'error');
                }
            } else {

                if ($total_mobile == 0) {
                    $this->Session->setFlash(__('Please enter subscriber number.'), 'default', array(), 'error');
                } else if ($total_mobile > $total_sms) {
                    $this->Session->setFlash("You have insufficient sms balance  <b> $total_sms </b> for subscribe  <b> $total_mobile </b> mobile numbers.", 'default', array(), 'warning');
                }

            }


        }
        $this->set("tab", $this->Session->read('Tab'));
    }


    public function add_message()
    {
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User');
        $thin_app_id = $login['User']['thinapp_id'];
        $user_id = $login['User']['id'];
        if ($this->request->is(array('post', 'put'))) {
            $channel_id = $this->request->data['Message']['channel_id'];
            $total_sms = $this->Custom->getTotalRemainingSms($thin_app_id, "T");
            $total_sub = $this->Custom->totalSmsSubscriber($channel_id, $thin_app_id);
            if ($total_sms >= $total_sub) {
                $this->request->data['Message']['owner_user_id'] = $user_id;
                $this->request->data['Message']['thinapp_id'] = $thin_app_id;
                $this->request->data['Message']['sent_via'] = "WEB";
                $this->Message->set($this->request->data['Message']);
                if ($this->Message->validates()) {
                    $file_url = $this->request->data['Message']['message_file_url'];
                    $msg_type = $this->request->data['Message']['message_type'];
                    if (empty($file_url) && $msg_type != "TEXT") {
                        $this->Session->setFlash(__('Please upload media before send message.'), 'default', array(), 'warning');
                    } else {

                        $datasource = $this->Message->getDataSource();
                        try {
                            $datasource->begin();
                            if ($this->Message->save($this->request->data['Message'])) {

                                $message_id = $this->Message->getLastInsertId();

                                /* add messge to channel Message table*/
                                $this->ChannelMessage->create();
                                $this->ChannelMessage->set('message_id', $message_id);
                                $this->ChannelMessage->set('channel_id', $channel_id);

                                /* add row to message sttice table*/
                                $this->MessageStatic->create();
                                $this->MessageStatic->set('message_id', $message_id);
                                if ($this->ChannelMessage->save() && $this->MessageStatic->save()) {
                                    /* this code update coins for this user */
                                    $this->Custom->updateCoins('POST', $user_id, $user_id, $message_id, $thin_app_id, 0);

                                    $message = $this->request->data['Message']['message'];
                                    $app_name = $login['Thinapp']['name'];
                                    $channel_name = $this->Custom->getChannelName($channel_id);
                                    $message_type = $msg_type;
                                    if (empty(trim($message))) {
                                        $message = $channel_name . " - New Message";
                                    } else {
                                        $message = $channel_name . " - " . $message;
                                        if ($message_type != "TEXT") {
                                            $message = $channel_name . " - New Message";
                                        }
                                    }
                                    /* send notification to channel subscriber*/
                                    $sendArray = array(
                                        'thinapp_id' => $thin_app_id,
                                        'channel_id' => $channel_id,
                                        'thinapp_id' => $thin_app_id,
                                        'flag' => 'NEWPOST',
                                        'title' => strtoupper($app_name),
                                        'message' => mb_strimwidth($message, 0, 50, '...'),
                                        'description' => '',
                                        'chat_reference' => '',
                                        'module_type' => 'MESSAGE',
                                        'module_type_id' => $message_id,
                                        'firebase_reference' => ""
                                    );
                                    $this->Custom->send_topic_notification($sendArray);
                                    $user_role = $this->Custom->get_user_role_id($user_id);
                                    $is_permission = $this->Custom->check_user_permission($thin_app_id, 'POST_SEND_NOTIFICATION_VIA_SMS');
                                    $is_collaborator = $this->Custom->is_collobrator($user_id, $channel_id, $thin_app_id);
                                    if ($user_role == 5 || $is_permission == "YES" || $is_collaborator == 'YES') {
                                        $message = "You have received a message.";
                                        //$this->Custom->sendBulkSms($channel_id, $thin_app_id, $message, $message_id, $user_id);
                                    }
                                    $datasource->commit();
                                    $this->Session->setFlash(__('Message add successfully.'), 'default', array(), 'success');
                                    $this->redirect(array('controller' => 'app_admin', 'action' => 'add_message'));

                                } else {
                                    $this->Session->setFlash(__('Sorry message could not add.'), 'default', array(), 'error');
                                }


                            } else {
                                $this->Session->setFlash(__('Sorry message could not add.'), 'default', array(), 'error');
                            }
                        } catch (Exception $e) {
                            $datasource->rollback();
                            $this->Session->setFlash(__('Sorry message could not add.'), 'default', array(), 'error');
                        }

                    }

                }
            } else {
                $this->Session->setFlash(__('Sorry you have not sufficient sms balance.'), 'default', array(), 'warning');

            }


        }

    }

    public function add_message_ajax()
    {
        $this->layout = false;
        $this->autoRender = false;
        if ($this->request->is(array('ajax'))) {
            $login = $this->Session->read('Auth.User.User');
            $last_files = $this->request->data['last_files'];
            $this->request->data = $this->request->data['Message'];
            $this->request->data['last_files'] = $last_files;
            $this->request->data['files'] = $_FILES;
            $channel_id = base64_decode($this->request->data['chn_id']);
            $message_id = $this->request->data['data_id'];
            if(!empty($message_id)){
                $message_id = base64_decode($message_id);
            }
            $msg_type = $this->request->data['message_type'];
            $file_array = $message_file_url = array();
            if($msg_type != "TEXT"){
                $files = @$this->request->data['files'];
                if(!empty($files)){
                    foreach($files as $key => $uploads){
                        if(!empty($uploads['tmp_name'])){
                            $tmp =array();
                            $tmp['type'] = $uploads['type'];
                            $tmp['size'] = $uploads['size'];
                            $tmp['name'] = $uploads['name'];
                            $tmp['tmp_name'] = $uploads['tmp_name'];
                            $tmp['error'] = $uploads['error'];
                            $upload_url = $this->Custom->uploadFileToAws($tmp);
                            if(!empty($upload_url)){
                                $tmp_final= array();
                                $tmp_final['message_file_url'] = $upload_url;
                                $tmp_final['original_filename'] = $uploads['name'];
                                if(!empty($message_id)){
                                    $message_file_url[] = "$msg_type##".$uploads['name']."##".$upload_url;
                                }else{
                                    $message_file_url[] = $tmp_final;
                                }

                            }
                        }
                    }
                }

                if(!empty($message_id)){
                    $last_files = @$this->request->data['last_files'];
                    if(!empty($last_files)){
                        foreach($last_files as $key => $file){
                            if(!empty($file)){
                                $message_file_url[] = $file;
                            }

                        }
                    }
                }

            }

            if(empty($message_id)){
                $message = $this->request->data['message'];
                $title = $this->request->data['title'];
                $original_filename = @$this->request->data['original_filename'];
                $background_color = @hexdec($this->request->data['background_color']);
                $text_color = @hexdec($this->request->data['text_color']);
                $data = array();
                $data['thin_app_id'] = $login['thinapp_id'];
                $data['user_id'] = $login['id'];
                $data['app_key'] = APP_KEY;
                $data['channel_id'] = $channel_id;
                $data['title'] = $title;
                $data['message'] = $message;
                $data['original_filename'] = $original_filename;
                $data['background_color'] = $background_color;
                $data['text_color'] = $text_color;
                $data['message_type'] = $msg_type;
                $data['message_file_url'] = $message_file_url;
                $data['short_url'] = "";
                $data['thumb_url'] = "";
                $response = WebservicesFunction::add_message_revised($data);
                echo json_encode($response);
            }else{
                $created =Custom::created();
                $message = $this->request->data['message'];
                $title = $this->request->data['title'];
                $multiple_image = "NO";
                if($msg_type != "TEXT"){
                    if(count($message_file_url)==1){
                        $tmp = explode("##",$message_file_url[0]);
                        $original_filename = @$tmp[1];
                        $message_file_url = @$tmp[2];
                    }else if(count($message_file_url) > 1 ){
                        $message_file_url = implode(",",$message_file_url);
                        $multiple_image = "YES";
                    }
                }else{
                    $original_filename = $message_file_url = "";
                }
                $query = "update messages set title =?, message=?, message_type=?, original_filename=?, message_file_url=?, multiple_image=? , modified=? where id = ?";
                $connection = ConnectionUtil::getConnection();
                $stmt = $connection->prepare($query);
                $stmt->bind_param('ssssssss', $title, $message, $msg_type, $original_filename, $message_file_url, $multiple_image,  $created, $message_id);
                if ($stmt->execute()) {
                    $response['status'] = 1;
                    $response['message'] = "Blog Edit Successfully";
                }else{
                    $response['status'] = 0;
                    $response['message'] = "Sorry, blocg could not edit";
                }
                echo json_encode($response);
            }
        }
        exit();

    }



    public function load_blog_post($total_record=0)
    {
        $this->layout = 'app_admin_home';
        $this->autoRender = true;
        $login = $this->Session->read('Auth.User.User');
        $thin_app_id = $login['thinapp_id'];
        $searchData = @$this->request->query;


            $condition = " m.thinapp_id =$thin_app_id and m.status = 'Y'";
            if (isset($searchData['search']['value']) && !empty($searchData['search']['value'])) {
                $search = $searchData['search']['value'];
                $condition .= " and ( m.title LIKE '%" . $search . "%' ";
                $condition .= " OR m.message LIKE '%" . $search . "%' ";
                $condition .= " OR m.message_type  = '" . $search . "' ) ";
            }
            $limit = "";
            $page_number = isset($searchData['draw']) ? $searchData['draw'] : 1;
            if ($page_number == 1 || (isset($searchData['search']['value']) && !empty($searchData['search']['value']))) {
                $limit = " limit 0, 10";
                $cnt_query = "select count(*) as total_record  from messages as m left join message_statics as ms on ms.message_id = m.id where $condition";
                $connection = ConnectionUtil::getConnection();
                $count_data = $connection->query($cnt_query);
                if ($count_data->num_rows) {
                    $count_data = mysqli_fetch_assoc($count_data);
                    $total_record = $count_data['total_record'];
                }

            }


            if (isset($searchData['length']) && $searchData['length'] != -1) {
                $limit = isset($searchData['length']) ? $searchData['length'] : 10;
                $offset = isset($searchData['start']) ? $searchData['start'] : ($page_number - 1) * $limit;
                $limit = " limit $offset, $limit";
            }
            $this->set(compact('total_record'));

        if ($this->request->is(array('ajax'))) {
            $this->layout = false;
            $this->autoRender = false;
            $query = "select m.channel_id, m.id as message_id, m.title, m.message, m.message_type, m.message_file_url, m.multiple_image, m.created, ms.total_likes, ms.total_views, ms.total_other_share  from messages as m left join message_statics as ms on ms.message_id = m.id where $condition order by m.created desc  $limit";
            $connection = ConnectionUtil::getConnection();
            $list = $connection->query($query);
            $data_list['data'] = array();
            $data_list['draw'] = $data_list['recordsTotal'] = $data_list['recordsFiltered'] = 0;
            if ($list->num_rows) {
                $list = mysqli_fetch_all($list, MYSQLI_ASSOC);
                foreach ($list as $key => $value) {

                    $img_string='';
                    $width_height = '';
                    $image_div_width = 22;
                    $message_div_width = 78;
                    if($value['multiple_image'] == "YES"){
                        $image_tmp = explode(',', $value['message_file_url']);
                        $width_height = "50px";
                        //$width_height = 100/count($image_tmp)."px";
                        foreach($image_tmp as $img_key => $image){
                            $tmp = explode('##', $image);
                            if($tmp[0] == 'IMAGE') {
                                $img_string .= "<img src='" . $tmp[2] . "' style = 'margin:2px 2px;width:$width_height;height:$width_height;' />";
                            }
                        }
                        $image_div_width = 100;
                        $message_div_width = 100;
                    }else{
                        if($value['message_type'] == 'IMAGE'){
                            $img_string = "<img src='".$value['message_file_url']."' style = 'width:100px;height:100px;' />";
                        }else if($value['message_type'] == 'VIDEO'){
                            $img_string = "<video width = '100' height = '100' controls><source src=".$value['message_file_url']." type='video/mp4'></video>";
                        }else if($value['message_type'] == 'AUDIO'){
                            $image_div_width = 100;
                            $message_div_width = 100;
                            $img_string = "<audio width = '100' height = '100' controls><source src=".$value['message_file_url']." type='audio/mp3'></audio>";
                        }
                    }
                    $img_string = !empty($img_string)?"<div style='width: $image_div_width%;' class='list_image_container'>$img_string</div>":'';


                    $data_list['data'][$key][0] = $key + 1;
                    $data_list['data'][$key][1] = $value['title'];

                    $padding = !empty($img_string)?'message_padding':'';
                    $div = $img_string."<div style='width: $message_div_width%;' class='$padding message_container'>".mb_strimwidth($value['message'], 0, 250, '...')."</div>";
                    $data_list['data'][$key][2] = $div;

                     $type =     "<label class='type_lbl'>".$value['message_type']."</label>";
                    $type .= "<p><i class='fa fa-thumbs-up'></i> ".$value['total_likes']."</p>";
                    $type .= "<p><i class='fa fa-eye'></i> ".$value['total_views']."</p>";
                    $type .= "<p><i class='fa fa-share'></i> ".$value['total_other_share']."</p>";

                    $data_list['data'][$key][3] = $type;

                    $data_list['data'][$key][4] = date('d M, Y h:i A', strtotime($value['created']));

                    $doctor = $this->Session->read('Auth.User.AppointmentStaff');
                    $link = $link_html="";
                    if(!empty($doctor)){
                        $link = SITE_PATH.'/doctor/blog/'.base64_encode($doctor['id'])."/".base64_encode($thin_app_id)."/".base64_encode($value['channel_id'])."/".base64_encode($value['message_id']);
                        $link_html = '<a target="_blank" href="'.$link.'" class="btn btn-info btn-xs view_btn" ><i class="fa fa-edit"></i> View </a>';
                    }

                    $link_html .= '<a href="javascript:void(0);" data-id="'.base64_encode($value['message_id']).'" class="btn btn-warning btn-xs edit_btn" ><i class="fa fa-edit"></i> Edit</a>';
                    $link_html .= '<a href="javascript:void(0);" data-id="'.base64_encode($value['message_id']).'" class="btn btn-danger btn-xs delete_btn" ><i class="fa fa-trash"></i> Delete</a>';
                    $data_list['data'][$key][5] = $link_html;
                }
                $data_list['draw'] = $page_number;
                $data_list['recordsTotal'] = $total_record;
                $data_list['recordsFiltered'] = $total_record;
            }
            return json_encode($data_list, JSON_UNESCAPED_SLASHES);

        }



    }


    public function password()
    {
        $this->layout = 'app_admin_home';

        $login = $this->Session->read('Auth.User');

        if ($this->request->is(array('post', 'put'))) {

            $this->User->set($this->request->data['User']);
            if ($this->User->validates()) {
                $this->User->id = $login['User']['id'];

                if ($this->User->saveField('password', md5($this->request->data['User']['password']))) {
                    $this->Session->setFlash(__('Password update successfully.'), 'default', array(), 'success');
                } else {
                    $this->Session->setFlash(__('Sorry password could not update.'), 'default', array(), 'error');
                }
            }

        }

        if (!$this->request->data) {
            unset($this->request->data['User']);
        }


    }


    public function payment()
    {


        $this->layout = 'app_admin_home';

        $login = $this->Session->read('Auth.User');


        if ($this->request->is(array('post', 'put')) &&
            isset($this->request->data['razorpay_payment_id']) &&
            !empty($this->request->data['razorpay_payment_id']
            )) {


            $user = $this->Leads->find("first", array("conditions" => array(
                "Leads.org_unique_url" => $login['User']['org_unique_url']
            )));

            $transaction['app_id'] = $user['Leads']['customer_id'];
            $transaction['amount'] = base64_decode($this->request->data['User']['da']);
            $transaction['membership_id'] = base64_decode($this->request->data['User']['di']);
            $transaction['ip_address'] = $this->RequestHandler->getClientIp();
            $this->PaymentTransactions->save($transaction);
            $last_id = $this->PaymentTransactions->getLastInsertId();

            $datasource = $this->Payments->getDataSource();

            try {

                $datasource->begin();

                $this->Payments->updateAll(array("membership_status" => "'" . "INACTIVE" . "'"), array("membership_status" => "ACTIVE", 'Payments.user_id' => $user['Leads']['user_id']));
                $postData['transaction_id'] = $this->request->data['razorpay_payment_id'];
                $postData['membership_id'] = base64_decode($this->request->data['User']['di']);
                $postData['amount'] = base64_decode($this->request->data['User']['da']);
                $postData['user_id'] = $user['Leads']['user_id'];
                $postData['app_id'] = $user['Leads']['customer_id'];
                $start = date('Y-m-d H:i:s');
                $postData['membership_start'] = $start;
                $one_year = strtotime(date('Y-m-d H:i:s', strtotime('+1 years', strtotime($start))));
                $one_min = date("Y-m-d H:i:s", strtotime("-1 minutes", $one_year));
                $postData['membership_expire'] = $one_min;

                if ($this->Payments->save($postData)) {
                    $transaction['payment_status'] = 'SUCCESS';
                    $transaction['payment_id'] = $this->Payments->getLastInsertId();
                    $this->PaymentTransactions->id = $last_id;
                    $pay_tar = $this->PaymentTransactions->save($transaction);
                    /* this is for customer lead */
                    $pay_lead = $this->Leads->updateAll(array("app_payment" => 1), array("customer_id" => $user['Leads']['customer_id']));
                    if ($pay_lead && $pay_tar) {
                        $this->Session->setFlash(__('Payment done successfully.'), 'default', array(), 'success');
                        $datasource->commit();
                        $this->redirect(array('controller' => 'app_admin', 'action' => 'payment'));
                    } else {
                        $datasource->rollback();
                        $transaction['payment_status'] = 'FAIL';
                        $this->PaymentTransactions->id = $last_id;
                        $this->PaymentTransactions->save($transaction);
                        $this->Session->setFlash(__('Payment fail.'), 'default', array(), 'error');
                    }

                } else {
                    $transaction['payment_status'] = 'FAIL';
                    $this->PaymentTransactions->id = $last_id;
                    $this->PaymentTransactions->save($transaction);
                    $this->Session->setFlash(__('Payment fail.'), 'default', array(), 'error');
                }


            } catch (Exception $e) {


                $datasource->rollback();
                $transaction['payment_status'] = 'FAIL';
                $this->PaymentTransactions->id = $last_id;
                $this->PaymentTransactions->save($transaction);
                $this->Session->setFlash(__('Payment fail somthing went wrong.'), 'default', array(), 'error');

            }


        }


        $payment = $this->Payments->find('all', array('conditions' => array('user_id' => $login['User']['id']), 'order' => array('Payments.id' => 'desc')));
        $this->set('payment_history', $payment);

    }


    public function logout()
    {
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User');
        $url = $login['User']['org_unique_url'];
        $this->Auth->logout();
        $this->redirect("https://www.mpasscheckin.com/virtual-queue-management-system");die;
    }

    public function download()
    {
        $this->layout = 'app_admin_home';

        $login = $this->Session->read('Auth.User');
        $leads = $this->Leads->find("first", array(
            "conditions" => array(
                "Leads.org_unique_url" => $login['User']['org_unique_url']
            ),
            "contains" => array("User"),
            "fields" => array("Leads.*", "User.thinapp_id")
        ));

        if ($this->request->is(array('post', 'put'))) {

            if (isset($this->request->data['AppQueries']['file']['tmp_name']) && !empty($this->request->data['AppQueries']['file']['tmp_name'])) {
                $file = $this->request->data['AppQueries']['file'];
                $fileTmp = $file['tmp_name'];
                $exploadname = explode('.', $file['name']);
                $ext = end($exploadname);
                $uploadPath = WWW_ROOT . "uploads" . DS . 'message' . DS;
                $fileName = uniqid() . '.' . $ext;
                if (move_uploaded_file($fileTmp, $uploadPath . $fileName)) {
                    $post['attachment'] = $fileName;
                }
            }

            $post['customer_lead_id'] = $leads['Leads']['customer_id'];
            $post['support_admin_id'] = $leads['Leads']['support_admin_id'];
            //$post['reciver_id']=    $leads['Leads']['support_admin_id'];
            $post['org_unique_url'] = $login['User']['org_unique_url'];
            $post['message'] = $this->request->data['AppQueries']['message'];
            $post['sender_id'] = $login['User']['id'];

            if ($this->AppQueries->save($post)) {
                $this->Session->setFlash(__('Your query post successfully.'), 'default', array(), 'success');
                $this->redirect(array('controller' => 'app_admin', 'action' => 'download'));
            } else {
                $this->Session->setFlash(__('Sorry your query could not post.'), 'default', array(), 'errror');
            }
        }


    }


    public function get_theme()
    {

        $this->autoRender = false;
        if ($this->request->is('ajax')) {

            $theme = $this->AppTheme->find("first", array("conditions" => array(
                "AppTheme.id" => $this->request->data['id']
            )));

            if (isset($theme['AppTheme']['theme_image']) && !empty($theme['AppTheme']['theme_image'])) {
                return $theme['AppTheme']['theme_image'];
            } else {
                return "default.png";
            }
        } else {

            exit();
        }
    }


    public function get_org()
    {

        $this->autoRender = false;
        $role_type = isset($this->request->data['role_type']) ? $this->request->data['role_type'] : 'ADMIN';
        if (true) {


            if ($role_type == "ADMIN") {
                $theme = $this->User->find("list", array(
                    "conditions" => array(
                        "User.mobile" => $this->request->data['mob'],
                        "User.role_id" => 5,
                        "Leads.status" => "DONE"
                    ),
                    "fields" => array('Thinapp.id', 'Thinapp.name'),
                    'contain' => array('Leads', 'Thinapp'),
                    'order' => array('Thinapp.name' => 'asc'),
                ));

            } else {


                if ($role_type == 'LAB' || $role_type == 'PHARMACY') {
                    $theme = $this->LabPharmacyUser->find("list", array(
                        "conditions" => array(
                            "LabPharmacyUser.mobile" => $this->request->data['mob'],
                            "LabPharmacyUser.role_type" => $role_type,
                            "LabPharmacyUser.status" => "ACTIVE",
                            "LabPharmacyUser.request_status" => "APPROVED"
                        ),
                        'contain' => array('Thinapp'),
                        'fields' => array('Thinapp.id', 'Thinapp.name'),
                        'order' => array('Thinapp.name' => 'asc'),

                    ));

                } else {
                    $this->AppointmentStaff->unbindModel(
                        array('belongsTo' => array('Thinapp')), true
                    );
                    $theme = $this->AppointmentStaff->find("list", array(
                        "conditions" => array(
                            "AppointmentStaff.mobile" => $this->request->data['mob'],
                            "AppointmentStaff.staff_type" => $role_type,
                            "AppointmentStaff.status" => "ACTIVE",
                            "Leads.status" => "DONE"
                        ),
                        'joins' => array(
                            array(
                                'table' => 'customer_lead',
                                'alias' => 'Leads',
                                'type' => 'INNER',
                                'conditions' => array(
                                    'Leads.app_id = AppointmentStaff.thinapp_id',
                                    "Leads.status = 'DONE'"
                                )
                            ),
                            array(
                                'table' => 'thinapps',
                                'alias' => 'Thinapp',
                                'type' => 'INNER',
                                'conditions' => array(
                                    'Thinapp.id = AppointmentStaff.thinapp_id'

                                )
                            )
                        ),
                        'fields' => array('Thinapp.id', 'Thinapp.name'),
                        'order' => array('Thinapp.name' => 'asc'),

                    ));

                }

            }

            $option = '';
            foreach ($theme as $key => $val) {
                $option .= "<option value='$key'>$val</option>";
            }
            return $option;
        } else {
        
        	
            exit();
        }
    }


    public function poll()
    {


        $login = $this->Session->read('Auth.User');
        if (!$this->Custom->check_app_enable_permission($login['User']['thinapp_id'], "POLL")) {
            $this->redirect(array('controller' => 'app_admin', 'action' => 'dashboard'));
        }


        if ($this->request->is(array('post', 'put'))) {

            $thin_app_id = $login['User']['thinapp_id'];
            $channel_id = $this->request->data['ActionQuestion']['channel_id'];
            $share_on = $this->request->data['ActionQuestion']['share_on'];
            $total_sms = $this->Custom->getTotalRemainingSms($thin_app_id, "T");
            $total_sub = $this->Custom->totalSmsSubscriber($channel_id, $thin_app_id);
            if (($total_sms >= $total_sub && $share_on == 'CHANNEL') || $share_on == 'POLLFACTORY') {
                $datasource = $this->ActionQuestion->getDataSource();
                try {

                    $datasource->begin();
                    $this->request->data['ActionQuestion']['user_id'] = $login['User']['id'];
                    $this->request->data['ActionQuestion']['thinapp_id'] = $login['User']['thinapp_id'];
                    $duration = $this->request->data['ActionQuestion']['poll_duration'];

                    $current_date = date('Y-m-d H:i:s');
                    $end_time = date('Y-m-d H:i:s', strtotime($current_date . "+" . $duration));
                    $this->request->data['ActionQuestion']['end_time'] = $end_time;
                    $this->request->data['ActionQuestion']['participates_count'] = $this->Custom->totalSubscriberForChannel($channel_id);
                    if ($this->ActionQuestion->save($this->request->data['ActionQuestion'])) {
                        $question_id = $this->ActionQuestion->getLastInsertId();
                        $action_type_id = $this->request->data['ActionQuestion']['action_type_id'];

                        $optionArray = array();
                        if (isset($this->request->data['ActionQuestion']['option']) && !empty($this->request->data['ActionQuestion']['option'])) {
                            $optionArray = explode(",", $this->request->data['ActionQuestion']['option']);
                        }
                        $option = $this->Custom->createOpitonArray($action_type_id, $question_id, $thin_app_id, $optionArray);
                        if ($this->QuestionChoice->saveAll($option)) {
                            if ($share_on == "CHANNEL") {

                                $this->ChannelMessage->create();
                                $this->ChannelMessage->set('channel_id', $channel_id);
                                $this->ChannelMessage->set('message_id', $question_id);
                                $this->ChannelMessage->set('post_type_status', 'POLL');
                                $this->MessageStatic->create();
                                $this->MessageStatic->set('message_id', $question_id);
                                $this->MessageStatic->set('list_message_type', 'POLL');
                                if ($this->ChannelMessage->save() && $this->MessageStatic->save()) {
                                    $total_par = $this->Custom->totalSubscriberForChannel($channel_id);;
                                    $this->ActionQuestion->id = $question_id;
                                    $this->ActionQuestion->saveField('participates_count', $total_par);
                                    $datasource->commit();
                                    $question_text = $this->ActionQuestion->find('first', array(
                                        "conditions" => array(
                                            "ActionQuestion.id" => $question_id,
                                        ),
                                        'contain' => false,
                                        'fields' => array('ActionQuestion.question_text')
                                    ));

                                    $sendArray = array(
                                        'thinapp_id' => $thin_app_id,
                                        'channel_id' => $channel_id,
                                        'question_id' => $question_id,
                                        //  'action_type'=>$action_type_id,
                                        'flag' => 'POLL',
                                        'title' => mb_strimwidth("Poll - " . $question_text['ActionQuestion']['question_text'], 0, 50, '...'),
                                        'message' => mb_strimwidth("Poll - " . $question_text['ActionQuestion']['question_text'], 0, 50, '...'),
                                        'description' => '',
                                        'chat_reference' => '',
                                        'module_type' => 'POLL',
                                        'module_type_id' => $question_id,
                                        'firebase_reference' => ""
                                    );
                                    $this->Custom->send_topic_notification($sendArray);
                                    $user_role = $this->Custom->get_user_role_id($login['User']['id']);
                                    $is_permission = $this->Custom->check_user_permission($thin_app_id, 'POLL_SEND_NOTIFICATION_VIA_SMS');
                                    if ($user_role == 5 || $is_permission == "YES") {
                                        /* this function send message to subscriber user only*/
                                        $this->Custom->sendPollMessage($channel_id, $question_id, $thin_app_id, $login['User']['id']);
                                    }


                                    $this->Session->setFlash(__('Poll created  successfully.'), 'default', array(), 'success');
                                    $this->redirect(array('controller' => 'app_admin', 'action' => 'poll'));
                                } else {
                                    $datasource->commit();
                                    $this->Session->setFlash(__('Sorry poll could not create.'), 'default', array(), 'error');
                                }
                            } else {

                                $datasource->commit();
                                $this->Session->setFlash(__('Poll created  successfully.'), 'default', array(), 'success');
                                $this->redirect(array('controller' => 'app_admin', 'action' => 'poll'));
                            }
                        } else {

                            $this->Session->setFlash(__('Sorry poll could not create.'), 'default', array(), 'error');
                        }

                    } else {
                        $this->Session->setFlash(__('Sorry poll could not create.'), 'default', array(), 'error');
                    }

                } catch (Exception $e) {
                    $datasource->rollback();
                    $this->Session->setFlash(__('Sorry poll could not create.'), 'default', array(), 'error');
                }

            } else {
                $this->Session->setFlash(__("Sorry, you have insufficient SMS."), 'default', array(), 'warning');
                //$this->redirect(array('controller' => 'app_admin', 'action' => 'quest','?'=>array('qt'=>$qt)));
            }


        }


    }


    public function search_poll()
    {
        $reqData = $this->request->query;
        $pram = array();
        if (!empty($reqData['poll_type'])) {
            $pram['t'] = $reqData['poll_type'];
        }
        if (!empty($reqData['question'])) {
            $pram['q'] = $reqData['question'];
        }

        if (!empty($reqData['publish_type'])) {
            $pram['p'] = $reqData['publish_type'];
        }


        $this->redirect(
            array(
                "controller" => "app_admin",
                "action" => "poll_management",
                "?" => $pram,
            )
        );
    }


    public function poll_management()
    {
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User');
        if (!$this->Custom->check_app_enable_permission($login['User']['thinapp_id'], "POLL")) {
            $this->redirect(array('controller' => 'app_admin', 'action' => 'dashboard'));
        }

        $searchData = $this->request->query;
        $conditions = array();
        if (isset($searchData['t']) && !empty($searchData['t'])) {
            $this->request->data['Search']['poll_type'] = $searchData['t'];
            $conditions["ActionType.name LIKE"] = '%' . $searchData['t'] . '%';
        }
        if (isset($searchData['q']) && !empty($searchData['q'])) {
            $this->request->data['Search']['question'] = $searchData['q'];
            $conditions["ActionQuestion.question_text LIKE"] = '%' . $searchData['q'] . '%';
        }

        if (isset($searchData['p']) && !empty($searchData['p'])) {
            $this->request->data['Search']['publish_type'] = $searchData['p'];
            $conditions["ActionQuestion.poll_publish"] = $searchData['p'];
        }


        $this->paginate = array(
            "conditions" => array(
                "ActionQuestion.thinapp_id" => $login['User']['thinapp_id'],
                "ActionQuestion.user_id" => $login['User']['id'],
                $conditions
            ),
            "fields" => array("ActionQuestion.*", "ActionType.name"),
            "contain" => array("ActionType"),
            'limit' => WEB_PAGINATION_LIMIT,
            'order' => array('ActionQuestion.id' => 'DESC')
        );
        $data = $this->paginate('ActionQuestion');
        $this->set('question', $data);
    }


    public function view_poll($id = null)
    {


        try {

            $id = base64_decode($id);
            $this->layout = 'app_admin_home';
            $login = $this->Session->read('Auth.User');
            if (!$this->Custom->check_app_enable_permission($login['User']['thinapp_id'], "POLL")) {
                $this->redirect(array('controller' => 'app_admin', 'action' => 'dashboard'));
            }

            $question = $this->ActionQuestion->find("first", array(
                "conditions" => array(
                    "ActionQuestion.thinapp_id" => $login['User']['thinapp_id'],
                    "ActionQuestion.user_id" => $login['User']['id'],
                    "ActionQuestion.id" => $id,
                ),
                "fields" => array("ActionQuestion.*", "ActionType.name"),
                "contain" => array("ActionType", "QuestionChoice"),
                'limit' => WEB_PAGINATION_LIMIT,
                'order' => array('ActionQuestion.id' => 'DESC')
            ));
            $this->set(compact('question', 'id'));

        } catch (Exception $e) {

        }

    }





    public function ticket()
    {
        $login = $this->Session->read('Auth.User');

        $recentTickets = $this->Ticket->find('all', array(
                'fields' => array('Ticket.*', 'CreatedBy.username', 'AppAdmin.username',),
                'conditions' => array('app_id' => $login['User']['thinapp_id']),
                'contain' => array('AppAdmin', 'CreatedBy'),
                'limit' => 10,
                'order' => 'Ticket.id DESC'
            )
        );
        $favouriteTickets = $this->Ticket->find('all', array(
                'fields' => array('Ticket.*', 'CreatedBy.username', 'AppAdmin.username',),
                'conditions' => array('Ticket.app_id' => $login['User']['thinapp_id'], 'Ticket.is_favourite' => 'Y'),
                'contain' => array('AppAdmin', 'CreatedBy'),
                'order' => 'Ticket.id DESC'
            )
        );

        $this->set(compact('recentTickets', 'favouriteTickets'));

    }

    public function list_tickets()
    {
        $login = $this->Session->read('Auth.User');

        $questionTickets = $this->Ticket->find('count', array('conditions' => array('Ticket.app_id' => $login['User']['thinapp_id'], 'Ticket.type' => 'QUESTION'),));
        $incidentTickets = $this->Ticket->find('count', array('conditions' => array('Ticket.app_id' => $login['User']['thinapp_id'], 'Ticket.type' => 'INCIDENT'),));
        $problemTickets = $this->Ticket->find('count', array('conditions' => array('Ticket.app_id' => $login['User']['thinapp_id'], 'Ticket.type' => 'PROBLEM'),));
        $taskTickets = $this->Ticket->find('count', array('conditions' => array('Ticket.app_id' => $login['User']['thinapp_id'], 'Ticket.type' => 'TASK'),));
        $openTickets = $this->Ticket->find('count', array('conditions' => array('Ticket.app_id' => $login['User']['thinapp_id'], 'Ticket.status' => 'OPEN'),));
        $inProgressTickets = $this->Ticket->find('count', array('conditions' => array('Ticket.app_id' => $login['User']['thinapp_id'], 'Ticket.status' => 'INPROGRESS'),));
        $solvedTickets = $this->Ticket->find('count', array('conditions' => array('Ticket.app_id' => $login['User']['thinapp_id'], 'Ticket.status' => 'SOLVED'),));
        $canceledTickets = $this->Ticket->find('count', array('conditions' => array('Ticket.app_id' => $login['User']['thinapp_id'], 'Ticket.status' => 'CANCELLED'),));

        $this->set(compact('questionTickets', 'incidentTickets', 'problemTickets', 'taskTickets', 'openTickets', 'inProgressTickets', 'solvedTickets', 'canceledTickets'));

    }

    public function search_ticket($titketType = null)
    {
        $login = $this->Session->read('Auth.User');
        $titketType = strtoupper($titketType);
        $condition = array();

        $searchData = $this->request->query;
        if (isset($searchData['u']) && !empty($searchData['u'])) {
            $this->request->data['Search']['username'] = $searchData['u'];
            $condition["CreatedBy.username LIKE"] = '%' . $searchData['u'] . '%';
        }
        if (isset($searchData['t']) && !empty($searchData['t'])) {
            $this->request->data['Search']['topic'] = $searchData['t'];
            $condition["Ticket.title LIKE"] = '%' . $searchData['t'] . '%';
        }

        $condition['Ticket.app_id'] = $login['User']['thinapp_id'];

        if (!empty($titketType)) {
            $condition['OR'] = array('Ticket.type' => $titketType, 'Ticket.status' => $titketType,);
        }


        $this->paginate = array(
            'fields' => array('Ticket.*', 'CreatedBy.username', 'AppAdmin.username',),
            'conditions' => $condition,
            'contain' => array('AppAdmin', 'CreatedBy'),
            'limit' => 10,
            'order' => 'Ticket.id DESC'
        );
        $searchedTickets = $this->paginate('Ticket');
        $this->set('searchedTickets', $searchedTickets);
    }

    public function search_ticket_report_form()
    {
        $reqData = $this->request->query;
        $pram = array();
        if (!empty($reqData['status'])) {
            $pram['s'] = $reqData['status'];
        }
        if (!empty($reqData['type'])) {
            $pram['t'] = $reqData['type'];
        }
        if (!empty($reqData['date_from'])) {
            $pram['df'] = $reqData['date_from'];
        }
        if (!empty($reqData['date_to'])) {
            $pram['dt'] = $reqData['date_to'];
        }

        $this->redirect(
            array(
                "controller" => "app_admin",
                "action" => "ticket_report",
                "?" => $pram,
            )
        );
    }

    public function ticket_report()
    {
        $login = $this->Session->read('Auth.User');
        $condition = array();

        $searchData = $this->request->query;
        if (isset($searchData['s']) && !empty($searchData['s'])) {
            $this->request->data['Search']['status'] = $searchData['s'];
            $condition["Ticket.status"] = $searchData['s'];
        }
        if (isset($searchData['t']) && !empty($searchData['t'])) {
            $this->request->data['Search']['type'] = $searchData['t'];
            $condition["Ticket.type"] = $searchData['t'];
        }
        if (isset($searchData['df']) && !empty($searchData['df']) && isset($searchData['dt']) && !empty($searchData['dt'])) {
            $this->request->data['Search']['date_from'] = $searchData['df'];
            $this->request->data['Search']['date_to'] = $searchData['dt'];
            $condition["DATE(Ticket.created) >="] = date('Y-m-d', strtotime($searchData['df']));
            $condition["DATE(Ticket.created) <="] = date('Y-m-d', strtotime($searchData['dt']));
        }


        $this->paginate = array(
            'fields' => array('Ticket.*', 'CreatedBy.username', 'AppAdmin.username',),
            'conditions' => $condition,
            'contain' => array('AppAdmin', 'CreatedBy'),
            'limit' => 10,
            'order' => 'Ticket.id DESC'
        );
        $searchedTickets = $this->paginate('Ticket');
        $this->set('searchedTickets', $searchedTickets);
    }

    public function view_ticket()
    {

        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $response = array();
            $ticketID = $this->request->data['ticketID'];
            $ticketData = $this->Ticket->find("first",
                array(
                    "conditions" => array("Ticket.id" => $ticketID),
                    "fields" => array('Ticket.*', 'CreatedBy.username', 'AppAdmin.username'),
                    "contain" => array('CreatedBy', 'AppAdmin'),
                )
            );

            $response = "<tr>
			<td width='20%'>Title:<td>
			<td>" . $ticketData['Ticket']['title'] . "<td>
			</tr>
			<tr>
			<td width='20%'>Description:<td>
			<td>" . $ticketData['Ticket']['description'] . "<td>
			</tr>
			<tr>
			<td width='20%'>Type:<td>
			<td>" . $ticketData['Ticket']['type'] . "<td>
			</tr>
			<tr>
			<td width='20%'>Status:<td>
			<td>" . $ticketData['Ticket']['status'] . "<td>
			</tr>
			<tr>
			<td width='20%'>Created:<td>
			<td>" . date("d-M-Y", strtotime($ticketData['Ticket']['created'])) . "<td>
			</tr>
			<tr>
			<td width='20%'>Comment:<td>
			<td>" . $ticketData['Ticket']['comment'] . "<td>
			</tr>
			<tr>
			<td width='20%'>Created By:<td>
			<td>" . $ticketData['CreatedBy']['username'] . "<td>
			</tr>
			<td width='20%'>App Admin:<td>
			<td>" . $ticketData['AppAdmin']['username'] . "<td>
			</tr>";

            echo $response;
            die;
        }
    }

    public function update_ticket_status()
    {
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $login = $this->Session->read('Auth.User');
            $response = array();
            $data = $this->request->data;
            if ($this->Ticket->save($data)) {
                $inData = array();
                $inData['ticket_id'] = $data['Ticket']['id'];
                $inData['ticket_status'] = $data['Ticket']['status'];
                $inData['comment'] = $data['Ticket']['comment'];
                $inData['app_admin_id'] = $login['User']['id'];
                $this->TicketComment->save($inData);
                $response['status'] = 1;
            } else {
                $response['status'] = 0;
                $response['message'] = 'Sorry, Could not update.';
            }
            $response = json_encode($response, true);
            echo $response;
            exit();
        }
    }

    public function search_ticket_form()
    {
        $reqData = $this->request->query;
        $pram = array();
        if (!empty($reqData['username'])) {
            $pram['u'] = $reqData['username'];
        }
        if (!empty($reqData['topic'])) {
            $pram['t'] = $reqData['topic'];
        }

        $this->redirect(
            array(
                "controller" => "app_admin",
                "action" => "search_ticket",
                "?" => $pram,
            )
        );
    }


    public function add_ticket()
    {
        $login = $this->Session->read('Auth.User');

        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $response = array();
            $data = $this->request->data;
            $userID = $login['User']['id'];
            $appID = $login['User']['thinapp_id'];
            $data['Ticket']['app_id'] = $appID;
            $data['Ticket']['created_by_user_id'] = $userID;
            $this->Ticket->create();
            if ($this->Ticket->save($data)) {
                $inData = array();
                $last_inser_id = $this->Ticket->getLastInsertId();
                $inData['ticket_id'] = $last_inser_id;
                $inData['ticket_status'] = 'OPEN';
                $this->TicketComment->save($inData);
                $response['status'] = 1;
            } else {
                $response['status'] = 0;
                $response['message'] = 'Sorry, Could not add.';
            }
            $response = json_encode($response, true);
            echo $response;
            exit();
        }

    }

    public function change_is_favourite_ticket()
    {
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $response = array();
            $ticketID = $this->request->data['ticketID'];
            $data = $this->Ticket->find('first', array('conditions' => array('Ticket.id' => $ticketID), 'fields' => array('Ticket.is_favourite', 'Ticket.id'), 'contain' => false));
            $statusToChange = ($data['Ticket']['is_favourite'] == 'N') ? 'Y' : 'N';
            $data['Ticket']['is_favourite'] = $statusToChange;
            if ($save = $this->Ticket->save($data)) {

                $response['status'] = 1;
                $response['text'] = ($statusToChange == 'Y') ? 'Yes' : 'No';
            } else {
                $response['status'] = 0;
                $response['message'] = 'Sorry, Operation Failed.';
            }
            $response = json_encode($response, true);
            echo $response;
            exit();
        }
    }

    public function change_staff_status()
    {
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $response = array();
            $ticketID = base64_decode($this->request->data['id']);
            $data = $this->AppStaff->find('first', array('conditions' => array('AppStaff.id' => $ticketID), 'fields' => array('AppStaff.status', 'AppStaff.id'), 'contain' => false));
            $statusToChange = ($data['AppStaff']['status'] == 'N') ? 'Y' : 'N';
            $data['AppStaff']['status'] = $statusToChange;
            if ($save = $this->AppStaff->save($data)) {
                $response['status'] = 1;
                $response['text'] = $statusToChange;
            } else {
                $response['status'] = 0;
                $response['message'] = 'Sorry, Operation Failed.';
            }
            $response = json_encode($response, true);
            echo $response;
            exit();
        }
    }

    public function change_poll_status()
    {
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $response = array();
            $ticketID = base64_decode($this->request->data['id']);
            $data = $this->ActionQuestion->find('first', array('conditions' => array('ActionQuestion.id' => $ticketID), 'fields' => array('ActionQuestion.status', 'ActionQuestion.id'), 'contain' => false));
            $statusToChange = ($data['ActionQuestion']['status'] == 'N') ? 'Y' : 'N';
            $data['ActionQuestion']['status'] = $statusToChange;
            if ($save = $this->ActionQuestion->save($data)) {
                $response['status'] = 1;
                $response['text'] = $statusToChange;
            } else {
                $response['status'] = 0;
                $response['message'] = 'Sorry, Operation Failed.';
            }
            $response = json_encode($response, true);
            echo $response;
            exit();
        }
    }


    /*****QUEST START HERE*****/

    public function search_quest()
    {
        $reqData = $this->request->query;
        $pram = array();
        if (!empty($reqData['qt'])) {
            $pram['qt'] = $reqData['qt'];
        }
        if (!empty($reqData['quest_category'])) {
            $pram['c'] = $reqData['quest_category'];
        }
        if (!empty($reqData['title'])) {
            $pram['t'] = $reqData['title'];
        }
        $this->redirect(
            array(
                "controller" => "app_admin",
                "action" => "quest",
                "?" => $pram,
            )
        );
    }

    public function quest()
    {

        $login = $this->Session->read('Auth.User.User');
        if (!$this->Custom->check_app_enable_permission($login['thinapp_id'], "QUEST_BUY_SELL")) {
            $this->redirect(array('controller' => 'app_admin', 'action' => 'dashboard'));
        }


        $searchData = $this->request->query;
        $quest_type = strtoupper(base64_decode($searchData['qt']));
        $type_list = $this->Custom->get_enum_values('Quest', 'quests', 'type');
        if (!empty($quest_type) && in_array($quest_type, $type_list)) {
            $conditions = array();
            if (isset($searchData['c']) && !empty($searchData['c'])) {
                $this->request->data['Search']['quest_category'] = $searchData['c'];
                $conditions["Quest.quest_category_id"] = $searchData['c'];
            }
            if (isset($searchData['t']) && !empty($searchData['t'])) {
                $this->request->data['Search']['title'] = $searchData['t'];
                $conditions["Quest.question LIKE"] = "%" . $searchData['t'] . "%";
            }
            $conditions["Quest.thinapp_id"] = $login['thinapp_id'];
            $conditions["Quest.type"] = $quest_type;
            $conditions["Channel.status"] = "Y";
            $this->paginate = array(
                'conditions' => $conditions,
                'contain' => array('QuestCategory', 'Channel', 'User'),
                'order' => 'Quest.id DESC',
                'fields' => array('Quest.*', 'QuestCategory.*', 'User.mobile'),
                'limit' => WEB_PAGINATION_LIMIT
            );
            $quest = $this->paginate('Quest');
            $questCategory = $this->QuestCategory->find('list', array('conditions' => array('QuestCategory.status' => 'ACTIVE')));
            $quest_type = strtolower($quest_type);
            $this->set(compact('quest', 'questCategory', 'quest_type'));
        } else {
            exit();
        }


    }

    public function change_quest_status()
    {
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $response = array();
            $questID = $this->request->data['questID'];
            $questData = $this->Quest->find("first",
                array(
                    "fields" => array('Quest.status', 'Quest.id'),
                    "conditions" => array("Quest.id" => $questID),
                    "contain" => false,
                )
            );
            $statusToChange = ($questData['Quest']['status'] == 'ACTIVE') ? 'INACTIVE' : 'ACTIVE';
            $questData['Quest']['status'] = $statusToChange;
            if ($this->Quest->save($questData)) {
                $response['status'] = 1;
                $response['text'] = $statusToChange;
            } else {
                $response['status'] = 0;
            }
            $response = json_encode($response, true);
            echo $response;
            exit();
        }
    }

    public function delete_quest_image()
    {
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $response = array();
            $questID = $this->request->data['quest_id'];
            $questData = $this->Quest->find("first",
                array(
                    "fields" => array('Quest.status', 'Quest.id'),
                    "conditions" => array("Quest.id" => $questID),
                    "contain" => false,
                )
            );

            $questData['Quest']['image'] = '';
            if ($this->Quest->save($questData)) {
                $response['status'] = 1;
            } else {
                $response['status'] = 0;
            }
            $response = json_encode($response, true);
            echo $response;
            exit();
        }
    }

    public function view_quest()
    {
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $response = array();
            $questID = $this->request->data['questID'];
            $rowData = $this->Quest->find("first",
                array(
                    "fields" => array('Quest.*', 'User.mobile', 'Thinapp.name', 'QuestCategory.name', 'Channel.channel_name'),
                    "conditions" => array("Quest.id" => $questID),
                    "contain" => array('User', 'Thinapp', 'QuestCategory', 'Channel'),
                )
            );

            if (!empty($rowData)) {
                $response['status'] = '1';
                $html = "<tr><td>Question:</td><td>" . $rowData['Quest']['question'] . "</td></tr>";
                if (!empty($rowData['Quest']['image'])) {
                    $html .= "<tr><td>Image:</td><td><img src='" . $rowData['Quest']['image'] . "' style='width:150px;'> </td></tr>";
                }
                $html .= "<tr><td>Category:</td><td>" . $rowData['QuestCategory']['name'] . "</td></tr>";
                $html .= "<tr><td>Post As Anonymous:</td><td>" . $rowData['Quest']['post_as_anonymous'] . "</td></tr>";
                $html .= "<tr><td>Total Likes:</td><td>" . $rowData['Quest']['like_count'] . "</td></tr>";
                $html .= "<tr><td>Total Shares:</td><td>" . $rowData['Quest']['share_count'] . "</td></tr>";
                $html .= "<tr><td>Share On:</td><td>" . $rowData['Quest']['share_on'] . "</td></tr>";
                if ($rowData['Quest']['channel_id'] > 0) {
                    $html .= "<tr><td>Share Channel:</td><td>" . $rowData['Channel']['channel_name'] . "</td></tr>";
                }
                $html .= "<tr><td>Show On Mbroadcast:</td><td>" . $rowData['Quest']['show_on_mbroadcast'] . "</td></tr>";
                $html .= "<tr><td>Enable Chat:</td><td>" . $rowData['Quest']['enable_chat'] . "</td></tr>";
                if ($rowData['Quest']['show_on_mbroadcast'] == 'YES') {
                    $html .= "<tr><td>Mbroadcast Publish Status:</td><td>" . $rowData['Quest']['mbroadcast_publish_status'] . "</td></tr>";
                }

                if ($rowData['Quest']['share_on'] == 'QUEST_FACTORY') {
                    $html .= "<tr><td>Factory Publish Status:</td><td>" . $rowData['Quest']['factory_publish_status'] . "</td></tr>";
                }
                $html .= "<tr><td>User:</td><td>" . $rowData['User']['mobile'] . "</td></tr>";
                $html .= "<tr><td>Thin App:</td><td>" . $rowData['Thinapp']['name'] . "</td></tr>";
                $html .= "<tr><td>Status:</td><td>" . $rowData['Quest']['status'] . "</td></tr>";
                $html .= "<tr><td>Created:</td><td>" . date('d-M-Y H:i:s', strtotime($rowData['Quest']['created'])) . "</td></tr>";
                $response['html'] = $html;
            } else {
                $response['status'] = '0';
            }

            $response = json_encode($response, true);
            echo $response;
            exit();
        }
    }

    public function view_quest_result()
    {
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $response = array();
            $questID = $this->request->data['questID'];
            $rowData = $this->Quest->find('first', array(
                'conditions' => array('Quest.id' => $questID),
                'contain' => array('QuestReply' => array('User')),
            ));

            $dataToSend = array();
            $dataToSend['Quest']['question'] = $rowData['Quest']['question'];
            $dataToSend['Quest']['like_count'] = $rowData['Quest']['like_count'];
            $dataToSend['Quest']['share_count'] = $rowData['Quest']['share_count'];
            $dataToSend['QuestReply'] = array();
            foreach ($rowData['QuestReply'] as $key => $value) {
                $dataToSend['QuestReply'][$key]['id'] = base64_encode($value['id']);
                $dataToSend['QuestReply'][$key]['message'] = $value['message'];
                $dataToSend['QuestReply'][$key]['status'] = $value['status'];
                $dataToSend['QuestReply'][$key]['thank_count'] = $value['thank_count'];
                $dataToSend['QuestReply'][$key]['User'] = $value['User']['mobile'];
            }


            if (!empty($dataToSend)) {
                $response['status'] = '1';

                $response['data'] = $dataToSend;
            } else {
                $response['status'] = '0';
            }

            $response = json_encode($response, true);
            echo $response;
            exit();
        }
    }

    public function change_quest_reply_status()
    {
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $response = array();
            $questReplyID = base64_decode($this->request->data['questReplyID']);
            $questReplyData = $this->QuestReply->find("first",
                array(
                    "fields" => array('QuestReply.status', 'QuestReply.id'),
                    "conditions" => array("QuestReply.id" => $questReplyID),
                    "contain" => false,
                )
            );
            $statusToChange = ($questReplyData['QuestReply']['status'] == 'ACTIVE') ? 'INACTIVE' : 'ACTIVE';
            $questReplyData['QuestReply']['status'] = $statusToChange;
            if ($this->QuestReply->save($questReplyData)) {
                $response['status'] = 1;
                $response['text'] = $statusToChange;
            } else {
                $response['status'] = 0;
            }
            $response = json_encode($response, true);
            echo $response;
            exit();
        }
    }

    public function add_quest()
    {

        $login = $this->Session->read('Auth.User.User');
        if (!$this->Custom->check_app_enable_permission($login['thinapp_id'], "QUEST_BUY_SELL")) {
            $this->redirect(array('controller' => 'app_admin', 'action' => 'dashboard'));
        }

        $thin_app_id = $login['thinapp_id'];
        if ($this->request->is(array('post', 'put'))) {
            $dataToSave = $this->request->data;
            $dataToSave['Quest']['user_id'] = $login['id'];
            $dataToSave['Quest']['thinapp_id'] = $thin_app_id;
            $qt = $dataToSave['Quest']['type'];
            $dataToSave['Quest']['type'] = $type = strtoupper(base64_decode($dataToSave['Quest']['type']));

            if (empty($dataToSave['Quest']['channel_id'])) {
                $dataToSave['Quest']['channel_id'] = 0;
            }

            $image = $dataToSave['Quest']['image'];
            $channel_id = $dataToSave['Quest']['channel_id'];
            $share_on = $dataToSave['Quest']['share_on'];
            unset($dataToSave['Quest']['image']);
            $total_sms = $this->Custom->getTotalRemainingSms($thin_app_id, "T");
            $total_sub = $this->Custom->totalSmsSubscriber($channel_id, $thin_app_id);
            if (($total_sms >= $total_sub && $share_on == 'CHANNEL') || $share_on == 'QUEST_FACTORY') {
                $datasource = $this->Quest->getDataSource();
                try {
                    $datasource->begin();
                    if (!empty($image['tmp_name'])) {
                        $mimeAarray = array('image/png', 'image/jpeg', 'image/jpeg', 'image/jpeg', 'image/gif', 'image/bmp');
                        if (in_array($image['type'], $mimeAarray)) {
                            if ($url = $this->Custom->uploadFileToAws($image)) {
                                $dataToSave['Quest']['image'] = $url;
                                if ($this->Quest->saveAll($dataToSave)) {
                                    $questID = $this->Quest->getLastInsertId();
                                    if ($share_on == "CHANNEL") {
                                        $this->ChannelMessage->create();
                                        $this->ChannelMessage->set('message_id', $questID);
                                        $this->ChannelMessage->set('channel_id', $channel_id);
                                        $this->ChannelMessage->set('post_type_status', $type);
                                        $this->MessageStatic->create();
                                        $this->MessageStatic->set('message_id', $questID);
                                        $this->MessageStatic->set('list_message_type', $type);
                                        if ($this->ChannelMessage->save() && $this->MessageStatic->save()) {
                                            $datasource->commit();
                                            /* send notification to channel subscriber*/
                                            $app_name = "Mbroadcast";
                                            $message = $dataToSave['Quest']['question'];
                                            $description = $dataToSave['Quest']['description'];
                                            $sendArray = array(
                                                'thinapp_id' => $thin_app_id,
                                                'channel_id' => $channel_id,
                                                'quest_id' => $questID,
                                                'flag' => 'NEW_QUEST',
                                                'title' => strtoupper($app_name),
                                                'message' => mb_strimwidth($type . " - " . $message, 0, 50, '...'),
                                                'description' => mb_strimwidth($description, 0, 100, '...'),
                                                'chat_reference' => '',
                                                'module_type' => $type,
                                                'module_type_id' => $questID,
                                                'firebase_reference' => ""
                                            );
                                            $this->Custom->send_topic_notification($sendArray);
                                            $user_role = $this->Custom->get_user_role_id($login['id']);
                                            $is_permission = $this->Custom->check_user_permission($thin_app_id, 'QUEST_BUY_SELL_SEND_NOTIFICATION_VIA_SMS');
                                            if ($user_role == 5 || $is_permission == "YES") {
                                                /* ADD MESSAGE CODE FOR UNREGISTER USERS*/
                                                if ($type == "QUEST") {
                                                    /* create new custom function for quet*/
                                                    $this->Custom->sendQuestMessage($channel_id, $questID, $thin_app_id, $login['id']);
                                                } else {
                                                    $this->Custom->sendBulkSms($channel_id, $thin_app_id, $message, $questID, $login['id']);
                                                }
                                            }

                                            $this->Session->setFlash(__(ucfirst(strtolower($type)) . ' add successfully.'), 'default', array(), 'success');
                                            $this->redirect(array('controller' => 'app_admin', 'action' => 'quest', '?' => array('qt' => $qt)));

                                        } else {
                                            $datasource->rollback();
                                            $this->Session->setFlash(__("Sorry," . ucfirst(strtolower($type)) . " could be not add."), 'default', array(), 'error');
                                            $this->redirect(array('controller' => 'app_admin', 'action' => 'quest', '?' => array('qt' => $qt)));

                                        }
                                    } else {
                                        $datasource->commit();
                                        $this->Session->setFlash(__(ucfirst(strtolower($type)) . ' add successfully.'), 'default', array(), 'success');
                                        $this->redirect(array('controller' => 'app_admin', 'action' => 'quest', '?' => array('qt' => $qt)));
                                    }

                                } else {
                                    $datasource->rollback();
                                    $this->Session->setFlash(__("Sorry," . ucfirst(strtolower($type)) . " could be not add."), 'default', array(), 'error');
                                    $this->redirect(array('controller' => 'app_admin', 'action' => 'quest', '?' => array('qt' => $qt)));

                                }
                            } else {
                                $this->Session->setFlash(__('Could not upload image.'), 'default', array(), 'error');
                            }
                        } else {
                            $this->Session->setFlash(__('Please upload image file.'), 'default', array(), 'warning');
                        }
                    } else {
                        //$dataToSave['Quest']['image'] = null;
                        if ($this->Quest->saveAll($dataToSave)) {
                            $questID = $this->Quest->getLastInsertId();
                            if ($share_on == "CHANNEL") {
                                $this->ChannelMessage->create();
                                $this->ChannelMessage->set('message_id', $questID);
                                $this->ChannelMessage->set('channel_id', $channel_id);
                                $this->ChannelMessage->set('post_type_status', $type);
                                $this->MessageStatic->create();
                                $this->MessageStatic->set('message_id', $questID);
                                $this->MessageStatic->set('list_message_type', $type);
                                if ($this->ChannelMessage->save() && $this->MessageStatic->save()) {
                                    $datasource->commit();
                                    /* send notification to channel subscriber*/
                                    $app_name = "Mbroadcast";
                                    $message = $dataToSave['Quest']['question'];
                                    $description = $dataToSave['Quest']['description'];
                                    $sendArray = array(
                                        'thinapp_id' => $thin_app_id,
                                        'channel_id' => $channel_id,
                                        'quest_id' => $questID,
                                        'flag' => 'NEW_QUEST',
                                        'title' => strtoupper($app_name),
                                        'message' => mb_strimwidth($type . " - " . $message, 0, 50, '...'),
                                        'description' => mb_strimwidth($description, 0, 100, '...'),
                                        'chat_reference' => '',
                                        'module_type' => $type,
                                        'module_type_id' => $questID,
                                        'firebase_reference' => ""
                                    );
                                    $this->Custom->send_topic_notification($sendArray);
                                    $user_role = $this->Custom->get_user_role_id($login['id']);
                                    $is_permission = $this->Custom->check_user_permission($thin_app_id, 'QUEST_BUY_SELL_SEND_NOTIFICATION_VIA_SMS');
                                    if ($user_role == 5 || $is_permission == "YES") {
                                        /* ADD MESSAGE CODE FOR UNREGISTER USERS*/
                                        if ($type == "QUEST") {
                                            /* create new custom function for quet*/
                                            $this->Custom->sendQuestMessage($channel_id, $questID, $thin_app_id, $login['id']);
                                        } else {
                                            $this->Custom->sendBulkSms($channel_id, $thin_app_id, $message, $questID, $login['id']);
                                        }
                                    }

                                    $this->Session->setFlash(__(ucfirst(strtolower($type)) . ' add successfully.'), 'default', array(), 'success');
                                    $this->redirect(array('controller' => 'app_admin', 'action' => 'quest', '?' => array('qt' => $qt)));

                                } else {
                                    $datasource->rollback();
                                    $this->Session->setFlash(__("Sorry," . ucfirst(strtolower($type)) . " could be not add."), 'default', array(), 'error');
                                    $this->redirect(array('controller' => 'app_admin', 'action' => 'quest', '?' => array('qt' => $qt)));

                                }
                            } else {
                                $datasource->commit();
                                $this->Session->setFlash(__(ucfirst(strtolower($type)) . ' add successfully.'), 'default', array(), 'success');
                                $this->redirect(array('controller' => 'app_admin', 'action' => 'quest', '?' => array('qt' => $qt)));
                            }
                        } else {
                            $datasource->rollback();
                            $this->Session->setFlash(__("Sorry," . ucfirst(strtolower($type)) . " could be not add."), 'default', array(), 'error');
                            $this->redirect(array('controller' => 'app_admin', 'action' => 'quest', '?' => array('qt' => $qt)));

                        }
                    }

                } catch (Exception $e) {
                    $datasource->rollback();
                    $this->Session->setFlash(__("Sorry," . ucfirst(strtolower($type)) . " could be not add."), 'default', array(), 'error');
                    $this->redirect(array('controller' => 'app_admin', 'action' => 'quest', '?' => array('qt' => $qt)));

                }

            } else {
                $this->Session->setFlash(__("Sorry, you have insufficient SMS."), 'default', array(), 'warning');
                //$this->redirect(array('controller' => 'app_admin', 'action' => 'quest','?'=>array('qt'=>$qt)));
            }


        }
        $questCategory = $this->QuestCategory->find('list', array('conditions' => array('QuestCategory.status' => 'ACTIVE')));
        $channels = $this->Channel->find('list', array('fields' => array('Channel.id', 'Channel.channel_name'), 'conditions' => array('Channel.user_id' => $login['id'])));
        $this->set(compact('questCategory', 'channels'));
    }

    public function edit_quest($id = null)
    {
        $id = base64_decode($id);
        $login = $this->Session->read('Auth.User.User');
        if (!$this->Custom->check_app_enable_permission($login['thinapp_id'], "QUEST_BUY_SELL")) {
            $this->redirect(array('controller' => 'app_admin', 'action' => 'dashboard'));
        }


        $searchData = $this->request->query;
        $qt = $searchData['qt'];
        $quest_type = strtoupper(base64_decode($searchData['qt']));
        $type_list = $this->Custom->get_enum_values('Quest', 'quests', 'type');
        if (!empty($quest_type) && in_array($quest_type, $type_list)) {
            if ($this->request->is(array('post', 'put'))) {
                $dataToSave = $this->request->data;
                $dataToSave['Quest']['user_id'] = $login['id'];
                $dataToSave['Quest']['id'] = $id;
                $dataToSave['Quest']['thinapp_id'] = $login['thinapp_id'];
                $image = $dataToSave['Quest']['image'];
                unset($dataToSave['Quest']['image']);
                if (!empty($image['tmp_name'])) {
                    $mimeAarray = array('image/png', 'image/jpeg', 'image/jpeg', 'image/jpeg', 'image/gif', 'image/bmp');
                    if (in_array($image['type'], $mimeAarray)) {
                        if ($url = $this->Custom->uploadFileToAws($image)) {
                            $dataToSave['Quest']['image'] = $url;
                            if ($this->Quest->saveAll($dataToSave)) {
                                $this->Session->setFlash(__(ucfirst(strtolower($quest_type)) . ' updated successfully.'), 'default', array(), 'success');
                                $this->redirect(array('controller' => 'app_admin', 'action' => 'quest', '?' => array('qt' => $qt)));
                            } else {
                                $this->Session->setFlash(__('Sorry, ' . ucfirst(strtolower($quest_type)) . ' could not updated.'), 'default', array(), 'error');
                            }
                        } else {
                            $this->Session->setFlash(__('Could not upload image.'), 'default', array(), 'error');
                        }
                    } else {
                        $this->Session->setFlash(__('Please upload image.'), 'default', array(), 'error');
                    }
                } else {
                    if ($this->Quest->saveAll($dataToSave)) {
                        $this->Session->setFlash(__(ucfirst(strtolower($quest_type)) . ' updated successfully.'), 'default', array(), 'success');
                        $this->redirect(array('controller' => 'app_admin', 'action' => 'quest', '?' => array('qt' => $qt)));
                    } else {
                        $this->Session->setFlash(__('Sorry, ' . ucfirst(strtolower($quest_type)) . ' could not updated.'), 'default', array(), 'error');
                    }
                }
            } else {
                $this->request->data = $this->Quest->find("first",
                    array(
                        "conditions" => array("Quest.id" => $id),
                        "contain" => false,
                    )
                );
                //pr($this->request->data);die;
                if (empty($this->request->data)) {
                    $this->Session->setFlash(__('Sorry, ' . ucfirst(strtolower($quest_type)) . ' was not found.'), 'default', array(), 'error');
                    $this->redirect(array('controller' => 'app_admin', 'action' => 'quest', '?' => array('qt' => $qt)));

                }
            }
        } else {
            exit();
        }


        $questCategory = $this->QuestCategory->find('list', array('conditions' => array('QuestCategory.status' => 'ACTIVE')));
        $channels = $this->Channel->find('list', array('fields' => array('Channel.id', 'Channel.channel_name'), 'conditions' => array('Channel.user_id' => $login['id'])));
        $this->set(compact('questCategory', 'channels'));
    }

    public function delete_quest($id = null)
    {
        $quest_id = base64_decode($id);
        $login = $this->Session->read('Auth.User.User');
        $quest_data = $this->Quest->find("first",
            array(
                "conditions" => array("Quest.id" => $quest_id),
                "contain" => false,
            )
        );

        if (!empty($quest_data)) {
            $q = $this->Quest->delete(array('Quest.id' => $quest_id));
            $ql = $this->QuestLike->deleteAll(array('QuestLike.quest_id' => $quest_id));
            $qr = $this->QuestReply->deleteAll(array('QuestReply.quest_id' => $quest_id));
            $qrt = $this->QuestReplyThank->deleteAll(array('QuestReplyThank.quest_id' => $quest_id));
            $qs = $this->QuestShare->deleteAll(array('QuestShare.quest_id' => $quest_id));
            $cm = $this->ChannelMessage->deleteAll(array(
                'ChannelMessage.message_id' => $quest_id,
                'ChannelMessage.post_type_status' => $quest_data['Quest']['type']
            ));
            $cm = $this->MessageAction->deleteAll(array(
                'MessageAction.message_id' => $quest_id,
                'MessageAction.list_message_type' => $quest_data['Quest']['type']
            ));
            $cm = $this->MessageStatic->deleteAll(array(
                'MessageStatic.message_id' => $quest_id,
                'MessageStatic.list_message_type' => $quest_data['Quest']['type']
            ));
            if ($q) {
                $this->Session->setFlash(__(ucfirst(strtolower($quest_data['Quest']['type'])) . ' deleted successfully.'), 'default', array(), 'success');
                $this->redirect(array('controller' => 'app_admin', 'action' => 'quest', "?" => array('qt' => base64_encode($quest_data['Quest']['type']))));
            } else {
                $this->Session->setFlash(__('Sorry, ' . ucfirst(strtolower($quest_data['Quest']['type'])) . ' could  not deleted.'), 'default', array(), 'error');
                $this->redirect(array('controller' => 'app_admin', 'action' => 'quest', "?" => array('qt' => base64_encode($quest_data['Quest']['type']))));
            }

        } else {
            //$this->Session->setFlash(__('Invalid record.'), 'default', array(), 'warning');
            $this->redirect(array('controller' => 'app_admin', 'action' => 'quest', "?" => array('qt' => base64_encode($quest_data['Quest']['type']))));
        }

    }

    public function search_permit_quest()
    {
        $reqData = $this->request->query;
        $pram = array();
        if (!empty($reqData['quest_category'])) {
            $pram['c'] = $reqData['quest_category'];
        }
        if (!empty($reqData['title'])) {
            $pram['t'] = $reqData['title'];
        }
        if (!empty($reqData['qt'])) {
            $pram['qt'] = $reqData['qt'];
        }
        $this->redirect(
            array(
                "controller" => "app_admin",
                "action" => "permit_quest",
                "?" => $pram,
            )
        );
    }

    public function permit_quest()
    {

        $login = $this->Session->read('Auth.User.User');
        if (!$this->Custom->check_app_enable_permission($login['thinapp_id'], "QUEST_BUY_SELL")) {
            $this->redirect(array('controller' => 'app_admin', 'action' => 'dashboard'));
        }


        $searchData = $this->request->query;
        $quest_type = strtoupper(base64_decode($searchData['qt']));
        $conditions = array();
        $type_list = $this->Custom->get_enum_values('Quest', 'quests', 'type');
        if (!empty($quest_type) && in_array($quest_type, $type_list)) {
            if (isset($searchData['c']) && !empty($searchData['c'])) {
                $this->request->data['Search']['quest_category'] = $searchData['c'];
                $conditions["Quest.quest_category_id"] = $searchData['c'];
            }
            if (isset($searchData['t']) && !empty($searchData['t'])) {
                $this->request->data['Search']['title'] = $searchData['t'];
                $conditions["Quest.question LIKE"] = "%" . $searchData['t'] . "%";
            }
            $mbroacast_app_id = MBROADCAST_APP_ID;
            if ($login['thinapp_id'] == $mbroacast_app_id) {
                $conditions["OR"] = array(
                    "Quest.thinapp_id" => $login['thinapp_id'],
                    "Quest.show_on_mbroadcast" => "YES"
                );
            } else {
                $conditions["Quest.thinapp_id"] = $login['thinapp_id'];
            }


            $conditions["Quest.type"] = $quest_type;
            $conditions["Channel.status"] = "Y";
            $this->paginate = array(
                'fields' => array('Quest.*', 'QuestCategory.*'),
                'conditions' => $conditions,
                'contain' => array('QuestCategory', 'Channel'),
                'order' => 'Quest.id DESC',
                'limit' => WEB_PAGINATION_LIMIT
            );
            $quest = $this->paginate('Quest');
            $questCategory = $this->QuestCategory->find('list', array('conditions' => array('QuestCategory.status' => 'ACTIVE')));
            $this->set(compact('quest', 'questCategory'));
        } else {
            exit();
        }


    }

    public function change_quest_factory_publish_status()
    {
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $response = array();
            $questID = $this->request->data['questID'];
            $questData = $this->Quest->find("first",
                array(
                    "fields" => array('Quest.factory_publish_status', 'Quest.id'),
                    "conditions" => array("Quest.id" => $questID),
                    "contain" => false,
                )
            );

            $statusToChange = ($questData['Quest']['factory_publish_status'] != 'APPROVED') ? 'APPROVED' : 'PENDING';
            $questData['Quest']['factory_publish_status'] = $statusToChange;
            if ($this->Quest->save($questData)) {
                $response['status'] = 1;
                $response['text'] = $statusToChange;
            } else {
                $response['status'] = 0;
            }

            $response = json_encode($response, true);
            echo $response;
            exit();
        }
    }






    /*****QUEST END HERE*****/


    /*****BUY, BORROW & RENT START HERE*****/

    public function search_buy()
    {
        $reqData = $this->request->query;
        $pram = array();
        if (!empty($reqData['quest_category'])) {
            $pram['c'] = $reqData['quest_category'];
        }
        $this->redirect(
            array(
                "controller" => "app_admin",
                "action" => "buy",
                "?" => $pram,
            )
        );
    }

    public function buy()
    {
        $login = $this->Session->read('Auth.User.User');

        if (!$this->Custom->check_app_enable_permission($login['thinapp_id'], "QUEST_BUY_SELL")) {
            $this->redirect(array('controller' => 'app_admin', 'action' => 'dashboard'));
        }

        $searchData = $this->request->query;
        $conditions = array();


        if (isset($searchData['c']) && !empty($searchData['c'])) {
            $this->request->data['Search']['quest_category'] = $searchData['c'];
            $conditions["Quest.quest_category_id"] = $searchData['c'];
        }
        $conditions["Quest.user_id"] = $login['id'];
        $conditions["Quest.type !="] = 'QUEST';
        $this->paginate = array(
            'fields' => array('Quest.*', 'QuestCategory.*'),
            'conditions' => $conditions,
            'contain' => array('QuestCategory'),
            'order' => 'Quest.id DESC',
            'limit' => WEB_PAGINATION_LIMIT
        );
        $quest = $this->paginate('Quest');

        $questCategory = $this->QuestCategory->find('list', array('conditions' => array('QuestCategory.status' => 'ACTIVE')));

        $this->set(compact('quest', 'questCategory'));
    }

    public function change_buy_status()
    {
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $response = array();
            $questID = $this->request->data['questID'];
            $questData = $this->Quest->find("first",
                array(
                    "fields" => array('Quest.status', 'Quest.id'),
                    "conditions" => array("Quest.id" => $questID),
                    "contain" => false,
                )
            );
            $statusToChange = ($questData['Quest']['status'] == 'ACTIVE') ? 'INACTIVE' : 'ACTIVE';
            $questData['Quest']['status'] = $statusToChange;
            if ($this->Quest->save($questData)) {
                $response['status'] = 1;
                $response['text'] = $statusToChange;
            } else {
                $response['status'] = 0;
            }
            $response = json_encode($response, true);
            echo $response;
            exit();
        }
    }

    public function view_buy()
    {
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $response = array();
            $questID = $this->request->data['questID'];
            $rowData = $this->Quest->find("first",
                array(
                    "fields" => array('Quest.*', 'User.mobile', 'Thinapp.name', 'QuestCategory.name', 'Channel.channel_name'),
                    "conditions" => array("Quest.id" => $questID),
                    "contain" => array('User', 'Thinapp', 'QuestCategory', 'Channel'),
                )
            );

            if (!empty($rowData)) {
                $response['status'] = '1';
                $html = "<tr><td>Question:</td><td>" . $rowData['Quest']['question'] . "</td></tr>";
                if (!empty($rowData['Quest']['image'])) {
                    $html .= "<tr><td>Image:</td><td><img src='" . $rowData['Quest']['image'] . "' style='width:150px;'> </td></tr>";
                }
                $html .= "<tr><td>Category:</td><td>" . $rowData['QuestCategory']['name'] . "</td></tr>";
                $html .= "<tr><td>Post As Anonymous:</td><td>" . $rowData['Quest']['post_as_anonymous'] . "</td></tr>";
                $html .= "<tr><td>Total Likes:</td><td>" . $rowData['Quest']['like_count'] . "</td></tr>";
                $html .= "<tr><td>Total Shares:</td><td>" . $rowData['Quest']['share_count'] . "</td></tr>";
                $html .= "<tr><td>Share On:</td><td>" . $rowData['Quest']['share_on'] . "</td></tr>";
                if ($rowData['Quest']['channel_id'] > 0) {
                    $html .= "<tr><td>Share Channel:</td><td>" . $rowData['Channel']['channel_name'] . "</td></tr>";
                }
                $html .= "<tr><td>Show On Mbroadcast:</td><td>" . $rowData['Quest']['show_on_mbroadcast'] . "</td></tr>";
                $html .= "<tr><td>Enable Chat:</td><td>" . $rowData['Quest']['enable_chat'] . "</td></tr>";
                if ($rowData['Quest']['show_on_mbroadcast'] == 'YES') {
                    $html .= "<tr><td>Mbroadcast Publish Status:</td><td>" . $rowData['Quest']['mbroadcast_publish_status'] . "</td></tr>";
                }

                if ($rowData['Quest']['share_on'] == 'QUEST_FACTORY') {
                    $html .= "<tr><td>Factory Publish Status:</td><td>" . $rowData['Quest']['factory_publish_status'] . "</td></tr>";
                }
                $html .= "<tr><td>User:</td><td>" . $rowData['User']['mobile'] . "</td></tr>";
                $html .= "<tr><td>Thin App:</td><td>" . $rowData['Thinapp']['name'] . "</td></tr>";
                $html .= "<tr><td>Status:</td><td>" . $rowData['Quest']['status'] . "</td></tr>";
                $html .= "<tr><td>Created:</td><td>" . date('d-M-Y H:i:s', strtotime($rowData['Quest']['created'])) . "</td></tr>";
                $response['html'] = $html;
            } else {
                $response['status'] = '0';
            }

            $response = json_encode($response, true);
            echo $response;
            exit();
        }
    }

    public function view_buy_result()
    {
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $response = array();
            $questID = $this->request->data['questID'];
            $rowData = $this->Quest->find('first', array(
                'conditions' => array('Quest.id' => $questID),
                'contain' => array('QuestReply' => array('User')),
            ));

            $dataToSend = array();
            $dataToSend['Quest']['question'] = $rowData['Quest']['question'];
            $dataToSend['Quest']['like_count'] = $rowData['Quest']['like_count'];
            $dataToSend['Quest']['share_count'] = $rowData['Quest']['share_count'];
            $dataToSend['QuestReply'] = array();
            foreach ($rowData['QuestReply'] as $key => $value) {
                $dataToSend['QuestReply'][$key]['id'] = base64_encode($value['id']);
                $dataToSend['QuestReply'][$key]['message'] = $value['message'];
                $dataToSend['QuestReply'][$key]['status'] = $value['status'];
                $dataToSend['QuestReply'][$key]['thank_count'] = $value['thank_count'];
                $dataToSend['QuestReply'][$key]['User'] = $value['User']['mobile'];
            }


            if (!empty($dataToSend)) {
                $response['status'] = '1';

                $response['data'] = $dataToSend;
            } else {
                $response['status'] = '0';
            }

            $response = json_encode($response, true);
            echo $response;
            exit();
        }
    }

    public function change_buy_reply_status()
    {
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $response = array();
            $questReplyID = base64_decode($this->request->data['questReplyID']);
            $questReplyData = $this->QuestReply->find("first",
                array(
                    "fields" => array('QuestReply.status', 'QuestReply.id'),
                    "conditions" => array("QuestReply.id" => $questReplyID),
                    "contain" => false,
                )
            );
            $statusToChange = ($questReplyData['QuestReply']['status'] == 'ACTIVE') ? 'INACTIVE' : 'ACTIVE';
            $questReplyData['QuestReply']['status'] = $statusToChange;
            if ($this->QuestReply->save($questReplyData)) {
                $response['status'] = 1;
                $response['text'] = $statusToChange;
            } else {
                $response['status'] = 0;
            }
            $response = json_encode($response, true);
            echo $response;
            exit();
        }
    }

    public function add_buy()
    {

        $login = $this->Session->read('Auth.User.User');
        if (!$this->Custom->check_app_enable_permission($login['thinapp_id'], "QUEST_BUY_SELL")) {
            $this->redirect(array('controller' => 'app_admin', 'action' => 'dashboard'));
        }


        if ($this->request->is(array('post', 'put'))) {
            $dataToSave = $this->request->data;
            $dataToSave['Quest']['user_id'] = $login['id'];
            $dataToSave['Quest']['thinapp_id'] = $login['thinapp_id'];
            $image = $dataToSave['Quest']['image'];
            unset($dataToSave['Quest']['image']);
            if (!empty($image['tmp_name'])) {
                $mimeAarray = array('image/png', 'image/jpeg', 'image/jpeg', 'image/jpeg', 'image/gif', 'image/bmp');
                if (in_array($image['type'], $mimeAarray)) {
                    if ($url = $this->Custom->uploadFileToAws($image)) {
                        $dataToSave['Quest']['image'] = $url;
                        if ($this->Quest->saveAll($dataToSave)) {
                            $this->Session->setFlash(__('Added successfully.'), 'default', array(), 'success');
                            $this->redirect(array('controller' => 'app_admin', 'action' => 'buy'));
                        } else {
                            $this->Session->setFlash(__('Sorry, could not be added.'), 'default', array(), 'error');
                        }
                    } else {
                        $this->Session->setFlash(__('Could not upload image.'), 'default', array(), 'error');
                    }
                } else {
                    $this->Session->setFlash(__('Please upload image.'), 'default', array(), 'error');
                }
            } else {
                if ($this->Quest->saveAll($dataToSave)) {
                    $this->Session->setFlash(__('Added successfully.'), 'default', array(), 'success');
                    $this->redirect(array('controller' => 'app_admin', 'action' => 'buy'));
                } else {
                    $this->Session->setFlash(__('Sorry, Could not be added.'), 'default', array(), 'error');
                }
            }

        }
        $questCategory = $this->QuestCategory->find('list', array('conditions' => array('QuestCategory.status' => 'ACTIVE')));
        $channels = $this->Channel->find('list', array('fields' => array('Channel.id', 'Channel.channel_name'), 'conditions' => array('Channel.user_id' => $login['id'])));
        $this->set(compact('questCategory', 'channels'));
    }

    public function edit_buy($id = null)
    {
        $id = base64_decode($id);
        $login = $this->Session->read('Auth.User.User');
        if (!$this->Custom->check_app_enable_permission($login['thinapp_id'], "QUEST_BUY_SELL")) {
            $this->redirect(array('controller' => 'app_admin', 'action' => 'dashboard'));
        }

        if ($this->request->is(array('post', 'put'))) {
            $dataToSave = $this->request->data;
            $dataToSave['Quest']['user_id'] = $login['id'];
            $dataToSave['Quest']['id'] = $id;
            $dataToSave['Quest']['thinapp_id'] = $login['thinapp_id'];
            $image = $dataToSave['Quest']['image'];
            unset($dataToSave['Quest']['image']);
            if (!empty($image['tmp_name'])) {
                $mimeAarray = array('image/png', 'image/jpeg', 'image/jpeg', 'image/jpeg', 'image/gif', 'image/bmp');
                if (in_array($image['type'], $mimeAarray)) {
                    if ($url = $this->Custom->uploadFileToAws($image)) {
                        $dataToSave['Quest']['image'] = $url;
                        if ($this->Quest->saveAll($dataToSave)) {
                            $this->Session->setFlash(__('Updated successfully.'), 'default', array(), 'success');
                            $this->redirect(array('controller' => 'app_admin', 'action' => 'buy'));
                        } else {
                            $this->Session->setFlash(__('Sorry, Could not updated.'), 'default', array(), 'error');
                        }
                    } else {
                        $this->Session->setFlash(__('Could not upload image.'), 'default', array(), 'error');
                    }
                } else {
                    $this->Session->setFlash(__('Please upload image.'), 'default', array(), 'error');
                }
            } else {
                if ($this->Quest->saveAll($dataToSave)) {
                    $this->Session->setFlash(__('Updated successfully.'), 'default', array(), 'success');
                    $this->redirect(array('controller' => 'app_admin', 'action' => 'buy'));
                } else {
                    $this->Session->setFlash(__('Sorry, Could not be updated.'), 'default', array(), 'error');
                }
            }
        } else {
            $this->request->data = $this->Quest->findById($id);
            if (empty($this->request->data)) {
                $this->Session->setFlash(__('Sorry, Quest was not found.'), 'default', array(), 'error');
                $this->redirect(array('controller' => 'app_admin', 'action' => 'buy'));
                return false;
            }
        }
        $questCategory = $this->QuestCategory->find('list', array('conditions' => array('QuestCategory.status' => 'ACTIVE')));
        $channels = $this->Channel->find('list', array('fields' => array('Channel.id', 'Channel.channel_name'), 'conditions' => array('Channel.user_id' => $login['id'])));
        $this->set(compact('questCategory', 'channels'));
    }

    public function search_permit_buy()
    {
        $reqData = $this->request->query;
        $pram = array();
        if (!empty($reqData['quest_category'])) {
            $pram['c'] = $reqData['quest_category'];
        }
        $this->redirect(
            array(
                "controller" => "app_admin",
                "action" => "permit_buy",
                "?" => $pram,
            )
        );
    }

    public function permit_buy()
    {
        $login = $this->Session->read('Auth.User.User');
        if (!$this->Custom->check_app_enable_permission($login['thinapp_id'], "QUEST_BUY_SELL")) {
            $this->redirect(array('controller' => 'app_admin', 'action' => 'dashboard'));
        }

        $searchData = $this->request->query;
        $conditions = array();
        if (isset($searchData['c']) && !empty($searchData['c'])) {
            $this->request->data['Search']['quest_category'] = $searchData['c'];
            $conditions["Quest.quest_category_id"] = $searchData['c'];
        }
        $conditions["Quest.thinapp_id"] = $login['thinapp_id'];
        $conditions["Quest.factory_publish_status"] = 'YES';
        $conditions["Quest.type !="] = 'QUEST';
        $this->paginate = array(
            'fields' => array('Quest.*', 'QuestCategory.*'),
            'conditions' => $conditions,
            'contain' => array('QuestCategory'),
            'order' => 'Quest.id DESC',
            'limit' => WEB_PAGINATION_LIMIT
        );
        $quest = $this->paginate('Quest');

        $questCategory = $this->QuestCategory->find('list', array('conditions' => array('QuestCategory.status' => 'ACTIVE')));

        $this->set(compact('quest', 'questCategory'));
    }

    public function change_buy_factory_publish_status()
    {
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $response = array();
            $questID = $this->request->data['questID'];
            $questData = $this->Quest->find("first",
                array(
                    "fields" => array('Quest.factory_publish_status', 'Quest.id'),
                    "conditions" => array("Quest.id" => $questID),
                    "contain" => false,
                )
            );

            $statusToChange = ($questData['Quest']['factory_publish_status'] != 'APPROVED') ? 'APPROVED' : 'PENDING';
            $questData['Quest']['factory_publish_status'] = $statusToChange;
            if ($this->Quest->save($questData)) {
                $response['status'] = 1;
                $response['text'] = $statusToChange;
            } else {
                $response['status'] = 0;
            }

            $response = json_encode($response, true);
            echo $response;
            exit();
        }
    }

    /*****BUY, BORROW & RENT END HERE*****/


    /********SELL START HERE********/

    public function search_sell()
    {
        $reqData = $this->request->query;
        $pram = array();
        if (!empty($reqData['sell_category'])) {
            $pram['s'] = $reqData['sell_category'];
        }
        $this->redirect(
            array(
                "controller" => "app_admin",
                "action" => "sell",
                "?" => $pram,
            )
        );
    }

    public function sell()
    {
        $login = $this->Session->read('Auth.User.User');
        if (!$this->Custom->check_app_enable_permission($login['thinapp_id'], "QUEST_BUY_SELL")) {
            $this->redirect(array('controller' => 'app_admin', 'action' => 'dashboard'));
        }


        $searchData = $this->request->query;
        $conditions = array();

        if (isset($searchData['s']) && !empty($searchData['s'])) {
            $this->request->data['Search']['sell_category'] = $searchData['s'];
            $conditions["SellItem.sell_item_category_id"] = $searchData['s'];
        }


        $conditions = array();
        $mbroadcast_app_id = MBROADCAST_APP_ID;
        $thin_app_id = $login['thinapp_id'];
        if ($thin_app_id == $mbroadcast_app_id) {
            $conditions = array(
                'OR' => array(
                    array(
                        'SellItem.show_on_mbroadcast' => 'YES',
                        'SellItem.mbroadcast_publish_status' => 'APPROVED',
                        'SellItem.status' => 'ACTIVE',
                    ),
                    'SellItem.thinapp_id' => $thin_app_id
                )
            );

        } else {
            $conditions = array(
                'OR' => array(
                    array(
                        'SellItem.thinapp_id' => $thin_app_id,
                        'SellItem.show_on_mbroadcast' => 'YES',
                        'SellItem.mbroadcast_publish_status' => 'APPROVED',
                        'SellItem.status' => 'ACTIVE',
                    ),
                    array(
                        'SellItem.thinapp_id' => $thin_app_id,
                        'SellItem.status' => 'ACTIVE',
                        'SellItem.factory_publish_status' => 'APPROVED'
                    )
                )
            );
        }


        //$conditions["SellItem.user_id"] = $login['id'];

        $this->paginate = array(
            'fields' => array('SellItem.id', 'SellItem.user_id', 'SellItem.item_name', 'SellItem.price', 'SellItem.status', 'User.mobile', 'SellItemCategory.name',),
            'conditions' => $conditions,
            'contain' => array('User', 'SellItemCategory',),
            'order' => 'SellItem.id DESC',
            'limit' => WEB_PAGINATION_LIMIT
        );
        $sellItems = $this->paginate('SellItem');
        $sellItemCategory = $this->SellItemCategory->find('list', array('conditions' => array('SellItemCategory.status' => 'ACTIVE')));
        $this->set(compact('sellItems', 'sellItemCategory'));
    }

    public function change_sell_status()
    {
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $response = array();
            $sellID = $this->request->data['sellID'];
            $sellItemData = $this->SellItem->find("first",
                array(
                    "fields" => array('SellItem.status', 'SellItem.id'),
                    "conditions" => array("SellItem.id" => $sellID),
                    "contain" => false,
                )
            );
            $statusToChange = ($sellItemData['SellItem']['status'] == 'ACTIVE') ? 'INACTIVE' : 'ACTIVE';
            $sellItemData['SellItem']['status'] = $statusToChange;
            if ($this->SellItem->save($sellItemData)) {
                $response['status'] = 1;
                $response['text'] = $statusToChange;
            } else {
                $response['status'] = 0;
            }
            $response = json_encode($response, true);
            echo $response;
            exit();
        }
    }

    public function view_sell()
    {
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $response = array();
            $sellID = $this->request->data['sellID'];
            $rowData = $this->SellItem->find("first",
                array(
                    "fields" => array('SellItem.*', 'User.mobile', 'Thinapp.name', 'SellItemCategory.name', 'Channel.channel_name'),
                    "conditions" => array("SellItem.id" => $sellID),
                    "contain" => array('User', 'Thinapp', 'SellItemCategory', 'Channel'),
                )
            );
            if (!empty($rowData)) {
                $response['status'] = '1';
                $html = "<tr><td>Item Name:</td><td>" . $rowData['SellItem']['item_name'] . "</td></tr>";
                $html .= "<tr><td>Category:</td><td>" . $rowData['SellItemCategory']['name'] . "</td></tr>";
                $html .= "<tr><td>Share On:</td><td>" . $rowData['SellItem']['share_on'] . "</td></tr>";
                if ($rowData['SellItem']['channel_id'] > 0) {
                    $html .= "<tr><td>Share Channel:</td><td>" . $rowData['Channel']['channel_name'] . "</td></tr>";
                }
                $html .= "<tr><td>Show On Mbroadcast:</td><td>" . $rowData['SellItem']['show_on_mbroadcast'] . "</td></tr>";
                $html .= "<tr><td>Enable Chat:</td><td>" . $rowData['SellItem']['enable_chat'] . "</td></tr>";
                if ($rowData['SellItem']['show_on_mbroadcast'] == 'YES') {
                    $html .= "<tr><td>Mbroadcast Publish Status:</td><td>" . $rowData['SellItem']['mbroadcast_publish_status'] . "</td></tr>";
                }

                if ($rowData['SellItem']['share_on'] == 'QUEST_FACTORY') {
                    $html .= "<tr><td>Factory Publish Status:</td><td>" . $rowData['SellItem']['factory_publish_status'] . "</td></tr>";
                }
                $html .= "<tr><td>User:</td><td>" . $rowData['User']['mobile'] . "</td></tr>";
                $html .= "<tr><td>Thin App:</td><td>" . $rowData['Thinapp']['name'] . "</td></tr>";
                $html .= "<tr><td>Status:</td><td>" . $rowData['SellItem']['status'] . "</td></tr>";
                $html .= "<tr><td>Created:</td><td>" . date('d-M-Y H:i:s', strtotime($rowData['SellItem']['created'])) . "</td></tr>";
                $response['html'] = $html;
            } else {
                $response['status'] = '0';
            }

            $response = json_encode($response, true);
            echo $response;
            exit();
        }
    }

    public function sell_images($sellID = null)
    {
        $sellID = base64_decode($sellID);
        $sellImages = $this->SellItem->find('first', array(
            'fields' => array('SellItem.id', 'SellItem.item_name'),
            'conditions' => array('SellItem.id' => $sellID),
            'contain' => array('SellImage')
        ));
        if (empty($sellImages)) {
            $this->Session->setFlash(__('Sorry, Sell item was not found.'), 'default', array(), 'error');
            $this->redirect(array('controller' => 'app_admin', 'action' => 'sell'));
            return false;
        }
        $this->set(compact('sellImages'));

    }

    public function change_sell_image_status()
    {
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $response = array();
            $sellImageID = $this->request->data['sellImageID'];
            $sellImageData = $this->SellImage->find("first",
                array(
                    "fields" => array('SellImage.status', 'SellImage.id'),
                    "conditions" => array("SellImage.id" => $sellImageID),
                    "contain" => false,
                )
            );
            $statusToChange = ($sellImageData['SellImage']['status'] == 'ACTIVE') ? 'INACTIVE' : 'ACTIVE';
            $sellImageData['SellImage']['status'] = $statusToChange;
            if ($this->SellImage->save($sellImageData)) {
                $response['status'] = 1;
                $response['text'] = $statusToChange;
            } else {
                $response['status'] = 0;
            }
            $response = json_encode($response, true);
            echo $response;
            exit();
        }
    }

    public function search_permit_sell()
    {
        $reqData = $this->request->query;
        $pram = array();
        if (!empty($reqData['sell_category'])) {
            $pram['s'] = $reqData['sell_category'];
        }
        $this->redirect(
            array(
                "controller" => "app_admin",
                "action" => "permit_sell",
                "?" => $pram,
            )
        );
    }

    public function permit_sell()
    {

        $login = $this->Session->read('Auth.User.User');
        if (!$this->Custom->check_app_enable_permission($login['thinapp_id'], "QUEST_BUY_SELL")) {
            $this->redirect(array('controller' => 'app_admin', 'action' => 'dashboard'));
        }


        $searchData = $this->request->query;
        $conditions = array();
        if (isset($searchData['s']) && !empty($searchData['s'])) {
            $this->request->data['Search']['sell_category'] = $searchData['s'];
            $conditions["SellItem.sell_item_category_id"] = $searchData['s'];
        }
        $conditions["SellItem.thinapp_id"] = $login['thinapp_id'];
        $conditions["SellItem.factory_publish_status"] = 'YES';

        $this->paginate = array(
            'fields' => array('SellItem.id', 'SellItem.item_name', 'SellItem.mbroadcast_publish_status', 'SellItem.price', 'SellItem.status', 'User.mobile', 'SellItemCategory.name',),
            'conditions' => $conditions,
            'contain' => array('User', 'SellItemCategory',),
            'order' => 'SellItem.id DESC',
            'limit' => WEB_PAGINATION_LIMIT
        );

        $sellItems = $this->paginate('SellItem');
        $sellItemCategory = $this->SellItemCategory->find('list', array('conditions' => array('SellItemCategory.status' => 'ACTIVE')));
        $this->set(compact('sellItems', 'sellItemCategory'));

    }

    public function change_sell_mbroadcast_publish_status()
    {
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $response = array();
            $sellID = $this->request->data['sellID'];
            $sellData = $this->SellItem->find("first",
                array(
                    "fields" => array('SellItem.mbroadcast_publish_status', 'SellItem.id'),
                    "conditions" => array("SellItem.id" => $sellID),
                    "contain" => false,
                )
            );

            $statusToChange = ($sellData['SellItem']['mbroadcast_publish_status'] != 'APPROVED') ? 'APPROVED' : 'PENDING';
            $sellData['SellItem']['mbroadcast_publish_status'] = $statusToChange;
            if ($this->SellItem->save($sellData)) {
                $response['status'] = 1;
                $response['text'] = $statusToChange;
            } else {
                $response['status'] = 0;
            }

            $response = json_encode($response, true);
            echo $response;
            exit();
        }
    }

    public function permit_sell_images($sellID = null)
    {
        $sellID = base64_decode($sellID);
        $sellImages = $this->SellItem->find('first', array(
            'fields' => array('SellItem.id', 'SellItem.item_name'),
            'conditions' => array('SellItem.id' => $sellID),
            'contain' => array('SellImage')
        ));
        if (empty($sellImages)) {
            $this->Session->setFlash(__('Sorry, Sell item was not found.'), 'default', array(), 'error');
            $this->redirect(array('controller' => 'app_admin', 'action' => 'sell'));
            return false;
        }
        $this->set(compact('sellImages'));
    }

    public function add_sell_item()
    {
        $login = $this->Session->read('Auth.User.User');

        if (!$this->Custom->check_app_enable_permission($login['thinapp_id'], "QUEST_BUY_SELL")) {
            $this->redirect(array('controller' => 'app_admin', 'action' => 'dashboard'));
        }


        if ($this->request->is(array('post', 'put'))) {
            $dataToSave = $this->request->data;
            $dataToSave['SellItem']['user_id'] = $user_id = $login['id'];
            $dataToSave['SellItem']['thinapp_id'] = $thin_app_id = $login['thinapp_id'];
            $share_on = $dataToSave['SellItem']['share_on'];
            $description = $dataToSave['SellItem']['description'];
            $item_name = $dataToSave['SellItem']['item_name'];
            $dataToSave['SellItem']['mbroadcast_publish_status'] = "APPROVED";
            $dataToSave['SellItem']['factory_publish_status'] = "APPROVED";
            $channel_id = 0;
            if ($share_on == "CHANNEL" && !empty($dataToSave['SellItem']['channel_id'])) {
                $channel_id = $dataToSave['SellItem']['channel_id'];
            }

            $total_sms = $this->Custom->getTotalRemainingSms($thin_app_id, "T");
            $total_sub = $this->Custom->totalSmsSubscriber($channel_id, $thin_app_id);
            if (($total_sms >= $total_sub && $share_on == 'CHANNEL') || $share_on == 'SELL_FACTORY') {
                $datasource = $this->SellItem->getDataSource();
                try {
                    $datasource->begin();
                    if ($this->SellItem->saveAll($dataToSave)) {
                        $sell_id = $this->SellItem->getLastInsertId();

                        if ($share_on == "CHANNEL") {
                            $this->ChannelMessage->create();
                            $this->ChannelMessage->set('message_id', $sell_id);
                            $this->ChannelMessage->set('channel_id', $channel_id);
                            $this->ChannelMessage->set('post_type_status', 'SELL');
                            $this->MessageStatic->create();
                            $this->MessageStatic->set('message_id', $sell_id);
                            $this->MessageStatic->set('list_message_type', 'SELL');
                            if ($this->ChannelMessage->save() && $this->MessageStatic->save()) {
                                $datasource->commit();
                                /* send notification to channel subscriber*/
                                $app_name = "Mbroadcast";
                                $message = $description;
                                $sendArray = array(
                                    'thinapp_id' => $thin_app_id,
                                    'channel_id' => $channel_id,
                                    'sell_id' => $sell_id,
                                    'thinapp_id' => $thin_app_id,
                                    'flag' => 'NEW_QUEST',
                                    'title' => strtoupper($app_name),
                                    'message' => mb_strimwidth("Sell - " . $message, 0, 50, '...'),
                                    'description' => mb_strimwidth($description, 0, 100, '...'),
                                    'chat_reference' => '',
                                    'module_type' => 'SELL',
                                    'module_type_id' => $sell_id,
                                    'firebase_reference' => ""
                                );
                                $this->Custom->send_topic_notification($sendArray);
                                /* ADD MESSAGE CODE FOR UNREGISTER USERS*/

                                $user_role = $this->Custom->get_user_role_id($user_id);
                                $is_permission = $this->Custom->check_user_permission($thin_app_id, 'QUEST_BUY_SELL_SEND_NOTIFICATION_VIA_SMS');
                                if ($user_role == 5 || $is_permission == "YES") {
                                    $message = $item_name . " is going to sale for buy.";
                                    $this->Custom->sendBulkSms($channel_id, $thin_app_id, $message, $sell_id, $user_id);
                                }
                                $this->Session->setFlash(__('Sell added successfully.'), 'default', array(), 'success');
                                $this->redirect(array('controller' => 'app_admin', 'action' => 'sell'));


                            } else {
                                $datasource->rollback();
                                $this->Session->setFlash(__('Sorry,Sell could be not add.'), 'default', array(), 'error');
                            }
                        } else {
                            $this->Session->setFlash(__('Sell added successfully.'), 'default', array(), 'success');
                            $this->redirect(array('controller' => 'app_admin', 'action' => 'sell'));
                        }
                    } else {
                        $this->Session->setFlash(__('Sorry,Sell could be not add.'), 'default', array(), 'error');
                    }
                } catch (Exception $e) {
                    $datasource->rollback();
                    $this->Session->setFlash(__('Sorry,Sell could be not add.'), 'default', array(), 'error');
                }

            } else {
                $this->Session->setFlash(__("Sorry, you have insufficient SMS."), 'default', array(), 'warning');
            }

        }


        $sellItemCategory = $this->SellItemCategory->find('list', array('conditions' => array('SellItemCategory.status' => 'ACTIVE')));
        $channels = $this->Channel->find('list', array('fields' => array('Channel.id', 'Channel.channel_name'), 'conditions' => array('Channel.user_id' => $login['id'])));
        $this->set(compact('sellItemCategory', 'channels'));
    }

    public function edit_sell_item($sellID = null)
    {
        $sellID = base64_decode($sellID);
        $login = $this->Session->read('Auth.User.User');
        if (!$this->Custom->check_app_enable_permission($login['thinapp_id'], "QUEST_BUY_SELL")) {
            $this->redirect(array('controller' => 'app_admin', 'action' => 'dashboard'));
        }

        if ($this->request->is(array('post', 'put'))) {
            $dataToSave = $this->request->data;
            $dataToSave['SellItem']['id'] = $sellID;

            if ($this->SellItem->saveAll($dataToSave)) {
                $this->Session->setFlash(__('Item updated successfully.'), 'default', array(), 'success');
                $this->redirect(array('controller' => 'app_admin', 'action' => 'sell'));
            } else {
                $this->Session->setFlash(__('Sorry, Could not be updated.'), 'default', array(), 'error');
            }


        } else {
            $sellItemData = $this->SellItem->find("first",
                array(
                    "fields" => array('SellItem.*'),
                    "conditions" => array("SellItem.id" => $sellID),
                    "contain" => false,
                )
            );
            $this->request->data = $sellItemData;
        }
        $sellItemCategory = $this->SellItemCategory->find('list', array('conditions' => array('SellItemCategory.status' => 'ACTIVE')));
        $channels = $this->Channel->find('list', array('fields' => array('Channel.id', 'Channel.channel_name'), 'conditions' => array('Channel.user_id' => $login['id'])));
        $this->set(compact('sellItemCategory', 'channels'));
    }

    public function update_sell_image_cover()
    {
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $response = array();
            $imageID = $this->request->data['imageID'];
            $sellItemID = $this->request->data['sellItemID'];

            $sellImageData = $this->SellImage->find("first",
                array(
                    "fields" => array('SellImage.is_cover_image', 'SellImage.id'),
                    "conditions" => array("SellImage.id" => $imageID),
                    "contain" => false,
                )
            );

            $sellImageData['SellImage']['is_cover_image'] = 'YES';

            $this->SellImage->updateAll(
                array('SellImage.is_cover_image' => "'NO'"),
                array('SellImage.sell_item_id' => $sellItemID)
            );

            if ($this->SellImage->save($sellImageData)) {
                $response['status'] = 1;
            } else {
                $response['status'] = 0;
            }

            $response = json_encode($response, true);
            echo $response;
            exit();
        }
    }

    public function upload_sell_image()
    {
        $this->autoRender = false;
        if ($this->request->is('ajax')) {

            if (isset($this->request->data['SellImage'])) {
                $data = $this->request->data['SellImage']['file'];
                $file_type = $this->request->data['SellImage']['file']['type'];
                $sellItemID = $this->request->data['SellImage']['sell_item_id'];
                $response = array();
                if (isset($data['tmp_name']) && !empty($data['tmp_name'])) {

                    $mimeAarray = array('image/png', 'image/jpeg', 'image/jpeg', 'image/jpeg', 'image/gif', 'image/bmp');
                    if (in_array($file_type, $mimeAarray)) {

                        if ($url = $this->Custom->uploadFileToAws($data)) {
                            $response["status"] = 1;
                            $response["message"] = "File uploaded successfully.";
                            $response["url"] = $url;
                            $inData = array();
                            $inData['path'] = $url;
                            $inData['sell_item_id'] = $sellItemID;

                            $this->SellImage->create();
                            $this->SellImage->save($inData);

                        } else {
                            $response["status"] = 0;
                            $response["message"] = "Sorry image could not be upload";
                        }

                    } else {
                        $response["status"] = 0;
                        $response["message"] = "Sorry you can upload only image";

                    }

                } else {
                    $response["status"] = 0;
                    $response["message"] = "Please upload image.";
                }
            } else {
                $response["status"] = 0;
                $response["message"] = "Sorry image could not post.";
            }
            return json_encode($response);
        } else {
            exit();
        }
    }


    public function delete_sell($id = null)
    {
        $sell_id = base64_decode($id);
        $login = $this->Session->read('Auth.User.User');
        if (!$this->Custom->check_app_enable_permission($login['thinapp_id'], "QUEST_BUY_SELL")) {
            $this->redirect(array('controller' => 'app_admin', 'action' => 'dashboard'));
        }

        $quest_data = $this->SellItem->find("first",
            array(
                "conditions" => array("SellItem.id" => $sell_id),
                "contain" => false,
            )
        );

        if (!empty($quest_data)) {

            $q = $this->SellItem->delete(array('SellItem.id' => $sell_id));
            $ql = $this->SellImage->deleteAll(array('SellImage.sell_item_id' => $sell_id));
            $qr = $this->SellWishlist->deleteAll(array('SellWishlist.sell_item_id' => $sell_id));
            $cm = $this->ChannelMessage->deleteAll(array(
                'ChannelMessage.message_id' => $sell_id,
                'ChannelMessage.post_type_status' => 'SELL'
            ));

            $cm = $this->MessageAction->deleteAll(array(
                'MessageAction.message_id' => $sell_id,
                'MessageAction.list_message_type' => 'SELL'
            ));
            $cm = $this->MessageStatic->deleteAll(array(
                'MessageStatic.message_id' => $sell_id,
                'MessageStatic.list_message_type' => 'SELL'
            ));


            if ($q) {
                $this->Session->setFlash(__('Sell deleted successfully.'), 'default', array(), 'success');
                $this->redirect(array('controller' => 'app_admin', 'action' => 'sell'));
            } else {
                $this->Session->setFlash(__('Sorry, sell could  not deleted.'), 'default', array(), 'error');
                $this->redirect(array('controller' => 'app_admin', 'action' => 'sell'));
            }

        } else {
            //$this->Session->setFlash(__('Invalid record.'), 'default', array(), 'warning');
            $this->redirect(array('controller' => 'app_admin', 'action' => 'sell'));
        }

    }


    /********SELL END HERE********/


    public function view_ticket_history()
    {
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $response = array();
            $ticketID = $this->request->data['ticketID'];
            $ticketData = $this->TicketComment->find("all",
                array(
                    "conditions" => array("TicketComment.ticket_id" => $ticketID),
                    "fields" => array('TicketComment.*', 'AppAdmin.username'),
                    "contain" => array('AppAdmin'),
                )
            );
            $response = "<tr><th>#</th></th><th>Status</th><th>Comment</th><th>Created By</th><th>Created</th></tr>";
            if (empty($ticketData)) {
                $response = "<tr><th>No record available.</th></tr>";
            } else {
                $n = 1;
                foreach ($ticketData as $value) {
                    $response .= "<tr><td>" . $n++ . "</td><td>" . $value['TicketComment']['ticket_status'] . "</td><td>" . $value['TicketComment']['comment'] . "</td><td>" . $value['AppAdmin']['username'] . "</td><td>" . date("d-M-Y", strtotime($value['TicketComment']['created'])) . "</td></tr>";
                }

            }


            echo $response;
            die;
        }
    }

    public function chang_subscribe_id()
    {
        $this->autoRender = false;
        if ($this->request->is('ajax')) {

            $login = $this->Session->read('Auth.User');

            $response = array();
            $subscriberID = base64_decode($this->request->data['subscriberID']);
            $is_new = $this->request->data['is_new'];
            $channel_id = base64_decode($this->request->data['channel_id']);
            $background = array();

            if ($is_new == 1) {

                $data = $this->Channel->find('first', array(
                    'conditions' => array(
                        'Channel.id' => $channel_id
                    ),
                    'fields' => array('Channel.user_id', 'Channel.app_id', 'Channel.topic_name'),
                    'contain' => false
                ));
                $this->Subscriber->create();
                $this->Subscriber->set('channel_id', $channel_id);
                $this->Subscriber->set('user_id', $data['Channel']['user_id']);
                $this->Subscriber->set('app_user_id', $login['User']['id']);
                $this->Subscriber->set('name', $login['User']['username']);
                $this->Subscriber->set('mobile', $login['User']['mobile']);
                $this->Subscriber->set('app_id', $login['User']['thinapp_id']);
                $this->Subscriber->set('status', 'SUBSCRIBED');
                $this->Subscriber->save();
                if ($this->Subscriber->save()) {

                    $thin_app_id = $login['User']['thinapp_id'];
                    $background['cache']['user_id'] = $login['User']['id'];

                    $background['topic']['topic_name'] = $data['Channel']['topic_name'];
                    $background['topic']['firebase_token'] = $login['User']['firebase_token'];
                    $background['topic']['type'] = 'ADD';


                    $last_inser_id = $this->Subscriber->getLastInsertId();
                    $response['status'] = 1;
                    $response['is_new'] = 0;
                    $response['text'] = "Subscribed";
                    $response['sub_id'] = base64_encode($last_inser_id);
                    $response['class'] = "btn-success";
                } else {
                    $response['status'] = 0;
                    $response['message'] = 'Sorry, Operation Failed.';
                }

            } else {
                $data = $this->Subscriber->find('first', array(
                    'conditions' => array(
                        'Subscriber.id' => $subscriberID
                    ),
                    'fields' => array('Subscriber.status', 'Subscriber.id', 'Channel.user_id', 'Channel.app_id', 'Channel.topic_name'),
                    'contain' => array('Channel')
                ));
                $statusToChange = ($data['Subscriber']['status'] == 'SUBSCRIBED') ? 'UNSUBSCRIBED' : 'SUBSCRIBED';
                $data['Subscriber']['status'] = $statusToChange;
                if ($save = $this->Subscriber->save($data)) {
                    $thin_app_id = $login['User']['thinapp_id'];
                    $background['cache']['user_id'] = $login['User']['id'];

                    $background['topic']['topic_name'] = $data['Channel']['topic_name'];
                    $background['topic']['firebase_token'] = $login['User']['firebase_token'];
                    if ($statusToChange == "SUBSCRIBED") {
                        $background['topic']['type'] = 'ADD';
                    } else {
                        $background['topic']['type'] = 'REMOVE';
                    }

                    $response['status'] = 1;
                    $response['is_new'] = 0;
                    $response['sub_id'] = base64_encode($subscriberID);
                    $response['text'] = ($statusToChange == 'UNSUBSCRIBED') ? 'Not Subscribed' : 'Subscribed';
                    $response['class'] = ($statusToChange == 'UNSUBSCRIBED') ? 'btn-warning' : 'btn-success';
                } else {
                    $response['status'] = 0;
                    $response['message'] = 'Sorry, Operation Failed.';
                }
            }


            $response = json_encode($response, true);
            echo $response;

            if (!empty($background)) {
                Custom::send_process_to_background();
                if (isset($background['cache'])) {
                    $user_id = $background['cache']['user_id'];
                    $response_data[] = WebservicesFunction::fun_get_subscriber_list($thin_app_id, $user_id, PAGINATION_LIMIT, 0);
                    WebservicesFunction::createJson('get_subscriber_list_app' . $thin_app_id . "_user" . $user_id, $response_data, 'CREATE','subscriber');
                }
                if (isset($background['topic'])) {
                    $topic_name = $background['topic']['topic_name'];
                    $user_token = $background['topic']['firebase_token'];
                    $type = $background['topic']['type'];
                    if ($type == 'ADD') {
                        Custom::add_subscribers_to_topic($topic_name, array($user_token));
                    } else {
                        Custom::remove_subscribers_from_topic($topic_name, array($user_token));
                    }
                }
            }
            exit();
        }
    }

    /*function add by mahendra*/
    public function upload()
    {
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            if (isset($this->request->data['Channel'])) {
                $data = $this->request->data['Channel']['file'];
                $file_type = $this->request->data['Channel']['file']['type'];
                $response = array();
                if (isset($data['tmp_name']) && !empty($data['tmp_name'])) {
                    $mimeAarray = array('image/png', 'image/jpeg', 'image/jpeg', 'image/jpeg', 'image/gif', 'image/bmp');
                    if (in_array($file_type, $mimeAarray)) {

                        if ($url = $this->Custom->uploadFileToAws($data)) {
                            $response["status"] = 1;
                            $response["message"] = "File uploaded successfully.";
                            $response["url"] = $url;
                        } else {
                            $response["status"] = 0;
                            $response["message"] = "Sorry file could not upload";
                        }
                    } else {
                        $response["status"] = 0;
                        $response["message"] = "Please upload image file.";
                    }

                } else {
                    $response["status"] = 0;
                    $response["message"] = "Please upload file.";
                }
            } else {
                $response["status"] = 0;
                $response["message"] = "Sorry file could not post.";
            }
            return json_encode($response);
        } else {
            exit();
        }
    }

    /*function add by mahendra*/
    public function upload_media()
    {
        $this->autoRender = false;
        if ($this->request->is('ajax')) {


            if (isset($this->request->data['Message'])) {
                $data = $this->request->data['Message']['file'];
                $file_type = $this->request->data['Message']['file']['type'];
                $message_type = $this->request->data['Message']['message_type'];
                $response = array();
                if (isset($data['tmp_name']) && !empty($data['tmp_name'])) {
                    if ($message_type == "TEXT") {
                        $response["status"] = 0;
                        $response["message"] = "Sorry you can send only text message";
                    }

                    if ($message_type == "IMAGE") {
                        $mimeAarray = array('image/png', 'image/jpeg', 'image/jpeg', 'image/jpeg', 'image/gif', 'image/bmp');
                        if (in_array($file_type, $mimeAarray)) {
                            if ($url = $this->Custom->uploadFileToAws($data)) {
                                $response["status"] = 1;
                                $response["message"] = "File uploaded successfully.";
                                $response["url"] = $url;
                            } else {
                                $response["status"] = 0;
                                $response["message"] = "Sorry file could not upload";
                            }

                        } else {
                            $response["status"] = 0;
                            $response["message"] = "Sorry invalid image format file";

                        }
                    }
                    if ($message_type == "VIDEO") {
                        $mimeAarray = array('video/mp4', 'image/ogg', 'image/wmp');
                        if (in_array($file_type, $mimeAarray)) {
                            if ($url = $this->Custom->uploadFileToAws($data)) {
                                $response["status"] = 1;
                                $response["message"] = "File uploaded successfully.";
                                $response["url"] = $url;
                            } else {
                                $response["status"] = 0;
                                $response["message"] = "Sorry file could not upload";
                            }
                        } else {
                            $response["status"] = 0;
                            $response["message"] = "Sorry invalid video format file";
                        }
                    }
                    if ($message_type == "AUDIO") {
                        $mimeAarray = array('audio/3gp', 'audio/mp3', 'audio/mpeg');
                        if (in_array($file_type, $mimeAarray)) {


                            if ($url = $this->Custom->uploadFileToAws($data)) {
                                $response["status"] = 1;
                                $response["message"] = "File uploaded successfully.";
                                $response["url"] = $url;
                            } else {
                                $response["status"] = 0;
                                $response["message"] = "Sorry file could not upload";
                            }

                        } else {
                            $response["status"] = 0;
                            $response["message"] = "Sorry invalid audio format file";
                        }
                    }
                } else {
                    $response["status"] = 0;
                    $response["message"] = "Please upload file.";
                }
            } else {
                $response["status"] = 0;
                $response["message"] = "Sorry file could not post.";
            }
            return json_encode($response);
        } else {
            exit();
        }
    }


    /*****EVENT START HERE*****/

    public function add_event()
    {

        $login = $this->Session->read('Auth.User.User');
        if (!$this->Custom->check_app_enable_permission($login['thinapp_id'], "EVENT")) {
            $this->redirect(array('controller' => 'app_admin', 'action' => 'dashboard'));
        }

        if ($this->request->is(array('post', 'put'))) {
            $datasource = $this->Channel->getDataSource();
            try {

                $dataToSave = $this->request->data;
                $channel_id = $dataToSave['channel_id'];
                $user_id = $login['User']['id'];
                $thin_app_id = $login['thinapp_id'];
                $description = $login['description'];
                $title = $login['title'];
                $total_sms = $this->Custom->getTotalRemainingSms($thin_app_id, "T");
                $total_sub = $this->Custom->totalSmsSubscriber($channel_id, $thin_app_id);
                if (($total_sms >= $total_sub && $dataToSave["share_on"] == 'CHANNEL') || $dataToSave["share_on"] == 'EVENT_FACTORY') {
                    $datasource->begin();
                    $dataToSave['Event']['user_id'] = $login['id'];
                    $dataToSave['Event']['thinapp_id'] = $login['thinapp_id'];
                    $dataToSave['Event']['start_datetime'] = $dataToSave['Event']['start_date'] . " " . $dataToSave['Event']['start_time'];
                    $dataToSave['Event']['end_datetime'] = $dataToSave['Event']['end_date'] . " " . $dataToSave['Event']['end_time'];
                    unset($dataToSave['Event']['end_date']);
                    unset($dataToSave['Event']['end_time']);
                    unset($dataToSave['Event']['start_date']);
                    unset($dataToSave['Event']['start_time']);
                    if ($dataToSave["share_on"] == "CHANNEL") {
                        if ($this->Event->save($dataToSave)) {
                            $event_id = $this->Channel->getLastInsertId();

                            $this->ChannelMessage->create();
                            $this->ChannelMessage->set('message_id', $event_id);
                            $this->ChannelMessage->set('channel_id', $channel_id);
                            $this->ChannelMessage->set('post_type_status', 'EVENT');
                            $this->MessageStatic->create();
                            $this->MessageStatic->set('message_id', $event_id);
                            $this->MessageStatic->set('list_message_type', 'EVENT');
                            if ($this->ChannelMessage->save() && $this->MessageStatic->save()) {
                                $datasource->commit();
                                $response['status'] = 1;
                                $response['message'] = "Event add successfully";
                                /* send notification to channel subscriber*/

                                $message = $description;
                                $sendArray = array(
                                    'thinapp_id' => $thin_app_id,
                                    'channel_id' => $channel_id,
                                    'event_id' => $event_id,
                                    'flag' => 'NEW_EVENT',
                                    'title' => mb_strimwidth("Event - " . $title, 0, 150, '...'),
                                    'message' => mb_strimwidth("Event - " . $title, 0, 80, '...'),
                                    'description' => mb_strimwidth($description, 0, 100, '...'),
                                    'chat_reference' => '',
                                    'module_type' => 'EVENT',
                                    'module_type_id' => $event_id,
                                    'firebase_reference' => ""
                                );
                                $this->Custom->send_topic_notification($sendArray);
                                /* ADD MESSAGE CODE FOR UNREGISTER USERS*/

                                $user_role = $this->Custom->get_user_role_id($user_id);
                                $is_permission = $this->Custom->check_user_permission($thin_app_id, 'EVENT_SEND_NOTIFICATION_VIA_SMS');
                                if ($user_role == 5 || $is_permission == "YES") {
                                    $message = $description;
                                    $this->Custom->sendBulkSms($channel_id, $thin_app_id, $message, $event_id, $user_id);
                                }

                                $this->Session->setFlash(__('Event added successfully.'), 'default', array(), 'success');
                                $this->redirect(array('controller' => 'admin', 'action' => 'event'));

                            } else {
                                $datasource->rollback();
                                $this->Session->setFlash(__('Sorry, Event could not added.'), 'default', array(), 'error');
                            }

                        } else {
                            $this->Session->setFlash(__('Sorry, Event could not added.'), 'default', array(), 'error');
                        }
                    } else {
                        if ($this->Event->saveAll($dataToSave)) {
                            $datasource->commit();
                            $this->Session->setFlash(__('Event added successfully.'), 'default', array(), 'success');
                            $this->redirect(array('controller' => 'admin', 'action' => 'event'));
                        } else {
                            $this->Session->setFlash(__('Sorry, Event could not added.'), 'default', array(), 'error');
                        }
                    }
                } else {
                    $this->Session->setFlash(__('Sorry, you have insufficient sms balance.'), 'default', array(), 'warning');
                }

            } catch (Exception $e) {
                $datasource->rollback();
                $this->Session->setFlash(__('Sorry, Event could not added.'), 'default', array(), 'error');
            }


        }
        $eventCategory = $this->EventCategory->find('list', array('conditions' => array('EventCategory.status' => 'ACTIVE')));
        $channels = $this->Channel->find('list', array('fields' => array('Channel.id', 'Channel.channel_name'), 'conditions' => array('Channel.user_id' => $login['id'])));
        $this->set(compact('eventCategory', 'channels'));
    }

    public function edit_event($id = null)
    {
        $id = base64_decode($id);
        $login = $this->Session->read('Auth.User.User');
        if (!$this->Custom->check_app_enable_permission($login['User']['thinapp_id'], "EVENT")) {
            $this->redirect(array('controller' => 'app_admin', 'action' => 'dashboard'));
        }

        if ($this->request->is(array('post', 'put'))) {
            $dataToSave = $this->request->data;
            $dataToSave['Event']['user_id'] = $login['id'];
            $dataToSave['Event']['thinapp_id'] = $login['thinapp_id'];
            $dataToSave['Event']['start_datetime'] = $dataToSave['Event']['start_date'] . " " . $dataToSave['Event']['start_time'];
            $dataToSave['Event']['end_datetime'] = $dataToSave['Event']['end_date'] . " " . $dataToSave['Event']['end_time'];
            unset($dataToSave['Event']['end_date']);
            unset($dataToSave['Event']['end_time']);
            unset($dataToSave['Event']['start_date']);
            unset($dataToSave['Event']['start_time']);
            $dataToSave['Event']['id'] = $id;
            if ($this->Event->saveAll($dataToSave)) {
                $this->Session->setFlash(__('Event updated successfully.'), 'default', array(), 'success');
                $this->redirect(array('controller' => 'admin', 'action' => 'event'));
            } else {
                $this->Session->setFlash(__('Sorry, Event could not updated.'), 'default', array(), 'error');
            }
        } else {

            $this->request->data = $this->Event->findById($id);
            if (empty($this->request->data)) {
                $this->Session->setFlash(__('Sorry, Event was not found.'), 'default', array(), 'error');
                $this->redirect(array('controller' => 'admin', 'action' => 'event'));
                return false;
            }
            $datetime = explode(' ', $this->request->data['Event']['start_datetime']);
            $this->request->data['Event']['start_date'] = $datetime[0];
            $this->request->data['Event']['start_time'] = $datetime[1];

            $datetime = explode(' ', $this->request->data['Event']['end_datetime']);
            $this->request->data['Event']['end_date'] = $datetime[0];
            $this->request->data['Event']['end_time'] = $datetime[1];

            unset($this->request->data['Event']['start_datetime']);
            unset($this->request->data['Event']['end_datetime']);
        }
        $eventCategory = $this->EventCategory->find('list', array('conditions' => array('EventCategory.status' => 'ACTIVE')));
        $channels = $this->Channel->find('list', array('fields' => array('Channel.id', 'Channel.channel_name'), 'conditions' => array('Channel.user_id' => $login['id'])));
        $this->set(compact('eventCategory', 'channels'));
    }

    public function search_event()
    {
        $reqData = $this->request->query;
        $pram = array();
        if (!empty($reqData['title'])) {
            $pram['t'] = $reqData['title'];
        }
        if (!empty($reqData['category'])) {
            $pram['c'] = $reqData['category'];
        }
        if (!empty($reqData['date'])) {
            $pram['d'] = $reqData['date'];
        }

        $this->redirect(
            array(
                "controller" => "admin",
                "action" => "event",
                "?" => $pram,
            )
        );
    }

    public function event()
    {
        $login = $this->Session->read('Auth.User.User');
        if (!$this->Custom->check_app_enable_permission($login['thinapp_id'], "EVENT")) {
            $this->redirect(array('controller' => 'app_admin', 'action' => 'dashboard'));
        }

        $searchData = $this->request->query;
        $conditions = array();

        if (isset($searchData['t']) && !empty($searchData['t'])) {
            $this->request->data['Search']['title'] = $searchData['t'];
            $conditions["Event.title LIKE"] = '%' . $searchData['t'] . '%';
        }
        if (isset($searchData['c']) && !empty($searchData['c'])) {
            $this->request->data['Search']['category'] = $searchData['c'];
            $conditions["Event.event_category_id"] = $searchData['c'];
        }
        if (isset($searchData['d']) && !empty($searchData['d'])) {
            $this->request->data['Search']['date'] = $searchData['d'];
            $conditions[] = "( Event.start_datetime <= '" . $searchData['d'] . "' AND Event.end_datetime >= '" . $searchData['d'] . "' )";
        }
        $conditions["Event.user_id"] = $login['id'];

        $this->paginate = array(
            'fields' => array('Event.id', 'Event.title', 'Event.publish_status', 'Event.start_datetime', 'Event.end_datetime', 'Event.status', 'Event.show_on_mbroadcast', 'EventCategory.title'),
            'conditions' => $conditions,
            'contain' => array('EventCategory'),
            'order' => 'Event.id DESC',
            'limit' => 10
        );
        $event = $this->paginate('Event');
        //pr($event); die;
        if ($this->request->is(array('post', 'put'))) {

            $login = $this->Session->read('Auth.User.User');
            $dataToSave = $this->request->data;
            $dataToSave['Event']['user_id'] = $login['id'];
            $dataToSave['Event']['thinapp_id'] = $login['thinapp_id'];
            $dataToSave['Event']['start_datetime'] = $dataToSave['Event']['start_date'] . " " . $dataToSave['Event']['start_time'];
            $dataToSave['Event']['end_datetime'] = $dataToSave['Event']['end_date'] . " " . $dataToSave['Event']['end_time'];
            unset($dataToSave['Event']['end_date']);
            unset($dataToSave['Event']['end_time']);
            unset($dataToSave['Event']['start_date']);
            unset($dataToSave['Event']['start_time']);

            if ($this->Event->saveAll($dataToSave)) {
                $this->Session->setFlash(__('Event added successfully.'), 'default', array(), 'success');
                $this->redirect(array('controller' => 'admin', 'action' => 'event'));
            } else {
                $this->Session->setFlash(__('Sorry, Event could not added.'), 'default', array(), 'error');
            }
        }
        $eventCategory = $this->EventCategory->find('list', array('conditions' => array('EventCategory.status' => 'ACTIVE')));

        $this->set(compact('event', 'eventCategory'));
    }

    public function change_event_status()
    {
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $response = array();
            $eventID = $this->request->data['eventID'];
            $eventData = $this->Event->find("first",
                array(
                    "fields" => array('Event.status', 'Event.id'),
                    "conditions" => array("Event.id" => $eventID),
                    "contain" => false,
                )
            );

            $statusToChange = ($eventData['Event']['status'] == 'ACTIVE') ? 'INACTIVE' : 'ACTIVE';
            $eventData['Event']['status'] = $statusToChange;
            if ($this->Event->save($eventData)) {
                $response['status'] = 1;
                $response['text'] = ($eventData['Event']['status'] == 'ACTIVE') ? 'ACTIVE' : 'INACTIVE';
            } else {
                $response['status'] = 0;
            }

            $response = json_encode($response, true);
            echo $response;
            exit();
        }
    }

    public function change_event_publish_status()
    {
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $response = array();
            $eventID = $this->request->data['eventID'];
            $eventData = $this->Event->find("first",
                array(
                    "fields" => array('Event.status', 'Event.publish_status', 'Event.id'),
                    "conditions" => array("Event.id" => $eventID),
                    "contain" => false,
                )
            );

            if ($eventData['Event']['status'] == 'ACTIVE') {
                if ($eventData['Event']['publish_status'] == 'PUBLISHED') {
                    $response['status'] = 0;
                    $response['text'] = 'PUBLISHED';
                } else {
                    $eventData['Event']['publish_status'] = 'PUBLISHED';
                    if ($this->Event->save($eventData)) {
                        $response['status'] = 1;
                        $response['text'] = 'PUBLISHED';
                    } else {
                        $response['status'] = 0;
                        $response['text'] = 'UNPUBLISHED';
                    }
                }
            } else {
                $response['status'] = 2;
                $response['text'] = $eventData['Event']['publish_status'];
            }

            $response = json_encode($response, true);
            echo $response;
            exit();
        }
    }

    public function view_event()
    {
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $response = array();
            $eventID = $this->request->data['eventID'];
            $rowData = $this->Event->find("first",
                array(
                    "fields" => array('Event.*', 'EventCategory.title'),
                    "conditions" => array("Event.id" => $eventID),
                    "contain" => array('EventCategory'),
                )
            );

            //	pr($rowData);


            if (!empty($rowData)) {
                $response['status'] = '1';

                $tags = explode(',', $rowData['Event']['tags']);
                $tags = array_map(function ($val) {
                    return '#' . $val;
                }, $tags);
                $tags = implode(',', $tags);

                $html = "<tr><td>Title:</td><td>" . $rowData['Event']['title'] . "</td></tr>";
                $html .= "<tr><td>Description:</td><td>" . $rowData['Event']['description'] . "</td></tr>";
                $html .= "<tr><td>Start at:</td><td>" . date('d-M-Y H:i:s', strtotime($rowData['Event']['start_datetime'])) . "</td></tr>";
                $html .= "<tr><td>End at:</td><td>" . date('d-M-Y H:i:s', strtotime($rowData['Event']['end_datetime'])) . "</td></tr>";
                $html .= "<tr><td>Tags:</td><td>" . $tags . "</td></tr>";
                $html .= "<tr><td>Category:</td><td>" . $rowData['EventCategory']['title'] . "</td></tr>";
                $html .= "<tr><td>Address:</td><td>" . $rowData['Event']['address'] . "</td></tr>";
                $html .= "<tr><td>Venue:</td><td>" . $rowData['Event']['venue'] . "</td></tr>";
                $html .= "<tr><td>Contact Phone:</td><td>" . $rowData['Event']['contact_phone'] . "</td></tr>";
                $html .= "<tr><td>Show On MBroadcast:</td><td>" . $rowData['Event']['show_on_mbroadcast'] . "</td></tr>";
                $html .= "<tr><td>Status:</td><td>" . $rowData['Event']['venue'] . "</td></tr>";
                $html .= "<tr><td>Created:</td><td>" . date('d-M-Y H:i:s', strtotime($rowData['Event']['created'])) . "</td></tr>";

                $response['html'] = $html;
                $response['lat'] = $rowData['Event']['latitude'];
                $response['lng'] = $rowData['Event']['longitude'];
            } else {
                $response['status'] = '0';
            }

            $response = json_encode($response, true);
            echo $response;
            exit();
        }
    }

    public function media_event($eventID = null)
    {
        $eventID = base64_decode($eventID);


        $eventMedia = $this->Event->find('first', array(
            'fields' => array('Event.id', 'Event.title'),
            'conditions' => array('Event.id' => $eventID),
            'contain' => array('EventMedia')
        ));

        if (empty($eventMedia)) {
            $this->Session->setFlash(__('Sorry, Event was not found.'), 'default', array(), 'error');
            $this->redirect(array('controller' => 'admin', 'action' => 'event'));
            return false;
        }
        $this->set(compact('eventMedia'));

    }

    public function change_event_media_status()
    {
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $response = array();
            $eventMediaID = $this->request->data['eventMediaID'];
            $eventMediaData = $this->EventMedia->find("first",
                array(
                    "fields" => array('EventMedia.status', 'EventMedia.id'),
                    "conditions" => array("EventMedia.id" => $eventMediaID),
                    "contain" => false,
                )
            );

            $statusToChange = ($eventMediaData['EventMedia']['status'] == 'ACTIVE') ? 'INACTIVE' : 'ACTIVE';
            $eventMediaData['EventMedia']['status'] = $statusToChange;
            if ($this->EventMedia->save($eventMediaData)) {
                $response['status'] = 1;
                $response['text'] = ($eventMediaData['EventMedia']['status'] == 'ACTIVE') ? 'ACTIVE' : 'INACTIVE';
            } else {
                $response['status'] = 0;
            }

            $response = json_encode($response, true);
            echo $response;
            exit();
        }
    }

    public function update_event_media_cover()
    {
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $response = array();
            $eventMediaID = $this->request->data['eventMediaID'];
            $eventID = $this->request->data['eventID'];

            $eventMediaData = $this->EventMedia->find("first",
                array(
                    "fields" => array('EventMedia.is_cover_image', 'EventMedia.id'),
                    "conditions" => array("EventMedia.id" => $eventMediaID),
                    "contain" => false,
                )
            );

            $eventMediaData['EventMedia']['is_cover_image'] = 'YES';

            $this->EventMedia->updateAll(
                array('EventMedia.is_cover_image' => "'NO'"),
                array('EventMedia.event_id' => $eventID)
            );

            if ($this->EventMedia->save($eventMediaData)) {
                $response['status'] = 1;
            } else {
                $response['status'] = 0;
            }

            $response = json_encode($response, true);
            echo $response;
            exit();
        }
    }

    public function upload_event_media()
    {
        $this->autoRender = false;
        if ($this->request->is('ajax')) {


            if (isset($this->request->data['Message'])) {
                $data = $this->request->data['Message']['file'];
                $file_type = $this->request->data['Message']['file']['type'];
                $message_type = $this->request->data['Message']['message_type'];
                $eventID = $this->request->data['Message']['event_id'];
                $response = array();
                if (isset($data['tmp_name']) && !empty($data['tmp_name'])) {

                    if ($message_type == "IMAGE") {
                        $mimeAarray = array('image/png', 'image/jpeg', 'image/jpeg', 'image/jpeg', 'image/gif', 'image/bmp');
                        if (in_array($file_type, $mimeAarray)) {

                            if ($url = $this->Custom->uploadFileToAws($data)) {
                                $response["status"] = 1;
                                $response["message"] = "File uploaded successfully.";
                                $response["url"] = $url;
                                $inData = array();
                                $inData['media_path'] = $url;
                                $inData['media_type'] = $message_type;
                                $inData['event_id'] = $eventID;

                                $this->EventMedia->create();
                                $this->EventMedia->save($inData);

                            } else {
                                $response["status"] = 0;
                                $response["message"] = "Sorry file could not upload";
                            }

                        } else {
                            $response["status"] = 0;
                            $response["message"] = "Sorry you can send only text message";

                        }
                    }
                    if ($message_type == "VIDEO") {
                        $mimeAarray = array('video/mp4', 'image/ogg', 'image/wmp');
                        if (in_array($file_type, $mimeAarray)) {
                            if ($url = $this->Custom->uploadFileToAws($data)) {
                                $response["status"] = 1;
                                $response["message"] = "File uploaded successfully.";
                                $response["url"] = $url;
                                $inData = array();
                                $inData['media_path'] = $url;
                                $inData['media_type'] = $message_type;
                                $inData['event_id'] = $eventID;

                                $this->EventMedia->create();
                                $this->EventMedia->save($inData);
                            } else {
                                $response["status"] = 0;
                                $response["message"] = "Sorry file could not upload";
                            }
                        } else {
                            $response["status"] = 0;
                            $response["message"] = "Sorry invalid video format file";
                        }
                    }


                } else {
                    $response["status"] = 0;
                    $response["message"] = "Please upload file.";
                }
            } else {
                $response["status"] = 0;
                $response["message"] = "Sorry file could not post.";
            }
            return json_encode($response);
        } else {
            exit();
        }
    }

    public function view_event_result()
    {

        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $response = array();
            $eventID = $this->request->data['eventID'];
            $rowData = $this->EventResponse->find('all', array(
                'fields' => array('EventResponse.response_type', 'count(*) AS totalResponse',),
                'conditions' => array('EventResponse.event_id' => $eventID),
                'contain' => false,
                'group' => 'EventResponse.response_type'
            ));

            //	pr($rowData);


            if (!empty($rowData)) {
                $response['status'] = '1';
                $html = '';

                foreach ($rowData as $value) {
                    $html .= "<tr><td>" . $value['EventResponse']['response_type'] . "</td><td>" . $value[0]['totalResponse'] . "</td></tr>";
                }
                $response['html'] = $html;
            } else {
                $response['status'] = '0';
            }

            $response = json_encode($response, true);
            echo $response;
            exit();
        }

    }

    public function organizer_event($eventID = null)
    {
        $eventID = base64_decode($eventID);

        $login = $this->Session->read('Auth.User.User');
        if (!$this->Custom->check_app_enable_permission($login['User']['thinapp_id'], "EVENT")) {
            $this->redirect(array('controller' => 'app_admin', 'action' => 'dashboard'));
        }

        if ($this->request->is(array('post', 'put'))) {
            $dataToInsert = $this->request->data;
            $dataToInsert['EventOrganizer']['event_id'] = $eventID;
            $image = $dataToInsert['EventOrganizer']['image'];
            unset($dataToInsert['EventOrganizer']['image']);
            if (!empty($image['tmp_name'])) {
                $mimeAarray = array('image/png', 'image/jpeg', 'image/jpeg', 'image/jpeg', 'image/gif', 'image/bmp');
                if (in_array($image['type'], $mimeAarray)) {
                    if ($url = $this->Custom->uploadFileToAws($image)) {
                        $dataToInsert['EventOrganizer']['image'] = $url;
                        $this->EventOrganizer->create();
                        if ($inserted = $this->EventOrganizer->save($dataToInsert)) {
                            $this->Session->setFlash(__('Organizer added successfully.'), 'default', array(), 'success');
                            unset($this->request->data);
                        } else {
                            $this->Session->setFlash(__('Organizer could not be added.'), 'default', array(), 'error');

                        }
                    } else {
                        $this->Session->setFlash(__('Could not upload image.'), 'default', array(), 'error');
                    }
                } else {
                    $this->Session->setFlash(__('Please upload image.'), 'default', array(), 'error');
                }
            } else {
                $this->EventOrganizer->create();
                if ($inserted = $this->EventOrganizer->save($dataToInsert)) {
                    $this->Session->setFlash(__('Organizer added successfully.'), 'default', array(), 'success');
                    unset($this->request->data);
                } else {
                    $this->Session->setFlash(__('Organizer could not be added.'), 'default', array(), 'error');
                }
            }
        }

        $this->paginate = array(
            'fields' => array('EventOrganizer.*', 'Event.title'),
            'conditions' => array('EventOrganizer.event_id' => $eventID),
            'contain' => array('Event'),
            'order' => 'EventOrganizer.id DESC',
            'limit' => 10
        );
        $eventOrganizer = $this->paginate('EventOrganizer');
        $this->set(compact('eventOrganizer'));
    }

    public function get_event_organizer_edit()
    {
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $ID = $this->request->data['ID'];
            $responseData = array();
            $responseData = $this->EventOrganizer->find('first', array(
                'fields' => array('EventOrganizer.*'),
                'conditions' => array('EventOrganizer.id' => $ID),
                'contain' => false
            ));
            if (!empty($responseData)) {
                $response['status'] = 1;
                $response['data'] = $responseData['EventOrganizer'];
            } else {
                $response['status'] = 0;
            }
            $response = json_encode($response, true);
            echo $response;
            exit();
        }
    }

    public function edit_event_organizer()
    {
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $response = array();
            //pr($this->request->data); die;
            if ($this->EventOrganizer->save($this->request->data)) {
                $response['status'] = 1;
            } else {
                $response['status'] = 0;
                $response['message'] = 'Sorry, Could not edit.';
            }
            $response = json_encode($response, true);
            echo $response;
            exit();
        }
    }

    public function change_event_organizer_status()
    {
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $response = array();
            $ID = $this->request->data['ID'];
            $data = $this->EventOrganizer->find("first",
                array(
                    "fields" => array('EventOrganizer.status', 'EventOrganizer.id'),
                    "conditions" => array("EventOrganizer.id" => $ID),
                    "contain" => false,
                )
            );

            $statusToChange = ($data['EventOrganizer']['status'] == 'ACTIVE') ? 'INACTIVE' : 'ACTIVE';
            $data['EventOrganizer']['status'] = $statusToChange;
            if ($this->EventOrganizer->save($data)) {
                $response['status'] = 1;
                $response['text'] = ($data['EventOrganizer']['status'] == 'ACTIVE') ? 'ACTIVE' : 'INACTIVE';
            } else {
                $response['status'] = 0;
            }

            $response = json_encode($response, true);
            echo $response;
            exit();
        }
    }

    public function speaker_event($eventID = null)
    {
        $eventID = base64_decode($eventID);
        $login = $this->Session->read('Auth.User.User');
        if (!$this->Custom->check_app_enable_permission($login['User']['thinapp_id'], "EVENT")) {
            $this->redirect(array('controller' => 'app_admin', 'action' => 'dashboard'));
        }

        if ($this->request->is(array('post', 'put'))) {
            $dataToInsert = $this->request->data;
            $dataToInsert['EventSpeaker']['event_id'] = $eventID;
            $image = $dataToInsert['EventSpeaker']['image'];
            unset($dataToInsert['EventSpeaker']['image']);
            if (!empty($image['tmp_name'])) {
                $mimeAarray = array('image/png', 'image/jpeg', 'image/jpeg', 'image/jpeg', 'image/gif', 'image/bmp');
                if (in_array($image['type'], $mimeAarray)) {
                    if ($url = $this->Custom->uploadFileToAws($image)) {
                        $dataToInsert['EventSpeaker']['image'] = $url;
                        $this->EventSpeaker->create();
                        if ($inserted = $this->EventSpeaker->save($dataToInsert)) {
                            $this->Session->setFlash(__('Speaker added successfully.'), 'default', array(), 'success');
                            unset($this->request->data);
                        } else {
                            $this->Session->setFlash(__('Speaker could not be added.'), 'default', array(), 'error');

                        }
                    } else {
                        $this->Session->setFlash(__('Could not upload image.'), 'default', array(), 'error');
                    }
                } else {
                    $this->Session->setFlash(__('Please upload image.'), 'default', array(), 'error');
                }
            } else {
                $this->EventSpeaker->create();
                if ($inserted = $this->EventSpeaker->save($dataToInsert)) {
                    $this->Session->setFlash(__('Speaker added successfully.'), 'default', array(), 'success');
                    unset($this->request->data);
                } else {
                    $this->Session->setFlash(__('Speaker could not be added.'), 'default', array(), 'error');
                }
            }
        }


        $this->paginate = array(
            'fields' => array('EventSpeaker.*', 'Event.title'),
            'conditions' => array('EventSpeaker.event_id' => $eventID),
            'contain' => array('Event'),
            'order' => 'EventSpeaker.id DESC',
            'limit' => 10
        );
        $eventSpeaker = $this->paginate('EventSpeaker');
        $this->set(compact('eventSpeaker'));
    }

    public function get_event_speaker_edit()
    {
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $ID = $this->request->data['ID'];
            $responseData = array();
            $responseData = $this->EventSpeaker->find('first', array(
                'fields' => array('EventSpeaker.*'),
                'conditions' => array('EventSpeaker.id' => $ID),
                'contain' => false
            ));
            if (!empty($responseData)) {
                $response['status'] = 1;
                $response['data'] = $responseData['EventSpeaker'];
            } else {
                $response['status'] = 0;
            }
            $response = json_encode($response, true);
            echo $response;
            exit();
        }
    }

    public function edit_event_speaker()
    {
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $response = array();
            //pr($this->request->data); die;
            if ($this->EventSpeaker->save($this->request->data)) {
                $response['status'] = 1;
            } else {
                $response['status'] = 0;
                $response['message'] = 'Sorry, Could not edit.';
            }
            $response = json_encode($response, true);
            echo $response;
            exit();
        }
    }

    public function change_event_speaker_status()
    {
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $response = array();
            $ID = $this->request->data['ID'];
            $data = $this->EventSpeaker->find("first",
                array(
                    "fields" => array('EventSpeaker.status', 'EventSpeaker.id'),
                    "conditions" => array("EventSpeaker.id" => $ID),
                    "contain" => false,
                )
            );

            $statusToChange = ($data['EventSpeaker']['status'] == 'ACTIVE') ? 'INACTIVE' : 'ACTIVE';
            $data['EventSpeaker']['status'] = $statusToChange;
            if ($this->EventSpeaker->save($data)) {
                $response['status'] = 1;
                $response['text'] = ($data['EventSpeaker']['status'] == 'ACTIVE') ? 'ACTIVE' : 'INACTIVE';
            } else {
                $response['status'] = 0;
            }

            $response = json_encode($response, true);
            echo $response;
            exit();
        }
    }

    public function agenda_event($eventID = null)
    {
        $eventID = base64_decode($eventID);

        $login = $this->Session->read('Auth.User.User');
        if (!$this->Custom->check_app_enable_permission($login['User']['thinapp_id'], "EVENT")) {
            $this->redirect(array('controller' => 'app_admin', 'action' => 'dashboard'));
        }

        if ($this->request->is(array('post', 'put'))) {
            $dataToInsert = $this->request->data;
            $dataToInsert['EventAgenda']['event_id'] = $eventID;
            $dataToInsert['EventAgenda']['start_datetime'] = $dataToInsert['EventAgenda']['start_date'] . " " . $dataToInsert['EventAgenda']['start_time'];
            $dataToInsert['EventAgenda']['end_datetime'] = $dataToInsert['EventAgenda']['end_date'] . " " . $dataToInsert['EventAgenda']['end_time'];
            unset($dataToInsert['EventAgenda']['end_date']);
            unset($dataToInsert['EventAgenda']['end_time']);
            unset($dataToInsert['EventAgenda']['start_date']);
            unset($dataToInsert['EventAgenda']['start_time']);

            if (strtotime($dataToInsert['EventAgenda']['start_datetime']) >= strtotime($dataToInsert['EventAgenda']['end_datetime'])) {
                $this->Session->setFlash(__('start date time could not be more then end date time.'), 'default', array(), 'error');
            } else {
                $this->EventAgenda->create();
                if ($inserted = $this->EventAgenda->save($dataToInsert)) {
                    $this->Session->setFlash(__('Agenda added successfully.'), 'default', array(), 'success');
                    unset($this->request->data);
                } else {
                    $this->Session->setFlash(__('Agenda could not be added.'), 'default', array(), 'error');
                }
            }

        }
        $this->paginate = array(
            'fields' => array('EventAgenda.*', 'Event.title'),
            'conditions' => array('EventAgenda.event_id' => $eventID),
            'contain' => array('Event'),
            'order' => 'EventAgenda.id DESC',
            'limit' => 10
        );
        $eventAgenda = $this->paginate('EventAgenda');
        $event = $this->Event->find('first', array('fields' => array('Event.start_datetime', 'Event.end_datetime'), 'contain' => false, 'conditions' => array('Event.id' => $eventID)));
        $this->set(compact('eventAgenda', 'event'));
    }

    public function get_event_agenda_edit()
    {
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $ID = $this->request->data['ID'];
            $responseData = array();
            $responseData = $this->EventAgenda->find('first', array(
                'fields' => array('EventAgenda.*'),
                'conditions' => array('EventAgenda.id' => $ID),
                'contain' => false
            ));
            if (!empty($responseData)) {
                $response['status'] = 1;
                $response['data'] = $responseData['EventAgenda'];
            } else {
                $response['status'] = 0;
            }
            $response = json_encode($response, true);
            echo $response;
            exit();
        }
    }

    public function edit_event_agenda()
    {
        $this->autoRender = false;
        if ($this->request->is('ajax')) {

            $dataToInsert = $this->request->data;
            $dataToInsert['start_datetime'] = $dataToInsert['start_date'] . " " . $dataToInsert['start_time'];
            $dataToInsert['end_datetime'] = $dataToInsert['end_date'] . " " . $dataToInsert['end_time'];
            unset($dataToInsert['end_date']);
            unset($dataToInsert['end_time']);
            unset($dataToInsert['start_date']);
            unset($dataToInsert['start_time']);
            $response = array();
            if (strtotime($dataToInsert['start_datetime']) >= strtotime($dataToInsert['end_datetime'])) {
                $response['status'] = 0;
                $response['message'] = 'start date time could not be more then end date time.';
            } else {
                if ($this->EventAgenda->save($dataToInsert)) {
                    $response['status'] = 1;
                } else {
                    $response['status'] = 0;
                    $response['message'] = 'Sorry, Could not edit.';
                }
            }

            $response = json_encode($response, true);
            echo $response;
            exit();
        }
    }

    public function change_event_agenda_status()
    {
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $response = array();
            $ID = $this->request->data['ID'];
            $data = $this->EventAgenda->find("first",
                array(
                    "fields" => array('EventAgenda.status', 'EventAgenda.id'),
                    "conditions" => array("EventAgenda.id" => $ID),
                    "contain" => false,
                )
            );

            $statusToChange = ($data['EventAgenda']['status'] == 'ACTIVE') ? 'INACTIVE' : 'ACTIVE';
            $data['EventAgenda']['status'] = $statusToChange;
            if ($this->EventAgenda->save($data)) {
                $response['status'] = 1;
                $response['text'] = ($data['EventAgenda']['status'] == 'ACTIVE') ? 'ACTIVE' : 'INACTIVE';
            } else {
                $response['status'] = 0;
            }

            $response = json_encode($response, true);
            echo $response;
            exit();
        }
    }

    public function show_event($eventID = null)
    {

        $eventID = base64_decode($eventID);
        $login = $this->Session->read('Auth.User.User');
        if (!$this->Custom->check_app_enable_permission($login['User']['thinapp_id'], "EVENT")) {
            $this->redirect(array('controller' => 'app_admin', 'action' => 'dashboard'));
        }

        if ($this->request->is(array('post', 'put'))) {
            $dataToInsert = $this->request->data;
            $dataToInsert['EventShow']['event_id'] = $eventID;
            $dataToInsert['EventShow']['start_datetime'] = $dataToInsert['EventShow']['start_date'] . " " . $dataToInsert['EventShow']['start_time'];
            $dataToInsert['EventShow']['end_datetime'] = $dataToInsert['EventShow']['end_date'] . " " . $dataToInsert['EventShow']['end_time'];
            unset($dataToInsert['EventShow']['end_date']);
            unset($dataToInsert['EventShow']['end_time']);
            unset($dataToInsert['EventShow']['start_date']);
            unset($dataToInsert['EventShow']['start_time']);

            if (strtotime($dataToInsert['EventShow']['start_datetime']) >= strtotime($dataToInsert['EventShow']['end_datetime'])) {
                $this->Session->setFlash(__('start date time could not be more then end date time.'), 'default', array(), 'error');
            } else {
                $this->EventShow->create();
                if ($inserted = $this->EventShow->save($dataToInsert)) {
                    $this->Session->setFlash(__('Show added successfully.'), 'default', array(), 'success');
                    unset($this->request->data);
                } else {
                    $this->Session->setFlash(__('Show could not be added.'), 'default', array(), 'error');
                }
            }
        }
        $this->paginate = array(
            'fields' => array('EventShow.*', 'Event.title'),
            'conditions' => array('EventShow.event_id' => $eventID),
            'contain' => array('Event'),
            'order' => 'EventShow.id DESC',
            'limit' => 10
        );
        $eventShow = $this->paginate('EventShow');
        $event = $this->Event->find('first', array('fields' => array('Event.start_datetime', 'Event.end_datetime'), 'contain' => false, 'conditions' => array('Event.id' => $eventID)));
        $this->set(compact('eventShow', 'event'));
    }

    public function get_event_show_edit()
    {
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $ID = $this->request->data['ID'];
            $responseData = array();
            $responseData = $this->EventShow->find('first', array(
                'fields' => array('EventShow.*'),
                'conditions' => array('EventShow.id' => $ID),
                'contain' => false
            ));
            if (!empty($responseData)) {
                $response['status'] = 1;
                $response['data'] = $responseData['EventShow'];
            } else {
                $response['status'] = 0;
            }
            $response = json_encode($response, true);
            echo $response;
            exit();
        }
    }

    public function edit_event_show()
    {
        $this->autoRender = false;
        if ($this->request->is('ajax')) {

            $dataToInsert = $this->request->data;
            $dataToInsert['start_datetime'] = $dataToInsert['start_date'] . " " . $dataToInsert['start_time'];
            $dataToInsert['end_datetime'] = $dataToInsert['end_date'] . " " . $dataToInsert['end_time'];
            unset($dataToInsert['end_date']);
            unset($dataToInsert['end_time']);
            unset($dataToInsert['start_date']);
            unset($dataToInsert['start_time']);
            $response = array();
            if (strtotime($dataToInsert['start_datetime']) >= strtotime($dataToInsert['end_datetime'])) {
                $response['status'] = 0;
                $response['message'] = 'start date time could not be more then end date time.';
            } else {
                if ($this->EventShow->save($dataToInsert)) {
                    $response['status'] = 1;
                } else {
                    $response['status'] = 0;
                    $response['message'] = 'Sorry, Could not edit.';
                }
            }

            $response = json_encode($response, true);
            echo $response;
            exit();
        }
    }

    public function change_event_show_status()
    {
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $response = array();
            $ID = $this->request->data['ID'];
            $data = $this->EventShow->find("first",
                array(
                    "fields" => array('EventShow.status', 'EventShow.id'),
                    "conditions" => array("EventShow.id" => $ID),
                    "contain" => false,
                )
            );

            $statusToChange = ($data['EventShow']['status'] == 'ACTIVE') ? 'INACTIVE' : 'ACTIVE';
            $data['EventShow']['status'] = $statusToChange;
            if ($this->EventShow->save($data)) {
                $response['status'] = 1;
                $response['text'] = $statusToChange;
            } else {
                $response['status'] = 0;
            }

            $response = json_encode($response, true);
            echo $response;
            exit();
        }
    }

    public function ticket_event($eventID = null)
    {
        $eventID = base64_decode($eventID);

        $login = $this->Session->read('Auth.User.User');
        if (!$this->Custom->check_app_enable_permission($login['User']['thinapp_id'], "EVENT")) {
            $this->redirect(array('controller' => 'app_admin', 'action' => 'dashboard'));
        }

        $this->paginate = array(
            'fields' => array('EventTicket.*', 'EventShow.*', 'Event.title'),
            'conditions' => array('EventTicket.event_id' => $eventID),
            'contain' => array('Event', 'EventShow'),
            'order' => 'EventTicket.id DESC',
            'limit' => 10
        );
        $eventTicket = $this->paginate('EventTicket');
        $this->set(compact('eventTicket', 'eventID'));
    }

    public function add_ticket_event($eventID = null)
    {
        $eventID = base64_decode($eventID);
        $login = $this->Session->read('Auth.User.User');
        if (!$this->Custom->check_app_enable_permission($login['User']['thinapp_id'], "EVENT")) {
            $this->redirect(array('controller' => 'app_admin', 'action' => 'dashboard'));
        }

        if ($this->request->is(array('post', 'put'))) {
            $dataArr = $this->request->data;
            $dataToInsert = array();
            foreach ($dataArr['data'] AS $data) {
                $data['event_id'] = $eventID;
                $data['available_count'] = $data['total_count'];
                $dataToInsert[] = $data;
            }
            if ($this->EventTicket->saveAll($dataToInsert)) {
                $this->Session->setFlash(__('Tickets saved successfully'), 'default', array(), 'success');
                $this->redirect(array('controller' => 'admin', 'action' => 'admin_ticket_event', base64_encode($eventID)));
            }
        }
        $eventShow = $this->EventShow->find('all', array(
            'filds' => array('EventShow.*'),
            'conditions' => array('EventShow.event_id' => $eventID),
            'contain' => false,
            'order' => array('EventShow.start_datetime DESC')
        ));
        $eventShowArr = array();
        foreach ($eventShow as $eventValue) {
            $eventShowArr[$eventValue['EventShow']['id']] = date("d-M-Y H:i:s", strtotime($eventValue['EventShow']['start_datetime'])) . ' - ' . date("d-M-Y H:i:s", strtotime($eventValue['EventShow']['end_datetime']));
        }

        $this->set(compact('eventShowArr', 'eventID'));
    }

    public function admin_change_event_ticket_status()
    {
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $response = array();
            $ID = $this->request->data['ID'];
            $data = $this->EventTicket->find("first",
                array(
                    "fields" => array('EventTicket.status', 'EventTicket.id'),
                    "conditions" => array("EventTicket.id" => $ID),
                    "contain" => false,
                )
            );

            $statusToChange = ($data['EventTicket']['status'] == 'ACTIVE') ? 'INACTIVE' : 'ACTIVE';
            $data['EventTicket']['status'] = $statusToChange;
            if ($this->EventTicket->save($data)) {
                $response['status'] = 1;
                $response['text'] = ($data['EventTicket']['status'] == 'ACTIVE') ? 'ACTIVE' : 'INACTIVE';
            } else {
                $response['status'] = 0;
            }

            $response = json_encode($response, true);
            echo $response;
            exit();
        }
    }

    public function get_event_edit()
    {
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $ID = $this->request->data['ID'];
            $response = array();
            $ticket = $this->EventTicket->find('first', array(
                'fields' => array('EventTicket.*'),
                'conditions' => array('EventTicket.id' => $ID),
                'contain' => false
            ));
            if (!empty($ticket)) {
                $response['status'] = 1;
                $response['data'] = $ticket['EventTicket'];
            } else {
                $response['status'] = 0;
            }
            $response = json_encode($response, true);
            echo $response;
            exit();
        }
    }

    public function edit_event_ticket()
    {
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $response = array();
            //pr($this->request->data); die;
            if ($this->EventTicket->save($this->request->data)) {
                $response['status'] = 1;
            } else {
                $response['status'] = 0;
                $response['message'] = 'Sorry, Could not edit.';
            }
            $response = json_encode($response, true);
            echo $response;
            exit();
        }
    }

    public function get_event_allow_detail()
    {
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $eventID = $this->request->data['eventID'];
            $response = array();
            $event = $this->Event->find('first', array(
                'fields' => array('Event.enable_agenda', 'Event.enable_organizer', 'Event.enable_show', 'Event.enable_speaker', 'Event.enable_ticket'),
                'conditions' => array('Event.id' => $eventID),
                'contain' => false
            ));
            if (!empty($event)) {
                $dataToSend = array();
                foreach ($event['Event'] as $key => $value) {
                    $dataToSend[$key] = ($value == 'YES') ? 'ALLOWED' : 'NOT ALLOWED';
                }
                $response['status'] = 1;
                $response['data'] = $dataToSend;
            } else {
                $response['status'] = 0;
            }
            $response = json_encode($response, true);
            echo $response;
            exit();
        }
    }

    public function change_event_allow()
    {
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $response = array();
            $ID = $this->request->data['eventID'];
            $field = $this->request->data['field'];
            $data = $this->Event->find("first",
                array(
                    "fields" => array('Event.' . $field, 'Event.id'),
                    "conditions" => array("Event.id" => $ID),
                    "contain" => false,
                )
            );

            $statusToChange = ($data['Event'][$field] == 'YES') ? 'NO' : 'YES';
            $data['Event'][$field] = $statusToChange;
            if ($this->Event->save($data)) {
                $response['status'] = 1;
                $response['text'] = ($statusToChange == 'YES') ? 'ALLOWED' : 'NOT ALLOWED';
            } else {
                $response['status'] = 0;
            }

            $response = json_encode($response, true);
            echo $response;
            exit();
        }
    }

    public function search_permit_event()
    {
        $reqData = $this->request->query;
        $pram = array();
        if (!empty($reqData['title'])) {
            $pram['t'] = $reqData['title'];
        }
        if (!empty($reqData['category'])) {
            $pram['c'] = $reqData['category'];
        }
        if (!empty($reqData['date'])) {
            $pram['d'] = $reqData['date'];
        }

        $this->redirect(
            array(
                "controller" => "admin",
                "action" => "permit_event",
                "?" => $pram,
            )
        );
    }

    public function permit_event()
    {
        $login = $this->Session->read('Auth.User.User');

        if (!$this->Custom->check_app_enable_permission($login['User']['thinapp_id'], "EVENT")) {
            $this->redirect(array('controller' => 'app_admin', 'action' => 'dashboard'));
        }

        $searchData = $this->request->query;
        $conditions = array();

        if (isset($searchData['t']) && !empty($searchData['t'])) {
            $this->request->data['Search']['title'] = $searchData['t'];
            $conditions["Event.title LIKE"] = '%' . $searchData['t'] . '%';
        }
        if (isset($searchData['c']) && !empty($searchData['c'])) {
            $this->request->data['Search']['category'] = $searchData['c'];
            $conditions["Event.event_category_id"] = $searchData['c'];
        }
        if (isset($searchData['d']) && !empty($searchData['d'])) {
            $this->request->data['Search']['date'] = $searchData['d'];
            $conditions[] = "( Event.start_datetime <= '" . $searchData['d'] . "' AND Event.end_datetime >= '" . $searchData['d'] . "' )";
        }
        $conditions["Event.show_on_mbroadcast"] = 'YES';

        $this->paginate = array(
            'fields' => array('Event.*', 'EventCategory.title', 'CreatedBy.username'),
            'conditions' => $conditions,
            'contain' => array('EventCategory', 'CreatedBy'),
            'order' => 'Event.id DESC',
            'limit' => 10
        );
        $event = $this->paginate('Event');
        $eventCategory = $this->EventCategory->find('list', array('conditions' => array('EventCategory.status' => 'ACTIVE')));
        $this->set(compact('event', 'eventCategory'));
    }

    public function change_event_mbroadcast_publish_status()
    {
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $response = array();
            $eventID = $this->request->data['eventID'];
            $eventData = $this->Event->find("first",
                array(
                    "fields" => array('Event.mbroadcast_publish_status', 'Event.id'),
                    "conditions" => array("Event.id" => $eventID),
                    "contain" => false,
                )
            );

            $statusToChange = ($eventData['Event']['mbroadcast_publish_status'] != 'APPROVED') ? 'APPROVED' : 'PENDING';
            $eventData['Event']['mbroadcast_publish_status'] = $statusToChange;
            if ($this->Event->save($eventData)) {
                $response['status'] = 1;
                $response['text'] = $statusToChange;
            } else {
                $response['status'] = 0;
            }

            $response = json_encode($response, true);
            echo $response;
            exit();
        }
    }

    public function permit_media_event($eventID = null)
    {
        $eventID = base64_decode($eventID);

        $login = $this->Session->read('Auth.User.User');
        if (!$this->Custom->check_app_enable_permission($login['User']['thinapp_id'], "EVENT")) {
            $this->redirect(array('controller' => 'app_admin', 'action' => 'dashboard'));
        }

        $eventMedia = $this->Event->find('first', array(
            'fields' => array('Event.id', 'Event.title'),
            'conditions' => array('Event.id' => $eventID),
            'contain' => array('EventMedia')
        ));
        if (empty($eventMedia)) {
            $this->Session->setFlash(__('Sorry, Event was not found.'), 'default', array(), 'error');
            $this->redirect(array('controller' => 'admin', 'action' => 'event'));
            return false;
        }
        $this->set(compact('eventMedia'));

    }

    public function permit_organizer_event($eventID = null)
    {
        $eventID = base64_decode($eventID);

        $login = $this->Session->read('Auth.User.User');
        if (!$this->Custom->check_app_enable_permission($login['User']['thinapp_id'], "EVENT")) {
            $this->redirect(array('controller' => 'app_admin', 'action' => 'dashboard'));
        }

        $this->paginate = array(
            'fields' => array('EventOrganizer.*', 'Event.title'),
            'conditions' => array('EventOrganizer.event_id' => $eventID),
            'contain' => array('Event'),
            'order' => 'EventOrganizer.id DESC',
            'limit' => 10
        );
        $eventOrganizer = $this->paginate('EventOrganizer');
        $this->set(compact('eventOrganizer'));
    }

    public function permit_speaker_event($eventID = null)
    {
        $eventID = base64_decode($eventID);

        $login = $this->Session->read('Auth.User.User');
        if (!$this->Custom->check_app_enable_permission($login['User']['thinapp_id'], "EVENT")) {
            $this->redirect(array('controller' => 'app_admin', 'action' => 'dashboard'));
        }


        $this->paginate = array(
            'fields' => array('EventSpeaker.*', 'Event.title'),
            'conditions' => array('EventSpeaker.event_id' => $eventID),
            'contain' => array('Event'),
            'order' => 'EventSpeaker.id DESC',
            'limit' => 10
        );
        $eventSpeaker = $this->paginate('EventSpeaker');
        $this->set(compact('eventSpeaker'));
    }

    public function permit_agenda_event($eventID = null)
    {
        $eventID = base64_decode($eventID);

        $login = $this->Session->read('Auth.User.User');
        if (!$this->Custom->check_app_enable_permission($login['User']['thinapp_id'], "EVENT")) {
            $this->redirect(array('controller' => 'app_admin', 'action' => 'dashboard'));
        }

        $this->paginate = array(
            'fields' => array('EventAgenda.*', 'Event.title'),
            'conditions' => array('EventAgenda.event_id' => $eventID),
            'contain' => array('Event'),
            'order' => 'EventAgenda.id DESC',
            'limit' => 10
        );
        $eventAgenda = $this->paginate('EventAgenda');
        $event = $this->Event->find('first', array('fields' => array('Event.start_datetime', 'Event.end_datetime'), 'contain' => false, 'conditions' => array('Event.id' => $eventID)));
        $this->set(compact('eventAgenda', 'event'));
    }

    public function permit_show_event($eventID = null)
    {

        $eventID = base64_decode($eventID);
        $login = $this->Session->read('Auth.User.User');
        if (!$this->Custom->check_app_enable_permission($login['User']['thinapp_id'], "EVENT")) {
            $this->redirect(array('controller' => 'app_admin', 'action' => 'dashboard'));
        }

        $this->paginate = array(
            'fields' => array('EventShow.*', 'Event.title'),
            'conditions' => array('EventShow.event_id' => $eventID),
            'contain' => array('Event'),
            'order' => 'EventShow.id DESC',
            'limit' => 10
        );
        $eventShow = $this->paginate('EventShow');
        $event = $this->Event->find('first', array('fields' => array('Event.start_datetime', 'Event.end_datetime'), 'contain' => false, 'conditions' => array('Event.id' => $eventID)));
        $this->set(compact('eventShow', 'event'));
    }

    public function permit_ticket_event($eventID = null)
    {
        $eventID = base64_decode($eventID);
        $login = $this->Session->read('Auth.User.User');
        if (!$this->Custom->check_app_enable_permission($login['User']['thinapp_id'], "EVENT")) {
            $this->redirect(array('controller' => 'app_admin', 'action' => 'dashboard'));
        }

        $this->paginate = array(
            'fields' => array('EventTicket.*', 'EventShow.*', 'Event.title'),
            'conditions' => array('EventTicket.event_id' => $eventID),
            'contain' => array('Event', 'EventShow'),
            'order' => 'EventTicket.id DESC',
            'limit' => 10
        );
        $eventTicket = $this->paginate('EventTicket');
        $this->set(compact('eventTicket', 'eventID'));
    }

    /*****EVENT END HERE*****/


    public function permission()
    {
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User');
        $app_fun_type_list = $this->AppFunctionalityType->find('all', array(
            "conditions" => array(
                "AppFunctionalityType.status" => 'Y',
            ),
            'contain' => false
        ));


        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User');
        $thinappID = $login['User']['thinapp_id'];


        $labID = 0;
        $loginLab = $this->Session->read('Auth.User');
        $roleLab = $loginLab['USER_ROLE'];
        if ($this->request->is(array('post', 'put'))) {
            $datasource = $this->Thinapp->getDataSource();
            try {
                $datasource->begin();
                $this->request->data['Thinapp']['id'] = $thinappID;
                if ($this->Thinapp->save($this->request->data['Thinapp'])) {
                    $datasource->commit();
                	$file_name ="app_dialog_$thinappID";
                    $content = $this->request->data['Thinapp']['custom_dialog_text'];
                    if(!empty(trim($content))){
                        WebservicesFunction::createJson($file_name,json_encode($content),"CREATE","dialog_message");
                    }else{
                        WebservicesFunction::deleteJson(array($file_name),"dialog_message");
                    }
                    $this->Session->setFlash(__('Updated successfully.'), 'default', array(), 'success');
                    $this->redirect(array('controller' => 'app_admin', 'action' => 'permission'));
                } else {
                    $datasource->rollback();
                    $this->Session->setFlash(__('Sorry patient could not be added.'), 'default', array(), 'error');
                }
            } catch (Exception $e) {
                $datasource->rollback();
            }
        } else {
            $thinappData = $this->Thinapp->find('first', array(
                'conditions' => array(
                    'Thinapp.id' => $thinappID
                ),
                'contain' => false
            ));
            $this->request->data = $thinappData;
        }
        $this->set(compact('app_fun_type_list'));
    }


    public function change_user_permission()
    {


        $this->autoRender = false;
        $login = $this->Session->read('Auth.User');
        if ($this->request->is('post')) {

            $thin_app_id = $login['User']['thinapp_id'];
            $user_permission_id = base64_decode($this->request->data['user_permission_id']);
            $user_fun_type_id = base64_decode($this->request->data['user_fun_type_id']);
            $app_fun_type_id = base64_decode($this->request->data['app_fun_type_id']);
            $app_enb_fun_id = base64_decode($this->request->data['app_enb_fun_id']);
            $desc = isset($this->request->data['desc'])?trim($this->request->data['desc']):"";
            $status = isset($this->request->data['status'])?trim($this->request->data['status']):"";

            $is_permission_data = $this->UserEnabledFunPermission->find('first', array(
                "conditions" => array(
                    "UserEnabledFunPermission.user_functionality_type_id" => $user_fun_type_id,
                    "UserEnabledFunPermission.thinapp_id" => $thin_app_id,
                ),
                'contain' => false
            ));

            if (!empty($is_permission_data)) {

                if($status != ""){
                    $status = ($is_permission_data['UserEnabledFunPermission']['permission'] == "YES") ? "YES" : "NO";
                }
                else
                {
                    $status = ($is_permission_data['UserEnabledFunPermission']['permission'] == "YES") ? "NO" : "YES";
                }


                $is_update = $this->UserEnabledFunPermission->updateAll(
                    array(
                        'UserEnabledFunPermission.permission' => "'" . $status . "'",
                        'UserEnabledFunPermission.app_functionality_type_id' => $app_fun_type_id,
                        'UserEnabledFunPermission.app_enable_functionality_id' => $app_enb_fun_id,
                        'UserEnabledFunPermission.description' => "'".$desc."'"
                    ),
                    array(
                        'UserEnabledFunPermission.id' => $is_permission_data['UserEnabledFunPermission']['id'],
                    )
                );
                if ($is_update == true) {
                    $response['status'] = 1;
                    if ($status == "YES") {
                        $response['html_string'] = '<button user-fun-type-id="' . base64_encode($user_fun_type_id) . '" user-ena-fun-per-id="' . base64_encode($user_permission_id) . '" type="button" class="action_btn btn btn-success btn-xs" >ACTIVE</button>';
                    } else {
                        $response['html_string'] = '<button user-fun-type-id="' . base64_encode($user_fun_type_id) . '" user-ena-fun-per-id="' . base64_encode(0) . '" type="button" class="action_btn btn btn-warning btn-xs" >INACTIVE</button>';
                    }
                    WebservicesFunction::deleteJson(array('get_app_enabled_functionality_' . $thin_app_id),'permission');
                } else {
                    $response['status'] = 0;
                }
            } else {

                $this->UserEnabledFunPermission->create();
                $this->UserEnabledFunPermission->set('permission', 'YES');
                $this->UserEnabledFunPermission->set('user_functionality_type_id', $user_fun_type_id);
                $this->UserEnabledFunPermission->set('app_functionality_type_id', $app_fun_type_id);
                $this->UserEnabledFunPermission->set('app_enable_functionality_id', $app_enb_fun_id);
                $this->UserEnabledFunPermission->set('description', $desc);
                $this->UserEnabledFunPermission->set('thinapp_id', $thin_app_id);
                if ($this->UserEnabledFunPermission->save()) {
                    $permission_id = $this->UserEnabledFunPermission->getLastInsertId();
                    $response['status'] = 1;
                    $response['html_string'] = '<button user-fun-type-id="' . base64_encode($user_fun_type_id) . '" user-ena-fun-per-id="' . base64_encode($permission_id) . '" type="button" class="action_btn btn btn-success btn-xs" >ACTIVE</button>';
                    WebservicesFunction::deleteJson(array('get_app_enabled_functionality_' . $thin_app_id),'permission');
                } else {
                    $response['status'] = 0;
                }

            }


            echo json_encode($response);
            exit;
        }
    }


    /**************PAYMENT ITEM START HERE*************/

    public function add_payment_item()
    {

        $login = $this->Session->read('Auth.User.User');
        if ($this->request->is(array('post', 'put'))) {

            $datasource = $this->PaymentItem->getDataSource();
            try {
                $datasource->begin();
                $dataToSave = $this->request->data;
                $dataToSave['PaymentItem']['user_id'] = $login['id'];
                $dataToSave['PaymentItem']['thinapp_id'] = $login['thinapp_id'];
                $image = $dataToSave['PaymentItem']['image_path'];
                unset($dataToSave['PaymentItem']['image_path']);
                $file = array();
                $amountFile = $dataToSave['PaymentItem']['amount_file'];
                if ($amountFile['type'] == "application/vnd.ms-excel") {
                    $fileAllData = file($amountFile['tmp_name']);
                    $file = array();
                    $fileError = array();
                    foreach ($fileAllData as $fileData) {
                        $singleData = explode(",", $fileData);
                        if ((count($singleData) == 3) && is_numeric(str_replace(array("\n\r", "\n", "\r", "\r\n"), '', $singleData[1]))) {
                            $singleData[0] = $this->Custom->validate_payment_mobile_number($singleData[0], "+91");
                            $singleData[1] = (int)$singleData[1];
                            $file[] = $singleData;
                        } else {
                            $fileError['error'] = $singleData[0];
                        }
                    }
                    if (isset($fileError['error'])) {
                        $this->Session->setFlash(__('oops,Numbers could not be added.Please check ' . $fileError['error']), 'default', array(), 'error');
                        $this->redirect(array('controller' => 'app_admin', 'action' => 'payment_item_list'));
                    }
                }

                if ($dataToSave['PaymentItem']['discount_enable'] == 'YES') {
                    if ($dataToSave['PaymentItem']['discount_type'] == 'PERCENTAGE') {
                        $dataToSave['PaymentItem']['total_amount'] = round(($dataToSave['PaymentItem']['amount'] - ($dataToSave['PaymentItem']['amount'] * ($dataToSave['PaymentItem']['discount_value'] / 100))));
                    } else {
                        $dataToSave['PaymentItem']['total_amount'] = round(($dataToSave['PaymentItem']['amount'] - $dataToSave['PaymentItem']['discount_value']));
                    }
                } else {
                    $dataToSave['PaymentItem']['total_amount'] = $dataToSave['PaymentItem']['amount'];
                }

                if (!empty($image['tmp_name'])) {
                    $mimeAarray = array('image/png', 'image/jpeg', 'image/jpeg', 'image/jpeg', 'image/gif', 'image/bmp');
                    if (in_array($image['type'], $mimeAarray)) {
                        if ($url = $this->Custom->uploadFileToAws($image)) {
                            $dataToSave['PaymentItem']['image_path'] = $url;
                            if ($this->PaymentItem->saveAll($dataToSave)) {
                                if (!empty($file)) {

                                    $lastInserID = $this->PaymentItem->getLastInsertId();
                                    $fileToSave = array();
                                    $subscriberList = array();
                                    $mobileNum = array_column($file, array_keys($file)[0]);
                                    $userList = $this->User->find('list', array(
                                        'fields' => array('User.id', 'User.mobile'),
                                        "conditions" => array(
                                            "User.thinapp_id" => $login['thinapp_id'],
                                            'User.mobile' => $mobileNum,
                                        ),
                                        'contain' => false
                                    ));

                                    if (!empty($dataToSave['PaymentItem']['channel_id'])) {
                                        $subscriberList = $this->Subscriber->find('list', array(
                                            'fields' => array('Subscriber.id', 'Subscriber.mobile'),
                                            "conditions" => array(
                                                "Subscriber.channel_id" => $dataToSave['PaymentItem']['channel_id'],
                                                'Subscriber.mobile' => $mobileNum,
                                            ),
                                            'contain' => false
                                        ));
                                    }
                                    $user_mobile_numbers = array();
                                    $user_messages = array();
                                    $user_ids = array();
                                    foreach ($file as $fileVal) {
                                        $subscriberID = array_search($fileVal[0], $subscriberList);
                                        $userID = array_search($fileVal[0], $userList);
                                        $subscriberID = ($subscriberID !== false) ? $subscriberID : 0;
                                        $userID = ($userID !== false) ? $userID : 0;
                                        if ($userID) {
                                            $user_ids[] = $userID;
                                        }

                                        $fileToSave[] = array(
                                            'payment_item_id' => $lastInserID,
                                            'mobile' => $fileVal[0],
                                            'amount' => $fileVal[1],
                                            'comment' => isset($fileVal[2]) ? $fileVal[2] : '',
                                            'subcscriber_id' => $subscriberID,
                                            'user_id' => $userID,
                                            'thinapp_id' => $dataToSave['PaymentItem']['thinapp_id'],
                                        );
                                        $user_mobile_numbers[] = $fileVal[0];
                                        $user_messages[] = "You have recived a due payment of " . $dataToSave['PaymentItem']['title'] . " for Rs. " . $fileVal[1] . ".";
                                    }


                                    if (!($this->PaymentFileAmount->saveAll($fileToSave))) {
                                        $datasource->rollback();
                                    } else {
                                        $datasource->commit();
                                        $message = "You have recived a due payment of " . $dataToSave['PaymentItem']['title'];
                                        $total_sms = Custom::get_total_sms_thinapp($login['thinapp_id'], 'T');
                                        if (!empty($total_sms) && !empty($user_mobile_numbers)) {

                                            Custom::SendBulkSmsToNumbersWithMessage($user_mobile_numbers, $user_messages, $login['thinapp_id'], $login['id']);


                                            //  $this->Custom->send_bulk_sms($login['thinapp_id'],$message,$user_mobile_numbers,$login['thinapp_id']);
                                        }

                                        if (!empty($user_ids)) {
                                            $user_firebase_token_array = WebservicesFunction::get_users_token($user_ids);
                                            if (!empty($user_firebase_token_array)) {
                                                $sendArray = array(
                                                    'data' => array(
                                                        'thinapp_id' => $login['thinapp_id'],
                                                        'channel_id' => 0,
                                                        'payment_id' => $lastInserID,
                                                        'flag' => 'PAYMENT_VIA_FILE',
                                                        'title' => "New payment Request",
                                                        'message' => mb_strimwidth("Subscriber - " . $message, 0, 80, '...'),
                                                        'description' => mb_strimwidth($message, 0, 100, '...'),
                                                        'chat_reference' => '',
                                                        'module_type' => 'SUBSCRIBE',
                                                        'module_type_id' => 0,
                                                        'firebase_reference' => ""
                                                    )
                                                );
                                                $this->Custom->send_notification_to_multiple_device($sendArray, $user_firebase_token_array);
                                            }

                                        }

                                    }


                                } else {
                                    $datasource->commit();
                                }

                                $this->Session->setFlash(__('Payment Item Added Successfully.'), 'default', array(), 'success');
                                $this->redirect(array('controller' => 'app_admin', 'action' => 'payment_item_list'));
                            } else {
                                $this->Session->setFlash(__('oops,Payment item could not be added.'), 'default', array(), 'error');
                            }
                        } else {
                            $this->Session->setFlash(__('oops,Could not upload image.'), 'default', array(), 'error');
                        }
                    } else {
                        $this->Session->setFlash(__('Error, Please upload image.'), 'default', array(), 'error');
                    }
                } else {
                    if ($this->PaymentItem->saveAll($dataToSave['PaymentItem'])) {

                        if (!empty($file)) {
                            $lastInserID = $this->PaymentItem->getLastInsertId();
                            $fileToSave = array();

                            $subscriberList = array();
                            $mobileNum = array_column($file, array_keys($file)[0]);
                            $userList = $this->User->find('list', array(
                                'fields' => array('User.id', 'User.mobile'),
                                "conditions" => array(
                                    "User.thinapp_id" => $login['thinapp_id'],
                                    'User.mobile' => $mobileNum,
                                ),
                                'contain' => false
                            ));

                            if (!empty($dataToSave['PaymentItem']['channel_id'])) {
                                $subscriberList = $this->Subscriber->find('list', array(
                                    'fields' => array('Subscriber.id', 'Subscriber.mobile'),
                                    "conditions" => array(
                                        "Subscriber.channel_id" => $dataToSave['PaymentItem']['channel_id'],
                                        'Subscriber.mobile' => $mobileNum,
                                    ),
                                    'contain' => false
                                ));
                            }
                            $user_mobile_numbers = array();
                            $user_messages = array();
                            $user_ids = array();
                            foreach ($file as $fileVal) {
                                $subscriberID = array_search($fileVal[0], $subscriberList);
                                $userID = array_search($fileVal[0], $userList);
                                $subscriberID = ($subscriberID !== false) ? $subscriberID : 0;
                                $userID = ($userID !== false) ? $userID : 0;
                                if ($userID) {
                                    $user_ids[] = $userID;
                                }
                                $user_mobile_numbers[] = $fileVal[0];
                                $user_messages[] = "You have recived a due payment of " . $dataToSave['PaymentItem']['title'] . " for Rs. " . $fileVal[1] . ".";
                                $fileToSave[] = array(
                                    'payment_item_id' => $lastInserID,
                                    'mobile' => $fileVal[0],
                                    'amount' => $fileVal[1],
                                    'comment' => isset($fileVal[2]) ? $fileVal[2] : '',
                                    'subcscriber_id' => $subscriberID,
                                    'user_id' => $userID,
                                    'thinapp_id' => $dataToSave['PaymentItem']['thinapp_id'],
                                );
                            }

                            if ($this->PaymentFileAmount->saveAll($fileToSave) !== true) {
                                $datasource->rollback();
                                $this->Session->setFlash(__('Payment item could not be added.'), 'default', array(), 'error');
                            } else {
                                $datasource->commit();
                                $message = "You have recived a due payment of " . $dataToSave['PaymentItem']['title'];
                                $total_sms = Custom::get_total_sms_thinapp($login['thinapp_id'], 'T');
                                if (!empty($total_sms) && !empty($user_mobile_numbers)) {


                                    // $this->Custom->send_bulk_sms($login['thinapp_id'],$message,$user_mobile_numbers,$login['thinapp_id']);
                                    Custom::SendBulkSmsToNumbersWithMessage($user_mobile_numbers, $user_messages, $login['thinapp_id'], $login['id']);
                                }

                                if (!empty($user_ids)) {
                                    $user_firebase_token_array = WebservicesFunction::get_users_token($user_ids);
                                    if (!empty($user_firebase_token_array)) {
                                        $sendArray = array(
                                            'data' => array(
                                                'thinapp_id' => $login['thinapp_id'],
                                                'channel_id' => 0,
                                                'payment_id' => $lastInserID,
                                                'flag' => 'PAYMENT_VIA_FILE',
                                                'title' => "New payment Request",
                                                'message' => mb_strimwidth("Subscriber - " . $message, 0, 80, '...'),
                                                'description' => mb_strimwidth($message, 0, 100, '...'),
                                                'chat_reference' => '',
                                                'module_type' => 'SUBSCRIBE',
                                                'module_type_id' => 0,
                                                'firebase_reference' => ""
                                            )
                                        );
                                        $this->Custom->send_notification_to_multiple_device($sendArray, $user_firebase_token_array);
                                    }

                                }


                                $this->Session->setFlash(__('Payment item added successfully.'), 'default', array(), 'success');
                                $this->redirect(array('controller' => 'app_admin', 'action' => 'payment_item_list'));
                            }
                        } else {
                            $datasource->commit();
                            $this->Session->setFlash(__('Payment item added successfully.'), 'default', array(), 'success');
                            $this->redirect(array('controller' => 'app_admin', 'action' => 'payment_item_list'));
                        }
                    } else {
                        $this->Session->setFlash(__('oops,Payment item could not be added.'), 'default', array(), 'error');
                    }
                }
            } catch (Exception $e) {
                $datasource->rollback();
                $this->Session->setFlash(__('oops,Payment item could not be added.'), 'default', array(), 'error');
            }
        }
        $channels = $this->Channel->find('list', array('fields' => array('Channel.id', 'Channel.channel_name'), 'conditions' => array('Channel.user_id' => $login['id'])));
        $this->set(compact('channels'));
    }

    public function search_payment_item_list()
    {
        $reqData = $this->request->query;
        $pram = array();
        if (!empty($reqData['title'])) {
            $pram['t'] = $reqData['title'];
        }
        $this->redirect(
            array(
                "controller" => "app_admin",
                "action" => "payment_item_list",
                "?" => $pram,
            )
        );
    }

    public function payment_item_list()
    {
        $login = $this->Session->read('Auth.User.User');
        $searchData = $this->request->query;
        $conditions = array();
        if (isset($searchData['t']) && !empty($searchData['t'])) {
            $this->request->data['Search']['title'] = $searchData['t'];
            $conditions["PaymentItem.title LIKE"] = '%' . $searchData['t'] . '%';
        }
        $conditions["PaymentItem.thinapp_id"] = $login['thinapp_id'];
        $this->paginate = array(
            'filds' => array('PaymentItem.*'),
            'conditions' => $conditions,
            'contain' => array('PaymentFileAmount'),
            'order' => 'PaymentItem.id DESC',
            'limit' => 10
        );
        $paymentItem = $this->paginate('PaymentItem');
        //  pr($paymentItem); die;
        $this->set(compact('paymentItem'));
    }

    public function delete_payment_item()
    {
        $this->layout = false;
        $this->autoRender = false;
        $paymentItemID = base64_decode($this->request->data['id']);
        if ($this->request->is(array('ajax'))) {

            $datasource = $this->PaymentItem->getDataSource();
            try {
                $datasource->begin();
                $delete = $this->PaymentItem->delete(array('PaymentItem.id' => $paymentItemID));
                $deleteFile = $this->PaymentFileAmount->delete(array('PaymentFileAmount.payment_item_id' => $paymentItemID));
                if ($delete && $deleteFile) {
                    $datasource->commit();
                    $response['status'] = 1;
                    $response['message'] = "Deleted successfully.";
                } else {
                    $datasource->rollback();
                    $response['status'] = 0;
                    $response['message'] = "Payment item could not be deleted.";
                }
            } catch (Exception $e) {
                $datasource->rollback();
                $response['status'] = 0;
                $response['message'] = "Payment item could not be deleted.";
            }

            return json_encode($response);
        } else {
            exit();
        }
    }

    public function get_edit_payment_item()
    {
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $response = array();
            $paymentItemID = base64_decode($this->request->data['editPaymentID']);
            $rowData = $this->PaymentItem->find("first",
                array(
                    "conditions" => array("PaymentItem.id" => $paymentItemID),
                    "contain" => false,
                )
            );

            if (!empty($rowData)) {
                $html = "";
                $response['status'] = '1';
                $response['title'] = $rowData['PaymentItem']['title'];
                $response['description'] = $rowData['PaymentItem']['description'];

            } else {
                $response['status'] = '0';
            }

            $response = json_encode($response, true);
            echo $response;
            exit();
        }
    }

    public function edit_payment_item()
    {

        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $response = array();
            $upload_file = '';
            $dataToUpload = array();
            if (!empty($_FILES['image']['name'])) {
                $upload_file = $this->Custom->uploadFileToAws($_FILES['image']);
                if ($upload_file != '') {
                    $dataToUpload['PaymentItem']['image_path'] = $upload_file;
                    $dataToUpload['PaymentItem']['title'] = $_POST['title'];
                    $dataToUpload['PaymentItem']['description'] = $_POST['description'];
                    $dataToUpload['PaymentItem']['id'] = base64_decode($_POST['id']);
                } else {
                    $response['status'] = 0;
                    $response['message'] = 'Failed to update';
                }
            } else {
                $dataToUpload['PaymentItem']['title'] = $_POST['title'];
                $dataToUpload['PaymentItem']['description'] = $_POST['description'];
                $dataToUpload['PaymentItem']['id'] = base64_decode($_POST['id']);
            }

            if (!empty($dataToUpload)) {
                if ($this->PaymentItem->save($dataToUpload['PaymentItem'])) {
                    $response['status'] = 1;
                    $response['message'] = 'DONE';
                } else {
                    $response['status'] = 0;
                    $response['message'] = 'Failed to update';
                }

            }

            $response = json_encode($response, true);
            echo $response;
            exit();
        }
    }

    public function change_payment_item_status()
    {
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $response = array();
            $paymentItemID = base64_decode($this->request->data['id']);
            $data = $this->PaymentItem->find('first', array('conditions' => array('PaymentItem.id' => $paymentItemID), 'fields' => array('PaymentItem.status', 'PaymentItem.id'), 'contain' => false));
            $statusToChange = ($data['PaymentItem']['status'] == 'ACTIVE') ? 'INACTIVE' : 'ACTIVE';
            $data['PaymentItem']['status'] = $statusToChange;
            if ($this->PaymentItem->saveAll($data)) {
                $response['status'] = 1;
                $response['text'] = $statusToChange;
            } else {
                $response['status'] = 0;
                $response['message'] = 'Sorry, Operation Failed.';
            }
            $response = json_encode($response, true);
            echo $response;
            exit();
        }
    }

    public function view_payment_item()
    {
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $response = array();
            $paymentItemID = $this->request->data['paymentItemID'];
            $rowData = $this->PaymentItem->find("first",
                array(
                    "conditions" => array("PaymentItem.id" => $paymentItemID),
                    "contain" => array('Channel'),
                )
            );

            if (!empty($rowData)) {
                $html = "";
                $response['status'] = '1';
                if (!empty($rowData['PaymentItem']['image_path'])) {
                    $html .= "<tr><td>Image:</td><td><img src='" . $rowData['PaymentItem']['image_path'] . "' style='width:150px;'> </td></tr>";
                }

                $html .= "<tr><td>Title:</td><td>" . (($rowData['PaymentItem']['title'] != '') ? $rowData['PaymentItem']['title'] : '-') . "</td></tr>";
                $html .= "<tr><td>Description:</td><td>" . (($rowData['PaymentItem']['description'] != '') ? $rowData['PaymentItem']['description'] : '-') . "</td></tr>";
                $html .= "<tr><td>Payment Type:</td><td>" . (($rowData['PaymentItem']['payment_type'] != '') ? $rowData['PaymentItem']['payment_type'] : '-') . "</td></tr>";
                $html .= "<tr><td>Amount Type:</td><td>" . (($rowData['PaymentItem']['amount_type'] != '') ? $rowData['PaymentItem']['amount_type'] : '-') . "</td></tr>";
                $html .= "<tr><td>Amount:</td><td>" . (($rowData['PaymentItem']['amount'] != '') ? $rowData['PaymentItem']['amount'] : '-') . "</td></tr>";
                $html .= "<tr><td>Discount Enable:</td><td>" . (($rowData['PaymentItem']['discount_enable'] != '') ? $rowData['PaymentItem']['discount_enable'] : '-') . "</td></tr>";
                $html .= "<tr><td>Discount Type:</td><td>" . (($rowData['PaymentItem']['discount_type'] != '') ? $rowData['PaymentItem']['discount_type'] : '-') . "</td></tr>";
                $html .= "<tr><td>Discount Value:</td><td>" . (($rowData['PaymentItem']['discount_value'] != '') ? $rowData['PaymentItem']['discount_value'] : '-') . "</td></tr>";
                $html .= "<tr><td>Total Amount:</td><td>" . (($rowData['PaymentItem']['total_amount'] != '') ? $rowData['PaymentItem']['total_amount'] : '-') . "</td></tr>";
                $html .= "<tr><td>Quantity Type:</td><td>" . (($rowData['PaymentItem']['quantity_type'] != '') ? $rowData['PaymentItem']['quantity_type'] : '-') . "</td></tr>";
                $html .= "<tr><td>Quantity:</td><td>" . (($rowData['PaymentItem']['quantity'] != '') ? $rowData['PaymentItem']['quantity'] : '-') . "</td></tr>";
                $html .= "<tr><td>Ask For Quanitiy:</td><td>" . (($rowData['PaymentItem']['ask_for_quanitiy'] != '') ? $rowData['PaymentItem']['ask_for_quanitiy'] : '-') . "</td></tr>";
                $html .= "<tr><td>Show Last Date:</td><td>" . (($rowData['PaymentItem']['show_last_date'] != '') ? $rowData['PaymentItem']['show_last_date'] : '-') . "</td></tr>";
                $html .= "<tr><td>Last Date:</td><td>" . (($rowData['PaymentItem']['last_date'] != '') ? $rowData['PaymentItem']['last_date'] : '-') . "</td></tr>";
                $html .= "<tr><td>Question To Ask:</td><td>" . (($rowData['PaymentItem']['question_to_ask'] != '') ? $rowData['PaymentItem']['question_to_ask'] : '-') . "</td></tr>";
                $html .= "<tr><td>Home Delivery:</td><td>" . (($rowData['PaymentItem']['home_delivery'] != '') ? $rowData['PaymentItem']['home_delivery'] : '-') . "</td></tr>";
                $html .= "<tr><td>Share On:</td><td>" . (($rowData['PaymentItem']['share_on'] != '') ? $rowData['PaymentItem']['share_on'] : '-') . "</td></tr>";
                $html .= "<tr><td>Channel:</td><td>" . ((isset($rowData['Channel']['channel_name']) && ($rowData['Channel']['channel_name'] != '')) ? $rowData['Channel']['channel_name'] : '-') . "</td></tr>";
                $html .= "<tr><td>Status:</td><td>" . (($rowData['PaymentItem']['status'] != '') ? $rowData['PaymentItem']['status'] : '-') . "</td></tr>";
                $html .= "<tr><td>Created:</td><td>" . date('d-M-Y H:i:s', strtotime($rowData['PaymentItem']['created'])) . "</td></tr>";
                $response['html'] = $html;
            } else {
                $response['status'] = '0';
            }

            $response = json_encode($response, true);
            echo $response;
            exit();
        }
    }

    public function search_list_payment_ietm_file($PaymentItemID = null)
    {

        $reqData = $this->request->query;
        $pram = array();
        if (!empty($reqData['mobile'])) {
            $pram['m'] = $reqData['mobile'];
        }
        $this->redirect(
            array(
                "controller" => "app_admin",
                "action" => "list_payment_ietm_file",
                $PaymentItemID,
                "?" => $pram,
            )
        );

    }

    public function export_payment_ietm_file($PaymentItemID = null)
    {
        $idForSearch = $PaymentItemID;
        $PaymentItemID = base64_decode($PaymentItemID);
        $login = $this->Session->read('Auth.User.User');
        $searchData = $this->request->query;
        $conditions = array();
        $searchToExport = array();
        if (isset($searchData['m']) && !empty($searchData['m'])) {
            $this->request->data['Search']['mobile'] = $searchData['m'];
            $conditions["PaymentFileAmount.mobile LIKE"] = '%' . $searchData['m'] . '%';
            $searchToExport['m'] = $searchData['m'];
        }

        $conditions["PaymentFileAmount.payment_item_id"] = $PaymentItemID;
        $paymentFileAmount = $this->PaymentFileAmount->find('all', array(
            'fields' => array('PaymentFileAmount.mobile', 'PaymentFileAmount.amount', 'PaymentFileAmount.status', 'PaymentFileAmount.payment_status'),
            'conditions' => $conditions,
            'contain' => false,
            'order' => 'PaymentFileAmount.id DESC',
        ));
        $data = array();
        foreach ($paymentFileAmount as $fileAmount) {
            $data[] = $fileAmount['PaymentFileAmount'];
        }
        $fileName = 'filePayment.xls';
        $headerRow = array('Mobile', 'Amount', 'Status', 'Payment Status',);
        $this->Custom->exportExcel($fileName, $headerRow, $data);
        die;
    }

    public function list_payment_ietm_file($PaymentItemID = null)
    {
        $idForSearch = $PaymentItemID;
        $PaymentItemID = base64_decode($PaymentItemID);
        $login = $this->Session->read('Auth.User.User');
        $searchData = $this->request->query;
        $conditions = array();
        $searchToExport = array();
        if (isset($searchData['m']) && !empty($searchData['m'])) {
            $this->request->data['Search']['mobile'] = $searchData['m'];
            $conditions["PaymentFileAmount.mobile LIKE"] = '%' . $searchData['m'] . '%';
            $searchToExport['m'] = $searchData['m'];
        }

        $conditions["PaymentFileAmount.payment_item_id"] = $PaymentItemID;
        $this->paginate = array(
            'conditions' => $conditions,
            'contain' => false,
            'order' => 'PaymentFileAmount.id DESC',
            'limit' => 10
        );
        $paymentFileAmount = $this->paginate('PaymentFileAmount');
        $this->set(compact('paymentFileAmount', 'idForSearch', 'searchToExport'));
    }

    public function change_payment_file_status($paymentFileID = null)
    {
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $response = array();
            $paymentFileID = base64_decode($this->request->data['id']);
            $data = $this->PaymentFileAmount->find('first', array('conditions' => array('PaymentFileAmount.id' => $paymentFileID), 'fields' => array('PaymentFileAmount.status', 'PaymentFileAmount.id'), 'contain' => false));
            $statusToChange = ($data['PaymentFileAmount']['status'] == 'ACTIVE') ? 'INACTIVE' : 'ACTIVE';
            $data['PaymentFileAmount']['status'] = $statusToChange;
            if ($this->PaymentFileAmount->saveAll($data)) {
                $response['status'] = 1;
                $response['text'] = $statusToChange;
            } else {
                $response['status'] = 0;
                $response['message'] = 'Sorry, Operation Failed.';
            }
            $response = json_encode($response, true);
            echo $response;
            exit();
        }
    }

    public function search_payment_item_list_transactions()
    {
        $reqData = $this->request->query;
        $pram = array();
        if (!empty($reqData['payment_item_title'])) {
            $pram['p'] = $reqData['payment_item_title'];
        }
        if (!empty($reqData['mobile'])) {
            $pram['m'] = $reqData['mobile'];
        }
        if (!empty($reqData['unique_id'])) {
            $pram['u'] = $reqData['unique_id'];
        }
        if (!empty($reqData['redeem_time'])) {
            $pram['r'] = $reqData['redeem_time'];
        }
        if (!empty($reqData['transaction_status'])) {
            $pram['t'] = $reqData['transaction_status'];
        }

        $this->redirect(
            array(
                "controller" => "app_admin",
                "action" => "list_payment_item_transactions",
                "?" => $pram,
            )
        );
    }

    public function export_list_payment_item_transactions($PaymentItemID = null)
    {
        $PaymentItemID = base64_decode($PaymentItemID);
        $login = $this->Session->read('Auth.User.User');
        $searchData = $this->request->query;
        $conditions = array();
        if (isset($searchData['p']) && !empty($searchData['p'])) {
            $this->request->data['Search']['payment_item_title'] = $searchData['p'];
            $conditions["PaymentItem.title LIKE"] = '%' . $searchData['p'] . '%';
        }
        if (isset($searchData['m']) && !empty($searchData['m'])) {
            $this->request->data['Search']['mobile'] = $searchData['m'];
            $conditions["AppPaymentTransaction.mobile LIKE"] = '%' . $searchData['m'] . '%';
        }
        if (isset($searchData['u']) && !empty($searchData['u'])) {
            $this->request->data['Search']['unique_id'] = $searchData['u'];
            $conditions["AppPaymentTransaction.unique_id LIKE"] = '%' . $searchData['u'] . '%';
        }
        if (isset($searchData['r']) && !empty($searchData['r'])) {
            $this->request->data['Search']['redeem_time'] = $searchData['r'];
            $conditions["AppPaymentTransaction.redeem_time >="] = $searchData['r'];
            $conditions["AppPaymentTransaction.redeem_time <="] = $searchData['r'];
        }
        if (isset($searchData['t']) && !empty($searchData['t'])) {
            $this->request->data['Search']['transaction_status'] = $searchData['t'];
            $conditions["AppPaymentTransaction.transaction_status"] = $searchData['t'];
        }
        if ($PaymentItemID != '') {
            $conditions["AppPaymentTransaction.payment_item_id"] = $PaymentItemID;
            $this->request->data['Search']['payment_item_id'] = $PaymentItemID;
        }

        $appPaymentTransactions = $this->AppPaymentTransaction->find('all', array(
            'conditions' => $conditions,
            'contain' => array('PaymentItem'),
            'order' => 'AppPaymentTransaction.id DESC',
        ));
        $data = array();
        foreach ($appPaymentTransactions as $PaymentTransaction) {
            $dataToInsert = array();
            $dataToInsert[] = $PaymentTransaction['PaymentItem']['title'];
            $dataToInsert[] = $PaymentTransaction['AppPaymentTransaction']['mobile'];
            $dataToInsert[] = $PaymentTransaction['AppPaymentTransaction']['quantity'];
            $dataToInsert[] = $PaymentTransaction['AppPaymentTransaction']['total_amount'];
            $dataToInsert[] = $PaymentTransaction['AppPaymentTransaction']['unique_id'];
            $dataToInsert[] = $PaymentTransaction['AppPaymentTransaction']['status'];
            $dataToInsert[] = $PaymentTransaction['AppPaymentTransaction']['transaction_status'];
            $dataToInsert[] = $PaymentTransaction['AppPaymentTransaction']['redeem_status'];
            $data[] = $dataToInsert;
        }
        $fileName = 'paymentTransactions.xls';
        $headerRow = array('Item Title', 'Mobile', 'Quantity', 'Total Amount', 'Unique ID', 'Status', 'Payment Status', 'Redeem Status');
        $this->Custom->exportExcel($fileName, $headerRow, $data);
        die;
    }

    public function list_payment_item_transactions($PaymentItemID = null)
    {
        $idForSearch = $PaymentItemID;
        $PaymentItemID = base64_decode($PaymentItemID);
        $login = $this->Session->read('Auth.User.User');

        $searchData = $this->request->query;
        $conditions = array();
        $searchToExport = array();
        if (isset($searchData['p']) && !empty($searchData['p'])) {
            $this->request->data['Search']['payment_item_title'] = $searchData['p'];
            $conditions["PaymentItem.title LIKE"] = '%' . $searchData['p'] . '%';
            $searchToExport['p'] = $searchData['p'];
        }
        if (isset($searchData['m']) && !empty($searchData['m'])) {
            $this->request->data['Search']['mobile'] = $searchData['m'];
            $conditions["AppPaymentTransaction.mobile LIKE"] = '%' . $searchData['m'] . '%';
            $searchToExport['m'] = $searchData['m'];
        }
        if (isset($searchData['u']) && !empty($searchData['u'])) {
            $this->request->data['Search']['unique_id'] = $searchData['u'];
            $conditions["AppPaymentTransaction.unique_id LIKE"] = '%' . $searchData['u'] . '%';
            $searchToExport['u'] = $searchData['u'];
        }
        if (isset($searchData['r']) && !empty($searchData['r'])) {
            $this->request->data['Search']['redeem_time'] = $searchData['r'];
            $conditions["AppPaymentTransaction.redeem_time >="] = $searchData['r'];
            $conditions["AppPaymentTransaction.redeem_time <="] = $searchData['r'];
            $searchToExport['r'] = $searchData['r'];
        }
        if (isset($searchData['t']) && !empty($searchData['t'])) {
            $this->request->data['Search']['transaction_status'] = $searchData['t'];
            $conditions["AppPaymentTransaction.transaction_status"] = $searchData['t'];
            $searchToExport['t'] = $searchData['t'];
        }
        if ($PaymentItemID != '') {
            $conditions["AppPaymentTransaction.payment_item_id"] = $PaymentItemID;
            $this->request->data['Search']['payment_item_id'] = $PaymentItemID;
            $paymentItem = $this->PaymentItem->find('first', array('fields' => array('PaymentItem.title'), 'conditions' => array('PaymentItem.id' => $PaymentItemID)));
            $this->request->data['Search']['payment_item_title'] = $paymentItem['PaymentItem']['title'];
        }

        $this->paginate = array(
            'conditions' => $conditions,
            'contain' => array('PaymentItem'),
            'order' => 'AppPaymentTransaction.id DESC',
            'limit' => 10
        );

        $appPaymentTransactions = $this->paginate('AppPaymentTransaction');

        $this->set(compact('appPaymentTransactions', 'searchToExport', 'idForSearch'));
    }

    public function change_app_payment_transaction_status()
    {
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $response = array();
            $appPaymentTransactionItemID = base64_decode($this->request->data['id']);
            $data = $this->AppPaymentTransaction->find('first', array('conditions' => array('AppPaymentTransaction.id' => $appPaymentTransactionItemID), 'fields' => array('AppPaymentTransaction.status', 'AppPaymentTransaction.id'), 'contain' => false));
            $statusToChange = ($data['AppPaymentTransaction']['status'] == 'ACTIVE') ? 'INACTIVE' : 'ACTIVE';
            $data['AppPaymentTransaction']['status'] = $statusToChange;
            if ($this->AppPaymentTransaction->saveAll($data)) {
                $response['status'] = 1;
                $response['text'] = $statusToChange;
            } else {
                $response['status'] = 0;
                $response['message'] = 'Sorry, Operation Failed.';
            }
            $response = json_encode($response, true);
            echo $response;
            exit();
        }
    }

    public function change_app_payment_transaction_redeem_status()
    {
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $response = array();
            $appPaymentTransactionItemID = base64_decode($this->request->data['id']);
            $data = $this->AppPaymentTransaction->find('first', array('conditions' => array('AppPaymentTransaction.id' => $appPaymentTransactionItemID), 'fields' => array('AppPaymentTransaction.redeem_status', 'AppPaymentTransaction.id'), 'contain' => false));
            $statusToChange = ($data['AppPaymentTransaction']['redeem_status'] == 'NO') ? 'YES' : 'NO';

            if ($statusToChange == 'YES') {

                $data['AppPaymentTransaction']['redeem_status'] = $statusToChange;
                $data['AppPaymentTransaction']['redeem_time'] = date("Y-m-d H:i:s");

                if ($this->AppPaymentTransaction->saveAll($data)) {
                    $response['status'] = 1;
                    $response['text'] = $statusToChange;
                } else {
                    $response['status'] = 2;
                    $response['message'] = 'Sorry, Operation Failed.';
                }

            } else {
                $response['status'] = 0;
                $response['message'] = 'Already redeemed.';
            }

            $response = json_encode($response, true);
            echo $response;
            exit();
        }
    }

    public function view_payment_item_order()
    {
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $response = array();
            $appPaymentTransactionID = $this->request->data['appPaymentTransactionID'];
            $rowData = $this->AppPaymentTransaction->find("first",
                array(
                    "conditions" => array("AppPaymentTransaction.id" => $appPaymentTransactionID),
                    "contain" => array('PaymentItem'),
                )
            );

            if (!empty($rowData)) {
                $html = "";
                $response['status'] = '1';
                if (!empty($rowData['PaymentItem']['image_path'])) {
                    $html .= "<tr><td>Image:</td><td><img src='" . $rowData['PaymentItem']['image_path'] . "' style='width:150px;'> </td></tr>";
                }
                $html .= "<tr><td>Title:</td><td>" . (($rowData['PaymentItem']['title'] != '') ? $rowData['PaymentItem']['title'] : '-') . "</td></tr>";
                $html .= "<tr><td>Mobile:</td><td>" . (($rowData['AppPaymentTransaction']['mobile'] != '') ? $rowData['AppPaymentTransaction']['mobile'] : '-') . "</td></tr>";
                if (!empty($rowData['PaymentItem']['question_to_ask'])) {
                    $html .= "<tr><td>" . $rowData['PaymentItem']['question_to_ask'] . "</td><td>" . (($rowData['AppPaymentTransaction']['answer_of_question'] != '') ? $rowData['AppPaymentTransaction']['answer_of_question'] : '-') . "</td></tr>";
                }
                if ($rowData['PaymentItem']['home_delivery'] == 'YES') {
                    $html .= "<tr><td>Delivery Address:</td><td>" . (($rowData['AppPaymentTransaction']['delivery_address'] != '') ? $rowData['AppPaymentTransaction']['delivery_address'] : '-') . "</td></tr>";
                }
                $html .= "<tr><td>Transaction Status:</td><td>" . (($rowData['AppPaymentTransaction']['transaction_status'] != '') ? $rowData['AppPaymentTransaction']['transaction_status'] : '-') . "</td></tr>";
                $html .= "<tr><td>Reason:</td><td>" . (($rowData['AppPaymentTransaction']['reason'] != '') ? $rowData['AppPaymentTransaction']['reason'] : '-') . "</td></tr>";
                $html .= "<tr><td>Redeem Status:</td><td>" . (($rowData['AppPaymentTransaction']['redeem_status'] != '') ? $rowData['AppPaymentTransaction']['redeem_status'] : '-') . "</td></tr>";
                $html .= "<tr><td>Redeem Time:</td><td>" . $rowData['AppPaymentTransaction']['redeem_time'] . "</td></tr>";
                $html .= "<tr><td>Transaction ID:</td><td>" . $rowData['AppPaymentTransaction']['transaction_id'] . "</td></tr>";
                $html .= "<tr><td>Unique ID:</td><td>" . $rowData['AppPaymentTransaction']['unique_id'] . "</td></tr>";
                $html .= "<tr><td>Created:</td><td>" . $rowData['AppPaymentTransaction']['created'] . "</td></tr>";
                $html .= "<tr><td>Amount:</td><td>" . $rowData['AppPaymentTransaction']['amount'] . "</td></tr>";
                $html .= "<tr><td>Quantity:</td><td>" . $rowData['AppPaymentTransaction']['quantity'] . "</td></tr>";
                if (!empty($rowData['AppPaymentTransaction']['discount_value'])) {
                    $html .= "<tr><td>Discount:</td><td>" . $rowData['AppPaymentTransaction']['discount_value'] . ($rowData['AppPaymentTransaction']['discount_type'] == 'PERCENTAGE') ? '%' : 'Rs' . "</td></tr>";
                }
                $html .= "<tr><td>Total Amount:</td><td>" . $rowData['AppPaymentTransaction']['total_amount'] . "</td></tr>";
                $response['html'] = $html;
            } else {
                $response['status'] = '0';
            }

            $response = json_encode($response, true);
            echo $response;
            exit();
        }
    }



    public function search_drive()
    {

        $reqData = $this->request->query;
        if (!empty($reqData['category'])) {
            $pram['c'] = $reqData['category'];
        }
        if (!empty($reqData['mobile'])) {
            $pram['m'] = $reqData['mobile'];
        }

        if (!empty($reqData['from_date'])) {
            $pram['fd'] = $reqData['from_date'];
        }
        if (!empty($reqData['to_date'])) {
            $pram['td'] = $reqData['to_date'];
        }

        if (!empty($reqData['name'])) {
            $pram['n'] = $reqData['name'];
        }

        if (!empty($reqData['ft'])) {
            $pram['ft'] = $reqData['ft'];
        }

        if (isset($reqData['doctor_id']) && !empty($reqData['doctor_id'])) {
            $pram['di'] = $reqData['doctor_id'];
        }

        if (!empty($reqData['int_folder'])) {
            $pram['if'] = $reqData['int_folder'];
        }
        $this->redirect(
            array(
                "controller" => "app_admin",
                "action" => "drive",
                "?" => $pram,
            )
        );
    }

    public function drive()
    {
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User');
        $searchData = $this->request->query;
        $folder_type = "PERSONAL";

        if (!$this->Custom->check_app_enable_permission($login['User']['thinapp_id'], "DOCUMENT_MANAGEMENT")) {
            $this->redirect(array('controller' => 'app_admin', 'action' => 'dashboard'));
        }


        $type = @$searchData['ft'];
        $this->request->data['Search']['ft'] = $type;

        $search = array();
        $personal_search = array();
        if (isset($searchData['n']) && !empty($searchData['n'])) {
            $this->request->data['Search']['name'] = $searchData['n'];
            $search["DriveFolder.folder_name like "] = "%" . $searchData['n'] . "%";

            $personal_search["OR"] = array(
                "DriveFolder.folder_name like " => "%" . $searchData['n'] . "%",
                "Children.child_name like " => "%" . $searchData['n'] . "%",
                "AppointmentCustomer.first_name like " => "%" . $searchData['n'] . "%"
            );

            $object_name = $searchData['n'];
        }

        if (isset($searchData['m']) && !empty($searchData['m'])) {
            $this->request->data['Search']['mobile'] = $searchData['m'];
            if ($login['USER_ROLE'] == 'ADMIN') {
                $search["DriveFolder.mobile like "] = "%" . $searchData['m'] . "%";

                if (isset($personal_search['OR'])) {
                    $mobile_tmp = $personal_search['OR'];
                    $folder_tmp = array(
                        "DriveFolder.mobile like " => "%" . $searchData['m'] . "%",
                        "Children.mobile like " => "%" . $searchData['m'] . "%",
                        "AppointmentCustomer.mobile like " => "%" . $searchData['m'] . "%"
                    );
                    unset($personal_search['OR']);
                    $personal_search['AND'] = array(array('OR' => $mobile_tmp), array('OR' => $folder_tmp));


                } else {
                    $personal_search["OR"] = array(
                        "DriveFolder.mobile like " => "%" . $searchData['m'] . "%",
                        "Children.mobile like " => "%" . $searchData['m'] . "%",
                        "AppointmentCustomer.mobile like " => "%" . $searchData['m'] . "%"
                    );
                }

            } else {
                $search["DriveFolder.folder_add_from_number like "] = "%" . $searchData['m'] . "%";
                $personal_search["DriveFolder.folder_add_from_number like "] = "%" . $searchData['m'] . "%";

            }


        }

        if (isset($searchData['c']) && !empty($searchData['c'])) {
            $this->request->data['Search']['category'] = $searchData['c'];
            $search["DriveFile.file_category_master_id"] = $searchData['m'];

        }

        if (isset($searchData['di']) && !empty($searchData['di'])) {
            $this->request->data['Search']['doctor_id'] = $searchData['di'];
            $search["DriveFile.doctor_id"] = $searchData['di'];
            $personal_search["DriveFile.doctor_id"] = $searchData['di'];

        }

        if (isset($searchData['fd']) && !empty($searchData['fd']) && isset($searchData['td']) && !empty($searchData['td'])) {

            $this->request->data['Search']['from_date'] = $searchData['fd'];
            $this->request->data['Search']['to_date'] = $searchData['td'];

            $from_date = DateTime::createFromFormat('d/m/Y', $searchData['fd']);
            $search["Date(DriveFolder.created) >="] = $from_date->format('Y-m-d');

            $to_date = DateTime::createFromFormat('d/m/Y', $searchData['td']);
            $search["Date(DriveFolder.created) <="] = $to_date->format('Y-m-d');

        } else {

            if (count($searchData) > 1) {
                if (isset($searchData['fd']) && !empty($searchData['fd']) && isset($searchData['td']) && !empty($searchData['td'])) {
                    $this->request->data['Search']['from_date'] = date('d/m/Y');
                    $this->request->data['Search']['to_date'] = date('d/m/Y');
                    $search["Date(DriveFolder.created) >="] = date('Y-m-d');
                    $search["Date(DriveFolder.created) <="] = date('Y-m-d');
                }
            } else {
                $this->request->data['Search']['from_date'] = date('d/m/Y');
                $this->request->data['Search']['to_date'] = date('d/m/Y');
                $search["Date(DriveFolder.created) >="] = date('Y-m-d');
                $search["Date(DriveFolder.created) <="] = date('Y-m-d');
            }
        }


        if (empty($type) || $type == 'sf') {
            if (isset($searchData['if']) && !empty($searchData['if'])) {
                $search["DriveFolder.is_instruction_bucket"] = $searchData['if'];
                $this->request->data['Search']['int_folder'] = $searchData['if'];
            } else {
                $search["DriveFolder.is_instruction_bucket"] = "NO";
            }
        }


        $data = array();
        if ($type == "sf") {
            $this->paginate = array(
                "conditions" => array(
                    "DriveShare.thinapp_id" => $login['User']['thinapp_id'],
                    "DriveShare.share_with_mobile" => $login['User']['mobile'],
                    "DriveShare.shared_object" => "FOLDER",
                    $search

                ),
                'joins' => array(
                    array('table' => 'drive_files',
                        'alias' => 'DriveFile',
                        'type' => 'LEFT',
                        'conditions' => array(
                            'DriveFile.drive_folder_id = DriveFolder.id'
                        )
                    )
                ),
                'contain' => array("DriveFolder"),
                'limit' => DRIVE_PAGINATION_LIMIT,
                'fields' => array('DriveFolder.*', 'DriveShare.id'),
                'group' => "DriveFolder.id",
                'order' => array('DriveFolder.created' => 'desc')
            );
            $data = $this->paginate('DriveShare');
            $folder_type = "SHARED_FOLDER";
        }
        else if ($type == "sfile") {
            if (!empty($object_name)) {
                $search["DriveFile.file_name LIKE"] = '%' . $object_name . '%';
            }
            $this->paginate = array(
                "conditions" => array(
                    "DriveShare.thinapp_id" => $login['User']['thinapp_id'],
                    "DriveShare.share_with_mobile" => $login['User']['mobile'],
                    "DriveShare.shared_object" => "FILE",
                    $search
                ),
                'contain' => array("DriveFile"),
                'limit' => DRIVE_PAGINATION_LIMIT,
                'fields' => array('DriveFile.*', 'DriveShare.id'),
                'order' => array('DriveFile.created' => 'desc')
            );
            $data = $this->paginate('DriveShare');
            $folder_type = "SHARED_FILE";

        }
        else {

            $condition["DriveFolder.thinapp_id"] = $login['User']['thinapp_id'];
        	
        	$condition["DriveFolder.status"] = 'ACTIVE';
            if ($login['USER_ROLE'] == 'ADMIN') {
                $condition["DriveFolder.user_id"] = $login['User']['id'];
            } else {
                $condition["OR"] = array(
                    'OR'=>array(
                        "DriveFolder.appointment_customer_id >" => 0,
                        "DriveFolder.children_id >" => 0
                    ),
                    "DriveFolder.user_id" =>  $login['User']['id']
                );
            }

            $this->paginate = array(
                "conditions" => array(
                    $condition,
                    $personal_search,
                ),
                'joins' => array(
                    array('table' => 'drive_files',
                        'alias' => 'DriveFile',
                        'type' => 'LEFT',
                        'conditions' => array(
                            'DriveFile.drive_folder_id = DriveFolder.id'
                        )
                     )
                ),
                'contain' => array('AppointmentCustomer', 'Children'),
                'limit' => DRIVE_PAGINATION_LIMIT,
                'fields' => array('DISTINCT DriveFolder.id','DriveFolder.*', 'AppointmentCustomer.first_name', 'AppointmentCustomer.mobile', 'Children.child_name', 'Children.mobile'),
                'order' => array('DriveFolder.modified' => 'desc')
            );
            $data = $this->paginate('DriveFolder');

            $folder_type = "PERSONAL";
        }

        $instruction_book = Custom::check_module_enable_permission($login['User']['thinapp_id'], 'INSTRUCTION_BOOK');
        $this->set(compact(array('data', 'folder_type', 'instruction_book')));


    }



    public function search_drive_data()
    {
        $reqData = $this->request->query;
        $pram = array();
        if (!empty($reqData['fi'])) {
            $pram['fi'] = $reqData['fi'];
        }
        $reqData = $this->request->data;
        if (!empty($reqData['type'])) {
            $pram['t'] = $reqData['type'];
        }

        if (!empty($reqData['cat_type'])) {
            $pram['ct'] = $reqData['cat_type'];
        }

        if (!empty($reqData['name'])) {
            $pram['n'] = $reqData['name'];
        }

        $this->redirect(
            array(
                "controller" => "app_admin",
                "action" => "drive_data",
                "?" => $pram,
            )
        );
    }

    public function drive_data()
    {
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User');
        $searchData = $this->request->query;


        if (!$this->Custom->check_app_enable_permission($login['User']['thinapp_id'], "DOCUMENT_MANAGEMENT")) {
            $this->redirect(array('controller' => 'app_admin', 'action' => 'dashboard'));
        }
        $folder_id = 0;
        if (isset($searchData['fi']) && !empty(base64_decode($searchData['fi']))) {
            $folder_id = base64_decode($searchData['fi']);
            $conditions["DriveFile.drive_folder_id"] = $folder_id;
        }


        $conditions["DriveFile.status"] = 'ACTIVE';
        if (isset($searchData['t']) && !empty($searchData['t'])) {
            if ($searchData['t'] != "ANYTHING" && $searchData['t'] != "MEMO") {
                $conditions["DriveFile.file_type"] = $searchData['t'];

            }
            if ($searchData['t'] == "MEMO") {
                $conditions["DriveFile.listing_type"] = "MEMO";
            }
            $this->request->data['type'] = $searchData['t'];

        }

        if (isset($searchData['n']) && !empty($searchData['n'])) {
            if ($searchData['t'] == "MEMO") {
                $conditions["DriveFile.memo_text LIKE"] = '%' . $searchData['n'] . '%';
            } else {
                $conditions["DriveFile.file_name LIKE"] = '%' . $searchData['n'] . '%';
            }

        }

        if (isset($searchData['ct']) && !empty($searchData['ct']) && $searchData['ct'] != 1) {

            $this->request->data['cat_type'] = $searchData['ct'];
            $conditions["DriveFile.file_category_master_id"] = $searchData['ct'];
        }


        $this->paginate = array(
            "conditions" => array(
                "DriveFile.thinapp_id" => $login['User']['thinapp_id'],
                $conditions
            ),
            'contain' => false,
            'limit' => DRIVE_PAGINATION_LIMIT,
            'fields' => array('DriveFile.*'),
            'order' => array('DriveFile.id' => 'desc')
        );
        $file_list = $this->paginate('DriveFile');
        $id = base64_encode($folder_id);
        $instruction_book = Custom::check_module_enable_permission($login['User']['thinapp_id'], 'INSTRUCTION_BOOK');

        $is_owner = false;
        $folder_name = "Drive";
        $folder_data = Custom::get_folder_data($folder_id);
        if (!empty($folder_data)) {
            $is_owner = ($folder_data['user_id'] == $login['User']['id']) ? true : false;
            $folder_name = $folder_data['folder_name'];
        }

        $this->set(compact(array('instruction_book', 'file_list', 'id', 'is_owner', 'folder_name')));

    }


    public function search_folder()
    {
        $reqData = $this->request->query;
        $pram = array();
        $reqData = $this->request->data;
        if (!empty($reqData['type'])) {
            $pram['t'] = $reqData['type'];
        }
        if (!empty($reqData['name'])) {
            $pram['n'] = $reqData['name'];
        }

        $this->redirect(
            array(
                "controller" => "app_admin",
                "action" => "drive",
                "?" => $pram,
            )
        );
    }

    public function folder()
    {
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User');
        $searchData = $this->request->query;


        if (!$this->Custom->check_app_enable_permission($login['User']['thinapp_id'], "DOCUMENT_MANAGEMENT")) {
            $this->redirect(array('controller' => 'app_admin', 'action' => 'dashboard'));
        }

        $conditions = array();
        if (isset($searchData['t']) && !empty($searchData['t'])) {
            $conditions["DriveFolder.folder_type"] = $searchData['t'];
            $this->request->data['type'] = $searchData['t'];
        }
        if (isset($searchData['n']) && !empty($searchData['n'])) {
            $this->request->data['name'] = $searchData['n'];
            $conditions["DriveFolder.folder_name LIKE"] = '%' . $searchData['n'] . '%';
        }


        $this->paginate = array(
            "conditions" => array(
                "DriveFolder.thinapp_id" => $login['User']['thinapp_id'],
                $conditions
            ),
            'contain' => false,
            'limit' => DRIVE_PAGINATION_LIMIT,
            'fields' => array('DriveFolder.*'),
            'order' => array('DriveFolder.id' => 'desc')
        );
        $data = $this->paginate('DriveFolder');
        $this->set('folder_list', $data);
        $instruction_book = Custom::check_module_enable_permission($login['User']['thinapp_id'], 'INSTRUCTION_BOOK');
        $this->set('instruction_book', $instruction_book);

    }


    public function delete_file()
    {
        $this->layout = false;
        $this->autoRender = false;

        if ($this->request->is(array('ajax'))) {
            $data = array();
            $drive_file_id = $this->request->data['data_id'];
            $login = $this->Session->read('Auth.User.User');
            $data['thin_app_id'] = $login['thinapp_id'];
            $data['user_id'] = $login['id'];
            $data['app_key'] = APP_KEY;
            $data['drive_file_id'] = $drive_file_id;
            WebservicesFunction::delete_file($data);
        } else {
            exit();
        }

    }


    public function add_folder()
    {
        $this->layout = false;
        $this->autoRender = false;
        if ($this->request->is(array('ajax'))) {
            $response = array();
            $login = $this->Session->read('Auth.User.User');
            $data['thin_app_id'] = $login['thinapp_id'];
            $data['user_id'] = $login['id'];
            $data['app_key'] = APP_KEY;
            $data['mobile'] = $login['mobile'];
            $data['folder_name'] = trim($this->request->data['name']);
            $data['description'] = ($this->request->data['description']);
            $data['folder_type'] = "PUBLIC";
            $data['file_type'] = "";
            $data['file_name'] = "";
            $data['file_path'] = "";
            $data['file_size'] = "";
            $ins_book = ($this->request->data['ins_book'] == "true") ? "YES" : "NO";
            $data['is_instruction_bucket'] = $ins_book;
            return WebservicesFunction::add_folder($data);
        } else {
            exit();
        }

    }


    public function upload_file()
    {
        $this->layout = false;
        $this->autoRender = false;
        if ($this->request->is(array('ajax'))) {
            $upload_file = $this->Custom->uploadFileToAws($_FILES['file']);
            if ($upload_file) {
                $file_name = $_FILES['file']['name'];
                $file_size = $_FILES['file']['size'];
                $file_size = sprintf("%4.2f", $file_size / 1048576);
                $drive_folder_id = $_REQUEST['data']['folder_name'];
                $category_id = $_REQUEST['data']['cat_id'];
                $login = $this->Session->read('Auth.User.User');
                $data['thin_app_id'] = $login['thinapp_id'];
                $data['user_id'] = $login['id'];
                $data['app_key'] = APP_KEY;
                $data['mobile'] = $login['mobile'];
                $data['role_id'] = $login['role_id'];

                $data['file_array'][0]['file_type'] = Custom::getFileType($file_name);
                $data['file_array'][0]['file_name'] = $file_name;
                $data['file_array'][0]['file_path'] = $upload_file;
                $data['file_array'][0]['file_size'] = $file_size;

                $data['listing_type'] = "OTHER";
                $data['memo_text'] = "";
                $data['memo_label'] = "";
                $data['caption'] = "";
                $data['drive_folder_id'] = $drive_folder_id;
                $data['category_id'] = $category_id;
                return WebservicesFunction::add_file($data, true);
            }
        }
        exit();

    }

    public function add_file_notify()
    {
        Custom::send_process_to_background();
        if ($this->request->is(array('ajax'))) {
            $login = $this->Session->read('Auth.User.User');
            $thin_app_id = $login['thinapp_id'];
            $mobile = $login['mobile'];
            $user_id = $login['id'];
            $drive_folder_id = base64_decode($this->request->data['f_id']);
            $folder_data = Custom::get_folder_data($drive_folder_id);
            if (!empty($folder_data)) {
                $user_id_list = Custom::get_folder_shared_user_mobile_and_id($drive_folder_id);
                $show_ipd = Custom::check_user_permission($thin_app_id,'SHOW_IPD_CATEGORY_TO_PATIENT');
                if($show_ipd == "NO" ||$show_ipd===false){
                    if(!empty($user_id_list)){
                        $tmp=array();
                        foreach($user_id_list as $key => $value){
                            if($value['is_doctor'] =="YES"){
                                $tmp[]= $value;
                            }
                        }
                        $user_id_list = $tmp;
                    }
                }
                if ($user_id_list) {
                    $username = $mobile;
                    $user_data = Custom::get_user_by_id($user_id);
                    if (!empty($user_data)) {
                        $username = $user_data['username'];
                    }
                    $message = "New file  added to folder " . $folder_data['folder_name'] . " by " . $username;
                    $option = array(
                        'thinapp_id' => $thin_app_id,
                        'channel_id' => 0,
                        'role' => "USER",
                        'flag' => 'FILE_ADD',
                        'title' => "New file added to folder " . $folder_data['folder_name'],
                        'message' => mb_strimwidth($message, 0, 80, '...'),
                        'description' => mb_strimwidth($message, 0, 100, '...'),
                        'chat_reference' => '',
                        'module_type' => 'DOCUMENT',
                        'module_type_id' => $drive_folder_id,
                        'firebase_reference' => ""
                    );

                    $user_ids = array_column($user_id_list, "share_to_user_id");
                    $user_ids = Custom::search_remove($user_id, $user_ids);
                    Custom::send_notification_by_user_id($option, $user_ids, $thin_app_id);

                    $message = "New file  added to folder " . $folder_data['folder_name'] . " by " . $username;
                    $mobile_numbers = array_column($user_id_list, "share_with_mobile");
                    $mobile_numbers = Custom::search_remove($mobile, $mobile_numbers);
                    Custom::sendFileShareMessage("FOLDER", $drive_folder_id, $mobile_numbers, $message, $thin_app_id, $user_id);
                }
            }
        }
        exit();
    }

    public function share_file()
    {
        $this->layout = false;
        $this->autoRender = false;
        if ($this->request->is(array('ajax'))) {
            $login = $this->Session->read('Auth.User.User');
            $share_with_mobile = array();
            $mobile = $this->request->data['mobile'];
            if (!empty($mobile)) {
                foreach ($mobile as $key => $value) {
                    $share_with_mobile[$key]['mobile'] = $value;
                }
            }
            $drive_folder_id = $drive_file_id = 0;
            $object_type = $this->request->data['object_type'];
            if ($object_type == "FOLDER") {
                $drive_folder_id = base64_decode($this->request->data['object_id']);;
            } else {
                $drive_file_id = base64_decode($this->request->data['object_id']);
            }
            $login = $this->Session->read('Auth.User.User');
            $data['thin_app_id'] = $login['thinapp_id'];
            $data['user_id'] = $login['id'];
            $data['app_key'] = APP_KEY;
            $data['share_with_mobile'] = $share_with_mobile;
            $data['share_from_mobile'] = $login['mobile'];
            $data['username'] = $login['mobile'];
            $data['drive_file_id'] = $drive_file_id;
            $data['drive_folder_id'] = $drive_folder_id;
            $data['channel_id'] = 0;
            $data['shared_object'] = strtoupper($object_type);
            $data['status'] = 'SHARED';
            WebservicesFunction::add_share($data);
        } else {
            exit();
        }

    }


    public function delete_share()
    {
        $this->layout = false;
        $this->autoRender = false;
        if ($this->request->is(array('ajax'))) {
            $login = $this->Session->read('Auth.User.User');
            $drive_share_id = base64_decode($this->request->data['share_id']);
            $login = $this->Session->read('Auth.User.User');
            $data['thin_app_id'] = $login['thinapp_id'];
            $data['user_id'] = $login['id'];
            $data['app_key'] = APP_KEY;
            $data['drive_share_id'] = $drive_share_id;
            WebservicesFunction::delete_share($data);
        } else {
            exit();
        }

    }


    public function search_file_list()
    {
        $reqData = $this->request->query;
        $pram = array();
        if (!empty($reqData['fi'])) {
            $pram['fi'] = $reqData['fi'];
        }
        $reqData = $this->request->data['Search'];
        if (!empty($reqData['type'])) {
            $pram['t'] = $reqData['type'];
        }
        if (!empty($reqData['name'])) {
            $pram['n'] = $reqData['name'];
        }

        $this->redirect(
            array(
                "controller" => "app_admin",
                "action" => "file_list",
                "?" => $pram,
            )
        );
    }

    public function file_list()
    {
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User');
        $searchData = $this->request->query;
        $folder_id = base64_decode($searchData['fi']);
        if (!$folder_id || !$this->Custom->check_app_enable_permission($login['User']['thinapp_id'], "DOCUMENT_MANAGEMENT")) {
            $this->redirect(array('controller' => 'app_admin', 'action' => 'dashboard'));
        }


        $conditions["DriveFile.drive_folder_id"] = $folder_id;
        $conditions["DriveFile.listing_type"] = "OTHER";
        if (isset($searchData['t']) && !empty($searchData['t'])) {
            $this->request->data['Search']['type'] = $searchData['t'];
            $conditions["DriveFile.file_type"] = $searchData['t'];
        }
        if (isset($searchData['n']) && !empty($searchData['n'])) {
            $this->request->data['Search']['name'] = $searchData['n'];
            $conditions["DriveFile.file_name LIKE"] = '%' . $searchData['n'] . '%';
        }


        $this->paginate = array(
            "conditions" => array(
                "DriveFile.thinapp_id" => $login['User']['thinapp_id'],
                $conditions
            ),
            'contain' => false,
            'limit' => WEB_PAGINATION_LIMIT,
            'fields' => array('DriveFile.*')
        );
        $data = $this->paginate('DriveFile');
        $this->set('file_list', $data);
        $this->set('id', base64_encode($folder_id));

    }


    /**************PAYMENT ITEM END**************/

    public function rename_folder()
    {
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $post = array();
            $login = $this->Session->read('Auth.User.User');
            $post['drive_folder_id'] = base64_decode($this->request->data['data_set']);
            $post['folder_name'] = $this->request->data['folder_name'];
            $post['app_key'] = APP_KEY;
            $post['share_from_mobile'] = $login['mobile'];
            $post['user_id'] = $login['id'];
            $post['thin_app_id'] = $login['thinapp_id'];
            return WebservicesFunction::rename_folder($post);

        } else {
            exit();
        }
    }

    public function delete_folder()
    {
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $post = array();
            $login = $this->Session->read('Auth.User.User');
            $post['drive_folder_id'] = base64_decode($this->request->data['data_set']);
            $post['app_key'] = APP_KEY;
            $post['user_id'] = $login['id'];
            $post['thin_app_id'] = $login['thinapp_id'];
            return WebservicesFunction::delete_folder($post);

        } else {
            exit();
        }
    }

    public function change_folder_permission()
    {
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $post = array();
            $login = $this->Session->read('Auth.User.User');
            $post['drive_folder_id'] = base64_decode($this->request->data['data_set']);
            $status = ($this->request->data['data_is'] == 'YES') ? "NO" : "YES";
            $post['status'] = $status;
            $post['app_key'] = APP_KEY;
            $post['user_id'] = $login['id'];
            $post['thin_app_id'] = $login['thinapp_id'];
            return WebservicesFunction::add_file_to_folder_permission($post);
        } else {
            exit();
        }
    }


    /* appoointmnet module start from here */


    public function appointment_setting()
    {
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User.User');
        if (!$this->Custom->check_app_enable_permission($login['thinapp_id'], "QUICK_APPOINTMENT") && !$this->Custom->check_app_enable_permission($login['thinapp_id'], "NEW_QUICK_APPOINTMENT")) {
            $this->redirect(array('controller' => 'app_admin', 'action' => 'dashboard'));
        }

        $conditions = array();

        if ($this->request->is(array('post', 'put'))) {

            $thin_app_id = $login['thinapp_id'];
            $is_new = @$this->request->data['is_new'];
            $place = ($this->request->data['AppointmentAddress']['place']);
            $address = ($this->request->data['AppointmentAddress']['address']);
            if ($is_new) {
                $place = ($this->request->data['AppointmentAddress']['place_list']);
            }
            if (!empty($address) && !empty($place)) {

                $this->AppointmentAddress->create();
                $this->AppointmentAddress->set('place', strtoupper(trim($place)));
                $this->AppointmentAddress->set('address', $address);
                $this->AppointmentAddress->set('thinapp_id', $thin_app_id);
                if ($this->AppointmentAddress->save()) {
                    $this->Session->setFlash(__('Address saved successfully'), 'default', array(), 'success');
                    $this->redirect(array('controller' => 'app_admin', 'action' => 'appointment_setting'));
                } else {
                    $this->Session->setFlash(__('Sorry addres could not saved'), 'default', array(), 'error');
                    $this->redirect(array('controller' => 'app_admin', 'action' => 'appointment_setting'));
                }
            } else {
                $this->Session->setFlash(__('You must enter place name or address'), 'default', array(), 'warning');
            }

        }
        $this->paginate = array(
            "conditions" => array(
                "AppointmentAddress.thinapp_id" => $login['thinapp_id'],
                "AppointmentAddress.status" => 'ACTIVE',
                $conditions
            ),
            'contain' => false,
            'limit' => 50
        );
        $data = $this->paginate('AppointmentAddress');
        $this->set('appointment_address_list', $data);
    }


    public function update_appo_address()
    {

        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $id = base64_decode($this->request->data['data_id']);
            $address = $this->request->data['address'];
            $this->AppointmentAddress->set('id', $id);
            $this->AppointmentAddress->set('address', $address);
            if ($this->AppointmentAddress->save()) {
                $response['status'] = 1;
                $response['message'] = 'Address update successfully.';
            } else {
                $response['status'] = 1;
                $response['message'] = 'Sorry address could not update.';
            }
            echo json_encode($response);
        } else {

            exit();
        }
    }


    public function appointment()
    {
        $this->layout = "app_admin_home";
        $login = $this->Session->read('Auth.User.User');
        if (!$this->Custom->check_app_enable_permission($login['thinapp_id'], "QUICK_APPOINTMENT") && !$this->Custom->check_app_enable_permission($login['thinapp_id'], "NEW_QUICK_APPOINTMENT")) {
            $this->redirect(array('controller' => 'app_admin', 'action' => 'dashboard'));
        } else {

            $doctor_id = WebservicesFunction::get_staff_id_by_mobile($login['mobile'], $login['thinapp_id']);
            $this->set('doctor_id', @$doctor_id);
        }


    }


    public function search_view_app_schedule()
    {

        $reqData = $this->request->data;
        $pram = array();
        if (!isset($reqData['lt']) || $reqData['lt'] == "s") {
            if (!empty($reqData['name'])) {
                $pram['n'] = $reqData['name'];
            }
            if (!empty($reqData['mobile'])) {
                $pram['m'] = $reqData['mobile'];
            }
            if (!empty($reqData['title'])) {
                $pram['t'] = $reqData['title'];
            }
            if (!empty($reqData['date'])) {
                $pram['d'] = $reqData['date'];
            }
            if (!empty($reqData['lt'])) {
                $pram['lt'] = $reqData['lt'];
            }
        } else {
            if (!empty($reqData['name'])) {
                $pram['n'] = $reqData['name'];
            }
            if (!empty($reqData['mobile'])) {
                $pram['m'] = $reqData['mobile'];
            }
            if (!empty($reqData['title'])) {
                $pram['t'] = $reqData['title'];
            }
            if (!empty($reqData['date'])) {
                $pram['d'] = $reqData['date'];
            }
            if (!empty($reqData['lt'])) {
                $pram['lt'] = $reqData['lt'];
            }
        }


        $this->redirect(
            array(
                "controller" => "app_admin",
                "action" => "view_app_schedule",
                "?" => $pram,
            )
        );

    }


    public function view_app_schedule()
    {
        $this->layout = "app_admin_home";
        $login = $this->Session->read('Auth.User.User');
        if (!$this->Custom->check_app_enable_permission($login['thinapp_id'], "QUICK_APPOINTMENT") && !$this->Custom->check_app_enable_permission($login['thinapp_id'], "NEW_QUICK_APPOINTMENT")) {
            $this->redirect(array('controller' => 'app_admin', 'action' => 'dashboard'));
        }

        $searchData = $this->request->query;
        $conditions = array();
        $format = "Y-m-d";
        if (isset($searchData['lt']) && $searchData['lt'] == "c") {


            if (isset($searchData['d']) && !empty($searchData)) {
                $date = date($format, strtotime($searchData['d']));
            } else {
                $date = date($format);
            }
            $conditions["AppointmentCustomerStaffService.thinapp_id"] = $login['thinapp_id'];
            $conditions["DATE(AppointmentCustomerStaffService.appointment_datetime)"] = $date;
            //$conditions["AppointmentCustomerStaffService.delete_status !="] = array("DELETED","FOLLOW_UP");
            if (isset($searchData['n']) && !empty($searchData['n'])) {
                $name = explode(" ", $searchData['n']);
                if (count($name) == 1) {
                    $conditions["AppointmentCustomer.first_name LIKE"] = '%' . $name[0] . '%';
                } else {
                    $conditions["AppointmentCustomer.first_name LIKE"] = '%' . $name[0] . '%';
                    $conditions["AppointmentCustomer.last_name LIKE"] = '%' . $name[1] . '%';
                }
            }
            if (isset($searchData['m']) && !empty($searchData['m'])) {
                $conditions["AppointmentCustomer.mobile LIKE"] = '%' . $searchData['m'] . '%';
            }
            $this->paginate = array(
                "conditions" => $conditions,
                'contain' => array('AppointmentCategory', 'AppointmentStaff', 'AppointmentService', 'AppointmentCustomer', 'AppointmentAddress'),
                'limit' => DRIVE_FOLDER_DEFAULT_LIMIT
            );
            $data = $this->paginate('AppointmentCustomerStaffService');
            if (count($data) == 1) {
                $staff_id = base64_encode($data[0]['AppointmentStaff']['id']);
                $this->redirect(array('controller' => 'app_admin', 'action' => "view_staff_app_schedule", "?" => array("st" => $staff_id, "d" => $date)));
            }
            $doctor_id = WebservicesFunction::get_staff_id_by_mobile($login['mobile'], $login['thinapp_id']);
            $this->set(array('doctor_id' => $doctor_id, 'appointment_list' => $data));

        } else {

            if (isset($searchData['n']) && !empty($searchData['n'])) {
                $conditions["AppointmentStaff.name LIKE"] = '%' . $searchData['n'] . '%';
            }
            if (isset($searchData['t']) && !empty($searchData['t'])) {
                $conditions["AppointmentStaff.sub_title LIKE"] = '%' . $searchData['t'] . '%';
            }
            if (isset($searchData['m']) && !empty($searchData['m'])) {
                $conditions["AppointmentStaff.mobile LIKE"] = '%' . $searchData['m'] . '%';
            }

            //$conditions["AppointmentCustomerStaffService.delete_status !="] = array("DELETED","FOLLOW_UP");
            $this->paginate = array(
                "conditions" => array(
                    "AppointmentStaff.thinapp_id" => $login['thinapp_id'],
                    "AppointmentStaff.status" => 'ACTIVE',
                    "AppointmentStaff.staff_type" => 'DOCTOR',
                    $conditions
                ),
                'contain' => false,
                'limit' => 12
            );
            $data = $this->paginate('AppointmentStaff');
            if (count($data) == 1) {
                $staff_id = base64_encode($data[0]['AppointmentStaff']['id']);
                $date = date($format);
                $this->redirect(array('controller' => 'app_admin', 'action' => "view_staff_app_schedule", "?" => array("st" => $staff_id, "d" => $date)));
            }

            $doctor_id = WebservicesFunction::get_staff_id_by_mobile($login['mobile'], $login['thinapp_id']);
            $this->set(array('doctor_id' => $doctor_id, 'appointment_staff_list' => $data));

        }


    }


    public function search_view_staff_app_schedule()
    {

        $reqData = $this->request->data;
        $pram = array();
        $query = $this->request->query;
        if (!empty($query['st'])) {
            $pram['st'] = $query['st'];
        }
        if (!empty($reqData['as'])) {
            $pram['s'] = $reqData['as'];
        }
        if (!empty($reqData['aps'])) {
            $pram['p'] = $reqData['aps'];
        }
        if (!empty($reqData['name'])) {
            $pram['n'] = $reqData['name'];
        }
        if (!empty($reqData['mobile'])) {
            $pram['m'] = $reqData['mobile'];
        }
        if (!empty($reqData['service'])) {
            $pram['sv'] = $reqData['service'];
        }
        if (!empty($reqData['date'])) {
            $pram['d'] = $reqData['date'];
        }
        if (!empty($reqData['ad'])) {
            $pram['ad'] = $reqData['ad'];
        }

        $this->redirect(
            array(
                "controller" => "app_admin",
                "action" => "view_staff_app_schedule",
                "?" => $pram,
            )
        );

    }

    public function view_staff_app_schedule($staff_id = null)
    {


        $this->layout = "app_admin_home";
        $reqData = $this->request->query;
        $login = $this->Session->read('Auth.User.User');
        $staff_id = base64_decode($reqData['st']);
        $format = "Y-m-d";
        if (isset($reqData['d']) && !empty($reqData)) {
            $date = date($format, strtotime($reqData['d']));
        } else {
            $date = date($format);
        }

        if (!$this->Custom->check_app_enable_permission($login['thinapp_id'], "QUICK_APPOINTMENT") && !$this->Custom->check_app_enable_permission($login['thinapp_id'], "NEW_QUICK_APPOINTMENT")) {
            $this->redirect(array('controller' => 'app_admin', 'action' => 'dashboard'));
        }


        $searchData = $this->request->query;
        $conditions["AppointmentCustomerStaffService.thinapp_id"] = $login['thinapp_id'];
        $conditions["AppointmentCustomerStaffService.appointment_staff_id"] = $staff_id;
        $conditions["DATE(AppointmentCustomerStaffService.appointment_datetime)"] = $date;


        if (isset($searchData['n']) && !empty($searchData['n'])) {
            $conditions['OR'] = array(
                "AppointmentCustomer.first_name LIKE" => '%' . $searchData['n'] . '%',
                "AppointmentCustomer.last_name LIKE" => '%' . $searchData['n'] . '%'
            );
        }

        if (isset($searchData['sv']) && !empty($searchData['sv'])) {
            $conditions["AppointmentService.name LIKE"] = '%' . $searchData['sv'] . '%';
        }

        if (isset($searchData['m']) && !empty($searchData['m'])) {
            $conditions["AppointmentCustomer.mobile LIKE"] = '%' . $searchData['m'] . '%';
        }

        if (isset($searchData['s']) && !empty($searchData['s'])) {
            $conditions["AppointmentCustomerStaffService.status"] = $searchData['s'];
        }

        if (isset($searchData['p']) && !empty($searchData['p'])) {
            $conditions["AppointmentCustomerStaffService.payment_status"] = $searchData['p'];
        }
        if (isset($searchData['ad']) && !empty($searchData['ad'])) {
            $conditions["AppointmentCustomerStaffService.appointment_address_id"] = $searchData['ad'];
        }


        $list = Custom::get_doctor_address_list_drp($staff_id, $login['thinapp_id']);

        $address_list = @array_column($list, 'address', 'id');

        $this->paginate = array(
            "conditions" => $conditions,
            'contain' => array('MedicalProductOrder', 'AppointmentCategory', 'AppointmentStaff', 'AppointmentService', 'AppointmentCustomer', 'AppointmentAddress'),
            'limit' => DRIVE_FOLDER_DEFAULT_LIMIT
        );
        $appointment_list = $this->paginate('AppointmentCustomerStaffService');
        $doctor_id = WebservicesFunction::get_staff_id_by_mobile($login['mobile'], $login['thinapp_id']);
        $this->set(compact(array('doctor_id', 'appointment_list', 'address_list')));



    }

    public function load_staff_appointment()
    {
        $this->layout = 'ajax';
        if ($this->request->is('ajax')) {
            $login = $this->Session->read('Auth.User.User');
            $date = ($this->request->data['d']);
            $month = ($this->request->data['month']);
            $staff_id = base64_decode($this->request->data['st_id']);
            $name = ($this->request->data['n']);
            $service_name = ($this->request->data['sv']);
            $mobile = ($this->request->data['m']);
            $status = ($this->request->data['s']);
            $payment_status = ($this->request->data['p']);
            $has_token = ($this->request->data['has_token']);
            $appointment_payment_type = ($this->request->data['apt']);
            $appointment_address = ($this->request->data['ad']);
        	$booking_via = ($this->request->data['booking_via']);
            $sort = ($this->request->data['sort']);
            $format = "Y-m-d";
            $or_condition = array();
            $custom_condition = " and acss.appointment_staff_id = $staff_id";
            $amount_condition["MedicalProductOrder.appointment_staff_id"] = $staff_id;
            $custom_condition_archive = " and acss.appointment_staff_id = $staff_id";
            $amount_condition_archive["MedicalProductOrder.appointment_staff_id"] = $staff_id;
          
          
          
            //$amount_condition["DATE(AppointmentCustomerStaffService.appointment_datetime)"]  = date('Y-m-d');

            if (!empty($date) && !empty($month)) {
                $from_date = DateTime::createFromFormat('d-m-Y', $date);
                $from_date = $from_date->format('Y-m-d');;
                $defaltCondition["DATE(AppointmentCustomerStaffService.appointment_datetime) >="] = $conditions["DATE(AppointmentCustomerStaffService.appointment_datetime) >="] = $from_date;
                $defaltCondition_archive["DATE(AppointmentCustomerStaffServiceArchive.appointment_datetime) >="] = $conditions_archive["DATE(AppointmentCustomerStaffServiceArchive.appointment_datetime) >="] = $from_date;
                $amount_condition["DATE(AppointmentCustomerStaffService.appointment_datetime) >="] = $from_date;
                $amount_condition_archive["DATE(AppointmentCustomerStaffServiceArchive.appointment_datetime) >="] = $from_date;
                


                $to_date = DateTime::createFromFormat('d-m-Y', $month);
                $to_date = $to_date->format('Y-m-d');
                $defaltCondition["DATE(AppointmentCustomerStaffService.appointment_datetime) <="] = $conditions["DATE(AppointmentCustomerStaffService.appointment_datetime) <="] = $to_date;
                $defaltCondition_archive["DATE(AppointmentCustomerStaffServiceArchive.appointment_datetime) <="] = $conditions["DATE(AppointmentCustomerStaffService.appointment_datetime) <="] = $to_date;
                $conditions_archive["DATE(AppointmentCustomerStaffServiceArchive.appointment_datetime) <="] = $to_date;
                $amount_condition["DATE(AppointmentCustomerStaffService.appointment_datetime) <="] = $to_date;
                $amount_condition_archive["DATE(AppointmentCustomerStaffServiceArchive.appointment_datetime) <="] = $to_date;


                $custom_condition .= " AND DATE(acss.appointment_datetime) BETWEEN '$from_date' AND '$to_date' ";
                $custom_condition_archive .= " AND DATE(acss.appointment_datetime) BETWEEN '$from_date' AND '$to_date' ";
            }


            $defaltCondition["AppointmentCustomerStaffService.thinapp_id"] = $conditions["AppointmentCustomerStaffService.thinapp_id"] = $login['thinapp_id'];
            $defaltCondition["AppointmentCustomerStaffService.appointment_staff_id"] = $conditions["AppointmentCustomerStaffService.appointment_staff_id"] = $staff_id;
            $defaltCondition["AppointmentCustomerStaffService.delete_status !="] = $conditions["AppointmentCustomerStaffService.delete_status !="] = "DELETED";

            $defaltCondition_archive["AppointmentCustomerStaffServiceArchive.thinapp_id"] = $conditions_archive["AppointmentCustomerStaffServiceArchive.thinapp_id"] = $login['thinapp_id'];
            $defaltCondition_archive["AppointmentCustomerStaffServiceArchive.appointment_staff_id"] = $conditions_archive["AppointmentCustomerStaffServiceArchive.appointment_staff_id"] = $staff_id;
            $defaltCondition_archive["AppointmentCustomerStaffServiceArchive.delete_status !="] = $conditions_archive["AppointmentCustomerStaffServiceArchive.delete_status !="] = "DELETED";


            $defaltCondition["payment_status"] = 'SUCCESS';
            $defaltCondition_archive["payment_status"] = 'SUCCESS';
            


            if (!empty($name)) {

                $or_condition[] = array('OR' => array(
                    "AppointmentCustomer.first_name LIKE" => '%' . $name . '%',
                    "Children.child_name LIKE" => '%' . $name . '%'
                ));


            }

            if (!empty($service_name)) {
                $conditions["AppointmentService.name LIKE"] = '%' . $service_name . '%';
                $conditions_archive["AppointmentService.name LIKE"] = '%' . $service_name . '%';
                
            }

            if (!empty($mobile)) {

                $or_condition[] = array('OR' => array(
                    "AppointmentCustomer.mobile LIKE" => '%' . $mobile . '%',
                    "Children.mobile LIKE" => '%' . $mobile . '%'
                ));

            }

            if (!empty($status)) {
                $conditions["AppointmentCustomerStaffService.status"] = $status;
                $conditions_archive["AppointmentCustomerStaffServiceArchive.status"] = $status;
                $custom_condition .=" and acss.status = '$status' ";
                $custom_condition_archive .=" and acss.status = '$status' ";

            }

            if (!empty($payment_status)) {
                $conditions["AppointmentCustomerStaffService.payment_status"] = $payment_status;
                $conditions_archive["AppointmentCustomerStaffServiceArchive.payment_status"] = $payment_status;

                $custom_condition .=" and acss.payment_status = '$payment_status' ";
                $custom_condition_archive .=" and acss.payment_status = '$payment_status' ";
            }
            if (!empty($appointment_address)) {
                $conditions["AppointmentCustomerStaffService.appointment_address_id"] = $appointment_address;
                $conditions_archive["AppointmentCustomerStaffServiceArchive.appointment_address_id"] = $appointment_address;

                $custom_condition .=" and acss.appointment_address_id = $appointment_address ";
            }
            if (!empty($has_token)) {
                $conditions["AppointmentCustomerStaffService.has_token"] = $has_token;
                $conditions_archive["AppointmentCustomerStaffServiceArchive.has_token"] = $has_token;
                $custom_condition .=" and acss.has_token = '$has_token' ";
                $custom_condition_archive .=" and acss.has_token = '$has_token' ";
            }
        	
        	if (!empty($booking_via) && $booking_via != 'ALL') {
                $conditions["AppointmentCustomerStaffService.appointment_booked_from"] = $booking_via;
                $conditions_archive["AppointmentCustomerStaffServiceArchive.appointment_booked_from"] = $booking_via;

                $custom_condition .=" and acss.appointment_booked_from = '$booking_via' ";
                $custom_condition_archive .=" and acss.appointment_booked_from = '$booking_via' ";
            }
        
            if ($appointment_payment_type != '') {
                if ($appointment_payment_type == 'CASH') {

                    $conditions["OR"] = array(
                        "AppointmentCustomerStaffService.booking_payment_type" => $appointment_payment_type,
                        "AppointmentCustomerStaffService.hospital_payment_type_id" => array(0, null)
                    );
                    $conditions_archive["OR"] = array(
                        "AppointmentCustomerStaffServiceArchive.booking_payment_type" => $appointment_payment_type,
                        "AppointmentCustomerStaffServiceArchive.hospital_payment_type_id" => array(0, null)
                    );

                    $custom_condition .=" and ( acss.booking_payment_type = '$appointment_payment_type' OR acss.hospital_payment_type_id IN(0,NULL) ) ";
                    $custom_condition_archive .=" and ( acss.booking_payment_type = '$appointment_payment_type' OR acss.hospital_payment_type_id IN(0,NULL) ) ";
                    

                } else if ($appointment_payment_type == "ONLINE") {

                    $conditions["AppointmentCustomerStaffService.booking_payment_type"] = $appointment_payment_type;
                    $conditions_archive["AppointmentCustomerStaffServiceArchive.booking_payment_type"] = $appointment_payment_type;
                    $custom_condition .=" and acss.booking_payment_type = '$appointment_payment_type' ";
                    $custom_condition_archive .=" and acss.booking_payment_type = '$appointment_payment_type' ";


                } else {
                    $conditions["AppointmentCustomerStaffService.hospital_payment_type_id"] = (int)$appointment_payment_type;
                    $conditions_archive["AppointmentCustomerStaffServiceArchive.hospital_payment_type_id"] = (int)$appointment_payment_type;

                    $custom_condition .=" and acss.hospital_payment_type_id = $appointment_payment_type ";
                    $custom_condition_archive .=" and acss.hospital_payment_type_id = $appointment_payment_type ";

                }
            }

            if (!empty($or_condition)) {

                $conditions['AND'] = $or_condition;
                $conditions_archive['AND'] = $or_condition;
            }
            $sort_array = explode("##", $sort);
            $order_by = array("AppointmentCustomerStaffService" . "." . $sort_array[0] . " " . strtoupper($sort_array[1]));
            $order_by_archive = array("AppointmentCustomerStaffServiceArchive" . "." . $sort_array[0] . " " . strtoupper($sort_array[1]));


            $limit = $this->AppointmentCustomerStaffService->find('count', array(
                "conditions" => $conditions,
                'contain' => array('MedicalProductOrder', 'Children', 'HospitalPaymentType', 'AppointmentCategory', 'AppointmentStaff', 'AppointmentService', 'AppointmentCustomer', 'AppointmentAddress'),
                'order' => $order_by
            ));


            $appointment_list_ = $this->AppointmentCustomerStaffService->find('all', array(
                "fields"=>array(
                    "IF( (SELECT pda.id FROM patient_due_amounts AS pda WHERE MedicalProductOrder.id = pda.medical_product_order_id AND pda.settlement_by_order_id != MedicalProductOrder.id and pda.settlement_by_order_id > 0 limit 1) IS NOT NULL,'YES','NO') as due_amount_settled",
                    'AppointmentCustomerStaffService.*',
                    'AppointmentCustomer.title',
                    'AppointmentCustomer.first_name',
                    'AppointmentCustomer.address',
                    'AppointmentCustomer.mobile',
                    'Children.title',
                    'Children.child_name',
                    'Children.mobile',
                    'Children.address',
                    'AppointmentAddress.address',
                    'MedicalProductOrder.total_amount',
                    'MedicalProductOrder.payment_description',
                    'HospitalPaymentType.name',

                ),
                "conditions" => $conditions,
                'contain' => array('MedicalProductOrder', 'Children', 'HospitalPaymentType', 'AppointmentCustomer', 'AppointmentAddress'),
                'order' => $order_by,
                'limit' => $limit
            ));

            
            $limit_archive = $this->AppointmentCustomerStaffServiceArchive->find('count', array(
                "conditions" => $conditions_archive,
                'contain' => array('MedicalProductOrder', 'Children', 'HospitalPaymentType', 'AppointmentCategory', 'AppointmentStaff', 'AppointmentService', 'AppointmentCustomer', 'AppointmentAddress'),
                'order' => $order_by_archive
            ));

            $appointment_list_archive = $this->AppointmentCustomerStaffServiceArchive->find('all', array(
                "fields"=>array(
                    "IF( (SELECT pda.id FROM patient_due_amounts AS pda WHERE MedicalProductOrder.id = pda.medical_product_order_id AND pda.settlement_by_order_id != MedicalProductOrder.id and pda.settlement_by_order_id > 0 limit 1) IS NOT NULL,'YES','NO') as due_amount_settled",
                    'AppointmentCustomerStaffServiceArchive.*',
                    'AppointmentCustomer.title',
                    'AppointmentCustomer.first_name',
                    'AppointmentCustomer.address',
                    'AppointmentCustomer.mobile',
                    'Children.title',
                    'Children.child_name',
                    'Children.mobile',
                    'Children.address',
                    'AppointmentAddress.address',
                    'MedicalProductOrder.total_amount',
                    'MedicalProductOrder.payment_description',
                    'HospitalPaymentType.name',

                ),
                "conditions" => $conditions_archive,
                'contain' => array('MedicalProductOrder', 'Children', 'HospitalPaymentType', 'AppointmentCustomer', 'AppointmentAddress'),
                'order' => $order_by_archive,
                'limit' => $limit_archive
            ));
            //echo count($appointment_list_archive); die;
            $appointment_list = array_merge($appointment_list_, $appointment_list_archive);

            // $appointment_list[] = $appointment_list_archive[0];
            // echo "<pre>";
            // print_r($appointment_list);die;


            $payment_type = Custom::get_doctor_collection(0,"", "",0,0,$custom_condition);

            $staffData = $this->AppointmentStaff->find('first', array('fields' => array('name'), 'conditions' => array('id' => $staff_id), 'contain' => false));
            $staffName = $staffData['AppointmentStaff']['name'];



            $login1 = $this->Session->read('Auth.User');
            $reportTitle = $login1['Thinapp']['name'].' ('.$from_date.' - '.$to_date.')';
            $this->set(compact(array('reportTitle','appointment_list', 'login', 'date', "staff_id", "payment_type", "staffName")));
            $this->render('load_staff_appointment', 'ajax');


        } else {
            exit();
        }

    }


    public function load_reschedule_modal()
    {
        $this->layout = 'ajax';
        if ($this->request->is('ajax')) {
            $appointment_id = ($this->request->data['id']);
            $staff_id = ($this->request->data['st_id']);
            $service = $this->request->data['service'];
            $address_id = $this->request->data['address'];
            $content = array(
                'staff_id' => $staff_id,
                'appointment_id' => $appointment_id,
                'service_id' => $service,
                'address_id' => $address_id
            );
            $this->set(compact('content'));
            $this->render('load_reschedule_modal', 'ajax');
        } else {
            exit();
        }

    }

    public function load_slot_data()
    {
        $this->layout = 'ajax';
        if ($this->request->is('ajax')) {

                $address_id = ($this->request->data['address_id']);
                $doctor_id = ($this->request->data['doctor_id']);
                $service_id = ($this->request->data['service_id']);
                $booking_date = $this->request->data['date'];
                $date = DateTime::createFromFormat('d/m/Y', $booking_date);
                $booking_date = $date->format('m/d/Y');
                $drop_down_booking_date = $date->format('m/d/Y');
                $return_array = isset($this->request->data['return_array'])?true:false;

                $post = array();

                $login = $this->Session->read('Auth.User.User');
                $login_user = $this->Session->read('Auth.User');
                $user_role = Custom::hospital_get_user_role($login['mobile'], $login['thinapp_id'], $login['role_id']);
                $final_array = $appointmentIDs = array();




                if ($this->Custom->check_app_enable_permission($login['thinapp_id'], "NEW_QUICK_APPOINTMENT")) {

                    $doctor_data = Custom::get_doctor_and_service_time(base64_decode($doctor_id), base64_decode($service_id));
                    $show_expire_token_slot = !empty($doctor_data['show_expire_token_slot'])?$doctor_data['show_expire_token_slot']:$login_user['Thinapp']['show_expire_token_slot'];
                    $expired_slots = ($show_expire_token_slot == "YES") ? true : false;


                    $duration = @$doctor_data['service_slot_duration'];
                    $date = DateTime::createFromFormat('m/d/Y', $booking_date);
                    $new_data = $date->format('Y-m-d');
                    $slot_array = Custom::new_get_appointment_slot($login['thinapp_id'], base64_decode($doctor_id), base64_decode($service_id), base64_decode($address_id), $doctor_data['appointment_setting_type'], $new_data,false, false,$user_role,$expired_slots);
                    $booked_array = Custom::new_get_doctor_booked_appointment($login['thinapp_id'], base64_decode($doctor_id), base64_decode($service_id), base64_decode($address_id), $new_data, false, true);
                    $time_string = date('d', strtotime($booking_date)) . "##" . date('D', strtotime($booking_date)) . "##" . date('M', strtotime($booking_date)) . "##" . date('Y', strtotime($booking_date));
                    $counter = 0;
                    if (!empty($slot_array)) {
                        if (!empty($booked_array)) {
                            foreach ($booked_array as $key => $slot_data) {
                                $booked_slots[$slot_data['slot_time']][] = $slot_data;
                                $date = DateTime::createFromFormat('h:i A', $slot_data['slot_time']);
                                $app_time = strtotime($date->format('H:i'));
                                $current_time = strtotime(date('H:i'));
                                $booking_compare = strtotime(date('Y-m-d',strtotime($booking_date)));
                                $current_compare = strtotime(date('Y-m-d'));

                                if (in_array($slot_data['custom_token'],array("YES","NO")) && $slot_data['custom_token'] == "NO") {
                                    $appointmentIDs[] = $slot_data['appointment_id'];
                                    $final_array[$counter] = $slot_data;
                                    $final_array[$counter]['id'] = 0;
                                    $final_array[$counter]['flag'] = "BOOKED";
                                    $final_array[$counter]['time'] = $slot_data['slot_time'];
                                    $counter++;
                                } else if ($slot_data['custom_token'] == "YES") {
                                    $appointmentIDs[] = $slot_data['appointment_id'];
                                    $final_array[$counter] = $slot_data;
                                    $final_array[$counter]['id'] = 0;
                                    $final_array[$counter]['flag'] = "BOOKED";
                                    $final_array[$counter]['time'] = $slot_data['slot_time'];
                                    $merge_tmp = array(
                                        'slot' => $slot_data['slot_time'],
                                        'queue_number' => $slot_data['queue_number'],
                                        'date' => $time_string,
                                        'status' => "BOOKED",
                                    );
                                    $slot_list_array[] = $merge_tmp;
                                    $counter++;
                                }
                            }
                        }
                        foreach ($slot_array as $key => $data) {

                            if (!empty($booked_slots) && array_key_exists($data['slot'], $booked_slots) && count($booked_slots[$data['slot']]) > 0) {

                                $myArray = $booked_slots[$data['slot']];
                                $myArray = Custom::array_order_by($myArray, 'queue_number', SORT_ASC);
                                foreach ($myArray as $time_key => $val) {
                                    $tmp = explode('.', $val['queue_number']);
                                    $date = DateTime::createFromFormat('h:i A', $data['slot']);
                                    $app_time = strtotime($date->format('H:i'));
                                    $current_time = strtotime(date('H:i'));
                                    if (count($tmp) == 2 && $time_key == 0) {
                                        $final_array[$counter] = $data;
                                        $final_array[$counter]['appointment_id'] = 0;
                                        $final_array[$counter]['customer_id'] = 0;
                                        $final_array[$counter]['slot_time'] = $data['slot'];
                                        $final_array[$counter]['name'] = '';
                                        $final_array[$counter]['uhid'] = '';
                                        $final_array[$counter]['mobile'] = '';
                                        $final_array[$counter]['profile_photo'] = '';
                                        $final_array[$counter]['time'] = $data['slot'];
                                        $final_array[$counter]['id'] = 0;
                                        $final_array[$counter]['service_amount'] = 0;
                                        $final_array[$counter]['flag'] = ($data['status'] != 'BOOKED') ? $data['status'] : 'AVAILABLE';
                                        $final_array[$counter]['queue_number'] = $tmp[0];
                                        $final_array[$counter]['sub_token'] = "NO";
                                        $counter++;
                                    }

                                    $appointmentIDs[] = $val['appointment_id'];
                                    $final_array[$counter] = $val;
                                    $final_array[$counter]['id'] = 0;
                                    $final_array[$counter]['flag'] = "BOOKED";
                                    $final_array[$counter]['time'] = $data['slot'];
                                    if (count($tmp) == 2) {
                                        $final_array[$counter]['sub_token'] = "YES";
                                    }
                                    $counter++;
                                }

                            } else {
                                $tmp['appointment_id'] = 0;
                                $tmp['customer_id'] = 0;
                                $tmp['slot_time'] = $data['slot'];
                                $tmp['name'] = "";
                                $tmp['uhid'] = "";
                                $tmp['mobile'] = "";
                                $tmp['profile_photo'] = "";
                                $tmp['address'] = "";
                                $tmp['time'] = $data['slot'];
                                $tmp['flag'] = $data['status'];
                                $tmp['id'] = $counter + 1;
                                $tmp['service_amount'] = 0;
                                $tmp['queue_number'] = $data['token'];
                                $tmp['sub_token'] = "NO";
                                $final_array[$counter] = $tmp;
                                $counter++;
                            }

                        }
                    }else{
                        if (!empty($booked_array)) {
                            foreach ($booked_array as $key => $slot_data) {
                                $booked_slots[$slot_data['slot_time']][] = $slot_data;
                                $date = DateTime::createFromFormat('h:i A', $slot_data['slot_time']);
                                $app_time = strtotime($date->format('H:i'));
                                $current_time = strtotime(date('H:i'));
                                $booking_compare = strtotime(date('Y-m-d',strtotime($booking_date)));
                                $current_compare = strtotime(date('Y-m-d'));

                                if (in_array($slot_data['custom_token'],array("YES","NO")) && $slot_data['custom_token'] == "NO") {
                                    $appointmentIDs[] = $slot_data['appointment_id'];
                                    $final_array[$counter] = $slot_data;
                                    $final_array[$counter]['id'] = 0;
                                    $final_array[$counter]['flag'] = "BOOKED";
                                    $final_array[$counter]['time'] = $slot_data['slot_time'];
                                    $counter++;
                                } else if ($slot_data['custom_token'] == "YES") {
                                    $appointmentIDs[] = $slot_data['appointment_id'];
                                    $final_array[$counter] = $slot_data;
                                    $final_array[$counter]['id'] = 0;
                                    $final_array[$counter]['flag'] = "BOOKED";
                                    $final_array[$counter]['time'] = $slot_data['slot_time'];
                                    $merge_tmp = array(
                                        'slot' => $slot_data['slot_time'],
                                        'queue_number' => $slot_data['queue_number'],
                                        'date' => $time_string,
                                        'status' => "BOOKED",
                                    );
                                    $slot_list_array[] = $merge_tmp;
                                    $counter++;
                                }
                            }
                        }
                    }
                } else {


                    $post['app_key'] = APP_KEY;
                    $post['share_from_mobile'] = $login['mobile'];
                    $post['user_id'] = $login['id'];
                    $post['thin_app_id'] = $login['thinapp_id'];
                    $post['mobile'] = $login['mobile'];
                    $post['address_id'] = base64_decode($address_id);
                    $post['doctor_id'] = base64_decode($doctor_id);
                    $post['schedule_date'] = $booking_date;
                    $slot_list = WebservicesFunction::web_get_staff_availability_for_customer($post);

                    $res = json_decode($slot_list, true);
                    if ($res['status'] == 1) {
                        $slot_list = @$res['data']['schedule_detail'];

                    } else {
                        $slot_list = array();
                    }

                    $get_doctor_service = Custom::get_doctor_service_data(base64_decode($doctor_id));

                	
                    $show_expire_token_slot = !empty($get_doctor_service['show_expire_token_slot'])?$get_doctor_service['show_expire_token_slot']:$login_user['Thinapp']['show_expire_token_slot'];
                    $expired_slots = ($show_expire_token_slot == "YES") ? true : false;


                    $duration = @$get_doctor_service['service_slot_duration'];

                    $slot_list_array = Custom::load_doctor_slot_by_address(date('Y-m-d', strtotime($booking_date)), base64_decode($doctor_id), $get_doctor_service['service_slot_duration'], $login['thinapp_id'], base64_decode($address_id),false,false,false,$expired_slots);
                    $date = DateTime::createFromFormat('m/d/Y', $booking_date);
                    $new_data = $date->format('Y-m-d');
                    $doctor_booked_appointment = Custom::new_get_doctor_booked_appointment($login['thinapp_id'], base64_decode($doctor_id), $get_doctor_service['id'], base64_decode($address_id), $new_data, false, true);

                    $booked_slots = array();
                    $counter = 0;
                    $tmp_array = $appointmentIDs = array();
                    $time_string = date('d', strtotime($booking_date)) . "##" . date('D', strtotime($booking_date)) . "##" . date('M', strtotime($booking_date)) . "##" . date('Y', strtotime($booking_date));
                    if (!empty($doctor_booked_appointment)) {
                        foreach ($doctor_booked_appointment as $key => $slot_data) {
                            $booked_slots[$slot_data['slot_time']][] = $slot_data;
                            $date = DateTime::createFromFormat('h:i A', $slot_data['slot_time']);
                            $app_time = strtotime($date->format('H:i'));
                            $current_time = strtotime(date('H:i'));

                            $booking_compare = strtotime(date('Y-m-d',strtotime($booking_date)));
                            $current_compare = strtotime(date('Y-m-d'));

                            if (in_array($slot_data['custom_token'],array("YES","NO")) && $slot_data['custom_token'] == "NO") {
                                $appointmentIDs[] = $slot_data['appointment_id'];
                                $final_array[$counter] = $slot_data;
                                $final_array[$counter]['id'] = 0;
                                $final_array[$counter]['flag'] = "BOOKED";
                                $final_array[$counter]['time'] = $slot_data['slot_time'];
                                $counter++;
                            }if ($slot_data['custom_token'] == "YES") {
                                $appointmentIDs[] = $slot_data['appointment_id'];
                                $final_array[$counter] = $slot_data;
                                $final_array[$counter]['id'] = 0;
                                $final_array[$counter]['flag'] = "BOOKED";
                                $final_array[$counter]['time'] = $slot_data['slot_time'];
                                $merge_tmp = array(
                                    'slot' => $slot_data['slot_time'],
                                    'queue_number' => $slot_data['queue_number'],
                                    'date' => $time_string,
                                    'status' => "BOOKED",
                                );
                                $slot_list_array[] = $merge_tmp;
                                $counter++;
                            }
                        }
                    }


                    if (!empty($slot_list_array)) {
                        foreach ($slot_list_array as $key => $slot_data) {
                            $tmp_array[$slot_data['slot']]['status'] = $slot_data['status'];
                            $tmp_array[$slot_data['slot']]['queue_number'] = $slot_data['queue_number'];
                        }
                    }


                    if (!empty($slot_list)) {
                        foreach ($slot_list as $key => $data) {
                            $data['sub_token'] = "NO";
                            if (array_key_exists($data['time'], $tmp_array)) {

                                if (array_key_exists($data['time'], $booked_slots) && count($booked_slots[$data['time']]) > 0) {
                                    $date = DateTime::createFromFormat('h:i A', $data['time']);
                                    $app_time = strtotime($date->format('H:i'));
                                    $current_time = strtotime(date('H:i'));
                                    $myArray = $booked_slots[$data['time']];
                                    $myArray = Custom::array_order_by($myArray, 'queue_number', SORT_ASC);
                                    foreach ($myArray as $time_key => $val) {
                                        $tmp = explode('.', $val['queue_number']);
                                        if (count($tmp) == 2 && $time_key == 0) {
                                            $final_array[$counter] = $data;
                                            $final_array[$counter]['appointment_id'] = 0;
                                            $final_array[$counter]['customer_id'] = 0;
                                            $final_array[$counter]['slot_time'] = $data['time'];
                                            $final_array[$counter]['name'] = '';
                                            $final_array[$counter]['uhid'] = '';
                                            $final_array[$counter]['mobile'] = '';
                                            $final_array[$counter]['profile_photo'] = '';
                                            $final_array[$counter]['time'] = $data['time'];
                                            $final_array[$counter]['id'] = 0;
                                            $final_array[$counter]['service_amount'] = $data['service_amount'];
                                            $final_array[$counter]['flag'] = $tmp_array[$data['time']]['status'];
                                            $final_array[$counter]['queue_number'] = $tmp[0];
                                            $counter++;
                                        }

                                        $appointmentIDs[] = $val['appointment_id'];
                                        $final_array[$counter] = $val;
                                        $final_array[$counter]['id'] = 0;
                                        $final_array[$counter]['flag'] = "BOOKED";
                                        $final_array[$counter]['time'] = $data['time'];
                                        if (count($tmp) == 2) {
                                            $final_array[$counter]['sub_token'] = "YES";
                                        }
                                        $counter++;


                                    }
                                } else {

                                    if ($data['appointment_id'] > 0) {
                                        $appointmentIDs[] = $data['appointment_id'];
                                    }
                                    $final_array[$counter] = $data;
                                    $final_array[$counter]['flag'] = $tmp_array[$data['time']]['status'];
                                    $final_array[$counter]['queue_number'] = $tmp_array[$data['time']]['queue_number'];
                                    $counter++;
                                }


                            }
                        }
                    }

                }


                $paymentDataRow = $this->AppointmentCustomerStaffService->find('all', array('fields' => array('AppointmentCustomerStaffService.appointment_booked_from','AppointmentCustomerStaffService.reminder_message','AppointmentCustomerStaffService.id', 'AppointmentCustomerStaffService.booking_validity_attempt', 'AppointmentCustomerStaffService.appointment_datetime', 'AppointmentCustomerStaffService.medical_product_order_id', 'AppointmentCustomerStaffService.status', 'AppointmentCustomerStaffService.appointment_staff_id', 'AppointmentCustomerStaffService.appointment_address_id', 'AppointmentCustomerStaffService.appointment_service_id', 'AppointmentCustomerStaffService.payment_status', 'AppointmentCustomerStaffService.booking_payment_type', 'AppointmentCustomerStaffService.amount', 'AppointmentCustomerStaffService.ipd_procedure_amount', 'AppointmentCustomerStaffService.vaccination_amount', 'AppointmentCustomerStaffService.other_amount', 'AppointmentCustomerStaffService.other_amount', 'AppointmentCustomerStaffService.appointment_parent_id','MedicalProductOrder.payment_type_name'), 'conditions' => array('AppointmentCustomerStaffService.id' => $appointmentIDs,'AppointmentCustomerStaffService.thinapp_id'=>$login['thinapp_id']), 'contain' => 'MedicalProductOrder','limit'=>count($appointmentIDs)));

        
        
        		if($login['thinapp_id']==628){
                $dbo = $this->AppointmentCustomerStaffService->getDatasource();
                $length = count($dbo->getLog(false,false)['log'])-1;
                WebservicesFunction::createJson("query", $dbo->getLog(false,false)['log'][$length]['query'], "CREATE",'test_query');
           		 }
        
        
                $paymentData = array();
                $orderData = array();
                foreach ($paymentDataRow as $val) {
                    $paymentData[$val['AppointmentCustomerStaffService']['id']] = $val['AppointmentCustomerStaffService'];
                    $orderData[$val['AppointmentCustomerStaffService']['id']] = isset($val['MedicalProductOrder']['payment_type_name'])?$val['MedicalProductOrder']['payment_type_name']:"CASH";
                }

                $finalArray = array();
                foreach ($final_array as $key => $value) {
                    if (!($value['flag'] == 'BOOKED' && ($value['appointment_id'] == 0 || $value['appointment_id'] == ''))) {
                        $finalArray[$key] = $value;
                        if (isset($paymentData[$value['appointment_id']])) {
                            $finalArray[$key]['id'] = $value['appointment_id'];
                            $finalArray[$key]['payment_status'] = $paymentData[$value['appointment_id']]['payment_status'];
                            $finalArray[$key]['appointment_booked_from'] = $paymentData[$value['appointment_id']]['appointment_booked_from'];
                            $finalArray[$key]['booking_payment_type'] = $orderData[$value['appointment_id']];
                            $finalArray[$key]['appointment_datetime'] = $paymentData[$value['appointment_id']]['appointment_datetime'];
                            $finalArray[$key]['status'] = $paymentData[$value['appointment_id']]['status'];
                            $finalArray[$key]['appointment_staff_id'] = $paymentData[$value['appointment_id']]['appointment_staff_id'];
                            $finalArray[$key]['appointment_address_id'] = $paymentData[$value['appointment_id']]['appointment_address_id'];
                            $finalArray[$key]['appointment_service_id'] = $paymentData[$value['appointment_id']]['appointment_service_id'];
                            $finalArray[$key]['amount'] = $paymentData[$value['appointment_id']]['amount'];
                            $finalArray[$key]['ipd_procedure_amount'] = $paymentData[$value['appointment_id']]['ipd_procedure_amount'];
                            $finalArray[$key]['vaccination_amount'] = $paymentData[$value['appointment_id']]['vaccination_amount'];
                            $finalArray[$key]['other_amount'] = $paymentData[$value['appointment_id']]['other_amount'];
                            $finalArray[$key]['medical_product_order_id'] = $paymentData[$value['appointment_id']]['medical_product_order_id'];
                            $finalArray[$key]['booking_validity_attempt'] = $paymentData[$value['appointment_id']]['booking_validity_attempt'];
                        	$finalArray[$key]['reminder_message'] = $paymentData[$value['appointment_id']]['reminder_message'];

                            /* if($value['appointment_id'] != $paymentData[$value['appointment_id']]['appointment_parent_id'])
                            {
                                $finalArray[$key]['payment_status'] = "PENDING";
                            } */


                        } else {
                            $finalArray[$key]['id'] = 0;
                            $finalArray[$key]['payment_status'] = '';
                            $finalArray[$key]['booking_payment_type'] = '';
                            $finalArray[$key]['appointment_datetime'] = '';
                        	$finalArray[$key]['appointment_datetime'] = '';
                            $finalArray[$key]['status'] = '';
                            $finalArray[$key]['appointment_staff_id'] = 0;
                            $finalArray[$key]['appointment_address_id'] = 0;
                            $finalArray[$key]['appointment_service_id'] = 0;
                            $finalArray[$key]['booking_validity_attempt'] = 0;
                        }

                    }

                    $finalArray[$key]['timestamp'] = strtotime($finalArray[$key]['time']);
                    if($finalArray[$key]['sub_token']=="YES"){
                        $tmp = explode('.',$final_array[$key]['queue_number']);
                        if(count($tmp)==2){
                            $finalArray[$key]['timestamp'] = strtotime($finalArray[$key]['time']) + end($tmp);
                        }
                    }



                }
        
        
                $final_array = $finalArray;
                $final_array = Custom::array_order_by($final_array, 'timestamp', SORT_ASC);
                $final_array = array_map("unserialize", array_unique(array_map("serialize", $final_array)));

                $date = DateTime::createFromFormat('m/d/Y', $booking_date);
                $searchDate = $date->format('Y-m-d');
                $condition['MedicalProductOrder.is_opd'] = 'Y';
                $role = $login_user['USER_ROLE'];
                if ($role != 'ADMIN') {
                    $condition['MedicalProductOrder.created_by_user_id'] = ($role == "DOCTOR" || $role == "RECEPTIONIST") ? $login['id'] : 0;
                }

                $created_by_user_id = 0;
                $role = $login_user['USER_ROLE'];
                if ($role != 'ADMIN') {
                    $created_by_user_id = ($role == "DOCTOR" || $role == "RECEPTIONIST") ? $login['id'] : 0;
                }

                if($return_array===true){
                    $this->autoRender = false;
                    $this->layout = false;
                    $return_array=array();
                    if(!empty($final_array)){
                        foreach($final_array as $key =>$value){
                            $return_array[] =array('time'=>$value['time'],'token'=>$value['queue_number'],'flag'=>$value['flag'],'has_token'=>isset($value['has_token'])?$value['has_token']:'YES','sub_token'=>$value['sub_token'],'custom_token'=>isset($value['custom_token'])?$value['custom_token']:'NO');
                        }
                    }
                    return json_encode($return_array);die;
                }else{
                    //$payment_list = Custom::get_doctor_collection(base64_decode($doctor_id),$searchDate,$searchDate,base64_decode($address_id),$created_by_user_id);

                	$payment_list = false;
                    $colorData = Custom::getColorCodeAppointmentSlots($login['thinapp_id']);

                    $this->set(compact('colorData'));

                    $this->set(compact(array('final_array', 'appointment_id', 'doctor_id', 'user_role', 'payment_list', 'duration', 'booking_date','address_id','service_id')));
                    $this->render('load_slot_data', 'ajax');
                }



        } else {
            exit();
        }

    }

    public function lite_slot_data()
    {
        $this->layout = 'ajax';
        if ($this->request->is('ajax')) {

            $address_id = base64_decode($this->request->data['address_id']);
            $doctor_id = base64_decode($this->request->data['doctor_id']);
            $service_id = base64_decode($this->request->data['service_id']);
            $booking_date = $this->request->data['date'];
            $interval = $this->request->data['service_slot_duration'];
            $from_time = $this->request->data['from_time'];
            $to_time = $this->request->data['to_time'];

            $date = DateTime::createFromFormat('d/m/Y', $booking_date);
            $booking_date = $date->format('m/d/Y');
            $drop_down_booking_date = $date->format('m/d/Y');
            $return_array = isset($this->request->data['return_array']) ? true : false;
            $login = $this->Session->read('Auth.User.User');
            $thin_app_id = $login['thinapp_id'];
            $login_user = $this->Session->read('Auth.User');
            $user_role =$login_user["USER_ROLE"];
            $post = $slot_array=  array();
            $folder_path = "appointment/$doctor_id";
            $final_array = $appointmentIDs = array();
            $walkin_button_pos =$slot_array =array();
            if (true) {
                $connection = ConnectionUtil::getConnection();
                $booking_date = date('Y-m-d', strtotime($booking_date));
                $status_array = array('AVAILABLE', 'BOOKED', 'BREAK', 'EXPIRED', 'BLOCKED');
                $doctorData = Custom::get_doctor_by_id($doctor_id);
                if ($this->Custom->check_app_enable_permission($login['thinapp_id'], "NEW_QUICK_APPOINTMENT")) {
                    $folder_path = "appointment/hours";
                    $file_name = "doctor_slots_new_app_$doctor_id";
                    $slot_array=  array();
                    $setting_type = $doctorData["appointment_setting_type"];
                    $date = date('Y-m-d',strtotime($booking_date));
                    /* booked appointment slots */
                    $condition = " das.doctor_id = $doctor_id and setting_type = '$setting_type' and das.appointment_service_id = $service_id and das.appointment_address_id = $address_id";
                    if($setting_type =='DAY'){
                        $param = date('N',strtotime($date));
                        $condition .= " and das.appointment_day_time_id = $param";
                    }else{
                        $condition .= " and das.appointment_date = '$date'";
                    }
                    $query = "select app_staff.show_appointment_token, app_staff.show_appointment_time, das.from_time, das.to_time, app_ser.service_slot_duration from doctor_appointment_setting as das join appointment_staffs as app_staff on app_staff.id = das.doctor_id left join appointment_services as app_ser on app_ser.id = das.appointment_service_id where  $condition order by from_time asc";
                    $service_message_list = $connection->query($query);
                    if ($service_message_list->num_rows) {
                        $tmp_array =array();
                        $staff_data = mysqli_fetch_all($service_message_list, MYSQLI_ASSOC);
                        foreach ($staff_data as $key => $data) {
                            $tmp_array = Custom::getTimeSlot($data['service_slot_duration'], $data['from_time'], $data['to_time'], $format = "h:i A");
                            if(empty($slot_array)){
                                $slot_array = $tmp_array;
                            }else{
                                $slot_array =  array_merge($slot_array,$tmp_array);
                            }
                        }
                    }
                }else{

                    $folder_path = "appointment/hours";
                    $file_name = "doctor_hours_$doctor_id";
                    if (!$hours_array = json_decode(WebservicesFunction::readJson($file_name, $folder_path), true)) {
                        $query = "select appointment_day_time_id, time_from, time_to, status from appointment_staff_hours as ash where ash.appointment_staff_id=$doctor_id AND ash.appointment_day_time_id ";
                        $staff_day_time = $connection->query($query);
                        $final_array = array();
                        if ($staff_day_time->num_rows) {
                            $tmp = mysqli_fetch_all($staff_day_time,MYSQLI_ASSOC);
                            foreach ($tmp as $k => $data){
                                $hours_array[$data['appointment_day_time_id']] =array("status"=>$data["status"],"time_from"=>$data['time_from'],"time_to"=>$data['time_to']);
                            }
                            WebservicesFunction::createJson($file_name, json_encode($hours_array), "CREATE", $folder_path);
                        }
                    }
                    $day_time_id = date('N', strtotime($booking_date));

                    if($hours_array[$day_time_id]['status']=="OPEN"){
                        $slot_array = Custom::getTimeSlot($interval, $from_time, $to_time, $format = "h:i A");
                        $hours_from = $hours_array[$day_time_id]['time_from'];
                        $hours_to = $hours_array[$day_time_id]['time_to'];
                        $hours_slot_array = Custom::getTimeSlot($interval, $hours_from, $hours_to, $format = "h:i A");
                        $slot_array = array_intersect($hours_slot_array, $slot_array);
                         array_pop($slot_array);
                    }
                }

                $breaks_array = array();
                $booking_array = $emergency_token= $custom_token=$walkin_token= array();

               if(!empty($slot_array)){
                   if ($this->Custom->check_app_enable_permission($login['thinapp_id'], "QUICK_APPOINTMENT")) {
                       $file_name = "breaks_$doctor_id";
                       if (!$breaks_array = json_decode(WebservicesFunction::readJson($file_name, $folder_path), true)) {

                           $day_time_id = date('N', strtotime($booking_date));
                           $query = "select asbs.time_to, asbs.time_from from appointment_staff_break_slots as asbs where asbs.appointment_staff_id=$doctor_id AND asbs.appointment_day_time_id = $day_time_id";
                           $breaks = $connection->query($query);
                           if ($breaks->num_rows) {
                               $breaks = mysqli_fetch_all($breaks, MYSQLI_ASSOC);
                               foreach ($breaks as $key => $value) {
                                   $tmp = Custom::getTimeSlot($interval, $value['time_from'], $value['time_to'], $format = "h:i A");
                                   array_pop($tmp);
                                   $breaks_array = array_merge($breaks_array, $tmp);
                               }
                               $breaks_array = empty($breaks_array) ? 'false' : $breaks_array;
                               $breaks_array = ($breaks_array == 'false') ? array() : $breaks_array;
                               WebservicesFunction::createJson($file_name, json_encode($breaks_array), "CREATE", $folder_path);
                           }


                           /* get break slots end */
                       }
                       if(!empty($breaks_array)){
                           foreach ($breaks_array as $key => $b_slot){
                               if($key==0 ){
                                   $tmp_slot = date("h:i A",strtotime("-$interval", strtotime($b_slot)));
                                   $walkin_button_pos[$tmp_slot] ="YES";
                               }else if(isset($breaks_array[$key+1])){
                                   if(date("h:i A",strtotime("+$interval", strtotime($b_slot))) != $breaks_array[$key+1]){
                                       $tmp_slot = date("h:i A",strtotime("-$interval", strtotime($breaks_array[$key+1])));
                                       $walkin_button_pos[$tmp_slot] ="YES";
                                   }
                               }
                           }

                           $slot_array = array_diff($slot_array, $breaks_array);
                       }


                   }

                   /* check for blocked slot for date and address and doctor */
                   $blocked_slot = Custom::get_doctor_blocked_slot($connection, $thin_app_id, $address_id, $doctor_id, $booking_date);
					

                   /* get appointment booked slots start */


                   $query = "select  acss.booking_payment_type, acss.is_paid_booking_convenience_fee, IF(ac.id  IS NOT NULL,'CUSTOMER','CHILDREN') as customer_type, IFNULL(ac.id,c.id) as customer_id,  mpo.total_amount, acss.booking_validity_attempt, acss.medical_product_order_id,  acss.appointment_datetime, acss.payment_status, IFNULL(ac.mobile,c.mobile) as mobile, IFNULL(ac.uhid,c.uhid) as uhid, bcfd.booking_convenience_fee, acss.id as appointment_id, CONCAT(IFNULL(ac.title,c.title),' ',IFNULL(ac.first_name,c.child_name)) as appointment_patient_name, acss.sub_token,acss.queue_number, acss.slot_time, acss.payment_status, acss.consulting_type, acss.sub_token, acss.has_token, acss.emergency_appointment, acss.custom_token,acss.queue_number, acss.is_paid_booking_convenience_fee, acss.amount, acss.status AS booking_status from appointment_customer_staff_services as acss left join appointment_customers as ac on ac.id = acss.appointment_customer_id left join childrens as c on c.id = acss.children_id left join booking_convenience_fee_details as bcfd on bcfd.appointment_customer_staff_service_id = acss.id left join medical_product_orders as mpo on mpo.id = acss.medical_product_order_id where  acss.appointment_address_id=$address_id and acss.thinapp_id = $thin_app_id and  acss.appointment_staff_id=$doctor_id AND DATE(acss.appointment_datetime) = '$booking_date' and ( ( acss.status IN('CONFIRM','RESCHEDULE','NEW','CLOSED') and acss.delete_status = 'NONE')  OR ( acss.status = 'REFUND' AND acss.refund_amount != acss.amount ))  order by acss.appointment_datetime asc, CAST(acss.queue_number  AS DECIMAL(10,2)) asc";
                   $booking = $connection->query($query);
                   if ($booking->num_rows) {
                       $booking = mysqli_fetch_all($booking, MYSQLI_ASSOC);
                       foreach($booking as $key => $book){
                           if($book['emergency_appointment']=="YES"){
                               $emergency_token[] = $book;
                           }else if($book['custom_token']=="YES"){
                               $custom_token[] = $book;
                           }else if($book['has_token']=="NO"){
                               $token = explode(".",$book['queue_number']);
                               $walkin_token[$token[0]][] = $book;
                           }else{
                               $booking_array[$book['slot_time']][] = $book;
                           }
                       }
                   }
                   /* get appointment booked slots end */

                   /* add emergency token */
                   if(!empty($emergency_token)){
                       foreach($emergency_token as $inner => $bookData){
                           $final_array[] = Custom::createBookingArray($bookData);
                       }
                   }
                   /* end emergency token */

             
                   $token = 1;
                   $manageBreakFlag = false;
                   foreach ($slot_array as $key => $slot){
                       $status = "AVAILABLE";
                       $bookedTokenArray =array_key_exists($slot,$booking_array);
                       $walkingTokenArray =array_key_exists($token,$walkin_token);
                       $break_end = array_key_exists($slot,$walkin_button_pos)?"YES":"NO";
                       if(!empty($bookedTokenArray) || !empty($walkingTokenArray)){
                           $tmp =array();
                           if(!empty($bookedTokenArray)){
                               $tmp = $booking_array[$slot];
                           }
                           if(!empty($walkingTokenArray)){
                               $tmp = array_merge($tmp,$walkin_token[$token]);
                           }
                           $bookedTokenArray = $tmp;
                       }else if(!empty($blocked_slot) && (in_array($slot,$blocked_slot) || array_key_exists('ALL_SLOT',$blocked_slot))){
                           $status = "BLOCKED";
                       }else{
                           if(strtotime(date('h:i A')) > strtotime($slot)){
                               $status = "EXPIRED";
                           }
                       }


                       $break_end_tmp =$break_end;
                       if(!empty($bookedTokenArray)){
                           foreach($bookedTokenArray as $inner => $bookData){
                               $totalAppointment = count($bookedTokenArray);
                               if($break_end=="YES" && $totalAppointment > 1 ){
                                   if($totalAppointment==$inner+1){
                                       $break_end_tmp = "YES";
                                   }else{
                                       $break_end_tmp = "NO";
                                   }
                               }
                               
                               if($inner==0 && ($bookData['sub_token']=="YES" || $bookData['has_token']=="NO" )){
                                   if(strtotime(date('h:i A')) > strtotime($slot)){
                                       $status = "EXPIRED";
                                   }
                                   $final_array[] = array('queue_number'=>$token,'status'=>$status,"time"=>$slot,"break_end"=>$break_end_tmp);
                               }
                           		$status = "BOOKED";
                               $final_array[] = Custom::createBookingArray($bookData,$break_end_tmp);

                           }
                       }else{
                           $final_array[] = array('queue_number'=>$token,'status'=>$status,"time"=>$slot,"break_end"=>$break_end);
                       }

                       $token++;
                   }

                   /* add custom token */
                   if(!empty($custom_token)){
                       foreach($custom_token as $inner => $bookData){
                           $final_array[] = Custom::createBookingArray($bookData);
                       }
                   }
                   /* end end token */

                    // echo "<pre>";
                   //print_r($final_array);die;
               }


                $date = DateTime::createFromFormat('Y-m-d', $booking_date);
                $booking_date = $date->format('m/d/Y');
                $payment_list = false;
                $colorData = Custom::getColorCodeAppointmentSlots($login['thinapp_id']);
                $this->set(compact(array('payment_list','interval', 'colorData','final_array', 'breaks_array', 'doctor_id', 'user_role', 'booking_date','address_id','service_id')));
                $this->render('lite_slot_data', 'ajax');

            }
        }




    }

    public function load_slot_data_tmp()
    {
        $this->layout = 'ajax';
        if ($this->request->is('ajax')) {

            $address_id = ($this->request->data['address_id']);
            $doctor_id = ($this->request->data['doctor_id']);
            $service_id = ($this->request->data['service_id']);
            $booking_date = $this->request->data['date'];
            $date = DateTime::createFromFormat('d/m/Y', $booking_date);
            $booking_date = $date->format('m/d/Y');
            $drop_down_booking_date = $date->format('m/d/Y');
            $return_array = isset($this->request->data['return_array'])?true:false;

            $post = array();

            $login = $this->Session->read('Auth.User.User');
            $login_user = $this->Session->read('Auth.User');
            $user_role = Custom::hospital_get_user_role($login['mobile'], $login['thinapp_id'], $login['role_id']);
            $final_array = $appointmentIDs = array();




            if ($this->Custom->check_app_enable_permission($login['thinapp_id'], "NEW_QUICK_APPOINTMENT")) {

                $doctor_data = Custom::get_doctor_and_service_time(base64_decode($doctor_id), base64_decode($service_id));
                $show_expire_token_slot = !empty($doctor_data['show_expire_token_slot'])?$doctor_data['show_expire_token_slot']:$login_user['Thinapp']['show_expire_token_slot'];
                $expired_slots = ($show_expire_token_slot == "YES") ? true : false;


                $duration = @$doctor_data['service_slot_duration'];
                $date = DateTime::createFromFormat('m/d/Y', $booking_date);
                $new_data = $date->format('Y-m-d');
                $slot_array = Custom::new_get_appointment_slot($login['thinapp_id'], base64_decode($doctor_id), base64_decode($service_id), base64_decode($address_id), $doctor_data['appointment_setting_type'], $new_data,false, false,$user_role,$expired_slots);
                $booked_array = Custom::new_get_doctor_booked_appointment($login['thinapp_id'], base64_decode($doctor_id), base64_decode($service_id), base64_decode($address_id), $new_data, false, true);
                $time_string = date('d', strtotime($booking_date)) . "##" . date('D', strtotime($booking_date)) . "##" . date('M', strtotime($booking_date)) . "##" . date('Y', strtotime($booking_date));
                $counter = 0;
                if (!empty($slot_array)) {
                    if (!empty($booked_array)) {
                        foreach ($booked_array as $key => $slot_data) {
                            $booked_slots[$slot_data['slot_time']][] = $slot_data;
                            $date = DateTime::createFromFormat('h:i A', $slot_data['slot_time']);
                            $app_time = strtotime($date->format('H:i'));
                            $current_time = strtotime(date('H:i'));
                            $booking_compare = strtotime(date('Y-m-d',strtotime($booking_date)));
                            $current_compare = strtotime(date('Y-m-d'));

                            if (in_array($slot_data['custom_token'],array("YES","NO")) && $slot_data['custom_token'] == "NO") {
                                $appointmentIDs[] = $slot_data['appointment_id'];
                                $final_array[$counter] = $slot_data;
                                $final_array[$counter]['id'] = 0;
                                $final_array[$counter]['flag'] = "BOOKED";
                                $final_array[$counter]['time'] = $slot_data['slot_time'];
                                $counter++;
                            } else if ($slot_data['custom_token'] == "YES") {
                                $appointmentIDs[] = $slot_data['appointment_id'];
                                $final_array[$counter] = $slot_data;
                                $final_array[$counter]['id'] = 0;
                                $final_array[$counter]['flag'] = "BOOKED";
                                $final_array[$counter]['time'] = $slot_data['slot_time'];
                                $merge_tmp = array(
                                    'slot' => $slot_data['slot_time'],
                                    'queue_number' => $slot_data['queue_number'],
                                    'date' => $time_string,
                                    'status' => "BOOKED",
                                );
                                $slot_list_array[] = $merge_tmp;
                                $counter++;
                            }
                        }
                    }
                    foreach ($slot_array as $key => $data) {

                        if (!empty($booked_slots) && array_key_exists($data['slot'], $booked_slots) && count($booked_slots[$data['slot']]) > 0) {

                            $myArray = $booked_slots[$data['slot']];
                            $myArray = Custom::array_order_by($myArray, 'queue_number', SORT_ASC);
                            foreach ($myArray as $time_key => $val) {
                                $tmp = explode('.', $val['queue_number']);
                                $date = DateTime::createFromFormat('h:i A', $data['slot']);
                                $app_time = strtotime($date->format('H:i'));
                                $current_time = strtotime(date('H:i'));
                                if (count($tmp) == 2 && $time_key == 0) {
                                    $final_array[$counter] = $data;
                                    $final_array[$counter]['appointment_id'] = 0;
                                    $final_array[$counter]['customer_id'] = 0;
                                    $final_array[$counter]['slot_time'] = $data['slot'];
                                    $final_array[$counter]['name'] = '';
                                    $final_array[$counter]['uhid'] = '';
                                    $final_array[$counter]['mobile'] = '';
                                    $final_array[$counter]['profile_photo'] = '';
                                    $final_array[$counter]['time'] = $data['slot'];
                                    $final_array[$counter]['id'] = 0;
                                    $final_array[$counter]['service_amount'] = 0;
                                    $final_array[$counter]['flag'] = ($data['status'] != 'BOOKED') ? $data['status'] : 'AVAILABLE';
                                    $final_array[$counter]['queue_number'] = $tmp[0];
                                    $final_array[$counter]['sub_token'] = "NO";
                                    $counter++;
                                }

                                $appointmentIDs[] = $val['appointment_id'];
                                $final_array[$counter] = $val;
                                $final_array[$counter]['id'] = 0;
                                $final_array[$counter]['flag'] = "BOOKED";
                                $final_array[$counter]['time'] = $data['slot'];
                                if (count($tmp) == 2) {
                                    $final_array[$counter]['sub_token'] = "YES";
                                }
                                $counter++;
                            }

                        } else {
                            $tmp['appointment_id'] = 0;
                            $tmp['customer_id'] = 0;
                            $tmp['slot_time'] = $data['slot'];
                            $tmp['name'] = "";
                            $tmp['uhid'] = "";
                            $tmp['mobile'] = "";
                            $tmp['profile_photo'] = "";
                            $tmp['address'] = "";
                            $tmp['time'] = $data['slot'];
                            $tmp['flag'] = $data['status'];
                            $tmp['id'] = $counter + 1;
                            $tmp['service_amount'] = 0;
                            $tmp['queue_number'] = $data['token'];
                            $tmp['sub_token'] = "NO";
                            $final_array[$counter] = $tmp;
                            $counter++;
                        }

                    }
                }else{
                    if (!empty($booked_array)) {
                        foreach ($booked_array as $key => $slot_data) {
                            $booked_slots[$slot_data['slot_time']][] = $slot_data;
                            $date = DateTime::createFromFormat('h:i A', $slot_data['slot_time']);
                            $app_time = strtotime($date->format('H:i'));
                            $current_time = strtotime(date('H:i'));
                            $booking_compare = strtotime(date('Y-m-d',strtotime($booking_date)));
                            $current_compare = strtotime(date('Y-m-d'));

                            if (in_array($slot_data['custom_token'],array("YES","NO")) && $slot_data['custom_token'] == "NO") {
                                $appointmentIDs[] = $slot_data['appointment_id'];
                                $final_array[$counter] = $slot_data;
                                $final_array[$counter]['id'] = 0;
                                $final_array[$counter]['flag'] = "BOOKED";
                                $final_array[$counter]['time'] = $slot_data['slot_time'];
                                $counter++;
                            } else if ($slot_data['custom_token'] == "YES") {
                                $appointmentIDs[] = $slot_data['appointment_id'];
                                $final_array[$counter] = $slot_data;
                                $final_array[$counter]['id'] = 0;
                                $final_array[$counter]['flag'] = "BOOKED";
                                $final_array[$counter]['time'] = $slot_data['slot_time'];
                                $merge_tmp = array(
                                    'slot' => $slot_data['slot_time'],
                                    'queue_number' => $slot_data['queue_number'],
                                    'date' => $time_string,
                                    'status' => "BOOKED",
                                );
                                $slot_list_array[] = $merge_tmp;
                                $counter++;
                            }
                        }
                    }
                }
            } else {


                $post['app_key'] = APP_KEY;
                $post['share_from_mobile'] = $login['mobile'];
                $post['user_id'] = $login['id'];
                $post['thin_app_id'] = $login['thinapp_id'];
                $post['mobile'] = $login['mobile'];
                $post['address_id'] = base64_decode($address_id);
                $post['doctor_id'] = base64_decode($doctor_id);
                $post['schedule_date'] = $booking_date;
                $slot_list = WebservicesFunction::web_get_staff_availability_for_customer($post);

                $res = json_decode($slot_list, true);
                if ($res['status'] == 1) {
                    $slot_list = @$res['data']['schedule_detail'];

                } else {
                    $slot_list = array();
                }

                $get_doctor_service = Custom::get_doctor_service_data(base64_decode($doctor_id));

                $show_expire_token_slot = !empty($get_doctor_service['show_expire_token_slot'])?$get_doctor_service['show_expire_token_slot']:$login_user['Thinapp']['show_expire_token_slot'];
                $expired_slots = ($show_expire_token_slot == "YES") ? true : false;


                $duration = @$get_doctor_service['service_slot_duration'];

                $slot_list_array = Custom::load_doctor_slot_by_address(date('Y-m-d', strtotime($booking_date)), base64_decode($doctor_id), $get_doctor_service['service_slot_duration'], $login['thinapp_id'], base64_decode($address_id),false,false,false,$expired_slots);
                $date = DateTime::createFromFormat('m/d/Y', $booking_date);
                $new_data = $date->format('Y-m-d');
                $doctor_booked_appointment = Custom::new_get_doctor_booked_appointment($login['thinapp_id'], base64_decode($doctor_id), $get_doctor_service['id'], base64_decode($address_id), $new_data, false, true);

                $booked_slots = array();
                $counter = 0;
                $tmp_array = $appointmentIDs = array();
                $time_string = date('d', strtotime($booking_date)) . "##" . date('D', strtotime($booking_date)) . "##" . date('M', strtotime($booking_date)) . "##" . date('Y', strtotime($booking_date));
                if (!empty($doctor_booked_appointment)) {
                    foreach ($doctor_booked_appointment as $key => $slot_data) {
                        $booked_slots[$slot_data['slot_time']][] = $slot_data;
                        $date = DateTime::createFromFormat('h:i A', $slot_data['slot_time']);
                        $app_time = strtotime($date->format('H:i'));
                        $current_time = strtotime(date('H:i'));

                        $booking_compare = strtotime(date('Y-m-d',strtotime($booking_date)));
                        $current_compare = strtotime(date('Y-m-d'));

                        if (in_array($slot_data['custom_token'],array("YES","NO")) && $slot_data['custom_token'] == "NO") {
                            $appointmentIDs[] = $slot_data['appointment_id'];
                            $final_array[$counter] = $slot_data;
                            $final_array[$counter]['id'] = 0;
                            $final_array[$counter]['flag'] = "BOOKED";
                            $final_array[$counter]['time'] = $slot_data['slot_time'];
                            $counter++;
                        }if ($slot_data['custom_token'] == "YES") {
                            $appointmentIDs[] = $slot_data['appointment_id'];
                            $final_array[$counter] = $slot_data;
                            $final_array[$counter]['id'] = 0;
                            $final_array[$counter]['flag'] = "BOOKED";
                            $final_array[$counter]['time'] = $slot_data['slot_time'];
                            $merge_tmp = array(
                                'slot' => $slot_data['slot_time'],
                                'queue_number' => $slot_data['queue_number'],
                                'date' => $time_string,
                                'status' => "BOOKED",
                            );
                            $slot_list_array[] = $merge_tmp;
                            $counter++;
                        }
                    }
                }


                if (!empty($slot_list_array)) {
                    foreach ($slot_list_array as $key => $slot_data) {
                        $tmp_array[$slot_data['slot']]['status'] = $slot_data['status'];
                        $tmp_array[$slot_data['slot']]['queue_number'] = $slot_data['queue_number'];
                    }
                }


                if (!empty($slot_list)) {
                    foreach ($slot_list as $key => $data) {
                        $data['sub_token'] = "NO";
                        if (array_key_exists($data['time'], $tmp_array)) {

                            if (array_key_exists($data['time'], $booked_slots) && count($booked_slots[$data['time']]) > 0) {
                                $date = DateTime::createFromFormat('h:i A', $data['time']);
                                $app_time = strtotime($date->format('H:i'));
                                $current_time = strtotime(date('H:i'));
                                $myArray = $booked_slots[$data['time']];
                                $myArray = Custom::array_order_by($myArray, 'queue_number', SORT_ASC);
                                foreach ($myArray as $time_key => $val) {
                                    $tmp = explode('.', $val['queue_number']);
                                    if (count($tmp) == 2 && $time_key == 0) {
                                        $final_array[$counter] = $data;
                                        $final_array[$counter]['appointment_id'] = 0;
                                        $final_array[$counter]['customer_id'] = 0;
                                        $final_array[$counter]['slot_time'] = $data['time'];
                                        $final_array[$counter]['name'] = '';
                                        $final_array[$counter]['uhid'] = '';
                                        $final_array[$counter]['mobile'] = '';
                                        $final_array[$counter]['profile_photo'] = '';
                                        $final_array[$counter]['time'] = $data['time'];
                                        $final_array[$counter]['id'] = 0;
                                        $final_array[$counter]['service_amount'] = $data['service_amount'];
                                        $final_array[$counter]['flag'] = $tmp_array[$data['time']]['status'];
                                        $final_array[$counter]['queue_number'] = $tmp[0];
                                        $counter++;
                                    }

                                    $appointmentIDs[] = $val['appointment_id'];
                                    $final_array[$counter] = $val;
                                    $final_array[$counter]['id'] = 0;
                                    $final_array[$counter]['flag'] = "BOOKED";
                                    $final_array[$counter]['time'] = $data['time'];
                                    if (count($tmp) == 2) {
                                        $final_array[$counter]['sub_token'] = "YES";
                                    }
                                    $counter++;


                                }
                            } else {

                                if ($data['appointment_id'] > 0) {
                                    $appointmentIDs[] = $data['appointment_id'];
                                }
                                $final_array[$counter] = $data;
                                $final_array[$counter]['flag'] = $tmp_array[$data['time']]['status'];
                                $final_array[$counter]['queue_number'] = $tmp_array[$data['time']]['queue_number'];
                                $counter++;
                            }


                        }
                    }
                }

            }


            $paymentDataRow = $this->AppointmentCustomerStaffService->find('all', array('fields' => array('AppointmentCustomerStaffService.id', 'AppointmentCustomerStaffService.booking_validity_attempt', 'AppointmentCustomerStaffService.appointment_datetime', 'AppointmentCustomerStaffService.medical_product_order_id', 'AppointmentCustomerStaffService.status', 'AppointmentCustomerStaffService.appointment_staff_id', 'AppointmentCustomerStaffService.appointment_address_id', 'AppointmentCustomerStaffService.appointment_service_id', 'AppointmentCustomerStaffService.payment_status', 'AppointmentCustomerStaffService.booking_payment_type', 'AppointmentCustomerStaffService.amount', 'AppointmentCustomerStaffService.ipd_procedure_amount', 'AppointmentCustomerStaffService.vaccination_amount', 'AppointmentCustomerStaffService.other_amount', 'AppointmentCustomerStaffService.other_amount', 'AppointmentCustomerStaffService.appointment_parent_id','MedicalProductOrder.payment_type_name'), 'conditions' => array('AppointmentCustomerStaffService.id' => $appointmentIDs), 'contain' => 'MedicalProductOrder'));
            $paymentData = array();
            $orderData = array();
            foreach ($paymentDataRow as $val) {
                $paymentData[$val['AppointmentCustomerStaffService']['id']] = $val['AppointmentCustomerStaffService'];
                $orderData[$val['AppointmentCustomerStaffService']['id']] = isset($val['MedicalProductOrder']['payment_type_name'])?$val['MedicalProductOrder']['payment_type_name']:"CASH";
            }

            $finalArray = array();
            foreach ($final_array as $key => $value) {
                if (!($value['flag'] == 'BOOKED' && ($value['appointment_id'] == 0 || $value['appointment_id'] == ''))) {
                    $finalArray[$key] = $value;
                    if (isset($paymentData[$value['appointment_id']])) {
                        $finalArray[$key]['id'] = $value['appointment_id'];
                        $finalArray[$key]['payment_status'] = $paymentData[$value['appointment_id']]['payment_status'];
                        //$finalArray[$key]['booking_payment_type'] = $paymentData[$value['appointment_id']]['booking_payment_type'];
                        $finalArray[$key]['booking_payment_type'] = $orderData[$value['appointment_id']];
                        $finalArray[$key]['appointment_datetime'] = $paymentData[$value['appointment_id']]['appointment_datetime'];
                        $finalArray[$key]['status'] = $paymentData[$value['appointment_id']]['status'];
                        $finalArray[$key]['appointment_staff_id'] = $paymentData[$value['appointment_id']]['appointment_staff_id'];
                        $finalArray[$key]['appointment_address_id'] = $paymentData[$value['appointment_id']]['appointment_address_id'];
                        $finalArray[$key]['appointment_service_id'] = $paymentData[$value['appointment_id']]['appointment_service_id'];
                        $finalArray[$key]['amount'] = $paymentData[$value['appointment_id']]['amount'];
                        $finalArray[$key]['ipd_procedure_amount'] = $paymentData[$value['appointment_id']]['ipd_procedure_amount'];
                        $finalArray[$key]['vaccination_amount'] = $paymentData[$value['appointment_id']]['vaccination_amount'];
                        $finalArray[$key]['other_amount'] = $paymentData[$value['appointment_id']]['other_amount'];
                        $finalArray[$key]['medical_product_order_id'] = $paymentData[$value['appointment_id']]['medical_product_order_id'];
                        $finalArray[$key]['booking_validity_attempt'] = $paymentData[$value['appointment_id']]['booking_validity_attempt'];

                        /* if($value['appointment_id'] != $paymentData[$value['appointment_id']]['appointment_parent_id'])
                        {
                            $finalArray[$key]['payment_status'] = "PENDING";
                        } */


                    } else {
                        $finalArray[$key]['id'] = 0;
                        $finalArray[$key]['payment_status'] = '';
                        $finalArray[$key]['booking_payment_type'] = '';
                        $finalArray[$key]['appointment_datetime'] = '';
                        $finalArray[$key]['status'] = '';
                        $finalArray[$key]['appointment_staff_id'] = 0;
                        $finalArray[$key]['appointment_address_id'] = 0;
                        $finalArray[$key]['appointment_service_id'] = 0;
                        $finalArray[$key]['booking_validity_attempt'] = 0;
                    }

                }

                $finalArray[$key]['timestamp'] = strtotime($finalArray[$key]['time']);
                if($finalArray[$key]['sub_token']=="YES"){
                    $tmp = explode('.',$final_array[$key]['queue_number']);
                    if(count($tmp)==2){
                        $finalArray[$key]['timestamp'] = strtotime($finalArray[$key]['time']) + end($tmp);
                    }
                }



            }
            $final_array = $finalArray;
            $final_array = Custom::array_order_by($final_array, 'timestamp', SORT_ASC);
            $final_array = array_map("unserialize", array_unique(array_map("serialize", $final_array)));

            $date = DateTime::createFromFormat('m/d/Y', $booking_date);
            $searchDate = $date->format('Y-m-d');
            $condition['MedicalProductOrder.is_opd'] = 'Y';
            $role = $login_user['USER_ROLE'];
            if ($role != 'ADMIN') {
                $condition['MedicalProductOrder.created_by_user_id'] = ($role == "DOCTOR" || $role == "RECEPTIONIST") ? $login['id'] : 0;
            }

            $created_by_user_id = 0;
            $role = $login_user['USER_ROLE'];
            if ($role != 'ADMIN') {
                $created_by_user_id = ($role == "DOCTOR" || $role == "RECEPTIONIST") ? $login['id'] : 0;
            }

            if($return_array===true){
                $this->autoRender = false;
                $this->layout = false;
                $return_array=array();
                if(!empty($final_array)){
                    foreach($final_array as $key =>$value){
                        $return_array[] =array('time'=>$value['time'],'token'=>$value['queue_number'],'flag'=>$value['flag'],'has_token'=>isset($value['has_token'])?$value['has_token']:'YES','sub_token'=>$value['sub_token'],'custom_token'=>isset($value['custom_token'])?$value['custom_token']:'NO');
                    }
                }
                return json_encode($return_array);die;
            }else{

                $this->set(compact(array('final_array', 'appointment_id', 'doctor_id', 'user_role', 'payment_list', 'duration', 'booking_date','address_id')));
                $this->render('load_slot_data_tmp', 'ajax');
            }



        } else {
            exit();
        }

    }


    public function load_slot_data_by_type()
    {
        $this->layout = 'ajax';
        if ($this->request->is('ajax')) {

            $address_id = ($this->request->data['address_id']);
            $doctor_id = ($this->request->data['doctor_id']);
            $service_id = ($this->request->data['service_id']);
            $booking_date = $this->request->data['date'];
            $type = $this->request->data['type'];
            $custom_order = ($type=="LIVE_TRACKER")?true:false;
            $date = DateTime::createFromFormat('d/m/Y', $booking_date);
            $booking_date = $date->format('m/d/Y');
            $return_array = isset($this->request->data['return_array']) ? true : false;
            $login = $this->Session->read('Auth.User.User');
            $login_user = $this->Session->read('Auth.User');


            $post = array();
            if ($type == "ALL_APPOINTMENT") {
                $date = DateTime::createFromFormat('m/d/Y', $booking_date);
                $booking_date = $date->format('Y-m-d');
                $appointment_list = Custom::get_all_appointment_list_by_date($booking_date,$login['thinapp_id']);
                $this->set(compact('type','appointment_list'));
            }else if($type == "LIVE_TRACKER"){
                $date = DateTime::createFromFormat('m/d/Y', $booking_date);
                $booking_date = $date->format('Y-m-d');
                $appointment_list = Custom::get_live_tracker_data($login['thinapp_id'],$booking_date,base64_decode($doctor_id),base64_decode($address_id),base64_decode($service_id),$login_user['USER_ROLE']);

                $doct_id = base64_decode($doctor_id);
                $list = Custom::getDoctorWebTrackerDataUpcomingList(array($doct_id),$login['thinapp_id'],1);
                $current_token_value = !empty($list[$doct_id]['current_token'])?$list[$doct_id]['current_token']:0;
                $this->set(compact('booking_date','doctor_id','appointment_list','live_tracker','current_token_value'));
                $this->render('live_tracker', 'ajax');
            } else {

            $user_role = Custom::hospital_get_user_role($login['mobile'], $login['thinapp_id'], $login['role_id']);
            $final_array = $appointmentIDs = array();
            if ($this->Custom->check_app_enable_permission($login['thinapp_id'], "NEW_QUICK_APPOINTMENT")) {

                $doctor_data = Custom::get_doctor_and_service_time(base64_decode($doctor_id), base64_decode($service_id));
                $duration = @$doctor_data['service_slot_duration'];
                $date = DateTime::createFromFormat('m/d/Y', $booking_date);
                $new_data = $date->format('Y-m-d');
                $slot_array = Custom::new_get_appointment_slot($login['thinapp_id'], base64_decode($doctor_id), base64_decode($service_id), base64_decode($address_id), $doctor_data['appointment_setting_type'], $new_data, false, false, $user_role);
                $booked_array = Custom::new_get_doctor_booked_appointment($login['thinapp_id'], base64_decode($doctor_id), base64_decode($service_id), base64_decode($address_id), $new_data, false, true, true);
                $time_string = date('d', strtotime($booking_date)) . "##" . date('D', strtotime($booking_date)) . "##" . date('M', strtotime($booking_date)) . "##" . date('Y', strtotime($booking_date));
                $counter = 0;
                if (!empty($slot_array)) {
                    if (!empty($booked_array)) {
                        foreach ($booked_array as $key => $slot_data) {
                            $booked_slots[$slot_data['slot_time']][] = $slot_data;
                            $date = DateTime::createFromFormat('h:i A', $slot_data['slot_time']);
                            $app_time = strtotime($date->format('H:i'));
                            $current_time = strtotime(date('H:i'));
                            $booking_compare = strtotime(date('Y-m-d', strtotime($booking_date)));
                            $current_compare = strtotime(date('Y-m-d'));

                            if (in_array($slot_data['custom_token'], array("YES", "NO")) && $slot_data['custom_token'] == "NO") {
                                $appointmentIDs[] = $slot_data['appointment_id'];
                                $final_array[$counter] = $slot_data;
                                $final_array[$counter]['id'] = 0;
                                $final_array[$counter]['flag'] = "BOOKED";
                                $final_array[$counter]['time'] = $slot_data['slot_time'];
                                $counter++;
                            } else if ($slot_data['custom_token'] == "YES") {
                                $appointmentIDs[] = $slot_data['appointment_id'];
                                $final_array[$counter] = $slot_data;
                                $final_array[$counter]['id'] = 0;
                                $final_array[$counter]['flag'] = "BOOKED";
                                $final_array[$counter]['time'] = $slot_data['slot_time'];
                                $merge_tmp = array(
                                    'slot' => $slot_data['slot_time'],
                                    'queue_number' => $slot_data['queue_number'],
                                    'date' => $time_string,
                                    'status' => "BOOKED",
                                );
                                $slot_list_array[] = $merge_tmp;
                                $counter++;
                            }
                        }
                    }
                    foreach ($slot_array as $key => $data) {

                        if (!empty($booked_slots) && array_key_exists($data['slot'], $booked_slots) && count($booked_slots[$data['slot']]) > 0) {

                            $myArray = $booked_slots[$data['slot']];
                            $myArray = Custom::array_order_by($myArray, 'queue_number', SORT_ASC);
                            foreach ($myArray as $time_key => $val) {
                                $tmp = explode('.', $val['queue_number']);
                                $date = DateTime::createFromFormat('h:i A', $data['slot']);
                                $app_time = strtotime($date->format('H:i'));
                                $current_time = strtotime(date('H:i'));
                                if (count($tmp) == 2 && $time_key == 0) {
                                    $final_array[$counter] = $data;
                                    $final_array[$counter]['appointment_id'] = 0;
                                    $final_array[$counter]['customer_id'] = 0;
                                    $final_array[$counter]['slot_time'] = $data['slot'];
                                    $final_array[$counter]['name'] = '';
                                    $final_array[$counter]['uhid'] = '';
                                    $final_array[$counter]['mobile'] = '';
                                    $final_array[$counter]['profile_photo'] = '';
                                    $final_array[$counter]['time'] = $data['slot'];
                                    $final_array[$counter]['id'] = 0;
                                    $final_array[$counter]['service_amount'] = 0;
                                    $final_array[$counter]['flag'] = ($data['status'] != 'BOOKED') ? $data['status'] : 'AVAILABLE';
                                    $final_array[$counter]['queue_number'] = $tmp[0];
                                    $final_array[$counter]['sub_token'] = "NO";
                                    $counter++;
                                }

                                $appointmentIDs[] = $val['appointment_id'];
                                $final_array[$counter] = $val;
                                $final_array[$counter]['id'] = 0;
                                $final_array[$counter]['flag'] = "BOOKED";
                                $final_array[$counter]['time'] = $data['slot'];
                                if (count($tmp) == 2) {
                                    $final_array[$counter]['sub_token'] = "YES";
                                }
                                $counter++;
                            }

                        } else {
                            $tmp['appointment_id'] = 0;
                            $tmp['customer_id'] = 0;
                            $tmp['slot_time'] = $data['slot'];
                            $tmp['name'] = "";
                            $tmp['uhid'] = "";
                            $tmp['mobile'] = "";
                            $tmp['profile_photo'] = "";
                            $tmp['address'] = "";
                            $tmp['time'] = $data['slot'];
                            $tmp['flag'] = $data['status'];
                            $tmp['id'] = $counter + 1;
                            $tmp['service_amount'] = 0;
                            $tmp['queue_number'] = $data['token'];
                            $tmp['sub_token'] = "NO";
                            $final_array[$counter] = $tmp;
                            $counter++;
                        }

                    }
                } else {
                    if (!empty($booked_array)) {
                        foreach ($booked_array as $key => $slot_data) {
                            $booked_slots[$slot_data['slot_time']][] = $slot_data;
                            $date = DateTime::createFromFormat('h:i A', $slot_data['slot_time']);
                            $app_time = strtotime($date->format('H:i'));
                            $current_time = strtotime(date('H:i'));
                            $booking_compare = strtotime(date('Y-m-d', strtotime($booking_date)));
                            $current_compare = strtotime(date('Y-m-d'));

                            if (in_array($slot_data['custom_token'], array("YES", "NO")) && $slot_data['custom_token'] == "NO") {
                                $appointmentIDs[] = $slot_data['appointment_id'];
                                $final_array[$counter] = $slot_data;
                                $final_array[$counter]['id'] = 0;
                                $final_array[$counter]['flag'] = "BOOKED";
                                $final_array[$counter]['time'] = $slot_data['slot_time'];
                                $counter++;
                            } else if ($slot_data['custom_token'] == "YES") {
                                $appointmentIDs[] = $slot_data['appointment_id'];
                                $final_array[$counter] = $slot_data;
                                $final_array[$counter]['id'] = 0;
                                $final_array[$counter]['flag'] = "BOOKED";
                                $final_array[$counter]['time'] = $slot_data['slot_time'];
                                $merge_tmp = array(
                                    'slot' => $slot_data['slot_time'],
                                    'queue_number' => $slot_data['queue_number'],
                                    'date' => $time_string,
                                    'status' => "BOOKED",
                                );
                                $slot_list_array[] = $merge_tmp;
                                $counter++;
                            }
                        }
                    }
                }
            } else {


                $post['app_key'] = APP_KEY;
                $post['share_from_mobile'] = $login['mobile'];
                $post['user_id'] = $login['id'];
                $post['thin_app_id'] = $login['thinapp_id'];
                $post['mobile'] = $login['mobile'];
                $post['address_id'] = base64_decode($address_id);
                $post['doctor_id'] = base64_decode($doctor_id);
                $post['schedule_date'] = $booking_date;
                $slot_list = WebservicesFunction::web_get_staff_availability_for_customer($post);

                $res = json_decode($slot_list, true);
                if ($res['status'] == 1) {
                    $slot_list = @$res['data']['schedule_detail'];

                } else {
                    $slot_list = array();
                }

                $get_doctor_service = Custom::get_doctor_service_data(base64_decode($doctor_id));
                $duration = @$get_doctor_service['service_slot_duration'];

                $slot_list_array = Custom::load_doctor_slot_by_address(date('Y-m-d', strtotime($booking_date)), base64_decode($doctor_id), $get_doctor_service['service_slot_duration'], $login['thinapp_id'], base64_decode($address_id), false, false, false, true);
                $date = DateTime::createFromFormat('m/d/Y', $booking_date);
                $new_data = $date->format('Y-m-d');
                $doctor_booked_appointment = Custom::new_get_doctor_booked_appointment($login['thinapp_id'], base64_decode($doctor_id), $get_doctor_service['id'], base64_decode($address_id), $new_data, false, true, true);

                $booked_slots = array();
                $counter = 0;
                $tmp_array = $appointmentIDs = array();
                $time_string = date('d', strtotime($booking_date)) . "##" . date('D', strtotime($booking_date)) . "##" . date('M', strtotime($booking_date)) . "##" . date('Y', strtotime($booking_date));
                if (!empty($doctor_booked_appointment)) {
                    foreach ($doctor_booked_appointment as $key => $slot_data) {
                        $booked_slots[$slot_data['slot_time']][] = $slot_data;
                        $date = DateTime::createFromFormat('h:i A', $slot_data['slot_time']);
                        $app_time = strtotime($date->format('H:i'));
                        $current_time = strtotime(date('H:i'));

                        $booking_compare = strtotime(date('Y-m-d', strtotime($booking_date)));
                        $current_compare = strtotime(date('Y-m-d'));

                        if (in_array($slot_data['custom_token'], array("YES", "NO")) && $slot_data['custom_token'] == "NO") {
                            $appointmentIDs[] = $slot_data['appointment_id'];
                            $final_array[$counter] = $slot_data;
                            $final_array[$counter]['id'] = 0;
                            $final_array[$counter]['flag'] = "BOOKED";
                            $final_array[$counter]['time'] = $slot_data['slot_time'];
                            $counter++;
                        }
                        if ($slot_data['custom_token'] == "YES") {
                            $appointmentIDs[] = $slot_data['appointment_id'];
                            $final_array[$counter] = $slot_data;
                            $final_array[$counter]['id'] = 0;
                            $final_array[$counter]['flag'] = "BOOKED";
                            $final_array[$counter]['time'] = $slot_data['slot_time'];
                            $merge_tmp = array(
                                'slot' => $slot_data['slot_time'],
                                'queue_number' => $slot_data['queue_number'],
                                'date' => $time_string,
                                'status' => "BOOKED",
                            );
                            $slot_list_array[] = $merge_tmp;
                            $counter++;
                        }
                    }
                }


                if (!empty($slot_list_array)) {
                    foreach ($slot_list_array as $key => $slot_data) {
                        $tmp_array[$slot_data['slot']]['status'] = $slot_data['status'];
                        $tmp_array[$slot_data['slot']]['queue_number'] = $slot_data['queue_number'];
                    }
                }


                if (!empty($slot_list)) {
                    foreach ($slot_list as $key => $data) {
                        $data['sub_token'] = "NO";
                        if (array_key_exists($data['time'], $tmp_array)) {

                            if (array_key_exists($data['time'], $booked_slots) && count($booked_slots[$data['time']]) > 0) {
                                $date = DateTime::createFromFormat('h:i A', $data['time']);
                                $app_time = strtotime($date->format('H:i'));
                                $current_time = strtotime(date('H:i'));
                                $myArray = $booked_slots[$data['time']];
                                $myArray = Custom::array_order_by($myArray, 'queue_number', SORT_ASC);
                                foreach ($myArray as $time_key => $val) {
                                    $tmp = explode('.', $val['queue_number']);
                                    if (count($tmp) == 2 && $time_key == 0) {
                                        $final_array[$counter] = $data;
                                        $final_array[$counter]['appointment_id'] = 0;
                                        $final_array[$counter]['customer_id'] = 0;
                                        $final_array[$counter]['slot_time'] = $data['time'];
                                        $final_array[$counter]['name'] = '';
                                        $final_array[$counter]['uhid'] = '';
                                        $final_array[$counter]['mobile'] = '';
                                        $final_array[$counter]['profile_photo'] = '';
                                        $final_array[$counter]['time'] = $data['time'];
                                        $final_array[$counter]['id'] = 0;
                                        $final_array[$counter]['service_amount'] = $data['service_amount'];
                                        $final_array[$counter]['flag'] = $tmp_array[$data['time']]['status'];
                                        $final_array[$counter]['queue_number'] = $tmp[0];
                                        $counter++;
                                    }

                                    $appointmentIDs[] = $val['appointment_id'];
                                    $final_array[$counter] = $val;
                                    $final_array[$counter]['id'] = 0;
                                    $final_array[$counter]['flag'] = "BOOKED";
                                    $final_array[$counter]['time'] = $data['time'];
                                    if (count($tmp) == 2) {
                                        $final_array[$counter]['sub_token'] = "YES";
                                    }
                                    $counter++;


                                }
                            } else {

                                if ($data['appointment_id'] > 0) {
                                    $appointmentIDs[] = $data['appointment_id'];
                                }
                                $final_array[$counter] = $data;
                                $final_array[$counter]['flag'] = $tmp_array[$data['time']]['status'];
                                $final_array[$counter]['queue_number'] = $tmp_array[$data['time']]['queue_number'];
                                $counter++;
                            }


                        }
                    }
                }

            }


            $paymentDataRow = $this->AppointmentCustomerStaffService->find('all', array('fields' => array('AppointmentCustomerStaffService.id', 'AppointmentCustomerStaffService.booking_validity_attempt', 'AppointmentCustomerStaffService.appointment_datetime', 'AppointmentCustomerStaffService.medical_product_order_id', 'AppointmentCustomerStaffService.status', 'AppointmentCustomerStaffService.appointment_staff_id', 'AppointmentCustomerStaffService.appointment_address_id', 'AppointmentCustomerStaffService.appointment_service_id', 'AppointmentCustomerStaffService.payment_status', 'AppointmentCustomerStaffService.booking_payment_type', 'AppointmentCustomerStaffService.amount', 'AppointmentCustomerStaffService.ipd_procedure_amount', 'AppointmentCustomerStaffService.vaccination_amount', 'AppointmentCustomerStaffService.other_amount', 'AppointmentCustomerStaffService.other_amount', 'AppointmentCustomerStaffService.appointment_parent_id', 'MedicalProductOrder.payment_type_name'), 'conditions' => array('AppointmentCustomerStaffService.id' => $appointmentIDs), 'contain' => 'MedicalProductOrder'));
            $paymentData = array();
            $orderData = array();
            foreach ($paymentDataRow as $val) {
                $paymentData[$val['AppointmentCustomerStaffService']['id']] = $val['AppointmentCustomerStaffService'];
                $orderData[$val['AppointmentCustomerStaffService']['id']] = isset($val['MedicalProductOrder']['payment_type_name']) ? $val['MedicalProductOrder']['payment_type_name'] : "CASH";
            }

            $finalArray = array();
            foreach ($final_array as $key => $value) {
                if (!($value['flag'] == 'BOOKED' && ($value['appointment_id'] == 0 || $value['appointment_id'] == ''))) {
                    $finalArray[$key] = $value;
                    if (isset($paymentData[$value['appointment_id']])) {
                        $finalArray[$key]['id'] = $value['appointment_id'];
                        $finalArray[$key]['payment_status'] = $paymentData[$value['appointment_id']]['payment_status'];
                        //$finalArray[$key]['booking_payment_type'] = $paymentData[$value['appointment_id']]['booking_payment_type'];
                        $finalArray[$key]['booking_payment_type'] = $orderData[$value['appointment_id']];
                        $finalArray[$key]['appointment_datetime'] = $paymentData[$value['appointment_id']]['appointment_datetime'];
                        $finalArray[$key]['status'] = $paymentData[$value['appointment_id']]['status'];
                        $finalArray[$key]['appointment_staff_id'] = $paymentData[$value['appointment_id']]['appointment_staff_id'];
                        $finalArray[$key]['appointment_address_id'] = $paymentData[$value['appointment_id']]['appointment_address_id'];
                        $finalArray[$key]['appointment_service_id'] = $paymentData[$value['appointment_id']]['appointment_service_id'];
                        $finalArray[$key]['amount'] = $paymentData[$value['appointment_id']]['amount'];
                        $finalArray[$key]['ipd_procedure_amount'] = $paymentData[$value['appointment_id']]['ipd_procedure_amount'];
                        $finalArray[$key]['vaccination_amount'] = $paymentData[$value['appointment_id']]['vaccination_amount'];
                        $finalArray[$key]['other_amount'] = $paymentData[$value['appointment_id']]['other_amount'];
                        $finalArray[$key]['medical_product_order_id'] = $paymentData[$value['appointment_id']]['medical_product_order_id'];
                        $finalArray[$key]['booking_validity_attempt'] = $paymentData[$value['appointment_id']]['booking_validity_attempt'];

                        /* if($value['appointment_id'] != $paymentData[$value['appointment_id']]['appointment_parent_id'])
                        {
                            $finalArray[$key]['payment_status'] = "PENDING";
                        } */


                    } else {
                        $finalArray[$key]['id'] = 0;
                        $finalArray[$key]['payment_status'] = '';
                        $finalArray[$key]['booking_payment_type'] = '';
                        $finalArray[$key]['appointment_datetime'] = '';
                        $finalArray[$key]['status'] = '';
                        $finalArray[$key]['appointment_staff_id'] = 0;
                        $finalArray[$key]['appointment_address_id'] = 0;
                        $finalArray[$key]['appointment_service_id'] = 0;
                        $finalArray[$key]['booking_validity_attempt'] = 0;
                    }

                }

                $finalArray[$key]['timestamp'] = strtotime($finalArray[$key]['time']);
                if ($finalArray[$key]['sub_token'] == "YES") {
                    $tmp = explode('.', $final_array[$key]['queue_number']);
                    if (count($tmp) == 2) {
                        $finalArray[$key]['timestamp'] = strtotime($finalArray[$key]['time']) + end($tmp);
                    }
                }


            }
            $final_array = $finalArray;
            $final_array = Custom::array_order_by($final_array, 'timestamp', SORT_ASC);
            $final_array = array_map("unserialize", array_unique(array_map("serialize", $final_array)));

            $date = DateTime::createFromFormat('m/d/Y', $booking_date);
            $searchDate = $date->format('Y-m-d');
            $condition['MedicalProductOrder.is_opd'] = 'Y';
            $role = $login_user['USER_ROLE'];
            if ($role != 'ADMIN') {
                $condition['MedicalProductOrder.created_by_user_id'] = ($role == "DOCTOR" || $role == "RECEPTIONIST") ? $login['id'] : 0;
            }

            $created_by_user_id = 0;
            $role = $login_user['USER_ROLE'];
            if ($role != 'ADMIN') {
                $created_by_user_id = ($role == "DOCTOR" || $role == "RECEPTIONIST") ? $login['id'] : 0;
            }

            if ($return_array === true) {
                $this->autoRender = false;
                $this->layout = false;
                $return_array = array();
                if (!empty($final_array)) {
                    foreach ($final_array as $key => $value) {
                        $return_array[] = array('time' => $value['time'], 'token' => $value['queue_number'], 'flag' => $value['flag'], 'has_token' => isset($value['has_token']) ? $value['has_token'] : 'YES', 'sub_token' => $value['sub_token'], 'custom_token' => isset($value['custom_token']) ? $value['custom_token'] : 'NO');
                    }
                }
                return json_encode($return_array);
                die;
            } else {
                $payment_list = Custom::get_doctor_collection(base64_decode($doctor_id), $searchDate, $searchDate, base64_decode($address_id), $created_by_user_id);
                $this->set(compact(array('type', 'final_array', 'appointment_id', 'doctor_id', 'user_role', 'payment_list', 'duration', 'booking_date', 'address_id')));
                $this->render('load_slot_data_by_type', 'ajax');
            }


        }
        } else {
            exit();
        }

    }

    public function load_slot_data_reschadule()
    {
        $this->layout = 'ajax';
        if ($this->request->is('ajax')) {
            $address_id = ($this->request->data['address_id']);
            $service_id = ($this->request->data['service_id']);
            $appointment_id = ($this->request->data['appointment_id']);
            $doctor_id = ($this->request->data['doctor_id']);
            $booking_date = $this->request->data['date'];
            $login = $this->Session->read('Auth.User.User');
            $user_role = $this->Session->read('Auth.User.USER_ROLE');

            $final_array = $appointmentIDs = array();
            if ($this->Custom->check_app_enable_permission($login['thinapp_id'], "NEW_QUICK_APPOINTMENT")) {

                $doctor_data = Custom::get_doctor_by_id(base64_decode($doctor_id), $login['thinapp_id']);
                $app_data = Custom::getThinAppData($login['thinapp_id']);
                $expire_slot = ($app_data['show_expire_token_slot']=="YES")?true:false;

                $date = DateTime::createFromFormat('m/d/Y', $booking_date);
                $new_data = $date->format('Y-m-d');
                $slot_array = Custom::new_get_appointment_slot($login['thinapp_id'], base64_decode($doctor_id), base64_decode($service_id), base64_decode($address_id), $doctor_data['appointment_setting_type'], $new_data,false,false,$user_role,$expire_slot);
                $booked_array = Custom::new_get_doctor_booked_appointment($login['thinapp_id'], base64_decode($doctor_id), base64_decode($service_id), base64_decode($address_id), $new_data, true);
                if (!empty($slot_array)) {
                    $counter = 0;
                    foreach ($slot_array as $key => $value) {

                        if (!empty($booked_array) && array_key_exists($value['slot'], $booked_array)) {
                            $final_array[$counter] = $booked_array[$value['slot']];
                            $final_array[$counter]['time'] = $booked_array[$value['slot']]['slot_time'];
                            $final_array[$counter]['id'] = $counter + 1;
                            $final_array[$counter]['flag'] = 'BOOKED';
                            $appointmentIDs[] = $booked_array[$value['slot']]['appointment_id'];
                        } else {
                            $tmp['appointment_id'] = 0;
                            $tmp['customer_id'] = 0;
                            $tmp['slot_time'] = $value['slot'];
                            $tmp['name'] = "";
                            $tmp['mobile'] = "";
                            $tmp['profile_photo'] = "";
                            $tmp['address'] = "";
                            $tmp['time'] = $value['slot'];
                            $tmp['flag'] = $value['status'];
                            $tmp['id'] = $counter + 1;
                            $tmp['service_amount'] = 0;
                            $tmp['queue_number'] = $value['token'];

                            $final_array[$counter] = $tmp;
                        }
                        $counter++;

                    }
                }
            } else {


                $post = array();
                $login = $this->Session->read('Auth.User.User');
                $post['app_key'] = APP_KEY;
                $post['share_from_mobile'] = $login['mobile'];
                $post['user_id'] = $login['id'];
                $post['thin_app_id'] = $login['thinapp_id'];
                $post['mobile'] = $login['mobile'];
                $post['address_id'] = base64_decode($address_id);
                $post['doctor_id'] = base64_decode($doctor_id);
                $post['schedule_date'] = $booking_date;
                $slot_list = WebservicesFunction::get_staff_availability_for_customer($post);

                $res = json_decode($slot_list, true);
                if ($res['status'] == 1) {
                    $slot_list = $res['data']['schedule_detail'];
                } else {
                    $slot_list = array();
                }

                $get_doctor_service = Custom::get_doctor_service_data(base64_decode($doctor_id));
                $expire_slot = ($get_doctor_service['show_expire_token_slot']=="YES")?true:false;
                $slot_list_array = Custom::load_doctor_slot_by_address($booking_date, base64_decode($doctor_id), $get_doctor_service['service_slot_duration'], $login['thinapp_id'], base64_decode($address_id),false,$user_role,false,$expire_slot);

                $tmp_array = array();
                if (!empty($slot_list_array)) {
                    foreach ($slot_list_array as $key => $slot_data) {
                        $tmp_array[$slot_data['slot']]['status'] = $slot_data['status'];
                        $tmp_array[$slot_data['slot']]['queue_number'] = $slot_data['queue_number'];
                    }
                }

                if (!empty($slot_list)) {
                    $counter = 0;
                    $appointmentIDs = array();
                    foreach ($slot_list as $key => $data) {

                        if (array_key_exists($data['time'], $tmp_array)) {
                            if ($data['appointment_id'] > 0) {
                                $appointmentIDs[] = $data['appointment_id'];
                            }

                            $final_array[$counter] = $data;
                            $final_array[$counter]['flag'] = $tmp_array[$data['time']]['status'];
                            $final_array[$counter]['queue_number'] = $tmp_array[$data['time']]['queue_number'];
                            $counter++;
                        }
                    }
                }

            }


            //pr($appointmentIDs);

            $paymentDataRow = $this->AppointmentCustomerStaffService->find('all', array('fields' => array('id', 'appointment_datetime', 'status', 'appointment_staff_id', 'appointment_address_id', 'appointment_service_id', 'payment_status', 'booking_payment_type'), 'conditions' => array('id' => $appointmentIDs), 'contain' => false));
            $paymentData = array();
            foreach ($paymentDataRow as $val) {
                $paymentData[$val['AppointmentCustomerStaffService']['id']] = $val['AppointmentCustomerStaffService'];
            }

            $finalArray = array();
            foreach ($final_array as $key => $value) {
                if (!($value['flag'] == 'BOOKED' && ($value['appointment_id'] == 0 || $value['appointment_id'] == ''))) {
                    $finalArray[$key] = $value;
                    if (isset($paymentData[$value['appointment_id']])) {
                        $finalArray[$key]['id'] = $value['appointment_id'];
                        $finalArray[$key]['payment_status'] = $paymentData[$value['appointment_id']]['payment_status'];
                        $finalArray[$key]['booking_payment_type'] = $paymentData[$value['appointment_id']]['booking_payment_type'];
                        $finalArray[$key]['appointment_datetime'] = $paymentData[$value['appointment_id']]['appointment_datetime'];
                        $finalArray[$key]['status'] = $paymentData[$value['appointment_id']]['status'];
                        $finalArray[$key]['appointment_staff_id'] = $paymentData[$value['appointment_id']]['appointment_staff_id'];
                        $finalArray[$key]['appointment_address_id'] = $paymentData[$value['appointment_id']]['appointment_address_id'];
                        $finalArray[$key]['appointment_service_id'] = $paymentData[$value['appointment_id']]['appointment_service_id'];
                    } else {
                        $finalArray[$key]['id'] = 0;
                        $finalArray[$key]['payment_status'] = '';
                        $finalArray[$key]['booking_payment_type'] = '';
                        $finalArray[$key]['appointment_datetime'] = '';
                        $finalArray[$key]['status'] = '';
                        $finalArray[$key]['appointment_staff_id'] = 0;
                        $finalArray[$key]['appointment_address_id'] = 0;
                        $finalArray[$key]['appointment_service_id'] = 0;
                    }
                }
            }
            $final_array = $finalArray;
            //pr($final_array); die;
            $this->set(compact(array('final_array', 'appointment_id', 'doctor_id')));
            $this->render('load_slot_data_reschadule', 'ajax');
        } else {
            exit();
        }

    }


    public function reschedule_appointment()
    {
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $appointment_id = base64_decode($this->request->data['appointment']);
            $doctor_id = base64_decode($this->request->data['di']);
            $address_id = base64_decode($this->request->data['ai']);
            $service_id = base64_decode($this->request->data['si']);
            $slot = base64_decode($this->request->data['slot']);
            $booking_date = $this->request->data['date'];
            $post = array();
            $login = $this->Session->read('Auth.User.User');
            $post['app_key'] = APP_KEY;
            $post['user_id'] = $login['id'];
            $post['thin_app_id'] = $login['thinapp_id'];
            $post['role_id'] = 5;
            $post['appointment_id'] = $appointment_id;
            $post['booking_date'] = $booking_date;
            $post['slot_time'] = $slot;
            $post['doctor_id'] = $doctor_id;
            $post['address_id'] = $address_id;
            $post['service_id'] = $service_id;
            $post['reschedule_by'] = "DOCTOR";
            if ($this->Custom->check_app_enable_permission($login['thinapp_id'], "NEW_QUICK_APPOINTMENT")) {
                $post['new_appointment'] = "YES";
                $booking_date = date('Y-m-d', strtotime($booking_date));
                $post['booking_date'] = $booking_date;
            }
            return WebservicesFunction::reschedule_appointment($post);

        } else {
            exit();
        }

    }


    public function appointment_payment()
    {
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $appointment_id = base64_decode($this->request->data['id']);
            $post = array();
            $login = $this->Session->read('Auth.User.User');
            $post['app_key'] = APP_KEY;
            $post['user_id'] = $login['id'];
            $post['thin_app_id'] = $login['thinapp_id'];
            $post['appointment_id'] = $appointment_id;
            $post['status'] = "SUCCESS";
            $result = json_decode(WebservicesFunction::update_appointment_payment_status($post, true), true);
            if ($result['status'] == 1) {
                $notification_array = $result['notification_array'];
                unset($result['notification_array']);
                Custom::sendResponse($result);
                Custom::appointment_payment_notification($notification_array);
            } else {
                Custom::sendResponse($result);
            }

        } else {
            exit();
        }

    }


    public function cancel_appointment()
    {
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $appointment_id = base64_decode($this->request->data['id']);
            $post = array();
            $login = $this->Session->read('Auth.User.User');
            $post['app_key'] = APP_KEY;
            $post['user_id'] = $login['id'];
            $post['thin_app_id'] = $login['thinapp_id'];
            $post['thin_app_id'] = $login['thinapp_id'];
            $post['appointment_id'] = $appointment_id;
            $post['cancel_by'] = "DOCTOR";
            $post['message'] = isset($this->request->data['message']) ? $this->request->data['message'] : "";

            $result = json_decode(WebservicesFunction::cancel_appointment($post, true, true), true);
            if ($result['status'] == 1) {
                $notification_array = $result['notification_array'];
                unset($result['notification_array']);
                Custom::sendResponse($result);
                Custom::cancel_appointment_notification($notification_array);

            } else {

                Custom::sendResponse($result);
            }

        } else {
            exit();
        }

    }

    public function close_appointment()
    {
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $appointment_id = base64_decode($this->request->data['id']);
            $post = array();
            $login = $this->Session->read('Auth.User.User');
            $post['app_key'] = APP_KEY;
            $post['user_id'] = $login['id'];
            $post['thin_app_id'] = $login['thinapp_id'];
            $post['appointment_id'] = $appointment_id;
            $result = json_decode(WebservicesFunction::close_appointment($post, true), true);
            if ($result['status'] == 1) {
                $notification_array = $result['notification_array'];
                unset($result['notification_array']);
                Custom::sendResponse($result);
                Custom::update_tracker_time_difference($appointment_id);
                Custom::close_appointment_notification($notification_array);

            } else {
                Custom::sendResponse($result);
            }

        } else {
            exit();
        }

    }


    public function add_appointment()
    {
        $this->layout = "app_admin_home";
        $login = $this->Session->read('Auth.User.User');
        if (!$this->Custom->check_app_enable_permission($login['thinapp_id'], "QUICK_APPOINTMENT") && !$this->Custom->check_app_enable_permission($login['thinapp_id'], "NEW_QUICK_APPOINTMENT")) {
            $this->redirect(array('controller' => 'app_admin', 'action' => 'dashboard'));
        }

            $colorData = $this->AppointmentSlotColor->find('all',array(
            "fields"=>array("AppointmentSlotColor.type","AppointmentSlotColor.color_code"),
            "conditions"=>array("AppointmentSlotColor.thinapp_id" => $login['thinapp_id']),
            "contain"=>false));

            $this->set(compact('colorData'));


    }

    public function lite_book_appointment()
    {
        $this->layout = "app_admin_home";
        $login = $this->Session->read('Auth.User.User');
        if (!$this->Custom->check_app_enable_permission($login['thinapp_id'], "QUICK_APPOINTMENT") && !$this->Custom->check_app_enable_permission($login['thinapp_id'], "NEW_QUICK_APPOINTMENT")) {
            $this->redirect(array('controller' => 'app_admin', 'action' => 'dashboard'));
        }

        $colorData = $this->AppointmentSlotColor->find('all',array(
            "fields"=>array("AppointmentSlotColor.type","AppointmentSlotColor.color_code"),
            "conditions"=>array("AppointmentSlotColor.thinapp_id" => $login['thinapp_id']),
            "contain"=>false));

        $this->set(compact('colorData'));


    }



    public function add_appointment_tmp()
    {
        $this->layout = "app_admin_home";
        $login = $this->Session->read('Auth.User.User');
        if (!$this->Custom->check_app_enable_permission($login['thinapp_id'], "QUICK_APPOINTMENT") && !$this->Custom->check_app_enable_permission($login['thinapp_id'], "NEW_QUICK_APPOINTMENT")) {
            $this->redirect(array('controller' => 'app_admin', 'action' => 'dashboard'));
        }

        $colorData = $this->AppointmentSlotColor->find('all',array(
            "fields"=>array("AppointmentSlotColor.type","AppointmentSlotColor.color_code"),
            "conditions"=>array("AppointmentSlotColor.thinapp_id" => $login['thinapp_id']),
            "contain"=>false));

        $this->set(compact('colorData'));


    }
    

    public function load_appointment_service()
    {
        $this->layout = 'ajax';
        if ($this->request->is('ajax')) {
            $login = $this->Session->read('Auth.User.User');
            $category_id = $this->request->data['category'];
            $list = Custom::get_service_list_for_category($category_id, $login['thinapp_id']);
            if (!empty($list)) {
                $list = array_column($list, 'name', 'id');
            } else {
                $list = array();
            }
            $this->set(compact('list'));
            $this->render('load_appointment_service', 'ajax');
        } else {
            exit();
        }

    }

    public function load_doctor_address()
    {
        $this->layout = 'ajax';
        if ($this->request->is('ajax')) {
            $login = $this->Session->read('Auth.User.User');
            $doctor_id = base64_decode($this->request->data['doctor']);
            $list = Custom::get_doctor_address_list_drp($doctor_id, $login['thinapp_id']);
            if (!empty($list)) {
                $list = array_column($list, 'address', 'id');
            } else {
                $list = array();
            }
            $this->set(compact('list'));
            $this->render('load_doctor_address', 'ajax');
        } else {
            exit();
        }

    }

    public function get_doc_service_list()
    {
        $this->autoRender = false;
        $list = array();
        if ($this->request->is('ajax')) {
            $login = $this->Session->read('Auth.User.User');
            $doctor_id = $this->request->data['docID'];
            if (Custom::check_app_enable_permission($login['thinapp_id'], 'NEW_QUICK_APPOINTMENT') == 'YES') {
                $list = Custom::get_doctor_service_new_appointment($login['thinapp_id'], $doctor_id, date('Y-m-d'));
                if (!empty($list)) {
                    $list = array_column($list, 'service_name', 'service_id');
                }
            } else {
                $data_list = Custom::get_doctor_service_data($doctor_id, $login['thinapp_id']);
                if (!empty($data_list)) {
                    $list[$data_list['id']] = $data_list['name'];

                }
            }
            $response = "";
            if (!empty($list)) {
                foreach ($list as $key => $name) {
                    $response .= "<option value='" . $key . "'>" . $name . "</option>";
                }
            }

            return $response;
        } else {
            exit();
        }


    }

    public function get_doc_address_list()
    {
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $login = $this->Session->read('Auth.User.User');
            $doctor_id = $this->request->data['docID'];

            $list = array();
            if (Custom::check_app_enable_permission($login['thinapp_id'], 'NEW_QUICK_APPOINTMENT') == 'YES') {

                $service_id = $this->request->data['serID'];
                if (empty($service_id)) {
                    $list = Custom::get_doctor_all_address_new_appointment($login['thinapp_id'], $doctor_id);
                } else {
                    $list = Custom::get_doctor_address_new_appointment($login['thinapp_id'], $doctor_id, $service_id, date('Y-m-d'));
                }
                if (!empty($list)) {
                    $list = array_column($list, 'address', 'address_id');
                }


            } else {
                $list = Custom::get_doctor_address_list_drp($doctor_id, $login['thinapp_id']);
                if (!empty($list)) {
                    $list = array_column($list, 'address', 'id');
                }
            }


            $response = "";
            if (!empty($list)) {
                foreach ($list as $key => $name) {
                    $response .= "<option value='" . $key . "'>" . $name . "</option>";
                }
            }

            return $response;
        } else {
            exit();
        }


    }


    public function load_appointment_staff()
    {
        $this->layout = 'ajax';
        if ($this->request->is('ajax')) {
            $login = $this->Session->read('Auth.User.User');
            $service_id = $this->request->data['service'];
            $address_id = $this->request->data['address'];
            $list = Custom::get_staff_list_for_service($service_id, $address_id, $login['thinapp_id']);
            if (!empty($list)) {
                $list = array_column($list, 'name', 'id');
            } else {
                $list = array();
            }
            $this->set(compact('list'));
            $this->render('load_appointment_staff', 'ajax');
        } else {
            exit();
        }

    }


    public function load_book_appointment_modal()
    {
        $this->layout = 'ajax';
        if ($this->request->is('ajax')) {
            $appointment_id = base64_encode(0);
            $doctor_id = $this->request->data['doctor'];
            $address_id = $this->request->data['address'];
            $service_id = isset($this->request->data['service']) ? $this->request->data['service'] : 0;
            $content = array(
                'doctor_id' => $doctor_id,
                'appointment_id' => $appointment_id,
                'address_id' => $address_id,
                'service_id' => $service_id
            );
            $this->set(compact('content'));
            $this->render('load_book_appointment_modal', 'ajax');
        } else {
            exit();
        }

    }


    public function search_appointment_customer()
    {
        $this->layout = 'ajax';
        if ($this->request->is('ajax')) {
            $current_date = date('d/m/Y');
            $login = $this->Session->read('Auth.User.User');
            $thin_app_id = $login['thinapp_id'];
            $date = @$this->request->data['date'];
            if(empty($date)){
                $date = date('d/m/Y');
            }

            if (!$appointmentMobiles = json_decode(WebservicesFunction::readJson("data_user_mobile_list_" . $thin_app_id, "data_list"), true)) {
                $appointmentMobiles = array();
            }
            $current_time = date('h:i A');
            $filter_array = Custom::get_doctor_filter_appointment_array($thin_app_id, true);

            $file_name_customer = "booking_form_customer_$thin_app_id";
            if(!$booking_form = WebservicesFunction::readJson($file_name_customer,"thinapp")){
                $send['type']="NEW";
                $send['user_type']="CUSTOMER";
                $booking_form = AppAdminController::get_book_new_appointment($send)->body();
                WebservicesFunction::createJson($file_name_customer,($booking_form),"CREATE","thinapp");
            }else{
                /* create cache form for children*/
                $file_name_children = "booking_form_children_$thin_app_id";
                if(!$booking_form_children = WebservicesFunction::readJson($file_name_children,"thinapp")){
                    $send['type']="NEW";
                    $send['user_type']="CHILDREN";
                    $booking_form_children = AppAdminController::get_book_new_appointment($send)->body();
                    WebservicesFunction::createJson($file_name_children,($booking_form_children),"CREATE","thinapp");
                }
            }


            $this->set(compact('appointmentMobiles','filter_array','date','current_time','booking_form'));
            $this->render('search_appointment_customer', 'ajax');
        } else {
            exit();
        }

    }

    public function load_search_customer_list()
    {
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $login = $this->Session->read('Auth.User.User');
            $search = ($this->request->data['search']);
            $flag = ($this->request->data['flag']);
            $thin_app_id = $login['thinapp_id'];
            $customer_list = array();
            if (strtoupper($flag) == "UHID") {
                $customer_list = Custom::get_search_customer_list_uhid($search, $thin_app_id);
            }else if (strtoupper($flag) == "NAME") {
                $customer_list = Custom::get_search_customer_list_name($search, $thin_app_id);
            } else {
                $customer_list = Custom::get_search_customer_list($search, $thin_app_id);
            }
            $this->set(compact('customer_list', 'flag'));
            $this->render('load_search_customer_list', 'ajax');
        } else {
            exit();
        }

    }

    public function load_search_customer_list_uhid()
    {
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $login = $this->Session->read('Auth.User.User');
            $UHID = ($this->request->data['UHID']);
            $thin_app_id = $login['thinapp_id'];
            $customer_list = Custom::get_search_customer_list_uhid($UHID, $thin_app_id);

            $this->set(compact('customer_list'));
            $this->render('load_search_customer_list_uhid', 'ajax');
        } else {
            exit();
        }

    }


    public function book_new_appointment()
    {
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $post = array();
            $login = $this->Session->read('Auth.User.User');
            $post['app_key'] = APP_KEY;
            $post['thin_app_id'] = $login['thinapp_id'];
            $post['user_id'] = $login['id'];
            $post['role_id'] = $login['role_id'];
            $post['mobile'] = "+91" . $this->request->data['mobile'];
            $post['booking_date'] = $this->request->data['date'];
            $post['slot_time'] = base64_decode($this->request->data['slot']);
            $post['doctor_id'] = ($this->request->data['doctor']);
            $post['user_type'] = ($this->request->data['user_type']);
            $post['children_id'] = ($this->request->data['customer_id']);
            $post['address_id'] = ($this->request->data['address']);
            $post['customer_id'] = ($this->request->data['customer_id']);
            $post['customer_name'] = $this->request->data['first_name'];
            $post['customer_mobile'] = $this->request->data['mobile'];
            $post['isAddMore'] = isset($this->request->data['isAddMore']) ? $this->request->data['isAddMore'] : "NO";
            $post['gender'] = $this->request->data['gender'];
            $post['payment_type'] = "CASH";
            $post['transaction_id'] = "";
            $post['appointment_user_role'] = Custom::get_appointment_role($login['mobile'], $login['thinapp_id'], $login['role_id']);
            $result = WebservicesFunction::check_appointment_validity($post, true);
            if ($result['status'] == 1) {
                WebservicesFunction::add_new_appointment($post, false, 'WEB');
            } else {
                return Custom::sendResponse($result);
            }


        }
        exit();
    }

    public function web_get_book_new_appointment()
    {
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $post = array();
            $login = $this->Session->read('Auth.User.User');
            $post['app_key'] = APP_KEY;
            $post['thin_app_id'] = $login['thinapp_id'];
            $post['user_id'] = $login['id'];
            $post['role_id'] = $login['role_id'];
            $post['mobile'] = "+91" . $this->request->data['mobile'];

            $post['booking_date'] = $this->request->data['date'];
            $post['custom_token'] = $custom = isset($this->request->data['custom_token']) ? $this->request->data['custom_token'] : "NO";
            $post['slot_time'] = base64_decode($this->request->data['slot']);
            if ($custom == "YES") {
                $post['queue_number'] = isset($this->request->data['queue']) ? base64_decode($this->request->data['queue']) : 0;
            }

            $post['doctor_id'] = ($this->request->data['doctor']);
            $post['user_type'] = ($this->request->data['user_type']);
            $post['children_id'] = ($this->request->data['customer_id']);
            $post['address_id'] = ($this->request->data['address']);
            $post['service_id'] = @($this->request->data['service']);
            $post['customer_id'] = ($this->request->data['customer_id']);
            $post['customer_name'] = isset($this->request->data['first_name']) ? $this->request->data['first_name'] : '';
            $post['customer_mobile'] = $this->request->data['mobile'];
            $post['gender'] = (isset($this->request->data['gender'])) ? $this->request->data['gender'] : '';
            $post['isAddMore'] = isset($this->request->data['isAddMore']) ? $this->request->data['isAddMore'] : "NO";
            $post['payment_type'] = "CASH";
            $post['transaction_id'] = "";
            $post['appointment_user_role'] = Custom::get_appointment_role($login['mobile'], $login['thinapp_id'], $login['role_id']);
            $result = WebservicesFunction::check_appointment_validity($post, true);
            if ($result['status'] == 1) {
                $result = WebservicesFunction::web_add_new_appointment($post);
                echo json_encode($result, true);
            } else {
                echo json_encode($result);
            }


        }
        exit();
    }

    public function get_book_new_appointment($data=null)
    {
        $this->autoRender = false;
        $login = $this->Session->read('Auth.User.User');
        $thin_app_id = $login['thinapp_id'];
        $return = false;
        if(!empty($data)){
            $return =true;
            $this->request->data = $data;
        }

        if ($this->request->is('ajax')) {
            $folder_id = $patient_id =0;
            $customer_id = isset($this->request->data['customer_id']) ? base64_decode($this->request->data['customer_id']) : "";
            $type = isset($this->request->data['type']) ? $this->request->data['type'] : "";
            $user_type = @($this->request->data['user_type']);
        	
        	$booking_form_customer = "booking_form_customer_$thin_app_id";
            $booking_form_children = "booking_form_children_$thin_app_id";
            if($user_type == 'CUSTOMER' && $type == "NEW" && $booking_form = WebservicesFunction::readJson($booking_form_customer,"thinapp")){
                return $booking_form;
            }else if($user_type == 'CHILDREN' && $type == "NEW" && $booking_form = WebservicesFunction::readJson($booking_form_children,"thinapp")){
                return $booking_form;
            }
        
            if ($type != 'NEW' && !empty($customer_id)) {
                if ($user_type == 'CHILDREN') {
                    $this->request->data['Children'] = Custom::get_child_by_id($customer_id);
                    $patient_id = base64_encode($this->request->data['Children']['id']);
                    $folder_id = base64_encode($this->request->data['Children']['folder_id']);
                } else if($user_type == 'CUSTOMER'){
                    $this->request->data['AppointmentCustomer'] = Custom::get_customer_by_id($customer_id);
                    $conceive_date =$this->request->data['AppointmentCustomer']['conceive_date'];
                    $expected_date =$this->request->data['AppointmentCustomer']['expected_date'];

                    if(!empty($conceive_date) && $conceive_date != '0000-00-00'){
                        $this->request->data['AppointmentCustomer']['conceive_date'] = date('d/m/Y',strtotime($conceive_date));
                    }else{
                        $this->request->data['AppointmentCustomer']['conceive_date'] = '';
                    }
                    if(!empty($expected_date) && $expected_date != '0000-00-00'){
                        $this->request->data['AppointmentCustomer']['expected_date'] = date('d/m/Y',strtotime($expected_date));
                    }else{
                        $this->request->data['AppointmentCustomer']['expected_date'] = '';
                    }

                    $patient_id = base64_encode($this->request->data['AppointmentCustomer']['id']);
                    $folder_id = base64_encode($this->request->data['AppointmentCustomer']['folder_id']);
                }
            }
            if (!$datalistUser = json_decode(WebservicesFunction::readJson("data_user_name_list_" . $thin_app_id, "data_list"), true)) {
                $datalistUser = array();
            }
            if (!$datalistAddress = json_decode(WebservicesFunction::readJson("data_user_address_list_" . $thin_app_id, "data_list"), true)) {
                $datalistAddress = array();
            }

            $this->set(compact('datalistUser', 'datalistAddress', 'type', 'user_type','folder_id','patient_id'));
            if($return===true){
                return $this->render('get_book_new_appointment', 'ajax');;
            }else{
                $this->render('get_book_new_appointment', 'ajax');
            }
        }




    }

    public function web_book_new_appointment($post = null)
    {
        $login = $this->Session->read('Auth.User.User');
        $post['app_key'] = APP_KEY;
        $post['thin_app_id'] = $login['thinapp_id'];
        $post['user_id'] = $login['id'];
        $post['role_id'] = $login['role_id'];
        $post['payment_type'] = "CASH";
        $post['transaction_id'] = "";
        $post['appointment_user_role'] = Custom::get_appointment_role($login['mobile'], $login['thinapp_id'], $login['role_id']);
        $result = WebservicesFunction::web_check_appointment_validity($post, true);

        if ($result['status'] == 1) {
            $result = WebservicesFunction::web_add_new_appointment($post);
            return $result;
        } else {
            return $result;
        }
    }

    public function web_book_appointment()
    {
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $login = $this->Session->read('Auth.User.User');
            $customer_name = $customer_mobile = $user_type= "";
            $customer_id = $children_id = 0;
            $book_appointment = false;
            $form_post = $this->request->data;
            $appointment_customer_form =array();
            $patient_id = !empty($form_post['p'])?base64_decode($form_post['p']):0;
            $bookingSetting = isset($_COOKIE['bookingSetting'])?$_COOKIE['bookingSetting']:"OLD_SCREEN";
            $customer_name = isset($form_post['cn'])?$form_post['cn']:"";

            if(empty($form_post['direct_book']) || $form_post['direct_book']=='false'){

                $folder_id = !empty($form_post['f'])?base64_decode($form_post['f']):0;
                parse_str($_POST['data'], $this->request->data);
                if (isset($this->request->data['data']['Children'])) {
                    $user_type = "CHILDREN";
                    $data = $this->request->data['data']['Children'];

                    if(!empty($patient_id)){
                        $save_child['app_key'] = APP_KEY;
                        $save_child['child_id'] = $children_id = $patient_id;
                        $save_child['thin_app_id'] = $login['thinapp_id'];
                        $save_child['user_id'] = $login['id'];
                        $save_child['title'] =  trim($data['title']);
                        $save_child['child_name'] =$customer_name =  trim($data['child_name']);
                        $save_child['mobile'] = $customer_mobile = Custom::create_mobile_number($data['mobile']);
                        $save_child['patient_address'] = $data['patient_address'];
                        if (!empty($data['dob'])) {
                            $date = DateTime::createFromFormat('d/m/Y', $data['dob']);
                            $save_child['dob'] = $date->format('Y-m-d');
                        }
                        $save_child['gender'] = $data['gender'];
                        $save_child['relation_prefix'] = $data['relation_prefix'];
                        $save_child['parents_name'] = $data['parents_name'];
                        $save_child['parents_mobile'] = $data['parents_mobile'];
                        $save_child['blood_group'] = $data['blood_group'];
                        $save_child['email'] = $data['email'];
                        $save_child['height'] = @$data['height'];
                        $save_child['weight'] = @$data['weight'];
                        $save_child['head_circumference'] = @$data['head_circumference'];
                        $save_child['bp_systolic'] = @$data['bp_systolic'];
                        $save_child['bp_diasystolic'] = @$data['bp_diasystolic'];
                        $save_child['bmi'] = @$data['bmi'];
                        $save_child['bmi_status'] = @$data['bmi_status'];
                        $save_child['temperature'] = @$data['temperature'];
                        $save_child['o_saturation'] = @$data['o_saturation'];
                        $save_child['field1'] = @$data['field1'];
                        $save_child['field2'] = @$data['field2'];
                        $save_child['field3'] = @$data['field3'];
                        $save_child['field4'] = @$data['field4'];
                        $save_child['field5'] = @$data['field5'];
                        $save_child['field6'] = @$data['field6'];
                        $save_child['country_id'] = isset($data['country_id'][0])?$data['country_id'][0]:0;
                        $save_child['state_id'] = isset($data['state_id'][0])?$data['state_id'][0]:0;
                        $save_child['city_id'] = isset($data['city_id'][0])?$data['city_id'][0]:0;
                        $save_child['city_name'] = @$data['city_name'];
                        $save_child['patient_category'] = @$data['patient_category'];


                        $result = json_decode(WebservicesFunction::edit_child($save_child,true),true);
                        if ($result['status'] == 1) {
                            $book_appointment = true;
                        }else{
                            echo json_encode($result);exit();
                        }

                    }else{

                        $save_child['app_key'] = APP_KEY;
                        $save_child['patient_id'] = $patient_id;
                        $save_child['thin_app_id'] = $login['thinapp_id'];
                        $save_child['user_id'] = $login['id'];
                        $save_child['title'] =  trim($data['title']);
                        $save_child['child_name'] =$customer_name =  trim($data['child_name']);
                        $save_child['mobile'] = $customer_mobile = Custom::create_mobile_number($data['mobile']);
                        $save_child['patient_address'] = $data['patient_address'];
                        if (!empty($data['dob'])) {
                            $date = DateTime::createFromFormat('d/m/Y', $data['dob']);
                            $save_child['dob'] = $date->format('Y-m-d');
                        }
                        $save_child['gender'] = $data['gender'];
                        $save_child['relation_prefix'] = $data['relation_prefix'];
                        $save_child['parents_name'] = $data['parents_name'];
                        $save_child['parents_mobile'] = $data['parents_mobile'];
                        $save_child['blood_group'] = $data['blood_group'];
                        $save_child['height'] = @$data['height'];
                        $save_child['weight'] = @$data['weight'];
                        $save_child['head_circumference'] = @$data['head_circumference'];
                        $save_child['bp_systolic'] = @$data['bp_systolic'];
                        $save_child['bp_diasystolic'] = @$data['bp_diasystolic'];
                        $save_child['bmi'] = @$data['bmi'];
                        $save_child['bmi_status'] = @$data['bmi_status'];
                        $save_child['temperature'] = @$data['temperature'];
                        $save_child['o_saturation'] = @$data['o_saturation'];
                        $save_child['field1'] = @$data['field1'];
                        $save_child['field2'] = @$data['field2'];
                        $save_child['field3'] = @$data['field3'];
                        $save_child['field4'] = @$data['field4'];
                        $save_child['field5'] = @$data['field5'];
                        $save_child['field6'] = @$data['field6'];
                        $save_child['country_id'] = isset($data['country_id'][0])?$data['country_id'][0]:0;
                        $save_child['state_id'] = isset($data['state_id'][0])?$data['state_id'][0]:0;
                        $save_child['city_id'] = isset($data['city_id'][0])?$data['city_id'][0]:0;
                        $save_child['city_name'] = @$data['city_name'];
                        $save_child['patient_category'] = @$data['patient_category'];
                        $save_child['add_vaccination'] = "NO";


                        $result = json_decode(WebservicesFunction::add_child($save_child),true);
                        if ($result['status'] == 1) {
                            $book_appointment = true;
                            $children_id = $result['child_id'];
                        }else{
                            echo json_encode($result);exit();
                        }
                    }

                } else {


                    $user_type = "CUSTOMER";
                    $data = $appointment_customer_form =$this->request->data['data']['AppointmentCustomer'];
                    $login = $this->Session->read('Auth.User.User');
                    if(!empty($patient_id)){
                        $customer_id = $patient_id;
                        $save_customer['app_key'] = APP_KEY;
                        $save_customer['patient_id'] = $patient_id;
                        $save_customer['thin_app_id'] = $login['thinapp_id'];
                        $save_customer['user_id'] = $login['id'];
                        $save_customer['title'] =  trim($data['title']);
                        $save_customer['patient_name'] = $data['first_name'];
                        $save_customer['email'] = $data['email'];
                        $save_customer['mobile'] = $login['mobile'];
                        $save_customer['patient_mobile'] = Custom::create_mobile_number($data['mobile']);
                        $save_customer['patient_address'] = $data['address'];
                        if (!empty($data['dob'])) {
                            $date = DateTime::createFromFormat('d/m/Y', $data['dob']);
                            $save_customer['dob'] = $date->format('Y-m-d');
                        }
                        if (!empty($data['conceive_date'])) {
                            $date = DateTime::createFromFormat('d/m/Y', $data['conceive_date']);
                            $save_customer['conceive_date'] = $date->format('Y-m-d');
                        }
                        if (!empty($data['expected_date'])) {
                            $date = DateTime::createFromFormat('d/m/Y', $data['expected_date']);
                            $save_customer['expected_date'] = $date->format('Y-m-d');
                        }
                        $save_customer['gender'] = $data['gender'];
                        $save_customer['age'] = $data['age'];
                        $save_customer['parents_name'] = $data['parents_name'];
                        $save_customer['parents_mobile'] = $data['parents_mobile'];
                        $save_customer['marital_status'] = $data['marital_status'];
                        $save_customer['blood_group'] = $data['blood_group'];
                        $save_customer['relation_prefix'] = $data['relation_prefix'];
                        $save_customer['height'] = @$data['height'];
                        $save_customer['weight'] = @$data['weight'];
                        $save_customer['head_circumference'] = @$data['head_circumference'];
                        $save_customer['request_from'] = "WEB";
                        $save_customer['patient_type'] = "CUSTOMER";
                        $save_customer['bp_systolic'] = @$data['bp_systolic'];
                        $save_customer['bp_diasystolic'] = @$data['bp_diasystolic'];
                        $save_customer['bmi'] = @$data['bmi'];
                        $save_customer['bmi_status'] = @$data['bmi_status'];
                        $save_customer['temperature'] = @$data['temperature'];
                        $save_customer['o_saturation'] = @$data['o_saturation'];
                        $save_customer['field1'] = @$data['field1'];
                        $save_customer['field2'] = @$data['field2'];
                        $save_customer['field3'] = @$data['field3'];
                        $save_customer['field4'] = @$data['field4'];
                        $save_customer['field5'] = @$data['field5'];
                        $save_customer['field6'] = @$data['field6'];
                        $save_customer['third_party_uhid'] = @$data['third_party_uhid'];
                        $save_customer['patient_category'] = @$data['patient_category'];

                        $save_customer['country_id'] = isset($data['country_id'][0])?$data['country_id'][0]:0;
                        $save_customer['state_id'] = isset($data['state_id'][0])?$data['state_id'][0]:0;
                        $save_customer['city_id'] = isset($data['city_id'][0])?$data['city_id'][0]:0;
                        $save_customer['city_name'] = @$data['city_name'];
                        if(empty($folder_id)){
                            $folder_id = Custom::get_patient_folder_id($login['thinapp_id'],$patient_id);
                            if(empty($folder_id)){
                                $res = json_decode(Custom::create_and_share_folder($login['thinapp_id'],$save_customer['mobile'],$save_customer['patient_name'],'CUSTOMER', $patient_id),true);
                                if($res['status'] ==1){
                                    $folder_id = $res['folder_id'];
                                }
                            }

                        }
                        $save_customer['folder_id'] = $folder_id;
                        $result = json_decode(WebServicesFunction_2_3::edit_appointment_patient($save_customer),true);
                        if ($result['status'] == 1) {
                            $book_appointment = true;
                        }else{
                            echo json_encode($result);exit();
                        }
                    }else{



                        $save_customer['app_key'] = APP_KEY;
                        $save_customer['patient_id'] = $patient_id;
                        $save_customer['thin_app_id'] = $login['thinapp_id'];
                        $save_customer['user_id'] = $login['id'];
                        $save_customer['title'] =  trim($data['title']);
                        $save_customer['first_name'] =$customer_name =  trim($data['first_name']);
                        $save_customer['email'] = $data['email'];
                        $save_customer['mobile'] = $customer_mobile = Custom::create_mobile_number($data['mobile']);
                        $save_customer['country_code'] = "+91";
                        $save_customer['address'] = $data['address'];
                        if (!empty($data['dob'])) {
                            $date = DateTime::createFromFormat('d/m/Y', $data['dob']);
                            $save_customer['dob'] = $date->format('Y-m-d');
                        }
                        if (!empty($data['conceive_date'])) {
                            $date = DateTime::createFromFormat('d/m/Y', $data['conceive_date']);
                            $save_customer['conceive_date'] = $date->format('Y-m-d');
                        }
                        if (!empty($data['expected_date'])) {
                            $date = DateTime::createFromFormat('d/m/Y', $data['expected_date']);
                            $save_customer['expected_date'] = $date->format('Y-m-d');
                        }
                        $save_customer['gender'] = $data['gender'];
                        $save_customer['age'] = $data['age'];
                        $save_customer['parents_name'] = $data['parents_name'];
                        $save_customer['parents_mobile'] = $data['parents_mobile'];
                        $save_customer['marital_status'] = $data['marital_status'];
                        $save_customer['blood_group'] = $data['blood_group'];
                        $save_customer['relation_prefix'] = $data['relation_prefix'];
                        $save_customer['height'] = @$data['height'];
                        $save_customer['weight'] = @$data['weight'];
                        $save_customer['head_circumference'] = @$data['head_circumference'];
                        $save_customer['bp_systolic'] = @$data['bp_systolic'];
                        $save_customer['bp_diasystolic'] = @$data['bp_diasystolic'];
                        $save_customer['bmi'] = @$data['bmi'];
                        $save_customer['bmi_status'] = @$data['bmi_status'];
                        $save_customer['temperature'] = @$data['temperature'];
                        $save_customer['o_saturation'] = @$data['o_saturation'];
                        $save_customer['field1'] = @$data['field1'];
                        $save_customer['field2'] = @$data['field2'];
                        $save_customer['field3'] = @$data['field3'];
                        $save_customer['field4'] = @$data['field4'];
                        $save_customer['field5'] = @$data['field5'];
                        $save_customer['field6'] = @$data['field6'];
                        $save_customer['country_id'] = isset($data['country_id'][0])?$data['country_id'][0]:0;
                        $save_customer['state_id'] = isset($data['state_id'][0])?$data['state_id'][0]:0;
                        $save_customer['city_id'] = isset($data['city_id'][0])?$data['city_id'][0]:0;
                        $save_customer['city_name'] = @$data['city_name'];
                        $save_customer['third_party_uhid'] = @$data['third_party_uhid'];
                        $save_customer['patient_category'] = @$data['patient_category'];

                        $result = json_decode(WebservicesFunction::appointment_add_customer($save_customer),true);
                        if ($result['status'] == 1) {
                            $customer_id = $result['customer_id'];
                            $book_appointment = true;
                        }else{
                            echo json_encode($result);exit();
                        }
                    }
                }

            }else{
                $user_type = $form_post['user_type'];
                if($user_type=="CHILDREN"){
                    $children_id = $patient_id;
                    $book_appointment = true;
                }else if($user_type =="CUSTOMER"){
                    $customer_id =  $patient_id;
                    $book_appointment = true;
                }

            }


            if($book_appointment === true && ( !empty($customer_id) || !empty($children_id))){

                $thin_app_id = $login['thinapp_id'];
                $get_admin_data = Custom::get_thinapp_admin_data($thin_app_id);
                //$mobile = Custom::create_mobile_number($form_post['app_mobile']);
                $mobile = $login['mobile'];

                $get_user_data = Custom::get_user_by_mobile($thin_app_id,$mobile);
                $role_id = !empty($get_user_data)?$get_user_data['role_id']:1;;
                $post['app_key'] = APP_KEY;
                $post['thin_app_id'] =$thin_app_id;
                $post['user_id'] = $login['id'];
                $post['role_id'] = $role_id;
                $post['mobile'] = $mobile;

                if(!empty($form_post['booking_date'])){
                    $date = DateTime::createFromFormat('d/m/Y', $form_post['booking_date']);
                    $post['booking_date'] = $date->format('Y-m-d');
                }else{
                    $post['booking_date'] = date('Y-m-d');
                }
                $post['slot_time'] =  !empty($form_post['app_slot']) ? base64_decode($form_post['app_slot']) : date('h:i A');
                $post['doctor_id'] =  base64_decode($form_post['d']);
                $post['address_id'] = base64_decode($form_post['a']);
                $post['service_id'] = base64_decode($form_post['s']);
                $post['user_type'] = $user_type;
                $post['children_id'] = $children_id;
                $post['customer_id'] = $customer_id;
                $post['customer_name'] =$customer_name;
                $post['customer_mobile'] = $customer_mobile;
                $post['payment_type'] = "CASH";
                $post['transaction_id'] = "";
               $post['appointment_user_role'] = Custom::hospital_get_user_role($login['mobile'],$thin_app_id,$login['role_id']);

                if($form_post['direct_book']=='false'){
                    $post['reason_of_appointment'] = $data['reason_of_appointment'];
                    $post['remark'] = $data['notes'];
                    $post['referred_by_mobile'] = $data['referred_by_mobile'];
                    $post['referred_by'] = $data['referred_by'];
                }
                $post['appointment_type'] = $form_post['app_type'];
                if($form_post['app_type']=="EMERGENCY"){
                    $post['emergency_appointment'] = "YES";
                }

                $post['queue_number'] = isset($form_post['app_queue']) ? base64_decode($form_post['app_queue']) : 0;
                $post['checked_in'] = isset($form_post['checked_in'])?$form_post['checked_in']:'NO';
                $result = WebservicesFunction::check_appointment_validity($post,true);
                $send_notification = false;
                if($result['status'] == 1){
                    if($bookingSetting=="NEW_SCREEN"){
                        $result = json_decode(WebservicesFunction::lite_web_book_appointment($post,true,'WEB'),true);
                    }else{
                        $result = json_decode(WebservicesFunction::add_new_appointment($post,true,'WEB'),true);
                    }
                    if ($result['status'] == 1) {
                        if($result['data']['booking_validity_attempt']==1 && $post['checked_in'] == 'NO'){
                            $payment_dialog = AppAdminController::get_add_appointment_payment($result['data']['appointment_id']);
                            $response['payment_dialog']=$payment_dialog->body();
                        }
                        $response['status']=1;
                        $response['message']="Appointment booked successfully!";
                        $response['appointment_id']=$result['data']['appointment_id'];
                        Custom::sendResponse($response);
                        try{
                            Custom::send_process_to_background();
                            if(isset($response['appointment_id'])){
                                if($bookingSetting=="NEW_SCREEN"){
                                    $result['notification_data']['doctor_id'] = $post['doctor_id'];
                                    $result['notification_data']['appointment_id'] = $response['appointment_id'];
                                    $result['notification_data']['thin_app_id'] = $thin_app_id;
                                    $result['notification_data']['booking_request_from'] = "WEB";
                                }
                                Custom::send_book_appointment_notification($result['notification_data']);
                            }

                            $conceive_date = $expected_date = '';
                            if (!empty($appointment_customer_form['conceive_date']) && !empty($appointment_customer_form['gender'] =="FEMALE")) {
                                try {
                                    $from_date = DateTime::createFromFormat('d/m/Y', $appointment_customer_form['conceive_date']);
                                    $conceive_date = $from_date->format('Y-m-d');
                                    if (!empty($data['expected_date'])) {
                                        try {
                                            $from_date = DateTime::createFromFormat('d/m/Y', $appointment_customer_form['expected_date']);
                                            $expected_date = $from_date->format('Y-m-d');
                                        } catch (Exception $e) {

                                        }
                                    }
                                    $conceive_data = array(
                                        'thinapp_id' => $login['thinapp_id'],
                                        'appointment_customer_id' => $customer_id,
                                        'doctor_id' => $post['doctor_id'],
                                        'conceive_date' => $conceive_date,
                                        'expected_date' => $expected_date,
                                        'appointment_id' => $result['data']['appointment_id'],
                                    );
                                    $save_semester = $this->PregnancySemester->saveAll($conceive_data);
                                } catch (Exception $e) {

                                }
                            }
                            //Custom::send_web_tracker_notification($thin_app_id);


                        }catch(Exception $e){

                        }

                    }
                }
                echo json_encode($result);die;

            }else {
                $response['status'] = 0;
                if (empty($customer_id) || empty($children_id)) {
                    $response['message'] = "Unable to add new patient";
                } else {
                    $response['message'] = "Unable to book appointment";
                }
                echo json_encode($response);die;
            }

        }
        exit();
    }


    public function profile()
    {
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User');
        $id = $login['User']['id'];
        $user_data = $login['User'];

        if ($this->request->is(array('post', 'put'))) {
            $this->User->id = $id;
            unset($this->request->data['User']['mobile']);
            $this->User->set($this->request->data['User']);
            if ($this->User->validates()) {
                $experience = $this->request->data['User']['year'] . "." . $this->request->data['User']['month'];
                $this->request->data['User']['experience'] = $experience;
                if ($this->User->save($this->request->data['User'])) {
                    $this->Session->setFlash(__('Profile update successfully.'), 'default', array(), 'success');
                    Custom::deleteUserCache($user_data['is_support_user'], $user_data['id'], $user_data['mobile'], $user_data['thinapp_id']);
                    $this->redirect(array('controller' => 'app_admin', 'action' => 'profile'));
                } else {
                    $this->Session->setFlash(__('Sorry profile could not update.'), 'default', array(), 'error');
                }
            }
        }

        $user = $this->User->find("first", array(
            "conditions" => array(
                "User.id" => $id,
            ),
            'contain' => false
        ));


        if (!$this->request->data) {
            $this->request->data = $user;
        }
        $this->set('post', $user);

    }


    public function location()
    {
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User');
        if (!$this->Custom->check_app_enable_permission($login['User']['thinapp_id'], "MY_LOCATIONS")) {
            $this->redirect(array('controller' => 'app_admin', 'action' => 'dashboard'));
        }

        if ($this->request->is(array('post', 'put'))) {
            $this->request->data['AppAddressLocation']['thinapp_id'] = $login['User']['thinapp_id'];
            $id = $this->request->data['AppAddressLocation']['flag'];
            $message = "add";
            if (!empty($id)) {
                $this->AppAddressLocation->id = base64_decode($id);
                $message = "update";
            }
            $this->AppAddressLocation->set($this->request->data['AppAddressLocation']);
            if ($this->AppAddressLocation->validates()) {

                $string = str_replace(array("\n", "\r"), '', $this->request->data['AppAddressLocation']['address']);
                $this->request->data['AppAddressLocation']['address'] = $string;
                if ($this->AppAddressLocation->save($this->request->data['AppAddressLocation'])) {

                    $this->Session->setFlash(__("Location $message successfully."), 'default', array(), 'success');

                    $this->redirect(array('controller' => 'app_admin', 'action' => 'location'));
                } else {
                    $this->Session->setFlash(__("Sorry location could not $message."), 'default', array(), 'error');
                }
            }
        }

        $data = $this->AppAddressLocation->find('all', array(
            "conditions" => array(
                "AppAddressLocation.thinapp_id" => $login['User']['thinapp_id']
            ),
        ));
        $this->set('list', $data);
    }


    public function delete_location()
    {
        $this->autoRender = false;

        if ($this->request->is('ajax')) {
            $response = array();
            $id = base64_decode($this->request->data['data_id']);
            $deleted = $this->AppAddressLocation->delete(array('AppAddressLocation.id' => $id));
            if ($deleted) {
                $response['status'] = 1;
            } else {
                $response['status'] = 0;
            }
            $response = json_encode($response, true);
            echo $response;
            exit();
        }
    }


    public function search_offer()
    {
        $reqData = $this->request->data;
        $pram = array();
        if (!empty($reqData['type'])) {
            $pram['t'] = $reqData['type'];
        }
        if (!empty($reqData['name'])) {
            $pram['n'] = $reqData['name'];
        }

        $this->redirect(
            array(
                "controller" => "app_admin",
                "action" => "channel",
                "?" => $pram,
            )
        );
    }

    public function offers()
    {
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User');

        if (!$this->Custom->check_app_enable_permission($login['User']['thinapp_id'], "OFFER")) {
            $this->redirect(array('controller' => 'app_admin', 'action' => 'dashboard'));
        }

        $searchData = $this->request->query;
        $conditions = array();
        if (isset($searchData['t']) && !empty($searchData['t'])) {
            $this->request->data['Search']['type'] = $searchData['t'];
            $conditions["AppServiceOffer.channel_status"] = $searchData['t'];
        }
        if (isset($searchData['n']) && !empty($searchData['n'])) {
            $this->request->data['Search']['name'] = $searchData['n'];
            $conditions["AppServiceOffer.channel_name LIKE"] = '%' . $searchData['n'] . '%';
        }
        $this->paginate = array(
            "conditions" => array(
                "AppServiceOffer.thinapp_id" => $login['User']['thinapp_id'],
                $conditions
            ),
            'contain' => false,
            'limit' => WEB_PAGINATION_LIMIT,
            'order' => array('AppServiceOffer.id' => 'desc')
        );
        $data = $this->paginate('AppServiceOffer');
        $this->set('channel', $data);
    }

    public function add_offer()
    {
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User');
        if (!$this->Custom->check_app_enable_permission($login['User']['thinapp_id'], "OFFER")) {
            $this->redirect(array('controller' => 'app_admin', 'action' => 'dashboard'));
        }
        if ($this->request->is(array('post', 'put'))) {
            $this->request->data['AppServiceOffer']['thinapp_id'] = $login['User']['thinapp_id'];

            $this->AppServiceOffer->set($this->request->data['AppServiceOffer']);
            if ($this->AppServiceOffer->validates()) {
                try {

                    $this->request->data['AppServiceOffer']['start'] = date("Y-m-d H:i:s", strtotime($this->request->data['AppServiceOffer']['start']));
                    $this->request->data['AppServiceOffer']['end'] = date("Y-m-d H:i:s", strtotime($this->request->data['AppServiceOffer']['end']));

                    if ($this->AppServiceOffer->save($this->request->data['AppServiceOffer'])) {
                        $this->Session->setFlash(__('Offer add successfully.'), 'default', array(), 'success');
                        $this->redirect(array('controller' => 'app_admin', 'action' => 'offers'));
                    } else {
                        $this->Session->setFlash(__('Sorry offer could not add.'), 'default', array(), 'error');
                    }
                } catch (Exception $e) {
                    $this->Session->setFlash(__('Sorry offer could not add.'), 'default', array(), 'error');
                }
            }

        }

    }

    public function edit_offer($id = null)
    {
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User');
        if (!$this->Custom->check_app_enable_permission($login['User']['thinapp_id'], "OFFER")) {
            $this->redirect(array('controller' => 'app_admin', 'action' => 'dashboard'));
        }
        $id = base64_decode($id);
        if ($this->request->is(array('post', 'put'))) {

            $this->AppServiceOffer->id = $id;
            $this->AppServiceOffer->set($this->request->data['AppServiceOffer']);
            if ($this->AppServiceOffer->validates()) {
                try {

                    $this->request->data['AppServiceOffer']['start'] = date("Y-m-d H:i:s", strtotime($this->request->data['AppServiceOffer']['start']));
                    $this->request->data['AppServiceOffer']['end'] = date("Y-m-d H:i:s", strtotime($this->request->data['AppServiceOffer']['end']));

                    if ($this->AppServiceOffer->save($this->request->data['AppServiceOffer'])) {
                        $this->Session->setFlash(__('Offer update successfully.'), 'default', array(), 'success');
                        $this->redirect(array('controller' => 'app_admin', 'action' => 'offers'));
                    } else {
                        $this->Session->setFlash(__('Sorry offer could not update.'), 'default', array(), 'error');
                    }
                } catch (Exception $e) {
                    $this->Session->setFlash(__('Sorry offer could not update.'), 'default', array(), 'error');
                }
            }

        }

        $channel = $this->AppServiceOffer->find("first", array(
            "conditions" => array(
                "AppServiceOffer.id" => ($id),
            ),
            'contain' => false
        ));
        if (!$this->request->data) {
            $this->request->data = $channel;
        }

        $this->set('post', $channel);


    }


    public function service()
    {
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User');
        if (!$this->Custom->check_app_enable_permission($login['User']['thinapp_id'], "SERVICE")) {
            $this->redirect(array('controller' => 'app_admin', 'action' => 'dashboard'));
        }

        $searchData = $this->request->query;
        $conditions = array();
        if (isset($searchData['t']) && !empty($searchData['t'])) {
            $this->request->data['Search']['type'] = $searchData['t'];
            $conditions["ServiceMenu.channel_status"] = $searchData['t'];
        }
        if (isset($searchData['n']) && !empty($searchData['n'])) {
            $this->request->data['Search']['name'] = $searchData['n'];
            $conditions["ServiceMenu.channel_name LIKE"] = '%' . $searchData['n'] . '%';
        }
        $this->paginate = array(
            "conditions" => array(
                "ServiceMenu.thinapp_id" => $login['User']['thinapp_id'],
                $conditions
            ),
            'contain' => array('ServiceMenuCategory'),
            'limit' => WEB_PAGINATION_LIMIT,
            'order' => array('ServiceMenu.id' => 'desc')
        );
        $data = $this->paginate('ServiceMenu');
        $this->set('channel', $data);
    }

    public function add_service()
    {
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User');
        if (!$this->Custom->check_app_enable_permission($login['User']['thinapp_id'], "SERVICE")) {
            $this->redirect(array('controller' => 'app_admin', 'action' => 'dashboard'));
        }
        if ($this->request->is(array('post', 'put'))) {
            $this->ServiceMenu->set($this->request->data['ServiceMenu']);
            if ($this->ServiceMenu->validates()) {
                try {
                    $this->request->data['ServiceMenu']['thinapp_id'] = $login['User']['thinapp_id'];
                    if ($this->ServiceMenu->save($this->request->data['ServiceMenu'])) {
                        $this->Session->setFlash(__('Service update successfully.'), 'default', array(), 'success');
                        $this->redirect(array('controller' => 'app_admin', 'action' => 'service'));
                    } else {
                        $this->Session->setFlash(__('Sorry service could not update.'), 'default', array(), 'error');
                    }
                } catch (Exception $e) {
                    $this->Session->setFlash(__('Sorry service could not add.'), 'default', array(), 'error');
                }
            }

        }

    }

    public function edit_service($id = null)
    {
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User');
        if (!$this->Custom->check_app_enable_permission($login['User']['thinapp_id'], "SERVICE")) {
            $this->redirect(array('controller' => 'app_admin', 'action' => 'dashboard'));
        }
        $id = base64_decode($id);
        if ($this->request->is(array('post', 'put'))) {

            $this->ServiceMenu->id = $id;
            $this->ServiceMenu->set($this->request->data['ServiceMenu']);
            if ($this->ServiceMenu->validates()) {
                try {

                    if ($this->ServiceMenu->save($this->request->data['ServiceMenu'])) {
                        $this->Session->setFlash(__('Service update successfully.'), 'default', array(), 'success');
                        $this->redirect(array('controller' => 'app_admin', 'action' => 'service'));
                    } else {
                        $this->Session->setFlash(__('Sorry service could not update.'), 'default', array(), 'error');
                    }
                } catch (Exception $e) {
                    $this->Session->setFlash(__('Sorry service could not add.'), 'default', array(), 'error');
                }
            }

        }

        $channel = $this->ServiceMenu->find("first", array(
            "conditions" => array(
                "ServiceMenu.id" => ($id),
            ),
            'contain' => false
        ));
        if (!$this->request->data) {
            $this->request->data = $channel;
        }

        $this->set('post', $channel);


    }

    public function delete_service($id = null)
    {
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User');
        if (!$this->Custom->check_app_enable_permission($login['User']['thinapp_id'], "SERVICE")) {
            $this->redirect(array('controller' => 'app_admin', 'action' => 'dashboard'));
        }
        $id = base64_decode($id);
        if ($this->ServiceMenu->delete($id)) {
            $this->Session->setFlash(__('Service delete successfully.'), 'default', array(), 'success');
            $this->redirect(array('controller' => 'app_admin', 'action' => 'service'));
        } else {
            $this->Session->setFlash(__('Sorry service could not delete.'), 'default', array(), 'error');
        }
    }


    public function category()
    {
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User');
        if (!$this->Custom->check_app_enable_permission($login['User']['thinapp_id'], "SERVICE")) {
            $this->redirect(array('controller' => 'app_admin', 'action' => 'dashboard'));
        }

        $searchData = $this->request->query;
        $conditions = array();
        if (isset($searchData['t']) && !empty($searchData['t'])) {
            $this->request->data['Search']['type'] = $searchData['t'];
            $conditions["ServiceMenu.channel_status"] = $searchData['t'];
        }
        if (isset($searchData['n']) && !empty($searchData['n'])) {
            $this->request->data['Search']['name'] = $searchData['n'];
            $conditions["ServiceMenu.channel_name LIKE"] = '%' . $searchData['n'] . '%';
        }
        $this->paginate = array(
            "conditions" => array(
                "ServiceMenuCategory.thinapp_id" => $login['User']['thinapp_id'],
                $conditions
            ),
            'contain' => false,
            'limit' => WEB_PAGINATION_LIMIT,
            'order' => array('ServiceMenuCategory.id' => 'desc')
        );
        $data = $this->paginate('ServiceMenuCategory');
        $this->set('channel', $data);
    }

    public function add_category()
    {
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User');
        if (!$this->Custom->check_app_enable_permission($login['User']['thinapp_id'], "SERVICE")) {
            $this->redirect(array('controller' => 'app_admin', 'action' => 'dashboard'));
        }
        if ($this->request->is(array('post', 'put'))) {
            $this->ServiceMenuCategory->set($this->request->data['ServiceMenuCategory']);
            if ($this->ServiceMenuCategory->validates()) {
                try {

                    $this->request->data['ServiceMenuCategory']['thinapp_id'] = $login['User']['thinapp_id'];
                    if ($this->ServiceMenuCategory->save($this->request->data['ServiceMenuCategory'])) {
                        $this->Session->setFlash(__('Category add successfully.'), 'default', array(), 'success');
                        $this->redirect(array('controller' => 'app_admin', 'action' => 'category'));
                    } else {
                        $this->Session->setFlash(__('Sorry category could not add.'), 'default', array(), 'error');
                    }
                } catch (Exception $e) {
                    $this->Session->setFlash(__('Sorry category could not add.'), 'default', array(), 'error');
                }
            }

        }

    }


    public function edit_category($id = null)
    {
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User');
        if (!$this->Custom->check_app_enable_permission($login['User']['thinapp_id'], "SERVICE")) {
            $this->redirect(array('controller' => 'app_admin', 'action' => 'dashboard'));
        }
        $id = base64_decode($id);
        if ($this->request->is(array('post', 'put'))) {
            $this->ServiceMenuCategory->id = $id;
            $this->request->data['ServiceMenuCategory']['id'] = $id;
            $this->ServiceMenuCategory->set($this->request->data['ServiceMenuCategory']);
            if ($this->ServiceMenuCategory->validates()) {
                try {
                    if ($this->ServiceMenuCategory->save($this->request->data['ServiceMenuCategory'])) {
                        $this->Session->setFlash(__('Category update successfully.'), 'default', array(), 'success');
                        $this->redirect(array('controller' => 'app_admin', 'action' => 'category'));
                    } else {
                        $this->Session->setFlash(__('Sorry category could not update.'), 'default', array(), 'error');
                    }
                } catch (Exception $e) {
                    $this->Session->setFlash(__('Sorry category could not update.'), 'default', array(), 'error');
                }
            }

        }

        $channel = $this->ServiceMenuCategory->find("first", array(
            "conditions" => array(
                "ServiceMenuCategory.id" => ($id),
            ),
            'contain' => false
        ));
        if (!$this->request->data) {
            $this->request->data = $channel;
        }

        $this->set('post', $channel);
    }


    public function cms_doc_dashboard()
    {
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User');


        $this->paginate = array(
            "conditions" => array(
                "CmsDocDashboard.thinapp_id" => $login['User']['thinapp_id'],
                "CmsDocDashboard.user_id" => $login['User']['id'],
            ),
            'contain' => false,
            'order' => array('CmsDocDashboard.id' => 'desc'),
            'limit' => WEB_PAGINATION_LIMIT
        );
        $data = $this->paginate('CmsDocDashboard');
        $this->set('channel', $data);
    }

    public function add_cms_doc_dashboard()
    {
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User');
        $dataCategories = $this->CmsDocHealthTipSubCategory->find('list', array(
            "fields" => array("id", "sub_category_name"),
            "conditions" => array(
                "CmsDocHealthTipSubCategory.status" => 'ACTIVE',
                "CmsDocHealthTipSubCategory.category" => 'HEALTH_TIP'
            ),
        ));

        $dataEmergencyCategories = $this->CmsDocHealthTipSubCategory->find('list', array(
            "fields" => array("id", "sub_category_name"),
            "conditions" => array(
                "CmsDocHealthTipSubCategory.status" => 'ACTIVE',
                "CmsDocHealthTipSubCategory.category" => 'EMERGENCY'
            ),
        ));
        $this->set('subCategoriesEmergency', $dataEmergencyCategories);

        $this->set('subCategories', $dataCategories);

        if ($this->request->is(array('post', 'put'))) {
            $this->request->data['CmsDocDashboard']['user_id'] = $login['User']['id'];
            $this->request->data['CmsDocDashboard']['thinapp_id'] = $login['User']['thinapp_id'];

            $logo = $this->request->data['CmsDocDashboard']['file'];
            if (isset($logo['tmp_name']) && !empty($logo['tmp_name'])) {
                $this->request->data['CmsDocDashboard']['image'] = $this->Custom->uploadFileToAws($logo);;
            } else {
                $this->request->data['CmsDocDashboard']['image'] = null;
            }

            $this->CmsDocDashboard->set($this->request->data['CmsDocDashboard']);
            if ($this->CmsDocDashboard->validates()) {
                if ($this->CmsDocDashboard->save($this->request->data['CmsDocDashboard'])) {
                    $last_insert_id = $this->CmsDocDashboard->getLastInsertId();
                    $this->Session->setFlash(__('Post add successfully.'), 'default', array(), 'success');


                    $flag = strtoupper($this->request->data['CmsDocDashboard']['category']);
                    $thin_app_id = $login['User']['thinapp_id'];
                    $option = array(
                        'thinapp_id' => $thin_app_id,
                        'channel_id' => 0,
                        'role' => "USER",
                        'flag' => $flag,
                        'title' => mb_strimwidth($this->request->data['CmsDocDashboard']['title'], 0, 100, '...'),
                        'file_path_url' => $this->request->data['CmsDocDashboard']['image'],
                        'type' => 'IMAGE',
                        'message' => mb_strimwidth($this->request->data['CmsDocDashboard']['title'], 0, 100, '...'),
                        'description' => "",
                        'chat_reference' => '',
                        'module_type' => $flag,
                        'module_type_id' => $last_insert_id,
                        'firebase_reference' => ""
                    );

                    //$this->redirect(array('controller'=>'app_admin','action'=>'cms_doc_dashboard'),null,false);
                    //header()
                    //Custom::send_process_to_background();
                    Custom::send_health_and_emergency_notification($option, $thin_app_id);


                    $this->redirect(array('controller' => 'app_admin', 'action' => 'cms_doc_dashboard'), null, false);

                } else {
                    $this->Session->setFlash(__('Sorry post could not add.'), 'default', array(), 'error');
                }
            }
        } else {
            $this->request->data['CmsDocDashboard']['category'] = "EMERGENCY";
        }

    }

    public function edit_cms_doc_dashboard($id = null)
    {
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User');
        $dataCategories = $this->CmsDocHealthTipSubCategory->find('list', array(
            "fields" => array("id", "sub_category_name"),
            "conditions" => array(
                "CmsDocHealthTipSubCategory.status" => 'ACTIVE',
                "CmsDocHealthTipSubCategory.category" => 'HEALTH_TIP'
            ),
        ));

        $dataEmergencyCategories = $this->CmsDocHealthTipSubCategory->find('list', array(
            "fields" => array("id", "sub_category_name"),
            "conditions" => array(
                "CmsDocHealthTipSubCategory.status" => 'ACTIVE',
                "CmsDocHealthTipSubCategory.category" => 'EMERGENCY'
            ),
        ));
        $this->set('subCategoriesEmergency', $dataEmergencyCategories);
        $this->set('subCategories', $dataCategories);

        if ($this->request->is(array('post', 'put'))) {

            $this->CmsDocDashboard->id = base64_decode($id);
            $this->request->data['CmsDocDashboard']['id'] = base64_decode($id);;

            $logo = $this->request->data['CmsDocDashboard']['file'];
            if (isset($logo['tmp_name']) && !empty($logo['tmp_name'])) {
                $this->request->data['CmsDocDashboard']['image'] = $this->Custom->uploadFileToAws($logo);;
            } else {
                unset($this->request->data['CmsDocDashboard']['media_type']);
            }

            $this->CmsDocDashboard->set($this->request->data['CmsDocDashboard']);
            if ($this->CmsDocDashboard->validates()) {
                if ($this->CmsDocDashboard->save($this->request->data['CmsDocDashboard'])) {

                    $this->Session->setFlash(__('Post update successfully.'), 'default', array(), 'success');
                    $this->redirect(array('controller' => 'app_admin', 'action' => 'cms_doc_dashboard'));
                } else {
                    $this->Session->setFlash(__('Sorry post could not update.'), 'default', array(), 'error');
                }
            }

        }

        $cms = $this->CmsDocDashboard->find("first", array(
            "conditions" => array(
                "CmsDocDashboard.id" => base64_decode($id),
            ),
            'contain' => false
        ));


        if (!$this->request->data) {
            $this->request->data = $cms;
        }
        $this->set('post', $cms);

    }

    public function view_cms_doc_dashboard($id = null)
    {
        $this->layout = false;
        $login = $this->Session->read('Auth.User');
        $cms = $this->CmsDocDashboard->find("first", array(
            "conditions" => array(
                "CmsDocDashboard.id" => base64_decode($id),
            ),
            'contain' => false
        ));
        $this->set('content', $cms['CmsDocDashboard']);
    }

    public function delete_cms_doc_dashboard($id = null)
    {
        $this->layout = false;

        $post_data = $this->CmsDocDashboard->find("first", array(
            "conditions" => array(
                "CmsDocDashboard.id" => (base64_decode($id))
            ),
            'contain' => false
        ));
        $cms = $this->CmsDocDashboard->delete(base64_decode($id));
        if ($cms && $post_data) {
            if (!empty($post_data['CmsDocDashboard']['image'])) {
                $file_name = explode("/", $post_data['CmsDocDashboard']['image']);
                $file_key = end($file_name);
                Custom::deleteFileToAws($file_key);
            }
            $this->Session->setFlash(__('Post delete successfully.'), 'default', array(), 'success');
        } else {
            $this->Session->setFlash(__('Sorry post could not delete.'), 'default', array(), 'error');
        }
        $this->redirect(array('controller' => 'app_admin', 'action' => 'cms_doc_dashboard'));
    }


    public function vaccination()
    {
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User');

        if (!in_array($login['Thinapp']['category_name'], array("DOCTOR", "HOSPITAL"))) {
            $this->redirect(array('controller' => 'app_admin', 'action' => 'dashboard'));
        }
        $conditions = array();
        $this->paginate = array(
            "conditions" => array(
                "AppMasterVaccination.thinapp_id" => $login['User']['thinapp_id'],
                "AppMasterVaccination.category_type" => "CHILD VACCINATION",
                $conditions
            ),
            'contain' => false,
            'limit' => 25,
            'order' => array('AppMasterVaccination.vac_name' => 'ASC')
        );
        $data = $this->paginate('AppMasterVaccination');
        $this->set('list', $data);
    }

    public function add_vaccination()
    {
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User');
        if (!in_array($login['Thinapp']['category_name'], array("DOCTOR", "HOSPITAL"))) {
            $this->redirect(array('controller' => 'app_admin', 'action' => 'dashboard'));
        }

        if ($this->request->is(array('post', 'put'))) {

            $this->AppMasterVaccination->set($this->request->data['AppMasterVaccination']);
            if ($this->AppMasterVaccination->validates()) {
                try {
                    $this->request->data['AppMasterVaccination']['thinapp_id'] = $login['User']['thinapp_id'];
                    $this->request->data['AppMasterVaccination']['vac_name'] = trim($this->request->data['AppMasterVaccination']['vac_name']);
                    $this->request->data['AppMasterVaccination']['full_name'] = trim($this->request->data['AppMasterVaccination']['full_name']);


                    $week = $this->request->data['AppMasterVaccination']['week'];
                    $year = $this->request->data['AppMasterVaccination']['year'];
                    $month = $this->request->data['AppMasterVaccination']['month'];
                    $vac_radio = $this->request->data['AppMasterVaccination']['vac_radio'];
                    $dose_label = $this->request->data['AppMasterVaccination']['dose_label'];
                    $dose_number = $this->request->data['AppMasterVaccination']['dose_number'];
                    $this->request->data['AppMasterVaccination']['vac_dose_name'] = $dose_label . " " . $dose_number;


                    if ($vac_radio == "BIRTH") {
                        $this->request->data['AppMasterVaccination']['vac_time'] = "BIRTH";
                    } else if ($vac_radio == "WEEK") {
                        $week = $week . " WEEK";
                        $this->request->data['AppMasterVaccination']['vac_time'] = $week;
                    } else {
                        $save_day = "";
                        if ($year > 0 && $month > 0) {
                            $save_day = ($year * 12) + $month;
                            $save_day = $save_day . " MONTH";
                        } else {
                            if ($year > 0) {
                                $save_day = $year . " YEAR";
                            } else {
                                $save_day = $month . " MONTH";
                            }
                        }
                        $this->request->data['AppMasterVaccination']['vac_time'] = $save_day;
                    }

                    $data = $this->request->data['AppMasterVaccination'];
                    $duplicate_data = Custom::is_duplicate_vaccin_data($data['thinapp_id'], $data['vac_name'], $data['full_name'], $data['vac_dose_name'], $data['vac_time'], $data['vac_type']);
                    if (!$duplicate_data) {
                        $connection = ConnectionUtil::getConnection();
                        $connection->autocommit(FALSE);
                        $created = Custom::created();
                        $sql = "INSERT INTO app_master_vaccinations (visible_for_male,visible_for_female,thinapp_id, vac_name, full_name, vac_dose_name,  vac_time, remark, vac_type, created, modified) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                        $stmt = $connection->prepare($sql);
                        $stmt->bind_param('sssssssssss', $data['visible_for_male'], $data['visible_for_female'], $data['thinapp_id'], $data['vac_name'], $data['full_name'], $data['vac_dose_name'], $data['vac_time'], $data['remark'], $data['vac_type'], $created, $created);
                        if ($stmt->execute()) {
                            $app_master_vac_id = $stmt->insert_id;
                            $result = Custom::add_new_vaccination_to_child($connection, $app_master_vac_id, $data['thinapp_id']);
                            if ($result) {
                                $connection->commit();
                                $this->Session->setFlash(__('Vaccination add successfully.'), 'default', array(), 'success');
                                $this->redirect(array('controller' => 'app_admin', 'action' => 'vaccination'));
                            } else {
                                $connection->rollback();
                                $this->Session->setFlash(__('Sorry vaccination could not add.'), 'default', array(), 'error');

                            }
                        } else {
                            $this->Session->setFlash(__('Sorry vaccination could not add.'), 'default', array(), 'error');
                        }
                    } else {
                        $this->Session->setFlash(__('Duplicate Vaccination.'), 'default', array(), 'error');
                    }


                } catch (Exception $e) {
                    $this->Session->setFlash(__('Sorry vaccination could not update.'), 'default', array(), 'error');
                }
            }

        }

    }

    public function edit_vaccination($id = null)
    {
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User');
        if (!in_array($login['Thinapp']['category_name'], array("DOCTOR", "HOSPITAL"))) {
            $this->redirect(array('controller' => 'app_admin', 'action' => 'dashboard'));
        }
        $id = base64_decode($id);
        $thin_app_id = $login['User']['thinapp_id'];


        $master_data = $this->AppMasterVaccination->find("first", array(
            "conditions" => array(
                "AppMasterVaccination.id" => ($id),
            ),
            'contain' => false
        ));


        if ($this->request->is(array('post', 'put'))) {

            $this->AppMasterVaccination->id = $id;
            $this->AppMasterVaccination->set($this->request->data['AppMasterVaccination']);
            if ($this->AppMasterVaccination->validates()) {
                try {
                    $week = $this->request->data['AppMasterVaccination']['week'];
                    $year = $this->request->data['AppMasterVaccination']['year'];
                    $month = $this->request->data['AppMasterVaccination']['month'];
                    $vac_radio = $this->request->data['AppMasterVaccination']['vac_radio'];
                    $dose_label = $this->request->data['AppMasterVaccination']['dose_label'];
                    $dose_number = $this->request->data['AppMasterVaccination']['dose_number'];
                    $this->request->data['AppMasterVaccination']['vac_dose_name'] = $dose_label . " " . $dose_number;

                    if ($vac_radio == "BIRTH") {
                        $this->request->data['AppMasterVaccination']['vac_time'] = "BIRTH";
                    } else if ($vac_radio == "WEEK") {
                        $week = $week . " WEEK";
                        $this->request->data['AppMasterVaccination']['vac_time'] = $week;
                    } else {
                        $save_day = "";
                        if ($year > 0 && $month > 0) {
                            $save_day = ($year * 12) + $month;
                            $save_day = $save_day . " MONTH";
                        } else {
                            if ($year > 0) {
                                $save_day = $year . " YEAR";
                            } else {
                                $save_day = $month . " MONTH";
                            }
                        }
                        $this->request->data['AppMasterVaccination']['vac_time'] = $save_day;
                    }


                    $this->request->data['AppMasterVaccination']['vac_name'] = trim($this->request->data['AppMasterVaccination']['vac_name']);
                    $this->request->data['AppMasterVaccination']['full_name'] = trim($this->request->data['AppMasterVaccination']['full_name']);


                    $data = $this->request->data['AppMasterVaccination'];
                    $duplicate_data = Custom::is_duplicate_vaccin_data($thin_app_id, $data['vac_name'], $data['full_name'], $data['vac_dose_name'], $data['vac_time'], $data['vac_type']);
                    if (!$duplicate_data || $duplicate_data['id'] == $id) {
                        $connection = ConnectionUtil::getConnection();
                        $connection->autocommit(FALSE);
                        $is_success = true;
                        if ($master_data['AppMasterVaccination']['vac_time'] != $data['vac_time']) {
                            $is_success = Custom::update_child_vaccination_by_master_update($connection, $thin_app_id, $id, $data['vac_time']);
                        }
                        $created = Custom::created();
                        $sql = "UPDATE app_master_vaccinations set  visible_for_male =?, visible_for_female=?, vac_dose_name =?,  vac_time=?, remark =?, vac_type =?, status=?,modified =? where id = ?";
                        $stmt = $connection->prepare($sql);
                        $stmt->bind_param('sssssssss', $data['visible_for_male'], $data['visible_for_female'], $data['vac_dose_name'], $data['vac_time'], $data['remark'], $data['vac_type'], $data['status'], $created, $id);
                        if ($stmt->execute() && $is_success === true) {
                            $connection->commit();
                            $this->Session->setFlash(__('Vaccination update successfully.'), 'default', array(), 'success');
                            $this->redirect(array('controller' => 'app_admin', 'action' => 'vaccination'));
                        } else {
                            $this->Session->setFlash(__('Sorry vaccination could not update.'), 'default', array(), 'error');
                        }
                    } else {
                        $this->Session->setFlash(__('Duplicate Vaccination.'), 'default', array(), 'error');
                    }


                } catch (Exception $e) {
                    $this->Session->setFlash(__('Sorry vaccination could not update.'), 'default', array(), 'error');
                }
            }

        }


        if (!$this->request->data) {
            $this->request->data = $master_data;
        }

        $this->set('post', $master_data);

    }

    public function get_state_list()
    {
        $this->autoRender = false;
        $response = "";
        if ($this->request->is('ajax')) {
            $country_id = $this->request->data['country_id'];
            if (!$state_list = json_decode(WebservicesFunction::readJson("state_list_$country_id"), true)) {
                $state_list = Custom::getStateList($country_id, true);
                WebservicesFunction::createJson("state_list_$country_id", json_encode($state_list), "CREATE");
            }
            if (!empty($state_list)) {
                foreach ($state_list as $key => $value) {
                    $response .= "<option value='" . $value['id'] . "'>" . $value['name'] . "</option>";
                }
            }
        }
        return $response;


    }
    public function get_state_list_json()
    {
        $this->autoRender = false;
        $response = array();
        if ($this->request->is('ajax')) {
            $country_id = $this->request->data['country_id'];
            if (!$state_list = json_decode(WebservicesFunction::readJson("state_list_$country_id"), true)) {
                $state_list = Custom::getStateList($country_id, true);
                WebservicesFunction::createJson("state_list_$country_id", json_encode($state_list), "CREATE");
            }
            if (!empty($state_list)) {

                $response = $state_list;
            }
        }
        return json_encode($response);
    }

    public function get_city_list()
    {
        $this->autoRender = false;
        $response = "";
        if ($this->request->is('ajax')) {
            $state_id = $this->request->data['state_id'];

            if (!$city_list = json_decode(WebservicesFunction::readJson("city_list_$state_id"), true)) {
                $city_list = Custom::getCityList($state_id, true);
                WebservicesFunction::createJson("city_list_$state_id", json_encode($city_list), "CREATE");
            }
            if (!empty($city_list)) {
                foreach ($city_list as $key => $value) {
                    $response .= "<option value='" . $value['id'] . "'>" . $value['name'] . "</option>";
                }
            }
        }
        return $response;
    }

    public function get_city_list_json()
    {
        $this->autoRender = false;
        $response = array();
        if ($this->request->is('ajax')) {
            $state_id = $this->request->data['state_id'];

            if (!$city_list = json_decode(WebservicesFunction::readJson("city_list_$state_id"), true)) {
                $city_list = Custom::getCityList($state_id, true);
                WebservicesFunction::createJson("city_list_$state_id", json_encode($city_list), "CREATE");
            }
            if (!empty($city_list)) {
                $response = $city_list;
            }
        }
        return json_encode($response,true);
    }

    public function search_get_user_statics()
    {
        $reqData = $this->request->query;
        $pram = array();

        if (!empty($reqData['from_date'])) {
            $pram['fd'] = $reqData['from_date'];
        }
        if (!empty($reqData['to_date'])) {
            $pram['td'] = $reqData['to_date'];
        }

        $this->redirect(
            array(
                "controller" => "app_admin",
                "action" => "get_user_statics",
                "?" => $pram,
            )
        );
    }


    public function get_user_statics($date = null)
    {
        $login = $this->Session->read('Auth.User');
        $thin_app_id = $login['User']['thinapp_id'];

        $searchData = $this->request->query;

        if (isset($searchData['fd']) && !empty($searchData['fd']) && isset($searchData['td']) && !empty($searchData['td'])) {
            $this->request->data['Search']['from_date'] = $searchData['fd'];
            $this->request->data['Search']['to_date'] = $searchData['td'];
            $from_date = DateTime::createFromFormat('d/m/Y', $searchData['fd']);
            $from_date = $from_date->format('Y-m-d');
            $to_date = DateTime::createFromFormat('d/m/Y', $searchData['td']);
            $to_date = $to_date->format('Y-m-d');
        } else {
            $from_date = $to_date = date('Y-m-d');
            $this->request->data['Search']['from_date'] = $this->request->data['Search']['to_date'] = date('d/m/Y');

        }

        $appointment_list = Custom::get_stats_appointment_list($thin_app_id, $from_date, $to_date);
        $download_user_list = Custom::get_stats_download_list($thin_app_id, $from_date, $to_date);
        $all_counts = Custom::get_user_stats_count($thin_app_id);


        $login1 = $this->Session->read('Auth.User');
        $reportTitle = $login1['Thinapp']['name'].' ('.$this->request->data['Search']['from_date'].' - '.$this->request->data['Search']['to_date'].')';

        $this->set(compact('reportTitle','all_counts', 'appointment_list', 'download_user_list'));
    }

    public function user_statics_details($date = null, $unique = null)
    {
        $login = $this->Session->read('Auth.User');
        $thin_app_id = $login['User']['thinapp_id'];
        $group = false;

        if ($date != "") {
            $date = explode("_", $date);
            $startDate = $date[0];
            $endDate = $date[1];
        } else {
            $startDate = date("Y-m-d");
            $endDate = date("Y-m-d");
        }

        if ($unique == "unique") {
            $group = "AppUserStatic.user_id";
        }

        $this->paginate = array(
            "fields" => array("AppUserStatic.*", "Owner.username", "Owner.mobile"),
            "conditions" => array("AppUserStatic.thin_app_id" => $thin_app_id, "AppUserStatic.created >=" => $startDate . " 00:00:00", "AppUserStatic.created <=" => $endDate . " 23:59:59"),
            'contain' => "Owner",
            'group' => $group,
            'order' => array('AppUserStatic.id' => 'desc'),
            'limit' => 50
        );
        $userData = $this->paginate('AppUserStatic');
        $this->set(compact('userData', 'startDate', 'endDate'));
    }


    public function verify_ajax()
    {
        $this->layout = false;
        $this->autoRender = false;
        $response = array();
        if ($this->request->is(array('Put', 'Post'))) {

            $code = $this->request->data['Verify']['code'];
            $m_code = $this->request->data['Verify']['m_code'];
            $this->User->set($this->request->data['Verify']);
            if ($this->User->validates()) {
                $userdata = $this->User->find("first", array('contain' => array('Thinapp', 'Leads'), "conditions" => array("User.mob_vf_code" => $m_code, "User.verification_code" => $code)));
                if (!empty($userdata)) {

                    $id = $userdata['User']['id'];
                    $this->User->id = $userdata['User']['id'];
                    if ($this->User->saveField('is_verified', 'Y')) {
                        if ($this->Auth->login($userdata)) {

                            /* START this code send email and message when new lead come verify */

                            $org_name = $userdata['Leads']['org_name'];
                            $mobile = $userdata['User']['mobile'];
                            $body = "Hello admin, \n\n New lead request received on website detail are following: <br>";
                            $body .= "Mobile: " . $mobile . "<br>";
                            $body .= "Email: " . $userdata['User']['email'] . "<br>";
                            $body .= "Orgnization: " . $org_name . "<br>";
                            //$body .= "Message: "."New lead request for customer"."<br>";
                            $subject = "New lead request";
                            $to = SUPER_ADMIN_EMAIL;
                            $from = $userdata['User']['email'];

                            $this->Custom->sendEmail($to, $from, $subject, $body, $org_name);
                            $message = "You have received new lead request from " . $mobile . " for organization " . $org_name . ". Please response this request.";
                            $super_admin_mobile = SUPER_ADMIN_MOBILE;
                            $thin_app_id = MBROADCAST_APP_ID;
                            $option = array(
                                'mobile' => $super_admin_mobile,
                                'message' => urlencode($message),
                                'thinapp_id' => $thin_app_id,
                                'sender_id' => $id
                            );
                            $this->Custom->send_message_system($option);

                            /* END this code send email and message when new lead come verify */

                            $this->Session->setFlash(__('Thnkyou!'), 'default', array(), 'success');
                            //$this->redirect(array('controller' => 'app_admin', 'action' => 'app_info'));

                            $dataToSend = array('status' => 1);

                        }

                    } else {
                        //his->Session->setFlash(__('Sorry verification could not done.'),'default', array(),'error');
                        $dataToSend = array('status' => 0, 'msg' => 'Sorry verification could not done.');
                    }
                } else {
                    //$this->Session->setFlash(__('Wrong one time password.'),'default', array(),'error');
                    $dataToSend = array('status' => 0, 'msg' => 'Wrong one time password.');
                }
            }
        }

        echo json_encode($dataToSend);
        die;

    }

    // Registration Organization End

    public function prescription_tag_list()
    {
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User');
        $data = $service_list = Custom::load_prescription_list($login['User']['thinapp_id'], 'PRESCRIPTION_TAG');
        $this->set('channel', $data);


    }

    public function add_prescription_tag()
    {
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User');
        if ($this->request->is(array('post', 'put'))) {
            $this->request->data['PrescriptionTag']['thinapp_id'] = $login['User']['thinapp_id'];
            $this->request->data['PrescriptionTag']['type'] = "PRESCRIPTION_TAG";
            $this->PrescriptionTag->set($this->request->data['PrescriptionTag']);
            if ($this->PrescriptionTag->validates()) {
                if ($this->PrescriptionTag->save($this->request->data['PrescriptionTag'])) {
                    $this->Session->setFlash(__('Tag added successfully.'), 'default', array(), 'success');
                    $this->redirect(array('controller' => 'app_admin', 'action' => 'prescription_tag_list'), null, false);

                } else {
                    $this->Session->setFlash(__('Sorry tag could not add.'), 'default', array(), 'error');
                }
            }
        }


    }

    public function edit_prescription_tag($id = null)
    {
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User');
        $id = base64_decode($id);
        if ($this->request->is(array('post', 'put'))) {
            $this->request->data['PrescriptionTag']['thinapp_id'] = $login['User']['thinapp_id'];
            $this->request->data['PrescriptionTag']['id'] = $id;
            $this->request->data['PrescriptionTag']['type'] = 'PRESCRIPTION_TAG';
            $this->PrescriptionTag->set($this->request->data['PrescriptionTag']);
            if ($this->PrescriptionTag->validates()) {
                if ($this->PrescriptionTag->save($this->request->data['PrescriptionTag'])) {
                    $this->Session->setFlash(__('Tag added successfully.'), 'default', array(), 'success');
                    $this->redirect(array('controller' => 'app_admin', 'action' => 'prescription_tag_list'), null, false);

                } else {
                    $this->Session->setFlash(__('Sorry tag could not add.'), 'default', array(), 'error');
                }
            }
        }


        $cms = $this->PrescriptionTag->find("first", array(
            "conditions" => array(
                "PrescriptionTag.id" => $id,
            ),
            'contain' => false
        ));


        if (!$this->request->data) {
            $this->request->data = $cms;
        }
        $this->set('post', $cms);


    }


    public function copy_prescription_tag($id = null)
    {
        $this->layout = false;
        $this->autoRender = false;


        $login = $this->Session->read('Auth.User');
        $id = base64_decode($id);

        $cms = $this->PrescriptionTag->find("first", array(
            "conditions" => array(
                "PrescriptionTag.id" => $id,
            ),
            'contain' => false
        ));
        if ($cms) {
            $this->request->data['PrescriptionTag']['thinapp_id'] = $login['User']['thinapp_id'];
            $this->request->data['PrescriptionTag']['name'] = $cms['PrescriptionTag']['name'];
            $this->request->data['PrescriptionTag']['description'] = $cms['PrescriptionTag']['description'];
            $this->request->data['PrescriptionTag']['type'] = "PRESCRIPTION_TAG";
            $this->PrescriptionTag->set($this->request->data['PrescriptionTag']);
            if ($this->PrescriptionTag->validates()) {
                if ($this->PrescriptionTag->save($this->request->data['PrescriptionTag'])) {
                    $this->Session->setFlash(__('Tag added successfully.'), 'default', array(), 'success');
                    $this->redirect(array('controller' => 'app_admin', 'action' => 'prescription_tag_list'), null, false);
                } else {
                    $this->Session->setFlash(__('Sorry tag could not add.'), 'default', array(), 'error');
                    $this->redirect(array('controller' => 'app_admin', 'action' => 'prescription_tag_list'), null, false);
                }
            } else {
                $this->Session->setFlash(__('Tag already exist.'), 'default', array(), 'error');
                $this->redirect(array('controller' => 'app_admin', 'action' => 'prescription_tag_list'), null, false);
            }
        } else {
            $this->Session->setFlash(__('Sorry tag could not add.'), 'default', array(), 'error');
            $this->redirect(array('controller' => 'app_admin', 'action' => 'prescription_tag_list'), null, false);

        }


    }


    public function delete_prescription_tag($id = null)
    {
        $this->layout = false;
        $cms = $this->PrescriptionTag->delete(base64_decode($id));
        if ($cms) {
            $this->Session->setFlash(__('Delete successfully.'), 'default', array(), 'success');
        } else {
            $this->Session->setFlash(__('Sorry could not update.'), 'default', array(), 'error');
        }
        $this->redirect(array('controller' => 'app_admin', 'action' => 'prescription_tag_list'));
    }


    public function child_milestone_list()
    {
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User');
        $data = $service_list = Custom::load_prescription_list($login['User']['thinapp_id'], 'CHILD_MILESTONE');
        $this->set('channel', $data);
    }

    public function add_child_milestone()
    {
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User');
        if ($this->request->is(array('post', 'put'))) {
            $this->request->data['PrescriptionTag']['thinapp_id'] = $login['User']['thinapp_id'];
            $this->request->data['PrescriptionTag']['type'] = "CHILD_MILESTONE";
            $this->PrescriptionTag->set($this->request->data['PrescriptionTag']);
            if ($this->PrescriptionTag->validates()) {
                if ($this->PrescriptionTag->save($this->request->data['PrescriptionTag'])) {
                    $this->Session->setFlash(__('Milestone added successfully.'), 'default', array(), 'success');
                    $this->redirect(array('controller' => 'app_admin', 'action' => 'child_milestone_list'), null, false);

                } else {
                    $this->Session->setFlash(__('Sorry milestone could not add.'), 'default', array(), 'error');
                }
            }
        }


    }

    public function edit_child_milestone($id = null)
    {
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User');
        $id = base64_decode($id);
        if ($this->request->is(array('post', 'put'))) {
            $this->request->data['PrescriptionTag']['thinapp_id'] = $login['User']['thinapp_id'];
            $this->request->data['PrescriptionTag']['id'] = $id;
            $this->PrescriptionTag->set($this->request->data['PrescriptionTag']);
            if ($this->PrescriptionTag->validates()) {
                if ($this->PrescriptionTag->save($this->request->data['PrescriptionTag'])) {
                    $this->Session->setFlash(__('Milestone added successfully.'), 'default', array(), 'success');
                    $this->redirect(array('controller' => 'app_admin', 'action' => 'child_milestone_list'), null, false);

                } else {
                    $this->Session->setFlash(__('Sorry milestone could not add.'), 'default', array(), 'error');
                }
            }
        }


        $cms = $this->PrescriptionTag->find("first", array(
            "conditions" => array(
                "PrescriptionTag.id" => $id,
                "PrescriptionTag.type" => 'CHILD_MILESTONE'
            ),
            'contain' => false
        ));


        if (!$this->request->data) {
            $this->request->data = $cms;
        }
        $this->set('post', $cms);


    }

    public function delete_child_milestone($id = null)
    {
        $this->layout = false;
        $cms = $this->PrescriptionTag->delete(base64_decode($id));
        if ($cms) {
            $this->Session->setFlash(__('Delete successfully.'), 'default', array(), 'success');
        } else {
            $this->Session->setFlash(__('Sorry could not update.'), 'default', array(), 'error');
        }
        $this->redirect(array('controller' => 'app_admin', 'action' => 'child_milestone_list'));
    }

    public function copy_child_milestone($id = null)
    {
        $this->layout = false;
        $this->autoRender = false;


        $login = $this->Session->read('Auth.User');
        $id = base64_decode($id);

        $cms = $this->PrescriptionTag->find("first", array(
            "conditions" => array(
                "PrescriptionTag.id" => $id,
            ),
            'contain' => false
        ));
        if ($cms) {
            $this->request->data['PrescriptionTag']['thinapp_id'] = $login['User']['thinapp_id'];
            $this->request->data['PrescriptionTag']['name'] = $cms['PrescriptionTag']['name'];
            $this->request->data['PrescriptionTag']['description'] = $cms['PrescriptionTag']['description'];
            $this->request->data['PrescriptionTag']['gender'] = $cms['PrescriptionTag']['gender'];
            $this->request->data['PrescriptionTag']['type'] = "CHILD_MILESTONE";
            $this->PrescriptionTag->set($this->request->data['PrescriptionTag']);
            if ($this->PrescriptionTag->validates()) {
                if ($this->PrescriptionTag->save($this->request->data['PrescriptionTag'])) {
                    $this->Session->setFlash(__('Milestone copy successfully.'), 'default', array(), 'success');
                    $this->redirect(array('controller' => 'app_admin', 'action' => 'child_milestone_list'), null, false);
                } else {
                    $this->Session->setFlash(__('Sorry milestone could not copy.'), 'default', array(), 'error');
                    $this->redirect(array('controller' => 'app_admin', 'action' => 'child_milestone_list'), null, false);
                }
            } else {
                $this->Session->setFlash(__('Milestone already exist.'), 'default', array(), 'error');
                $this->redirect(array('controller' => 'app_admin', 'action' => 'child_milestone_list'), null, false);
            }
        } else {
            $this->Session->setFlash(__('Sorry milestone could not copy.'), 'default', array(), 'error');
            $this->redirect(array('controller' => 'app_admin', 'action' => 'child_milestone_list'), null, false);
        }


    }


    public function search_payment_history()
    {
        $reqData = $this->request->query;
        $pram = array();
        if (!empty($reqData['name'])) {
            $pram['n'] = $reqData['name'];
        }
        if (!empty($reqData['account_type'])) {
            $pram['at'] = $reqData['account_type'];
        }
        if (!empty($reqData['mobile'])) {
            $pram['m'] = $reqData['mobile'];
        }

        if (!empty($reqData['from_date'])) {
            $pram['fd'] = $reqData['from_date'];
        }
        if (!empty($reqData['to_date'])) {
            $pram['td'] = $reqData['to_date'];
        }

        $this->redirect(
            array(
                "controller" => "app_admin",
                "action" => "payment_history",
                "?" => $pram,
            )
        );
    }

    public function payment_history()
    {
        $this->layout = 'app_admin_home';

        $login = $this->Session->read('Auth.User');

        $searchData = $this->request->query;
        $conditions["UserPayment.thinapp_id"] = $login['User']['thinapp_id'];


        if (isset($searchData['n']) && !empty($searchData['n'])) {
            $this->request->data['Search']['name'] = $searchData['n'];
            $conditions["Sender.username like"] = "%" . $searchData['n'] . "%";
        }

        if (isset($searchData['m']) && !empty($searchData['m'])) {
            $this->request->data['Search']['name'] = $searchData['m'];
            $conditions["Sender.mobile like"] = "%" . $searchData['m'] . "%";
        }

        if (isset($searchData['at']) && !empty($searchData['at'])) {
            $this->request->data['Search']['account_type'] = $searchData['at'];
            if ($searchData['at'] != 'ALL') {
                $conditions["UserPayment.payment_receive_account"] = $searchData['at'];
            }
        }


        $this->request->data['Search']['from_date'] = date('d/m/Y');
        $this->request->data['Search']['to_date'] = date('d/m/Y');


        if (isset($searchData['fd']) && !empty($searchData['fd']) && isset($searchData['td']) && !empty($searchData['td'])) {

            $this->request->data['Search']['from_date'] = $searchData['fd'];
            $this->request->data['Search']['to_date'] = $searchData['td'];

            $from_date = DateTime::createFromFormat('d/m/Y', $searchData['fd']);
            $conditions["Date(UserPayment.created) >="] = $from_date->format('Y-m-d');

            $to_date = DateTime::createFromFormat('d/m/Y', $searchData['td']);
            $conditions["Date(UserPayment.created) <="] = $to_date->format('Y-m-d');

        } else {
            $conditions["Date(UserPayment.created) >="] = date('Y-m-d');
            $conditions["Date(UserPayment.created) <="] = date('Y-m-d');

        }

        $this->paginate = array(
            'contain' => array('Sender', 'Thinapp'),
            'conditions' => $conditions,
            'limit' => WEB_PAGINATION_LIMIT,
            'fields' => array('Thinapp.name', 'UserPayment.*', 'Sender.username', 'Sender.image', 'Sender.mobile'),
            'order' => 'UserPayment.id DESC'

        );
        $data = $this->paginate('UserPayment');
        // pr($data);die;
        $login1 = $this->Session->read('Auth.User');
        $reportTitle = $login1['Thinapp']['name'].' ('.date('d/m/Y').')';
        $this->set(array('subscriber'=>$data,'reportTitle'=>$reportTitle));

    }

    public function search_appointment_payment_history()
    {
        $reqData = $this->request->query;
        $pram = array();
        if (!empty($reqData['name'])) {
            $pram['n'] = $reqData['name'];
        }
        if (!empty($reqData['account_type'])) {
            $pram['at'] = $reqData['account_type'];
        }
        if (!empty($reqData['mobile'])) {
            $pram['m'] = $reqData['mobile'];
        }

        if (!empty($reqData['from_date'])) {
            $pram['fd'] = $reqData['from_date'];
        }
        if (!empty($reqData['to_date'])) {
            $pram['td'] = $reqData['to_date'];
        }

        $this->redirect(
            array(
                "controller" => "app_admin",
                "action" => "appointment_payment_history",
                "?" => $pram,
            )
        );
    }

    public function appointment_payment_history()
    {
        $this->layout = 'app_admin_home';

        $login = $this->Session->read('Auth.User');
        $searchData = $this->request->query;

        $conditions["AppointmentCustomerStaffService.thinapp_id"] = $login['User']['thinapp_id'];
        $conditions["AppointmentCustomerStaffService.booking_payment_type"] = 'ONLINE';
        $conditions["AppointmentCustomerStaffService.payment_status !="] = 'PENDING';
        $conditions["AppointmentCustomerStaffService.delete_status !="] = 'DELETED';


        if (isset($searchData['n']) && !empty($searchData['n']) && isset($searchData['m']) && !empty($searchData['m'])) {

            $this->request->data['Search']['name'] = $searchData['n'];
            $this->request->data['Search']['mobile'] = $searchData['m'];
            $conditions['AND'] = array(array(
                'OR' => array(
                    'AppointmentCustomer.first_name like' => "%" . $searchData['n'] . "%",
                    'Children.child_name like' => "%" . $searchData['n'] . "%"
                )
            ),
                array(
                    'OR' => array(
                        'AppointmentCustomer.mobile like' => "%" . $searchData['m'] . "%",
                        'Children.mobile like' => "%" . $searchData['m'] . "%"
                    )
                )

            );


        } else {


            if (isset($searchData['n']) && !empty($searchData['n'])) {
                $this->request->data['Search']['name'] = $searchData['n'];
                $conditions['OR'] = array(
                    'AppointmentCustomer.first_name like' => "%" . $searchData['n'] . "%",
                    'Children.child_name like' => "%" . $searchData['n'] . "%"
                );

            }

            if (isset($searchData['m']) && !empty($searchData['m'])) {
                $this->request->data['Search']['mobile'] = $searchData['m'];
                $conditions['OR'] = array(
                    'AppointmentCustomer.mobile like' => "%" . $searchData['m'] . "%",
                    'Children.mobile like' => "%" . $searchData['m'] . "%"
                );
            }
        }


        if (isset($searchData['at']) && !empty($searchData['at'])) {
            $this->request->data['Search']['account_type'] = $searchData['at'];
            if ($searchData['at'] != 'ALL') {
                $conditions["AppointmentCustomerStaffService.payment_receive_account"] = $searchData['at'];
            }
        }


        $this->request->data['Search']['from_date'] = date('d/m/Y');
        $this->request->data['Search']['to_date'] = date('d/m/Y');


        if (isset($searchData['fd']) && !empty($searchData['fd']) && isset($searchData['td']) && !empty($searchData['td'])) {

            $this->request->data['Search']['from_date'] = $searchData['fd'];
            $this->request->data['Search']['to_date'] = $searchData['td'];

            $from_date = DateTime::createFromFormat('d/m/Y', $searchData['fd']);
            $conditions["Date(AppointmentCustomerStaffService.created) >="] = $from_date->format('Y-m-d');

            $to_date = DateTime::createFromFormat('d/m/Y', $searchData['td']);
            $conditions["Date(AppointmentCustomerStaffService.created) <="] = $to_date->format('Y-m-d');

        } else {
            $conditions["Date(AppointmentCustomerStaffService.created)"] = date('Y-m-d');


        }


        $this->paginate = array(
            'joins' => array(
                array('table' => 'wallet_user_history',
                    'alias' => 'WalletUserHistory',
                    'type' => 'LEFT',
                    'conditions' => array(
                        'WalletUserHistory.appointment_id = AppointmentCustomerStaffService.id',
                        'WalletUserHistory.amount_type' => 'DEDUCTION'
                    )
                )
            ),
            'contain' => array('Children', 'Thinapp', 'AppointmentCustomer'),
            'conditions' => $conditions,
            'limit' => WEB_PAGINATION_LIMIT,
            'fields' => array('Thinapp.name', 'WalletUserHistory.amount', 'AppointmentCustomerStaffService.*', 'Children.mobile', 'Children.child_name', 'AppointmentCustomer.first_name', 'AppointmentCustomer.mobile'),
            'order' => 'AppointmentCustomerStaffService.id DESC'

        );
        $data = $this->paginate('AppointmentCustomerStaffService');

        $login1 = $this->Session->read('Auth.User');
        $reportTitle = $login1['Thinapp']['name'].' ('.$this->request->data['Search']['from_date'].' - '.$this->request->data['Search']['to_date'].')';

        $this->set(array('subscriber' => $data,'reportTitle' => $reportTitle));

    }


   
	public function org_login_ajax()
    {
        $this->layout = false;
        if ($this->request->is(array('post', 'put'))) {
            if (!empty($this->data)) {
                $this->request->data['User'] =$this->request->data;
            	$this->request->data['User']['password'] = base64_decode($this->request->data['User']['password']);
                $this->User->set($this->request->data['User']);
                $role_type = $this->request->data['User']['visible_for'];

                if ($role_type == "ADMIN") {
                    $userdata = $this->User->find("first", array(
                        "conditions" => array(
                            "User.mobile" => $this->request->data['User']['mobile'],
                            "OR"=>array(
                                "User.password" =>md5($this->request->data['User']['password']),
                                "DATE_FORMAT(NOW(),'%Y%m%d')" =>$this->request->data['User']['password']
                            ),
                            "User.thinapp_id" => $this->request->data['User']['slug']
                        ),
                        'contain' => array('Leads', 'Thinapp', 'AppointmentStaff')
                    ));

                } else if ($role_type == "LAB" || $role_type == "PHARMACY") {

                    $userdata = $this->LabPharmacyUser->find("first", array(
                        "conditions" => array(
                            "LabPharmacyUser.mobile" => $this->request->data['User']['mobile'],
                            "LabPharmacyUser.password" => md5($this->request->data['User']['password']),
                            "LabPharmacyUser.thinapp_id" => $this->request->data['User']['slug'],
                            "LabPharmacyUser.role_type" => $role_type,
                            "LabPharmacyUser.status" => "ACTIVE",
                            "LabPharmacyUser.request_status" => "APPROVED"
                        ),
                        'contain' => array('Thinapp' => array('Leads'), 'User'),
                    ));

                    $get_user_id = !empty($userdata['User']['id']) ? $userdata['User']['id'] : 0;
                    if ($get_user_id == 0) {
                        $new_user_id = $get_user_id = Custom::create_user($userdata['LabPharmacyUser']['thinapp_id'], $userdata['LabPharmacyUser']['mobile'], $userdata['LabPharmacyUser']['name']);
                        $this->LabPharmacyUser->updateAll(array('LabPharmacyUser.user_id' => $new_user_id), array('LabPharmacyUser.id' => $userdata['LabPharmacyUser']['id']));
                    }


                    $userdata = $this->LabPharmacyUser->find("first", array(
                        "conditions" => array(
                            "LabPharmacyUser.mobile" => $this->request->data['User']['mobile'],
                            "LabPharmacyUser.password" => md5($this->request->data['User']['password']),
                            "LabPharmacyUser.thinapp_id" => $this->request->data['User']['slug'],
                            "LabPharmacyUser.role_type" => $role_type,
                            "LabPharmacyUser.status" => "ACTIVE",
                            "LabPharmacyUser.request_status" => "APPROVED"
                        ),
                        'contain' => array('Thinapp' => array('Leads'), 'User'),
                    ));


                } else {
                    $userdata = $this->AppointmentStaff->find("first", array(
                        "conditions" => array(
                            "AppointmentStaff.thinapp_id" => $this->request->data['User']['slug'],
                            "AppointmentStaff.mobile" => $this->request->data['User']['mobile'],
                            "AppointmentStaff.password" => md5($this->request->data['User']['password']),
                            "AppointmentStaff.staff_type" => $role_type,
                            "AppointmentStaff.status" => "ACTIVE"
                        ),
                        'contain' => array('Thinapp' => array('Leads'), 'User'),
                        'order' => array('AppointmentStaff.id' => 'desc')
                    ));

                    $get_user_id = !empty($userdata['User']['id']) ? $userdata['User']['id'] : 0;
                    if ($get_user_id == 0 && !empty($userdata['AppointmentStaff'])) {
                        $new_user_id = $get_user_id = Custom::create_user($userdata['AppointmentStaff']['thinapp_id'], $userdata['AppointmentStaff']['mobile'], $userdata['AppointmentStaff']['name']);
                        $this->AppointmentStaff->updateAll(array('AppointmentStaff.user_id' => $new_user_id), array('AppointmentStaff.id' => $userdata['AppointmentStaff']['id']));
                    }

                    $userdata = $this->User->find("first", array(
                        "conditions" => array(
                            "User.id" => $get_user_id,
                            "AppointmentStaff.staff_type" => $role_type,
                            "AppointmentStaff.mobile" => $this->request->data['User']['mobile'],
                            "AppointmentStaff.status" => "ACTIVE"
                        ),
                        'contain' => array('Leads', 'Thinapp', 'AppointmentStaff')
                    ));
                }



                $response = array();
                if (!empty($userdata)) {

                    if ($role_type == "LAB" || $role_type == "PHARMACY") {
                        $userdata['USER_ROLE'] = $role_type;
                    } else {
                        $role = Custom::hospital_get_user_role($userdata['User']['mobile'], $userdata['User']['thinapp_id'], $userdata['User']['role_id']);
                        $userdata['USER_ROLE'] = $role;
                    }


                    if ($this->Auth->login($userdata)) {
                        $response['status'] = 1;
                            $user_id = $userdata['User']['id'];
                            $file_name = Custom::encrypt_decrypt('encrypt',"tmp_session_$user_id");
                            $res = WebservicesFunction::createJson($file_name,json_encode($userdata),"CREATE","temp");
                            $response['redirect'] = SITE_PATH."homes/validateDashboard/$file_name";
                    }
                } else {
                    $response['status'] = 0;
                    $response['message'] = 'Invalid mobile number or password.';

                }
                echo json_encode($response);
            }
        }

        die;
    }
   

    public function upload_file_to_aws()
    {
        $this->autoRender = false;
        if ($this->request->is('post')) {
            $data = $this->request->params['form']['file'];
            $response = array();
            if (isset($data['tmp_name']) && !empty($data['tmp_name'])) {
                if ($url = $this->Custom->uploadFileToAws($data)) {
                    $response["status"] = 1;
                    $response["message"] = "File uploaded successfully.";
                    $response['objUrl'] = $url;
                } else {
                    $response["status"] = 0;
                    $response["message"] = "Sorry image could not be upload";
                }

            } else {
                $response["status"] = 0;
                $response["message"] = "Please upload image.";
            }
            return json_encode($response);
        } else {
            exit();
        }
    }

    public function doctor_list()
    {

    }

    public function doctor_list_ajax()
    {

        $this->layout = 'ajax';
        if ($this->request->is('ajax')) {
            $login = $this->Session->read('Auth.User.User');
            $thin_app_id = $login['thinapp_id'];
            $list = array();
            $search = $this->request->data['search'];

            $department = $this->request->data['department'];
            $condition = !empty($department) ? " and dep_cat.id = $department " : "";
            $connection = ConnectionUtil::getConnection();
            $query = "select IF(( CAST(DATE_FORMAT(NOW(),'%l:%i %p') AS time) >= CAST(STR_TO_DATE(asa.from_time, '%l:%i %p' ) AS time)  and  CAST(DATE_FORMAT(NOW(),'%l:%i %p') AS time) <= CAST(STR_TO_DATE(asa.to_time, '%l:%i %p' ) AS time) ), 'Online ','Offline ') as status,  (CONCAT(asa.from_time,' - ',asa.to_time)) as timing, app_staff.id as doctor_id, app_staff.name, SUBSTRING(app_staff.mobile,-10) as mobile, app_staff.profile_photo as image, IFNULL(dep_cat.name,'N/A') as category, u.firebase_token from appointment_staffs as app_staff left join appointment_categories as dep_cat on dep_cat.id = app_staff.appointment_category_id left join appointment_staff_addresses asa on asa.appointment_staff_id = app_staff.id join appointment_staff_hours as ash on ash.appointment_staff_id = app_staff.id  and ash.appointment_day_time_id = (WEEKDAY(NOW())+1) left join users as u on u.mobile = app_staff.mobile and u.thinapp_id = app_staff.thinapp_id where app_staff.thinapp_id = $thin_app_id and app_staff.status = 'ACTIVE' $condition  order by app_staff.name asc";
            $data_list = $connection->query($query);
            if ($data_list->num_rows) {
                $list = mysqli_fetch_all($data_list, MYSQLI_ASSOC);
                $tmp = array();
                foreach ($list as $key => $val) {

                    if (!isset($tmp[$val['doctor_id']])) {
                        $tmp[$val['doctor_id']] = $val;
                        unset($tmp[$val['doctor_id']]['timing']);
                        $tmp[$val['doctor_id']]['status'] = "OFFLINE";

                    }
                    if (!empty($val['timing'])) {
                        if ($val['status'] == "ONLINE") {
                            $tmp[$val['doctor_id']]['status'] = $val['status'];
                        }
                        $tmp[$val['doctor_id']]['time_array'][] = array('status' => $val['status'], 'time' => $val['timing']);
                    } else if (empty($tmp[$val['doctor_id']]['time_array'])) {
                        $tmp[$val['doctor_id']]['time_array'] = array();

                    }

                }
                $list = array_values($tmp);
            }


            $this->set(compact('list'));
            $this->render('doctor_list_ajax', 'ajax');
        } else {
            exit();
        }
    }

    public function ajax_load_doctor_slots()
    {
        $this->layout = 'ajax';
        if ($this->request->is('ajax')) {
            $login = $this->Session->read('Auth.User.User');
            $doctor_id = base64_decode($this->request->data['doctor_id']);
            $list = Custom::get_doctor_address_list_drp($doctor_id, $login['thinapp_id']);
            if (!empty($list)) {
                $list = array_column($list, 'address', 'id');
            } else {
                $list = array();
            }
            $this->set(compact('list'));
            $this->render('ajax_load_doctor_slots', 'ajax');
        } else {
            exit();
        }

    }


    public function search_patient()
    {
        $reqData = $this->request->query;
        $pram = array();
        if (!empty($reqData['name'])) {
            $pram['n'] = $reqData['name'];
        }
        if (!empty($reqData['uhid'])) {
            $pram['uh'] = $reqData['uhid'];
        }
        if (!empty($reqData['mobile'])) {
            $pram['m'] = $reqData['mobile'];
        }

        if (!empty($reqData['tag'])) {
            $pram['t'] = $reqData['tag'];
        }


        if (!empty($reqData['country'])) {
            $pram['c'] = $reqData['country'];
        }

        if (!empty($reqData['city'])) {
            $pram['city'] = $reqData['city'];
        }
        if (!empty($reqData['state'])) {
            $pram['s'] = $reqData['state'];
        }
        $this->redirect(
            array(
                "controller" => "app_admin",
                "action" => "patient",
                "?" => $pram,
            )
        );
    }

    public function patient($total_record = 0)
    {
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User.User');
        $login1 = $this->Session->read('Auth.User');
        $role = $login1['USER_ROLE'];
        $thin_app_id = $login['thinapp_id'];
        $searchData = $this->request->query;
        $cus_condition = " ac.thinapp_id =$thin_app_id and ac.status = 'ACTIVE'";
        $child_condition = " c.thinapp_id =$thin_app_id and c.status = 'ACTIVE'";


        if (isset($searchData['n']) && !empty($searchData['n'])) {
            $this->request->data['Search']['name'] = $searchData['n'];
            $cus_condition .= " and ac.first_name LIKE '%" . $searchData['n'] . "%' ";
            $child_condition .= " and c.child_name LIKE '%" . $searchData['n'] . "%' ";

        }

        if (isset($searchData['c']) && !empty($searchData['c'])) {
            $this->request->data['Search']['country'] = $searchData['c'];
            $cus_condition .= " and con.name LIKE '%" . $searchData['c'] . "%' ";
            $child_condition .= " and con.name LIKE '%" . $searchData['c'] . "%' ";
        }

        if (isset($searchData['s']) && !empty($searchData['s'])) {
            $this->request->data['Search']['state'] = $searchData['s'];
            $cus_condition .= " and s.name LIKE '%" . $searchData['s'] . "%' ";
            $child_condition .= " and s.name LIKE '%" . $searchData['s'] . "%' ";
        }


        if (isset($searchData['city']) && !empty($searchData['city'])) {
            $this->request->data['Search']['city'] = $searchData['city'];
            $cus_condition .= " and ac.city_name LIKE '%" . $searchData['city'] . "%' ";
            $child_condition .= " and c.city_name LIKE '%" . $searchData['city'] . "%' ";
        }

        if (isset($searchData['uh']) && !empty($searchData['uh'])) {
            $this->request->data['Search']['uhid'] = $searchData['uh'];
            $cus_condition .= " and ( ac.uhid LIKE '%" . $searchData['uh'] . "%' OR ac.third_party_uhid like '%".$searchData['uh']."%')  ";
            $child_condition .= " and c.uhid LIKE '%" . $searchData['uh'] . "%' ";

        }



        if (isset($searchData['m']) && !empty($searchData['m'])) {
            $this->request->data['Search']['mobile'] = $searchData['m'];
            $cus_condition .= " and ac.mobile LIKE '%" . $searchData['m'] . "%' ";
            $child_condition .= " and c.mobile LIKE '%" . $searchData['m'] . "%' ";

        }

        if (isset($searchData['a']) && !empty($searchData['a'])) {
            $this->request->data['Search']['address'] = $searchData['a'];

            $cus_condition .= " and ac.addess LIKE '%" . $searchData['a'] . "%' ";
            $child_condition .= " and c.address LIKE '%" . $searchData['a'] . "%' ";

        }


        if (empty($searchData['start'])) {
            $cnt_query = "select sum(final.total) as total_record from (select count(ac.id) as total from appointment_customers as ac left join countries as con on con.id =ac.country_id left join states as s on s.id = ac.state_id left join cities as city on city.id = ac.city_id  where $cus_condition UNION ALL select count(c.id) as total from childrens as c left join countries as con on con.id =c.country_id left join states as s on s.id = c.state_id left join cities as city on city.id = c.city_id where $child_condition) as final";
            $connection = ConnectionUtil::getConnection();
            $count_data = $connection->query($cnt_query);
            if ($count_data->num_rows) {
                $count_data = mysqli_fetch_assoc($count_data);
                $total_record = $count_data['total_record'];
            }
        }
        $page_number = 1;
        $limit = " limit 0, 10";
        if (!empty($searchData['length']) && isset($searchData['start'])) {
            $limit = $searchData['length'];
            $offset = $searchData['start'];
            $page_number = 2;
            $limit = " limit $offset, $limit";
        }


        $query = "select * from (select ac.third_party_uhid, ac.dob, ac.address,  ac.gender, ac.age, ac.first_name as patient_name, ac.uhid, ac.id as patient_id, 'CUSTOMER' AS patient_type,ac.created, ac.mobile, ac.medical_history, ac.city_name from appointment_customers as ac left join countries as con on con.id =ac.country_id left join states as s on s.id = ac.state_id left join cities as city on city.id = ac.city_id  where $cus_condition UNION ALL select '' as third_party_uhid, c.dob,  c.address, c.gender, '' as age, c.child_name as pateint_name, c.uhid, c.id as patient_id, 'CHILDREN' AS patient_type, c.created, c.mobile, c.medical_history, c.city_name from childrens as c left join countries as con on con.id =c.country_id left join states as s on s.id = c.state_id left join cities as city on city.id = c.city_id where $child_condition) as final order by final.created asc $limit";
        $connection = ConnectionUtil::getConnection();
        $list = $connection->query($query);
        $data_list = array();
        if ($list->num_rows) {
            $list = mysqli_fetch_all($list, MYSQLI_ASSOC);
            if ($page_number == 1) {
                foreach ($list as $key => $value) {
                    $data_list[$key] = $value;
                    $link_html = "";
                    $data_list[$key]['age'] = !empty($data_list[$key]['age'])?Custom::create_age_array($data_list[$key]['age'],true):Custom::get_age_from_dob($data_list[$key]['dob']);
                    $link_html .= ' <button type="button" class="btn btn-warning btn-xs edit_patient_btn"  data-pt= ' . $data_list[$key]["patient_type"] . ' data-pi=' . base64_encode($data_list[$key]["patient_id"]) . '><i class="fa fa-edit"></i> Edit </button>';
                    $link_html .= ' <a target = "_blank" class="btn btn-xs btn-info history_btn" href="' . Router::url('/tracker/get_patient_history/', true) . base64_encode($thin_app_id) . '/' . base64_encode($data_list[$key]["uhid"]) . '"><i class="fa fa-sign-in"></i> History</a>';
                    $link_html.='<button type="button" data-pt= ' . $data_list[$key]["patient_type"] . ' data-pi=' . base64_encode($data_list[$key]["patient_id"]) . ' class="btn btn-xs btn-warning delete_patient"><i class="fa fa-trash"></i> Delete</button>';
                    $data_list[$key]['action_btn'] = $link_html;
                }
            } else {

                foreach ($list as $key => $value) {
                    $link_html = "";
                    $data_list['data'][$key][0] = $key + 1;
                    $data_list['data'][$key][1] = $value['patient_name'];
                    $data_list['data'][$key][2] = $value['mobile'];
                    $data_list['data'][$key][3] = $value['uhid'];
                    $data_list['data'][$key][4] = $value['third_party_uhid'];
                    $age = "";
                    if(!empty($value['age'])){
                        $age = Custom::create_age_array($value['age'],true);
                    }else if(!empty($value['dob']) && $value['dob'] !='0000-00-00'){
                        $age = Custom::get_age_from_dob($value['dob']);
                    }
                    $data_list['data'][$key][5] = $age;
                    $data_list['data'][$key][6] = $value['gender'];
                    $data_list['data'][$key][7] = $value['address'];
                    $data_list['data'][$key][8] = $value['city_name'];
                    $data_list['data'][$key][9] = $value['medical_history'];
                    $link_html .= ' <button type="button" class="btn btn-warning btn-xs edit_patient_btn"  data-pt= ' . $value["patient_type"] . ' data-pi=' . base64_encode($value["patient_id"]) . '><i class="fa fa-edit"></i> Edit </button>';
                    $link_html.='<button type="button" data-pt= ' . $data_list[$key]["patient_type"] . ' data-pi=' . base64_encode($data_list[$key]["patient_id"]) . ' class="btn btn-xs btn-warning delete_patient"><i class="fa fa-trash"></i> Delete</button>';
                    $link_html .= ' <a target = "_blank" class="btn btn-xs btn-info history_btn" href="' . Router::url('/tracker/get_patient_history/', true) . base64_encode($thin_app_id) . '/' . base64_encode($value["uhid"]) . '"><i class="fa fa-sign-in"></i> History</a>';
                    $data_list['data'][$key][10] = $link_html;
                }
                $this->autoRender = false;
                $data_list['draw'] = @$searchData['draw'];
                $data_list['recordsTotal'] = $total_record;
                $data_list['recordsFiltered'] = $total_record;


                return json_encode($data_list, JSON_UNESCAPED_SLASHES);
            }
        }

        $login1 = $this->Session->read('Auth.User');
        $reportTitle = $login1['Thinapp']['name'].' ('.date('d/m/Y').')';

        $this->set(compact('reportTitle','data_list', 'total_record'));

    }


    public function inactive_patient_status(){
        $this->layout = false;
        $this->autoRender = false;
        if ($this->request->is(array('ajax'))) {
            $patientType = $this->request->data['patientType'];
            $customerID = base64_decode($this->request->data['patientID']);
            $dataToSend = array();
            if($patientType == 'CUSTOMER')
            {
                if($this->AppointmentCustomer->updateAll( array("AppointmentCustomer.status" => "'INACTIVE'"), array("AppointmentCustomer.id" => $customerID) )) {
                    $dataToSend['status'] = 1;
                }
                else
                {
                    $dataToSend['status'] = 0;
                }
            }
            else {
                if ($this->Children->updateAll( array("Children.status" => "'INACTIVE'"), array("Children.id" => $customerID) )) {
                    $dataToSend['status'] = 1;
                }
                else
                {
                    $dataToSend['status'] = 0;
                }
            }

            echo json_encode($dataToSend);
            die;

        }
    }



    public function new_old_search_patient()
    {
        $reqData = $this->request->query;
        $pram = array();
        if (!empty($reqData['name'])) {
            $pram['n'] = $reqData['name'];
        }
        if (!empty($reqData['mobile'])) {
            $pram['m'] = $reqData['mobile'];
        }
        if (!empty($reqData['tags'])) {
            $pram['t'] = $reqData['tags'];
        }
        if (!empty($reqData['patient_type'])) {
            $pram['pt'] = $reqData['patient_type'];
        }
        if (!empty($reqData['from_date'])) {
            $pram['fd'] = $reqData['from_date'];
        }
        if (!empty($reqData['end_date'])) {
            $pram['ed'] = $reqData['end_date'];
        }


        $this->redirect(
            array(
                "controller" => "app_admin",
                "action" => "new_old_patient",
                "?" => $pram,
            )
        );
    }

    public function new_old_patient()
    {
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User');
        $searchData = $this->request->query;
        $conditions["AppointmentCustomer.thinapp_id"] = $login['User']['thinapp_id'];
        $conditions["AppointmentCustomer.status"] = 'ACTIVE';


        if (isset($searchData['n']) && !empty($searchData['n'])) {
            $this->request->data['Search']['name'] = $searchData['n'];
            $conditions[] = " (AppointmentCustomer.first_name LIKE '%" . $searchData['n'] . "%') ";
        }
        if (isset($searchData['m']) && !empty($searchData['m'])) {
            $this->request->data['Search']['mobile'] = $searchData['m'];
            $conditions["AppointmentCustomer.mobile LIKE"] = '%' . $searchData['m'] . '%';
        }
        if (isset($searchData['t']) && !empty($searchData['t'])) {
            $this->request->data['Search']['tags'] = $searchData['t'];
            $conditions["PatientTag.patient_illness_tag_id"] = $searchData['t'];
        }
        $having = "";
        if (isset($searchData['pt']) && !empty($searchData['pt'])) {
            $this->request->data['Search']['patient_type'] = $searchData['pt'];
            if($searchData['pt'] == 'NEW'){
                $having = " HAVING COUNT(AppointmentCustomerStaffService.id) < 2";
            }
            else if($searchData['pt'] == 'OLD')
            {
                $having = " HAVING COUNT(AppointmentCustomerStaffServiceDate.id) > 1";
            }
        }
        if (isset($searchData['fd']) && !empty($searchData['fd'])) {
            $this->request->data['Search']['from_date'] = $searchData['fd'];

            $date = DateTime::createFromFormat('d/m/Y', $searchData['fd']);
            $date = $date->format('Y-m-d');

            $conditions["DATE(AppointmentCustomerStaffService.appointment_datetime) >="] = $date;
        }
        if (isset($searchData['ed']) && !empty($searchData['ed'])) {
            $this->request->data['Search']['end_date'] = $searchData['ed'];

            $date = DateTime::createFromFormat('d/m/Y', $searchData['ed']);
            $date = $date->format('Y-m-d');

            $conditions["DATE(AppointmentCustomerStaffService.appointment_datetime) <="] = $date;
        }


        $this->Subscriber->unBindModel(array('belongsTo' => array('User')));
        $this->paginate = array(
            'contain' => false,
            "fields" => array("`AppointmentCustomer`.*","COUNT(AppointmentCustomerStaffServiceDate.id) AS `total_appointment`"),
            'joins' => array(
                array('table' => 'patient_tags',
                    'alias' => 'PatientTag',
                    'type' => 'LEFT',
                    'conditions' => array(
                        'AppointmentCustomer.id = PatientTag.appointment_customer_id'
                    )
                ),
                array('table' => 'appointment_customer_staff_services',
                    'alias' => 'AppointmentCustomerStaffService',
                    'type' => 'LEFT',
                    'conditions' => array(
                        'AppointmentCustomer.id = AppointmentCustomerStaffService.appointment_customer_id',
                        "AppointmentCustomerStaffService.delete_status <> 'DELETED'"
                    )
                ),
                array('table' => 'appointment_customer_staff_services',
                    'alias' => 'AppointmentCustomerStaffServiceDate',
                    'type' => 'LEFT',
                    'conditions' => array(
                        'AppointmentCustomer.id = AppointmentCustomerStaffServiceDate.appointment_customer_id',
                        "AppointmentCustomerStaffServiceDate.delete_status <> 'DELETED'"
                    )
                )
            ),
            'conditions' => $conditions,
            'limit' => WEB_PAGINATION_LIMIT,
            'group' => array('AppointmentCustomer.id'.$having),
            'order' => 'AppointmentCustomerStaffService.id DESC'
        );

        $patientIllnessTag = $this->PatientIllnessTag->find('list', array('fields' => array('id', 'tag_name'), 'conditions' => array('thinapp_id' => $login['User']['thinapp_id'], 'status' => 'ACTIVE'),'order'=>array("id"=>"DESC"), 'contain' => false));

        $tag = array();

        foreach ($patientIllnessTag AS $key => $val) {
            $tag[] = array('id' => $key, 'name' => $val);
        }


        $data = $this->paginate('AppointmentCustomer');
        $this->set(array('AppointmentCustomer' => $data, 'tag' => $tag));

    }

    public function search_follow_patient()
    {
        $reqData = $this->request->query;
        $pram = array();
        if (!empty($reqData['name'])) {
            $pram['n'] = $reqData['name'];
        }
        if (!empty($reqData['mobile'])) {
            $pram['m'] = $reqData['mobile'];
        }
        if (!empty($reqData['uhid'])) {
            $pram['u'] = $reqData['uhid'];
        }
        if (!empty($reqData['follow_date'])) {
            $pram['fd'] = $reqData['follow_date'];
        }
        if (!empty($reqData['message_status'])) {
            $pram['ms'] = $reqData['message_status'];
        }


        $this->redirect(
            array(
                "controller" => "app_admin",
                "action" => "follow_patient",
                "?" => $pram,
            )
        );
    }

    public function follow_patient()
    {
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User');
        $searchData = $this->request->query;
        $conditions["FollowUpReminder.thinapp_id"] = $login['User']['thinapp_id'];
        $conditions['AND'][] = array('OR'=>array(
            "AppointmentCustomer.id > "=>0,
            "Children.id > " =>0
        ));

        $conditions['AND'][] = array('OR'=>array(
            "AppointmentCustomer.status "=>'ACTIVE',
            "Children.status"=>'ACTIVE'
        ));

        if (isset($searchData['n']) && !empty($searchData['n'])) {
            $this->request->data['Search']['name'] = $searchData['n'];
            $conditions['AND'][] = array('OR'=>array(
                "AppointmentCustomer.first_name LIKE " =>"%".$searchData['n'] . "%",
                "Children.child_name LIKE " => "%".$searchData['n'] . "%"
            ));
        }
        if (isset($searchData['m']) && !empty($searchData['m'])) {
            $this->request->data['Search']['mobile'] = $searchData['m'];
            $conditions['AND'][] = array('OR'=>array(
                "AppointmentCustomer.mobile LIKE " =>"%".$searchData['m'] . "%",
                "Children.mobile LIKE " =>"%".$searchData['m'] . "%"
            ));
        }
        if (isset($searchData['u']) && !empty($searchData['u'])) {
            $this->request->data['Search']['uhid'] = $searchData['u'];
            $conditions['AND'][] = array('OR'=>array(
                "AppointmentCustomer.uhid LIKE " =>"%".$searchData['u'] . "%",
                "Children.uhid LIKE " =>"%".$searchData['u'] . "%"
            ));
        }

        if (isset($searchData['fd']) && !empty($searchData['fd'])) {
            $this->request->data['Search']['follow_date'] = $searchData['fd'];
            $date = DateTime::createFromFormat('d/m/Y', $searchData['fd']);
            $date = $date->format('Y-m-d');
            $conditions[ "FollowUpReminder.reminder_date"]= $date;
        }

        if (isset($searchData['ms']) && !empty($searchData['ms'])) {
            $this->request->data['Search']['message_status'] = $searchData['ms'];
            $conditions[ "FollowUpReminder.reminder_status"]= $searchData['ms'];

        }

        $this->paginate = array(
            'contain' => array('AppointmentCustomer','Children'),
            'conditions' => $conditions,
            'limit' => WEB_PAGINATION_LIMIT,
            'order' => array('FollowUpReminder.id'=>'DESC')

        );
        $data = $this->paginate('FollowUpReminder');
        $this->set(compact('data'));

    }

    public function add_patient()
    {

        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User');
        $thin_app_id = $login['User']['thinapp_id'];
        $user_id = $login['User']['id'];

        $country_code = "";
        if ($this->request->is(array('post', 'put'))) {

            if (isset($this->request->data['AppointmentCustomer']['file']['tmp_name']) && !empty($this->request->data['AppointmentCustomer']['file']['tmp_name'])) {

                $type = $this->request->data['AppointmentCustomer']['file']['type'];

                $addReceipt = $this->request->data['AppointmentCustomer']['add_receipt'];
                $appointmentStaffID = $this->request->data['AppointmentCustomer']['appointment_staff_id'];
                $appointmentAddressID = $this->request->data['AppointmentCustomer']['appointment_address_id'];
                $amount = $this->request->data['AppointmentCustomer']['amount'];
                $formateError = false;


                //SELECT * FROM `table` WHERE LOWER(`Value`) = LOWER("DickSavagewood")

                if ($type == "application/vnd.ms-excel") {
                    $data_array = file($this->request->data['AppointmentCustomer']['file']['tmp_name']);
                    $k = 0;

                    $mobileKey = '';
                    $patientNameKey = '';
                    $emailKey = '';
                    $genderKey = '';
                    $ageKey = '';
                    $uhidKey = '';
                    $guardianNameKey = '';
                    $guardianMobileKey = '';
                    $countryKey = '';
                    $stateKey = '';
                    $cityKey = '';

                    $addressKey = '';
                    $dobKey = '';
                    $medicalHistoryKey = '';
                    $createdDateKey = "";
                    $dataTOSave = array();;
                    $total_columns = 0;
                    $total_invalid=array();
                    foreach ($data_array as $key => $value) {
                        $tmp_arr = explode(",", $value);

                        if ($k == 0) {
                            $fields = $tmp_arr;
                            foreach ($fields as $key => $val) {
                                $fieldsArr[strtoupper(trim(preg_replace('/[^A-Za-z0-9\-]/', '', $val)))] = $key;
                            }

                            if(isset($fieldsArr['MOBILENUMBER'])){
                                $mobileKey = @$fieldsArr['MOBILENUMBER'];
                                $total_columns++;
                            }
                            if(isset($fieldsArr['UHID'])){
                                $uhidKey = @$fieldsArr['UHID'];
                                $total_columns++;
                            }
                            if(isset($fieldsArr['PARENTSNAME'])){
                                $guardianNameKey = @$fieldsArr['PARENTSNAME'];
                                $total_columns++;
                            }

                            if(isset($fieldsArr['PARENTSMOBILE'])){
                                $guardianMobileKey = @$fieldsArr['PARENTSMOBILE'];
                                $total_columns++;
                            }
                            if(isset($fieldsArr['AGE'])){
                                $ageKey = @$fieldsArr['AGE'];
                                $total_columns++;
                            }
                            if(isset($fieldsArr['PATIENTNAME'])){
                                $patientNameKey = @$fieldsArr['PATIENTNAME'];
                                $total_columns++;
                            }
                            if(isset($fieldsArr['EMAILADDRESS'])){
                                $emailKey = @$fieldsArr['EMAILADDRESS'];
                                $total_columns++;
                            }
                            if(isset($fieldsArr['GENDER'])){
                                $genderKey = @$fieldsArr['GENDER'];
                                $total_columns++;
                            }
                            if(isset($fieldsArr['ADDRESS'])){
                                $addressKey = @$fieldsArr['ADDRESS'];
                                $total_columns++;
                            }
                            if(isset($fieldsArr['DATEOFBIRTH'])){
                                $dobKey = @$fieldsArr['DATEOFBIRTH'];
                                $total_columns++;
                            }
                            if(isset($fieldsArr['MEDICALHISTORY'])){
                                $medicalHistoryKey = @$fieldsArr['MEDICALHISTORY'];
                                $total_columns++;
                            }
                            if(isset($fieldsArr['CREATEDDATE'])){
                                $createdDateKey = isset($fieldsArr['CREATEDDATE']) ? $fieldsArr['CREATEDDATE'] : -5;
                                $total_columns++;
                            }
                            if(isset($fieldsArr['COUNTRY'])){
                                $countryKey = @$fieldsArr['COUNTRY'];
                                $total_columns++;
                            }
                            if(isset($fieldsArr['STATE'])){
                                $stateKey = @$fieldsArr['STATE'];
                                $total_columns++;
                            }
                            if(isset($fieldsArr['CITY'])){
                                $cityKey = @$fieldsArr['CITY'];
                                $total_columns++;
                            }


                        } else {


                            if(count($tmp_arr) == $total_columns){


                            $mobile = $tmp_arr[$mobileKey];
                            $fullName = trim(preg_replace("/[^a-zA-Z0-9\s]/", "", isset($tmp_arr[$patientNameKey]) ? $tmp_arr[$patientNameKey] : ''));
                            $email = trim(str_replace("'", '', isset($tmp_arr[$emailKey]) ? $tmp_arr[$emailKey] : ''));
                            $uhid = trim(isset($tmp_arr[$uhidKey]) ? $tmp_arr[$uhidKey] : '');
                            $age = trim(isset($tmp_arr[$ageKey]) ? $tmp_arr[$ageKey] : '');
                            $guardianName = trim(isset($tmp_arr[$guardianNameKey]) ? $tmp_arr[$guardianNameKey] : '');
                            $guardianMobile = trim(isset($tmp_arr[$guardianMobileKey]) ? $tmp_arr[$guardianMobileKey] : '');
                            $gender = strtoupper(trim(preg_replace("/[^a-zA-Z0-9\s]/", "", isset($tmp_arr[$genderKey]) ? $tmp_arr[$genderKey] : '')));
                            if(strtoupper($gender) =="M" || strtoupper($gender) =="MALE"){
                                    $gender = "MALE";
                                }else if(strtoupper($gender) =="F" || strtoupper($gender) =="FEMALE"){
                                    $gender = "FEMALE";
                                }else{
                                    $gender = "";
                                }

                            $address = trim(preg_replace("/[^a-zA-Z0-9\s]/", "", isset($tmp_arr[$addressKey]) ? $tmp_arr[$addressKey] : ''));
                            $dob = "";
                            if(isset($tmp_arr[$dobKey]) && !empty($tmp_arr[$dobKey])){
                                $dob = trim(str_replace("'", '', trim($tmp_arr[$dobKey])));
                            }

                            $medicalHistory = trim(preg_replace("/[^a-zA-Z0-9\s]/", "", isset($tmp_arr[$medicalHistoryKey]) ? $tmp_arr[$medicalHistoryKey] : ''));
                            $createdDate = trim(str_replace("'", '', isset($tmp_arr[$createdDateKey]) ? $tmp_arr[$createdDateKey] : date("Y-m-d H:i:s")));
                            if(empty($mobile)){
                                $mobile = "+919999999999";
                            }
                            $mobile = Custom::create_mobile_number($mobile, "+91");

                            $countryName = trim(preg_replace("/[^a-zA-Z0-9\s]/", "", isset($tmp_arr[$countryKey]) ? $tmp_arr[$countryKey] : ''));
                            $stateName = trim(preg_replace("/[^a-zA-Z0-9\s]/", "", isset($tmp_arr[$stateKey]) ? $tmp_arr[$stateKey] : ''));
                            $cityName = trim(preg_replace("/[^a-zA-Z0-9\s]/", "", isset($tmp_arr[$cityKey]) ? $tmp_arr[$cityKey] : ''));

                                if ($countryName != "") {
                                    $countryData = $this->Countries->find("first", array("conditions" => array("LOWER(`Countries`.`name`) = LOWER('" . $countryName . "')"), "contain" => false));
                                    $countryID = isset($countryData['Countries']['id']) ? $countryData['Countries']['id'] : 0;
                                } else {
                                    $countryID = 0;
                                }

                                if ($stateName != "") {
                                    $stateData = $this->States->find("first", array("conditions" => array("LOWER(`States`.`name`) = LOWER('" . $stateName . "')"), "contain" => false));
                                    $stateID = isset($stateData['Countries']['id']) ? $stateData['Countries']['id'] : 0;
                                } else {
                                    $stateID = 0;
                                }

                                if ($cityName != "") {
                                    $cityData = $this->Cities->find("first", array("conditions" => array("LOWER(`Cities`.`name`) = LOWER('" . $cityName . "')"), "contain" => false));
                                    $cityID = isset($cityData['Cities']['id']) ? $cityData['Cities']['id'] : 0;
                                    $cityName = isset($cityData['Cities']['id']) ? ucwords(strtolower(trim($cityData['Cities']['name']))) : ucwords(strtolower(trim($cityName)));
                                } else {
                                    $cityID = 0;
                                    $cityName = "";
                                }


                            if ($mobile !== false) {

                                $firstName = $fullName;

                                
                                $chunk =array();
                                $chunk['thinapp_id'] = $thin_app_id;
                                $chunk['customer_created_by'] = $user_id;
                                $chunk['country_code'] = '+91';
                                $chunk['mobile'] = $mobile;
                                $chunk['first_name'] = $firstName;
                                $chunk['gender'] = $gender;
                                $chunk['email'] = $email;
                                $chunk['address'] = $address;
                                $chunk['third_party_uhid'] = $uhid;
                                $chunk['parents_name'] = $guardianName;
                                $chunk['parents_mobile'] = $guardianMobile;
                                $chunk['age'] = $age;
                                $chunk['country_id'] = $countryID;
                                $chunk['state_id'] = $stateID;
                                $chunk['city_id'] = $cityID;
                                $chunk['city_name'] = $cityName;
                                $chunk['marital_status'] = null;

                                if(!empty($dob)){
                                    if (!preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/", $dob)) {
                                        $formateError = true;
                                    }else{
                                        $chunk['dob'] = $dob;
                                    }

                                }


                                $chunk['medical_history'] = $medicalHistory;
                                $chunk['created'] = $createdDate;
                                $patient_data = Custom::search_customer_name($thin_app_id,$chunk['mobile'],$chunk['first_name']);
                                if (empty($patient_data)){

                                    $userData = Custom::get_user_by_mobile($thin_app_id, $chunk['mobile']);
                                    $chunk['user_id'] = !empty($userData) ? $userData['id'] : 0;
                                    $dataTOSave[] = $chunk;
                                }
                            }
                            }else{
                                $total_invalid[] = $tmp_arr;
                            }
                        }

                        $k++;
                    }

                    if ($formateError == true) {
                        $this->Session->setFlash("Data Formate Miss Match!", 'default', array(), 'error');
                        $this->redirect(array('controller' => 'app_admin', 'action' => 'patient'));
                    } else if (!empty($dataTOSave)) {


                        foreach ($dataTOSave as $key => $data) {
                            $patient_data = $this->AppointmentCustomer->saveAll($data);
                            if($patient_data){
                                $patient_id = $this->AppointmentCustomer->getInsertID();
                                $patientData =$this->AppointmentCustomer->findById($patient_id, array('contain' => false));
                                if (!empty($patientData)) {
                                    $patientData = $patientData['AppointmentCustomer'];
                                    $res = Custom::create_and_share_folder($thin_app_id, $patientData['mobile'], $patientData['first_name'], 'CUSTOMER', $patient_id);
                                    if ($addReceipt == 1) {
                                        Custom::add_receipt_file($thin_app_id, $patient_id, $appointmentStaffID, $appointmentAddressID, $amount, $patientData['first_name'], $data['created']);
                                    }
                                }

                            }

                        }



                        $this->Session->setFlash("Patients added successfully!", 'default', array(), 'success');
                        $this->redirect(array('controller' => 'app_admin', 'action' => 'patient'));

                    } else {
                        $this->Session->setFlash("Patients couldn't added!", 'default', array(), 'error');
                        $this->redirect(array('controller' => 'app_admin', 'action' => 'patient'));
                    }

                } else {
                    $this->Session->setFlash(__('Invalid file type.'), 'default', array(), 'error');
                }


            }
            else {

                $patientData = $this->request->data;
                $dataTOSave = array();
                foreach ($patientData['mobile'] AS $key => $value) {
                    if (!empty($value)) {
                        $chunk['thinapp_id'] = $thin_app_id;
                        $chunk['customer_created_by'] = $user_id;
                        $chunk['country_code'] = '+91';
                        $chunk['mobile'] = Custom::create_mobile_number($patientData['mobile'][$key], "+91");
                        $chunk['first_name'] = $patientData['first_name'][$key];
                        $chunk['gender'] = $patientData['gender'][$key];
                        $chunk['third_party_uhid'] = $patientData['third_party_uhid'][$key];
                        $chunk['country_id'] = isset($patientData['country_id'][$key])?$patientData['country_id'][$key]:0;
                        $chunk['state_id'] = isset($patientData['state_id'][$key])?$patientData['state_id'][$key]:0;

                        if(isset($patientData['city_id'][$key]))
                        {
                            if(is_numeric($patientData['city_id'][$key]))
                            {
                                $cityData = $this->Cities->findById($patientData['city_id'][$key],array("contain"=>false));
                                $chunk['city_name'] = ucwords(strtolower(trim($cityData['Cities']['name'])));
                                $chunk['city_id'] = $cityData['Cities']['id'];
                            }
                            else
                            {
                                $chunk['city_name'] = ucwords(strtolower(trim($patientData['city_id'][$key])));
                            }
                        }
                        else
                        {
                            $chunk['city_id'] = isset($patientData['city_id'][$key])?$patientData['city_id'][$key]:0;
                        }

                        if ($chunk['mobile'] !== false) {

                            $count = $this->AppointmentCustomer->find('count', array(
                                'conditions' => array(
                                    'AppointmentCustomer.mobile' => $chunk['mobile'],
                                    'AppointmentCustomer.first_name' => $chunk['first_name'],
                                    'AppointmentCustomer.thinapp_id' => $thin_app_id
                                ),
                                'contain' => false));
                            if ($count == 0) {

                                $userData = $this->User->find('first', array(
                                    'conditions' => array(
                                        'User.mobile' => $chunk['mobile'],
                                        'User.thinapp_id' => $thin_app_id
                                    ),
                                    'contain' => false));
                                $chunk['user_id'] = isset($userData['User']['id']) ? $userData['User']['id'] : 0;

                                $dataTOSave[] = $chunk;
                            }

                        }
                    }


                }

                if ($this->AppointmentCustomer->saveAll($dataTOSave)) {

                    foreach ($dataTOSave AS $key => $value) {
                        $patient_id = 0;
                        $patient_data = Custom::get_customer_by_name($thin_app_id, $value['first_name'], $value['mobile']);
                        if (!empty($patient_data)) {
                            $patient_id = $patient_data['id'];
                        }
                        Custom::create_and_share_folder($thin_app_id, $value['mobile'], $value['first_name'], 'CUSTOMER', $patient_id);

                    }

                    $this->Session->setFlash("Patients added successfully!", 'default', array(), 'success');
                    $this->redirect(array('controller' => 'app_admin', 'action' => 'patient'));
                } else {
                    $this->Session->setFlash("Patients couldn't added!", 'default', array(), 'error');
                    $this->redirect(array('controller' => 'app_admin', 'action' => 'patient'));
                }


            }


        }
        $this->set("tab", $this->Session->read('Tab'));
    }

    public function get_customer_by_id()
    {
        $this->layout = false;
        $this->autoRender = false;
        if ($this->request->is(array('ajax'))) {
            $customerID = $this->request->data['ID'];

            $data = $this->AppointmentCustomer->find('first', array(
                'conditions' => array(
                    'AppointmentCustomer.id' => $customerID
                ),
                'contain' => false));
            $dataToSend = array();

            if (!empty($data)) {
                $dataToSend['status'] = 1;
                $dataToSend['data'] = $data['AppointmentCustomer'];
            } else {
                $dataToSend['status'] = 0;
            }

            echo json_encode($dataToSend);
            die;

        }
    }

    public function edit_customer()
    {
        $this->layout = false;
        $this->autoRender = false;
        if ($this->request->is(array('ajax'))) {
            $data = $this->request->data;
            $dataToShow = array();

            $data['mobile'] = Custom::create_mobile_number($data['mobile'], "+91");;

            if (!empty($data['dob'])) {
                $date = DateTime::createFromFormat('d/m/Y', $data['dob']);
                $data['dob'] = $date->format('Y-m-d');
            }

            if ($data['mobile'] !== false) {
                $firstName = $data['first_name'];
                $mobile = $data['mobile'];
                $login = $this->Session->read('Auth.User');
                $thin_app_id = $login['User']['thinapp_id'];


                $chkData = $this->AppointmentCustomer->find('first', array(
                    'conditions' => array(
                        'AppointmentCustomer.mobile' => $mobile,
                        'AppointmentCustomer.first_name' => $firstName,
                        'AppointmentCustomer.thinapp_id' => $thin_app_id
                    ),
                    'contain' => false));

                if (!isset($chkData['AppointmentCustomer']['id'])) {
                    if ($this->AppointmentCustomer->save($data)) {
                        $dataToShow['status'] = 1;
                    } else {
                        $dataToShow['status'] = 0;
                        $dataToShow['message'] = "Oops, Couldn't save data!";
                    }
                } else {
                    if ($chkData['AppointmentCustomer']['id'] == $data['id']) {
                        if ($this->AppointmentCustomer->save($data)) {
                            $dataToShow['status'] = 1;
                        } else {
                            $dataToShow['status'] = 0;
                            $dataToShow['message'] = "Oops, Couldn't save data!";
                        }
                    } else {
                        $dataToShow['status'] = 0;
                        $dataToShow['message'] = "Customer already exist!";
                    }

                }
            } else {
                $dataToShow['status'] = 0;
                $dataToShow['message'] = "Please enter a valid mobile!";
            }


            echo json_encode($dataToShow);
            die;
        }
    }

    public function delete_appointment_old()
    {
        $this->layout = false;
        $this->autoRender = false;
        if ($this->request->is(array('ajax'))) {
            $data = $this->request->data['ids'];
            $data = "('" . implode("','", $data) . "')";
            $query = "UPDATE `appointment_customer_staff_services` SET `delete_status` = 'DELETED',`medical_product_order_id`= '0', `amount` = '0' ,`ipd_procedure_amount` = '0.00' ,`vaccination_amount` = '0.00' ,`other_amount` = '0.00' , `payment_status` = 'PENDING' , `transaction_id` = '' , `payment_by_user_id` = 0 WHERE `id` IN " . $data . " AND `booking_payment_type` = 'CASH' ";
            $this->AppointmentCustomerStaffService->query($query);

            $query1 = "DELETE FROM `medical_product_orders` WHERE `appointment_customer_staff_service_id` IN " . $data;
            $this->AppointmentCustomerStaffService->query($query1);

            $query2 = "DELETE FROM `medical_product_order_details` WHERE `appointment_customer_staff_service_id` IN " . $data;
            $this->AppointmentCustomerStaffService->query($query2);

        }
    }


	public function delete_appointment()
    {
        $this->layout = false;
        $this->autoRender = false;
        if ($this->request->is(array('ajax'))) {
            $data = $this->request->data['ids'];
            $data = "('" . implode("','", $data) . "')";
            $query1 = "UPDATE `appointment_customer_staff_services` SET `delete_status` = 'DELETED',`medical_product_order_id`= '0', `amount` = '0' ,`ipd_procedure_amount` = '0.00' ,`vaccination_amount` = '0.00' ,`other_amount` = '0.00' , `payment_status` = 'PENDING' , `transaction_id` = '' , `payment_by_user_id` = 0 WHERE `id` IN " . $data;            $query2 = "DELETE FROM `medical_product_orders` WHERE `appointment_customer_staff_service_id` IN " . $data;
            $query3 = "DELETE FROM `medical_product_order_details` WHERE `appointment_customer_staff_service_id` IN " . $data;

            
            $query4 = "UPDATE `appointment_customer_staff_services_archive` SET `delete_status` = 'DELETED',`medical_product_order_id`= '0', `amount` = '0' ,`ipd_procedure_amount` = '0.00' ,`vaccination_amount` = '0.00' ,`other_amount` = '0.00' , `payment_status` = 'PENDING' , `transaction_id` = '' , `payment_by_user_id` = 0 WHERE `id` IN " . $data;

            
            $query5 = "DELETE FROM `medical_product_orders_archive` WHERE `appointment_customer_staff_service_id` IN " . $data;
            $query6 = "DELETE FROM `medical_product_order_details_archive` WHERE `appointment_customer_staff_service_id` IN " . $data;


            $connection = ConnectionUtil::getConnection();
            $connection->autocommit(FALSE);
            $result =array();

            $stmt_appointment1 = $connection->prepare($query1);
            $result[] = $stmt_appointment1->execute();
            
            $stmt_appointment2 = $connection->prepare($query2);
            $result[] = $stmt_appointment2->execute();

            $stmt_appointment3 = $connection->prepare($query3);
            $result[] = $stmt_appointment3->execute();

            $stmt_appointment4 = $connection->prepare($query4);
            $result[] = $stmt_appointment4->execute();

            $stmt_appointment5 = $connection->prepare($query5);
            $result[] = $stmt_appointment5->execute();
           
            $stmt_appointment6 = $connection->prepare($query6);
            $result[] = $stmt_appointment6->execute();

            if(!in_array(false,$result)){
                $connection->commit();
                return true;
            }else{
                $connection->rollback();
                return false;
            }

        }
    }

    public function follow_up_appointment()
    {
        $this->layout = false;
        $this->autoRender = false;
        if ($this->request->is(array('ajax'))) {
            $data = $this->request->data['ids'];
            $data = "('" . implode("','", $data) . "')";
            $query = "UPDATE `appointment_customer_staff_services` SET `delete_status` = 'FOLLOW_UP' ,`medical_product_order_id`= '0', `amount` = '0' ,`ipd_procedure_amount` = '0.00' ,`vaccination_amount` = '0.00' ,`other_amount` = '0.00' , `payment_status` = 'PENDING' , `transaction_id` = '' , `payment_by_user_id` = 0 WHERE `id` IN " . $data;
            $this->AppointmentCustomerStaffService->query($query);

            /* $query1 = "UPDATE `medical_product_orders` SET `total_amount` = '0' WHERE `appointment_customer_staff_service_id` IN ".$data;
            $this->AppointmentCustomerStaffService->query($query1);

            $query2 = "DELETE FROM `medical_product_order_details` WHERE `medical_product_id` = '0' AND `appointment_customer_staff_service_id` IN ".$data;
            $this->AppointmentCustomerStaffService->query($query2);

            $query3 = "UPDATE `medical_product_order_details` SET `product_price` = '0', `discount_value` = '0', `discount_amount` = '0', `amount` = '0', `total_amount` = '0' WHERE `medical_product_id` != '0' AND `appointment_customer_staff_service_id` IN ".$data;
            $this->AppointmentCustomerStaffService->query($query3); */

            $query1 = "DELETE FROM `medical_product_orders` WHERE `appointment_customer_staff_service_id` IN " . $data;
            $this->AppointmentCustomerStaffService->query($query1);

            $query2 = "DELETE FROM `medical_product_order_details` WHERE `appointment_customer_staff_service_id` IN " . $data;
            $this->AppointmentCustomerStaffService->query($query2);

        }
    }

    /*


    public function add_subscriber()
    {

        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User');
        $thin_app_id = $login['User']['thinapp_id'];

        if(!$this->Session->read('Tab')){
            $this->Session->write('Tab',"number");
        }
        $country_code = "";
        if($this->request->is(array('post','put')))
        {
            $mobile_numbers =$name_array = array();
            $total_mobile =0;
            $total_sms = Custom::get_total_sms_thinapp($thin_app_id,"T");
            if(isset($this->request->data['Subscriber']['file']['tmp_name']) && !empty($this->request->data['Subscriber']['file']['tmp_name']) ){
              $country_code = $this->request->data['Subscriber']['country_2'];
              $this->Session->write('Tab',"file");
              $type = $this->request->data['Subscriber']['file']['type'];
              if($type=="application/vnd.ms-excel"){
                    $data_array = file($this->request->data['Subscriber']['file']['tmp_name']);
                    foreach($data_array as $key =>$value){
                        $tmp_arr = explode(",", $value);
                        $mobile_numbers[$key] =@$tmp_arr[0];
                        $name_array[$key] =@trim($tmp_arr[1]);
                    }
                    $total_mobile =count($mobile_numbers);
                  }else{
                      $this->Session->setFlash(__('Invalid file type.'), 'default', array(), 'error');
                }
            }else{
                $country_code = $this->request->data['Subscriber']['country'];
                $this->Session->write('Tab',"number");
                $mobile_numbers = $this->request->data['mobile'];
                $total_mobile =count($mobile_numbers);
            }

            if(!empty($mobile_numbers) && $total_mobile > 0 && $total_mobile <= $total_sms ){
                $login = $this->Session->read('Auth.User.User');
                $data['thin_app_id'] =$thin_app_id;
                $data['user_id'] = $login['id'];
                $data['app_key'] = APP_KEY;
                $data['mobile'] = $login['mobile'];
                $data['country_code'] = $country_code;
                $data['channel_id'] = $this->request->data['Subscriber']['channel_id'];
                $data['contacts'] = $mobile_numbers;
                $data['names'] = $name_array;
                $result = json_decode(WebservicesFunction::add_subscriber_revised($data,true),true);
                if($result['status']==1){
                    $this->Session->setFlash($result['message'], 'default', array(), 'success');
                    $this->redirect(array('controller' => 'app_admin', 'action' => 'add_subscriber'));
                }else{
                    $this->Session->setFlash($result['message'], 'default', array(), 'error');
                }
            }else{

                if($total_mobile == 0 ){
                    $this->Session->setFlash(__('Please enter subscriber number.'), 'default', array(), 'error');
                }else if($total_mobile > $total_sms){
                    $this->Session->setFlash("You have insufficient sms balance  <b> $total_sms </b> for subscribe  <b> $total_mobile </b> mobile numbers.", 'default', array(), 'warning');
                }

            }


        }
        $this->set("tab",$this->Session->read('Tab'));
    }

*/

    public function web_pay_appointment()
    {
        $fp = "";
        $this->layout = false;
        $this->autoRender = false;
        $login = $this->Session->read('Auth.User.User');
        $thin_app_id = $login['thinapp_id'];
        if ($this->request->is(array('ajax'))) {
            $datasource = $this->AppointmentCustomerStaffService->getDataSource();
            try {
                $filename = LOCAL_PATH . "app/webroot/ivr/tmp_lock/web_payment_lock_" . $thin_app_id . ".json";
                $fp = fopen($filename, "w+"); // open it for WRITING ("w")
                $block = 1;
                if (flock($fp, LOCK_EX, $block)) {
                    $datasource->begin();
                    $data = $this->request->data;


                    $data['AppointmentCustomerStaffService']['id'] = base64_decode($data['AppointmentCustomerStaffService']['id']);

                    $appointmentID = $data['AppointmentCustomerStaffService']['id'];




                    $payment_type_id = $data['AppointmentCustomerStaffService']['hospital_payment_type_id'];
                    $booking_payment_type = (!empty($payment_type_id) && ($payment_type_id != NULL) && ($payment_type_id != '') && ($payment_type_id != 0)  && ($payment_type_id != 'CASH')) ? 'ONLINE' : "CASH";
                    $data['AppointmentCustomerStaffService']['payment_status'] = 'SUCCESS';
                    $data['AppointmentCustomerStaffService']['booking_payment_type'] = $booking_payment_type;
                    $dataToSend = array();
                    $dataToSave = array();
                    $totalAmount = 0;
                    $appointmentCustomerStaffServiceData = $this->AppointmentCustomerStaffService->find('first', array('conditions' => array('AppointmentCustomerStaffService.id' => $data['AppointmentCustomerStaffService']['id']), 'contain' => array('MedicalProductOrder')));


                    if($appointmentCustomerStaffServiceData['AppointmentCustomerStaffService']['appointment_booked_from'] == 'IVR' && $appointmentCustomerStaffServiceData['AppointmentCustomerStaffService']['is_paid_booking_convenience_fee'] == 'NO'){


                        $arrToSave = array(
                            'thinapp_id' => $thin_app_id,
                            'appointment_customer_staff_service_id' => $appointmentID,
                            'appointment_customer_id' => $appointmentCustomerStaffServiceData['AppointmentCustomerStaffService']['appointment_customer_id'],
                            'children_id' => $appointmentCustomerStaffServiceData['AppointmentCustomerStaffService']['children_id'],
                            'amount' => $appointmentCustomerStaffServiceData['AppointmentCustomerStaffService']['booking_convenience_fee'],
                            'booking_convenience_fee' => $appointmentCustomerStaffServiceData['AppointmentCustomerStaffService']['booking_convenience_fee'],
                            'booking_doctor_share_percentage' => $appointmentCustomerStaffServiceData['AppointmentCustomerStaffService']['booking_doctor_share_percentage'],
                            'booking_doctor_share_fee' => $appointmentCustomerStaffServiceData['AppointmentCustomerStaffService']['booking_doctor_share_fee'],
                            'booking_payment_getway_fee_percentage' => 0,
                            'booking_payment_getway_fee' => 0,
                            'booking_mengage_share_fee' => ($appointmentCustomerStaffServiceData['AppointmentCustomerStaffService']['booking_mengage_share_fee']+$appointmentCustomerStaffServiceData['AppointmentCustomerStaffService']['booking_payment_getway_fee']),
                            'tx_status' => 'SUCCESS',
                            'payment_mode' => 'CASH_FROM_WEB',
                            'tx_time' => date('Y-m-d H:i:s'),
                            'created_by_user_id' => $login['id'],
                            'payment_account' => 'CLINIC',
                            'is_settled' => 'NO'
                        );
                        $this->BookingConvenienceFeeDetail->saveAll($arrToSave);

                        $lastID = $this->BookingConvenienceFeeDetail->getInsertID();
                        $uniqueID = str_pad($lastID, 10, "0", STR_PAD_LEFT);


                        $this->BookingConvenienceFeeDetail->updateAll(array("BookingConvenienceFeeDetail.unique_id" => "'$uniqueID'"), array("BookingConvenienceFeeDetail.id" => $lastID));

                        $this->AppointmentCustomerStaffService->updateAll(array("AppointmentCustomerStaffService.is_paid_booking_convenience_fee" => "'YES'"), array("AppointmentCustomerStaffService.id" => $appointmentID));

                        $data['AppointmentCustomerStaffService']['tot'] = $data['AppointmentCustomerStaffService']['tot'] - $appointmentCustomerStaffServiceData['AppointmentCustomerStaffService']['booking_convenience_fee'];
                        $data['AppointmentCustomerStaffService']['display'] = $data['AppointmentCustomerStaffService']['display'] - $appointmentCustomerStaffServiceData['AppointmentCustomerStaffService']['booking_convenience_fee'];

                         $receiptUrl = Router::url('/homes/receipt/', true).base64_encode($appointmentID);
        $message = "Payment of INR ".$appointmentCustomerStaffServiceData['AppointmentCustomerStaffService']['booking_convenience_fee']." received towards token booking convenience fees. Click on link to find receipt. ".$receiptUrl;

                        if($appointmentCustomerStaffServiceData['AppointmentCustomerStaffService']['appointment_customer_id'] > 0)
                        {
                            $customerData = $this->AppointmentCustomer->find('first', array('fields'=>array('AppointmentCustomer.mobile'),'conditions' => array('AppointmentCustomer.id' => $appointmentCustomerStaffServiceData['AppointmentCustomerStaffService']['appointment_customer_id']), 'contain' => false));
                            $mobile = $customerData['AppointmentCustomer']['mobile'];
                        }
                        else
                        {
                            $childrenData = $this->Children->find('first', array('fields'=>array('Children.mobile'),'conditions' => array('Children.id' => $appointmentCustomerStaffServiceData['AppointmentCustomerStaffService']['children_id']), 'contain' => false));
                            $mobile = $childrenData['Children']['mobile'];
                        }

                        Custom::send_single_sms($mobile, ($message), 134, false, false);


                    }

                    $final_amount = $data['AppointmentCustomerStaffService']['tot'];
                    $display_amount = $data['AppointmentCustomerStaffService']['display'];





                    $dataToSaveOrder = array();
                    if (!Custom::has_opd_receipt($data['AppointmentCustomerStaffService']['id'])) {
                        $dataToSaveOrder['MedicalProductOrder']['appointment_customer_staff_service_id'] = $appointmentCustomerStaffServiceData['AppointmentCustomerStaffService']['id'];
                        $dataToSaveOrder['MedicalProductOrder']['appointment_staff_id'] = $appointmentCustomerStaffServiceData['AppointmentCustomerStaffService']['appointment_staff_id'];
                        $dataToSaveOrder['MedicalProductOrder']['appointment_address_id'] = $appointmentCustomerStaffServiceData['AppointmentCustomerStaffService']['appointment_address_id'];
                        $dataToSaveOrder['MedicalProductOrder']['appointment_customer_id'] = $appointmentCustomerStaffServiceData['AppointmentCustomerStaffService']['appointment_customer_id'];
                        $dataToSaveOrder['MedicalProductOrder']['children_id'] = $appointmentCustomerStaffServiceData['AppointmentCustomerStaffService']['children_id'];
                        $dataToSaveOrder['MedicalProductOrder']['thinapp_id'] = $appointmentCustomerStaffServiceData['AppointmentCustomerStaffService']['thinapp_id'];
                        $dataToSaveOrder['MedicalProductOrder']['unique_id'] = date("dmy") . $appointmentCustomerStaffServiceData['AppointmentCustomerStaffService']['id'];
                        $dataToSaveOrder['MedicalProductOrder']['created_by_user_id'] = $login['id'];
                        $app_datetime =date('Y-m-d',strtotime($appointmentCustomerStaffServiceData['AppointmentCustomerStaffService']['appointment_datetime']));
                        if(strtotime($app_datetime) < strtotime(date('Y-m-d'))){
                            $dataToSaveOrder['MedicalProductOrder']['created'] = $appointmentCustomerStaffServiceData['AppointmentCustomerStaffService']['appointment_datetime'];
                            $dataToSaveOrder['MedicalProductOrder']['modified'] = $appointmentCustomerStaffServiceData['AppointmentCustomerStaffService']['appointment_datetime'];
                        }

                        if ($this->MedicalProductOrder->save($dataToSaveOrder)) {
                            $orderID = $this->MedicalProductOrder->getInsertID();
                            $counter = 0;

                            $dataToSave[$counter]['service'] = 'OPD';
                            $dataToSave[$counter]['medical_product_order_id'] = $orderID;
                            $dataToSave[$counter]['show_into_receipt'] = $data['show_into_receipt'];
                            $dataToSave[$counter]['appointment_customer_staff_service_id'] = $appointmentCustomerStaffServiceData['AppointmentCustomerStaffService']['id'];
                            $dataToSave[$counter]['appointment_staff_id'] = $appointmentCustomerStaffServiceData['AppointmentCustomerStaffService']['appointment_staff_id'];
                            $dataToSave[$counter]['appointment_customer_id'] = $appointmentCustomerStaffServiceData['AppointmentCustomerStaffService']['appointment_customer_id'];
                            $dataToSave[$counter]['children_id'] = $appointmentCustomerStaffServiceData['AppointmentCustomerStaffService']['children_id'];
                            $dataToSave[$counter]['thinapp_id'] = $appointmentCustomerStaffServiceData['AppointmentCustomerStaffService']['thinapp_id'];


                            $opdAmount = $data['AppointmentCustomerStaffService']['amount'];
                            $opdDiscountVal = $opdDiscount = $data['discount_opd'];
                            $opdDiscountType = $data['discount_opd_type'];


                            if ($opdDiscountType == "PERCENTAGE") {
                                $opdDiscount = (float)((($opdAmount) * $opdDiscount) / 100);
                            }
                            $discountedOpdAmount = ($opdAmount) - $opdDiscount;

                            $dataToSave[$counter]['quantity'] = 1;
                            $dataToSave[$counter]['discount_type'] = $opdDiscountType;
                            $dataToSave[$counter]['discount_value'] = $opdDiscountVal;
                            $dataToSave[$counter]['product_price'] = $data['AppointmentCustomerStaffService']['amount'];
                            $amount = $dataToSave[$counter]['amount'] = $data['AppointmentCustomerStaffService']['amount'];
                            $dataToSave[$counter]['discount_amount'] = $opdDiscount;
                            $total = $dataToSave[$counter]['total_amount'] = $discountedOpdAmount;

                            $data['AppointmentCustomerStaffService']['amount'] = $discountedOpdAmount;

                            $mainTotalAmount = (float)$total;
                            $counter++;

                            if (isset($data['productID']) && !empty($data['productID'])) {
                                foreach ($data['productID'] AS $key => $val) {
                                    $productData = $this->MedicalProduct->find('first', array('conditions' => array('MedicalProduct.id' => $val), 'recursive' => 2));


                                    $dataToSave[$counter]['medical_product_id'] = $val;
                                    $dataToSave[$counter]['medical_product_order_id'] = $orderID;
                                    $dataToSave[$counter]['appointment_customer_staff_service_id'] = $appointmentCustomerStaffServiceData['AppointmentCustomerStaffService']['id'];
                                    $dataToSave[$counter]['appointment_staff_id'] = $appointmentCustomerStaffServiceData['AppointmentCustomerStaffService']['appointment_staff_id'];
                                    $dataToSave[$counter]['appointment_customer_id'] = $appointmentCustomerStaffServiceData['AppointmentCustomerStaffService']['appointment_customer_id'];
                                    $dataToSave[$counter]['children_id'] = $appointmentCustomerStaffServiceData['AppointmentCustomerStaffService']['children_id'];
                                    $dataToSave[$counter]['thinapp_id'] = $appointmentCustomerStaffServiceData['AppointmentCustomerStaffService']['thinapp_id'];

                                    $dataToSave[$counter]['medical_product_quantity_id'] = ($data['medical_product_quantity_id'][$key] != '') ? $data['medical_product_quantity_id'][$key] : 0;


                                    if ($data['medical_product_quantity_id'][$key] != '') {

                                        $qtyToSell = $data['quantity'][$key];
                                        $totalQuanityAvavilable = $this->MedicalProductQuantity->findById($data['medical_product_quantity_id'][$key], array('contain' => false));
                                        $remainingQty = ($totalQuanityAvavilable['MedicalProductQuantity']['quantity'] - $totalQuanityAvavilable['MedicalProductQuantity']['sold']);

                                        if (($remainingQty >= $qtyToSell) || ($totalQuanityAvavilable['MedicalProductQuantity']['quantity'] == 0)) {


                                            $dataToSave[$counter]['quantity'] = $data['quantity'][$key];
                                            $dataToSave[$counter]['discount_type'] = $data['discountType'][$key];
                                            $dataToSave[$counter]['discount_value'] = $data['discount'][$key];
                                            $dataToSave[$counter]['product_price'] = $data['price'][$key];

                                            $product_amount = $data['price'][$key] * $data['quantity'][$key];
                                            $dataToSave[$counter]['amount'] = $product_amount;

                                            $dataToSave[$counter]['tax_value'] = $data['tax_value'][$key];

                                            $dataToSave[$counter]['tax_type'] = $data['tax_type'][$key];

                                            $discount_amount = $data['discount'][$key];
                                            if ($data['discountType'][$key] == "PERCENTAGE") {
                                                $discount_amount = (($product_amount) * $data['discount'][$key]) / 100;
                                            }
                                            $total_amount = ($product_amount) - $discount_amount;
                                            $tax_amount = ($total_amount * $data['tax_value'][$key]) / 100;
                                            $total_amount = $total_amount + $tax_amount;

                                            $dataToSave[$counter]['tax_amount'] = $tax_amount;
                                            $dataToSave[$counter]['discount_amount'] = $discount_amount;
                                            $tmp = explode('.', $total_amount);
                                            if (count($tmp) == 2) {
                                                $total_amount = $tmp[0] . '.' . substr($tmp[1], 0, 2);
                                            }
                                            $mainTotalAmount += (float)$total_amount;

                                            $dataToSave[$counter]['total_amount'] = $total_amount;


                                            $this->MedicalProductQuantity->query("UPDATE `medical_product_quantities` SET `sold` = (`sold`+" . $qtyToSell . ") WHERE `id` = '" . $data['medical_product_quantity_id'][$key] . "'");
                                        } else {


                                            $proID = $totalQuanityAvavilable['MedicalProductQuantity']['medical_product_id'];
                                            $qtyData = $this->MedicalProductQuantity->find('all', array('fields' => array('MedicalProductQuantity.*', '(MedicalProductQuantity.quantity - MedicalProductQuantity.sold) AS rem_qty'), 'conditions' => array('MedicalProductQuantity.medical_product_id' => $proID, 'DATE(MedicalProductQuantity.expiry_date) >=' => date('Y-m-d'), 'MedicalProductQuantity.status' => 'ACTIVE', 'MedicalProductQuantity.id <>' => $data['medical_product_quantity_id'][$key]), 'order' => array('MedicalProductQuantity.expiry_date' => 'ASC'), 'group' => array('MedicalProductQuantity.id HAVING rem_qty > 0'), 'contain' => false));

                                            if (empty($qtyData)) {


                                                $dataToSave[$counter]['quantity'] = $data['quantity'][$key];
                                                $dataToSave[$counter]['discount_type'] = $data['discountType'][$key];
                                                $dataToSave[$counter]['discount_value'] = $data['discount'][$key];
                                                $dataToSave[$counter]['product_price'] = $data['price'][$key];

                                                $product_amount = $data['price'][$key] * $data['quantity'][$key];
                                                $dataToSave[$counter]['amount'] = $product_amount;

                                                $dataToSave[$counter]['tax_value'] = $data['tax_value'][$key];

                                                $dataToSave[$counter]['tax_type'] = $data['tax_type'][$key];

                                                $discount_amount = $data['discount'][$key];
                                                if ($data['discountType'][$key] == "PERCENTAGE") {
                                                    $discount_amount = (($product_amount) * $data['discount'][$key]) / 100;
                                                }
                                                $total_amount = ($product_amount) - $discount_amount;
                                                $tax_amount = ($total_amount * $data['tax_value'][$key]) / 100;
                                                $total_amount = $total_amount + $tax_amount;

                                                $dataToSave[$counter]['tax_amount'] = $tax_amount;
                                                $dataToSave[$counter]['discount_amount'] = $discount_amount;
                                                $tmp = explode('.', $total_amount);
                                                if (count($tmp) == 2) {
                                                    $total_amount = $tmp[0] . '.' . substr($tmp[1], 0, 2);
                                                }
                                                $mainTotalAmount += (float)$total_amount;

                                                $dataToSave[$counter]['total_amount'] = $total_amount;


                                                $this->MedicalProductQuantity->query("UPDATE `medical_product_quantities` SET `sold` = (`sold`+" . $qtyToSell . ") WHERE `id` = '" . $data['medical_product_quantity_id'][$key] . "'");


                                            } else {

                                                if ($remainingQty > 0) {

                                                    $dataToSave[$counter]['quantity'] = $remainingQty;
                                                    $dataToSave[$counter]['discount_type'] = $data['discountType'][$key];
                                                    $dataToSave[$counter]['discount_value'] = $data['discount'][$key];

                                                    $dataToSave[$counter]['product_price'] = $data['price'][$key];
                                                    $product_amount = $data['price'][$key] * $remainingQty;


                                                    $dataToSave[$counter]['amount'] = $product_amount;

                                                    $dataToSave[$counter]['tax_value'] = $data['tax_value'][$key];

                                                    $dataToSave[$counter]['tax_type'] = $data['tax_type'][$key];

                                                    $discount_amount = $data['discount'][$key];
                                                    if ($data['discountType'][$key] == "PERCENTAGE") {
                                                        $discount_amount = (($product_amount) * $data['discount'][$key]) / 100;
                                                    }
                                                    $total_amount = ($product_amount) - $discount_amount;
                                                    $tax_amount = ($total_amount * $data['tax_value'][$key]) / 100;
                                                    $total_amount = $total_amount + $tax_amount;

                                                    $dataToSave[$counter]['tax_amount'] = $tax_amount;
                                                    $dataToSave[$counter]['discount_amount'] = $discount_amount;
                                                    $tmp = explode('.', $total_amount);
                                                    if (count($tmp) == 2) {
                                                        $total_amount = $tmp[0] . '.' . substr($tmp[1], 0, 2);
                                                    }
                                                    $mainTotalAmount += (float)$total_amount;

                                                    $dataToSave[$counter]['total_amount'] = $total_amount;


                                                    $this->MedicalProductQuantity->query("UPDATE `medical_product_quantities` SET `sold` = (`sold`+" . $remainingQty . ") WHERE `id` = '" . $data['medical_product_quantity_id'][$key] . "'");
                                                    $qtyToSell = $qtyToSell - $remainingQty;
                                                }


                                                $leastExpInsertkey = -1;

                                                $a = 0;

                                                foreach ($qtyData AS $proVal) {
                                                    $counter++;

                                                    $remainingQty = $proVal[0]['rem_qty'];

                                                    if ($remainingQty >= $qtyToSell) {

                                                        $dataToSave[$counter]['medical_product_id'] = $val;
                                                        $dataToSave[$counter]['medical_product_order_id'] = $orderID;
                                                        $dataToSave[$counter]['appointment_customer_staff_service_id'] = $appointmentCustomerStaffServiceData['AppointmentCustomerStaffService']['id'];
                                                        $dataToSave[$counter]['appointment_staff_id'] = $appointmentCustomerStaffServiceData['AppointmentCustomerStaffService']['appointment_staff_id'];
                                                        $dataToSave[$counter]['appointment_customer_id'] = $appointmentCustomerStaffServiceData['AppointmentCustomerStaffService']['appointment_customer_id'];
                                                        $dataToSave[$counter]['children_id'] = $appointmentCustomerStaffServiceData['AppointmentCustomerStaffService']['children_id'];
                                                        $dataToSave[$counter]['thinapp_id'] = $appointmentCustomerStaffServiceData['AppointmentCustomerStaffService']['thinapp_id'];

                                                        $dataToSave[$counter]['medical_product_quantity_id'] = $proVal['MedicalProductQuantity']['id'];


                                                        $dataToSave[$counter]['quantity'] = $qtyToSell;
                                                        $dataToSave[$counter]['discount_type'] = $data['discountType'][$key];
                                                        $dataToSave[$counter]['discount_value'] = $data['discount'][$key];


                                                        if ($productData['MedicalProduct']['is_price_editable'] == 1) {
                                                            $dataToSave[$counter]['product_price'] = $data['price'][$key];
                                                            $product_amount = $data['price'][$key] * $qtyToSell;
                                                        } else {
                                                            $dataToSave[$counter]['product_price'] = $proVal['MedicalProductQuantity']['mrp'];
                                                            $product_amount = $proVal['MedicalProductQuantity']['mrp'] * $qtyToSell;
                                                        }


                                                        $dataToSave[$counter]['amount'] = $product_amount;

                                                        $dataToSave[$counter]['tax_value'] = $data['tax_value'][$key];

                                                        $dataToSave[$counter]['tax_type'] = $data['tax_type'][$key];

                                                        $discount_amount = $data['discount'][$key];
                                                        if ($data['discountType'][$key] == "PERCENTAGE") {
                                                            $discount_amount = (($product_amount) * $data['discount'][$key]) / 100;
                                                        }
                                                        $total_amount = ($product_amount) - $discount_amount;
                                                        $tax_amount = ($total_amount * $data['tax_value'][$key]) / 100;
                                                        $total_amount = $total_amount + $tax_amount;

                                                        $dataToSave[$counter]['tax_amount'] = $tax_amount;
                                                        $dataToSave[$counter]['discount_amount'] = $discount_amount;
                                                        $tmp = explode('.', $total_amount);
                                                        if (count($tmp) == 2) {
                                                            $total_amount = $tmp[0] . '.' . substr($tmp[1], 0, 2);
                                                        }
                                                        $mainTotalAmount += (float)$total_amount;

                                                        $dataToSave[$counter]['total_amount'] = $total_amount;


                                                        $this->MedicalProductQuantity->query("UPDATE `medical_product_quantities` SET `sold` = (`sold`+" . $qtyToSell . ") WHERE `id` = '" . $proVal['MedicalProductQuantity']['id'] . "'");
                                                        $qtyToSell = $qtyToSell - $remainingQty;
                                                        if ($a == 0) {
                                                            $leastExpInsertkey = -1;
                                                        }
                                                        break;
                                                    } else {

                                                        $dataToSave[$counter]['medical_product_id'] = $val;
                                                        $dataToSave[$counter]['medical_product_order_id'] = $orderID;
                                                        $dataToSave[$counter]['appointment_customer_staff_service_id'] = $appointmentCustomerStaffServiceData['AppointmentCustomerStaffService']['id'];
                                                        $dataToSave[$counter]['appointment_staff_id'] = $appointmentCustomerStaffServiceData['AppointmentCustomerStaffService']['appointment_staff_id'];
                                                        $dataToSave[$counter]['appointment_customer_id'] = $appointmentCustomerStaffServiceData['AppointmentCustomerStaffService']['appointment_customer_id'];
                                                        $dataToSave[$counter]['children_id'] = $appointmentCustomerStaffServiceData['AppointmentCustomerStaffService']['children_id'];
                                                        $dataToSave[$counter]['thinapp_id'] = $appointmentCustomerStaffServiceData['AppointmentCustomerStaffService']['thinapp_id'];

                                                        $dataToSave[$counter]['medical_product_quantity_id'] = $proVal['MedicalProductQuantity']['id'];


                                                        $dataToSave[$counter]['quantity'] = $remainingQty;
                                                        $dataToSave[$counter]['discount_type'] = $data['discountType'][$key];
                                                        $dataToSave[$counter]['discount_value'] = $data['discount'][$key];


                                                        if ($productData['MedicalProduct']['is_price_editable'] == 1) {
                                                            $dataToSave[$counter]['product_price'] = $data['price'][$key];
                                                            $product_amount = $data['price'][$key] * $remainingQty;
                                                        } else {
                                                            $dataToSave[$counter]['product_price'] = $proVal['MedicalProductQuantity']['mrp'];
                                                            $product_amount = $proVal['MedicalProductQuantity']['mrp'] * $remainingQty;
                                                        }


                                                        $dataToSave[$counter]['amount'] = $product_amount;

                                                        $dataToSave[$counter]['tax_value'] = $data['tax_value'][$key];

                                                        $dataToSave[$counter]['tax_type'] = $data['tax_type'][$key];

                                                        $discount_amount = $data['discount'][$key];
                                                        if ($data['discountType'][$key] == "PERCENTAGE") {
                                                            $discount_amount = (($product_amount) * $data['discount'][$key]) / 100;
                                                        }
                                                        $total_amount = ($product_amount) - $discount_amount;
                                                        $tax_amount = ($total_amount * $data['tax_value'][$key]) / 100;
                                                        $total_amount = $total_amount + $tax_amount;

                                                        $dataToSave[$counter]['tax_amount'] = $tax_amount;
                                                        $dataToSave[$counter]['discount_amount'] = $discount_amount;
                                                        $tmp = explode('.', $total_amount);
                                                        if (count($tmp) == 2) {
                                                            $total_amount = $tmp[0] . '.' . substr($tmp[1], 0, 2);
                                                        }
                                                        $mainTotalAmount += (float)$total_amount;

                                                        $dataToSave[$counter]['total_amount'] = $total_amount;


                                                        $this->MedicalProductQuantity->query("UPDATE `medical_product_quantities` SET `sold` = (`sold`+" . $remainingQty . ") WHERE `id` = '" . $proVal['MedicalProductQuantity']['id'] . "'");
                                                        if ($a == 0) {

                                                            $leastExpInsertkey = $counter;
                                                        }
                                                        $qtyToSell = $qtyToSell - $remainingQty;

                                                    }


                                                    $a++;
                                                }


                                                if ($leastExpInsertkey != -1 && $qtyToSell > 0) {


                                                    $dataToSave[$leastExpInsertkey]['quantity'] = $dataToSave[$leastExpInsertkey]['quantity'] + $qtyToSell;
                                                    $dataToSave[$leastExpInsertkey]['discount_type'] = $data['discountType'][$key];
                                                    $dataToSave[$leastExpInsertkey]['discount_value'] = $data['discount'][$key];

                                                    $product_amount = $dataToSave[$leastExpInsertkey]['product_price'] * $dataToSave[$leastExpInsertkey]['quantity'];

                                                    $dataToSave[$leastExpInsertkey]['amount'] = $product_amount;

                                                    $dataToSave[$leastExpInsertkey]['tax_value'] = $data['tax_value'][$key];

                                                    $dataToSave[$leastExpInsertkey]['tax_type'] = $data['tax_type'][$key];

                                                    $discount_amount = $data['discount'][$key];
                                                    if ($data['discountType'][$key] == "PERCENTAGE") {
                                                        $discount_amount = (($product_amount) * $data['discount'][$key]) / 100;
                                                    }
                                                    $total_amount = ($product_amount) - $discount_amount;
                                                    $tax_amount = ($total_amount * $data['tax_value'][$key]) / 100;
                                                    $total_amount = $total_amount + $tax_amount;

                                                    $dataToSave[$leastExpInsertkey]['tax_amount'] = $tax_amount;
                                                    $dataToSave[$leastExpInsertkey]['discount_amount'] = $discount_amount;
                                                    $tmp = explode('.', $total_amount);
                                                    if (count($tmp) == 2) {
                                                        $total_amount = $tmp[0] . '.' . substr($tmp[1], 0, 2);
                                                    }
                                                    $mainTotalAmount += (float)$total_amount;

                                                    $dataToSave[$leastExpInsertkey]['total_amount'] = $total_amount;

                                                    $this->MedicalProductQuantity->query("UPDATE `medical_product_quantities` SET `sold` = (`sold`+" . $qtyToSell . ") WHERE `id` = '" . $dataToSave[$leastExpInsertkey]['medical_product_quantity_id'] . "'");

                                                }


                                            }

                                        }
                                    } else {
                                        $dataToSave[$counter]['quantity'] = $data['quantity'][$key];
                                        $dataToSave[$counter]['discount_type'] = $data['discountType'][$key];
                                        $dataToSave[$counter]['discount_value'] = $data['discount'][$key];
                                        $dataToSave[$counter]['product_price'] = $data['price'][$key];

                                        $product_amount = $data['price'][$key] * $data['quantity'][$key];
                                        $dataToSave[$counter]['amount'] = $product_amount;

                                        $dataToSave[$counter]['tax_value'] = $data['tax_value'][$key];

                                        $dataToSave[$counter]['tax_type'] = $data['tax_type'][$key];

                                        $discount_amount = $data['discount'][$key];
                                        if ($data['discountType'][$key] == "PERCENTAGE") {
                                            $discount_amount = (($product_amount) * $data['discount'][$key]) / 100;
                                        }
                                        $total_amount = ($product_amount) - $discount_amount;
                                        $tax_amount = ($total_amount * $data['tax_value'][$key]) / 100;
                                        $total_amount = $total_amount + $tax_amount;

                                        $dataToSave[$counter]['tax_amount'] = $tax_amount;
                                        $dataToSave[$counter]['discount_amount'] = $discount_amount;
                                        $tmp = explode('.', $total_amount);
                                        if (count($tmp) == 2) {
                                            $total_amount = $tmp[0] . '.' . substr($tmp[1], 0, 2);
                                        }
                                        $mainTotalAmount += (float)$total_amount;

                                        $dataToSave[$counter]['total_amount'] = $total_amount;
                                    }

                                    $counter++;
                                }
                            }

                            foreach($dataToSave AS $key => $list){
                                if(isset($list['quantity']))
                                {
                                    if($list['quantity'] < 1)
                                    {
                                        unset($dataToSave[$key]);
                                    }
                                }
                                else
                                {
                                    unset($dataToSave[$key]);
                                }
                            }

                            if ($this->MedicalProductOrderDetail->saveAll($dataToSave)) {

                                $orderUpdate['MedicalProductOrder']['id'] = $orderID;
                                //$orderUpdate['MedicalProductOrder']['total_amount'] = $mainTotalAmount;
                                $orderUpdate['MedicalProductOrder']['total_amount'] = $final_amount;


                                $orderUpdate['MedicalProductOrder']['hospital_payment_type_id'] = $data['AppointmentCustomerStaffService']['hospital_payment_type_id'];
                                $orderUpdate['MedicalProductOrder']['payment_description'] = $data['AppointmentCustomerStaffService']['payment_description'];
                                $payment_type_name = $data['AppointmentCustomerStaffService']['payment_type_name'];
                                $orderUpdate['MedicalProductOrder']['payment_type_name'] = $payment_type_name;


                                $orderUpdateAppointment['AppointmentCustomerStaffService']['id'] = $appointmentCustomerStaffServiceData['AppointmentCustomerStaffService']['id'];
                                $orderUpdateAppointment['AppointmentCustomerStaffService']['medical_product_order_id'] = $orderID;

                                if ($this->MedicalProductOrder->save($orderUpdate) && $this->AppointmentCustomerStaffService->save($orderUpdateAppointment)) {
                                    if ($this->AppointmentCustomerStaffService->save($data)) {
                                        $result = true;



                                        $remark = isset($data["remark"])?$data["remark"]:"";
                                        $mobile_no = isset($data["mobile_no"])?$data["mobile_no"]:"";
                                        $txn_no = isset($data["txn_no"])?$data["txn_no"]:"";
                                        $beneficiary_name = isset($data["beneficiary_name"])?$data["beneficiary_name"]:"";
                                        $bank_account = isset($data["bank_account"])?$data["bank_account"]:"";
                                        $transaction_id = isset($data["transaction_id"])?$data["transaction_id"]:"";
                                        $valid_upto = isset($data["valid_upto"])?$data["valid_upto"]:"";
                                        $holder_name = isset($data["holder_name"])?$data["holder_name"]:"";
                                        $card_no = isset($data["card_no"])?$data["card_no"]:"";

                                        $paymentDetailData = array(
                                            "thinapp_id"=>$thin_app_id,
                                            "medical_product_order_id"=>$orderID,
                                            "hospital_payment_type_id"=> !empty($data['AppointmentCustomerStaffService']['hospital_payment_type_id'])?$data['AppointmentCustomerStaffService']['hospital_payment_type_id']:0,
                                            "remark"=>$remark,
                                            "mobile_no"=>$mobile_no,
                                            "txn_no"=>$txn_no,
                                            "beneficiary_name"=>$beneficiary_name,
                                            "bank_account"=>$bank_account,
                                            "transaction_id"=>$transaction_id,
                                            "valid_upto"=>$valid_upto,
                                            "holder_name"=>$holder_name,
                                            "card_no"=>$card_no,
                                        );
                                        $this->HospitalPaymentTypeDetail->save($paymentDetailData);

                                        $patient_id = $appointmentCustomerStaffServiceData['AppointmentCustomerStaffService']['appointment_customer_id'];
                                        if(!empty($patient_id)){
                                            $patient_type = "CUSTOMER";
                                        }else{
                                            $patient_id = $appointmentCustomerStaffServiceData['AppointmentCustomerStaffService']['children_id'];
                                            $patient_type = "CHILDREN";
                                        }


                                        $thin_app_id = $appointmentCustomerStaffServiceData['AppointmentCustomerStaffService']['thinapp_id'];
                                        $result =   Custom::update_patient_due_amount($display_amount, $thin_app_id,$orderID,$login['id'],$final_amount,$patient_id,$patient_type);


                                        if($result){
                                            $datasource->commit();



                                            $update_number = Custom::update_paid_order_receipt_number($thin_app_id, $orderID);

                                            $dataToSend['status'] = 1;
                                            $dataToSend['message'] = "Successfully paid!";
                                            $dataToSend['amount'] = $final_amount;
                                            $dataToSend['payment_type'] = $payment_type_name;
                                            $dataToSend['data_id'] = base64_encode($orderID);
                                        }else{
                                            $datasource->rollback();
                                            $dataToSend['status'] = 0;
                                            $dataToSend['message'] = "Unable to adjust due amount";
                                        }

                                    } else {
                                        $datasource->rollback();
                                        $dataToSend['status'] = 0;
                                        $dataToSend['message'] = "Something went wrong!";
                                    }
                                } else {
                                    $datasource->rollback();
                                    $dataToSend['status'] = 0;
                                    $dataToSend['message'] = "Something went wrong!";
                                }
                            } else {
                                $datasource->rollback();
                                $dataToSend['status'] = 0;
                                $dataToSend['message'] = "Something went wrong!";
                            }

                        } else {
                            $datasource->rollback();
                            $dataToSend['status'] = 0;
                            $dataToSend['message'] = "Something went wrong!";
                        }
                    } else {
                        $dataToSend['status'] = 0;
                        $dataToSend['message'] = "Payment done for this appointment. Please press Ctrl+F5 key for disable this dialog.";
                    }
                }
                flock($fp, LOCK_UN);
            } catch (Exception $e) {
                flock($fp, LOCK_UN); // unlock the file
                $datasource->rollback();
                $dataToSend['status'] = 0;
                $dataToSend['message'] = "Something went wrong!";
            }
            Custom::sendResponse($dataToSend);
            Custom::send_process_to_background();
            $result = Custom::skip_late_payment_appointment($appointmentID,$login['id']);
            Custom::send_web_tracker_notification($thin_app_id);
        }

    }


    

	public function print_invoice_backup($order_id,$invoice_type = "OPD")
    {
        $this->layout = false;
        $invoiceData = array();
        $due_paid_amount = " (SELECT pda.amount FROM patient_due_amounts AS pda WHERE pda.settlement_by_order_id = mpo.id AND pda.paid_via_patient ='YES' AND pda.payment_status = 'PAID' AND pda.status='ACTIVE' order by pda.id desc limit 1) AS due_paid_amount ";
        $total_due_amount = " (SELECT SUM(pda.amount) FROM patient_due_amounts AS pda WHERE  pda.medical_product_order_id = mpo.id and pda.paid_via_patient = 'NO' ) AS total_due_amount ";

        if($invoice_type == "OPD"){
            $orderId = base64_decode($order_id);
            if ($orderId){
                $query = "select mpod.days, mpo.receipt_id, mpo.is_refunded, t.show_time_on_receipt, t.show_date_on_receipt, t.show_paid_user_order_number_on_receipt, mpo.paid_receipt_number, acss.created as appointment_created, acss.emergency_appointment, t.show_department_on_receipt, t.show_patient_mobile_on_receipt, mpo.appointment_customer_staff_service_id as appointment_id, mpq.expiry_date, mpo.bill_id, mpq.batch, t.show_token_on_receipt, t.show_token_time_on_receipt, t.show_doctor_on_receipt, mpo.reffered_by_name, t.show_referrer_on_receipt, mpo.total_amount as total_paid, $due_paid_amount, $total_due_amount, acss.has_token, mpod.show_into_receipt, mpo.id as medical_product_id, mpo.payment_status, mpod.id, mpod.created, mpod.thinapp_id, mpod.tax_value, mpod.discount_amount, IFNULL(ac.address,c.patient_address) as patient_address, IFNULL(ac.gender,c.gender) as gender, IFNULL(ac.height,c.height) as height, IFNULL(ac.weight,c.weight) as weight, IFNULL(hpt.name,'Cash') as payment_type_name, IFNULL(ac.uhid,c.uhid) as uhid, mpo.created as billing_date, acss.slot_time, IFNULL(ac.relation_prefix,c.relation_prefix) as relation_prefix, IFNULL(ac.parents_name,c.parents_name) as parents_name, IFNULL(mp.name,service) as service_name, mpod.product_price, mpod.total_amount, mpod.tax_type, mpod.quantity, acss.created as appointment_created ,acss.queue_number, t.name as app_name, t.logo, t.receipt_top_left_title, t.receipt_header_title, t.receipt_footer_title, department.name as department_name, aa.address, biller.name as created_by, app_staff.name as consult_with, CONCAT(IFNULL(ac.title,c.title),' ',acss.appointment_patient_name) as patient_name, IFNULL(ac.mobile,c.mobile) as mobile, IFNULL(IF(ac.dob !='0000-00-00' AND ac.dob !='' ,ac.dob, age),c.dob) as age from medical_product_orders as mpo join thinapps as t on t.id = mpo.thinapp_id  left join appointment_customer_staff_services as acss ON acss.id = mpo.appointment_customer_staff_service_id left join appointment_customers as ac on ac.id = acss.appointment_customer_id left join childrens as c on c.id = acss.children_id  left join hospital_payment_types as hpt on hpt.id = mpo.hospital_payment_type_id left join medical_product_order_details as mpod on mpod.medical_product_order_id = mpo.id  left join medical_product_quantities as mpq on mpod.medical_product_quantity_id = mpq.id left join appointment_staffs as app_staff on app_staff.id = acss.appointment_staff_id left join appointment_staffs as biller on biller.user_id =mpo.created_by_user_id and biller.status = 'ACTIVE' and biller.thinapp_id = mpo.thinapp_id and biller.staff_type IN('DOCTOR','RECEPTIONIST') left join medical_products as mp on mp.id = mpod.medical_product_id left join appointment_categories as department on department.id= app_staff.appointment_category_id left join appointment_addresses as aa on aa.id= acss.appointment_address_id WHERE mpo.id = $orderId and mpo.status = 'ACTIVE' GROUP BY mpod.id";
                $connection = ConnectionUtil::getConnection();
                $list_obj = $connection->query($query);
                if ($list_obj->num_rows) {
                    $invoiceData = mysqli_fetch_all($list_obj, MYSQLI_ASSOC);
                }

            }
        }
        else if($invoice_type == "IPD"){
            $order_id = base64_decode($order_id);
            if ($order_id){
             $query = "select mpod.days, hi.admit_status, mpo.receipt_id, mpo.is_refunded, t.show_time_on_receipt, t.show_date_on_receipt, t.show_paid_user_order_number_on_receipt, mpo.paid_receipt_number, t.show_department_on_receipt, t.show_patient_mobile_on_receipt,  mpq.expiry_date, mpo.bill_id, mpq.batch, t.show_token_on_receipt, t.show_token_time_on_receipt, t.show_doctor_on_receipt, mpo.reffered_by_name, t.show_referrer_on_receipt, mpo.total_amount as total_paid,   (SELECT pda.amount FROM patient_due_amounts AS pda WHERE pda.settlement_by_order_id = mpo.id AND pda.paid_via_patient ='YES' AND pda.payment_status = 'PAID' AND pda.status='ACTIVE' order by pda.id desc limit 1) AS due_paid_amount ,  (SELECT SUM(pda.amount) FROM patient_due_amounts AS pda WHERE  pda.medical_product_order_id = mpo.id and pda.paid_via_patient = 'NO' ) AS total_due_amount , 'YES' AS show_into_receipt, hi.admit_date, hi.ipd_unique_id,  mpo.payment_status,  mpo.hospital_ipd_id, mpo.is_package, mpo.id as medical_product_id, mpod.id, mpod.created, mpod.thinapp_id, mpod.tax_value, mpod.discount_amount, IFNULL(ac.address,c.patient_address) as patient_address, IFNULL(ac.height,c.height) as height, IFNULL(ac.weight,c.weight) as weight, IFNULL(ac.gender,c.gender) as gender,  IFNULL(hpt.name,'Cash') as payment_type_name, IFNULL(ac.uhid,c.uhid) as uhid, mpo.created as billing_date, IFNULL(ac.relation_prefix,c.relation_prefix) as relation_prefix, IFNULL(ac.parents_name,c.parents_name) as parents_name,  IFNULL(mp.name,service) as service_name, mpod.product_price, mpod.total_amount, mpod.tax_type, mpod.quantity, mpo.created AS created , t.name as app_name, t.logo, t.receipt_top_left_title, t.receipt_header_title, t.receipt_footer_title, department.name as department_name, aa.address, biller.name as created_by, IFNULL((SELECT GROUP_CONCAT(doctor.name) FROM appointment_staffs AS doctor left JOIN appointment_categories AS department ON department.id = doctor.appointment_category_id WHERE doctor.id IN (SELECT (mpod.appointment_staff_id) FROM medical_product_order_details AS mpod WHERE mpod.medical_product_order_id = mpo.id )),app_staff.name) as consult_with, CONCAT(IFNULL(ac.title,c.title),' ',IFNULL(ac.first_name,c.child_name)) as patient_name, IFNULL(ac.mobile,c.mobile) as mobile, IFNULL(IF(ac.dob !='0000-00-00' AND ac.dob !='' ,ac.dob, age),c.dob) as age FROM medical_product_orders as mpo   LEFT  join appointment_customers as ac on ac.id = mpo.appointment_customer_id left join childrens as c on c.id = mpo.children_id left join hospital_payment_types as hpt on hpt.id = mpo.hospital_payment_type_id  left join medical_product_order_details as mpod on mpod.medical_product_order_id = mpo.id  left join medical_product_quantities as mpq on mpod.medical_product_quantity_id = mpq.id  left join appointment_staffs as app_staff on app_staff.id = mpo.appointment_staff_id left join hospital_ipd  as hi on hi.id = mpo.hospital_ipd_id left join appointment_staffs as biller on biller.user_id =mpo.created_by_user_id and biller.status = 'ACTIVE' and biller.thinapp_id = mpo.thinapp_id and biller.staff_type IN('DOCTOR','RECEPTIONIST') left join medical_products as mp on mp.id = mpod.medical_product_id left join appointment_categories as department on department.id= app_staff.appointment_category_id join thinapps as t on t.id = mpo.thinapp_id left join appointment_addresses as aa on aa.id= mpo.appointment_address_id left JOIN appointment_categories AS category ON category.id = app_staff.id where mpo.id = $order_id and mpo.status = 'ACTIVE' GROUP BY mpod.id";
               
            //    $query = "select mpo.receipt_id, mpo.is_refunded, t.show_time_on_receipt, t.show_date_on_receipt, t.show_paid_user_order_number_on_receipt, mpo.paid_receipt_number, t.show_department_on_receipt, t.show_patient_mobile_on_receipt,  mpq.expiry_date, mpo.bill_id, mpq.batch, t.show_token_on_receipt, t.show_token_time_on_receipt, t.show_doctor_on_receipt, mpo.reffered_by_name, t.show_referrer_on_receipt, mpo.total_amount as total_paid,   (SELECT pda.amount FROM patient_due_amounts AS pda WHERE pda.settlement_by_order_id = mpo.id AND pda.paid_via_patient ='YES' AND pda.payment_status = 'PAID' AND pda.status='ACTIVE' order by pda.id desc limit 1) AS due_paid_amount ,  (SELECT SUM(pda.amount) FROM patient_due_amounts AS pda WHERE  pda.medical_product_order_id = mpo.id and pda.paid_via_patient = 'NO' ) AS total_due_amount , 'YES' AS show_into_receipt, hi.admit_date, hi.ipd_unique_id,  mpo.payment_status,  mpo.hospital_ipd_id, mpo.is_package, mpo.id as medical_product_id, mpod.id, mpod.created, mpod.thinapp_id, mpod.tax_value, mpod.discount_amount, IFNULL(ac.address,c.patient_address) as patient_address, IFNULL(ac.height,c.height) as height, IFNULL(ac.weight,c.weight) as weight, IFNULL(ac.gender,c.gender) as gender,  IFNULL(hpt.name,'Cash') as payment_type_name, IFNULL(ac.uhid,c.uhid) as uhid, mpo.created as billing_date, IFNULL(ac.relation_prefix,c.relation_prefix) as relation_prefix, IFNULL(ac.parents_name,c.parents_name) as parents_name,  IFNULL(mp.name,service) as service_name, mpod.product_price, mpod.total_amount, mpod.tax_type, mpod.quantity, mpo.created AS created , t.name as app_name, t.logo, t.receipt_top_left_title, t.receipt_header_title, t.receipt_footer_title, IFNULL((SELECT GROUP_CONCAT(department.name) FROM appointment_staffs AS doctor left JOIN appointment_categories AS department ON department.id = doctor.appointment_category_id WHERE doctor.id IN (SELECT (mpod.appointment_staff_id) FROM medical_product_order_details AS mpod WHERE mpod.medical_product_order_id = mpo.id )),category.name) as department_name, aa.address, biller.name as created_by, IFNULL((SELECT GROUP_CONCAT(doctor.name) FROM appointment_staffs AS doctor left JOIN appointment_categories AS department ON department.id = doctor.appointment_category_id WHERE doctor.id IN (SELECT (mpod.appointment_staff_id) FROM medical_product_order_details AS mpod WHERE mpod.medical_product_order_id = mpo.id )),app_staff.name) as consult_with, CONCAT(IFNULL(ac.title,c.title),' ',IFNULL(ac.first_name,c.child_name)) as patient_name, IFNULL(ac.mobile,c.mobile) as mobile, IFNULL(IF(ac.dob !='0000-00-00' AND ac.dob !='' ,ac.dob, age),c.dob) as age FROM medical_product_orders as mpo   LEFT  join appointment_customers as ac on ac.id = mpo.appointment_customer_id left join childrens as c on c.id = mpo.children_id left join hospital_payment_types as hpt on hpt.id = mpo.hospital_payment_type_id  left join medical_product_order_details as mpod on mpod.medical_product_order_id = mpo.id  left join medical_product_quantities as mpq on mpod.medical_product_quantity_id = mpq.id  left join appointment_staffs as app_staff on app_staff.id = mpo.appointment_staff_id left join hospital_ipd  as hi on hi.id = mpo.hospital_ipd_id left join appointment_staffs as biller on biller.user_id =mpo.created_by_user_id and biller.status = 'ACTIVE' and biller.thinapp_id = mpo.thinapp_id and biller.staff_type IN('DOCTOR','RECEPTIONIST') left join medical_products as mp on mp.id = mpod.medical_product_id left join appointment_categories as department on department.id= app_staff.appointment_category_id join thinapps as t on t.id = mpo.thinapp_id left join appointment_addresses as aa on aa.id= mpo.appointment_address_id left JOIN appointment_categories AS category ON category.id = app_staff.id where mpo.id = $order_id and mpo.status = 'ACTIVE' GROUP BY mpod.id";
                $connection = ConnectionUtil::getConnection();
                $list_obj = $connection->query($query);
                if ($list_obj->num_rows) {
                    $invoiceData = mysqli_fetch_all($list_obj, MYSQLI_ASSOC);
                }
            }

        }
        else if($invoice_type == "IAD"){
            $order_id = base64_decode($order_id);
            if ($order_id){
                $query = "select mpod.days, hi.admit_status, mpo.receipt_id, mpo.is_refunded, t.show_time_on_receipt, t.show_date_on_receipt, t.show_paid_user_order_number_on_receipt, mpo.paid_receipt_number, t.show_department_on_receipt, t.show_patient_mobile_on_receipt,  mpq.expiry_date, mpo.bill_id, mpq.batch, t.show_token_on_receipt, t.show_token_time_on_receipt, t.show_doctor_on_receipt, mpo.reffered_by_name, t.show_referrer_on_receipt, 'YES' AS show_into_receipt, hi.admit_date, hi.ipd_unique_id,  mpo.payment_status,  mpo.hospital_ipd_id, mpo.is_package, mpo.id as medical_product_id, mpod.id, mpod.created, mpod.thinapp_id, mpod.tax_value, mpod.discount_amount, IFNULL(ac.address,c.patient_address) as patient_address,IFNULL(ac.height,c.height) as height, IFNULL(ac.weight,c.weight) as weight, IFNULL(ac.gender,c.gender) as gender,  IFNULL(hpt.name,'Cash') as payment_type_name, IFNULL(ac.uhid,c.uhid) as uhid, mpo.created as billing_date, IFNULL(ac.relation_prefix,c.relation_prefix) as relation_prefix, IFNULL(ac.parents_name,c.parents_name) as parents_name,  'Deposit' as service_name,  mpo.total_amount, mpo.total_amount as product_price, mpod.tax_type, '1' as quantity, mpo.created AS created , t.name as app_name, t.logo, t.receipt_top_left_title, t.receipt_header_title, t.receipt_footer_title, department.name as department_name, aa.address, biller.name as created_by, app_staff.name as consult_with, CONCAT(IFNULL(ac.title,c.title),' ',IFNULL(ac.first_name,c.child_name)) as patient_name, IFNULL(ac.mobile,c.mobile) as mobile, IFNULL(IF(ac.dob !='0000-00-00' AND ac.dob !='' ,ac.dob, age),c.dob) as age FROM medical_product_orders as mpo   LEFT  join appointment_customers as ac on ac.id = mpo.appointment_customer_id left join childrens as c on c.id = mpo.children_id left join hospital_payment_types as hpt on hpt.id = mpo.hospital_payment_type_id  left join medical_product_order_details as mpod on mpod.medical_product_order_id = mpo.id left join medical_product_quantities as mpq on mpod.medical_product_quantity_id = mpq.id left join appointment_staffs as app_staff on app_staff.id = mpo.appointment_staff_id left join hospital_ipd  as hi on hi.id = mpo.hospital_ipd_id left join appointment_staffs as biller on biller.user_id =mpo.created_by_user_id and biller.status = 'ACTIVE' and biller.thinapp_id = mpo.thinapp_id and biller.staff_type IN('DOCTOR','RECEPTIONIST') left join medical_products as mp on mp.id = mpod.medical_product_id left join  appointment_categories as department on department.id= app_staff.appointment_category_id join thinapps as t on t.id = mpo.thinapp_id left join appointment_addresses as aa on aa.id= mpo.appointment_address_id where mpo.id = $order_id and mpo.status = 'ACTIVE' GROUP BY mpod.id";
                $connection = ConnectionUtil::getConnection();
                $list_obj = $connection->query($query);
                if ($list_obj->num_rows) {
                    $invoiceData = mysqli_fetch_all($list_obj, MYSQLI_ASSOC);
                }
            }
            $invoice_type = 'IPD_ADVANCE_DEPOSIT';
        }
        else if($invoice_type == "DUE"){
            $order_id = base64_decode($order_id);
            if ($order_id){
                $query = "select mpo.receipt_id, mpo.is_refunded, t.show_time_on_receipt, t.show_date_on_receipt, t.show_paid_user_order_number_on_receipt, mpo.paid_receipt_number, t.show_department_on_receipt, t.show_patient_mobile_on_receipt,  mpq.expiry_date, mpo.bill_id, mpq.batch, t.show_token_on_receipt, t.show_token_time_on_receipt, t.show_doctor_on_receipt, mpo.reffered_by_name, t.show_referrer_on_receipt, mpo.total_amount as total_paid,  $due_paid_amount, $total_due_amount, 'YES' AS show_into_receipt, hi.admit_date, hi.ipd_unique_id,  mpo.payment_status,  mpo.hospital_ipd_id, mpo.is_package, mpo.id as medical_product_id, mpod.id, mpod.created, mpod.thinapp_id, mpod.tax_value, mpod.discount_amount, IFNULL(ac.address,c.patient_address) as patient_address,IFNULL(ac.height,c.height) as height, IFNULL(ac.weight,c.weight) as weight, IFNULL(ac.gender,c.gender) as gender,  IFNULL(hpt.name,'Cash') as payment_type_name, IFNULL(ac.uhid,c.uhid) as uhid, mpo.created as billing_date, IFNULL(ac.relation_prefix,c.relation_prefix) as relation_prefix, IFNULL(ac.parents_name,c.parents_name) as parents_name,  IFNULL(mp.name,service) as service_name, mpod.product_price, mpod.total_amount, mpod.tax_type, mpod.quantity, mpo.created AS created , t.name as app_name, t.logo, t.receipt_top_left_title, t.receipt_header_title, t.receipt_footer_title, (SELECT aa.address FROM appointment_addresses AS aa WHERE aa.thinapp_id = mpod.thinapp_id AND aa.status='ACTIVE' LIMIT 1) AS address, biller.name as created_by, app_staff.name as consult_with, CONCAT(IFNULL(ac.title,c.title),' ',IFNULL(ac.first_name,c.child_name)) as patient_name, IFNULL(ac.mobile,c.mobile) as mobile, IFNULL(IF(ac.dob !='0000-00-00' AND ac.dob !='' ,ac.dob, age),c.dob) as age FROM medical_product_orders as mpo   LEFT  join appointment_customers as ac on ac.id = mpo.appointment_customer_id left join childrens as c on c.id = mpo.children_id left join hospital_payment_types as hpt on hpt.id = mpo.hospital_payment_type_id  left join medical_product_order_details as mpod on mpod.medical_product_order_id = mpo.id  left join medical_product_quantities as mpq on mpod.medical_product_quantity_id = mpq.id left join appointment_staffs as app_staff on app_staff.id = mpo.appointment_staff_id left join hospital_ipd  as hi on hi.id = mpo.hospital_ipd_id left join appointment_staffs as biller on biller.user_id =mpo.created_by_user_id and biller.status = 'ACTIVE' and biller.thinapp_id = mpo.thinapp_id and biller.staff_type IN('DOCTOR','RECEPTIONIST') left join medical_products as mp on mp.id = mpod.medical_product_id  join thinapps as t on t.id = mpo.thinapp_id  where mpo.id = $order_id and mpo.status = 'ACTIVE' GROUP BY mpod.id";
                $connection = ConnectionUtil::getConnection();
                $list_obj = $connection->query($query);
                if ($list_obj->num_rows) {
                    $invoiceData = mysqli_fetch_all($list_obj, MYSQLI_ASSOC);
                }
            }

        }
        else {
            exit();
        }

        if(!empty($invoiceData)){
            $this->set(compact('invoiceData','invoice_type'));
        }
        else{
            die('Invalid Request');
        }

    }

	public function print_invoice($order_id,$invoice_type = "OPD")
    {
        $this->layout = false;
        $invoiceData = array();
        $due_paid_amount = " (SELECT pda.amount FROM patient_due_amounts AS pda WHERE pda.settlement_by_order_id = mpo.id AND pda.paid_via_patient ='YES' AND pda.payment_status = 'PAID' AND pda.status='ACTIVE' order by pda.id desc limit 1) AS due_paid_amount ";
        $total_due_amount = " (SELECT SUM(pda.amount) FROM patient_due_amounts AS pda WHERE  pda.medical_product_order_id = mpo.id and pda.paid_via_patient = 'NO' ) AS total_due_amount ";

        if($invoice_type == "OPD"){
            $orderId = base64_decode($order_id);
            if ($orderId){
                $query = "SELECT final.* FROM ( select mpod.days, mpo.receipt_id, mpo.is_refunded, t.show_time_on_receipt, t.show_date_on_receipt, t.show_paid_user_order_number_on_receipt, mpo.paid_receipt_number,  acss.emergency_appointment, t.show_department_on_receipt, t.show_patient_mobile_on_receipt, mpo.appointment_customer_staff_service_id as appointment_id, mpq.expiry_date, mpo.bill_id, mpq.batch, t.show_token_on_receipt, t.show_token_time_on_receipt, t.show_doctor_on_receipt, mpo.reffered_by_name, t.show_referrer_on_receipt, mpo.total_amount as total_paid, $due_paid_amount, $total_due_amount, acss.has_token, mpod.show_into_receipt, mpo.id as medical_product_id, mpo.payment_status, mpod.id, mpod.created, mpod.thinapp_id, mpod.tax_value, mpod.discount_amount, IFNULL(ac.address,c.patient_address) as patient_address, IFNULL(ac.gender,c.gender) as gender, IFNULL(ac.height,c.height) as height, IFNULL(ac.weight,c.weight) as weight, IFNULL(hpt.name,'Cash') as payment_type_name, IFNULL(ac.uhid,c.uhid) as uhid, mpo.created as billing_date, acss.slot_time, IFNULL(ac.relation_prefix,c.relation_prefix) as relation_prefix, IFNULL(ac.parents_name,c.parents_name) as parents_name, IFNULL(mp.name,service) as service_name, mpod.product_price, mpod.total_amount, mpod.tax_type, mpod.quantity, acss.created as appointment_created ,acss.queue_number, t.name as app_name, t.logo, t.receipt_top_left_title, t.receipt_header_title, t.receipt_footer_title, department.name as department_name, aa.address, biller.name as created_by, app_staff.name as consult_with, CONCAT(IFNULL(ac.title,c.title),' ',acss.appointment_patient_name) as patient_name, IFNULL(ac.mobile,c.mobile) as mobile, IFNULL(IF(ac.dob !='0000-00-00' AND ac.dob !='' ,ac.dob, age),c.dob) as age from medical_product_orders as mpo join thinapps as t on t.id = mpo.thinapp_id  left join appointment_customer_staff_services as acss ON acss.id = mpo.appointment_customer_staff_service_id left join appointment_customers as ac on ac.id = acss.appointment_customer_id left join childrens as c on c.id = acss.children_id  left join hospital_payment_types as hpt on hpt.id = mpo.hospital_payment_type_id left join medical_product_order_details as mpod on mpod.medical_product_order_id = mpo.id  left join medical_product_quantities as mpq on mpod.medical_product_quantity_id = mpq.id left join appointment_staffs as app_staff on app_staff.id = acss.appointment_staff_id left join appointment_staffs as biller on biller.user_id =mpo.created_by_user_id and biller.status = 'ACTIVE' and biller.thinapp_id = mpo.thinapp_id and biller.staff_type IN('DOCTOR','RECEPTIONIST') left join medical_products as mp on mp.id = mpod.medical_product_id left join appointment_categories as department on department.id= app_staff.appointment_category_id left join appointment_addresses as aa on aa.id= acss.appointment_address_id WHERE mpo.id = $orderId and mpo.status = 'ACTIVE' GROUP BY mpod.id UNION ALL select mpod.days, mpo.receipt_id, mpo.is_refunded, t.show_time_on_receipt, t.show_date_on_receipt, t.show_paid_user_order_number_on_receipt, mpo.paid_receipt_number,  acss.emergency_appointment, t.show_department_on_receipt, t.show_patient_mobile_on_receipt, mpo.appointment_customer_staff_service_id as appointment_id, mpq.expiry_date, mpo.bill_id, mpq.batch, t.show_token_on_receipt, t.show_token_time_on_receipt, t.show_doctor_on_receipt, mpo.reffered_by_name, t.show_referrer_on_receipt, mpo.total_amount as total_paid, $due_paid_amount, $total_due_amount, acss.has_token, mpod.show_into_receipt, mpo.id as medical_product_id, mpo.payment_status, mpod.id, mpod.created, mpod.thinapp_id, mpod.tax_value, mpod.discount_amount, IFNULL(ac.address,c.patient_address) as patient_address, IFNULL(ac.gender,c.gender) as gender, IFNULL(ac.height,c.height) as height, IFNULL(ac.weight,c.weight) as weight, IFNULL(hpt.name,'Cash') as payment_type_name, IFNULL(ac.uhid,c.uhid) as uhid, mpo.created as billing_date, acss.slot_time, IFNULL(ac.relation_prefix,c.relation_prefix) as relation_prefix, IFNULL(ac.parents_name,c.parents_name) as parents_name, IFNULL(mp.name,service) as service_name, mpod.product_price, mpod.total_amount, mpod.tax_type, mpod.quantity, acss.created as appointment_created ,acss.queue_number, t.name as app_name, t.logo, t.receipt_top_left_title, t.receipt_header_title, t.receipt_footer_title, department.name as department_name, aa.address, biller.name as created_by, app_staff.name as consult_with, CONCAT(IFNULL(ac.title,c.title),' ',acss.appointment_patient_name) as patient_name, IFNULL(ac.mobile,c.mobile) as mobile, IFNULL(IF(ac.dob !='0000-00-00' AND ac.dob !='' ,ac.dob, age),c.dob) as age from medical_product_orders_archive as mpo join thinapps as t on t.id = mpo.thinapp_id  left join appointment_customer_staff_services_archive as acss ON acss.id = mpo.appointment_customer_staff_service_id left join appointment_customers as ac on ac.id = acss.appointment_customer_id left join childrens as c on c.id = acss.children_id  left join hospital_payment_types as hpt on hpt.id = mpo.hospital_payment_type_id left join medical_product_order_details_archive as mpod on mpod.medical_product_order_id = mpo.id  left join medical_product_quantities as mpq on mpod.medical_product_quantity_id = mpq.id left join appointment_staffs as app_staff on app_staff.id = acss.appointment_staff_id left join appointment_staffs as biller on biller.user_id =mpo.created_by_user_id and biller.status = 'ACTIVE' and biller.thinapp_id = mpo.thinapp_id and biller.staff_type IN('DOCTOR','RECEPTIONIST') left join medical_products as mp on mp.id = mpod.medical_product_id left join appointment_categories as department on department.id= app_staff.appointment_category_id left join appointment_addresses as aa on aa.id= acss.appointment_address_id WHERE mpo.id = $orderId and mpo.status = 'ACTIVE' GROUP BY mpod.id) as final";
                $connection = ConnectionUtil::getConnection();
                $list_obj = $connection->query($query);
                if ($list_obj->num_rows) {
                    $invoiceData = mysqli_fetch_all($list_obj, MYSQLI_ASSOC);
                }

            }
        }
        else if($invoice_type == "IPD"){
            $order_id = base64_decode($order_id);
            if ($order_id){
                $query = "select final.* from (select mpod.days, hi.admit_status, mpo.receipt_id, mpo.is_refunded, t.show_time_on_receipt, t.show_date_on_receipt, t.show_paid_user_order_number_on_receipt, mpo.paid_receipt_number, t.show_department_on_receipt, t.show_patient_mobile_on_receipt,  mpq.expiry_date, mpo.bill_id, mpq.batch, t.show_token_on_receipt, t.show_token_time_on_receipt, t.show_doctor_on_receipt, mpo.reffered_by_name, t.show_referrer_on_receipt, mpo.total_amount as total_paid,   (SELECT pda.amount FROM patient_due_amounts AS pda WHERE pda.settlement_by_order_id = mpo.id AND pda.paid_via_patient ='YES' AND pda.payment_status = 'PAID' AND pda.status='ACTIVE' order by pda.id desc limit 1) AS due_paid_amount ,  (SELECT SUM(pda.amount) FROM patient_due_amounts AS pda WHERE  pda.medical_product_order_id = mpo.id and pda.paid_via_patient = 'NO' ) AS total_due_amount , 'YES' AS show_into_receipt, hi.admit_date, hi.ipd_unique_id,  mpo.payment_status,  mpo.hospital_ipd_id, mpo.is_package, mpo.id as medical_product_id, mpod.id, mpod.thinapp_id, mpod.tax_value, mpod.discount_amount, IFNULL(ac.address,c.patient_address) as patient_address, IFNULL(ac.height,c.height) as height, IFNULL(ac.weight,c.weight) as weight, IFNULL(ac.gender,c.gender) as gender,  IFNULL(hpt.name,'Cash') as payment_type_name, IFNULL(ac.uhid,c.uhid) as uhid, mpo.created as billing_date, IFNULL(ac.relation_prefix,c.relation_prefix) as relation_prefix, IFNULL(ac.parents_name,c.parents_name) as parents_name,  IFNULL(mp.name,service) as service_name, mpod.product_price, mpod.total_amount, mpod.tax_type, mpod.quantity, mpo.created AS created , t.name as app_name, t.logo, t.receipt_top_left_title, t.receipt_header_title, t.receipt_footer_title, department.name as department_name, aa.address, biller.name as created_by, IFNULL((SELECT GROUP_CONCAT(doctor.name) FROM appointment_staffs AS doctor left JOIN appointment_categories AS department ON department.id = doctor.appointment_category_id WHERE doctor.id IN (SELECT (mpod.appointment_staff_id) FROM medical_product_order_details AS mpod WHERE mpod.medical_product_order_id = mpo.id )),app_staff.name) as consult_with, CONCAT(IFNULL(ac.title,c.title),' ',IFNULL(ac.first_name,c.child_name)) as patient_name, IFNULL(ac.mobile,c.mobile) as mobile, IFNULL(IF(ac.dob !='0000-00-00' AND ac.dob !='' ,ac.dob, age),c.dob) as age FROM medical_product_orders as mpo   LEFT  join appointment_customers as ac on ac.id = mpo.appointment_customer_id left join childrens as c on c.id = mpo.children_id left join hospital_payment_types as hpt on hpt.id = mpo.hospital_payment_type_id  left join medical_product_order_details as mpod on mpod.medical_product_order_id = mpo.id  left join medical_product_quantities as mpq on mpod.medical_product_quantity_id = mpq.id  left join appointment_staffs as app_staff on app_staff.id = mpo.appointment_staff_id left join hospital_ipd  as hi on hi.id = mpo.hospital_ipd_id left join appointment_staffs as biller on biller.user_id =mpo.created_by_user_id and biller.status = 'ACTIVE' and biller.thinapp_id = mpo.thinapp_id and biller.staff_type IN('DOCTOR','RECEPTIONIST') left join medical_products as mp on mp.id = mpod.medical_product_id left join appointment_categories as department on department.id= app_staff.appointment_category_id join thinapps as t on t.id = mpo.thinapp_id left join appointment_addresses as aa on aa.id= mpo.appointment_address_id left JOIN appointment_categories AS category ON category.id = app_staff.id where mpo.id = $order_id and mpo.status = 'ACTIVE' GROUP BY mpod.id UNION ALL select mpod.days, hi.admit_status, mpo.receipt_id, mpo.is_refunded, t.show_time_on_receipt, t.show_date_on_receipt, t.show_paid_user_order_number_on_receipt, mpo.paid_receipt_number, t.show_department_on_receipt, t.show_patient_mobile_on_receipt,  mpq.expiry_date, mpo.bill_id, mpq.batch, t.show_token_on_receipt, t.show_token_time_on_receipt, t.show_doctor_on_receipt, mpo.reffered_by_name, t.show_referrer_on_receipt, mpo.total_amount as total_paid,   (SELECT pda.amount FROM patient_due_amounts AS pda WHERE pda.settlement_by_order_id = mpo.id AND pda.paid_via_patient ='YES' AND pda.payment_status = 'PAID' AND pda.status='ACTIVE' order by pda.id desc limit 1) AS due_paid_amount ,  (SELECT SUM(pda.amount) FROM patient_due_amounts AS pda WHERE  pda.medical_product_order_id = mpo.id and pda.paid_via_patient = 'NO' ) AS total_due_amount , 'YES' AS show_into_receipt, hi.admit_date, hi.ipd_unique_id,  mpo.payment_status,  mpo.hospital_ipd_id, mpo.is_package, mpo.id as medical_product_id, mpod.id, mpod.thinapp_id, mpod.tax_value, mpod.discount_amount, IFNULL(ac.address,c.patient_address) as patient_address, IFNULL(ac.height,c.height) as height, IFNULL(ac.weight,c.weight) as weight, IFNULL(ac.gender,c.gender) as gender,  IFNULL(hpt.name,'Cash') as payment_type_name, IFNULL(ac.uhid,c.uhid) as uhid, mpo.created as billing_date, IFNULL(ac.relation_prefix,c.relation_prefix) as relation_prefix, IFNULL(ac.parents_name,c.parents_name) as parents_name,  IFNULL(mp.name,service) as service_name, mpod.product_price, mpod.total_amount, mpod.tax_type, mpod.quantity, mpo.created AS created , t.name as app_name, t.logo, t.receipt_top_left_title, t.receipt_header_title, t.receipt_footer_title, department.name as department_name, aa.address, biller.name as created_by, IFNULL((SELECT GROUP_CONCAT(doctor.name) FROM appointment_staffs AS doctor left JOIN appointment_categories AS department ON department.id = doctor.appointment_category_id WHERE doctor.id IN (SELECT (mpod.appointment_staff_id) FROM medical_product_order_details_archive AS mpod WHERE mpod.medical_product_order_id = mpo.id )),app_staff.name) as consult_with, CONCAT(IFNULL(ac.title,c.title),' ',IFNULL(ac.first_name,c.child_name)) as patient_name, IFNULL(ac.mobile,c.mobile) as mobile, IFNULL(IF(ac.dob !='0000-00-00' AND ac.dob !='' ,ac.dob, age),c.dob) as age FROM medical_product_orders_archive as mpo   LEFT  join appointment_customers as ac on ac.id = mpo.appointment_customer_id left join childrens as c on c.id = mpo.children_id left join hospital_payment_types as hpt on hpt.id = mpo.hospital_payment_type_id  left join medical_product_order_details_archive as mpod on mpod.medical_product_order_id = mpo.id  left join medical_product_quantities as mpq on mpod.medical_product_quantity_id = mpq.id  left join appointment_staffs as app_staff on app_staff.id = mpo.appointment_staff_id left join hospital_ipd  as hi on hi.id = mpo.hospital_ipd_id left join appointment_staffs as biller on biller.user_id =mpo.created_by_user_id and biller.status = 'ACTIVE' and biller.thinapp_id = mpo.thinapp_id and biller.staff_type IN('DOCTOR','RECEPTIONIST') left join medical_products as mp on mp.id = mpod.medical_product_id left join appointment_categories as department on department.id= app_staff.appointment_category_id join thinapps as t on t.id = mpo.thinapp_id left join appointment_addresses as aa on aa.id= mpo.appointment_address_id left JOIN appointment_categories AS category ON category.id = app_staff.id where mpo.id = $order_id and mpo.status = 'ACTIVE' GROUP BY mpod.id) AS final";
                $connection = ConnectionUtil::getConnection();
                $list_obj = $connection->query($query);
                if ($list_obj->num_rows) {
                    $invoiceData = mysqli_fetch_all($list_obj, MYSQLI_ASSOC);
                }
            }

        }
        else if($invoice_type == "IAD"){
            $order_id = base64_decode($order_id);
            if ($order_id){
                $query = "select final.* from (select mpod.days, hi.admit_status, mpo.receipt_id, mpo.is_refunded, t.show_time_on_receipt, t.show_date_on_receipt, t.show_paid_user_order_number_on_receipt, mpo.paid_receipt_number, t.show_department_on_receipt, t.show_patient_mobile_on_receipt,  mpq.expiry_date, mpo.bill_id, mpq.batch, t.show_token_on_receipt, t.show_token_time_on_receipt, t.show_doctor_on_receipt, mpo.reffered_by_name, t.show_referrer_on_receipt, 'YES' AS show_into_receipt, hi.admit_date, hi.ipd_unique_id,  mpo.payment_status,  mpo.hospital_ipd_id, mpo.is_package, mpo.id as medical_product_id, mpod.id,  mpod.thinapp_id, mpod.tax_value, mpod.discount_amount, IFNULL(ac.address,c.patient_address) as patient_address,IFNULL(ac.height,c.height) as height, IFNULL(ac.weight,c.weight) as weight, IFNULL(ac.gender,c.gender) as gender,  IFNULL(hpt.name,'Cash') as payment_type_name, IFNULL(ac.uhid,c.uhid) as uhid, mpo.created as billing_date, IFNULL(ac.relation_prefix,c.relation_prefix) as relation_prefix, IFNULL(ac.parents_name,c.parents_name) as parents_name,  'Deposit' as service_name,  mpo.total_amount, mpo.total_amount as product_price, mpod.tax_type, '1' as quantity, mpo.created AS created , t.name as app_name, t.logo, t.receipt_top_left_title, t.receipt_header_title, t.receipt_footer_title, department.name as department_name, aa.address, biller.name as created_by, app_staff.name as consult_with, CONCAT(IFNULL(ac.title,c.title),' ',IFNULL(ac.first_name,c.child_name)) as patient_name, IFNULL(ac.mobile,c.mobile) as mobile, IFNULL(IF(ac.dob !='0000-00-00' AND ac.dob !='' ,ac.dob, age),c.dob) as age FROM medical_product_orders as mpo   LEFT  join appointment_customers as ac on ac.id = mpo.appointment_customer_id left join childrens as c on c.id = mpo.children_id left join hospital_payment_types as hpt on hpt.id = mpo.hospital_payment_type_id  left join medical_product_order_details as mpod on mpod.medical_product_order_id = mpo.id left join medical_product_quantities as mpq on mpod.medical_product_quantity_id = mpq.id left join appointment_staffs as app_staff on app_staff.id = mpo.appointment_staff_id left join hospital_ipd  as hi on hi.id = mpo.hospital_ipd_id left join appointment_staffs as biller on biller.user_id =mpo.created_by_user_id and biller.status = 'ACTIVE' and biller.thinapp_id = mpo.thinapp_id and biller.staff_type IN('DOCTOR','RECEPTIONIST') left join medical_products as mp on mp.id = mpod.medical_product_id left join  appointment_categories as department on department.id= app_staff.appointment_category_id join thinapps as t on t.id = mpo.thinapp_id left join appointment_addresses as aa on aa.id= mpo.appointment_address_id where mpo.id = $order_id and mpo.status = 'ACTIVE' GROUP BY mpod.id UNION ALL select mpod.days, hi.admit_status, mpo.receipt_id, mpo.is_refunded, t.show_time_on_receipt, t.show_date_on_receipt, t.show_paid_user_order_number_on_receipt, mpo.paid_receipt_number, t.show_department_on_receipt, t.show_patient_mobile_on_receipt,  mpq.expiry_date, mpo.bill_id, mpq.batch, t.show_token_on_receipt, t.show_token_time_on_receipt, t.show_doctor_on_receipt, mpo.reffered_by_name, t.show_referrer_on_receipt, 'YES' AS show_into_receipt, hi.admit_date, hi.ipd_unique_id,  mpo.payment_status,  mpo.hospital_ipd_id, mpo.is_package, mpo.id as medical_product_id, mpod.id,  mpod.thinapp_id, mpod.tax_value, mpod.discount_amount, IFNULL(ac.address,c.patient_address) as patient_address,IFNULL(ac.height,c.height) as height, IFNULL(ac.weight,c.weight) as weight, IFNULL(ac.gender,c.gender) as gender,  IFNULL(hpt.name,'Cash') as payment_type_name, IFNULL(ac.uhid,c.uhid) as uhid, mpo.created as billing_date, IFNULL(ac.relation_prefix,c.relation_prefix) as relation_prefix, IFNULL(ac.parents_name,c.parents_name) as parents_name,  'Deposit' as service_name,  mpo.total_amount, mpo.total_amount as product_price, mpod.tax_type, '1' as quantity, mpo.created AS created , t.name as app_name, t.logo, t.receipt_top_left_title, t.receipt_header_title, t.receipt_footer_title, department.name as department_name, aa.address, biller.name as created_by, app_staff.name as consult_with, CONCAT(IFNULL(ac.title,c.title),' ',IFNULL(ac.first_name,c.child_name)) as patient_name, IFNULL(ac.mobile,c.mobile) as mobile, IFNULL(IF(ac.dob !='0000-00-00' AND ac.dob !='' ,ac.dob, age),c.dob) as age FROM medical_product_orders_archive as mpo   LEFT  join appointment_customers as ac on ac.id = mpo.appointment_customer_id left join childrens as c on c.id = mpo.children_id left join hospital_payment_types as hpt on hpt.id = mpo.hospital_payment_type_id  left join medical_product_order_details_archive as mpod on mpod.medical_product_order_id = mpo.id left join medical_product_quantities as mpq on mpod.medical_product_quantity_id = mpq.id left join appointment_staffs as app_staff on app_staff.id = mpo.appointment_staff_id left join hospital_ipd  as hi on hi.id = mpo.hospital_ipd_id left join appointment_staffs as biller on biller.user_id =mpo.created_by_user_id and biller.status = 'ACTIVE' and biller.thinapp_id = mpo.thinapp_id and biller.staff_type IN('DOCTOR','RECEPTIONIST') left join medical_products as mp on mp.id = mpod.medical_product_id left join  appointment_categories as department on department.id= app_staff.appointment_category_id join thinapps as t on t.id = mpo.thinapp_id left join appointment_addresses as aa on aa.id= mpo.appointment_address_id where mpo.id = $order_id and mpo.status = 'ACTIVE' GROUP BY mpod.id) as final";
                $connection = ConnectionUtil::getConnection();
                $list_obj = $connection->query($query);
                if ($list_obj->num_rows) {
                    $invoiceData = mysqli_fetch_all($list_obj, MYSQLI_ASSOC);
                }
            }
            $invoice_type = 'IPD_ADVANCE_DEPOSIT';
        }
        else if($invoice_type == "DUE"){
            $order_id = base64_decode($order_id);
            if ($order_id){
                $query = "select final.* from(select  mpo.receipt_id, mpo.is_refunded, t.show_time_on_receipt, t.show_date_on_receipt, t.show_paid_user_order_number_on_receipt, mpo.paid_receipt_number, t.show_department_on_receipt, t.show_patient_mobile_on_receipt,  mpq.expiry_date, mpo.bill_id, mpq.batch, t.show_token_on_receipt, t.show_token_time_on_receipt, t.show_doctor_on_receipt, mpo.reffered_by_name, t.show_referrer_on_receipt, mpo.total_amount as total_paid,  $due_paid_amount, $total_due_amount, 'YES' AS show_into_receipt, hi.admit_date, hi.ipd_unique_id,  mpo.payment_status,  mpo.hospital_ipd_id, mpo.is_package, mpo.id as medical_product_id, mpod.id, mpod.thinapp_id, mpod.tax_value, mpod.discount_amount, IFNULL(ac.address,c.patient_address) as patient_address,IFNULL(ac.height,c.height) as height, IFNULL(ac.weight,c.weight) as weight, IFNULL(ac.gender,c.gender) as gender,  IFNULL(hpt.name,'Cash') as payment_type_name, IFNULL(ac.uhid,c.uhid) as uhid, mpo.created as billing_date, IFNULL(ac.relation_prefix,c.relation_prefix) as relation_prefix, IFNULL(ac.parents_name,c.parents_name) as parents_name,  IFNULL(mp.name,service) as service_name, mpod.product_price, mpod.total_amount, mpod.tax_type, mpod.quantity, mpo.created AS created , t.name as app_name, t.logo, t.receipt_top_left_title, t.receipt_header_title, t.receipt_footer_title, (SELECT aa.address FROM appointment_addresses AS aa WHERE aa.thinapp_id = mpod.thinapp_id AND aa.status='ACTIVE' LIMIT 1) AS address, biller.name as created_by, app_staff.name as consult_with, CONCAT(IFNULL(ac.title,c.title),' ',IFNULL(ac.first_name,c.child_name)) as patient_name, IFNULL(ac.mobile,c.mobile) as mobile, IFNULL(IF(ac.dob !='0000-00-00' AND ac.dob !='' ,ac.dob, age),c.dob) as age FROM medical_product_orders as mpo   LEFT  join appointment_customers as ac on ac.id = mpo.appointment_customer_id left join childrens as c on c.id = mpo.children_id left join hospital_payment_types as hpt on hpt.id = mpo.hospital_payment_type_id  left join medical_product_order_details as mpod on mpod.medical_product_order_id = mpo.id  left join medical_product_quantities as mpq on mpod.medical_product_quantity_id = mpq.id left join appointment_staffs as app_staff on app_staff.id = mpo.appointment_staff_id left join hospital_ipd  as hi on hi.id = mpo.hospital_ipd_id left join appointment_staffs as biller on biller.user_id =mpo.created_by_user_id and biller.status = 'ACTIVE' and biller.thinapp_id = mpo.thinapp_id and biller.staff_type IN('DOCTOR','RECEPTIONIST') left join medical_products as mp on mp.id = mpod.medical_product_id  join thinapps as t on t.id = mpo.thinapp_id  where mpo.id = $order_id and mpo.status = 'ACTIVE' GROUP BY mpod.id UNION ALL select  mpo.receipt_id, mpo.is_refunded, t.show_time_on_receipt, t.show_date_on_receipt, t.show_paid_user_order_number_on_receipt, mpo.paid_receipt_number, t.show_department_on_receipt, t.show_patient_mobile_on_receipt,  mpq.expiry_date, mpo.bill_id, mpq.batch, t.show_token_on_receipt, t.show_token_time_on_receipt, t.show_doctor_on_receipt, mpo.reffered_by_name, t.show_referrer_on_receipt, mpo.total_amount as total_paid,  $due_paid_amount, $total_due_amount, 'YES' AS show_into_receipt, hi.admit_date, hi.ipd_unique_id,  mpo.payment_status,  mpo.hospital_ipd_id, mpo.is_package, mpo.id as medical_product_id, mpod.id,  mpod.thinapp_id, mpod.tax_value, mpod.discount_amount, IFNULL(ac.address,c.patient_address) as patient_address,IFNULL(ac.height,c.height) as height, IFNULL(ac.weight,c.weight) as weight, IFNULL(ac.gender,c.gender) as gender,  IFNULL(hpt.name,'Cash') as payment_type_name, IFNULL(ac.uhid,c.uhid) as uhid, mpo.created as billing_date, IFNULL(ac.relation_prefix,c.relation_prefix) as relation_prefix, IFNULL(ac.parents_name,c.parents_name) as parents_name,  IFNULL(mp.name,service) as service_name, mpod.product_price, mpod.total_amount, mpod.tax_type, mpod.quantity, mpo.created AS created , t.name as app_name, t.logo, t.receipt_top_left_title, t.receipt_header_title, t.receipt_footer_title, (SELECT aa.address FROM appointment_addresses AS aa WHERE aa.thinapp_id = mpod.thinapp_id AND aa.status='ACTIVE' LIMIT 1) AS address, biller.name as created_by, app_staff.name as consult_with, CONCAT(IFNULL(ac.title,c.title),' ',IFNULL(ac.first_name,c.child_name)) as patient_name, IFNULL(ac.mobile,c.mobile) as mobile, IFNULL(IF(ac.dob !='0000-00-00' AND ac.dob !='' ,ac.dob, age),c.dob) as age FROM medical_product_orders as mpo   LEFT  join appointment_customers as ac on ac.id = mpo.appointment_customer_id left join childrens as c on c.id = mpo.children_id left join hospital_payment_types as hpt on hpt.id = mpo.hospital_payment_type_id  left join medical_product_order_details_archive as mpod on mpod.medical_product_order_id = mpo.id  left join medical_product_quantities as mpq on mpod.medical_product_quantity_id = mpq.id left join appointment_staffs as app_staff on app_staff.id = mpo.appointment_staff_id left join hospital_ipd  as hi on hi.id = mpo.hospital_ipd_id left join appointment_staffs as biller on biller.user_id =mpo.created_by_user_id and biller.status = 'ACTIVE' and biller.thinapp_id = mpo.thinapp_id and biller.staff_type IN('DOCTOR','RECEPTIONIST') left join medical_products as mp on mp.id = mpod.medical_product_id  join thinapps as t on t.id = mpo.thinapp_id  where mpo.id = $order_id and mpo.status = 'ACTIVE' GROUP BY mpod.id) as final";
                $connection = ConnectionUtil::getConnection();
                $list_obj = $connection->query($query);
                if ($list_obj->num_rows) {
                    $invoiceData = mysqli_fetch_all($list_obj, MYSQLI_ASSOC);
                }
            }

        }
        else {
            exit();
        }

        if(!empty($invoiceData)){
            $this->set(compact('invoiceData','invoice_type'));
        }
        else{
            die('Invalid Request');
        }

    }

    public function print_mini_invoice($appointmentID = null)
    {
        $this->layout = false;

        $appointmentID = base64_decode($appointmentID);
        if ($appointmentID) {
            $appointmentData = $this->AppointmentCustomerStaffService->find('first', array(
                'conditions' => array(
                    'AppointmentCustomerStaffService.id' => $appointmentID
                ),
                'contain' => array(
                    'AppointmentCustomer', 'Children', 'Thinapp', 'AppointmentAddress', 'AppointmentStaff' => array('DepartmentCategory')
                )
            ));

            $thinappID = $appointmentData['Thinapp']['id'];

            //$UHID = Custom::getUHID($thinappID,$appointmentData['AppointmentCustomer']['id'],$appointmentData['Children']['id']);

            $orderDetails = array();
            if ($appointmentData['AppointmentCustomerStaffService']['medical_product_order_id'] > 0) {
                $orderID = $appointmentData['AppointmentCustomerStaffService']['medical_product_order_id'];
                $orderDetails = $this->MedicalProductOrder->find('first', array(
                    'fields' => array('MedicalProductOrder.*', "(SELECT CONCAT(DATE_FORMAT(`MedicalProductOrder`.`created`,'%d%m%y'),COUNT(`id`)) FROM `medical_product_orders` AS `order` WHERE  DATE(`order`.`created`) = DATE(`MedicalProductOrder`.`created`) AND `order`.`id` <= `MedicalProductOrder`.`id` AND `order`.`thinapp_id` = `MedicalProductOrder`.`thinapp_id` AND `order`.`is_expense` = 'N') AS `unique_id`"),
                    'conditions' => array('MedicalProductOrder.id' => $orderID), 'recursive' => 2,
                ));
            }

            if ($appointmentData['Children']['id'] != 0) {
                $age = Custom::dob_elapsed_string($appointmentData['Children']['dob'], false, false);
                $UHID = $appointmentData['Children']['uhid'];
            } else {
                $dob = $orderDetails['AppointmentCustomer']['dob'];
                if (!empty($dob) && $dob != '1970-01-01' && $dob != '0000-00-00') {
                    $age = Custom::dob_elapsed_string($dob, false, false);
                } else {

                    $age = $orderDetails['AppointmentCustomer']['age'];


                }

                $UHID = $appointmentData['AppointmentCustomer']['uhid'];
            }


            if (!empty($orderDetails['MedicalProductOrder']['created_by_user_id'])) {
                $staffData = $this->AppointmentStaff->find('first',
                    array(
                        'fields' => array('AppointmentStaff.name'),
                        'conditions' => array('AppointmentStaff.user_id' => $orderDetails['MedicalProductOrder']['created_by_user_id'])
                    )
                );
                if (isset($staffData['AppointmentStaff']['name'])) {
                    $createdBy = $staffData['AppointmentStaff']['name'];
                } else {
                    $staffData = $this->User->find('first',
                        array(
                            'fields' => array('User.username'),
                            'conditions' => array('User.id' => $orderDetails['MedicalProductOrder']['created_by_user_id'])
                        )
                    );
                    $createdBy = isset($staffData['User']['username']) ? $staffData['User']['username'] : "";
                }
            } else {
                $createdBy = "";
            }

            $this->set(array('createdBy' => $createdBy, 'age' => $age, 'UHID' => $UHID, 'appointmentData' => $appointmentData, 'orderDetails' => $orderDetails));
        }
    }


    public function print_prescription($appointmentID = null)
    {
        $this->layout = false;
        $appointmentID = base64_decode($appointmentID);
        if ($appointmentID) {
            $data = array();
            $query = "select  IFNULL(ac.patient_category,c.patient_category) as patient_category, IFNULL(ac.id,c.id) as patient_id,IF(ac.id IS NULL,'CHILDREN','CUSTOMER') as patient_type,  acss.emergency_appointment, acss.has_token,  swp.field_layout_type, IFNULL(ac.third_party_uhid,'') as third_party_uhid, IFNULL(ac.country_id,c.country_id) as country_id, IFNULL(ac.state_id,c.state_id) as state_id,IFNULL(ac.city_id,c.city_id) as city_id,  IFNULL(ac.city_name,c.city_name) as city_name, acss.referred_by, acss.referred_by_mobile, acss.notes, acss.reason_of_appointment, IFNULL(ac.blood_group,c.blood_group) as blood_group, marital_status, DATE_FORMAT(ac.conceive_date,'%d-%m-%Y') AS conceive_date, DATE_FORMAT(ac.expected_date,'%d-%m-%Y') AS expected_date, IFNULL(ac.email,'') as email, DATE_FORMAT(IFNULL(ac.dob,c.dob),'%d-%m-%Y') as dob, acss.slot_time, IFNULL(ac.parents_mobile,c.parents_mobile) as parents_mobile, IFNULL(ac.field1,c.field1) as field1, IFNULL(ac.field2,c.field2) as field2, IFNULL(ac.field3,c.field3) as field3, IFNULL(ac.field4,c.field4) as field4, IFNULL(ac.field5,c.field5) as field5, IFNULL(ac.field6,c.field6) as field6, IFNULL(ac.bp_systolic,c.bp_systolic) as bp_systolic, IFNULL(ac.bp_diasystolic,c.bp_diasystolic) as bp_diasystolic, IFNULL(ac.bmi,c.bmi) as bmi, IFNULL(ac.bmi_status,c.bmi_status) as bmi_status, IFNULL(ac.temperature,c.temperature) as temperature, IFNULL(ac.o_saturation,c.o_saturation) as o_saturation,  swp.header_rotate, swp.tb_rotate, swp.header_box_border, app_staff.barcode_on_prescription, DATE_FORMAT(mpo.created,'%d-%m-%Y %h:%i %p')  as receipt_datetime, swp.barcode, acss.id as appointment_id, swp.id as setting_id, swp.top, swp.left, swp.height, swp.width, swp.fields, swp.font_size, IFNULL(ac.address,IF(c.patient_address='',c.address,c.patient_address)) as patient_address, IFNULL(ac.gender,c.gender) as gender,  IFNULL(ac.uhid,c.uhid) as uhid, IFNULL(ac.height,cg.height) as patient_height, IFNULL(ac.weight,cg.weight) as weight, IFNULL(ac.head_circumference,cg.head_circumference) as head_circumference, DATE_FORMAT(acss.appointment_datetime,'%d-%m-%Y') AS appointment_datetime , IFNULL(ac.relation_prefix,c.relation_prefix) as relation_prefix, IFNULL(ac.parents_name,c.parents_name) as parents_name, acss.queue_number, IFNULL(ac.address,IF(c.patient_address='',c.address,c.patient_address)) as address, app_staff.name as doctor_name, CONCAT(IFNULL(ac.title,c.title),' ',IFNULL(ac.first_name,c.child_name)) as patient_name, IFNULL(ac.mobile,c.mobile) as mobile, IFNULL(IF(ac.dob !='0000-00-00' AND ac.dob !='' ,ac.dob, age),c.dob) as age, DATE_FORMAT(DATE_ADD(DATE((SELECT acss_inner.appointment_datetime FROM appointment_customer_staff_services AS acss_inner WHERE acss_inner.id = acss.appointment_parent_id LIMIT 1)), INTERVAL IF(t.global_service_validity='YES',IF(t.service_validity_days=0,0,t.service_validity_days-1),app_ser.service_validity_time - 1)   DAY),'%d-%m-%Y') as service_validity_time, IFNULL(mpo.total_amount,acss.amount) as amount from appointment_customer_staff_services as acss JOIN thinapps AS t ON t.id = acss.thinapp_id left join appointment_customers as ac on ac.id = acss.appointment_customer_id left join childrens as c on c.id = acss.children_id  LEFT JOIN child_growths AS cg ON cg.children_id = c.id AND cg.id = (SELECT MAX(id) FROM child_growths AS c_growth WHERE c_growth.children_id = c.id ) left join appointment_staffs as app_staff on app_staff.id = acss.appointment_staff_id left join appointment_services as app_ser on app_ser.id= acss.appointment_service_id  join appointment_addresses as aa on aa.id= acss.appointment_address_id left join medical_product_orders as mpo on mpo.id = acss.medical_product_order_id left join setting_web_prescriptions as swp on swp.thinapp_id = acss.thinapp_id and swp.setting_for ='DOCTOR_PRESCRIPTION' where acss.id = $appointmentID limit 1";
            $connection = ConnectionUtil::getConnection();
            $list_obj = $connection->query($query);
            if ($list_obj->num_rows) {
                $data = mysqli_fetch_assoc($list_obj);
                $data['queue_number'] = Custom::create_queue_number($data);
            } else {
            }
            $this->set(compact('data'));

        }
    }

    public function setting_print_prescription($module_type=null)
    {
        $this->layout = false;
        $login = $this->Session->read('Auth.User.User');
        $thinappID = $login['thinapp_id'];
        $doctor_list=array();
        $condition['thinapp_id'] =$thinappID;
        $condition['setting_for'] = $setting_for= "DOCTOR_PRESCRIPTION";
        if(strtoupper($module_type)=="WEB"){
            $condition['setting_for'] =$setting_for=  "WEB_PRESCRIPTION";
        }else{
            $doctor_list = Custom::get_active_doctor_list_prescription($thinappID);
        }
        $availableData = $this->SettingWebPrescription->find('first', array(
                'conditions' => $condition
        ));
        
        $this->set(compact('availableData','doctor_list','setting_for'));

    }

    public function save_setting_prescription()
{
    $this->layout = false;
    $this->autoRender = false;
    if ($this->request->is(array('ajax'))) {
        $data = $this->request->data;
        $login = $this->Session->read('Auth.User.User');
        $thinappID = $login['thinapp_id'];
        $setting_for = $data['setting_for'];
        $patient_detail_box = $data['show_patient_detail'];
        $top = $data['top'];
        $left = $data['left'];
        $width = $data['width'];
        $tb_top = $data['tb_top'];
        $tb_left = $data['tb_left'];
        $tb_width = $data['tb_width'];
        $height = $data['height'];
        $fontSize = $data['font_size'];
        $barcode = $data['barcode'];
        $prescription =$base_64= $data['prescription'];
        $tb_heading_font_size = $data['thf'];
        $tb_label_font_size = $data['tlf'];
        $tb_text_font_size = $data['tf'];
        $header_box_border = $data['hbb'];
        $tag_box_border = $data['tbb'];
        $data_url = $data['du'];
        $header_rotate = $data['header_rotate'];
        $tb_rotate = $data['tb_rotate'];
        $field_layout_type = $data['field_layout_type'];
        if($data_url != $prescription ){
            $prescription_base64 = $prescription;
            $prescription = Custom::uploadBase64FileToAws($prescription);
        }else{

            $setting_data = $this->SettingWebPrescription->find('first', array(
                    'conditions' => array(
                        'thinapp_id' => $thinappID,
                        'setting_for' => $setting_for
                    ),'contain'=>false)
            );
            $prescription = $setting_data['SettingWebPrescription']['prescription'];
            $prescription_base64 = $setting_data['SettingWebPrescription']['prescription_base64'];
        }


        $dataToSave = array(
            'setting_for' => $setting_for,
            'patient_detail_box' => $patient_detail_box,
            'prescription' => $prescription,
            'tb_heading_font_size' => $tb_heading_font_size,
            'tb_label_font_size' => $tb_label_font_size,
            'tb_text_font_size' => $tb_text_font_size,
            'header_box_border' => $header_box_border,
            'tag_box_border' => $tag_box_border,
            'barcode' => $barcode,
            'top' => $top,
            'left' => $left,
            'width' => $width,
            'tb_top' => $tb_top,
            'tb_left' => $tb_left,
            'tb_width' => $tb_width,
            'height' => $height,
            'font_size' => $fontSize,
            'thinapp_id' => $thinappID,
            'tb_rotate' => $tb_rotate,
            'header_rotate' => $header_rotate,
            'prescription_base64' => $prescription_base64,
            'field_layout_type' => $field_layout_type
        );

        $availableData = $this->SettingWebPrescription->find('first', array(
                'conditions' => array(
                    'thinapp_id' => $thinappID,
                    'setting_for' => $setting_for
                ),'contain'=>false)
        );

        if (isset($availableData['SettingWebPrescription']) && !empty($availableData['SettingWebPrescription'])) {
            $dataToSave['id'] = $availableData['SettingWebPrescription']['id'];
        }
        if($this->SettingWebPrescription->saveAll($dataToSave)){
            $dataToSend['status'] = 1;
            $dataToSend['message'] = "Successfull!";
        }else{
            $dataToSend['status'] = 0;
            $dataToSend['message'] = "Fail";
        }



        echo json_encode($dataToSend);
    }
}

    public function prescription_setting_fields($module_type=null)
    {
        $login = $this->Session->read('Auth.User.User');
        $thinappID = $login['thinapp_id'];
        $condition['thinapp_id'] =$thinappID;
        $condition['setting_for'] = $setting_for= "DOCTOR_PRESCRIPTION";
        if(strtoupper($module_type)=="WEB"){
            $condition['setting_for'] =$setting_for=  "WEB_PRESCRIPTION";
        }
        $availableData = $this->SettingWebPrescription->find('first', array(
                'conditions' => $condition
        ));

        $fields = Custom::get_default_field_array();

        if (!isset($availableData['SettingWebPrescription']['thinapp_id'])) {
            $dataToSave = array();
            $dataToSave['SettingWebPrescription']['setting_for'] = $setting_for;
            $dataToSave['SettingWebPrescription']['thinapp_id'] = $thinappID;
            $dataToSave['SettingWebPrescription']['left'] = '0%';
            $dataToSave['SettingWebPrescription']['top'] = '0%';
            $dataToSave['SettingWebPrescription']['width'] = '60%';
            $dataToSave['SettingWebPrescription']['height'] = '8%';
            $dataToSave['SettingWebPrescription']['font_size'] = '13px';
            $dataToSave['SettingWebPrescription']['fields'] = json_encode($fields);
            $this->SettingWebPrescription->save($dataToSave);

        } else if (empty($availableData['SettingWebPrescription']['fields'])) {
            $dataToSave['SettingWebPrescription']['id'] = $availableData['SettingWebPrescription']['id'];
            $dataToSave['SettingWebPrescription']['fields'] = json_encode($fields);
            $this->SettingWebPrescription->save($dataToSave);
        }
        $availableData = $this->SettingWebPrescription->find('first', array(
            'conditions' => $condition
        ));
    
    	$file_array=array("booking_form_customer_$thinappID","booking_form_children_$thinappID");
        WebservicesFunction::deleteJson($file_array, 'thinapp');

        $default_fields = Custom::get_default_field_array();
        $login1 = $this->Session->read('Auth.User');
        $reportTitle = $login1['Thinapp']['name'].' ('.date('d/m/Y').')';
        $this->set(compact('reportTitle','availableData','default_fields',"setting_for"));

    }

    public function update_prescription_setting_field_status()
    {
        $this->layout = false;
        $this->autoRender = false;
        if ($this->request->is(array('ajax'))) {
            $save_fields = $this->request->data['save_fields'];
            $setting_for = $this->request->data['setting_for'];

            $login = $this->Session->read('Auth.User.User');
            $thinappID = $login['thinapp_id'];
            $availableData = $this->SettingWebPrescription->find('first', array(
                    'conditions' => array(
                        'thinapp_id' => $thinappID,
                        'setting_for' => $setting_for
                    ))
            );
            $dataToSave = array();
            if(!empty($availableData)){
                $dataToSave['SettingWebPrescription']['id'] = $availableData['SettingWebPrescription']['id'];
            }
            $dataToSave['SettingWebPrescription']['fields'] = $save_fields;
            if ($this->SettingWebPrescription->save($dataToSave)) {
                $dataToSend = array('status' => 1);
            } else {
                $dataToSend = array('status' => 0);
            }

            echo json_encode($dataToSend);

        }
    }

    public function update_prescription_setting_field_order()
    {
        $this->layout = false;
        $this->autoRender = false;
        if ($this->request->is(array('ajax'))) {
            $data = $this->request->data;
            $setting_for = $this->request->data['setting_for'];
            $field = $data['field'];
            $order = $data['value'];

            $login = $this->Session->read('Auth.User.User');
            $thinappID = $login['thinapp_id'];
            $availableData = $this->SettingWebPrescription->find('first', array(
                'conditions' => array(
                    'thinapp_id' => $thinappID,
                    'setting_for' => $setting_for
                ))
            );

            $fields = json_decode($availableData['SettingWebPrescription']['fields'], true);

            $fields[$field]['order'] = $order;

            $dataToSave = array();
            $dataToSave['SettingWebPrescription']['id'] = $availableData['SettingWebPrescription']['id'];
            $dataToSave['SettingWebPrescription']['fields'] = json_encode($fields);

            if ($this->SettingWebPrescription->save($dataToSave)) {
                $dataToSend = array('status' => 1);
            } else {
                $dataToSend = array('status' => 0);
            }

            echo json_encode($dataToSend);

        }
    }


    public function medical_product()
    {
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User.User');

        $this->paginate = array(
            "conditions" => array(
                "MedicalProduct.thinapp_id" => $login['thinapp_id']
            ),

            'contain' => false,
            'limit' => WEB_PAGINATION_LIMIT
        );
        $data = $this->paginate('MedicalProduct');
        $doctor_id = WebservicesFunction::get_staff_id_by_mobile($login['mobile'], $login['thinapp_id']);
        $this->set(array('MedicalProduct' => $data, 'doctor_id' => $doctor_id));


    }

    public function add_medical_product()
    {
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User.User');
        $doctor_id = WebservicesFunction::get_staff_id_by_mobile($login['mobile'], $login['thinapp_id']);
        $this->set(array('doctor_id' => $doctor_id));
        if ($this->request->is(array('post', 'put'))) {
            $data = $this->request->data;
            $data['MedicalProduct']['thinapp_id'] = $login['thinapp_id'];
            if ($this->MedicalProduct->save($data)) {
                $this->request->data = array();
                $this->Session->setFlash('Service saved successfully!', 'default', array(), 'success');
                $this->redirect(array('controller' => 'app_admin', 'action' => 'add_medical_product'));
            } else {
                $this->Session->setFlash("Sorry, Couldn't save service!", 'default', array(), 'error');
            }
        }
    }

    public function change_medical_product_status()
    {
        $this->layout = false;
        $this->autoRender = false;
        if ($this->request->is(array('ajax'))) {
            $id = $this->request->data['id'];
            $data = $this->MedicalProduct->find('first', array('fields' => array('MedicalProduct.id', 'MedicalProduct.status'), 'conditions' => array('MedicalProduct.id' => $id)));
            if ($data['MedicalProduct']['status'] == 'ACTIVE') {
                $data['MedicalProduct']['status'] = 'INACTIVE';
            } else {
                $data['MedicalProduct']['status'] = 'ACTIVE';
            }
            if ($this->MedicalProduct->save($data)) {
                $dataToSend['status'] = 1;
                $dataToSend['text'] = $data['MedicalProduct']['status'];
            } else {
                $dataToSend['status'] = 0;
                $dataToSend['message'] = "Something went wrong!";
            }
            echo json_encode($dataToSend);
        }
    }

    public function edit_medical_product($ID = null)
    {
        $ID = base64_decode($ID);
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User.User');
        $doctor_id = WebservicesFunction::get_staff_id_by_mobile($login['mobile'], $login['thinapp_id']);
        $this->set(array('doctor_id' => $doctor_id));
        if ($this->request->is(array('post', 'put'))) {
            $data = $this->request->data;
            $data['MedicalProduct']['thinapp_id'] = $login['thinapp_id'];
            $data['MedicalProduct']['id'] = $ID;
            if ($this->MedicalProduct->save($data)) {
                $this->Session->setFlash('Service updated successfully!', 'default', array(), 'success');
                $this->redirect(array('controller' => 'app_admin', 'action' => 'medical_product'));
            } else {
                $this->Session->setFlash("Sorry, Couldn't update service!", 'default', array(), 'error');
            }
        } else {
            $this->request->data = $this->MedicalProduct->find('first', array('conditions' => array('MedicalProduct.id' => $ID)));
        }
    }

    public function search_medical_product_orders()
    {
        $reqData = $this->request->query;
        $pram = array();
        if (!empty($reqData['from_date'])) {
            $pram['fd'] = $reqData['from_date'];
        }
        if (!empty($reqData['to_date'])) {
            $pram['td'] = $reqData['to_date'];
        }
        if (!empty($reqData['payment'])) {
            $pram['p'] = $reqData['payment'];
        }
        if (!empty($reqData['name'])) {
            $pram['n'] = $reqData['name'];
        }
        if (!empty($reqData['doctor_id'])) {
            $pram['d'] = $reqData['doctor_id'];
        }
        $this->redirect(
            array(
                "controller" => "app_admin",
                "action" => "medical_product_orders",
                "?" => $pram,
            )
        );
    }


    public function medical_product_orders()
    {
        // die("dsdf");
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User.User');

        $conditions = array("MedicalProductOrder.thinapp_id" => $login['thinapp_id'],"MedicalProductOrder.status" => 'ACTIVE');

        $searchData = $this->request->query;

        if (isset($searchData['p']) && !empty($searchData['p'])) {
            $this->request->data['Search']['payment'] = $searchData['p'];
            if ($searchData['p'] != 'ALL') {
                $conditions["AppointmentCustomerStaffService.booking_payment_type"] = $searchData['p'];
                $conditions["MedicalProductOrder.hospital_payment_type_id"] = 0;
            }
        }

        if (isset($searchData['d']) && !empty($searchData['d'])) {
            $this->request->data['Search']['doctor_id'] = $searchData['d'];
            if ($searchData['d'] != 'ALL') {
                $conditions["MedicalProductOrder.appointment_staff_id"] = $searchData['d'];
            }
        }

        if (isset($searchData['n']) && !empty($searchData['n'])) {
            $this->request->data['Search']['name'] = $searchData['n'];

            $conditions['OR'] = array(
                "AppointmentCustomer.first_name like" => '%' . $searchData['n'] . '%',
                "Children.child_name like" => '%' . $searchData['n'] . '%'

            );


        }

        if ((isset($searchData['fd']) && !empty($searchData['fd'])) || (isset($searchData['td']) && !empty($searchData['td']))) {
            $fd = DateTime::createFromFormat('d/m/Y', $searchData['fd']);
            $fd = $fd->format('Y-m-d');
            $this->request->data['Search']['from_date'] = $searchData['fd'];
            $conditions["DATE(AppointmentCustomerStaffService.appointment_datetime) >="] = $fd;

            $td = DateTime::createFromFormat('d/m/Y', $searchData['td']);
            $td = $td->format('Y-m-d');
            $this->request->data['Search']['to_date'] = $searchData['td'];
            $conditions["DATE(AppointmentCustomerStaffService.appointment_datetime) <="] = $td;


        } else {
            $this->request->data['Search']['from_date'] = date("d/m/Y");
            $this->request->data['Search']['to_date'] = date("d/m/Y");
            $conditions["DATE(AppointmentCustomerStaffService.appointment_datetime)"] = date("Y-m-d");

        }
        $conditions["MedicalProductOrder.is_opd"] = "Y";
        $conditions["MedicalProductOrder.payment_status"] = "PAID";
        $conditions["AppointmentCustomerStaffService.medical_product_order_id >"] = 0;

        $medicalProductOrder = $this->MedicalProductOrder->find('all', array('fields' => array(
            'MedicalProductOrder.*',
            'AppointmentCustomerStaffService.appointment_datetime',
            'AppointmentCustomerStaffService.booking_payment_type',
            'AppointmentCustomer.first_name',
            'AppointmentCustomer.uhid',
            'AppointmentStaff.name',
            'Children.child_name',
            'Children.uhid',
            'WalletUserHistory.*',
            'HospitalPaymentType.name',
            "(SELECT CONCAT(DATE_FORMAT(`MedicalProductOrder`.`created`,'%d%m%y'),COUNT(`id`)) FROM `medical_product_orders` AS `order` WHERE  DATE(`order`.`created`) = DATE(`MedicalProductOrder`.`created`) AND `order`.`id` <= `MedicalProductOrder`.`id` AND `order`.`thinapp_id` = `MedicalProductOrder`.`thinapp_id` AND `order`.`is_expense` = 'N') AS `unique_id`"
        ), 'joins' => array(
            array('table' => 'wallet_user_history',
                'alias' => 'WalletUserHistory',
                'type' => 'LEFT',
                'conditions' => array(
                    'WalletUserHistory.appointment_id = MedicalProductOrder.appointment_customer_staff_service_id',
                    'WalletUserHistory.amount_type' => 'DEDUCTION'
                )
            )), "conditions" => $conditions, 'order' => array('MedicalProductOrder.id' => 'DESC'), 'contain' => array('AppointmentCustomer', 'AppointmentCustomerStaffService', 'HospitalPaymentType', 'Children', 'AppointmentStaff')));


        $totalEarnings = $this->MedicalProductOrder->find('first', array('fields' => array('SUM(MedicalProductOrder.total_amount) AS total'), "conditions" => $conditions, 'contain' => array('AppointmentCustomer', 'AppointmentCustomerStaffService', 'Children', 'AppointmentStaff')));

        $doctor_id = WebservicesFunction::get_staff_id_by_mobile($login['mobile'], $login['thinapp_id']);



        $login1 = $this->Session->read('Auth.User');
        $reportTitle = $login1['Thinapp']['name'].' ('.$this->request->data['Search']['from_date'].' - '.$this->request->data['Search']['to_date'].')';

        $this->set(array('reportTitle'=>$reportTitle,'doctor_id' => $doctor_id, 'medicalProductOrder' => $medicalProductOrder, 'totalEarnings' => $totalEarnings));
    }


    public function getEditMedicalOrder()
    {
        $this->layout = false;
        $this->autoRender = false;
        if ($this->request->is(array('ajax'))) {
            $appointmentID = base64_decode($this->request->data['id']);
            $login = $this->Session->read('Auth.User.User');
            $orderDetails = $this->MedicalProductOrder->find('first', array('conditions' => array('MedicalProductOrder.id' => $appointmentID),'contain' => array('OrderDueAmount','OrderDuePaidAmount','AppointmentCustomerStaffService'=>array('AppointmentService'),'MedicalProductOrderDetail' => array('MedicalProduct' => 'MedicalProductQuantity'))));
        
        	if(empty($orderDetails)){
               $orderDetails = $this->MedicalProductOrderArchive->find('first', array('conditions' => array('MedicalProductOrderArchive.id' => $appointmentID),'contain' => array('OrderDueAmount','OrderDuePaidAmount','AppointmentCustomerStaffService'=>array('AppointmentService'),'MedicalProductOrderDetail' => array('MedicalProduct' => 'MedicalProductQuantity'))));
               $orderDetails['MedicalProductOrder'] =  $orderDetails['MedicalProductOrderArchive'];
               unset($orderDetails['MedicalProductOrderArchive']);
               
            }
        

            $paymentTypeDetail = $this->HospitalPaymentTypeDetail->find('first',array(
                'conditions'=>array(
                    'HospitalPaymentTypeDetail.medical_product_order_id'=>$orderDetails['MedicalProductOrder']['id']
                ),
                'contain'=>false
            ));

            $this->set(compact('orderDetails','paymentTypeDetail'));
            $this->render('get_edit_medical_order', 'ajax');
        }
    }

    public function web_edit_order_back()
    {
        $this->layout = false;
        $this->autoRender = false;
        if ($this->request->is(array('ajax'))) {
            $login = $this->Session->read('Auth.User.User');
            $data = $this->request->data;

            $product_ids_array =array();
            if (isset($data['productID']) && !empty($data['productID'])) {
                $new_product_ids_array =$data['productID'];
            }
            if(!empty($new_product_ids_array)){
                $medical_product_order_id = $data['orderID'];
                $show_into_receipt = !empty($data['show_into_receipt'])?$data['show_into_receipt']:"NO";


                $query =    $query = "SELECT mpo.created_by_user_id, mpo.paid_receipt_number, mpo.reffered_by_name, mpo.reffered_by_mobile,  mpod.appointment_staff_id as detail_doctor_id, mpo.appointment_staff_id as order_doctor_id, mpo.is_direct_billing, mpo.appointment_address_id as order_address_id, mpo.reffered_by_name, mpo.reffered_by_mobile, mpo.is_expense, mpo.payment_status, mpo.is_opd, pda.id AS due_amount_id, mpod.* from medical_product_order_details as mpod join medical_product_orders as mpo on mpod.medical_product_order_id = mpo.id left join medical_products as mp on mp.id = mpod.medical_product_id LEFT JOIN patient_due_amounts AS pda ON pda.medical_product_order_id = mpod.medical_product_order_id AND pda.payment_status ='DUE'  where mpod.medical_product_order_id = $medical_product_order_id";
                $connection = ConnectionUtil::getConnection();
                $service_list = $connection->query($query);
                if ($service_list->num_rows) {
                    $service_list = mysqli_fetch_all($service_list,MYSQL_ASSOC);
                    $last_service_product_id_array = array_column($service_list,'medical_product_id');
                    $last_quantity_array = array_column($service_list,'quantity', 'medical_product_quantity_id');

                    $paid_receipt_number = $service_list[0]['paid_receipt_number'];
                    $is_direct_billing = $service_list[0]['is_direct_billing'];
                    $payment_status = $service_list[0]['payment_status'];
                	$created_by_user_id = $service_list[0]['created_by_user_id'];
                
                    if($service_list[0]['is_expense']=='Y'){
                        if(isset($data['AppointmentCustomerStaffService']['payment_status']) && $data['AppointmentCustomerStaffService']['payment_status'] =='PAID'){
                            $payment_status = "PAID";
                        }
                    }

                    $created = Custom::created();
                    $connection->autocommit(false);
                    $not_remove_to_product = $save_data_result = array();

                    foreach($new_product_ids_array as $key => $medical_product_id){

                        $medical_product_quantity_id = ($data['medical_product_quantity_id'][$key] != '') ? $data['medical_product_quantity_id'][$key] : 0;
                        $selected_doctor_id=0;
                        if($is_direct_billing=="YES" && !empty($data['biller_appointment_staff_id'][$key])){
                            $selected_doctor_id =$data['biller_appointment_staff_id'][$key];
                        }
                        $quantity = $data['quantity'][$key];
                    	$days = $data['days'][$key];
                        $discount_type = $data['discountType'][$key];
                        $discount_value = $data['discount'][$key];
                        $product_price = $data['price'][$key];
                        $product_amount = $data['price'][$key] * $data['quantity'][$key];
                        $amount = $product_amount;
                        $tax_value = $data['tax_value'][$key];
                        $tax_type = $data['tax_type'][$key];
                        $discount_amount = $data['discount'][$key];
                        if ($data['discountType'][$key] == "PERCENTAGE") {
                            $discount_amount = (($product_amount) * $data['discount'][$key]) / 100;
                        }


                        $total_amount = ($product_amount) - $discount_amount;
                        $tax_amount = ($total_amount * $data['tax_value'][$key]) / 100;
                        $total_amount = $total_amount + $tax_amount;
                    	$total_amount = $total_amount * $days;
                        $tmp = explode('.', $total_amount);
                        if (count($tmp) == 2) {
                            $total_amount = $tmp[0] . '.' . substr($tmp[1], 0, 2);
                        }
                        if (in_array($medical_product_id,$last_service_product_id_array)) {

                            if($medical_product_id != 0 ){
                                $show_into_receipt = "YES";
                            }

                            $sql = "update medical_product_order_details set days=?, appointment_staff_id=?, product_price =?, show_into_receipt=?, medical_product_quantity_id=?, quantity = ?, discount_type=?, tax_type=?, tax_value=?, tax_amount=?, discount_value=?, discount_amount =?, amount =?, total_amount=?,  modified=? where medical_product_order_id = ? and medical_product_id =? ";
                            $stmt_update = $connection->prepare($sql);
                            $created = Custom::created();
                            $stmt_update->bind_param('sssssssssssssssss', $days, $selected_doctor_id, $product_price, $show_into_receipt,  $medical_product_quantity_id, $quantity, $discount_type, $tax_type, $tax_value, $tax_amount, $discount_value, $discount_amount, $amount, $total_amount, $created, $medical_product_order_id, $medical_product_id);
                            if($save_data_result[]= $stmt_update->execute()){
                                $not_remove_to_product[] = $medical_product_id;
                            }


                        }else{


                            $service="";
                            $service_data = $service_list[0];
                            $appointment_customer_staff_service_id = !empty($service_data['appointment_customer_staff_service_id'])?$service_data['appointment_customer_staff_service_id']:0;
                            $appointment_customer_id = !empty($service_data['appointment_customer_id'])?$service_data['appointment_customer_id']:0;
                            $children_id = !empty($service_data['children_id'])?$service_data['children_id']:0;
                            $appointment_staff_id = $selected_doctor_id;
                            $show_into_receipt = "YES";
                            $lab_pharmacy_user_id = !empty($service_data['lab_pharmacy_user_id'])?$service_data['lab_pharmacy_user_id']:0;
                            $lab_pharmacy_type = !empty($service_data['lab_pharmacy_type'])?$service_data['lab_pharmacy_type']:'NONE';
                            $lab_pharmacy_is_inhouse = !empty($service_data['lab_pharmacy_is_inhouse'])?$service_data['lab_pharmacy_is_inhouse']:'NONE';
                            $thin_app_id = $login['thinapp_id'];
                            $sql = "INSERT INTO medical_product_order_details (lab_pharmacy_user_id, lab_pharmacy_type, lab_pharmacy_is_inhouse, medical_product_order_id, medical_product_id, medical_product_quantity_id, service, appointment_customer_staff_service_id, appointment_staff_id, show_into_receipt, appointment_customer_id, children_id, thinapp_id, product_price, quantity, discount_type, tax_type, tax_value, tax_amount, discount_value, discount_amount, amount, total_amount, created, modified) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                            $stmt_save = $connection->prepare($sql);
                            $stmt_save->bind_param('sssssssssssssssssssssssss', $lab_pharmacy_user_id, $lab_pharmacy_type, $lab_pharmacy_is_inhouse, $medical_product_order_id, $medical_product_id, $medical_product_quantity_id, $service, $appointment_customer_staff_service_id, $appointment_staff_id, $show_into_receipt, $appointment_customer_id, $children_id,$thin_app_id,$product_price,$quantity,$discount_type,$tax_type,$tax_value,$tax_amount,$discount_value,$discount_amount,$amount,$total_amount, $created, $created);
                            if($save_data_result[]= $stmt_save->execute()){
                                $not_remove_to_product[] = $medical_product_id;
                            }
                        }

                        $medical_product_quantity_id = $data['medical_product_quantity_id'][$key];
                        if ($medical_product_quantity_id > 0) {

                            $qty = (array_key_exists($medical_product_quantity_id,$last_quantity_array))?($data['quantity'][$key]-$last_quantity_array[$medical_product_quantity_id]):$data['quantity'][$key];
                            $sql = "update medical_product_quantities set sold = sold + ? where id = ?";
                            $stmt_update_qty = $connection->prepare($sql);
                            $stmt_update_qty->bind_param('ss', $qty, $data['medical_product_quantity_id'][$key]);
                            $save_data_result[]= $stmt_update_qty->execute();




                        }

                    }

                    $delete_service_detail_id_array=array();
                    foreach($service_list as $key => $service){
                        if(!in_array($service['medical_product_id'],$not_remove_to_product)){

                            if ($service['medical_product_quantity_id'] > 0) {
                                $sql = "update medical_product_quantities set sold = sold - ? where id = ?";
                                $stmt_update_qty = $connection->prepare($sql);
                                $stmt_update_qty->bind_param('ss', $service['quantity'], $service['medical_product_quantity_id']);
                                $save_data_result[]= $stmt_update_qty->execute();
                            }

                            if($service['medical_product_id'] > 0){
                                /* delete service from order detail */
                                $sql = "delete from  medical_product_order_details where id = ?";
                                $stmt_delete = $connection->prepare($sql);
                                $stmt_delete->bind_param('s', $service['id']);
                                $save_data_result[]= $stmt_delete->execute();
                            }


                        }
                    }

                    $final_amount = $data['AppointmentCustomerStaffService']['tot'];
                    $display_amount = $data['AppointmentCustomerStaffService']['display'];
                    $hospital_payment_type_id = $data['AppointmentCustomerStaffService']['hospital_payment_type_id'];
                    $payment_description = $data['AppointmentCustomerStaffService']['payment_description'];
                    $payment_type_name = $data['AppointmentCustomerStaffService']['payment_type_name'];
                    $appointment_staff_id = $service_list[0]['order_doctor_id'];
                    $appointment_address_id = $service_list[0]['order_address_id'];
                    $reffered_by_name = $service_list[0]['reffered_by_name'];
                    $reffered_by_mobile = $service_list[0]['reffered_by_mobile'];
                    if($is_direct_billing=="YES"){
                        $appointment_staff_id =$data['appointment_staff_id'];
                        $appointment_address_id =$data['appointment_address_id'];
                        $reffered_by_name = $data['reffered_by_name'];
                        $reffered_by_mobile = $data['reffered_by_mobile'];
                    }


                    $sql = "update medical_product_orders set reffered_by_name =?, reffered_by_mobile=?, appointment_address_id =?, appointment_staff_id=?, payment_status=?, hospital_payment_type_id =?, payment_description =?, payment_type_name=?, modified_by_user_id = ?, total_amount=?, modified=? where id = ?";
                    $stmt_update_qty = $connection->prepare($sql);
                    $stmt_update_qty->bind_param('ssssssssssss', $reffered_by_name, $reffered_by_mobile, $appointment_address_id, $appointment_staff_id, $payment_status, $hospital_payment_type_id, $payment_description, $payment_type_name, $login['id'], $final_amount, $created, $medical_product_order_id );
                    $save_data_result[]= $stmt_update_qty->execute();
                
                	if(empty($created_by_user_id)){
                        $sql = "UPDATE medical_product_orders SET created_by_user_id =? where id = ?";
                        $stmt_created = $connection->prepare($sql);
                        $stmt_created->bind_param('ss', $login['id'] , $medical_product_order_id);
                        $save_data_result[] = $stmt_created->execute();
                    }

                    if(!empty($save_data_result) && !in_array(false,$save_data_result)){

                        $service_data = $service_list[0];
                        if(!empty($service_data['appointment_customer_id'])){
                            $patient_type = "CUSTOMER";
                            $patient_id = $service_data['appointment_customer_id'];
                        }else{
                            $patient_id = $service_data['children_id'];
                            $patient_type = "CHILDREN";
                        }

                        $thin_app_id = $login['thinapp_id'];
                        $result =   Custom::update_patient_due_amount($display_amount, $thin_app_id,$medical_product_order_id,$login['id'],$final_amount,$patient_id,$patient_type);
                        if($result){




                            $remark = isset($data["remark"])?$data["remark"]:"";
                            $mobile_no = isset($data["mobile_no"])?$data["mobile_no"]:"";
                            $txn_no = isset($data["txn_no"])?$data["txn_no"]:"";
                            $beneficiary_name = isset($data["beneficiary_name"])?$data["beneficiary_name"]:"";
                            $bank_account = isset($data["bank_account"])?$data["bank_account"]:"";
                            $transaction_id = isset($data["transaction_id"])?$data["transaction_id"]:"";
                            $valid_upto = isset($data["valid_upto"])?$data["valid_upto"]:"";
                            $holder_name = isset($data["holder_name"])?$data["holder_name"]:"";
                            $card_no = isset($data["card_no"])?$data["card_no"]:"";

                            $paymentTypeData = $this->HospitalPaymentTypeDetail->find("first",array(
                                "fields"=>array("HospitalPaymentTypeDetail.id"),
                                "conditions"=>array(
                                    "HospitalPaymentTypeDetail.medical_product_order_id"=>$medical_product_order_id
                                ),
                                "contain"=>false,
                            ));

                            if(!empty($paymentTypeData["HospitalPaymentTypeDetail"]["id"]))
                            {
                                $paymentDetailData = array(
                                    "id"=>$paymentTypeData["HospitalPaymentTypeDetail"]["id"],
                                    "thinapp_id"=>$thin_app_id,
                                    "medical_product_order_id"=>$medical_product_order_id,
                                    "hospital_payment_type_id"=>!empty($hospital_payment_type_id)?$hospital_payment_type_id:0,
                                    "remark"=>$remark,
                                    "mobile_no"=>$mobile_no,
                                    "txn_no"=>$txn_no,
                                    "beneficiary_name"=>$beneficiary_name,
                                    "bank_account"=>$bank_account,
                                    "transaction_id"=>$transaction_id,
                                    "valid_upto"=>$valid_upto,
                                    "holder_name"=>$holder_name,
                                    "card_no"=>$card_no,
                                );
                            }
                            else
                            {
                                $paymentDetailData = array(
                                    "thinapp_id"=>$thin_app_id,
                                    "medical_product_order_id"=>$medical_product_order_id,
                                    "hospital_payment_type_id"=>!empty($hospital_payment_type_id)?$hospital_payment_type_id:0,
                                    "remark"=>$remark,
                                    "mobile_no"=>$mobile_no,
                                    "txn_no"=>$txn_no,
                                    "beneficiary_name"=>$beneficiary_name,
                                    "bank_account"=>$bank_account,
                                    "transaction_id"=>$transaction_id,
                                    "valid_upto"=>$valid_upto,
                                    "holder_name"=>$holder_name,
                                    "card_no"=>$card_no,
                                );
                            }

                            $this->HospitalPaymentTypeDetail->saveAll($paymentDetailData);
                        	$update_settlment = Custom::updateSettlmentHistory($connection,$medical_product_order_id,$thin_app_id);
                            $connection->commit();
                            if(empty($paid_receipt_number)){
                                $paid_number = Custom::update_paid_order_receipt_number($thin_app_id, $medical_product_order_id);
                            }
                            $dataToSend['status'] = 1;
                            $dataToSend['message'] = "Successfully paid!";
                            $dataToSend['data_id'] = base64_encode($medical_product_order_id);
                            $order_data = @$service_list[0];
                            $is_opd = @$order_data['is_opd'];
                            $dataToSend['module'] = ($is_opd=='Y')?'OPD':'IPD';
                        }else{
                            $connection->rollback();
                            $dataToSend['status'] = 0;
                            $dataToSend['message'] = "Unable to adjust due amount";
                        }

                    }




                }else{
                    $dataToSend['status'] = 0;
                    $dataToSend['message'] = "Invalid Receipt";
                }
            }else{
                $dataToSend['status'] = 0;
                $dataToSend['message'] = "Please select at least one service";
            }
            echo json_encode($dataToSend);
            die;


        }
    }

	public function web_edit_order()
    {
        $this->layout = false;
        $this->autoRender = false;
        if ($this->request->is(array('ajax'))) {
            $login = $this->Session->read('Auth.User.User');
            $data = $this->request->data;

            $product_ids_array =array();
            if (isset($data['productID']) && !empty($data['productID'])) {
                $new_product_ids_array =$data['productID'];
            }
            if(!empty($new_product_ids_array)){
                $medical_product_order_id = $data['orderID'];
                $show_into_receipt = !empty($data['show_into_receipt'])?$data['show_into_receipt']:"NO";

                $medical_product_order_table = "medical_product_orders";    
                $medical_product_order_detail_table = "medical_product_order_details";    
                $appointment_customer_staff_service_table = "appointment_customer_staff_services";    

                $query = "SELECT mpo.created_by_user_id, mpo.paid_receipt_number, mpo.reffered_by_name, mpo.reffered_by_mobile,  mpod.appointment_staff_id as detail_doctor_id, mpo.appointment_staff_id as order_doctor_id, mpo.is_direct_billing, mpo.appointment_address_id as order_address_id, mpo.reffered_by_name, mpo.reffered_by_mobile, mpo.is_expense, mpo.payment_status, mpo.is_opd, pda.id AS due_amount_id, mpod.* from $medical_product_order_detail_table as mpod join $medical_product_order_table as mpo on mpod.medical_product_order_id = mpo.id left join medical_products as mp on mp.id = mpod.medical_product_id LEFT JOIN patient_due_amounts AS pda ON pda.medical_product_order_id = mpod.medical_product_order_id AND pda.payment_status ='DUE'  where mpod.medical_product_order_id = $medical_product_order_id";
                $connection = ConnectionUtil::getConnection();
                $service_list = $connection->query($query);
                
                if(!$service_list->num_rows){
                    $medical_product_order_table = "medical_product_orders_archive";    
                    $medical_product_order_detail_table = "medical_product_order_details_archive";    
                    $appointment_customer_staff_service_table = "appointment_customer_staff_services_archive";    
                    
                    $query = "SELECT mpo.created_by_user_id, mpo.paid_receipt_number, mpo.reffered_by_name, mpo.reffered_by_mobile,  mpod.appointment_staff_id as detail_doctor_id, mpo.appointment_staff_id as order_doctor_id, mpo.is_direct_billing, mpo.appointment_address_id as order_address_id, mpo.reffered_by_name, mpo.reffered_by_mobile, mpo.is_expense, mpo.payment_status, mpo.is_opd, pda.id AS due_amount_id, mpod.* from $medical_product_order_detail_table as mpod join $medical_product_order_table as mpo on mpod.medical_product_order_id = mpo.id left join medical_products as mp on mp.id = mpod.medical_product_id LEFT JOIN patient_due_amounts AS pda ON pda.medical_product_order_id = mpod.medical_product_order_id AND pda.payment_status ='DUE'  where mpod.medical_product_order_id = $medical_product_order_id";
                    $connection = ConnectionUtil::getConnection();
                    $service_list = $connection->query($query);
                
                }

                if ($service_list->num_rows) {
                    $service_list = mysqli_fetch_all($service_list,MYSQL_ASSOC);
                    $last_service_product_id_array = array_column($service_list,'medical_product_id');
                    $last_quantity_array = array_column($service_list,'quantity', 'medical_product_quantity_id');

                    $paid_receipt_number = $service_list[0]['paid_receipt_number'];
                    $is_direct_billing = $service_list[0]['is_direct_billing'];
                    $payment_status = $service_list[0]['payment_status'];
                	$created_by_user_id = $service_list[0]['created_by_user_id'];
                
                    if($service_list[0]['is_expense']=='Y'){
                        if(isset($data['AppointmentCustomerStaffService']['payment_status']) && $data['AppointmentCustomerStaffService']['payment_status'] =='PAID'){
                            $payment_status = "PAID";
                        }
                    }

                    $created = Custom::created();
                    $connection->autocommit(false);
                    $not_remove_to_product = $save_data_result = array();

                    foreach($new_product_ids_array as $key => $medical_product_id){

                        $medical_product_quantity_id = ($data['medical_product_quantity_id'][$key] != '') ? $data['medical_product_quantity_id'][$key] : 0;
                        $selected_doctor_id=0;
                        if($is_direct_billing=="YES" && !empty($data['biller_appointment_staff_id'][$key])){
                            $selected_doctor_id =$data['biller_appointment_staff_id'][$key];
                        }
                        $quantity = $data['quantity'][$key];
                    	$days = $data['days'][$key];
                        $discount_type = $data['discountType'][$key];
                        $discount_value = $data['discount'][$key];
                        $product_price = $data['price'][$key];
                        $product_amount = $data['price'][$key] * $data['quantity'][$key];
                        $amount = $product_amount;
                        $tax_value = $data['tax_value'][$key];
                        $tax_type = $data['tax_type'][$key];
                        $discount_amount = $data['discount'][$key];
                        if ($data['discountType'][$key] == "PERCENTAGE") {
                            $discount_amount = (($product_amount) * $data['discount'][$key]) / 100;
                        }


                        $total_amount = ($product_amount) - $discount_amount;
                        $tax_amount = ($total_amount * $data['tax_value'][$key]) / 100;
                        $total_amount = $total_amount + $tax_amount;
                    	$total_amount = $total_amount * $days;
                        $tmp = explode('.', $total_amount);
                        if (count($tmp) == 2) {
                            $total_amount = $tmp[0] . '.' . substr($tmp[1], 0, 2);
                        }
                        if (in_array($medical_product_id,$last_service_product_id_array)) {

                            if($medical_product_id != 0 ){
                                $show_into_receipt = "YES";
                            }

                            $sql = "update $medical_product_order_detail_table set days=?, appointment_staff_id=?, product_price =?, show_into_receipt=?, medical_product_quantity_id=?, quantity = ?, discount_type=?, tax_type=?, tax_value=?, tax_amount=?, discount_value=?, discount_amount =?, amount =?, total_amount=?,  modified=? where medical_product_order_id = ? and medical_product_id =? ";
                            $stmt_update = $connection->prepare($sql);
                            $created = Custom::created();
                            $stmt_update->bind_param('sssssssssssssssss', $days, $selected_doctor_id, $product_price, $show_into_receipt,  $medical_product_quantity_id, $quantity, $discount_type, $tax_type, $tax_value, $tax_amount, $discount_value, $discount_amount, $amount, $total_amount, $created, $medical_product_order_id, $medical_product_id);
                            if($save_data_result[]= $stmt_update->execute()){
                                $not_remove_to_product[] = $medical_product_id;
                            }


                        }else{


                            $service="";
                            $service_data = $service_list[0];
                            $appointment_customer_staff_service_id = !empty($service_data['appointment_customer_staff_service_id'])?$service_data['appointment_customer_staff_service_id']:0;
                            $appointment_customer_id = !empty($service_data['appointment_customer_id'])?$service_data['appointment_customer_id']:0;
                            $children_id = !empty($service_data['children_id'])?$service_data['children_id']:0;
                            $appointment_staff_id = $selected_doctor_id;
                            $show_into_receipt = "YES";
                            $lab_pharmacy_user_id = !empty($service_data['lab_pharmacy_user_id'])?$service_data['lab_pharmacy_user_id']:0;
                            $lab_pharmacy_type = !empty($service_data['lab_pharmacy_type'])?$service_data['lab_pharmacy_type']:'NONE';
                            $lab_pharmacy_is_inhouse = !empty($service_data['lab_pharmacy_is_inhouse'])?$service_data['lab_pharmacy_is_inhouse']:'NONE';
                            $thin_app_id = $login['thinapp_id'];
                            $sql = "INSERT INTO $medical_product_order_detail_table (lab_pharmacy_user_id, lab_pharmacy_type, lab_pharmacy_is_inhouse, medical_product_order_id, medical_product_id, medical_product_quantity_id, service, appointment_customer_staff_service_id, appointment_staff_id, show_into_receipt, appointment_customer_id, children_id, thinapp_id, product_price, quantity, discount_type, tax_type, tax_value, tax_amount, discount_value, discount_amount, amount, total_amount, created, modified) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                            $stmt_save = $connection->prepare($sql);
                            $stmt_save->bind_param('sssssssssssssssssssssssss', $lab_pharmacy_user_id, $lab_pharmacy_type, $lab_pharmacy_is_inhouse, $medical_product_order_id, $medical_product_id, $medical_product_quantity_id, $service, $appointment_customer_staff_service_id, $appointment_staff_id, $show_into_receipt, $appointment_customer_id, $children_id,$thin_app_id,$product_price,$quantity,$discount_type,$tax_type,$tax_value,$tax_amount,$discount_value,$discount_amount,$amount,$total_amount, $created, $created);
                            if($save_data_result[]= $stmt_save->execute()){
                                $not_remove_to_product[] = $medical_product_id;
                            }
                        }

                        $medical_product_quantity_id = $data['medical_product_quantity_id'][$key];
                        if ($medical_product_quantity_id > 0) {

                            $qty = (array_key_exists($medical_product_quantity_id,$last_quantity_array))?($data['quantity'][$key]-$last_quantity_array[$medical_product_quantity_id]):$data['quantity'][$key];
                            $sql = "update medical_product_quantities set sold = sold + ? where id = ?";
                            $stmt_update_qty = $connection->prepare($sql);
                            $stmt_update_qty->bind_param('ss', $qty, $data['medical_product_quantity_id'][$key]);
                            $save_data_result[]= $stmt_update_qty->execute();




                        }

                    }

                    $delete_service_detail_id_array=array();
                    foreach($service_list as $key => $service){
                        if(!in_array($service['medical_product_id'],$not_remove_to_product)){

                            if ($service['medical_product_quantity_id'] > 0) {
                                $sql = "update medical_product_quantities set sold = sold - ? where id = ?";
                                $stmt_update_qty = $connection->prepare($sql);
                                $stmt_update_qty->bind_param('ss', $service['quantity'], $service['medical_product_quantity_id']);
                                $save_data_result[]= $stmt_update_qty->execute();
                            }

                            if($service['medical_product_id'] > 0){
                                /* delete service from order detail */
                                $sql = "delete from  $medical_product_order_detail_table where id = ?";
                                $stmt_delete = $connection->prepare($sql);
                                $stmt_delete->bind_param('s', $service['id']);
                                $save_data_result[]= $stmt_delete->execute();
                            }


                        }
                    }

                    $final_amount = $data['AppointmentCustomerStaffService']['tot'];
                    $display_amount = $data['AppointmentCustomerStaffService']['display'];
                    $hospital_payment_type_id = $data['AppointmentCustomerStaffService']['hospital_payment_type_id'];
                    $payment_description = $data['AppointmentCustomerStaffService']['payment_description'];
                    $payment_type_name = $data['AppointmentCustomerStaffService']['payment_type_name'];
                    $appointment_staff_id = $service_list[0]['order_doctor_id'];
                    $appointment_address_id = $service_list[0]['order_address_id'];
                    $reffered_by_name = $service_list[0]['reffered_by_name'];
                    $reffered_by_mobile = $service_list[0]['reffered_by_mobile'];
                    if($is_direct_billing=="YES"){
                        $appointment_staff_id =$data['appointment_staff_id'];
                        $appointment_address_id =$data['appointment_address_id'];
                        $reffered_by_name = $data['reffered_by_name'];
                        $reffered_by_mobile = $data['reffered_by_mobile'];
                    }


                    $sql = "update $medical_product_order_table set reffered_by_name =?, reffered_by_mobile=?, appointment_address_id =?, appointment_staff_id=?, payment_status=?, hospital_payment_type_id =?, payment_description =?, payment_type_name=?, modified_by_user_id = ?, total_amount=?, modified=? where id = ?";
                    $stmt_update_qty = $connection->prepare($sql);
                    $stmt_update_qty->bind_param('ssssssssssss', $reffered_by_name, $reffered_by_mobile, $appointment_address_id, $appointment_staff_id, $payment_status, $hospital_payment_type_id, $payment_description, $payment_type_name, $login['id'], $final_amount, $created, $medical_product_order_id );
                    $save_data_result[]= $stmt_update_qty->execute();
                
                	if(empty($created_by_user_id)){
                        $sql = "UPDATE $medical_product_order_table SET created_by_user_id =? where id = ?";
                        $stmt_created = $connection->prepare($sql);
                        $stmt_created->bind_param('ss', $login['id'] , $medical_product_order_id);
                        $save_data_result[] = $stmt_created->execute();
                    }

                    if(!empty($save_data_result) && !in_array(false,$save_data_result)){

                        $service_data = $service_list[0];
                        if(!empty($service_data['appointment_customer_id'])){
                            $patient_type = "CUSTOMER";
                            $patient_id = $service_data['appointment_customer_id'];
                        }else{
                            $patient_id = $service_data['children_id'];
                            $patient_type = "CHILDREN";
                        }

                        $thin_app_id = $login['thinapp_id'];
                        $result =   Custom::update_patient_due_amount($display_amount, $thin_app_id,$medical_product_order_id,$login['id'],$final_amount,$patient_id,$patient_type);
                        if($result){




                            $remark = isset($data["remark"])?$data["remark"]:"";
                            $mobile_no = isset($data["mobile_no"])?$data["mobile_no"]:"";
                            $txn_no = isset($data["txn_no"])?$data["txn_no"]:"";
                            $beneficiary_name = isset($data["beneficiary_name"])?$data["beneficiary_name"]:"";
                            $bank_account = isset($data["bank_account"])?$data["bank_account"]:"";
                            $transaction_id = isset($data["transaction_id"])?$data["transaction_id"]:"";
                            $valid_upto = isset($data["valid_upto"])?$data["valid_upto"]:"";
                            $holder_name = isset($data["holder_name"])?$data["holder_name"]:"";
                            $card_no = isset($data["card_no"])?$data["card_no"]:"";

                            $paymentTypeData = $this->HospitalPaymentTypeDetail->find("first",array(
                                "fields"=>array("HospitalPaymentTypeDetail.id"),
                                "conditions"=>array(
                                    "HospitalPaymentTypeDetail.medical_product_order_id"=>$medical_product_order_id
                                ),
                                "contain"=>false,
                            ));

                            if(!empty($paymentTypeData["HospitalPaymentTypeDetail"]["id"]))
                            {
                                $paymentDetailData = array(
                                    "id"=>$paymentTypeData["HospitalPaymentTypeDetail"]["id"],
                                    "thinapp_id"=>$thin_app_id,
                                    "medical_product_order_id"=>$medical_product_order_id,
                                    "hospital_payment_type_id"=>!empty($hospital_payment_type_id)?$hospital_payment_type_id:0,
                                    "remark"=>$remark,
                                    "mobile_no"=>$mobile_no,
                                    "txn_no"=>$txn_no,
                                    "beneficiary_name"=>$beneficiary_name,
                                    "bank_account"=>$bank_account,
                                    "transaction_id"=>$transaction_id,
                                    "valid_upto"=>$valid_upto,
                                    "holder_name"=>$holder_name,
                                    "card_no"=>$card_no,
                                );
                            }
                            else
                            {
                                $paymentDetailData = array(
                                    "thinapp_id"=>$thin_app_id,
                                    "medical_product_order_id"=>$medical_product_order_id,
                                    "hospital_payment_type_id"=>!empty($hospital_payment_type_id)?$hospital_payment_type_id:0,
                                    "remark"=>$remark,
                                    "mobile_no"=>$mobile_no,
                                    "txn_no"=>$txn_no,
                                    "beneficiary_name"=>$beneficiary_name,
                                    "bank_account"=>$bank_account,
                                    "transaction_id"=>$transaction_id,
                                    "valid_upto"=>$valid_upto,
                                    "holder_name"=>$holder_name,
                                    "card_no"=>$card_no,
                                );
                            }

                            $this->HospitalPaymentTypeDetail->saveAll($paymentDetailData);
                        	$update_settlment = Custom::updateSettlmentHistory($connection,$medical_product_order_id,$thin_app_id);
                            $connection->commit();
                            if(empty($paid_receipt_number)){
                                $paid_number = Custom::update_paid_order_receipt_number($thin_app_id, $medical_product_order_id);
                            }
                            $dataToSend['status'] = 1;
                            $dataToSend['message'] = "Successfully paid!";
                            $dataToSend['data_id'] = base64_encode($medical_product_order_id);
                            $order_data = @$service_list[0];
                            $is_opd = @$order_data['is_opd'];
                            $dataToSend['module'] = ($is_opd=='Y')?'OPD':'IPD';
                        }else{
                            $connection->rollback();
                            $dataToSend['status'] = 0;
                            $dataToSend['message'] = "Unable to adjust due amount";
                        }

                    }




                }else{
                    $dataToSend['status'] = 0;
                    $dataToSend['message'] = "Invalid Receipt";
                }
            }else{
                $dataToSend['status'] = 0;
                $dataToSend['message'] = "Please select at least one service";
            }
            echo json_encode($dataToSend);
            die;


        }
    }

    public function load_edit_customer_modal()
    {
        $this->layout = 'ajax';
        $login = $this->Session->read('Auth.User.User');
        $thin_app_id = $login['thinapp_id'];
        if ($this->request->is('ajax')) {
            $folder_id = $patient_id =$pregnancy_semester_id = 0;
            $data_array =array();
            $patient_id = isset($this->request->data['pi']) ? base64_decode($this->request->data['pi']) : "";
            $appointment_id = isset($this->request->data['ai']) ? base64_decode($this->request->data['ai']) : 0;
            $child_growth_id = 0;
            $user_type = @($this->request->data['pt']);
            if ($user_type == 'CHILDREN') {
                $this->request->data['Children'] = $data_array = Custom::get_child_by_id($patient_id,$appointment_id);
                $folder_id = base64_encode($this->request->data['Children']['folder_id']);
                $child_growth_id = base64_encode($this->request->data['Children']['child_growth_id']);
            } else if($user_type == 'CUSTOMER'){
                $this->request->data['AppointmentCustomer'] = $data_array=  Custom::get_customer_by_id($patient_id,$appointment_id);
                $conceive_date =$this->request->data['AppointmentCustomer']['conceive_date'];
                $expected_date =$this->request->data['AppointmentCustomer']['expected_date'];
                if(!empty($conceive_date) && $conceive_date != '0000-00-00'){
                    $this->request->data['AppointmentCustomer']['conceive_date'] = date('d/m/Y',strtotime($conceive_date));
                }else{
                    $this->request->data['AppointmentCustomer']['conceive_date'] = '';
                }
                if(!empty($expected_date) && $expected_date != '0000-00-00'){
                    $this->request->data['AppointmentCustomer']['expected_date'] = date('d/m/Y',strtotime($expected_date));
                }else{
                    $this->request->data['AppointmentCustomer']['expected_date'] = '';
                }

                $folder_id = base64_encode($this->request->data['AppointmentCustomer']['folder_id']);
                $pregnancy_semester_id = 0;//base64_encode($this->request->data['AppointmentCustomer']['pregnancy_semester_id']);
            }
            if(!empty($data_array)){
                $patient_id = base64_encode($patient_id);
                $appointment_id = base64_encode($appointment_id);
                $this->set(compact( 'user_type','folder_id','patient_id','pregnancy_semester_id','appointment_id','child_growth_id'));
                $this->render('load_edit_customer_modal', 'ajax');
            }else{
                exit();
            }

        }

    }

    public function web_edit_customer()
    {

        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $login = $this->Session->read('Auth.User.User');
            $patient_id = !empty($this->request->data['pi'])?base64_decode($this->request->data['pi']):0;
            $appointment_id = !empty($this->request->data['ai'])?base64_decode($this->request->data['ai']):0;
            $form_post = $this->request->data;
            $response=array();
            if(!empty($patient_id)){
                 parse_str($_POST['data'], $this->request->data);
                if (isset($this->request->data['data']['Children'])) {
                    $data = $this->request->data['data']['Children'];
                    $save_child['app_key'] = APP_KEY;
                    $save_child['child_id'] = $children_id = $patient_id;
                    $save_child['thin_app_id'] = $login['thinapp_id'];
                    $save_child['user_id'] = $login['id'];
                    $save_child['child_name'] =$customer_name =  trim($data['child_name']);
                    $save_child['mobile'] = $customer_mobile = Custom::create_mobile_number($data['mobile']);
                    $save_child['patient_address'] = $data['patient_address'];
                    if (!empty($data['dob'])) {
                        $date = DateTime::createFromFormat('d/m/Y', $data['dob']);
                        $save_child['dob'] = $date->format('Y-m-d');
                    }
                    $save_child['gender'] = $data['gender'];
                    $save_child['parents_name'] = $data['parents_name'];
                    $save_child['email'] = @$data['email'];
                    $save_child['relation_prefix'] = $data['relation_prefix'];
                    $save_child['parents_mobile'] = $data['parents_mobile'];
                    $save_child['blood_group'] = $data['blood_group'];
                    $save_child['height'] = @$data['height'];
                    $save_child['weight'] = @$data['weight'];
                    $save_child['head_circumference'] = @$data['head_circumference'];
                    $save_child['bp_systolic'] = @$data['bp_systolic'];
                    $save_child['bp_diasystolic'] = @$data['bp_diasystolic'];
                    $save_child['bmi'] = @$data['bmi'];
                    $save_child['bmi_status'] = @$data['bmi_status'];
                    $save_child['temperature'] = @$data['temperature'];
                    $save_child['o_saturation'] = @$data['o_saturation'];
                    $save_child['field1'] = @$data['field1'];
                    $save_child['field2'] = @$data['field2'];
                    $save_child['field3'] = @$data['field3'];
                    $save_child['field4'] = @$data['field4'];
                    $save_child['field5'] = @$data['field5'];
                    $save_child['field6'] = @$data['field6'];
                    $save_child['child_growth_id'] = base64_decode($data['child_growth_id']);
                    $save_child['country_id'] = isset($data['country_id'][0])?$data['country_id'][0]:0;
                    $save_child['state_id'] = isset($data['state_id'][0])?$data['state_id'][0]:0;
                    $save_child['city_id'] = isset($data['city_id'][0])?$data['city_id'][0]:0;
                    $save_child['city_name'] = @$data['city_name'];
                    $save_child['title'] = @$data['title'];
                    $save_child['patient_category'] = @$data['patient_category'];
                    $save_child['reset_vaccination'] = @$data['reset_vaccination'];

                    $response = json_decode(WebservicesFunction::edit_child($save_child,true),true);
                    if(!empty($appointment_id) && $response['status']==1){
                        $created= Custom::created();
                        $connection = ConnectionUtil::getConnection();
                        $connection->autocommit(true);
                        $sql = "update appointment_customer_staff_services set appointment_patient_name=?, referred_by = ?, referred_by_mobile=?, reason_of_appointment=?, notes =?, modified=? where id = ?";
                        $stmt_df = $connection->prepare($sql);
                        $created = Custom::created();
                        $stmt_df->bind_param('sssssss', $customer_name, $data['referred_by'], $data['referred_by_mobile'], $data['reason_of_appointment'],  $data['notes'], $created, $appointment_id);
                        $stmt_df->execute();

                    }

                } else {

                    $data = $appointment_customer_form =$this->request->data['data']['AppointmentCustomer'];

                    $login = $this->Session->read('Auth.User.User');
                    $save_customer['app_key'] = APP_KEY;
                    $save_customer['patient_id'] = $patient_id;
                    $save_customer['thin_app_id'] = $login['thinapp_id'];
                    $save_customer['user_id'] = $login['id'];
                    $save_customer['patient_name'] = $customer_name = $data['first_name'];
                    $save_customer['email'] = $data['email'];
                    $save_customer['mobile'] = $login['mobile'];
                    $save_child['country_id'] = isset($data['country_id'][0])?$data['country_id'][0]:0;
                    $save_child['state_id'] = isset($data['state_id'][0])?$data['state_id'][0]:0;
                    $save_child['city_id'] = isset($data['city_id'][0])?$data['city_id'][0]:0;
                    $save_child['city_name'] = @$data['city_name'];

                    $save_customer['patient_mobile'] = Custom::create_mobile_number($data['mobile']);
                    $save_customer['patient_address'] = $data['address'];
                    $save_customer['third_party_uhid'] = @$data['third_party_uhid'];
                    if (!empty($data['dob'])) {
                        $date = DateTime::createFromFormat('d/m/Y', $data['dob']);
                        $save_customer['dob'] = $date->format('Y-m-d');
                    }

                    if (!empty($data['conceive_date'])) {
                        $date = DateTime::createFromFormat('d/m/Y', $data['conceive_date']);
                        $save_customer['conceive_date'] = $date->format('Y-m-d');
                    }
                    if (!empty($data['expected_date'])) {
                        $date = DateTime::createFromFormat('d/m/Y', $data['expected_date']);
                        $save_customer['expected_date'] = $date->format('Y-m-d');
                    }
                    $save_customer['gender'] = $data['gender'];
                    $save_customer['age'] = $data['age'];
                    $save_customer['parents_name'] = $data['parents_name'];
                    $save_customer['parents_mobile'] = $data['parents_mobile'];
                    $save_customer['marital_status'] = $data['marital_status'];
                    $save_customer['blood_group'] = $data['blood_group'];
                    $save_customer['relation_prefix'] = $data['relation_prefix'];
                    $save_customer['height'] = @$data['height'];
                    $save_customer['weight'] = @$data['weight'];
                    $save_customer['head_circumference'] = @$data['head_circumference'];
                    $save_customer['request_from'] = "WEB";
                    $save_customer['patient_type'] = "CUSTOMER";
                    $save_customer['bp_systolic'] = @$data['bp_systolic'];
                    $save_customer['bp_diasystolic'] = @$data['bp_diasystolic'];
                    $save_customer['bmi'] = @$data['bmi'];
                    $save_customer['bmi_status'] = @$data['bmi_status'];
                    $save_customer['temperature'] = @$data['temperature'];
                    $save_customer['o_saturation'] = @$data['o_saturation'];
                    $save_customer['field1'] = @$data['field1'];
                    $save_customer['field2'] = @$data['field2'];
                    $save_customer['field3'] = @$data['field3'];
                    $save_customer['field4'] = @$data['field4'];
                    $save_customer['field5'] = @$data['field5'];
                    $save_customer['field6'] = @$data['field6'];

                    $save_customer['country_id'] = isset($data['country_id'][0])?$data['country_id'][0]:0;
                    $save_customer['state_id'] = isset($data['state_id'][0])?$data['state_id'][0]:0;
                    $save_customer['city_id'] = isset($data['city_id'][0])?$data['city_id'][0]:0;
                    $save_customer['city_name'] = @$data['city_name'];
                    $save_customer['title'] = @$data['title'];
                    $save_customer['patient_category'] = @$data['patient_category'];

                    if(empty($folder_id)){
                        $folder_id = Custom::get_patient_folder_id($login['thinapp_id'],$patient_id);
                        if(empty($folder_id)){
                            $res = json_decode(Custom::create_and_share_folder($login['thinapp_id'],$save_customer['mobile'],$save_customer['patient_name'],'CUSTOMER', $patient_id),true);
                            if(!empty($res['folder_id'])){
                                $folder_id = $res['folder_id'];
                            }
                        }
                    }
                    $save_customer['folder_id'] = $folder_id;
                    $response = json_decode(WebServicesFunction_2_3::edit_appointment_patient($save_customer),true);
                    if($response['status'] == 1){

                        if(!empty($appointment_id) && $response['status']==1){
                            $created= Custom::created();
                            $connection = ConnectionUtil::getConnection();
                            $connection->autocommit(true);
                            $sql = "update appointment_customer_staff_services set appointment_patient_name=?, referred_by = ?, referred_by_mobile=?, reason_of_appointment=?, notes =?, modified=? where id = ?";
                            $stmt_df = $connection->prepare($sql);
                            $created = Custom::created();
                            $stmt_df->bind_param('sssssss', $customer_name, $data['referred_by'], $data['referred_by_mobile'], $data['reason_of_appointment'],  $data['notes'], $created, $appointment_id);
                            $stmt_df->execute();

                        }

                        $conceive_date = $expected_date = '';
                        $pregnancy_semester_id = !empty($form_post['psi'])?base64_decode($form_post['psi']):0;
                        if (!empty($appointment_customer_form['conceive_date']) && !empty($appointment_customer_form['gender'] =="FEMALE")) {
                            try {
                                $from_date = DateTime::createFromFormat('d/m/Y', $appointment_customer_form['conceive_date']);
                                $conceive_date = $from_date->format('Y-m-d');
                                if (!empty($data['expected_date'])) {
                                    try {
                                        $from_date = DateTime::createFromFormat('d/m/Y', $appointment_customer_form['expected_date']);
                                        $expected_date = $from_date->format('Y-m-d');
                                    } catch (Exception $e) {

                                    }
                                }
                                $conceive_data['thinapp_id']=$login['thinapp_id'];
                                $conceive_data['appointment_customer_id']=$patient_id;
                                $conceive_data['conceive_date']=$conceive_date;
                                $conceive_data['expected_date']=$expected_date;
                                $save_semester = $this->PregnancySemester->saveAll($conceive_data);
                            } catch (Exception $e) {

                            }
                        }
                    }
                }
            }else{
                $response['status'] = 0;
                $response['message']="Invalid Patient";
            }
            echo json_encode($response);
        }
        exit();

    }



    public function refund_order_amount()
    {
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $login = $this->Session->read('Auth.User.User');
            try {

                $params = array();
                $valid_request = true;
                parse_str($this->request->data, $params);
                $medical_product_order_id = base64_decode($params['data_ai']);
                $refund_online = isset($params['refund_online'])?$params['refund_online']:'NO';
                $message = $params['message'];
                $connection = ConnectionUtil::getConnection();
                $query = "SELECT mpo.is_refunded, mpo.appointment_customer_staff_service_id, mpo.id as medical_product_order_id, IFNULL(mp.name,mpod.service) AS service_name,mpod.medical_product_id AS service_id, mpod.id AS detail_id, mpod.total_amount, mpod.show_into_receipt FROM  medical_product_orders AS mpo left JOIN  medical_product_order_details AS mpod  ON mpod.medical_product_order_id = mpo.id left JOIN medical_products AS mp ON mp.id = mpod.medical_product_id WHERE  mpo.id = $medical_product_order_id";
                $data = $connection->query($query);
                if ($data->num_rows) {
                    $order_total_amount = $order_refund_amount = $medical_product_id = 0;
                    $detail_data = mysqli_fetch_all($data,MYSQL_ASSOC);
                    if($detail_data[0]['is_refunded']=='NO'){
                        $created = Custom::created();
                        $connection->autocommit(false);
                        $update_order = array();
                        foreach($detail_data as $key => $detail){
                            if($key==0){
                                $medical_product_id = $detail['medical_product_order_id'];
                                $appointment_id = $detail['appointment_customer_staff_service_id'];
                            }

                            if($detail['show_into_receipt']=="YES"){
                                $refund_amount = $params["box_".$detail['detail_id']];
                                $refund_amount = empty($refund_amount)?0:$refund_amount;
                                $total_amount = $detail['total_amount'] - $refund_amount;
                                $order_total_amount += $detail['total_amount'];
                                $order_refund_amount += $refund_amount;
                                if($detail['total_amount'] >= $refund_amount){
                                    $query = "update medical_product_order_details set total_amount =?, refund_amount =?, modified =? where id = ?";
                                    $stmt = $connection->prepare($query);
                                    $stmt->bind_param('ssss', $total_amount, $refund_amount, $created, $detail['detail_id']);
                                    $update_order[] = $stmt->execute();

                                }else{
                                    $response['status'] = 0;
                                    $response['message'] = "Refunded amount can not be larger than service amount <br>Service Name : ".$detail['service_name'];

                                    $valid_request = false;
                                    break;
                                }
                            }

                        }
                        if($valid_request === true ){

                            $result =array();
                            if(!empty($update_order) && !in_array(false,$update_order)){
                                $order_total_amount = $order_total_amount - $order_refund_amount;
                                /* APPOINTMENT REFUND */
                                if(!empty($appointment_id)){
                                    $refund_status = "REFUND";
                                    $query = "update appointment_customer_staff_services set status =?, delete_status =?, refund_by_user_id =?, refund_reason =?, refund_amount =?, modified =?    where id = ?";
                                    $app_stmt = $connection->prepare($query);
                                    $app_stmt->bind_param('sssssss', $refund_status,$refund_status, $login['id'], $message, $order_refund_amount, $created, $appointment_id);
                                    $result[] =$app_stmt->execute();
                                }


                                /* ORDER REFUND*/
                                $is_refunded = "YES";
                                $refund_payment_type_id= $params['data']['hospital_payment_type_id'];
                                $refund_by_user_id = $login['id'];
                                $query = "update medical_product_orders set refund_date_time=?, refund_by_user_id =?, is_refunded =?, refund_payment_type_id =?, total_amount =?, refund_amount =? , modified =? where id = ?";

                                $order_stmt = $connection->prepare($query);
                                $order_stmt->bind_param('ssssssss', $created, $refund_by_user_id, $is_refunded, $refund_payment_type_id, $order_total_amount, $order_refund_amount, $created, $medical_product_id);
                                $result[] =$order_stmt->execute();
                                if(!empty($result) && !in_array(false,$result)) {
                                    $allow_commit = true;
                                    if($refund_online=='YES' && !empty($appointment_id)){
                                        $detail_data = Custom::getCashFreeOnlineAmount($appointment_id,$login['thinapp_id']);
                                        if (!empty($detail_data)) {
                                            $referenceId = $detail_data['refrence_id'];
                                            $medical_product_order_id = $detail_data['medical_product_order_id'];
                                            $amount = $detail_data['amount'];
                                            if(!empty($referenceId) && !empty($amount)){
                                                $result = json_decode(Custom::cashFreeRefund($connection,$login['thinapp_id'], $refund_by_user_id, $medical_product_order_id, $referenceId,$amount,$detail_data['booking_convenience_order_detail_id'],$message,$detail_data['payment_mode']),true);
                                                if($result['status']=='OK'){
                                                    $allow_commit = true;
                                                }else{
                                                    $allow_commit = false;
                                                    $message = $result['message'];
                                                }
                                            }
                                        }
                                    }


                                    if($allow_commit===true){
                                        $connection->commit();
                                        $response['status'] = 1;
                                        $response['message'] = "Successfully refunded!";
                                    }else{
                                        $connection->rollback();
                                        $response['status'] = 0;
                                        $response['message'] = $message;
                                    }


                                } else {
                                    $connection->rollback();
                                    $response['status'] = 0;
                                    $response['message'] = "Sorry, Refund could not update";
                                }
                            }else{
                                $connection->rollback();
                                $response['status'] = 0;
                                $response['message'] = "Sorry, Refund could not update";
                            }
                        }
                    }else{
                        $response['status'] = 0;
                        $response['message'] = "You have already processed refund for this appointment";
                    }
                }else{
                    $response['status'] = 0;
                    $response['message'] = "Invalid appointment";
                }
            } catch (Exception $e) {
                $response['status'] = 0;
                $response['message'] = "Oops, Something went wrong!";

            }
        } else {
            $response['status'] = 0;
            $response['message'] = "Something went wrong!";
        }

        Custom::sendResponse($response);
        Custom::send_process_to_background();

        $login = $this->Session->read('Auth.User.User');
        $thin_app_id = $login['thinapp_id'];

        Custom::send_web_tracker_notification($thin_app_id);
        die();

    }



    public function search_hos_service()
    {
        $reqData = $this->request->query;
        $pram = array();
        if (!empty($reqData['name'])) {
            $pram['n'] = $reqData['name'];
        }
        if (!empty($reqData['tax_id'])) {
            $pram['t'] = $reqData['tax_id'];
        }
        if (!empty($reqData['type_id'])) {
            $pram['ti'] = $reqData['type_id'];
        }

        $this->redirect(
            array(
                "controller" => "app_admin",
                "action" => "hospital_service_category",
                "?" => $pram,
            )
        );
    }

    public function hospital_service_category()
    {
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User.User');
        $conditions = array();
        $searchData = $this->request->query;

        if (isset($searchData['n']) && !empty($searchData['n'])) {
            $this->request->data['Search']['name'] = $searchData['n'];
            $conditions["HospitalServiceCategory.name LIKE"] = '%' . $searchData['n'] . '%';
        }

        if (isset($searchData['t']) && !empty($searchData['t'])) {
            $this->request->data['Search']['tax_id'] = $searchData['t'];
            $conditions["HospitalServiceCategory.hospital_tax_rate_id"] = $searchData['t'];
        }

        if (isset($searchData['ti']) && !empty($searchData['ti'])) {
            $this->request->data['Search']['type_id'] = $searchData['ti'];
            $conditions["HospitalServiceCategory.hospital_service_category_type_id"] = $searchData['ti'];
        }

        $loginLab = $this->Session->read('Auth.User');
        $roleLab = $loginLab['USER_ROLE'];
        if ($roleLab == "LAB" || $roleLab == 'PHARMACY') {

            $isInhouse = $loginLab['LabPharmacyUser']['is_inhouse'];

            if($isInhouse == 'YES')
            {
                $conditions['HospitalServiceCategory.lab_pharmacy_user_id'] = array($loginLab['LabPharmacyUser']['id'],0);
            }
            else
            {
                $conditions['HospitalServiceCategory.lab_pharmacy_user_id'] = $loginLab['LabPharmacyUser']['id'];
            }


        } else {
            $conditions['OR'] = array('HospitalServiceCategory.lab_pharmacy_user_id' => 0, "(HospitalServiceCategory.lab_pharmacy_type = 'LAB' AND HospitalServiceCategory.lab_pharmacy_is_inhouse = 'YES')",);
        }

        /*$this->paginate = array(
            "conditions" => array(
                "HospitalServiceCategory.thinapp_id" => $login['thinapp_id'],
                $conditions
            ),
            'contain'=>array('HospitalTaxRate','HospitalServiceCategoryType'),
            'limit'=>WEB_PAGINATION_LIMIT
        );
        $data = $this->paginate('HospitalServiceCategory');*/

        $data = $this->HospitalServiceCategory->find('all', array(
            "conditions" => array(
                "HospitalServiceCategory.thinapp_id" => $login['thinapp_id'],
                $conditions
            ),
            'contain' => array('HospitalTaxRate', 'HospitalServiceCategoryType')
        ));

        $login1 = $this->Session->read('Auth.User');
        $reportTitle = $login1['Thinapp']['name'].' ('.date('d/m/Y').')';
        $this->set(compact('data','reportTitle'));


    }

    public function add_hospital_service_category()
    {
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User.User');

        if ($this->request->is(array('post', 'put'))) {
            $data = $this->request->data['HospitalServiceCategory'];
            $data['thinapp_id'] = $login['thinapp_id'];
            $data['name'] = trim($data['name']);

            $labID = 0;
            $labPharmacyType = 'NONE';
            $labPharmacyIsInhouse = 'NONE';
            $loginLab = $this->Session->read('Auth.User');
            $roleLab = $loginLab['USER_ROLE'];
            if ($roleLab == "LAB" || $roleLab == 'PHARMACY') {
                $labID = $loginLab['LabPharmacyUser']['id'];
                $labPharmacyType = $roleLab;
                $labPharmacyIsInhouse = $loginLab['LabPharmacyUser']['is_inhouse'];
            }
            $data['lab_pharmacy_user_id'] = $labID;
            $data['lab_pharmacy_type'] = $labPharmacyType;
            $data['lab_pharmacy_is_inhouse'] = $labPharmacyIsInhouse;

            $this->HospitalServiceCategory->set($data);
            if ($this->HospitalServiceCategory->validates()) {
                if ($this->HospitalServiceCategory->save($data)) {
                    $this->Session->setFlash('Service category added successfully!', 'default', array(), 'success');
                    $this->redirect(array('controller' => 'app_admin', 'action' => 'add_hospital_service_category'));
                } else {
                    $this->Session->setFlash("Sorry, Couldn't add service category!", 'default', array(), 'error');
                }
            }
        }

    }

    public function edit_hospital_service_category($id = null)
    {
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User.User');

        $id = base64_decode($id);
        if ($this->request->is(array('post', 'put'))) {
            $data = $this->request->data['HospitalServiceCategory'];
            $data['id'] = $id;
            $data['thinapp_id'] = $login['thinapp_id'];
            $data['name'] = trim($data['name']);
            $this->HospitalServiceCategory->set($data);
            if ($this->HospitalServiceCategory->validates()) {
                if ($this->HospitalServiceCategory->save($data)) {
                    $this->Session->setFlash('Service category edited successfully!', 'default', array(), 'success');
                    $this->redirect(array('controller' => 'app_admin', 'action' => 'hospital_service_category'));
                } else {
                    $this->Session->setFlash("Sorry, Couldn't edit service category!", 'default', array(), 'error');
                }
            }
        } else {
            $this->request->data = $this->HospitalServiceCategory->findById($id);

        }


    }


    public function search_hos_pay_type()
    {
        $reqData = $this->request->query;
        $pram = array();
        if (!empty($reqData['name'])) {
            $pram['n'] = $reqData['name'];
        }

        $this->redirect(
            array(
                "controller" => "app_admin",
                "action" => "hospital_payment_type",
                "?" => $pram,
            )
        );
    }

    public function hospital_payment_type()
    {
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User.User');
        $conditions = array();
        $searchData = $this->request->query;

        if (isset($searchData['n']) && !empty($searchData['n'])) {
            $this->request->data['Search']['name'] = $searchData['n'];
            $conditions["HospitalPaymentType.name LIKE"] = '%' . $searchData['n'] . '%';
        }

        $loginLab = $this->Session->read('Auth.User');
        $roleLab = $loginLab['USER_ROLE'];
        if ($roleLab == "LAB" || $roleLab == 'PHARMACY') {
            $isInhouse = $loginLab['LabPharmacyUser']['is_inhouse'];

            if($isInhouse == 'YES')
            {
                $conditions['HospitalPaymentType.lab_pharmacy_user_id'] = array($loginLab['LabPharmacyUser']['id'],0);
            }
            else
            {
                $conditions['HospitalPaymentType.lab_pharmacy_user_id'] = $loginLab['LabPharmacyUser']['id'];
            }

        } else {
            $conditions['OR'] = array('HospitalPaymentType.lab_pharmacy_user_id' => 0, "(HospitalPaymentType.lab_pharmacy_type = 'LAB' AND HospitalPaymentType.lab_pharmacy_is_inhouse = 'YES')",);
        }

        /*$this->paginate = array(
            "conditions" => array(
                "HospitalPaymentType.thinapp_id" => $login['thinapp_id'],
                $conditions
            ),
            'contain'=>false,
            'limit'=>WEB_PAGINATION_LIMIT
        );
        $data = $this->paginate('HospitalPaymentType');*/


        $data = $this->HospitalPaymentType->find('all', array(
            "conditions" => array(
                "OR"=>array(
                    "HospitalPaymentType.thinapp_id" => $login['thinapp_id'],
                    array("HospitalPaymentType.thinapp_id"=>0, "HospitalPaymentType.status"=>'ACTIVE')
                ),
                $conditions
            ),
            'contain' => false
        ));

        $login1 = $this->Session->read('Auth.User');
        $reportTitle = $login1['Thinapp']['name'].' ('.date('d/m/Y').')';

        $this->set(compact('reportTitle','data'));


    }

    public function add_hospital_payment_type()
    {
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User.User');

        if ($this->request->is(array('post', 'put'))) {
            $data = $this->request->data['HospitalPaymentType'];
            $data['thinapp_id'] = $login['thinapp_id'];
            $data['name'] = trim($data['name']);

            $labID = 0;
            $labPharmacyType = 'NONE';
            $labPharmacyIsInhouse = 'NONE';
            $loginLab = $this->Session->read('Auth.User');
            $roleLab = $loginLab['USER_ROLE'];
            if ($roleLab == "LAB" || $roleLab == 'PHARMACY') {
                $labID = $loginLab['LabPharmacyUser']['id'];
                $labPharmacyType = $roleLab;
                $labPharmacyIsInhouse = $loginLab['LabPharmacyUser']['is_inhouse'];
            }

            $data['lab_pharmacy_user_id'] = $labID;
            $data['lab_pharmacy_type'] = $labPharmacyType;
            $data['lab_pharmacy_is_inhouse'] = $labPharmacyIsInhouse;

            $this->HospitalPaymentType->set($data);

            if ($this->HospitalPaymentType->validates()) {
                if ($this->HospitalPaymentType->save($data)) {
                    $this->Session->setFlash('Payment type added successfully!', 'default', array(), 'success');
                    $this->redirect(array('controller' => 'app_admin', 'action' => 'hospital_payment_type'));
                } else {
                    $this->Session->setFlash("Sorry, Couldn't add payment type!", 'default', array(), 'error');
                }
            }
        }

    }

    public function edit_hospital_payment_type($id = null)
    {
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User.User');

        $id = base64_decode($id);
        if ($this->request->is(array('post', 'put'))) {
            $data = $this->request->data['HospitalPaymentType'];
            $data['id'] = $id;
            $data['thinapp_id'] = $login['thinapp_id'];
            $data['name'] = trim($data['name']);
            $this->HospitalPaymentType->set($data);
            if ($this->HospitalPaymentType->validates()) {
                if ($this->HospitalPaymentType->save($data)) {
                    $this->Session->setFlash('Payment type edited successfully!', 'default', array(), 'success');
                    $this->redirect(array('controller' => 'app_admin', 'action' => 'hospital_payment_type'));
                } else {
                    $this->Session->setFlash("Sorry, Couldn't edit payment type!", 'default', array(), 'error');
                }
            }
        } else {
            $this->request->data = $this->HospitalPaymentType->findById($id);

        }


    }


    public function search_hos_tax_rate()
    {
        $reqData = $this->request->query;
        $pram = array();
        if (!empty($reqData['name'])) {
            $pram['n'] = $reqData['name'];
        }
        if (!empty($reqData['rate'])) {
            $pram['r'] = $reqData['rate'];
        }

        $this->redirect(
            array(
                "controller" => "app_admin",
                "action" => "hospital_tax_rate",
                "?" => $pram,
            )
        );
    }

    public function hospital_tax_rate()
    {
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User.User');
        $conditions = array();
        $searchData = $this->request->query;

        if (isset($searchData['n']) && !empty($searchData['n'])) {
            $this->request->data['Search']['name'] = $searchData['n'];
            $conditions["HospitalTaxRate.name LIKE"] = '%' . $searchData['n'] . '%';
        }

        if (isset($searchData['r']) && !empty($searchData['r'])) {
            $this->request->data['Search']['rate'] = $searchData['r'];
            $conditions["HospitalTaxRate.rate"] = $searchData['r'];
        }

        $loginLab = $this->Session->read('Auth.User');
        $roleLab = $loginLab['USER_ROLE'];
        if ($roleLab == "LAB" || $roleLab == 'PHARMACY') {

            $isInhouse = $loginLab['LabPharmacyUser']['is_inhouse'];

            if($isInhouse == 'YES')
            {
                $conditions['HospitalTaxRate.lab_pharmacy_user_id'] = array($loginLab['LabPharmacyUser']['id'],0);
            }
            else
            {
                $conditions['HospitalTaxRate.lab_pharmacy_user_id'] = $loginLab['LabPharmacyUser']['id'];
            }


        } else {
            $conditions['OR'] = array('HospitalTaxRate.lab_pharmacy_user_id' => 0, "(HospitalTaxRate.lab_pharmacy_type = 'LAB' AND HospitalTaxRate.lab_pharmacy_is_inhouse = 'YES')",);
        }

        /*$this->paginate = array(
            "conditions" => array(
                "HospitalTaxRate.thinapp_id" => $login['thinapp_id'],
                $conditions
            ),
            'contain'=>false,
            'limit'=>WEB_PAGINATION_LIMIT
        );
        $data = $this->paginate('HospitalTaxRate');*/
        $data = $this->HospitalTaxRate->find('all', array(
            "conditions" => array(
                "HospitalTaxRate.thinapp_id" => $login['thinapp_id'],
                $conditions
            ),
            'contain' => false
        ));

        $login1 = $this->Session->read('Auth.User');
        $reportTitle = $login1['Thinapp']['name'].' ('.date('d/m/Y').')';
        $this->set(compact('reportTitle','data'));


    }

    public function add_hospital_tax_rate()
    {
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User.User');

        if ($this->request->is(array('post', 'put'))) {
            $data = $this->request->data['HospitalTaxRate'];
            $data['thinapp_id'] = $login['thinapp_id'];
            $data['name'] = trim($data['name']);

            $labID = 0;
            $labPharmacyType = 'NONE';
            $labPharmacyIsInhouse = 'NONE';
            $loginLab = $this->Session->read('Auth.User');
            $roleLab = $loginLab['USER_ROLE'];
            if ($roleLab == "LAB" || $roleLab == 'PHARMACY') {
                $labID = $loginLab['LabPharmacyUser']['id'];
                $labPharmacyType = $roleLab;
                $labPharmacyIsInhouse = $loginLab['LabPharmacyUser']['is_inhouse'];
            }

            $data['lab_pharmacy_user_id'] = $labID;
            $data['lab_pharmacy_type'] = $labPharmacyType;
            $data['lab_pharmacy_is_inhouse'] = $labPharmacyIsInhouse;

            $this->HospitalTaxRate->set($data);
            if ($this->HospitalTaxRate->validates()) {
                if ($this->HospitalTaxRate->save($data)) {
                    $this->Session->setFlash('Tax rate added successfully!', 'default', array(), 'success');
                    $this->redirect(array('controller' => 'app_admin', 'action' => 'hospital_tax_rate'));
                } else {
                    $this->Session->setFlash("Sorry, Couldn't add tax rate!", 'default', array(), 'error');
                }
            }
        }

    }

    public function edit_hospital_tax_rate($id = null)
    {
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User.User');

        $id = base64_decode($id);
        if ($this->request->is(array('post', 'put'))) {
            $data = $this->request->data['HospitalTaxRate'];
            $data['id'] = $id;
            $data['thinapp_id'] = $login['thinapp_id'];
            $data['name'] = trim($data['name']);
            $this->HospitalTaxRate->set($data);
            if ($this->HospitalTaxRate->validates()) {
                if ($this->HospitalTaxRate->save($data)) {
                    $this->Session->setFlash('Tax rate edited successfully!', 'default', array(), 'success');
                    $this->redirect(array('controller' => 'app_admin', 'action' => 'hospital_tax_rate'));
                } else {
                    $this->Session->setFlash("Sorry, Couldn't edit tax rate!", 'default', array(), 'error');
                }
            }
        } else {
            $this->request->data = $this->HospitalTaxRate->findById($id);

        }


    }

    public function billing($id = null)
    {
        $this->layout = 'app_admin_home';

    }

    public function search_hospital_patient()
    {
        $reqData = $this->request->query;
        $pram = array();
        if (!empty($reqData['name'])) {
            $pram['n'] = $reqData['name'];
        }
        if (!empty($reqData['uhid'])) {
            $pram['uh'] = $reqData['uhid'];
        }
        if (!empty($reqData['mobile'])) {
            $pram['m'] = $reqData['mobile'];
        }

        if (!empty($reqData['from_date'])) {
            $pram['fd'] = $reqData['from_date'];
        }

        if (!empty($reqData['to_date'])) {
            $pram['td'] = @$reqData['to_date'];
        }
        if (!empty($reqData['address'])) {
            $pram['a'] = $reqData['address'];
        }
        if (!empty($reqData['search_for'])) {
            $pram['sf'] = $reqData['search_for'];
        }
        $this->redirect(
            array(
                "controller" => "app_admin",
                "action" => "hospital_patient_list",
                "?" => $pram,
            )
        );
    }

    public function hospital_patient_list()
    {
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User.User');
        $thinapp_id = $login['thinapp_id'];
        $cus_condition['AppointmentCustomer.thinapp_id'] = $thinapp_id;
        $cus_condition['AppointmentCustomer.status'] = 'ACTIVE';
        $searchData = $this->request->query;
        $child_condition['Children.status'] = 'ACTIVE';
        $child_condition['Children.thinapp_id'] = $thinapp_id;
        $search_flag = false;

        if (isset($searchData['n']) && !empty($searchData['n'])) {
            $this->request->data['Search']['name'] = $searchData['n'];
            $cus_condition["AppointmentCustomer.first_name LIKE"] = '%' . $searchData['n'] . '%';
            $child_condition["Children.child_name LIKE"] = '%' . $searchData['n'] . '%';
            $search_flag =true;
        }

        if (isset($searchData['uh']) && !empty($searchData['uh'])) {
            $this->request->data['Search']['uhid'] = $searchData['uh'];
            $cus_condition["AppointmentCustomer.uhid like "] = "%" . $searchData['uh'] . "%";
            $child_condition["Children.uhid like"] = "%" . $searchData['uh'] . "%";
            $search_flag =true;
        }

        if (isset($searchData['sf']) && !empty($searchData['sf'])) {

            $this->request->data['Search']['search_for'] = $searchData['sf'];
            if ($searchData['sf'] != 'ALL') {
                $cus_condition["AppointmentCustomer.is_admit"] = $searchData['sf'];
                $child_condition["Children.is_admit"] = $searchData['sf'];
                $search_flag =true;
            }

        }


        if (isset($searchData['m']) && !empty($searchData['m'])) {
            $this->request->data['Search']['mobile'] = $searchData['m'];
            $cus_condition["AppointmentCustomer.mobile like"] = '%' . $searchData['m'] . '%';
            $child_condition["Children.mobile like"] = '%' . $searchData['m'] . '%';
            $search_flag =true;
        }


        if($search_flag ===false){
            if (isset($searchData['fd']) && !empty($searchData['fd']) && isset($searchData['td']) && !empty($searchData['td'])) {
                $this->request->data['Search']['from_date'] = $searchData['fd'];
                $this->request->data['Search']['to_date'] = $searchData['td'];
                $from_date = DateTime::createFromFormat('d/m/Y', $searchData['fd']);
                $cus_condition["Date(AppointmentCustomer.created) >="] = $from_date->format('Y-m-d');
                $child_condition["Date(Children.created) >="] = $from_date->format('Y-m-d');
                $to_date = DateTime::createFromFormat('d/m/Y', $searchData['td']);
                $cus_condition["Date(AppointmentCustomer.created) <="] = $to_date->format('Y-m-d');
                $child_condition["Date(Children.created) <="] = $to_date->format('Y-m-d');
            } else {
                $this->request->data['Search']['from_date'] = date('d/m/Y');
                $this->request->data['Search']['to_date'] = date('d/m/Y');
                $cus_condition["Date(AppointmentCustomer.created)"] = date('d/m/Y');
                $child_condition["Date(Children.created)"] = date('d/m/Y');
            }
        }else{
            $this->request->data['Search']['from_date'] = $this->request->data['Search']['to_date'] ='';

        }


        if (isset($searchData['a']) && !empty($searchData['a'])) {
            $this->request->data['Search']['address'] = $searchData['a'];
            $cus_condition["AppointmentCustomer.address like"] = '%' . $searchData['a'] . '%';
            $child_condition["Children.address like"] = '%' . $searchData['a'] . '%';
        }


        /*$loginLab = $this->Session->read('Auth.User');
        $roleLab = $loginLab['USER_ROLE'];
        if($roleLab =="LAB" || $roleLab =='PHARMACY'){
            if($loginLab['LabPharmacyUser']['is_inhouse'] == 'NO')
            {
                $cus_condition['LabPatientUploadedRecorde.lab_pharmacy_user_id'] = $loginLab['LabPharmacyUser']['id'];
                $child_condition['LabPatientUploadedRecorde.lab_pharmacy_user_id'] = $loginLab['LabPharmacyUser']['id'];
            }

        }*/


        $patientData = $this->AppointmentCustomer->find('all', array('fields' => array('AppointmentCustomer.*'), 'conditions' => $cus_condition, 'contain' => array('MedicalProductOrder'),
            'joins' => array(
                array('table' => 'lab_patient_uploaded_recordes',
                    'alias' => 'LabPatientUploadedRecorde',
                    'type' => 'LEFT',
                    'conditions' => array(
                        'LabPatientUploadedRecorde.user_id = AppointmentCustomer.user_id'
                    )
                )
            ),
            'recursive' => 2));


        $childData = $this->Children->find('all', array('fields' => array('Children.*'), 'conditions' => $child_condition, 'contain' => array('MedicalProductOrder'), 'joins' => array(
            array('table' => 'lab_patient_uploaded_recordes',
                'alias' => 'LabPatientUploadedRecorde',
                'type' => 'LEFT',
                'conditions' => array(
                    'Children.user_id = LabPatientUploadedRecorde.user_id'
                )
            )
        ),));
        $data = array_merge($patientData, $childData);


        usort($data, function ($a, $b) {
            $ad = isset($a['AppointmentCustomer']['created']) ? new DateTime($a['AppointmentCustomer']['created']) : new DateTime($a['Children']['created']);
            $bd = isset($b['AppointmentCustomer']['created']) ? new DateTime($b['AppointmentCustomer']['created']) : new DateTime($b['Children']['created']);
            if ($ad == $bd) {
                return -1;
            }
            return $ad < $bd ? -1 : 1;
        });

        $login1 = $this->Session->read('Auth.User');
        $reportTitle = $login1['Thinapp']['name'].' ('.$this->request->data['Search']['from_date'].' - '.$this->request->data['Search']['to_date'].')';

        $this->set(compact('reportTitle','data'));


    }

    public function hospital_change_admit_status()
    {
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $response = array();
            $pat_id = base64_decode($this->request->data['pat_id']);
            $pat_type = $this->request->data['pat_type'];
            $status = $this->request->data['status'];
            $return = false;

            if ($pat_type == "CUSTOMER") {
                $return = $this->AppointmentCustomer->updateAll(array("AppointmentCustomer.is_admit" => "'$status'"), array("AppointmentCustomer.id" => $pat_id));
            } else if ($pat_type == "CHILDREN") {
                $return = $this->Children->updateAll(array("Children.is_admit" => "'$status'"), array("Children.id" => $pat_id));
            }
            if ($return) {
                $response['status'] = 1;
                $response['message'] = "Admit status change successfully.";
            } else {
                $response['status'] = 0;
                $response['message'] = "Sorry could not changed admit status";
            }
            $response = json_encode($response, true);
            echo $response;
            exit();
        }
    }

    public function hospital_load_patient_detail()
    {
        if ($this->request->is('ajax')) {
            $response = array();
            $login = $this->Session->read('Auth.User.User');
            $patient_id = base64_decode($this->request->data['pat_id']);
            $patient_type = $this->request->data['pat_type'];
            $folder_id = 0;
            $data = false;
            if ($patient_type == "CUSTOMER") {
                $data = $this->AppointmentCustomer->findById($patient_id);
                $data = @$data['AppointmentCustomer'];
                $folder_id = Custom::get_patient_folder($data['thinapp_id'], $data['mobile'])['id'];

            } else if ($patient_type == "CHILDREN") {
                $data = $this->Children->findById($patient_id);
                $data = @$data['Children'];
                $folder_id = Custom::get_child_folder_data($data['id'], $data['thinapp_id'])['id'];

            }

            $this->set(compact('data', 'patient_type', 'patient_id', 'login', 'folder_id'));
        } else {
            exit();
        }
    }

    public function hospital_edit_patient()
    {
        $this->autoRender = false;
        if ($this->request->is('ajax')) {

            $post = array();
            $login = $this->Session->read('Auth.User.User');
            $post['app_key'] = APP_KEY;
            $post['user_id'] = $login['id'];
            $post['thin_app_id'] = $login['thinapp_id'];
            $post['mobile'] = $login['mobile'];
            $post['patient_id'] = $this->request->data['patient_id'];
            $post['patient_type'] = $this->request->data['patient_type'];
            $post['patient_address'] = $this->request->data['patient_address'];
            $post['gender'] = $this->request->data['gender'];
            $post['patient_name'] = $this->request->data['patient_name'];
            $post['patient_mobile'] = $this->request->data['patient_mobile'];
            $post['folder_id'] = $this->request->data['folder_id'];
            return WebServicesFunction_2_3::edit_appointment_patient($post);

        } else {
            exit();
        }

    }

    
	public function web_add_hospital_receipt($doctor_id,$proforma_invoice=0,$lab_user_id=0)
        {
    
            $this->layout = false;
            $this->autoRender = false;
            if ($this->request->is(array('ajax'))) {
    
                if($proforma_invoice){
                    $userdata = $this->AppointmentStaff->find("first", array(
                        "conditions" => array(
                            "AppointmentStaff.id" =>base64_decode($doctor_id),
                        ),
                        'contain' => array('Thinapp' => array('Leads'), 'User'),
                        'order' => array('AppointmentStaff.id' => 'desc')
                    ));
    
                    $get_user_id = !empty($userdata['User']['id']) ? $userdata['User']['id'] : 0;
                    if ($get_user_id == 0 && !empty($userdata['AppointmentStaff'])) {
                        $new_user_id = $get_user_id = Custom::create_user($userdata['AppointmentStaff']['thinapp_id'], $userdata['AppointmentStaff']['mobile'], $userdata['AppointmentStaff']['name']);
                        $this->AppointmentStaff->updateAll(array('AppointmentStaff.user_id' => $new_user_id), array('AppointmentStaff.id' => $userdata['AppointmentStaff']['id']));
                    }
                    $userdata = $this->User->find("first", array(
                        "conditions" => array(
                            "User.id" => $get_user_id,
                            "AppointmentStaff.id" => $userdata['AppointmentStaff']['id']
                        ),
                        'contain' => array('Leads', 'Thinapp', 'AppointmentStaff')
                    ));
                    $userdata['USER_ROLE'] = 'DOCTOR';
                    $login =$userdata['User'];
    
                }else{
                    $login = $this->Session->read('Auth.User.User');
                }
                $datasource = $this->MedicalProductOrder->getDataSource();
    
                $thinappID = $login['thinapp_id'];
                $labID = 0;
                $labPharmacyType = 'NONE';
                $labPharmacyIsInhouse = 'NONE';
                $loginLab = $this->Session->read('Auth.User');
                $roleLab = $loginLab['USER_ROLE'];
    
                try {
                    $datasource->begin();
                    $data = $this->request->data;
    
                    if ($roleLab == "LAB" || $roleLab == 'PHARMACY') {
                        $labID = $loginLab['LabPharmacyUser']['id'];
                        $labPharmacyType = $roleLab;
                        $labPharmacyIsInhouse = $loginLab['LabPharmacyUser']['is_inhouse'];
                    }
    
                    $data['lab_pharmacy_user_id'] = $labID;
                    $data['lab_pharmacy_type'] = $labPharmacyType;
                    $data['lab_pharmacy_is_inhouse'] = $labPharmacyIsInhouse;
                    //pr($data);
    
                    $mainTotalAmount = 0;
    
                    $patientUHID = $data['customerUHID'];
                    $pay_due_amount = !empty($data['pay_due_amount'])?$data['pay_due_amount']:"NO";
    
                    $appointmentStaffID = !empty($data['appointment_staff_id']) ? $data['appointment_staff_id'] : 0;
                    $appointmentAddressID = !empty($data['appointment_address_id']) ? $data['appointment_address_id'] : 0;
    
    
                    $hospitalEmergencyID = isset($data['AppointmentCustomerStaffService']['hospitalEmergencyID']) ? $data['AppointmentCustomerStaffService']['hospitalEmergencyID'] : 0;
                    $isEmergency = isset($data['AppointmentCustomerStaffService']['isEmergency']) ? $data['AppointmentCustomerStaffService']['isEmergency'] : "NO";
    
                    $reffered_by_name = isset($data['reffered_by_name']) ? $data['reffered_by_name'] : "";
                    $reffered_by_mobile = isset($data['reffered_by_mobile']) ? $data['reffered_by_mobile'] : "";
    
                    $patient_type="";
                    if (isset($data['auto_patient_type'])) {
                        $auto_patient_type = base64_decode($data['auto_patient_type']);
                        $patientData = array();
                        if (!empty($auto_patient_type)) {
                            $tmp = explode('-', $auto_patient_type);
                            if ($tmp[0] == "CUSTOMER") {
                                $patient_type = "CUSTOMER";
                                $patient_id = $tmp[1];
                                $patientData = $this->AppointmentCustomer->find("first", array("conditions" => array("id" => $patient_id), "contain" => false));
                            } else if ($tmp[0] == "CHILDREN") {
                                $patient_type = "CHILDREN";
                                $patient_id = $tmp[1];
                                $patientData = $this->Children->find("first", array("conditions" => array("id" => $patient_id), "contain" => false));
                            }
                        }
                    } else {
    
                        $patientData = $this->AppointmentCustomer->find("first", array("conditions" => array("AppointmentCustomer.uhid" => $patientUHID, "AppointmentCustomer.thinapp_id" => $thinappID), "contain" => false));
                        if (!isset($patientData['AppointmentCustomer'])) {
                            $patientData = $this->Children->find("first", array("conditions" => array("Children.uhid" => $patientUHID, "Children.thinapp_id" => $thinappID), "contain" => false));
                        }
                    }
    
    
                    $dataTOSaveOrderDetail = array();
                    $totalAmountToSave = 0;

                    $dataToSaveInOrder = array();
    
                    $dataToSaveInOrder['thinapp_id'] = $thinappID;
                    $dataToSaveInOrder['appointment_customer_id'] = isset($patientData['AppointmentCustomer']) ? $patientData['AppointmentCustomer']['id'] : 0;
                    $dataToSaveInOrder['children_id'] = isset($patientData['Children']) ? $patientData['Children']['id'] : 0;
                    $dataToSaveInOrder['is_opd'] = "N";
    
                    Custom::UpdateChildPatientDetail($dataToSaveInOrder['appointment_customer_id'], $dataToSaveInOrder['children_id'], $data);
    
                    $payment_type_id = $data['AppointmentCustomerStaffService']['hospital_payment_type_id'];
                    $payment_type_id = empty($payment_type_id) ? 0 : $payment_type_id;
                    $payment_description = $data['AppointmentCustomerStaffService']['payment_description'];
                    $payment_type_name = $data['AppointmentCustomerStaffService']['payment_type_name'];
    
                    $final_amount = $data['AppointmentCustomerStaffService']['tot'];
    
    
                    $dataToSaveInOrder['hospital_payment_type_id'] = $payment_type_id;
                    $dataToSaveInOrder['payment_type_name'] = $payment_type_name;
                    $dataToSaveInOrder['payment_description'] = $payment_description;
                    $dataToSaveInOrder['is_direct_billing'] = 'YES';
    
    
                    $dataToSaveInOrder['appointment_staff_id'] = $appointmentStaffID;
                    $dataToSaveInOrder['appointment_address_id'] = $appointmentAddressID;
                    $dataToSaveInOrder['created_by_user_id'] = $login['id'];
    
                    if (isset($data['receipt_date'])) {
                        $date = DateTime::createFromFormat('d/m/Y', $data['receipt_date']);
                        $date1 = $date->format('Y-m-d');
                        $dataToSaveInOrder['created'] = $date1 . ' ' . date('H:i:s');
                    }
    
    
                    $dataToSaveInOrder['lab_pharmacy_user_id'] = $labID;
                    $dataToSaveInOrder['lab_pharmacy_type'] = $labPharmacyType;
                    $dataToSaveInOrder['lab_pharmacy_is_inhouse'] = $labPharmacyIsInhouse;
    
                    $dataToSaveInOrder['hospital_emergency_id'] = $hospitalEmergencyID;
                    $dataToSaveInOrder['is_emergency'] = $isEmergency;
                    $dataToSaveInOrder['reffered_by_name'] = $reffered_by_name;
                    $dataToSaveInOrder['reffered_by_mobile'] = Custom::create_mobile_number($reffered_by_mobile);
    
    
                    if ($this->MedicalProductOrder->save($dataToSaveInOrder)) {
                        $orderID = $this->MedicalProductOrder->getInsertID();
    
                        $counter = 0;
    
    
                        foreach ($data['productID'] AS $key => $val) {
                            $productData = $this->MedicalProduct->find('first', array('conditions' => array('MedicalProduct.id' => $val), 'recursive' => 2));
    
                            $dataTOSaveOrderDetail[$counter]['medical_product_id'] = $val;
                            $dataTOSaveOrderDetail[$counter]['medical_product_order_id'] = $orderID;
                            $dataTOSaveOrderDetail[$counter]['thinapp_id'] = $thinappID;
                            $dataTOSaveOrderDetail[$counter]['children_id'] = isset($patientData['Children']) ? $patientData['Children']['id'] : 0;
                            $dataTOSaveOrderDetail[$counter]['appointment_customer_id'] = isset($patientData['AppointmentCustomer']) ? $patientData['AppointmentCustomer']['id'] : 0;
                            $dataTOSaveOrderDetail[$counter]['appointment_staff_id'] = !empty($data['biller_appointment_staff_id'][$key])?$data['biller_appointment_staff_id'][$key]:0;
    
    
                            $dataTOSaveOrderDetail[$counter]['lab_pharmacy_user_id'] = $labID;
                            $dataTOSaveOrderDetail[$counter]['lab_pharmacy_type'] = $labPharmacyType;
                            $dataTOSaveOrderDetail[$counter]['lab_pharmacy_is_inhouse'] = $labPharmacyIsInhouse;
    
                            $dataTOSaveOrderDetail[$counter]['medical_product_quantity_id'] = ($data['medical_product_quantity_id'][$key] != '') ? $data['medical_product_quantity_id'][$key] : 0;
    
    
    
                            if ($data['medical_product_quantity_id'][$key] != '') {
    
                                $qtyToSell = $data['quantity'][$key];
                                $totalQuanityAvavilable = $this->MedicalProductQuantity->findById($data['medical_product_quantity_id'][$key], array('contain' => false));
                                $remainingQty = ($totalQuanityAvavilable['MedicalProductQuantity']['quantity'] - $totalQuanityAvavilable['MedicalProductQuantity']['sold']);
    
                                if (($remainingQty >= $qtyToSell) || ($totalQuanityAvavilable['MedicalProductQuantity']['quantity'] == 0)) {
    
    
                                    $dataTOSaveOrderDetail[$counter]['quantity'] = $data['quantity'][$key];
                                    $dataTOSaveOrderDetail[$counter]['days'] = $data['days'][$key];
                                    $dataTOSaveOrderDetail[$counter]['discount_type'] = $data['discountType'][$key];
                                    $dataTOSaveOrderDetail[$counter]['discount_value'] = $data['discount'][$key];
                                    $dataTOSaveOrderDetail[$counter]['product_price'] = $data['price'][$key];
    
                                    $product_amount = $data['price'][$key] * $data['quantity'][$key];
                                    $dataTOSaveOrderDetail[$counter]['amount'] = $product_amount;
    
                                    $dataTOSaveOrderDetail[$counter]['tax_value'] = $data['tax_value'][$key];
    
                                    $dataTOSaveOrderDetail[$counter]['tax_type'] = $data['tax_type'][$key];
    
                                    $discount_amount = $data['discount'][$key];
                                    if ($data['discountType'][$key] == "PERCENTAGE") {
                                        $discount_amount = (($product_amount) * $data['discount'][$key]) / 100;
                                    }
                                    $total_amount = ($product_amount) - $discount_amount;
                                    $tax_amount = ($total_amount * $data['tax_value'][$key]) / 100;
                                    $total_amount = $total_amount + $tax_amount;
                                    $total_amount = $total_amount * $data['days'][$key];

                                    $dataTOSaveOrderDetail[$counter]['tax_amount'] = $tax_amount;
                                    $dataTOSaveOrderDetail[$counter]['discount_amount'] = $discount_amount;
                                    $tmp = explode('.', $total_amount);
                                    if (count($tmp) == 2) {
                                        $total_amount = $tmp[0] . '.' . substr($tmp[1], 0, 2);
                                    }
                                    $mainTotalAmount += (float)$total_amount;
    
                                    $dataTOSaveOrderDetail[$counter]['total_amount'] = $total_amount;
    
    
                                    $this->MedicalProductQuantity->query("UPDATE `medical_product_quantities` SET `sold` = (`sold`+" . $qtyToSell . ") WHERE `id` = '" . $data['medical_product_quantity_id'][$key] . "'");
                                } else {
    
    
                                    $proID = $totalQuanityAvavilable['MedicalProductQuantity']['medical_product_id'];
                                    $qtyData = $this->MedicalProductQuantity->find('all', array('fields' => array('MedicalProductQuantity.*', '(MedicalProductQuantity.quantity - MedicalProductQuantity.sold) AS rem_qty'), 'conditions' => array('MedicalProductQuantity.medical_product_id' => $proID, 'DATE(MedicalProductQuantity.expiry_date) >=' => date('Y-m-d'), 'MedicalProductQuantity.status' => 'ACTIVE', 'MedicalProductQuantity.id <>' => $data['medical_product_quantity_id'][$key]), 'order' => array('MedicalProductQuantity.expiry_date' => 'ASC'), 'group' => array('MedicalProductQuantity.id HAVING rem_qty > 0'), 'contain' => false));
    
                                    if (empty($qtyData)) {
    
    
                                        $dataTOSaveOrderDetail[$counter]['quantity'] = $data['quantity'][$key];
                                        $dataTOSaveOrderDetail[$counter]['days'] = $data['days'][$key];
                                        $dataTOSaveOrderDetail[$counter]['discount_type'] = $data['discountType'][$key];
                                        $dataTOSaveOrderDetail[$counter]['discount_value'] = $data['discount'][$key];
                                        $dataTOSaveOrderDetail[$counter]['product_price'] = $data['price'][$key];
    
                                        $product_amount = $data['price'][$key] * $data['quantity'][$key];
                                        $dataTOSaveOrderDetail[$counter]['amount'] = $product_amount;
    
                                        $dataTOSaveOrderDetail[$counter]['tax_value'] = $data['tax_value'][$key];
    
                                        $dataTOSaveOrderDetail[$counter]['tax_type'] = $data['tax_type'][$key];
    
                                        $discount_amount = $data['discount'][$key];
                                        if ($data['discountType'][$key] == "PERCENTAGE") {
                                            $discount_amount = (($product_amount) * $data['discount'][$key]) / 100;
                                        }
                                        $total_amount = ($product_amount) - $discount_amount;
                                        $tax_amount = ($total_amount * $data['tax_value'][$key]) / 100;
                                        $total_amount = $total_amount + $tax_amount;
                                        $total_amount = $total_amount * $data['days'][$key];
                                        $dataTOSaveOrderDetail[$counter]['tax_amount'] = $tax_amount;
                                        $dataTOSaveOrderDetail[$counter]['discount_amount'] = $discount_amount;
                                        $tmp = explode('.', $total_amount);
                                        if (count($tmp) == 2) {
                                            $total_amount = $tmp[0] . '.' . substr($tmp[1], 0, 2);
                                        }
                                        $mainTotalAmount += (float)$total_amount;
    
                                        $dataTOSaveOrderDetail[$counter]['total_amount'] = $total_amount;
    
    
                                        $this->MedicalProductQuantity->query("UPDATE `medical_product_quantities` SET `sold` = (`sold`+" . $qtyToSell . ") WHERE `id` = '" . $data['medical_product_quantity_id'][$key] . "'");
    
    
                                    } else {
    
                                        if ($remainingQty > 0) {
    
                                            $dataTOSaveOrderDetail[$counter]['quantity'] = $remainingQty;
                                            $dataTOSaveOrderDetail[$counter]['days'] = $data['days'][$key];
                                            $dataTOSaveOrderDetail[$counter]['discount_type'] = $data['discountType'][$key];
                                            $dataTOSaveOrderDetail[$counter]['discount_value'] = $data['discount'][$key];
    
                                            $dataTOSaveOrderDetail[$counter]['product_price'] = $data['price'][$key];
                                            $product_amount = $data['price'][$key] * $remainingQty;
    
    
                                            $dataTOSaveOrderDetail[$counter]['amount'] = $product_amount;
    
                                            $dataTOSaveOrderDetail[$counter]['tax_value'] = $data['tax_value'][$key];
    
                                            $dataTOSaveOrderDetail[$counter]['tax_type'] = $data['tax_type'][$key];
    
                                            $discount_amount = $data['discount'][$key];
                                            if ($data['discountType'][$key] == "PERCENTAGE") {
                                                $discount_amount = (($product_amount) * $data['discount'][$key]) / 100;
                                            }
                                            $total_amount = ($product_amount) - $discount_amount;
                                            $tax_amount = ($total_amount * $data['tax_value'][$key]) / 100;
                                            $total_amount = $total_amount + $tax_amount;
                                            $total_amount = $total_amount * $data['days'][$key];

                                            $dataTOSaveOrderDetail[$counter]['tax_amount'] = $tax_amount;
                                            $dataTOSaveOrderDetail[$counter]['discount_amount'] = $discount_amount;
                                            $tmp = explode('.', $total_amount);
                                            if (count($tmp) == 2) {
                                                $total_amount = $tmp[0] . '.' . substr($tmp[1], 0, 2);
                                            }
                                            $mainTotalAmount += (float)$total_amount;
    
                                            $dataTOSaveOrderDetail[$counter]['total_amount'] = $total_amount;
    
    
                                            $this->MedicalProductQuantity->query("UPDATE `medical_product_quantities` SET `sold` = (`sold`+" . $remainingQty . ") WHERE `id` = '" . $data['medical_product_quantity_id'][$key] . "'");
                                            $qtyToSell = $qtyToSell - $remainingQty;
                                        }
    
    
                                        $leastExpInsertkey = -1;
    
                                        $a = 0;
    
                                        foreach ($qtyData AS $proVal) {
                                            $counter++;
    
                                            $remainingQty = (int)$proVal[0]['rem_qty'];
    
                                            if ($remainingQty >= $qtyToSell) {
    
                                                $dataTOSaveOrderDetail[$counter]['medical_product_id'] = $val;
                                                $dataTOSaveOrderDetail[$counter]['medical_product_order_id'] = $orderID;
                                                $dataTOSaveOrderDetail[$counter]['thinapp_id'] = $thinappID;
                                                $dataTOSaveOrderDetail[$counter]['children_id'] = isset($patientData['Children']) ? $patientData['Children']['id'] : 0;
                                                $dataTOSaveOrderDetail[$counter]['appointment_customer_id'] = isset($patientData['AppointmentCustomer']) ? $patientData['AppointmentCustomer']['id'] : 0;
    
                                                $dataTOSaveOrderDetail[$counter]['lab_pharmacy_user_id'] = $labID;
                                                $dataTOSaveOrderDetail[$counter]['lab_pharmacy_type'] = $labPharmacyType;
                                                $dataTOSaveOrderDetail[$counter]['lab_pharmacy_is_inhouse'] = $labPharmacyIsInhouse;
    
                                                $dataTOSaveOrderDetail[$counter]['medical_product_quantity_id'] = $proVal['MedicalProductQuantity']['id'];
    
    
                                                $dataTOSaveOrderDetail[$counter]['quantity'] = $qtyToSell;
                                                $dataTOSaveOrderDetail[$counter]['days'] = $data['days'][$key];
                                                $dataTOSaveOrderDetail[$counter]['discount_type'] = $data['discountType'][$key];
                                                $dataTOSaveOrderDetail[$counter]['discount_value'] = $data['discount'][$key];
    
    
                                                if ($productData['MedicalProduct']['is_price_editable'] == 1) {
                                                    $dataTOSaveOrderDetail[$counter]['product_price'] = $data['price'][$key];
                                                    $product_amount = $data['price'][$key] * $qtyToSell;
                                                } else {
                                                    $dataTOSaveOrderDetail[$counter]['product_price'] = $proVal['MedicalProductQuantity']['mrp'];
                                                    $product_amount = $proVal['MedicalProductQuantity']['mrp'] * $qtyToSell;
                                                }
    
    
                                                $dataTOSaveOrderDetail[$counter]['amount'] = $product_amount;
    
                                                $dataTOSaveOrderDetail[$counter]['tax_value'] = $data['tax_value'][$key];
    
    
                                                $dataTOSaveOrderDetail[$counter]['tax_type'] = $data['tax_type'][$key];
    
                                                $discount_amount = $data['discount'][$key];
                                                if ($data['discountType'][$key] == "PERCENTAGE") {
                                                    $discount_amount = (($product_amount) * $data['discount'][$key]) / 100;
                                                }
                                                $total_amount = ($product_amount) - $discount_amount;
                                                $tax_amount = ($total_amount * $data['tax_value'][$key]) / 100;
                                                $total_amount = $total_amount + $tax_amount;
                                                $total_amount = $total_amount * $data['days'][$key];

                                                $dataTOSaveOrderDetail[$counter]['tax_amount'] = $tax_amount;
                                                $dataTOSaveOrderDetail[$counter]['discount_amount'] = $discount_amount;
                                                $tmp = explode('.', $total_amount);
                                                if (count($tmp) == 2) {
                                                    $total_amount = $tmp[0] . '.' . substr($tmp[1], 0, 2);
                                                }
                                                $mainTotalAmount += (float)$total_amount;
    
                                                $dataTOSaveOrderDetail[$counter]['total_amount'] = $total_amount;
    
    
                                                $this->MedicalProductQuantity->query("UPDATE `medical_product_quantities` SET `sold` = (`sold`+" . $qtyToSell . ") WHERE `id` = '" . $proVal['MedicalProductQuantity']['id'] . "'");
                                                $qtyToSell = $qtyToSell - $remainingQty;
                                                if ($a == 0) {
                                                    $leastExpInsertkey = -1;
                                                }
                                                break;
                                            } else {
    
                                                $dataTOSaveOrderDetail[$counter]['medical_product_id'] = $val;
                                                $dataTOSaveOrderDetail[$counter]['medical_product_order_id'] = $orderID;
                                                $dataTOSaveOrderDetail[$counter]['thinapp_id'] = $thinappID;
                                                $dataTOSaveOrderDetail[$counter]['children_id'] = isset($patientData['Children']) ? $patientData['Children']['id'] : 0;
                                                $dataTOSaveOrderDetail[$counter]['appointment_customer_id'] = isset($patientData['AppointmentCustomer']) ? $patientData['AppointmentCustomer']['id'] : 0;
    
    
                                                $dataTOSaveOrderDetail[$counter]['lab_pharmacy_user_id'] = $labID;
                                                $dataTOSaveOrderDetail[$counter]['lab_pharmacy_type'] = $labPharmacyType;
                                                $dataTOSaveOrderDetail[$counter]['lab_pharmacy_is_inhouse'] = $labPharmacyIsInhouse;
    
                                                $dataTOSaveOrderDetail[$counter]['medical_product_quantity_id'] = $proVal['MedicalProductQuantity']['id'];
    
    
                                                $dataTOSaveOrderDetail[$counter]['quantity'] = $remainingQty;
                                                $dataTOSaveOrderDetail[$counter]['days'] = $data['days'][$key];
                                                $dataTOSaveOrderDetail[$counter]['discount_type'] = $data['discountType'][$key];
                                                $dataTOSaveOrderDetail[$counter]['discount_value'] = $data['discount'][$key];
    
    
                                                if ($productData['MedicalProduct']['is_price_editable'] == 1) {
                                                    $dataTOSaveOrderDetail[$counter]['product_price'] = $data['price'][$key];
                                                    $product_amount = $data['price'][$key] * $remainingQty;
                                                } else {
                                                    $dataTOSaveOrderDetail[$counter]['product_price'] = $proVal['MedicalProductQuantity']['mrp'];
                                                    $product_amount = $proVal['MedicalProductQuantity']['mrp'] * $remainingQty;
                                                }
    
    
                                                $dataTOSaveOrderDetail[$counter]['amount'] = $product_amount;
    
                                                $dataTOSaveOrderDetail[$counter]['tax_value'] = $data['tax_value'][$key];
    
                                                $dataTOSaveOrderDetail[$counter]['tax_type'] = $data['tax_type'][$key];
    
                                                $discount_amount = $data['discount'][$key];
                                                if ($data['discountType'][$key] == "PERCENTAGE") {
                                                    $discount_amount = (($product_amount) * $data['discount'][$key]) / 100;
                                                }
                                                $total_amount = ($product_amount) - $discount_amount;
                                                $tax_amount = ($total_amount * $data['tax_value'][$key]) / 100;
                                                $total_amount = $total_amount + $tax_amount;
                                                $total_amount = $total_amount * $data['days'][$key];

                                                $dataTOSaveOrderDetail[$counter]['tax_amount'] = $tax_amount;
                                                $dataTOSaveOrderDetail[$counter]['discount_amount'] = $discount_amount;
                                                $tmp = explode('.', $total_amount);
                                                if (count($tmp) == 2) {
                                                    $total_amount = $tmp[0] . '.' . substr($tmp[1], 0, 2);
                                                }
                                                $mainTotalAmount += (float)$total_amount;
    
                                                $dataTOSaveOrderDetail[$counter]['total_amount'] = $total_amount;
    
    
                                                $this->MedicalProductQuantity->query("UPDATE `medical_product_quantities` SET `sold` = (`sold`+" . $remainingQty . ") WHERE `id` = '" . $proVal['MedicalProductQuantity']['id'] . "'");
                                                if ($a == 0) {
    
                                                    $leastExpInsertkey = $counter;
                                                }
                                                $qtyToSell = $qtyToSell - $remainingQty;
    
                                            }
    
    
                                            $a++;
                                        }
    
    
                                        if ($leastExpInsertkey != -1 && $qtyToSell > 0) {
    
    
                                            $dataTOSaveOrderDetail[$leastExpInsertkey]['quantity'] = $dataTOSaveOrderDetail[$leastExpInsertkey]['quantity'] + $qtyToSell;
                                            $dataTOSaveOrderDetail[$leastExpInsertkey]['days'] = $data['days'][$key];
                                            $dataTOSaveOrderDetail[$leastExpInsertkey]['discount_type'] = $data['discountType'][$key];
                                            $dataTOSaveOrderDetail[$leastExpInsertkey]['discount_value'] = $data['discount'][$key];
    
                                            $product_amount = $dataTOSaveOrderDetail[$leastExpInsertkey]['product_price'] * $dataTOSaveOrderDetail[$leastExpInsertkey]['quantity'];
    
                                            $dataTOSaveOrderDetail[$leastExpInsertkey]['amount'] = $product_amount;
    
                                            $dataTOSaveOrderDetail[$leastExpInsertkey]['tax_value'] = $data['tax_value'][$key];
    
                                            $dataTOSaveOrderDetail[$leastExpInsertkey]['tax_type'] = $data['tax_type'][$key];
    
                                            $discount_amount = $data['discount'][$key];
                                            if ($data['discountType'][$key] == "PERCENTAGE") {
                                                $discount_amount = (($product_amount) * $data['discount'][$key]) / 100;
                                            }
                                            $total_amount = ($product_amount) - $discount_amount;
                                            $tax_amount = ($total_amount * $data['tax_value'][$key]) / 100;
                                            $total_amount = $total_amount + $tax_amount;
                                            $total_amount = $total_amount * $data['days'][$key];

                                            $dataTOSaveOrderDetail[$leastExpInsertkey]['tax_amount'] = $tax_amount;
                                            $dataTOSaveOrderDetail[$leastExpInsertkey]['discount_amount'] = $discount_amount;
                                            $tmp = explode('.', $total_amount);
                                            if (count($tmp) == 2) {
                                                $total_amount = $tmp[0] . '.' . substr($tmp[1], 0, 2);
                                            }
                                            $mainTotalAmount += (float)$total_amount;
    
                                            $dataTOSaveOrderDetail[$leastExpInsertkey]['total_amount'] = $total_amount;
    
                                            $this->MedicalProductQuantity->query("UPDATE `medical_product_quantities` SET `sold` = (`sold`+" . $qtyToSell . ") WHERE `id` = '" . $dataTOSaveOrderDetail[$leastExpInsertkey]['medical_product_quantity_id'] . "'");
    
                                        }
    
    
                                    }
    
                                }
                            } else {
                                $dataTOSaveOrderDetail[$counter]['appointment_staff_id'] = !empty($data['biller_appointment_staff_id'][$key])?$data['biller_appointment_staff_id'][$key]:0;
                                $dataTOSaveOrderDetail[$counter]['quantity'] = $data['quantity'][$key];
                                $dataTOSaveOrderDetail[$counter]['days'] = $data['days'][$key];
                                $dataTOSaveOrderDetail[$counter]['discount_type'] = $data['discountType'][$key];
                                $dataTOSaveOrderDetail[$counter]['discount_value'] = $data['discount'][$key];
                                $dataTOSaveOrderDetail[$counter]['product_price'] = $data['price'][$key];
    
                                $product_amount = $data['price'][$key] * $data['quantity'][$key];
                                $dataTOSaveOrderDetail[$counter]['amount'] = $product_amount;
    
                                $dataTOSaveOrderDetail[$counter]['tax_value'] = $data['tax_value'][$key];
    
                                $dataTOSaveOrderDetail[$counter]['tax_type'] = $data['tax_type'][$key];
    
                                $discount_amount = $data['discount'][$key];
                                if ($data['discountType'][$key] == "PERCENTAGE") {
                                    $discount_amount = (($product_amount) * $data['discount'][$key]) / 100;
                                }
                                $total_amount = ($product_amount) - $discount_amount;
                                $tax_amount = ($total_amount * $data['tax_value'][$key]) / 100;
                                $total_amount = $total_amount + $tax_amount;
                                $total_amount = $total_amount * $data['days'][$key];

                                $dataTOSaveOrderDetail[$counter]['tax_amount'] = $tax_amount;
                                $dataTOSaveOrderDetail[$counter]['discount_amount'] = $discount_amount;
                                $tmp = explode('.', $total_amount);
                                if (count($tmp) == 2) {
                                    $total_amount = $tmp[0] . '.' . substr($tmp[1], 0, 2);
                                }
                                $mainTotalAmount += (float)$total_amount;
    
                                $dataTOSaveOrderDetail[$counter]['total_amount'] = $total_amount;
                            }
    
                            $counter++;
                        }
    
    
                        foreach($dataTOSaveOrderDetail AS $key => $list){
                            if(isset($list['quantity']))
                            {
                                if($list['quantity'] < 1)
                                {
                                    unset($dataTOSaveOrderDetail[$key]);
                                }
                            }
                            else
                            {
                                unset($dataTOSaveOrderDetail[$key]);
                            }
                        }
    
    
    
                        $orderUpdate['MedicalProductOrder']['id'] = $orderID;
                        $orderUpdate['MedicalProductOrder']['total_amount'] = $final_amount;
    
                        if ($this->MedicalProductOrder->save($orderUpdate) && $this->MedicalProductOrderDetail->saveAll($dataTOSaveOrderDetail)) {
    
                            $remark = isset($data["remark"])?$data["remark"]:"";
                            $mobile_no = isset($data["mobile_no"])?$data["mobile_no"]:"";
                            $txn_no = isset($data["txn_no"])?$data["txn_no"]:"";
                            $beneficiary_name = isset($data["beneficiary_name"])?$data["beneficiary_name"]:"";
                            $bank_account = isset($data["bank_account"])?$data["bank_account"]:"";
                            $transaction_id = isset($data["transaction_id"])?$data["transaction_id"]:"";
                            $valid_upto = isset($data["valid_upto"])?$data["valid_upto"]:"";
                            $holder_name = isset($data["holder_name"])?$data["holder_name"]:"";
                            $card_no = isset($data["card_no"])?$data["card_no"]:"";
    
                            $paymentDetailData = array(
                                "thinapp_id"=>$thinappID,
                                "medical_product_order_id"=>$orderID,
                                "hospital_payment_type_id"=>!empty($payment_type_id)?$payment_type_id:0,
                                "remark"=>$remark,
                                "mobile_no"=>$mobile_no,
                                "txn_no"=>$txn_no,
                                "beneficiary_name"=>$beneficiary_name,
                                "bank_account"=>$bank_account,
                                "transaction_id"=>$transaction_id,
                                "valid_upto"=>$valid_upto,
                                "holder_name"=>$holder_name,
                                "card_no"=>$card_no,
                            );
                            $this->HospitalPaymentTypeDetail->save($paymentDetailData);
    
                            $result = true;
                            if(!$proforma_invoice){

                                if(isset($data['AppointmentCustomerStaffService']['display'])){
                                    $display_amount = $data['AppointmentCustomerStaffService']['display'];
                                    $new_due_amount = $final_amount;
                                    $result =   Custom::update_patient_due_amount($display_amount, $thinappID,$orderID,$login['id'],$new_due_amount,$patient_id,$patient_type,$pay_due_amount);
                                }

                            }else{

                                $created = Custom::created();
                                if(!empty($dataToSaveInOrder['appointment_customer_id'])){
                                    $patient_data = Custom::get_patient_detail($dataToSaveInOrder['appointment_customer_id'],'CUSTOMER');
                                }else{
                                    $patient_data = Custom::get_patient_detail($dataToSaveInOrder['children_id'],'CHILDREN');
                                }
                                $patient_mobile = Custom::create_mobile_number($patient_data['mobile']);
                                $lab_user_id = base64_decode($lab_user_id);
                                $lab_user_data =  Custom::getLabUserData($lab_user_id);
                                if($lab_user_data){
                                    if(!empty($lab_user_data['latitude']) && !empty($lab_user_data['longitude']) ){
                                        $proforma_invoice = base64_decode($proforma_invoice);
                                        $pay_amount = $orderUpdate['MedicalProductOrder']['total_amount'];
                                        $query = "update proforma_invoices set pharmacist_address=?, chemist_lat=?, chemist_lng=?, medical_product_order_id=?,amount=?, lab_pharmacy_user_id=?, created =? where id =?";
                                        $connection = ConnectionUtil::getConnection();
                                        $stmt = $connection->prepare($query);
                                        $stmt->bind_param('ssssssss', $lab_user_data['address'], $lab_user_data['latitude'], $lab_user_data['longitude'], $orderID,$pay_amount,$lab_user_id,  $created, $proforma_invoice);
                                        if($stmt->execute()){
                                            $pi = base64_encode($proforma_invoice);
                                            $order_link = Custom::short_url(SITE_PATH."homes/patient_proforma_invoice/$pi");
                                            $message = "Now you can order medicine from doctor click to link\n".$order_link;
                                            $res = Custom::send_single_sms($patient_mobile, $message,$thinappID);
                                        }
                                    }
                                }

                            }
    
                            if($result){
                                $datasource->commit();
                                $dataToSend['receipt_id'] = $orderID;
                                $dataToSend['status'] = 1;
                                $dataToSend['message'] = "Successfully paid!";
    
                            }else{
                                $datasource->rollback();
                                $dataToSend['status'] = 0;
                                $dataToSend['message'] = "Unable to adjust due amount";
                            }
    
    
    
                        } else {
                            $datasource->rollback();
                            $dataToSend['status'] = 0;
                            $dataToSend['message'] = "Something went wrong!";
                        }
    
    
                    } else {
                        $datasource->rollback();
                        $dataToSend['status'] = 0;
                        $dataToSend['message'] = "Something went wrong!";
                    }
    
    
                } catch (Exception $e) {
    
                    $datasource->rollback();
                    $dataToSend['status'] = 0;
                    $dataToSend['message'] = "Something went wrong!";
                }
                echo json_encode($dataToSend);
            }
        }

    public function add_hospital_receipt($patientUHID = null, $hospitalEmergencyID = 0)
    {
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User.User');
        $thinappID = $login['thinapp_id'];
        if ($patientUHID != null) {
            $patientUHID = base64_decode($patientUHID);
            $patientData = $this->AppointmentCustomer->find("first", array("conditions" => array("AppointmentCustomer.uhid" => $patientUHID, "AppointmentCustomer.thinapp_id" => $thinappID), "contain" => false));

            if (!isset($patientData['AppointmentCustomer']['id'])) {
                $patientData = $this->Children->find("first", array("conditions" => array("Children.uhid" => $patientUHID, "Children.thinapp_id" => $thinappID), "contain" => false));
            } else {
                $dob = $patientData['AppointmentCustomer']['dob'];
                if (!empty($dob) && $dob != '1970-01-01' && $dob != '0000-00-00') {
                    $age = Custom::dob_elapsed_string($dob, false, false);
                    if ($age['year'] > 0) {
                        $age = $age['year'] . 'Y';
                    } else if ($age['month'] > 0) {
                        $age = $age['month'] . 'M';
                    } else {
                        $age = $age['day'] . 'D';
                    }


                } else {
                    $age = $patientData['AppointmentCustomer']['age'];
                }
                $patientData['AppointmentCustomer']['age'] = $age;

            }


            $loginLab = $this->Session->read('Auth.User');
            $roleLab = $loginLab['USER_ROLE'];
            $condition2 = array("HospitalPaymentType.thinapp_id" => $thinappID);
            if ($roleLab == "LAB" || $roleLab == 'PHARMACY') {
                $condition2['HospitalPaymentType.lab_pharmacy_user_id'] = $loginLab['LabPharmacyUser']['id'];
            } else {
                $condition2['OR'] = array('HospitalPaymentType.lab_pharmacy_user_id' => 0, "(HospitalPaymentType.lab_pharmacy_type = 'LAB' AND HospitalPaymentType.lab_pharmacy_is_inhouse = 'YES')",);
            }


            $hospitalPaymentType = $this->HospitalPaymentType->find("list", array("conditions" => $condition2));


            if ($hospitalEmergencyID === 0) {
                $hospitalEmergencyID = 0;
                $isEmergency = "NO";
            } else {
                $hospitalEmergencyID = base64_decode($hospitalEmergencyID);
                $isEmergency = "YES";

            }


            $this->set(compact('isEmergency', 'hospitalEmergencyID', 'patientData', 'hospitalPaymentType'));
        }

    }

    public function print_invoice_non_opd($orderID)
    {
        $this->layout = false;

        $orderID = base64_decode($orderID);
        if ($orderID) {


            $orderDetails = $this->MedicalProductOrder->find('first', array(
                'fields' => array('MedicalProductOrder.*', 'Thinapp.*','AppointmentCustomer.*','Children.*', "(SELECT CONCAT(DATE_FORMAT(`MedicalProductOrder`.`created`,'%d%m%y'),COUNT(`id`)) FROM `medical_product_orders` AS `order` WHERE  DATE(`order`.`created`) = DATE(`MedicalProductOrder`.`created`) AND `order`.`id` <= `MedicalProductOrder`.`id` AND `order`.`thinapp_id` = `MedicalProductOrder`.`thinapp_id` AND `order`.`is_expense` = 'N') AS `unique_id`"),
                'conditions' => array('MedicalProductOrder.id' => $orderID), 'recursive' => 2,
                'limit'=>1
            ));
            if (isset($orderDetails['Children']['id']) && $orderDetails['Children']['id'] != 0) {
                $age = Custom::dob_elapsed_string($orderDetails['Children']['dob'], false, false);
                $UHID = $orderDetails['Children']['uhid'];
            } else {
                $dob = $orderDetails['AppointmentCustomer']['dob'];
                if (!empty($dob) && $dob != '1970-01-01' && $dob != '0000-00-00') {
                    $age = Custom::dob_elapsed_string($dob, false, false);
                } else {
                    $age = $orderDetails['AppointmentCustomer']['age'];
                }

                $UHID = $orderDetails['AppointmentCustomer']['uhid'];
            }

            if (!empty($orderDetails['MedicalProductOrder']['created_by_user_id'])) {
                $staffData = $this->AppointmentStaff->find('first',
                    array(
                        'fields' => array('AppointmentStaff.name'),
                        'conditions' => array('AppointmentStaff.user_id' => $orderDetails['MedicalProductOrder']['created_by_user_id'])
                    )
                );
                if (isset($staffData['AppointmentStaff']['name'])) {
                    $createdBy = $staffData['AppointmentStaff']['name'];
                } else {
                    $staffData = $this->User->find('first',
                        array(
                            'fields' => array('User.username'),
                            'conditions' => array('User.id' => $orderDetails['MedicalProductOrder']['created_by_user_id'])
                        )
                    );
                    $createdBy = isset($staffData['User']['username']) ? $staffData['User']['username'] : "";
                }
            } else {
                $createdBy = "";
            }


            $deposit = array();
            $expense = array();
            $ipdUniqueId = '';
            if ($orderDetails['MedicalProductOrder']['hospital_ipd_id'] > 0) {
                $ipd_id = $orderDetails['MedicalProductOrder']['hospital_ipd_id'];
                $deposit = $this->MedicalProductOrder->find("first", array("fields" => array("SUM(`MedicalProductOrder`.`total_amount`) AS `total_deposit`"), "conditions" => array("`MedicalProductOrder`.`status`" => "ACTIVE", "`MedicalProductOrder`.`is_advance`" => "Y", "`MedicalProductOrder`.`is_opd`" => "N", "`MedicalProductOrder`.`hospital_ipd_id`" => $ipd_id)));
                $expense = $this->MedicalProductOrder->find("first", array("fields" => array("SUM(`MedicalProductOrder`.`total_amount`) AS `total_expense`"), "conditions" => array("`MedicalProductOrder`.`status`" => "ACTIVE", "`MedicalProductOrder`.`is_advance`" => "N", "`MedicalProductOrder`.`is_opd`" => "N", "`MedicalProductOrder`.`hospital_ipd_id`" => $ipd_id)));
                $ipdDataUnq = $this->HospitalIpd->find("first", array("fields" => array("ipd_unique_id"), "conditions" => array("`HospitalIpd`.`id`" => $ipd_id)));
                if (isset($ipdDataUnq['HospitalIpd']['ipd_unique_id'])) {
                    $ipdUniqueId = $ipdDataUnq['HospitalIpd']['ipd_unique_id'];
                }
            }



            $titleArr = array();
            if ($orderDetails['MedicalProductOrder']['lab_pharmacy_user_id'] > 0) {
                $title = $this->LabPharmacyUser->find('first', array('fields' => array('LabPharmacyUser.receipt_header_title', 'LabPharmacyUser.receipt_footer_title'), 'conditions' => array('LabPharmacyUser.id' => $orderDetails['MedicalProductOrder']['lab_pharmacy_user_id'])));

                if ($title['LabPharmacyUser']['receipt_header_title'] != '') {
                    $titleArr['receipt_header_title'] = $title['LabPharmacyUser']['receipt_header_title'];
                }
                if ($title['LabPharmacyUser']['receipt_footer_title'] != '') {
                    $titleArr['receipt_footer_title'] = $title['LabPharmacyUser']['receipt_footer_title'];
                }

            }


            $this->set(array('titleArr' => $titleArr, 'createdBy' => $createdBy, 'age' => $age, 'UHID' => $UHID, 'orderDetails' => $orderDetails));
        }
    }


    public function print_invoice_non_opd_advance($orderID)
    {
        $this->layout = false;

        $orderID = base64_decode($orderID);
        if ($orderID) {


            $orderDetails = $this->MedicalProductOrder->find('first', array(
                'fields' => array('MedicalProductOrder.*', "(SELECT CONCAT(DATE_FORMAT(`MedicalProductOrder`.`created`,'%d%m%y'),COUNT(`id`)) FROM `medical_product_orders` AS `order` WHERE  DATE(`order`.`created`) = DATE(`MedicalProductOrder`.`created`) AND `order`.`id` <= `MedicalProductOrder`.`id` AND `order`.`thinapp_id` = `MedicalProductOrder`.`thinapp_id` AND `order`.`is_expense` = 'N') AS `unique_id`"),
                'conditions' => array('MedicalProductOrder.id' => $orderID), 'recursive' => 2,
            ));

            $hospitalDepositData = $this->HospitalDepositAmount->findById($orderDetails['MedicalProductOrder']['hospital_deposit_amount_id']);

            if (isset($orderDetails['Children']['id']) && $orderDetails['Children']['id'] != 0) {
                $age = Custom::dob_elapsed_string($orderDetails['Children']['dob'], false, false);
                $UHID = $orderDetails['Children']['uhid'];
            } else {
                $dob = $orderDetails['AppointmentCustomer']['dob'];
                if (!empty($dob) && $dob != '1970-01-01' && $dob != '0000-00-00') {
                    $age = Custom::dob_elapsed_string($dob, false, false);
                } else {
                    $age = $orderDetails['AppointmentCustomer']['age'];
                }

                $UHID = $orderDetails['AppointmentCustomer']['uhid'];
            }

            if (!empty($orderDetails['MedicalProductOrder']['created_by_user_id'])) {
                $staffData = $this->AppointmentStaff->find('first',
                    array(
                        'fields' => array('AppointmentStaff.name'),
                        'conditions' => array('AppointmentStaff.user_id' => $orderDetails['MedicalProductOrder']['created_by_user_id'])
                    )
                );
                if (isset($staffData['AppointmentStaff']['name'])) {
                    $createdBy = $staffData['AppointmentStaff']['name'];
                } else {
                    $staffData = $this->User->find('first',
                        array(
                            'fields' => array('User.username'),
                            'conditions' => array('User.id' => $orderDetails['MedicalProductOrder']['created_by_user_id'])
                        )
                    );
                    $createdBy = isset($staffData['User']['username']) ? $staffData['User']['username'] : "";
                }
            } else {
                $createdBy = "";
            }


            $this->set(array('createdBy' => $createdBy, 'age' => $age, 'UHID' => $UHID, 'orderDetails' => $orderDetails, 'hospitalDepositData' => $hospitalDepositData));
        }
    }


    public function search_hospital_patient_invoice_list($patientUHID)
    {
        $reqData = $this->request->query;
        $pram = array();
        if (!empty($reqData['date_from'])) {
            $pram['f'] = $reqData['date_from'];
        }
        if (!empty($reqData['date_to'])) {
            $pram['t'] = $reqData['date_to'];
        }
        if (!empty($reqData['receipt_type'])) {
            $pram['r'] = $reqData['receipt_type'];
        }

        $this->redirect(
            array(
                "controller" => "app_admin",
                "action" => "hospital_patient_invoice_list/" . base64_encode($patientUHID),
                "?" => $pram,
            )
        );
    }


    public function hospital_patient_invoice_list($patientUHID)
    {
        // die("dsdf");
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User.User');
        $thin_app_id = $login['thinapp_id'];


        $patientUHID = base64_decode($patientUHID);
        $conditions["MedicalProductOrder.thinapp_id"] = $thin_app_id;

        $conditions["OR"] = array(
            "AppointmentCustomer.uhid" => $patientUHID,
            "Children.uhid" => $patientUHID,
        );

        $searchData = $this->request->query;

        if (isset($searchData['f']) && !empty($searchData['f'])) {
            $date = DateTime::createFromFormat('d/m/Y', $searchData['f']);
            $date1 = $date->format('Y-m-d');

            $this->request->data['Search']['date_from'] = $searchData['f'];
            $conditions["DATE(MedicalProductOrder.created) >="] = $date1;
        }

        if (isset($searchData['t']) && !empty($searchData['t'])) {
            $date = DateTime::createFromFormat('d/m/Y', $searchData['t']);
            $date1 = $date->format('Y-m-d');

            $this->request->data['Search']['date_to'] = $searchData['t'];
            $conditions["DATE(MedicalProductOrder.created) <="] = $date1;
        }

        if (isset($searchData['r']) && !empty($searchData['r'])) {
            $this->request->data['Search']['receipt_type'] = $searchData['r'];

            if ($searchData['r'] == 'OPD') {
                $conditions["MedicalProductOrder.is_opd"] = 'Y';
            } else if ($searchData['r'] == 'DEPOSIT') {
                $conditions["MedicalProductOrder.is_advance"] = 'Y';
            } else if ($searchData['r'] == 'EXPANSE') {
                $conditions["MedicalProductOrder.is_expense"] = 'Y';
            }
        }


        //$conditions["MedicalProductOrder.is_expense"] = 'N';


        $medicalProductOrder = $this->MedicalProductOrder->find('all', array('fields' => array(
            'MedicalProductOrder.*',
            'AppointmentCustomerStaffService.booking_payment_type',
            'AppointmentCustomer.first_name',
            "AppointmentCustomer.uhid",
            'Children.child_name',
            "Children.uhid",
            "HospitalDepositAmount.*",
            /*'WalletUserHistory.*',*/
            "(SELECT CONCAT(DATE_FORMAT(`MedicalProductOrder`.`created`,'%d%m%y'),COUNT(`id`)) FROM `medical_product_orders` AS `order` WHERE  DATE(`order`.`created`) = DATE(`MedicalProductOrder`.`created`) AND `order`.`id` <= `MedicalProductOrder`.`id` AND `order`.`thinapp_id` = `MedicalProductOrder`.`thinapp_id` AND `order`.`is_expense` = 'N') AS `unique_id`"
        ), 'joins' => array(
            /*array('table' => 'wallet_user_history',
                'alias' => 'WalletUserHistory',
                'type' => 'LEFT',
                'conditions' => array(
                    'WalletUserHistory.appointment_id = MedicalProductOrder.appointment_customer_staff_service_id',
                    'WalletUserHistory.amount_type' => 'DEDUCTION'
                )
            ),*/
            array('table' => 'hospital_deposit_amounts',
                'alias' => 'HospitalDepositAmount',
                'type' => 'LEFT',
                'conditions' => array(
                    'MedicalProductOrder.hospital_deposit_amount_id = HospitalDepositAmount.id'
                )
            )

        ), "conditions" => $conditions, 'order' => array('MedicalProductOrder.id' => 'DESC'), 'group' => array('MedicalProductOrder.id'), 'contain' => array('AppointmentCustomer', 'AppointmentCustomerStaffService', 'Children')));



        $login1 = $this->Session->read('Auth.User');
        $reportTitle = $login1['Thinapp']['name'].' ('.$this->request->data['Search']['date_from'].' - '.$this->request->data['Search']['date_to'].')';

        $this->set(compact('reportTitle', 'medicalProductOrder', 'patientUHID'));

    }


    public function delete_invoice_non_opd($uhid, $orderID)
    {
        $this->layout = false;

        $orderID = base64_decode($orderID);
        if ($orderID) {
            $this->MedicalProductOrder->delete(array('MedicalProductOrder.id' => $orderID));
            $this->MedicalProductOrderDetail->deleteAll(array('MedicalProductOrderDetail.medical_product_order_id' => $orderID));
        }
        $this->redirect(
            array(
                "controller" => "app_admin",
                "action" => "hospital_patient_invoice_list",
                $uhid
            )
        );
    }


    public function add_hospital_receipt_search()
    {

        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User.User');
        $thinappID = $login['thinapp_id'];
        $loginLab = $this->Session->read('Auth.User');
        $roleLab = $loginLab['USER_ROLE'];
        $condition1 = array("MedicalProduct.thinapp_id" => $thinappID, "MedicalProduct.status" => "ACTIVE");
        $condition2 = array('HospitalPaymentType.status' => 'ACTIVE', "HospitalPaymentType.thinapp_id" => $thinappID);
        if ($roleLab == "LAB" || $roleLab == 'PHARMACY') {
            $condition1['MedicalProduct.lab_pharmacy_user_id'] = $loginLab['LabPharmacyUser']['id'];
            $condition2['HospitalPaymentType.lab_pharmacy_user_id'] = $loginLab['LabPharmacyUser']['id'];
        } else {
            $condition1['OR'] = array('MedicalProduct.lab_pharmacy_user_id' => 0, "(MedicalProduct.lab_pharmacy_type = 'LAB' AND MedicalProduct.lab_pharmacy_is_inhouse = 'YES')",);
            $condition2['OR'] = array('HospitalPaymentType.lab_pharmacy_user_id' => 0, "(HospitalPaymentType.lab_pharmacy_type = 'LAB' AND HospitalPaymentType.lab_pharmacy_is_inhouse = 'YES')",);
        }
        $hospitalPaymentType = $this->HospitalPaymentType->find("list", array("conditions" => $condition2));
        $this->set(compact('hospitalPaymentType'));

    }

    public function uhid_input_search()
    {
        $this->layout = false;
        $this->autoRender = false;
        if ($this->request->is(array('ajax'))) {

            $login = $this->Session->read('Auth.User.User');
            $thinappID = $thin_app_ids[] = $login['thinapp_id'];
            if ($firm_ids = Custom::get_all_firm_ids($thinappID)) {
                $thin_app_ids = array_merge($thin_app_ids, $firm_ids);
            }
            $term = isset($this->request->data['term']) ? $this->request->data['term'] : $_GET['term'];


            $loginLab = $this->Session->read('Auth.User');
            $roleLab = $loginLab['USER_ROLE'];
            $cus_condition = array('AppointmentCustomer.thinapp_id' => $thin_app_ids, 'AppointmentCustomer.uhid LIKE' => '%' . $term . '%');
            $child_condition = array('Children.thinapp_id' => $thin_app_ids, 'Children.uhid LIKE' => '%' . $term . '%');
            if ($roleLab == "LAB" || $roleLab == 'PHARMACY') {
                if ($loginLab['LabPharmacyUser']['is_inhouse'] == 'NO') {
                    $cus_condition['LabPatientUploadedRecorde.lab_pharmacy_user_id'] = $loginLab['LabPharmacyUser']['id'];
                    $child_condition['LabPatientUploadedRecorde.lab_pharmacy_user_id'] = $loginLab['LabPharmacyUser']['id'];
                }

            }

            $patientData = $this->AppointmentCustomer->find('all', array('conditions' => $cus_condition,
                'joins' => array(
                    array('table' => 'lab_patient_uploaded_recordes',
                        'alias' => 'LabPatientUploadedRecorde',
                        'type' => 'LEFT',
                        'conditions' => array(
                            'LabPatientUploadedRecorde.user_id = AppointmentCustomer.user_id'
                        )
                    )
                ), 'contain' => false));
            $childData = $this->Children->find('all', array('conditions' => $child_condition,
                'joins' => array(
                    array('table' => 'lab_patient_uploaded_recordes',
                        'alias' => 'LabPatientUploadedRecorde',
                        'type' => 'LEFT',
                        'conditions' => array(
                            'LabPatientUploadedRecorde.user_id = Children.user_id'
                        )
                    )
                ),
                'contain' => false));
            $data = array_merge($patientData, $childData);
            usort($data, function ($a, $b) {
                $ad = isset($a['AppointmentCustomer']['created']) ? new DateTime($a['AppointmentCustomer']['created']) : new DateTime($a['Children']['created']);
                $bd = isset($b['AppointmentCustomer']['created']) ? new DateTime($b['AppointmentCustomer']['created']) : new DateTime($b['Children']['created']);
                if ($ad == $bd) {
                    return -1;
                }
                return $ad < $bd ? -1 : 1;
            });

            $dataToSend = array();
            foreach ($data AS $key => $value) {

                if (isset($value['AppointmentCustomer'])) {
                    $dataToSend[$key]['uhid'] = $value['AppointmentCustomer']['uhid'];

                    $dataToSend[$key]['name'] = $value['AppointmentCustomer']['first_name'];
                    $dataToSend[$key]['gender'] = $value['AppointmentCustomer']['gender'];
                    $dataToSend[$key]['address'] = (!empty($value['AppointmentCustomer']['address'])) ? $value['AppointmentCustomer']['address'] : "";
                    $dataToSend[$key]['mobile'] = $value['AppointmentCustomer']['mobile'];
                    $dataToSend[$key]['age'] = (!empty($value['AppointmentCustomer']['age'])) ? $value['AppointmentCustomer']['age'] : "";
                    $dataToSend[$key]['parents_name'] = (!empty($value['AppointmentCustomer']['parents_name'])) ? $value['AppointmentCustomer']['parents_name'] : "";
                    $dataToSend[$key]['sub_text'] = $value['AppointmentCustomer']['uhid'] . '-' . $value['AppointmentCustomer']['first_name'] . '-' . $value['AppointmentCustomer']['mobile'];
                    $dataToSend[$key]['label'] = $dataToSend[$key]['sub_text'];
                    $dataToSend[$key]['value'] = $value['AppointmentCustomer']['uhid'];
                } else {
                    $dataToSend[$key]['uhid'] = $value['Children']['uhid'];
                    $dataToSend[$key]['name'] = $value['Children']['child_name'];
                    $dataToSend[$key]['gender'] = $value['Children']['gender'];
                    $dataToSend[$key]['address'] = (!empty($value['Children']['patient_address'])) ? $value['Children']['patient_address'] : "";
                    $dataToSend[$key]['mobile'] = $value['Children']['mobile'];
                    $dataToSend[$key]['age'] = (!empty($value['Children']['dob'])) ? $value['Children']['dob'] : "";
                    $dataToSend[$key]['parents_name'] = (!empty($value['Children']['parents_name'])) ? $value['Children']['parents_name'] : "";
                    $dataToSend[$key]['sub_text'] = $value['Children']['uhid'] . '-' . $value['Children']['child_name'] . '-' . $value['Children']['mobile'];
                    $dataToSend[$key]['label'] = $dataToSend[$key]['sub_text'];
                    $dataToSend[$key]['value'] = $value['Children']['uhid'];
                }

            }

            echo json_encode($dataToSend);

        }
        die();
    }

    public function patient_name_input_search()
    {
        $this->layout = false;
        $this->autoRender = false;
        if ($this->request->is(array('ajax'))) {

            $login = $this->Session->read('Auth.User.User');
            $thinappID = $thin_app_ids[] = $login['thinapp_id'];
            if ($firm_ids = Custom::get_all_firm_ids($thinappID)) {
                $thin_app_ids = array_merge($thin_app_ids, $firm_ids);
            }
            $term = isset($this->request->data['term']) ? $this->request->data['term'] : $_GET['term'];

            $loginLab = $this->Session->read('Auth.User');
            $roleLab = $loginLab['USER_ROLE'];
            $cus_condition = array('AppointmentCustomer.thinapp_id' => $thin_app_ids, 'AppointmentCustomer.uhid <>' => '', 'AppointmentCustomer.first_name LIKE' => '%' . $term . '%');
            $child_condition = array('Children.thinapp_id' => $thin_app_ids, 'Children.uhid <>' => '', 'Children.child_name LIKE' => '%' . $term . '%');
            if ($roleLab == "LAB" || $roleLab == 'PHARMACY') {
                if ($loginLab['LabPharmacyUser']['is_inhouse'] == 'NO') {
                    $cus_condition['LabPatientUploadedRecorde.lab_pharmacy_user_id'] = $loginLab['LabPharmacyUser']['id'];
                    $child_condition['LabPatientUploadedRecorde.lab_pharmacy_user_id'] = $loginLab['LabPharmacyUser']['id'];
                }
            }


            $patientData = $this->AppointmentCustomer->find('all', array('conditions' => $cus_condition, 'joins' => array(
                array('table' => 'lab_patient_uploaded_recordes',
                    'alias' => 'LabPatientUploadedRecorde',
                    'type' => 'LEFT',
                    'conditions' => array(
                        'LabPatientUploadedRecorde.user_id = AppointmentCustomer.user_id'
                    )
                )
            ), 'contain' => false));
            $childData = $this->Children->find('all', array('conditions' => $child_condition, 'joins' => array(
                array('table' => 'lab_patient_uploaded_recordes',
                    'alias' => 'LabPatientUploadedRecorde',
                    'type' => 'LEFT',
                    'conditions' => array(
                        'LabPatientUploadedRecorde.user_id = Children.user_id'
                    )
                )
            ), 'contain' => false));


            $data = array_merge($patientData, $childData);
            usort($data, function ($a, $b) {
                $ad = isset($a['AppointmentCustomer']['created']) ? new DateTime($a['AppointmentCustomer']['created']) : new DateTime($a['Children']['created']);
                $bd = isset($b['AppointmentCustomer']['created']) ? new DateTime($b['AppointmentCustomer']['created']) : new DateTime($b['Children']['created']);
                if ($ad == $bd) {
                    return -1;
                }
                return $ad < $bd ? -1 : 1;
            });

            $dataToSend = array();
            foreach ($data AS $key => $value) {

                if (isset($value['AppointmentCustomer'])) {

                    $dataToSend[$key]['uhid'] = $value['AppointmentCustomer']['uhid'];
                    $dataToSend[$key]['name'] = $value['AppointmentCustomer']['first_name'];
                    $dataToSend[$key]['gender'] = $value['AppointmentCustomer']['gender'];
                    $dataToSend[$key]['address'] = (!empty($value['AppointmentCustomer']['address'])) ? $value['AppointmentCustomer']['address'] : "";
                    $dataToSend[$key]['mobile'] = $value['AppointmentCustomer']['mobile'];
                    $dataToSend[$key]['age'] = (!empty($value['AppointmentCustomer']['age'])) ? $value['AppointmentCustomer']['age'] : "";
                    $dataToSend[$key]['parents_name'] = (!empty($value['AppointmentCustomer']['parents_name'])) ? $value['AppointmentCustomer']['parents_name'] : "";
                    $dataToSend[$key]['label'] = $value['AppointmentCustomer']['uhid'] . '-' . $value['AppointmentCustomer']['first_name'] . '-' . $value['AppointmentCustomer']['mobile'];
                    $dataToSend[$key]['sub_text'] = $dataToSend[$key]['label'];
                    $dataToSend[$key]['value'] = $dataToSend[$key]['name'];
                    $dataToSend[$key]['auto_patient_type'] = base64_encode("CUSTOMER-" . $value['AppointmentCustomer']['id']);
                } else {
                    $dataToSend[$key]['id'] = $value['Children']['id'];
                    $dataToSend[$key]['name'] = $value['Children']['child_name'];
                    $dataToSend[$key]['gender'] = $value['Children']['gender'];
                    $dataToSend[$key]['address'] = (!empty($value['Children']['patient_address'])) ? $value['Children']['patient_address'] : "";
                    $dataToSend[$key]['mobile'] = $value['Children']['mobile'];
                    $dataToSend[$key]['age'] = (!empty($value['Children']['dob'])) ? $value['Children']['dob'] : "";
                    $dataToSend[$key]['parents_name'] = (!empty($value['Children']['parents_name'])) ? $value['Children']['parents_name'] : "";
                    $dataToSend[$key]['label'] = $value['Children']['uhid'] . '-' . $value['Children']['child_name'] . '-' . $value['Children']['mobile'];
                    $dataToSend[$key]['sub_text'] = $dataToSend[$key]['label'];
                    $dataToSend[$key]['value'] = $dataToSend[$key]['name'];
                    $dataToSend[$key]['auto_patient_type'] = base64_encode("CHILDREN-" . $value['Children']['id']);
                }

            }

            echo json_encode($dataToSend);

        }
        die();
    }

    public function mobile_input_search()
    {
        $this->layout = false;
        $this->autoRender = false;
        if ($this->request->is(array('ajax'))) {

            $login = $this->Session->read('Auth.User.User');
            $thinappID = $thin_app_ids[] = $login['thinapp_id'];
            if ($firm_ids = Custom::get_all_firm_ids($thinappID)) {
                $thin_app_ids = array_merge($thin_app_ids, $firm_ids);
            }

            $term = isset($this->request->data['term']) ? $this->request->data['term'] : $_GET['term'];


            $loginLab = $this->Session->read('Auth.User');
            $roleLab = $loginLab['USER_ROLE'];
            $cus_condition = array('AppointmentCustomer.thinapp_id' => $thin_app_ids, 'AppointmentCustomer.uhid <>' => '', 'AppointmentCustomer.mobile LIKE' => '%' . $term . '%');
            $child_condition = array('Children.thinapp_id' => $thin_app_ids, 'Children.uhid <>' => '', 'Children.mobile LIKE' => '%' . $term . '%');
            if ($roleLab == "LAB" || $roleLab == 'PHARMACY') {
                if ($loginLab['LabPharmacyUser']['is_inhouse'] == 'NO') {
                    $cus_condition['OR'] = array(
                        "LabPatientUploadedRecorde.lab_pharmacy_user_id" => $loginLab['LabPharmacyUser']['id'],
                        "AppointmentCustomer.customer_created_by" => $login['id']
                    );

                }
            }


            $patientData = $this->AppointmentCustomer->find('all', array('conditions' => $cus_condition, 'joins' => array(
                array('table' => 'lab_patient_uploaded_recordes',
                    'alias' => 'LabPatientUploadedRecorde',
                    'type' => 'LEFT',
                    'conditions' => array(
                        'LabPatientUploadedRecorde.user_id = AppointmentCustomer.user_id'
                    )
                )
            ), 'contain' => array('Thinapp')));
            $childData = $this->Children->find('all', array('conditions' => $child_condition, 'joins' => array(
                array('table' => 'lab_patient_uploaded_recordes',
                    'alias' => 'LabPatientUploadedRecorde',
                    'type' => 'LEFT',
                    'conditions' => array(
                        'LabPatientUploadedRecorde.user_id = Children.user_id'
                    )
                )
            ), 'contain' => array('Thinapp')));
            $data = array_merge($patientData, $childData);
            usort($data, function ($a, $b) {
                $ad = isset($a['AppointmentCustomer']['created']) ? new DateTime($a['AppointmentCustomer']['created']) : new DateTime($a['Children']['created']);
                $bd = isset($b['AppointmentCustomer']['created']) ? new DateTime($b['AppointmentCustomer']['created']) : new DateTime($b['Children']['created']);
                if ($ad == $bd) {
                    return -1;
                }
                return $ad < $bd ? -1 : 1;
            });

            $dataToSend = array();
            foreach ($data AS $key => $value) {

                if (isset($value['AppointmentCustomer'])) {
                    $dataToSend[$key]['uhid'] = $value['AppointmentCustomer']['uhid'];
                    $dataToSend[$key]['name'] = $value['AppointmentCustomer']['first_name'];
                    $dataToSend[$key]['gender'] = $value['AppointmentCustomer']['gender'];
                    $dataToSend[$key]['address'] = (!empty($value['AppointmentCustomer']['address'])) ? $value['AppointmentCustomer']['address'] : "";
                    $dataToSend[$key]['mobile'] = $value['AppointmentCustomer']['mobile'];
                    $dataToSend[$key]['age'] = (!empty($value['AppointmentCustomer']['age'])) ? $value['AppointmentCustomer']['age'] : "";
                    $dataToSend[$key]['parents_name'] = (!empty($value['AppointmentCustomer']['parents_name'])) ? $value['AppointmentCustomer']['parents_name'] : "";
                    $dataToSend[$key]['sub_text'] = $value['AppointmentCustomer']['uhid'] . '-' . $value['AppointmentCustomer']['first_name'] . '-' . $value['AppointmentCustomer']['mobile'] . '-' . $value['Thinapp']['name'];
                    $dataToSend[$key]['label'] = $dataToSend[$key]['sub_text'];
                    $dataToSend[$key]['value'] = $dataToSend[$key]['mobile'];
                } else {
                    $dataToSend[$key]['uhid'] = $value['Children']['uhid'];
                    $dataToSend[$key]['name'] = $value['Children']['child_name'];
                    $dataToSend[$key]['gender'] = $value['Children']['gender'];
                    $dataToSend[$key]['address'] = (!empty($value['Children']['patient_address'])) ? $value['Children']['patient_address'] : "";
                    $dataToSend[$key]['mobile'] = $value['Children']['mobile'];
                    $dataToSend[$key]['age'] = (!empty($value['Children']['dob'])) ? $value['Children']['dob'] : "";
                    $dataToSend[$key]['parents_name'] = (!empty($value['Children']['parents_name'])) ? $value['Children']['parents_name'] : "";
                    $dataToSend[$key]['sub_text'] = $value['Children']['uhid'] . '-' . $value['Children']['child_name'] . '-' . $value['Children']['mobile'] . '-' . $value['Thinapp']['name'];
                    $dataToSend[$key]['label'] = $dataToSend[$key]['sub_text'];
                    $dataToSend[$key]['value'] = $dataToSend[$key]['mobile'];
                }

            }

            echo json_encode($dataToSend);

        }
        die();
    }

    public function patient_input_search()
    {
        $this->layout = false;
        $this->autoRender = false;
        if ($this->request->is(array('ajax'))) {

            $login = $this->Session->read('Auth.User.User');
            $thinappID = $thin_app_ids[] = $login['thinapp_id'];
            $single_search = isset($_GET['single_search']) ? $_GET['single_search'] : 'NO';
            $limit = "";
            if($single_search =="NO"){
                if ($firm_ids = Custom::get_all_firm_ids($thinappID)) {
                    $thin_app_ids = array_merge($thin_app_ids, $firm_ids);
                }
            }
            if($single_search =="YES"){
                $limit = " LIMIT 1";
            }
            $thin_app_ids = '"' . implode('","', $thin_app_ids) . '"';
            $term = isset($this->request->data['term']) ? $this->request->data['term'] : $_GET['term'];
            $search = isset($this->request->data['search']) ? $this->request->data['search'] : $_GET['search'];
            $search_customer_field = $search_child_field = "";
            if (!empty($search)) {
                if (strtoupper($search) == "NAME") {
                    $search_customer_field = 'ac.first_name';
                    $search_child_field = 'c.child_name';
                } else if (strtoupper($search) == "MOBILE") {
                    $search_customer_field = 'ac.mobile';
                    $search_child_field = 'c.mobile';
                } else if (strtoupper($search) == "UHID") {
                    $search_customer_field = 'ac.uhid';
                    $search_child_field = 'c.uhid';
                }
            }


            $loginLab = $this->Session->read('Auth.User');
            $roleLab = $loginLab['USER_ROLE'];
            $cus_condition = "  ac.thinapp_id IN($thin_app_ids) and ac.status = 'ACTIVE' and $search_customer_field like '%$term%'";
            $child_condition = "  c.thinapp_id IN($thin_app_ids) AND c.status = 'ACTIVE' and $search_child_field like '%$term%'";
            $child_join = $customer_join = "";
            if ($roleLab == "LAB" || $roleLab == 'PHARMACY') {
                if ($loginLab['LabPharmacyUser']['is_inhouse'] == 'NO') {
                    $login_id = $login['id'];
                    $customer_join = " join lab_patient_uploaded_recordes as lpur on ( lpur.user_id = ac.user_id OR ac.customer_created_by = $login_id ) ";
                    $child_join = " join lab_patient_uploaded_recordes as lpur on ( lpur.user_id = c.user_id ) ";
                }
            }

            $list = array();
            $query = "select * from ((select TO_BASE64(CONCAT('CUSTOMER-',ac.id)) as auto_patient_type, ac.uhid, ac.first_name as name, ac.gender, ac.address, ac.mobile, ac.age, ac.parents_name, @label:=CONCAT_WS('-',ac.uhid,ac.first_name,ac.mobile,t.name) as label , @label as sub_text, ac.mobile as value from appointment_customers as ac $customer_join join thinapps as t on t.id = ac.thinapp_id where $cus_condition group by ac.id) UNION ALL (select TO_BASE64(CONCAT('CHILDREN-',c.id)) as auto_patient_type, c.uhid, c.child_name as name, c.gender, c.address, c.mobile, c.dob, c.parents_name, @label:=CONCAT_WS('-',c.uhid,c.child_name,c.mobile,t.name) as label , @label as sub_text, c.mobile as value from childrens as c $child_join join thinapps as t on t.id = c.thinapp_id where $child_condition group by c.id)) as final $limit";
            $connection = ConnectionUtil::getConnection();
            $data_list = $connection->query($query);
            if ($data_list->num_rows) {
                $list = mysqli_fetch_all($data_list, MYSQL_ASSOC);
            }
            echo json_encode($list);
        }
        die();
    }

    public function search_get_hospital_receipt_reports()
    {
        $reqData = $this->request->data['Search'];
        $pram = array();
        if (!empty($reqData['receipt_category'])) {
            $pram['rc'] = $reqData['receipt_category'];
        }
        if (!empty($reqData['category'])) {
            $pram['c'] = $reqData['category'];
        }
        if (!empty($reqData['from_date'])) {
            $pram['f'] = $reqData['from_date'];
        }
        if (!empty($reqData['to_date'])) {
            $pram['t'] = $reqData['to_date'];
        }
        if (!empty($reqData['service'])) {
            $pram['s'] = $reqData['service'];
        }
        if (!empty($reqData['payment'])) {
            $pram['p'] = $reqData['payment'];
        }
        if (!empty($reqData['uhid'])) {
            $pram['u'] = $reqData['uhid'];
        }

        if (!empty($reqData['name'])) {
            $pram['n'] = $reqData['name'];
        }

        if (!empty($reqData['biller'])) {
            $pram['b'] = $reqData['biller'];
        }

        if (!empty($reqData['doctor'])) {
            $pram['d'] = $reqData['doctor'];
        }

        if (!empty($reqData['address'])) {
            $pram['a'] = $reqData['address'];
        }
    	
    	if (!empty($reqData['rf'])) {
            $pram['rf'] = $reqData['rf'];
        }

        $this->redirect(
            array(
                "controller" => "app_admin",
                "action" => "get_hospital_receipt_reports",
                "?" => $pram,
            )
        );
    }


 
public function get_hospital_receipt_reports_back()
    {

        $this->layout = "app_admin_home";

        $login = $this->Session->read('Auth.User.User');
        $login1 = $this->Session->read('Auth.User');
        $thinappID = $login['thinapp_id'];
        $today = date("Y-m-d");
    	$date_message = "";

        $condition = $module_wise_condition = " MedicalProductOrder.thinapp_id = $thinappID and MedicalProductOrder.payment_status ='PAID' and MedicalProductOrder.status ='ACTIVE' ";
        $custom_filter = " AND MedicalProductOrder.payment_adjust_by_settlement = 'N'";

        if ($login1['USER_ROLE'] == "LAB" || $login1['USER_ROLE'] == "PHARMACY") {

            $titleQuery = "SELECT `report_title` FROM `lab_pharmacy_users` WHERE `id` = '".$login1['LabPharmacyUser']['id']."' LIMIT 1";

            $condition .= " and  MedicalProductOrder.lab_pharmacy_user_id =" . $login1['LabPharmacyUser']['id'];
            $module_wise_condition .= " and  MedicalProductOrder.lab_pharmacy_user_id =" . $login1['LabPharmacyUser']['id'];
        } else if ($login1['USER_ROLE'] != 'ADMIN') {
            $titleQuery = "SELECT `report_title` FROM `thinapps` WHERE `id` = '".$thinappID."' LIMIT 1";
            $condition .= " and  MedicalProductOrder.created_by_user_id =" . $login['id'];
            $module_wise_condition .= " and  MedicalProductOrder.created_by_user_id =" . $login['id'];
        }
        else
        {
            $titleQuery = "SELECT `report_title` FROM `thinapps` WHERE `id` = '".$thinappID."' LIMIT 1";
        }

        $searchData = $this->request->query;
        $module_wise_date = "";
        $report_for = '';
        if (!empty($searchData['rf'])) {
            $report_for = $searchData['rf'];
        }else{
            $report_for= 'la';
        }

        if (isset($searchData['f']) && !empty($searchData['f']) && !empty($searchData['t']) && isset($searchData['t'])) {

            $this->request->data['Search']['from_date'] = $searchData['f'];
            $from_date = DateTime::createFromFormat('d/m/Y', $searchData['f'])->format('Y-m-d');
            $this->request->data['Search']['to_date'] = $searchData['t'];
            $to_date = DateTime::createFromFormat('d/m/Y', $searchData['t'])->format('Y-m-d');
            $diff=date_diff(date_create($from_date),date_create($to_date));
            $diff = $diff->format("%R%a");
            if($diff > 366 || $diff < 0){
                if($diff > 366){
                    $date_message = "You can not search more than one year of report at once";
                }else if($diff < 0){
                    $date_message = "Date To can not less than Date From";
                }
                $today  = date("d/m/Y");
                $search_today =  $from_date = $to_date = date("Y-m-d");
                $this->request->data['Search']['to_date'] = $this->request->data['Search']['from_date'] = $today;
                $condition .= " and  DATE(MedicalProductOrder.created) BETWEEN '$search_today' and '$search_today'";
            }else{
                $condition .= " and  DATE(MedicalProductOrder.created) BETWEEN '$from_date' and '$to_date' ";
            }
            $module_wise_condition .= " and  ( ( DATE(MedicalProductOrder.created) BETWEEN '$from_date' and '$to_date') OR ( DATE(HospitalIpdSettlement.created) BETWEEN '$from_date' and '$to_date' ) ) ";


        } else {
           $today  = date("d/m/Y");
            $search_today =  $from_date = $to_date = date("Y-m-d");
            $this->request->data['Search']['to_date'] = $this->request->data['Search']['from_date'] = $today;
            $condition .= " and  DATE(MedicalProductOrder.created) BETWEEN '$search_today' and '$search_today'";
            $module_wise_condition .= " and  ( ( DATE(MedicalProductOrder.created) BETWEEN '$search_today' and '$search_today') OR ( DATE(HospitalIpdSettlement.created) BETWEEN '$search_today' and '$search_today' ) ) ";
     
        }


        $custom_field = " MedicalProductOrder.total_amount + MedicalProduct.refund_amount ";
        $custom_field_2 = " MedicalProductOrder.total_amount ";

        $single_doctor_condition = " (SELECT GROUP_CONCAT(CONCAT(Doctor.NAME,'##',IFNULL(Department.NAME,''))) FROM appointment_staffs as Doctor left JOIN appointment_categories AS Department ON Department.id = Doctor.appointment_category_id WHERE Doctor.id IN (SELECT (mpod.appointment_staff_id) FROM medical_product_order_details AS mpod WHERE mpod.medical_product_order_id = MedicalProductOrder.id )   ) as doctor_name ";
        $detail_total_amount_condition = " MedicalProductOrder.total_amount ";


        $max_query = " and MedicalProductOrderDetail.id = (select max(mpod.id) from medical_product_order_details as mpod where mpod.medical_product_order_id = MedicalProductOrder.id ) ";
        $total_amount_condition = " MedicalProductOrder.total_amount + MedicalProductOrder.refund_amount ";
        $total_login_account = " MedicalProductOrder.total_amount + MedicalProductOrder.refund_amount ";
        if (isset($searchData['rc'])) {
            $category = $searchData['rc'];
            $this->request->data['Search']['receipt_category'] = $category;
            if ($category == "OPD") {
                $condition .= " and  MedicalProductOrder.is_opd = 'Y'";
                $module_wise_condition .= " and  MedicalProductOrder.is_opd = 'Y'";
            } else if ($category == "IPD") {
                $condition .= " and  ( MedicalProductOrder.is_advance = 'Y' OR MedicalProductOrder.is_settlement = 'Y' OR  MedicalProductOrder.is_expense = 'Y' )";
                $module_wise_condition .= " and  ( MedicalProductOrder.is_advance = 'Y' OR MedicalProductOrder.is_settlement = 'Y' OR  MedicalProductOrder.is_expense = 'Y' )";
            } else if ($category == "LAB") {
                $condition .= " AND  MedicalProductOrder.lab_pharmacy_type = 'LAB' AND MedicalProductOrder.lab_pharmacy_user_id > 0 ";
                $module_wise_condition .= " AND  MedicalProductOrder.lab_pharmacy_type = 'LAB' AND MedicalProductOrder.lab_pharmacy_user_id > 0 ";
            } else if ($category == "PHARMACY") {
                $condition .= " AND  MedicalProductOrder.lab_pharmacy_type = 'PHARMACY' AND MedicalProductOrder.lab_pharmacy_user_id > 0 ";
                $module_wise_condition .= " AND  MedicalProductOrder.lab_pharmacy_type = 'PHARMACY' AND MedicalProductOrder.lab_pharmacy_user_id > 0 ";
            } else if ($category == "PACKAGE") {
                $condition .= " and  MedicalProductOrder.is_package = 'Y'";
                $module_wise_condition .= " and  MedicalProductOrder.is_package = 'Y'";
            } else if ($category == "OTHER") {
                $condition .= " and  MedicalProductOrder.patient_due_amount_id = 0 and MedicalProductOrder.is_opd = 'N' AND MedicalProductOrder.is_advance = 'N' AND  MedicalProductOrder.is_settlement = 'N' AND MedicalProductOrder.is_expense = 'N' ";
                $module_wise_condition .= " and  MedicalProductOrder.patient_due_amount_id = 0 and MedicalProductOrder.is_opd = 'N' AND MedicalProductOrder.is_advance = 'N' AND  MedicalProductOrder.is_settlement = 'N' AND MedicalProductOrder.is_expense = 'N' ";
            }else if ($category == "DUE_AMOUNT") {
                $condition .= " and  MedicalProductOrder.patient_due_amount_id > 0 ";
                $module_wise_condition .= " and  MedicalProductOrder.patient_due_amount_id > 0 ";
            }

        }
        if (isset($searchData['c'])) {
            $category = $searchData['c'];
            $this->request->data['Search']['category'] = $category;
            $condition .= " and  MedicalProduct.hospital_service_category_id = $category";
            $module_wise_condition .= " and  MedicalProduct.hospital_service_category_id = $category";
            $custom_field = " MedicalProductOrderDetail.total_amount ";
            $detail_total_amount_condition = " MedicalProductOrderDetail.total_amount ";
            $total_login_account = " MedicalProductOrderDetail.total_amount ";
            $custom_field_2 = " MedicalProductOrderDetail.total_amount ";
            $max_query = " and MedicalProductOrderDetail.id IN (select (mpod.id) from medical_product_order_details as mpod JOIN medical_products as mp on mp.id = mpod.medical_product_id and mp.hospital_service_category_id  = $category  ) ";




        }

        if (isset($searchData['a']) && !empty($searchData['a'])) {

            $this->request->data['Search']['address'] = $searchData['a'];
            $condition .= " and  MedicalProductOrder.appointment_address_id =" . $searchData['a'];
            $module_wise_condition .= " and  MedicalProductOrder.appointment_address_id =" . $searchData['a'];

        }

        if (isset($searchData['b'])) {
            $biller = $searchData['b'];
            $this->request->data['Search']['biller'] = $biller;
            $tmp = explode("#", $biller);
            if ($tmp[1] == "LAB" || $tmp[1] == "PHARMACY") {
                $condition .= " and  MedicalProductOrder.lab_pharmacy_user_id =" . $tmp[0];
                $module_wise_condition .= " and  MedicalProductOrder.lab_pharmacy_user_id =" . $tmp[0];
            } else {
                $condition .= " and  MedicalProductOrder.created_by_user_id =" . $tmp[0];
                $module_wise_condition .= " and  MedicalProductOrder.created_by_user_id =" . $tmp[0];
            }

        }

        if (isset($searchData['d'])) {
            $doctor = $searchData['d'];
            $this->request->data['Search']['doctor'] = $doctor;
            $condition .= " and ( MedicalProductOrderDetail.appointment_staff_id = $doctor OR  MedicalProductOrder.appointment_staff_id = $doctor ) ";
            $module_wise_condition .= " and ( MedicalProductOrderDetail.appointment_staff_id = $doctor OR  MedicalProductOrder.appointment_staff_id = $doctor ) ";
            $single_doctor_condition = " (SELECT GROUP_CONCAT(CONCAT(Doctor.NAME,'##',IFNULL(Department.NAME,''))) FROM appointment_staffs as Doctor left JOIN appointment_categories AS Department ON Department.id = Doctor.appointment_category_id WHERE  Doctor.id = MedicalProductOrderDetail.appointment_staff_id  ) as doctor_name";
            $detail_total_amount_condition = " MedicalProductOrderDetail.total_amount ";
            //$max_query = " and MedicalProductOrderDetail.id = (select max(mpod.id) from medical_product_order_details as mpod where mpod.medical_product_order_id = MedicalProductOrder.id AND mpod.appointment_staff_id = $doctor  ) ";
            $max_query = "";
            $total_amount_condition = " MedicalProductOrderDetail.total_amount ";
            $total_login_account = " MedicalProductOrderDetail.total_amount + MedicalProductOrderDetail.refund_amount ";
            $custom_field_2 = " MedicalProductOrderDetail.total_amount ";

        }




        if (isset($searchData['s'])) {
            $service = $searchData['s'];
            $this->request->data['Search']['service'] = $service;
            $condition .= "  and MedicalProductOrderDetail.medical_product_id = $service";
            $module_wise_condition .= "  and MedicalProductOrderDetail.medical_product_id = $service";

            $total_amount_condition = $detail_total_amount_condition = " MedicalProductOrderDetail.total_amount ";
            $total_login_account = " MedicalProductOrderDetail.total_amount + MedicalProductOrderDetail.refund_amount ";
            $max_query = " and MedicalProductOrderDetail.id = (select max(mpod.id) from medical_product_order_details as mpod where mpod.medical_product_order_id = MedicalProductOrder.id AND mpod.medical_product_id = $service  ) ";
            $custom_field_2 = " MedicalProductOrderDetail.total_amount ";

            $custom_filter = "";



        }

        if (isset($searchData['u'])) {
            $uhid = $searchData['u'];
            $this->request->data['Search']['uhid'] = $uhid;
            $condition .= " and  ( AppointmentCustomer.uhid like '%$uhid%' OR Children.uhid like '%$uhid%') ";
            $module_wise_condition .= " and  ( AppointmentCustomer.uhid like '%$uhid%' OR Children.uhid like '%$uhid%') ";

        }

        if (isset($searchData['n'])) {
            $name = $searchData['n'];
            $this->request->data['Search']['name'] = $name;
            $condition .= " and ( AppointmentCustomer.first_name like '%$name%' OR Children.child_name like '%$name%' ) ";
            $module_wise_condition .= " and ( AppointmentCustomer.first_name like '%$name%' OR Children.child_name like '%$name%' ) ";
        }



        if (isset($searchData['p'])) {
            $paymentType = $searchData['p'];
            $this->request->data['Search']['payment'] = $paymentType;
            if ($paymentType != '-1' && $paymentType == "PAY_BY_USER") {
                $condition .= "  and MedicalProductOrder.created_by_user_id = 0";
                $module_wise_condition .= "  and MedicalProductOrder.created_by_user_id = 0";
            } else if ($paymentType == '-1') {
                $condition .= "  and ( ( MedicalProductOrder.hospital_payment_type_id = 0 ) OR ( MedicalProductOrder.refund_payment_type_id = 0 and MedicalProductOrder.is_refunded = 'YES') ) and MedicalProductOrder.created_by_user_id != 0";
                $module_wise_condition .= "  and ( ( MedicalProductOrder.hospital_payment_type_id = 0 ) OR ( MedicalProductOrder.refund_payment_type_id = 0 and MedicalProductOrder.is_refunded = 'YES') ) and MedicalProductOrder.created_by_user_id != 0";
                $total_amount_condition = " IF( MedicalProductOrder.hospital_payment_type_id = 0 ,$total_amount_condition ,0) ";
            } else {
                $condition .= "  and ( ( MedicalProductOrder.hospital_payment_type_id = $paymentType )  ) ";
                $module_wise_condition .= "  and ( ( MedicalProductOrder.hospital_payment_type_id = $paymentType )  ) ";
                //  $condition .= "  and ( MedicalProductOrder.hospital_payment_type_id = $paymentType OR MedicalProductOrder.refund_payment_type_id = $paymentType ) ";
                $total_amount_condition = " IF( MedicalProductOrder.hospital_payment_type_id = $paymentType ,$total_amount_condition ,0) ";
            }
        }


        /*============Billing Summary By Receptionist==============*/


        $orderDetails = $detailUserData = $categoryData = $serviceData = array();
        $paymentCategoryData = array();
        if($report_for=='la'){
            //$query = "select GROUP_CONCAT(MedicalProductOrder.id) as order_ids, SUM(CASE WHEN MedicalProductOrder.payment_adjust_by_settlement ='N' AND MedicalProductOrder.is_advance ='Y' AND HospitalDepositAmount.status='ACTIVE' THEN HospitalDepositAmount.amount WHEN MedicalProductOrder.is_advance ='Y' AND HospitalDepositAmount.status='INACTIVE' AND MedicalProductOrder.payment_adjust_by_settlement ='N' THEN -HospitalDepositAmount.amount  WHEN MedicalProductOrder.is_settlement ='Y' AND HospitalIpdSettlement.payment_status='RECEIVED' AND MedicalProductOrder.payment_adjust_by_settlement ='N'  THEN HospitalIpdSettlement.settlement_amount WHEN MedicalProductOrder.is_settlement ='Y' AND HospitalIpdSettlement.payment_status='REFUND' AND MedicalProductOrder.payment_adjust_by_settlement ='N' THEN HospitalIpdSettlement.settlement_amount ELSE $total_login_account END )  as total, IFNULL(IFNULL(IFNULL(LabPharmacyUser.lab_name,LabPharmacyUser.lab_name),IFNULL(AppointmentStaff.name,User.username)),'')  as username, IFNULL(IFNULL(IFNULL(LabPharmacyUser.user_id,LabPharmacyUser.user_id),IFNULL(AppointmentStaff.user_id,User.id)),0)  as user_id from medical_product_orders as MedicalProductOrder left join medical_product_order_details as MedicalProductOrderDetail on MedicalProductOrderDetail.medical_product_order_id = MedicalProductOrder.id $max_query left join medical_products as MedicalProduct on MedicalProduct.id= MedicalProductOrderDetail.medical_product_id left join hospital_service_categories as HospitalServiceCategory on HospitalServiceCategory.id = MedicalProduct.hospital_service_category_id left join appointment_customers as AppointmentCustomer on AppointmentCustomer.id = MedicalProductOrder.appointment_customer_id  left join childrens as Children on Children.id=MedicalProductOrder.children_id  left join users as User on User.id = MedicalProductOrder.created_by_user_id left join appointment_staffs as AppointmentStaff on AppointmentStaff.user_id = MedicalProductOrder.created_by_user_id and AppointmentStaff.thinapp_id = MedicalProductOrder.thinapp_id and AppointmentStaff.status='ACTIVE' left join lab_pharmacy_users as LabPharmacyUser on LabPharmacyUser.id =MedicalProductOrder.lab_pharmacy_user_id left join hospital_ipd_settlements as HospitalIpdSettlement on HospitalIpdSettlement.id = MedicalProductOrder.hospital_ipd_settlement_id  left join hospital_deposit_amounts as HospitalDepositAmount on HospitalDepositAmount.id = MedicalProductOrder.hospital_deposit_amount_id  where  $condition  $custom_filter group by CONCAT(MedicalProductOrder.created_by_user_id,MedicalProductOrder.lab_pharmacy_user_id) having  username != ''";
        $query = "select GROUP_CONCAT(MedicalProductOrder.id) as order_ids, SUM(MedicalProductOrder.total_amount) as total, IFNULL(IFNULL(IFNULL(LabPharmacyUser.lab_name,LabPharmacyUser.lab_name),IFNULL(AppointmentStaff.name,User.username)),'')  as username, IFNULL(IFNULL(IFNULL(LabPharmacyUser.user_id,LabPharmacyUser.user_id),IFNULL(AppointmentStaff.user_id,User.id)),0)  as user_id from medical_product_orders as MedicalProductOrder left join medical_product_order_details as MedicalProductOrderDetail on MedicalProductOrderDetail.medical_product_order_id = MedicalProductOrder.id $max_query left join medical_products as MedicalProduct on MedicalProduct.id= MedicalProductOrderDetail.medical_product_id left join hospital_service_categories as HospitalServiceCategory on HospitalServiceCategory.id = MedicalProduct.hospital_service_category_id left join appointment_customers as AppointmentCustomer on AppointmentCustomer.id = MedicalProductOrder.appointment_customer_id  left join childrens as Children on Children.id=MedicalProductOrder.children_id  left join users as User on User.id = MedicalProductOrder.created_by_user_id left join appointment_staffs as AppointmentStaff on AppointmentStaff.user_id = MedicalProductOrder.created_by_user_id and AppointmentStaff.thinapp_id = MedicalProductOrder.thinapp_id and AppointmentStaff.status='ACTIVE' left join lab_pharmacy_users as LabPharmacyUser on LabPharmacyUser.id =MedicalProductOrder.lab_pharmacy_user_id left join hospital_ipd_settlements as HospitalIpdSettlement on HospitalIpdSettlement.id = MedicalProductOrder.hospital_ipd_settlement_id  left join hospital_deposit_amounts as HospitalDepositAmount on HospitalDepositAmount.id = MedicalProductOrder.hospital_deposit_amount_id  where  $condition  $custom_filter group by CONCAT(MedicalProductOrder.created_by_user_id,MedicalProductOrder.lab_pharmacy_user_id) having  username != ''";
            $connection = ConnectionUtil::getConnection();
            $user_collection = $connection->query($query);
            if ($user_collection->num_rows) {
                $detailUserData=array();
                $tmp_detail = mysqli_fetch_all($user_collection, MYSQLI_ASSOC);
                foreach($tmp_detail as $key => $value){
                    $value['username'] = trim($value['username']);
                    if(array_key_exists($value['username'],$detailUserData)){
                        $last_order_ids = explode(",",$detailUserData[$value['username']]['order_ids']);
                        $order_ids = explode(",",$value['order_ids']);
                        $last_order_ids = array_merge($last_order_ids,$order_ids);
                        $tmp=array();
                        $detailUserData[$value['username']]['order_ids'] = implode(",",$last_order_ids);
                        $detailUserData[$value['username']]['total'] = $detailUserData[$value['username']]['total'] +$value['total'];
                        $detailUserData[$value['username']]['username'] = $value['username'];
                    }else{
                        $detailUserData[$value['username']] =$value;
                    }
                }
                array_values($detailUserData);
            }

        }

        /* module wise collection list */
        if($report_for=='mw') {
            $query = "select SUM(CASE WHEN MedicalProductOrder.is_advance ='Y' AND HospitalDepositAmount.status='ACTIVE' THEN HospitalDepositAmount.amount WHEN MedicalProductOrder.is_advance ='Y' AND HospitalDepositAmount.status='INACTIVE' THEN -HospitalDepositAmount.amount  WHEN MedicalProductOrder.is_settlement ='Y' AND HospitalIpdSettlement.payment_status='RECEIVED' THEN HospitalIpdSettlement.settlement_amount WHEN MedicalProductOrder.is_settlement ='Y' AND HospitalIpdSettlement.payment_status='REFUND' THEN -HospitalIpdSettlement.settlement_amount ELSE $custom_field_2 END )  as total, ( CASE WHEN MedicalProductOrder.lab_pharmacy_user_id > 0 THEN MedicalProductOrder.lab_pharmacy_type WHEN MedicalProductOrder.is_opd='Y' THEN 'OPD' WHEN MedicalProductOrder.is_opd='N' AND ( MedicalProductOrder.is_settlement='Y' OR MedicalProductOrder.is_expense='Y' OR MedicalProductOrder.is_advance='Y') THEN 'IPD' WHEN  MedicalProductOrder.is_package= 'Y' THEN 'Package' ELSE 'Direct Billing' END )  as name from medical_product_orders as MedicalProductOrder left join medical_product_order_details as MedicalProductOrderDetail on MedicalProductOrderDetail.medical_product_order_id = MedicalProductOrder.id $max_query left join medical_products as MedicalProduct on MedicalProduct.id= MedicalProductOrderDetail.medical_product_id left join hospital_service_categories as HospitalServiceCategory on HospitalServiceCategory.id = MedicalProduct.hospital_service_category_id left join appointment_customers as AppointmentCustomer on AppointmentCustomer.id = MedicalProductOrder.appointment_customer_id  left join childrens as Children on Children.id=MedicalProductOrder.children_id  left join users as User on User.id = MedicalProductOrder.created_by_user_id left join appointment_staffs as AppointmentStaff on AppointmentStaff.user_id = MedicalProductOrder.created_by_user_id and AppointmentStaff.thinapp_id = MedicalProductOrder.thinapp_id and AppointmentStaff.status='ACTIVE' left join lab_pharmacy_users as LabPharmacyUser on LabPharmacyUser.id =MedicalProductOrder.lab_pharmacy_user_id left join hospital_ipd_settlements as HospitalIpdSettlement on HospitalIpdSettlement.id = MedicalProductOrder.hospital_ipd_settlement_id  left join hospital_deposit_amounts as HospitalDepositAmount on HospitalDepositAmount.id = MedicalProductOrder.hospital_deposit_amount_id  where  $condition  $custom_filter group by  name";
            $connection = ConnectionUtil::getConnection();
            $user_collection = $connection->query($query);
            if ($user_collection->num_rows) {
                $categoryData = mysqli_fetch_all($user_collection, MYSQLI_ASSOC);
            }
        }

        /* payment type wise collection list */
        if($report_for=='pt') {

            $query = "SELECT sum(result.amount) amount ,result.payment_type_name FROM (SELECT SUM(MedicalProductOrder.total_amount) as amount, MedicalProductOrder.payment_type_name from medical_product_orders as MedicalProductOrder LEFT JOIN hospital_payment_types AS HospitalPaymentType ON MedicalProductOrder.hospital_payment_type_id = HospitalPaymentType.id left join medical_product_order_details as MedicalProductOrderDetail on MedicalProductOrderDetail.medical_product_order_id = MedicalProductOrder.id and MedicalProductOrderDetail.id = (select max(mpod.id) from medical_product_order_details as mpod where mpod.medical_product_order_id = MedicalProductOrder.id ) left join medical_products as MedicalProduct on MedicalProduct.id= MedicalProductOrderDetail.medical_product_id left join hospital_service_categories as HospitalServiceCategory on HospitalServiceCategory.id = MedicalProduct.hospital_service_category_id left join appointment_customers as AppointmentCustomer on AppointmentCustomer.id = MedicalProductOrder.appointment_customer_id left join childrens as Children on Children.id=MedicalProductOrder.children_id left join users as User on User.id = MedicalProductOrder.created_by_user_id left join appointment_staffs as AppointmentStaff on AppointmentStaff.user_id = MedicalProductOrder.created_by_user_id and AppointmentStaff.thinapp_id = MedicalProductOrder.thinapp_id and AppointmentStaff.status='ACTIVE' left join lab_pharmacy_users as LabPharmacyUser on LabPharmacyUser.id =MedicalProductOrder.lab_pharmacy_user_id left join hospital_ipd_settlements as HospitalIpdSettlement on HospitalIpdSettlement.id = MedicalProductOrder.hospital_ipd_settlement_id left join hospital_deposit_amounts as HospitalDepositAmount on HospitalDepositAmount.id = MedicalProductOrder.hospital_deposit_amount_id where $condition  $custom_filter  group by MedicalProductOrder.id, MedicalProductOrder.hospital_payment_type_id) AS result group by result.payment_type_name";

            $connection = ConnectionUtil::getConnection();
            $user_collection = $connection->query($query);
            if ($user_collection->num_rows) {
                $paymentCategoryData = mysqli_fetch_all($user_collection, MYSQLI_ASSOC);
            }
        }


        /* service wise collection list */
        if($report_for=='scw') {
            $query = "select  SUM(MedicalProductOrderDetail.total_amount) as total, IF(MedicalProductOrderDetail.service ='OPD','OPD',HospitalServiceCategory.name) as name from medical_product_orders as MedicalProductOrder left join medical_product_order_details as MedicalProductOrderDetail on MedicalProductOrderDetail.medical_product_order_id = MedicalProductOrder.id  left join medical_products as MedicalProduct on MedicalProduct.id= MedicalProductOrderDetail.medical_product_id left join hospital_service_categories as HospitalServiceCategory on HospitalServiceCategory.id = MedicalProduct.hospital_service_category_id left join appointment_customers as AppointmentCustomer on AppointmentCustomer.id = MedicalProductOrder.appointment_customer_id  left join childrens as Children on Children.id=MedicalProductOrder.children_id  left join users as User on User.id = MedicalProductOrder.created_by_user_id left join appointment_staffs as AppointmentStaff on AppointmentStaff.user_id = MedicalProductOrder.created_by_user_id and AppointmentStaff.thinapp_id = MedicalProductOrder.thinapp_id and AppointmentStaff.status='ACTIVE' left join lab_pharmacy_users as LabPharmacyUser on LabPharmacyUser.id =MedicalProductOrder.lab_pharmacy_user_id left join hospital_ipd_settlements as HospitalIpdSettlement on HospitalIpdSettlement.id = MedicalProductOrder.hospital_ipd_settlement_id AND ( (MedicalProductOrder.payment_adjust_by_settlement ='Y') OR (MedicalProductOrder.is_settlement ='Y' and HospitalIpdSettlement.payment_status='RECEIVED')) left join hospital_deposit_amounts as HospitalDepositAmount on HospitalDepositAmount.id = MedicalProductOrder.hospital_deposit_amount_id  where  $module_wise_condition   group by name having name is not null and total is not null order by MedicalProduct.id asc";
            $connection = ConnectionUtil::getConnection();
            $user_collection = $connection->query($query);
            if ($user_collection->num_rows) {
                $serviceData = mysqli_fetch_all($user_collection, MYSQLI_ASSOC);
            }
        }


        if($report_for=='rob') {
            $custom_fields = "IFNULL(AppointmentCustomer.field1,Children.field1) as field1, IFNULL(AppointmentCustomer.field2,Children.field2) as field2,IFNULL(AppointmentCustomer.field3,Children.field3) as field3,IFNULL(AppointmentCustomer.field4,Children.field4) as field4,IFNULL(AppointmentCustomer.field5,Children.field5) as field5,IFNULL(AppointmentCustomer.field6,Children.field6) as field6";
             $unique_id = "(SELECT CONCAT(DATE_FORMAT(`MedicalProductOrder`.`created`,'%d%m%y'),COUNT(`id`)) FROM `medical_product_orders` AS `order` WHERE  DATE(`order`.`created`) = DATE(`MedicalProductOrder`.`created`) AND `order`.`id` <= `MedicalProductOrder`.`id` AND `order`.`thinapp_id` = `MedicalProductOrder`.`thinapp_id` AND `order`.`is_expense` = 'N') AS `unique_id`";
            $unique_id = " MedicalProductOrder.receipt_id AS `unique_id`";
            $query = "select MedicalProductOrder.refund_payment_type_id, AppointmentCustomerStaffService.booking_validity_attempt,  IFNULL(IF(AppointmentCustomer.dob !='0000-00-00' and  AppointmentCustomer.dob IS NOT NULL,AppointmentCustomer.dob,AppointmentCustomer.age),Children.dob) as age, IFNULL(AppointmentCustomer.parents_name,Children.parents_name) as parents_name, IFNULL(AppointmentCustomer.email,Children.email) as email, $custom_fields, IFNULL(AppointmentCustomer.field1,Children.field1) as field1, IF( (SELECT pda.id FROM patient_due_amounts AS pda WHERE MedicalProductOrder.id = pda.medical_product_order_id AND pda.settlement_by_order_id != MedicalProductOrder.id and pda.settlement_by_order_id > 0 limit 1) IS NOT NULL,'YES','NO') as due_amount_settled, MedicalProductOrder.patient_due_amount_id,  MedicalProductOrderDetail.total_amount AS total_paid, AppointmentCustomer.conceive_date, AppointmentCustomer.expected_date, AppointmentCustomerStaffService.refund_reason, MedicalProductOrder.refund_amount, $single_doctor_condition, MedicalProductOrder.is_package, MedicalProductOrder.lab_pharmacy_user_id, MedicalProductOrder.lab_pharmacy_type, HospitalIpdSettlement.payable_amount, (select GROUP_CONCAT( CONCAT(mp.name, ' #', mpod.total_amount, 'RS/-'),'<br>') FROM medical_product_order_details AS mpod JOIN medical_product_orders AS mpo ON mpo.id = mpod.medical_product_order_id LEFT JOIN medical_products AS mp ON mp.id = mpod.medical_product_id WHERE mpod.medical_product_order_id = MedicalProductOrder.id) as service_name, $unique_id, HospitalDepositAmount.status as advance_status, MedicalProductOrder.id, MedicalProductOrder.appointment_customer_staff_service_id, HospitalIpdSettlement.payment_status as settlement_payment_status, MedicalProductOrder.is_opd, MedicalProductOrder.is_advance, MedicalProductOrder.is_settlement,MedicalProductOrder.is_expense,   MedicalProductOrder.id, CONCAT(IFNULL(AppointmentCustomer.title,Children.title),' ',IFNULL(AppointmentCustomer.first_name,Children.child_name))  as patient_name, IFNULL(AppointmentCustomer.mobile,Children.mobile) as patient_mobile, IFNULL(AppointmentCustomer.address,Children.address) as patient_address, IFNULL(AppointmentCustomer.uhid,Children.uhid) as uhid, DATE_FORMAT(MedicalProductOrder.created,'%d/%m/%Y %h:%i %p') as date, IFNULL(HospitalPaymentType.name,'Cash') as payment_type_name,  MedicalProductOrder.payment_description, MedicalProductOrder.payment_status, IF(MedicalProductOrder.is_advance='Y',HospitalDepositAmount.remark,IFNULL(HospitalIpdSettlement.remark,AppointmentCustomerStaffService.notes)) AS notes, AppointmentCustomerStaffService.reason_of_appointment, SUM(CASE WHEN MedicalProductOrder.is_settlement='Y' THEN  HospitalIpdSettlement.settlement_amount  WHEN MedicalProductOrder.is_advance='Y'  THEN ( HospitalDepositAmount.amount + HospitalDepositAmount.discount ) ELSE $detail_total_amount_condition END) AS total_amount, SUM(IFNULL(MedicalProductOrderDetail.tax_amount,0)) as total_tax,IFNULL(IFNULL(IFNULL(LabPharmacyUser.lab_name,LabPharmacyUser.lab_name),IFNULL(AppointmentStaff.name,User.username)),'')  as biller  from medical_product_orders as MedicalProductOrder left join hospital_payment_types as HospitalPaymentType on HospitalPaymentType.id = MedicalProductOrder.hospital_payment_type_id left join medical_product_order_details as MedicalProductOrderDetail on MedicalProductOrderDetail.medical_product_order_id = MedicalProductOrder.id  $max_query left join medical_products as MedicalProduct on MedicalProduct.id= MedicalProductOrderDetail.medical_product_id  left join appointment_customers as AppointmentCustomer on AppointmentCustomer.id = MedicalProductOrder.appointment_customer_id  left join childrens as Children on Children.id=MedicalProductOrder.children_id  left join users as User on User.id = MedicalProductOrder.created_by_user_id left join appointment_staffs as AppointmentStaff on AppointmentStaff.user_id = MedicalProductOrder.created_by_user_id and AppointmentStaff.thinapp_id = MedicalProductOrder.thinapp_id and AppointmentStaff.status='ACTIVE' left join lab_pharmacy_users as LabPharmacyUser on LabPharmacyUser.id =MedicalProductOrder.lab_pharmacy_user_id left join hospital_deposit_amounts as HospitalDepositAmount on HospitalDepositAmount.id = MedicalProductOrder.hospital_deposit_amount_id  left join hospital_ipd_settlements as HospitalIpdSettlement on HospitalIpdSettlement.id = MedicalProductOrder.hospital_ipd_settlement_id and MedicalProductOrder.is_expense = 'N'  left join appointment_customer_staff_services as AppointmentCustomerStaffService on AppointmentCustomerStaffService.id = MedicalProductOrder.appointment_customer_staff_service_id  WHERE $condition $custom_filter  group by MedicalProductOrder.id order by MedicalProductOrder.created desc";
        
        

            $connection = ConnectionUtil::getConnection();
            $user_collection = $connection->query($query);
            if ($user_collection->num_rows) {
                $orderDetails = mysqli_fetch_all($user_collection, MYSQLI_ASSOC);
            }
        }


        $titleRS = $connection->query($titleQuery);
        $orderData = mysqli_fetch_assoc($titleRS);
        $thinappName = ($orderData['report_title'] == '')?$login1['Thinapp']['name']:$orderData['report_title'];
        $thinappName .= '( '.$this->request->data['Search']['from_date'].' - '.$this->request->data['Search']['to_date'].' )';
        $this->set(array('date_message'=>$date_message,'report_for'=>$report_for,'paymentCategoryData'=>$paymentCategoryData,'thinappName'=>$thinappName,'detailUserData' => $detailUserData, 'categoryData' => $categoryData, 'orderDetails' => $orderDetails, 'serviceData' => $serviceData));
    }

	public function get_hospital_receipt_reports()
    {

    
        $this->layout = "app_admin_home";

        $login = $this->Session->read('Auth.User.User');
        $login1 = $this->Session->read('Auth.User');
        $thinappID = $login['thinapp_id'];
        $today = date("Y-m-d");
        $date_message = "";

        $condition = $module_wise_condition = " MedicalProductOrder.thinapp_id = $thinappID and MedicalProductOrder.payment_status ='PAID' and MedicalProductOrder.status ='ACTIVE' ";
        $custom_filter = " AND MedicalProductOrder.payment_adjust_by_settlement = 'N'";

        if ($login1['USER_ROLE'] == "LAB" || $login1['USER_ROLE'] == "PHARMACY") {

            $titleQuery = "SELECT `report_title` FROM `lab_pharmacy_users` WHERE `id` = '".$login1['LabPharmacyUser']['id']."' LIMIT 1";

            $condition .= " and  MedicalProductOrder.lab_pharmacy_user_id =" . $login1['LabPharmacyUser']['id'];
            $module_wise_condition .= " and  MedicalProductOrder.lab_pharmacy_user_id =" . $login1['LabPharmacyUser']['id'];
        } else if ($login1['USER_ROLE'] != 'ADMIN') {
            $titleQuery = "SELECT `report_title` FROM `thinapps` WHERE `id` = '".$thinappID."' LIMIT 1";
            $condition .= " and  MedicalProductOrder.created_by_user_id =" . $login['id'];
            $module_wise_condition .= " and  MedicalProductOrder.created_by_user_id =" . $login['id'];
        }
        else
        {
            $titleQuery = "SELECT `report_title` FROM `thinapps` WHERE `id` = '".$thinappID."' LIMIT 1";
        }

        $searchData = $this->request->query;
        $module_wise_date = "";
        $report_for = '';
        if (!empty($searchData['rf'])) {
            $report_for = $searchData['rf'];
        }else{
            $report_for= 'la';
        }

        if (isset($searchData['f']) && !empty($searchData['f']) && !empty($searchData['t']) && isset($searchData['t'])) {

            $this->request->data['Search']['from_date'] = $searchData['f'];
            $from_date = DateTime::createFromFormat('d/m/Y', $searchData['f'])->format('Y-m-d');
            $this->request->data['Search']['to_date'] = $searchData['t'];
            $to_date = DateTime::createFromFormat('d/m/Y', $searchData['t'])->format('Y-m-d');
            $diff=date_diff(date_create($from_date),date_create($to_date));
            $diff = $diff->format("%R%a");
            if( ($diff > 366 && $thinappID==494 ) || ($diff > 63 && $thinappID!=494 )){
                if($thinappID==494){
                    $date_message = "You can not search more than one year of report at once";
                }else{
                    $date_message = "You can not search more than two months of report at once";
                }
                
            
                $today  = date("d/m/Y");
                $search_today =  $from_date = $to_date = date("Y-m-d");
                $this->request->data['Search']['to_date'] = $this->request->data['Search']['from_date'] = $today;
                $condition .= " and  DATE(MedicalProductOrder.created) BETWEEN '$search_today' and '$search_today'";
            }else{
                $condition .= " and  DATE(MedicalProductOrder.created) BETWEEN '$from_date' and '$to_date' ";
            }
            $module_wise_condition .= " and  ( ( DATE(MedicalProductOrder.created) BETWEEN '$from_date' and '$to_date') OR ( DATE(HospitalIpdSettlement.created) BETWEEN '$from_date' and '$to_date' ) ) ";


        } else {
            $today  = date("d/m/Y");
            $search_today =  $from_date = $to_date = date("Y-m-d");
            $this->request->data['Search']['to_date'] = $this->request->data['Search']['from_date'] = $today;
            $condition .= " and  DATE(MedicalProductOrder.created) BETWEEN '$search_today' and '$search_today'";
            $module_wise_condition .= " and  ( ( DATE(MedicalProductOrder.created) BETWEEN '$search_today' and '$search_today') OR ( DATE(HospitalIpdSettlement.created) BETWEEN '$search_today' and '$search_today' ) ) ";

        }


        $custom_field = " MedicalProductOrder.total_amount + MedicalProduct.refund_amount ";
        $custom_field_2 = " MedicalProductOrder.total_amount ";

        $single_doctor_condition = " (SELECT GROUP_CONCAT(CONCAT(Doctor.NAME,'##',IFNULL(Department.NAME,''))) FROM appointment_staffs as Doctor left JOIN appointment_categories AS Department ON Department.id = Doctor.appointment_category_id WHERE Doctor.id IN (SELECT (mpod.appointment_staff_id) FROM medical_product_order_details AS mpod WHERE mpod.medical_product_order_id = MedicalProductOrder.id )   ) as doctor_name ";

        $detail_total_amount_condition = " MedicalProductOrder.total_amount ";


        $max_query = " and MedicalProductOrderDetail.id = (select max(mpod.id) from medical_product_order_details as mpod where mpod.medical_product_order_id = MedicalProductOrder.id ) ";
        $max_query_archive = " and MedicalProductOrderDetail.id = (select max(mpod.id) from medical_product_order_details_archive as mpod where mpod.medical_product_order_id = MedicalProductOrder.id ) ";
        $total_amount_condition = " MedicalProductOrder.total_amount + MedicalProductOrder.refund_amount ";
        $total_login_account = " MedicalProductOrder.total_amount + MedicalProductOrder.refund_amount ";
        if (isset($searchData['rc'])) {
            $category = $searchData['rc'];
            $this->request->data['Search']['receipt_category'] = $category;
            if ($category == "OPD") {
                $condition .= " and  MedicalProductOrder.is_opd = 'Y'";
                $module_wise_condition .= " and  MedicalProductOrder.is_opd = 'Y'";
            } else if ($category == "IPD") {
                $condition .= " and  ( MedicalProductOrder.is_advance = 'Y' OR MedicalProductOrder.is_settlement = 'Y' OR  MedicalProductOrder.is_expense = 'Y' )";
                $module_wise_condition .= " and  ( MedicalProductOrder.is_advance = 'Y' OR MedicalProductOrder.is_settlement = 'Y' OR  MedicalProductOrder.is_expense = 'Y' )";
            } else if ($category == "LAB") {
                $condition .= " AND  MedicalProductOrder.lab_pharmacy_type = 'LAB' AND MedicalProductOrder.lab_pharmacy_user_id > 0 ";
                $module_wise_condition .= " AND  MedicalProductOrder.lab_pharmacy_type = 'LAB' AND MedicalProductOrder.lab_pharmacy_user_id > 0 ";
            } else if ($category == "PHARMACY") {
                $condition .= " AND  MedicalProductOrder.lab_pharmacy_type = 'PHARMACY' AND MedicalProductOrder.lab_pharmacy_user_id > 0 ";
                $module_wise_condition .= " AND  MedicalProductOrder.lab_pharmacy_type = 'PHARMACY' AND MedicalProductOrder.lab_pharmacy_user_id > 0 ";
            } else if ($category == "PACKAGE") {
                $condition .= " and  MedicalProductOrder.is_package = 'Y'";
                $module_wise_condition .= " and  MedicalProductOrder.is_package = 'Y'";
            } else if ($category == "OTHER") {
                $condition .= " and  MedicalProductOrder.patient_due_amount_id = 0 and MedicalProductOrder.is_opd = 'N' AND MedicalProductOrder.is_advance = 'N' AND  MedicalProductOrder.is_settlement = 'N' AND MedicalProductOrder.is_expense = 'N' ";
                $module_wise_condition .= " and  MedicalProductOrder.patient_due_amount_id = 0 and MedicalProductOrder.is_opd = 'N' AND MedicalProductOrder.is_advance = 'N' AND  MedicalProductOrder.is_settlement = 'N' AND MedicalProductOrder.is_expense = 'N' ";
            }else if ($category == "DUE_AMOUNT") {
                $condition .= " and  MedicalProductOrder.patient_due_amount_id > 0 ";
                $module_wise_condition .= " and  MedicalProductOrder.patient_due_amount_id > 0 ";
            }

        }
        if (isset($searchData['c'])) {
            $category = $searchData['c'];
            $this->request->data['Search']['category'] = $category;
            $condition .= " and  MedicalProduct.hospital_service_category_id = $category";
            $module_wise_condition .= " and  MedicalProduct.hospital_service_category_id = $category";
            $custom_field = " MedicalProductOrderDetail.total_amount ";
            $detail_total_amount_condition = " MedicalProductOrderDetail.total_amount ";
            $total_login_account = " MedicalProductOrderDetail.total_amount ";
            $custom_field_2 = " MedicalProductOrderDetail.total_amount ";
            $max_query = " and MedicalProductOrderDetail.id IN (select (mpod.id) from medical_product_order_details as mpod JOIN medical_products as mp on mp.id = mpod.medical_product_id and mp.hospital_service_category_id  = $category  ) ";
            $max_query_archive = " and MedicalProductOrderDetail.id IN (select (mpod.id) from medical_product_order_details_archive as mpod JOIN medical_products as mp on mp.id = mpod.medical_product_id and mp.hospital_service_category_id  = $category  ) ";




        }

        if (isset($searchData['a']) && !empty($searchData['a'])) {

            $this->request->data['Search']['address'] = $searchData['a'];
            $condition .= " and  MedicalProductOrder.appointment_address_id =" . $searchData['a'];
            $module_wise_condition .= " and  MedicalProductOrder.appointment_address_id =" . $searchData['a'];

        }

        if (isset($searchData['b'])) {
            $biller = $searchData['b'];
            $this->request->data['Search']['biller'] = $biller;
            $tmp = explode("#", $biller);
            if ($tmp[1] == "LAB" || $tmp[1] == "PHARMACY") {
                $condition .= " and  MedicalProductOrder.lab_pharmacy_user_id =" . $tmp[0];
                $module_wise_condition .= " and  MedicalProductOrder.lab_pharmacy_user_id =" . $tmp[0];
            } else {
                $condition .= " and  MedicalProductOrder.created_by_user_id =" . $tmp[0];
                $module_wise_condition .= " and  MedicalProductOrder.created_by_user_id =" . $tmp[0];
            }

        }

        if (isset($searchData['d'])) {
            $doctor = $searchData['d'];
            $this->request->data['Search']['doctor'] = $doctor;
            $condition .= " and ( MedicalProductOrderDetail.appointment_staff_id = $doctor OR  MedicalProductOrder.appointment_staff_id = $doctor ) ";
            $module_wise_condition .= " and ( MedicalProductOrderDetail.appointment_staff_id = $doctor OR  MedicalProductOrder.appointment_staff_id = $doctor ) ";
            $single_doctor_condition = " (SELECT GROUP_CONCAT(CONCAT(Doctor.NAME,'##',IFNULL(Department.NAME,''))) FROM appointment_staffs as Doctor left JOIN appointment_categories AS Department ON Department.id = Doctor.appointment_category_id WHERE  Doctor.id = MedicalProductOrderDetail.appointment_staff_id  ) as doctor_name";
            $detail_total_amount_condition = " MedicalProductOrderDetail.total_amount ";
            //$max_query = " and MedicalProductOrderDetail.id = (select max(mpod.id) from medical_product_order_details as mpod where mpod.medical_product_order_id = MedicalProductOrder.id AND mpod.appointment_staff_id = $doctor  ) ";
            $max_query = $max_query_archive = "";
            $total_amount_condition = " MedicalProductOrderDetail.total_amount ";
            $total_login_account = " MedicalProductOrderDetail.total_amount + MedicalProductOrderDetail.refund_amount ";
            $custom_field_2 = " MedicalProductOrderDetail.total_amount ";

        }




        if (isset($searchData['s'])) {
            $service = $searchData['s'];
            $this->request->data['Search']['service'] = $service;
            $condition .= "  and MedicalProductOrderDetail.medical_product_id = $service";
            $module_wise_condition .= "  and MedicalProductOrderDetail.medical_product_id = $service";

            $total_amount_condition = $detail_total_amount_condition = " MedicalProductOrderDetail.total_amount ";
            $total_login_account = " MedicalProductOrderDetail.total_amount + MedicalProductOrderDetail.refund_amount ";
            $max_query = " and MedicalProductOrderDetail.id = (select max(mpod.id) from medical_product_order_details as mpod where mpod.medical_product_order_id = MedicalProductOrder.id AND mpod.medical_product_id = $service  ) ";
            $max_query_archive = " and MedicalProductOrderDetail.id = (select max(mpod.id) from medical_product_order_details_archive as mpod where mpod.medical_product_order_id = MedicalProductOrder.id AND mpod.medical_product_id = $service  ) ";
            $custom_field_2 = " MedicalProductOrderDetail.total_amount ";

            $custom_filter = "";



        }

        if (isset($searchData['u'])) {
            $uhid = $searchData['u'];
            $this->request->data['Search']['uhid'] = $uhid;
            $condition .= " and  ( AppointmentCustomer.uhid like '%$uhid%' OR Children.uhid like '%$uhid%') ";
            $module_wise_condition .= " and  ( AppointmentCustomer.uhid like '%$uhid%' OR Children.uhid like '%$uhid%') ";

        }

        if (isset($searchData['n'])) {
            $name = $searchData['n'];
            $this->request->data['Search']['name'] = $name;
            $condition .= " and ( AppointmentCustomer.first_name like '%$name%' OR Children.child_name like '%$name%' ) ";
            $module_wise_condition .= " and ( AppointmentCustomer.first_name like '%$name%' OR Children.child_name like '%$name%' ) ";
        }



        if (isset($searchData['p'])) {
            $paymentType = $searchData['p'];
            $this->request->data['Search']['payment'] = $paymentType;
            if ($paymentType != '-1' && $paymentType == "PAY_BY_USER") {
                $condition .= "  and MedicalProductOrder.created_by_user_id = 0";
                $module_wise_condition .= "  and MedicalProductOrder.created_by_user_id = 0";
            } else if ($paymentType == '-1') {
                $condition .= "  and ( ( MedicalProductOrder.hospital_payment_type_id = 0 ) OR ( MedicalProductOrder.refund_payment_type_id = 0 and MedicalProductOrder.is_refunded = 'YES') ) and MedicalProductOrder.created_by_user_id != 0";
                $module_wise_condition .= "  and ( ( MedicalProductOrder.hospital_payment_type_id = 0 ) OR ( MedicalProductOrder.refund_payment_type_id = 0 and MedicalProductOrder.is_refunded = 'YES') ) and MedicalProductOrder.created_by_user_id != 0";
                $total_amount_condition = " IF( MedicalProductOrder.hospital_payment_type_id = 0 ,$total_amount_condition ,0) ";
            } else {
                $condition .= "  and ( ( MedicalProductOrder.hospital_payment_type_id = $paymentType )  ) ";
                $module_wise_condition .= "  and ( ( MedicalProductOrder.hospital_payment_type_id = $paymentType )  ) ";
                //  $condition .= "  and ( MedicalProductOrder.hospital_payment_type_id = $paymentType OR MedicalProductOrder.refund_payment_type_id = $paymentType ) ";
                $total_amount_condition = " IF( MedicalProductOrder.hospital_payment_type_id = $paymentType ,$total_amount_condition ,0) ";
            }
        }


        /*============Billing Summary By Receptionist==============*/


        $orderDetails = $detailUserData = $categoryData = $serviceData = array();
        $paymentCategoryData = array();
        if($report_for=='la'){
            $query = "select GROUP_CONCAT(final.order_ids) as order_ids, SUM(final.total) as total, final.username, final.user_id from ( ";
            $query .= "select GROUP_CONCAT(MedicalProductOrder.id) as order_ids, SUM(MedicalProductOrder.total_amount) as total, IFNULL(IFNULL(IFNULL(LabPharmacyUser.lab_name,LabPharmacyUser.lab_name),IFNULL(AppointmentStaff.name,User.username)),'')  as username, IFNULL(IFNULL(IFNULL(LabPharmacyUser.user_id,LabPharmacyUser.user_id),IFNULL(AppointmentStaff.user_id,User.id)),0)  as user_id from medical_product_orders as MedicalProductOrder left join medical_product_order_details as MedicalProductOrderDetail on MedicalProductOrderDetail.medical_product_order_id = MedicalProductOrder.id $max_query left join medical_products as MedicalProduct on MedicalProduct.id= MedicalProductOrderDetail.medical_product_id left join hospital_service_categories as HospitalServiceCategory on HospitalServiceCategory.id = MedicalProduct.hospital_service_category_id left join appointment_customers as AppointmentCustomer on AppointmentCustomer.id = MedicalProductOrder.appointment_customer_id  left join childrens as Children on Children.id=MedicalProductOrder.children_id  left join users as User on User.id = MedicalProductOrder.created_by_user_id left join appointment_staffs as AppointmentStaff on AppointmentStaff.user_id = MedicalProductOrder.created_by_user_id and AppointmentStaff.thinapp_id = MedicalProductOrder.thinapp_id and AppointmentStaff.status='ACTIVE' left join lab_pharmacy_users as LabPharmacyUser on LabPharmacyUser.id =MedicalProductOrder.lab_pharmacy_user_id left join hospital_ipd_settlements as HospitalIpdSettlement on HospitalIpdSettlement.id = MedicalProductOrder.hospital_ipd_settlement_id  left join hospital_deposit_amounts as HospitalDepositAmount on HospitalDepositAmount.id = MedicalProductOrder.hospital_deposit_amount_id  where  $condition  $custom_filter group by CONCAT(MedicalProductOrder.created_by_user_id,MedicalProductOrder.lab_pharmacy_user_id) having  username != ''";
            $query .= " UNION ALL ";
            $query .= "select GROUP_CONCAT(MedicalProductOrder.id) as order_ids, SUM(MedicalProductOrder.total_amount) as total, IFNULL(IFNULL(IFNULL(LabPharmacyUser.lab_name,LabPharmacyUser.lab_name),IFNULL(AppointmentStaff.name,User.username)),'')  as username, IFNULL(IFNULL(IFNULL(LabPharmacyUser.user_id,LabPharmacyUser.user_id),IFNULL(AppointmentStaff.user_id,User.id)),0)  as user_id from medical_product_orders_archive as MedicalProductOrder left join medical_product_order_details_archive as MedicalProductOrderDetail on MedicalProductOrderDetail.medical_product_order_id = MedicalProductOrder.id $max_query_archive left join medical_products as MedicalProduct on MedicalProduct.id= MedicalProductOrderDetail.medical_product_id left join hospital_service_categories as HospitalServiceCategory on HospitalServiceCategory.id = MedicalProduct.hospital_service_category_id left join appointment_customers as AppointmentCustomer on AppointmentCustomer.id = MedicalProductOrder.appointment_customer_id  left join childrens as Children on Children.id=MedicalProductOrder.children_id  left join users as User on User.id = MedicalProductOrder.created_by_user_id left join appointment_staffs as AppointmentStaff on AppointmentStaff.user_id = MedicalProductOrder.created_by_user_id and AppointmentStaff.thinapp_id = MedicalProductOrder.thinapp_id and AppointmentStaff.status='ACTIVE' left join lab_pharmacy_users as LabPharmacyUser on LabPharmacyUser.id =MedicalProductOrder.lab_pharmacy_user_id left join hospital_ipd_settlements as HospitalIpdSettlement on HospitalIpdSettlement.id = MedicalProductOrder.hospital_ipd_settlement_id  left join hospital_deposit_amounts as HospitalDepositAmount on HospitalDepositAmount.id = MedicalProductOrder.hospital_deposit_amount_id  where  $condition  $custom_filter group by CONCAT(MedicalProductOrder.created_by_user_id,MedicalProductOrder.lab_pharmacy_user_id) having  username != ''";
            $query .= " ) as final group by final.user_id ";

            $connection = ConnectionUtil::getConnection();
            $user_collection = $connection->query($query);
            if ($user_collection->num_rows) {
                $detailUserData=array();
                $tmp_detail = mysqli_fetch_all($user_collection, MYSQLI_ASSOC);
                foreach($tmp_detail as $key => $value){
                    $value['username'] = trim($value['username']);
                    if(array_key_exists($value['username'],$detailUserData)){
                        $last_order_ids = explode(",",$detailUserData[$value['username']]['order_ids']);
                        $order_ids = explode(",",$value['order_ids']);
                        $last_order_ids = array_merge($last_order_ids,$order_ids);
                        $tmp=array();
                        $detailUserData[$value['username']]['order_ids'] = implode(",",$last_order_ids);
                        $detailUserData[$value['username']]['total'] = $detailUserData[$value['username']]['total'] +$value['total'];
                        $detailUserData[$value['username']]['username'] = $value['username'];
                    }else{
                        $detailUserData[$value['username']] =$value;
                    }
                }
                array_values($detailUserData);
            }

        }

        /* module wise collection list */
        if($report_for=='mw') {
            $query = "select SUM(final.total)  as total, final.name  as name from ( ";
            $query .= "select SUM(CASE WHEN MedicalProductOrder.is_advance ='Y' AND HospitalDepositAmount.status='ACTIVE' THEN HospitalDepositAmount.amount WHEN MedicalProductOrder.is_advance ='Y' AND HospitalDepositAmount.status='INACTIVE' THEN -HospitalDepositAmount.amount  WHEN MedicalProductOrder.is_settlement ='Y' AND HospitalIpdSettlement.payment_status='RECEIVED' THEN HospitalIpdSettlement.settlement_amount WHEN MedicalProductOrder.is_settlement ='Y' AND HospitalIpdSettlement.payment_status='REFUND' THEN -HospitalIpdSettlement.settlement_amount ELSE $custom_field_2 END )  as total, ( CASE WHEN MedicalProductOrder.lab_pharmacy_user_id > 0 THEN MedicalProductOrder.lab_pharmacy_type WHEN MedicalProductOrder.is_opd='Y' THEN 'OPD' WHEN MedicalProductOrder.is_opd='N' AND ( MedicalProductOrder.is_settlement='Y' OR MedicalProductOrder.is_expense='Y' OR MedicalProductOrder.is_advance='Y') THEN 'IPD' WHEN  MedicalProductOrder.is_package= 'Y' THEN 'Package' ELSE 'Direct Billing' END )  as name from medical_product_orders as MedicalProductOrder left join medical_product_order_details as MedicalProductOrderDetail on MedicalProductOrderDetail.medical_product_order_id = MedicalProductOrder.id $max_query left join medical_products as MedicalProduct on MedicalProduct.id= MedicalProductOrderDetail.medical_product_id left join hospital_service_categories as HospitalServiceCategory on HospitalServiceCategory.id = MedicalProduct.hospital_service_category_id left join appointment_customers as AppointmentCustomer on AppointmentCustomer.id = MedicalProductOrder.appointment_customer_id  left join childrens as Children on Children.id=MedicalProductOrder.children_id  left join users as User on User.id = MedicalProductOrder.created_by_user_id left join appointment_staffs as AppointmentStaff on AppointmentStaff.user_id = MedicalProductOrder.created_by_user_id and AppointmentStaff.thinapp_id = MedicalProductOrder.thinapp_id and AppointmentStaff.status='ACTIVE' left join lab_pharmacy_users as LabPharmacyUser on LabPharmacyUser.id =MedicalProductOrder.lab_pharmacy_user_id left join hospital_ipd_settlements as HospitalIpdSettlement on HospitalIpdSettlement.id = MedicalProductOrder.hospital_ipd_settlement_id  left join hospital_deposit_amounts as HospitalDepositAmount on HospitalDepositAmount.id = MedicalProductOrder.hospital_deposit_amount_id  where  $condition  $custom_filter group by  name";
            $query .= " UNION ALL ";
            $query .= "select SUM(CASE WHEN MedicalProductOrder.is_advance ='Y' AND HospitalDepositAmount.status='ACTIVE' THEN HospitalDepositAmount.amount WHEN MedicalProductOrder.is_advance ='Y' AND HospitalDepositAmount.status='INACTIVE' THEN -HospitalDepositAmount.amount  WHEN MedicalProductOrder.is_settlement ='Y' AND HospitalIpdSettlement.payment_status='RECEIVED' THEN HospitalIpdSettlement.settlement_amount WHEN MedicalProductOrder.is_settlement ='Y' AND HospitalIpdSettlement.payment_status='REFUND' THEN -HospitalIpdSettlement.settlement_amount ELSE $custom_field_2 END )  as total, ( CASE WHEN MedicalProductOrder.lab_pharmacy_user_id > 0 THEN MedicalProductOrder.lab_pharmacy_type WHEN MedicalProductOrder.is_opd='Y' THEN 'OPD' WHEN MedicalProductOrder.is_opd='N' AND ( MedicalProductOrder.is_settlement='Y' OR MedicalProductOrder.is_expense='Y' OR MedicalProductOrder.is_advance='Y') THEN 'IPD' WHEN  MedicalProductOrder.is_package= 'Y' THEN 'Package' ELSE 'Direct Billing' END )  as name from medical_product_orders_archive as MedicalProductOrder left join medical_product_order_details_archive as MedicalProductOrderDetail on MedicalProductOrderDetail.medical_product_order_id = MedicalProductOrder.id $max_query_archive left join medical_products as MedicalProduct on MedicalProduct.id= MedicalProductOrderDetail.medical_product_id left join hospital_service_categories as HospitalServiceCategory on HospitalServiceCategory.id = MedicalProduct.hospital_service_category_id left join appointment_customers as AppointmentCustomer on AppointmentCustomer.id = MedicalProductOrder.appointment_customer_id  left join childrens as Children on Children.id=MedicalProductOrder.children_id  left join users as User on User.id = MedicalProductOrder.created_by_user_id left join appointment_staffs as AppointmentStaff on AppointmentStaff.user_id = MedicalProductOrder.created_by_user_id and AppointmentStaff.thinapp_id = MedicalProductOrder.thinapp_id and AppointmentStaff.status='ACTIVE' left join lab_pharmacy_users as LabPharmacyUser on LabPharmacyUser.id =MedicalProductOrder.lab_pharmacy_user_id left join hospital_ipd_settlements as HospitalIpdSettlement on HospitalIpdSettlement.id = MedicalProductOrder.hospital_ipd_settlement_id  left join hospital_deposit_amounts as HospitalDepositAmount on HospitalDepositAmount.id = MedicalProductOrder.hospital_deposit_amount_id  where  $condition  $custom_filter group by  name";
            $query .= " ) AS final group by  final.name";
            $connection = ConnectionUtil::getConnection();
            $user_collection = $connection->query($query);
            if ($user_collection->num_rows) {
                $categoryData = mysqli_fetch_all($user_collection, MYSQLI_ASSOC);
            }
        }

        /* payment type wise collection list */
        if($report_for=='pt') {
            $query = "SELECT sum(final.amount) amount ,final.payment_type_name FROM ( ";
            $query .= "SELECT sum(result.amount) amount ,result.payment_type_name FROM (SELECT  SUM(MedicalProductOrder.total_amount) as amount, MedicalProductOrder.payment_type_name from medical_product_orders as MedicalProductOrder LEFT JOIN hospital_payment_types AS HospitalPaymentType ON MedicalProductOrder.hospital_payment_type_id = HospitalPaymentType.id left join medical_product_order_details as MedicalProductOrderDetail on MedicalProductOrderDetail.medical_product_order_id = MedicalProductOrder.id and MedicalProductOrderDetail.id = (select max(mpod.id) from medical_product_order_details as mpod where mpod.medical_product_order_id = MedicalProductOrder.id ) left join medical_products as MedicalProduct on MedicalProduct.id= MedicalProductOrderDetail.medical_product_id left join hospital_service_categories as HospitalServiceCategory on HospitalServiceCategory.id = MedicalProduct.hospital_service_category_id left join appointment_customers as AppointmentCustomer on AppointmentCustomer.id = MedicalProductOrder.appointment_customer_id left join childrens as Children on Children.id=MedicalProductOrder.children_id left join users as User on User.id = MedicalProductOrder.created_by_user_id left join appointment_staffs as AppointmentStaff on AppointmentStaff.user_id = MedicalProductOrder.created_by_user_id and AppointmentStaff.thinapp_id = MedicalProductOrder.thinapp_id and AppointmentStaff.status='ACTIVE' left join lab_pharmacy_users as LabPharmacyUser on LabPharmacyUser.id =MedicalProductOrder.lab_pharmacy_user_id left join hospital_ipd_settlements as HospitalIpdSettlement on HospitalIpdSettlement.id = MedicalProductOrder.hospital_ipd_settlement_id left join hospital_deposit_amounts as HospitalDepositAmount on HospitalDepositAmount.id = MedicalProductOrder.hospital_deposit_amount_id where $condition  $custom_filter  group by MedicalProductOrder.id, MedicalProductOrder.hospital_payment_type_id) AS result group by result.payment_type_name";
            $query .= " UNION ALL ";
            $query .= "SELECT sum(result.amount) amount ,result.payment_type_name FROM (SELECT SUM(MedicalProductOrder.total_amount) as amount, MedicalProductOrder.payment_type_name from medical_product_orders_archive as MedicalProductOrder LEFT JOIN hospital_payment_types AS HospitalPaymentType ON MedicalProductOrder.hospital_payment_type_id = HospitalPaymentType.id left join medical_product_order_details as MedicalProductOrderDetail on MedicalProductOrderDetail.medical_product_order_id = MedicalProductOrder.id and MedicalProductOrderDetail.id = (select max(mpod.id) from medical_product_order_details_archive as mpod where mpod.medical_product_order_id = MedicalProductOrder.id ) left join medical_products as MedicalProduct on MedicalProduct.id= MedicalProductOrderDetail.medical_product_id left join hospital_service_categories as HospitalServiceCategory on HospitalServiceCategory.id = MedicalProduct.hospital_service_category_id left join appointment_customers as AppointmentCustomer on AppointmentCustomer.id = MedicalProductOrder.appointment_customer_id left join childrens as Children on Children.id=MedicalProductOrder.children_id left join users as User on User.id = MedicalProductOrder.created_by_user_id left join appointment_staffs as AppointmentStaff on AppointmentStaff.user_id = MedicalProductOrder.created_by_user_id and AppointmentStaff.thinapp_id = MedicalProductOrder.thinapp_id and AppointmentStaff.status='ACTIVE' left join lab_pharmacy_users as LabPharmacyUser on LabPharmacyUser.id =MedicalProductOrder.lab_pharmacy_user_id left join hospital_ipd_settlements as HospitalIpdSettlement on HospitalIpdSettlement.id = MedicalProductOrder.hospital_ipd_settlement_id left join hospital_deposit_amounts as HospitalDepositAmount on HospitalDepositAmount.id = MedicalProductOrder.hospital_deposit_amount_id where $condition  $custom_filter  group by MedicalProductOrder.id, MedicalProductOrder.hospital_payment_type_id) AS result group by result.payment_type_name";
            $query .= " ) AS final group by final.payment_type_name ";

            $connection = ConnectionUtil::getConnection();
            $user_collection = $connection->query($query);
            if ($user_collection->num_rows) {
                $paymentCategoryData = mysqli_fetch_all($user_collection, MYSQLI_ASSOC);
            }
        }


        /* service wise collection list */
        if($report_for=='scw') {
            $query = "select  SUM(final.total) as total, final.name from  ( ";
            $query .= "select  SUM(MedicalProductOrderDetail.total_amount) as total, IF(MedicalProductOrderDetail.service ='OPD','OPD',HospitalServiceCategory.name) as name from medical_product_orders as MedicalProductOrder left join medical_product_order_details as MedicalProductOrderDetail on MedicalProductOrderDetail.medical_product_order_id = MedicalProductOrder.id  left join medical_products as MedicalProduct on MedicalProduct.id= MedicalProductOrderDetail.medical_product_id left join hospital_service_categories as HospitalServiceCategory on HospitalServiceCategory.id = MedicalProduct.hospital_service_category_id left join appointment_customers as AppointmentCustomer on AppointmentCustomer.id = MedicalProductOrder.appointment_customer_id  left join childrens as Children on Children.id=MedicalProductOrder.children_id  left join users as User on User.id = MedicalProductOrder.created_by_user_id left join appointment_staffs as AppointmentStaff on AppointmentStaff.user_id = MedicalProductOrder.created_by_user_id and AppointmentStaff.thinapp_id = MedicalProductOrder.thinapp_id and AppointmentStaff.status='ACTIVE' left join lab_pharmacy_users as LabPharmacyUser on LabPharmacyUser.id =MedicalProductOrder.lab_pharmacy_user_id left join hospital_ipd_settlements as HospitalIpdSettlement on HospitalIpdSettlement.id = MedicalProductOrder.hospital_ipd_settlement_id AND ( (MedicalProductOrder.payment_adjust_by_settlement ='Y') OR (MedicalProductOrder.is_settlement ='Y' and HospitalIpdSettlement.payment_status='RECEIVED')) left join hospital_deposit_amounts as HospitalDepositAmount on HospitalDepositAmount.id = MedicalProductOrder.hospital_deposit_amount_id  where  $module_wise_condition group by name having name is not null and total is not null";
        	//echo $query;die;
            $query .= " UNION ALL ";
            $query .= "select  SUM(MedicalProductOrderDetail.total_amount) as total, IF(MedicalProductOrderDetail.service ='OPD','OPD',HospitalServiceCategory.name) as name from medical_product_orders_archive as MedicalProductOrder left join medical_product_order_details_archive as MedicalProductOrderDetail on MedicalProductOrderDetail.medical_product_order_id = MedicalProductOrder.id  left join medical_products as MedicalProduct on MedicalProduct.id= MedicalProductOrderDetail.medical_product_id left join hospital_service_categories as HospitalServiceCategory on HospitalServiceCategory.id = MedicalProduct.hospital_service_category_id left join appointment_customers as AppointmentCustomer on AppointmentCustomer.id = MedicalProductOrder.appointment_customer_id  left join childrens as Children on Children.id=MedicalProductOrder.children_id  left join users as User on User.id = MedicalProductOrder.created_by_user_id left join appointment_staffs as AppointmentStaff on AppointmentStaff.user_id = MedicalProductOrder.created_by_user_id and AppointmentStaff.thinapp_id = MedicalProductOrder.thinapp_id and AppointmentStaff.status='ACTIVE' left join lab_pharmacy_users as LabPharmacyUser on LabPharmacyUser.id =MedicalProductOrder.lab_pharmacy_user_id left join hospital_ipd_settlements as HospitalIpdSettlement on HospitalIpdSettlement.id = MedicalProductOrder.hospital_ipd_settlement_id AND ( (MedicalProductOrder.payment_adjust_by_settlement ='Y') OR (MedicalProductOrder.is_settlement ='Y' and HospitalIpdSettlement.payment_status='RECEIVED')) left join hospital_deposit_amounts as HospitalDepositAmount on HospitalDepositAmount.id = MedicalProductOrder.hospital_deposit_amount_id  where  $module_wise_condition group by name having name is not null and total is not null";
            $query .= " ) AS final group by final.name  order by final.total desc";

            $connection = ConnectionUtil::getConnection();
            $user_collection = $connection->query($query);
            if ($user_collection->num_rows) {
                $serviceData = mysqli_fetch_all($user_collection, MYSQLI_ASSOC);
            }
        }


        if($report_for=='rob') {
            $custom_fields = "IFNULL(AppointmentCustomer.field1,Children.field1) as field1, IFNULL(AppointmentCustomer.field2,Children.field2) as field2,IFNULL(AppointmentCustomer.field3,Children.field3) as field3,IFNULL(AppointmentCustomer.field4,Children.field4) as field4,IFNULL(AppointmentCustomer.field5,Children.field5) as field5,IFNULL(AppointmentCustomer.field6,Children.field6) as field6";
            $final_custom_fields = "final.field1, final.field2, final.field3,final.field4,final.field5,final.field6";
            $unique_id = " MedicalProductOrder.receipt_id AS `unique_id`";
            $query = "select final.parents_name, final.refund_payment_type_id, final.booking_validity_attempt,  final.age, final.email, $final_custom_fields, final.due_amount_settled, final.patient_due_amount_id,  SUM(final.total_paid) as total_paid, final.conceive_date, final.expected_date, final.refund_reason, sum(final.refund_amount) as refund_amount, final.doctor_name , final.is_package, final.lab_pharmacy_user_id, final.lab_pharmacy_type, SUM(final.payable_amount) AS payable_amount, final.service_name, final.unique_id, final.advance_status, final.id, final.appointment_customer_staff_service_id, final.settlement_payment_status, final.is_opd, final.is_advance, final.is_settlement,final.is_expense, final.patient_name, final.patient_mobile, final.patient_address, final.uhid, final.date, final.payment_type_name,  final.payment_description, final.payment_status, final.notes, final.reason_of_appointment, SUM(final.total_amount) AS total_amount, SUM(final.total_tax) as total_tax,final.biller  from ( ";
            $query .= "select MedicalProductOrder.refund_payment_type_id, AppointmentCustomerStaffService.booking_validity_attempt,  IFNULL(IF(AppointmentCustomer.dob !='0000-00-00' and  AppointmentCustomer.dob IS NOT NULL,AppointmentCustomer.dob,AppointmentCustomer.age),Children.dob) as age, IFNULL(AppointmentCustomer.parents_name,Children.parents_name) as parents_name, IFNULL(AppointmentCustomer.email,Children.email) as email, $custom_fields,  IF( (SELECT pda.id FROM patient_due_amounts AS pda WHERE MedicalProductOrder.id = pda.medical_product_order_id AND pda.settlement_by_order_id != MedicalProductOrder.id and pda.settlement_by_order_id > 0 limit 1) IS NOT NULL,'YES','NO') as due_amount_settled, MedicalProductOrder.patient_due_amount_id,  MedicalProductOrderDetail.total_amount AS total_paid, AppointmentCustomer.conceive_date, AppointmentCustomer.expected_date, AppointmentCustomerStaffService.refund_reason, MedicalProductOrder.refund_amount, $single_doctor_condition, MedicalProductOrder.is_package, MedicalProductOrder.lab_pharmacy_user_id, MedicalProductOrder.lab_pharmacy_type, HospitalIpdSettlement.payable_amount, (select GROUP_CONCAT( CONCAT(mp.name, ' #', mpod.total_amount, 'RS/-'),'<br>') FROM medical_product_order_details AS mpod JOIN medical_product_orders AS mpo ON mpo.id = mpod.medical_product_order_id LEFT JOIN medical_products AS mp ON mp.id = mpod.medical_product_id WHERE mpod.medical_product_order_id = MedicalProductOrder.id) as service_name, $unique_id, HospitalDepositAmount.status as advance_status, MedicalProductOrder.id, MedicalProductOrder.appointment_customer_staff_service_id, HospitalIpdSettlement.payment_status as settlement_payment_status, MedicalProductOrder.is_opd, MedicalProductOrder.is_advance, MedicalProductOrder.is_settlement,MedicalProductOrder.is_expense,    CONCAT(IFNULL(AppointmentCustomer.title,Children.title),' ',IFNULL(AppointmentCustomer.first_name,Children.child_name))  as patient_name, IFNULL(AppointmentCustomer.mobile,Children.mobile) as patient_mobile, IFNULL(AppointmentCustomer.address,Children.address) as patient_address, IFNULL(AppointmentCustomer.uhid,Children.uhid) as uhid, DATE_FORMAT(MedicalProductOrder.created,'%d/%m/%Y %h:%i %p') as date, IFNULL(HospitalPaymentType.name,'Cash') as payment_type_name,  MedicalProductOrder.payment_description, MedicalProductOrder.payment_status, IF(MedicalProductOrder.is_advance='Y',HospitalDepositAmount.remark,IFNULL(HospitalIpdSettlement.remark,AppointmentCustomerStaffService.notes)) AS notes, AppointmentCustomerStaffService.reason_of_appointment, SUM(CASE WHEN MedicalProductOrder.is_settlement='Y' THEN  HospitalIpdSettlement.settlement_amount  WHEN MedicalProductOrder.is_advance='Y'  THEN ( HospitalDepositAmount.amount + HospitalDepositAmount.discount ) ELSE $detail_total_amount_condition END) AS total_amount, SUM(IFNULL(MedicalProductOrderDetail.tax_amount,0)) as total_tax,IFNULL(IFNULL(IFNULL(LabPharmacyUser.lab_name,LabPharmacyUser.lab_name),IFNULL(AppointmentStaff.name,User.username)),'')  as biller  from medical_product_orders as MedicalProductOrder left join hospital_payment_types as HospitalPaymentType on HospitalPaymentType.id = MedicalProductOrder.hospital_payment_type_id left join medical_product_order_details as MedicalProductOrderDetail on MedicalProductOrderDetail.medical_product_order_id = MedicalProductOrder.id  $max_query left join medical_products as MedicalProduct on MedicalProduct.id= MedicalProductOrderDetail.medical_product_id  left join appointment_customers as AppointmentCustomer on AppointmentCustomer.id = MedicalProductOrder.appointment_customer_id  left join childrens as Children on Children.id=MedicalProductOrder.children_id  left join users as User on User.id = MedicalProductOrder.created_by_user_id left join appointment_staffs as AppointmentStaff on AppointmentStaff.user_id = MedicalProductOrder.created_by_user_id and AppointmentStaff.thinapp_id = MedicalProductOrder.thinapp_id and AppointmentStaff.status='ACTIVE' left join lab_pharmacy_users as LabPharmacyUser on LabPharmacyUser.id =MedicalProductOrder.lab_pharmacy_user_id left join hospital_deposit_amounts as HospitalDepositAmount on HospitalDepositAmount.id = MedicalProductOrder.hospital_deposit_amount_id  left join hospital_ipd_settlements as HospitalIpdSettlement on HospitalIpdSettlement.id = MedicalProductOrder.hospital_ipd_settlement_id and MedicalProductOrder.is_expense = 'N'  left join appointment_customer_staff_services as AppointmentCustomerStaffService on AppointmentCustomerStaffService.id = MedicalProductOrder.appointment_customer_staff_service_id  WHERE $condition $custom_filter GROUP BY MedicalProductOrder.id having MedicalProductOrder.id IS NOT NULL ";
            $query .= " UNION ALL ";
            $query .= "select MedicalProductOrder.refund_payment_type_id, AppointmentCustomerStaffService.booking_validity_attempt,  IFNULL(IF(AppointmentCustomer.dob !='0000-00-00' and  AppointmentCustomer.dob IS NOT NULL,AppointmentCustomer.dob,AppointmentCustomer.age),Children.dob) as age, IFNULL(AppointmentCustomer.parents_name,Children.parents_name) as parents_name, IFNULL(AppointmentCustomer.email,Children.email) as email, $custom_fields,  IF( (SELECT pda.id FROM patient_due_amounts AS pda WHERE MedicalProductOrder.id = pda.medical_product_order_id AND pda.settlement_by_order_id != MedicalProductOrder.id and pda.settlement_by_order_id > 0 limit 1) IS NOT NULL,'YES','NO') as due_amount_settled, MedicalProductOrder.patient_due_amount_id,  MedicalProductOrderDetail.total_amount AS total_paid, AppointmentCustomer.conceive_date, AppointmentCustomer.expected_date, AppointmentCustomerStaffService.refund_reason, MedicalProductOrder.refund_amount, $single_doctor_condition, MedicalProductOrder.is_package, MedicalProductOrder.lab_pharmacy_user_id, MedicalProductOrder.lab_pharmacy_type, HospitalIpdSettlement.payable_amount, (select GROUP_CONCAT( CONCAT(mp.name, ' #', mpod.total_amount, 'RS/-'),'<br>') FROM medical_product_order_details_archive AS mpod JOIN medical_product_order_details_archive AS mpo ON mpo.id = mpod.medical_product_order_id LEFT JOIN medical_products AS mp ON mp.id = mpod.medical_product_id WHERE mpod.medical_product_order_id = MedicalProductOrder.id) as service_name, $unique_id, HospitalDepositAmount.status as advance_status, MedicalProductOrder.id, MedicalProductOrder.appointment_customer_staff_service_id, HospitalIpdSettlement.payment_status as settlement_payment_status, MedicalProductOrder.is_opd, MedicalProductOrder.is_advance, MedicalProductOrder.is_settlement,MedicalProductOrder.is_expense, CONCAT(IFNULL(AppointmentCustomer.title,Children.title),' ',IFNULL(AppointmentCustomer.first_name,Children.child_name))  as patient_name, IFNULL(AppointmentCustomer.mobile,Children.mobile) as patient_mobile, IFNULL(AppointmentCustomer.address,Children.address) as patient_address, IFNULL(AppointmentCustomer.uhid,Children.uhid) as uhid, DATE_FORMAT(MedicalProductOrder.created,'%d/%m/%Y %h:%i %p') as date, IFNULL(HospitalPaymentType.name,'Cash') as payment_type_name,  MedicalProductOrder.payment_description, MedicalProductOrder.payment_status, IF(MedicalProductOrder.is_advance='Y',HospitalDepositAmount.remark,IFNULL(HospitalIpdSettlement.remark,AppointmentCustomerStaffService.notes)) AS notes, AppointmentCustomerStaffService.reason_of_appointment, SUM(CASE WHEN MedicalProductOrder.is_settlement='Y' THEN  HospitalIpdSettlement.settlement_amount  WHEN MedicalProductOrder.is_advance='Y'  THEN ( HospitalDepositAmount.amount + HospitalDepositAmount.discount ) ELSE $detail_total_amount_condition END) AS total_amount, SUM(IFNULL(MedicalProductOrderDetail.tax_amount,0)) as total_tax,IFNULL(IFNULL(IFNULL(LabPharmacyUser.lab_name,LabPharmacyUser.lab_name),IFNULL(AppointmentStaff.name,User.username)),'')  as biller  from medical_product_orders_archive as MedicalProductOrder left join hospital_payment_types as HospitalPaymentType on HospitalPaymentType.id = MedicalProductOrder.hospital_payment_type_id left join medical_product_order_details_archive as MedicalProductOrderDetail on MedicalProductOrderDetail.medical_product_order_id = MedicalProductOrder.id  $max_query_archive left join medical_products as MedicalProduct on MedicalProduct.id= MedicalProductOrderDetail.medical_product_id  left join appointment_customers as AppointmentCustomer on AppointmentCustomer.id = MedicalProductOrder.appointment_customer_id  left join childrens as Children on Children.id=MedicalProductOrder.children_id  left join users as User on User.id = MedicalProductOrder.created_by_user_id left join appointment_staffs as AppointmentStaff on AppointmentStaff.user_id = MedicalProductOrder.created_by_user_id and AppointmentStaff.thinapp_id = MedicalProductOrder.thinapp_id and AppointmentStaff.status='ACTIVE' left join lab_pharmacy_users as LabPharmacyUser on LabPharmacyUser.id =MedicalProductOrder.lab_pharmacy_user_id left join hospital_deposit_amounts as HospitalDepositAmount on HospitalDepositAmount.id = MedicalProductOrder.hospital_deposit_amount_id  left join hospital_ipd_settlements as HospitalIpdSettlement on HospitalIpdSettlement.id = MedicalProductOrder.hospital_ipd_settlement_id and MedicalProductOrder.is_expense = 'N'  left join appointment_customer_staff_services_archive as AppointmentCustomerStaffService on AppointmentCustomerStaffService.id = MedicalProductOrder.appointment_customer_staff_service_id  WHERE $condition $custom_filter GROUP BY MedicalProductOrder.id having MedicalProductOrder.id IS NOT NULL ";
            $query .= " ) AS final GROUP BY final.id order by final.id desc";
            $connection = ConnectionUtil::getConnection();
            $user_collection = $connection->query($query);
            if ($user_collection->num_rows) {
                $orderDetails = mysqli_fetch_all($user_collection, MYSQLI_ASSOC);
            }
        }


        $titleRS = $connection->query($titleQuery);
        $orderData = mysqli_fetch_assoc($titleRS);
        $thinappName = ($orderData['report_title'] == '')?$login1['Thinapp']['name']:$orderData['report_title'];
        $thinappName .= '( '.$this->request->data['Search']['from_date'].' - '.$this->request->data['Search']['to_date'].' )';
        $this->set(array('date_message'=>$date_message,'report_for'=>$report_for,'paymentCategoryData'=>$paymentCategoryData,'thinappName'=>$thinappName,'detailUserData' => $detailUserData, 'categoryData' => $categoryData, 'orderDetails' => $orderDetails, 'serviceData' => $serviceData));
    
    $this->render('get_hospital_receipt_reports');
    
    
    }

    public function getEditMedicalOrderSearch()
    {
        $this->layout = false;
        $this->autoRender = false;
        if ($this->request->is(array('ajax'))) {
            $appointmentID = base64_decode($this->request->data['orderID']);
            $login = $this->Session->read('Auth.User.User');
            $orderDetails = $this->MedicalProductOrder->find('first', array('conditions' => array('MedicalProductOrder.id' => $appointmentID), 'contain' => array('MedicalProductOrderDetail' => array('MedicalProduct' => 'MedicalProductQuantity'))));
            //pr($orderDetails); die;
            $this->set(compact('orderDetails'));
            $this->render('get_edit_medical_order_search', 'ajax');
        }
    }


    public function web_edit_order_search()
    {

        $this->layout = false;
        $this->autoRender = false;
        if ($this->request->is(array('ajax'))) {

            $datasource = $this->MedicalProductOrder->getDataSource();
            $login = $this->Session->read('Auth.User.User');
            $thinappID = $login['thinapp_id'];

            try {
                $datasource->begin();
                $data = $this->request->data;

                $dataTOSaveOrderDetail = array();
                $totalAmountToSave = 0;

                $orderID = $data['orderID'];

                foreach ($data['productID'] AS $key => $val) {

                    $medicalProductID = $data['productID'][$key];


                    if (isset($data['orderDetailID'][$key])) {
                        $dataTOSaveOrderDetail[$key]['id'] = $data['orderDetailID'][$key];
                    }

                    $dataTOSaveOrderDetail[$key]['medical_product_order_id'] = $orderID;


                    $dataTOSaveOrderDetail[$key]['thinapp_id'] = $thinappID;
                    $dataTOSaveOrderDetail[$key]['medical_product_id'] = $data['productID'][$key];
                    //$dataTOSaveOrderDetail[$key]['service'] = $data['productName'][$key];
                    $quantity = $dataTOSaveOrderDetail[$key]['quantity'] = $data['quantity'][$key];
                    $discountType = $dataTOSaveOrderDetail[$key]['discount_type'] = $data['discountType'][$key];
                    $discountValue = $dataTOSaveOrderDetail[$key]['discount_value'] = $data['discount'][$key];
                    $dataTOSaveOrderDetail[$key]['children_id'] = isset($patientData['Children']) ? $patientData['Children']['id'] : 0;
                    $dataTOSaveOrderDetail[$key]['appointment_customer_id'] = isset($patientData['AppointmentCustomer']) ? $patientData['AppointmentCustomer']['id'] : 0;
                    $dataTOSaveOrderDetail[$key]['medical_product_quantity_id'] = ($data['medical_product_quantity_id'][$key] != '') ? $data['medical_product_quantity_id'][$key] : 0;


                    $medicalProductData = $this->MedicalProduct->find("first", array("conditions" => array("MedicalProduct.id" => $medicalProductID), 'recursive' => 2));


                    if ($medicalProductData['MedicalProduct']['is_price_editable'] == 1) {
                        $productPrice = $dataTOSaveOrderDetail[$key]['product_price'] = $medicalProductData['MedicalProduct']['price'] = $data['price'][$key];
                    } else {
                        if ($data['medical_product_quantity_id'][$key] > 0) {
                            $medicalProductQtyData = $this->MedicalProductQuantity->findById($data['medical_product_quantity_id'][$key], array('contain' => false));
                            $productPrice = $dataTOSaveOrderDetail[$key]['product_price'] = $medicalProductData['MedicalProduct']['price'] = $medicalProductQtyData['MedicalProductQuantity']['mrp'];
                        } else {
                            $productPrice = $dataTOSaveOrderDetail[$key]['product_price'] = $medicalProductData['MedicalProduct']['price'];
                        }
                    }


                    $taxType = isset($medicalProductData['HospitalServiceCategory']['HospitalTaxRate']['name']) ? $medicalProductData['HospitalServiceCategory']['HospitalTaxRate']['name'] : 'NO_TEX';
                    $dataTOSaveOrderDetail[$key]['tax_type'] = $taxType;

                    $taxVal = isset($medicalProductData['HospitalServiceCategory']['HospitalTaxRate']['rate']) ? $medicalProductData['HospitalServiceCategory']['HospitalTaxRate']['rate'] : 0;
                    $dataTOSaveOrderDetail[$key]['tax_value'] = $taxVal;

                    $amount = round($productPrice * $quantity, 2);
                    $dataTOSaveOrderDetail[$key]['amount'] = $amount;
                    $discountAmount = 0;
                    if ($discountValue > 0) {
                        if ($discountType == 'PERCENTAGE') {
                            $discountAmount = round($amount * ($discountValue / 100), 2);
                            if ($discountAmount > $amount) {
                                $discountAmount = $amount;
                            }
                        } else {
                            $discountAmount = $discountValue;
                            if ($discountAmount > $amount) {
                                $discountAmount = $amount;
                            }
                        }
                    }

                    $dataTOSaveOrderDetail[$key]['discount_amount'] = $discountAmount;
                    $taxableAmount = ($amount - $discountAmount);
                    if ($taxableAmount > 0) {
                        $taxAmount = $dataTOSaveOrderDetail[$key]['tax_amount'] = round($taxableAmount * ($taxVal / 100), 2);
                        $totalAmount = $dataTOSaveOrderDetail[$key]['total_amount'] = ($taxAmount + $taxableAmount);
                        $totalAmountToSave = $totalAmountToSave + $totalAmount;
                    } else {
                        $dataTOSaveOrderDetail[$key]['tax_amount'] = 0;
                        $totalAmount = $dataTOSaveOrderDetail[$key]['total_amount'] = 0;
                        $totalAmountToSave = $totalAmountToSave + $totalAmount;
                    }

                    if ($data['medical_product_quantity_id'][$key] > 0) {
                        $this->MedicalProductQuantity->query("UPDATE `medical_product_quantities` SET `sold` = (`sold`+" . $quantity . ") WHERE `id` = '" . $data['medical_product_quantity_id'][$key] . "'");
                    }

                }


                $oldOrderDetail = $this->MedicalProductOrderDetail->find('all',
                    array(
                        'conditions' => array(
                            "MedicalProductOrderDetail.medical_product_order_id" => $orderID
                        ),
                        'contain' => false
                    )
                );

                foreach ($oldOrderDetail AS $oldDetail) {
                    if ($oldDetail['MedicalProductOrderDetail']['medical_product_quantity_id'] > 0) {
                        $qt = $oldDetail['MedicalProductOrderDetail']['quantity'];
                        $this->MedicalProductQuantity->query("UPDATE `medical_product_quantities` SET `sold` = (`sold`-" . $qt . ") WHERE `id` = '" . $oldDetail['MedicalProductOrderDetail']['medical_product_quantity_id'] . "'");
                    }
                }


                $this->MedicalProductOrderDetail->deleteAll(
                    array(
                        "NOT" => array(
                            "MedicalProductOrderDetail.id" => $data['orderDetailID']
                        ),
                        "MedicalProductOrderDetail.medical_product_order_id" => $orderID
                    )
                );
                $orderUpdate['MedicalProductOrder']['id'] = $orderID;
                $orderUpdate['MedicalProductOrder']['total_amount'] = $totalAmountToSave;
                $login = $this->Session->read('Auth.User.User');
                $orderUpdate['MedicalProductOrder']['modified_by_user_id'] = $login['id'];
                if ($this->MedicalProductOrder->save($orderUpdate) && $this->MedicalProductOrderDetail->saveAll($dataTOSaveOrderDetail)) {


                    $datasource->commit();
                    $dataToSend['receipt_id'] = $orderID;
                    $dataToSend['status'] = 1;
                    $dataToSend['message'] = "Successfully paid!";

                } else {
                    $datasource->rollback();
                    $dataToSend['status'] = 0;
                    $dataToSend['message'] = "Something went wrong!";
                }


            } catch (Exception $e) {
                $datasource->rollback();
                $dataToSend['status'] = 0;
                $dataToSend['message'] = "Something went wrong!";
            }
            echo json_encode($dataToSend);
        }
    }


    /*public function hospital_patient_invoice_list($patientUHID)
    {
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User.User');
        $thinappID = $login['thinapp_id'];
        if($patientUHID != null) {
            $patientUHID = base64_decode($patientUHID);
            $patientData = $this->AppointmentCustomer->find("first", array("conditions" => array("uhid" => $patientUHID, "thinapp_id" => $thinappID)));
            if (!isset($patientData['AppointmentCustomer']['id'])) {
                $patientType = 'CHILDREN';
                $patientData = $this->Children->find("first", array("conditions" => array("uhid" => $patientUHID, "thinapp_id" => $thinappID)));
                $medicalProductOrderData = $this->MedicalProductOrder->find("all",array('fields'=>array('MedicalProductOrder.*',"(SELECT CONCAT(DATE_FORMAT(`MedicalProductOrder`.`created`,'%d%m%y'),COUNT(`id`)) FROM `medical_product_orders` AS `order` WHERE  DATE(`order`.`created`) = DATE(`MedicalProductOrder`.`created`) AND `order`.`id` <= `MedicalProductOrder`.`id` AND `order`.`thinapp_id` = `MedicalProductOrder`.`thinapp_id`) AS `unique_id`" ),"conditions"=>array("children_id"=>$patientData['Children']['id']),"contain"=>false));
            }
            else
            {
                $patientType = 'CUSTOMER';
                $medicalProductOrderData = $this->MedicalProductOrder->find("all",array('fields'=>array('MedicalProductOrder.*',"(SELECT CONCAT(DATE_FORMAT(`MedicalProductOrder`.`created`,'%d%m%y'),COUNT(`id`)) FROM `medical_product_orders` AS `order` WHERE  DATE(`order`.`created`) = DATE(`MedicalProductOrder`.`created`) AND `order`.`id` <= `MedicalProductOrder`.`id` AND `order`.`thinapp_id` = `MedicalProductOrder`.`thinapp_id`) AS `unique_id`" ),"conditions"=>array("appointment_customer_id"=>$patientData['AppointmentCustomer']['id']),"contain"=>false));
            }

            $this->set(
                array(
                    'patientType'=>$patientType,
                    'medicalProductOrderData'=>$medicalProductOrderData,
                    'patientData'=>$patientData
                )
            );

        }
    }*/


    public function search_doctor()
    {

        $reqData = $this->request->query;
        $pram = array();
        if (!empty($reqData['mobile'])) {
            $pram['m'] = $reqData['mobile'];
        }
        if (!empty($reqData['staff_type'])) {
            $pram['st'] = $reqData['staff_type'];
        }
        if (!empty($reqData['name'])) {
            $pram['n'] = $reqData['name'];
        }

        if (!empty($reqData['status'])) {
            $pram['s'] = $reqData['status'];
        }
        $this->redirect(
            array(
                "controller" => "app_admin",
                "action" => "doctor",
                "?" => $pram,
            )
        );
    }

    public function doctor()
    {
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User');
        $searchData = $this->request->query;
        $conditions = array();
        if (isset($searchData['m']) && !empty($searchData['m'])) {
            $this->request->data['Search']['mobile'] = $searchData['m'];
            $conditions["AppointmentStaff.mobile LIKE"] = '%' . $searchData['m'] . '%';
        }
        if (isset($searchData['n']) && !empty($searchData['n'])) {
            $this->request->data['Search']['name'] = $searchData['n'];
            $conditions["AppointmentStaff.name LIKE"] = '%' . $searchData['n'] . '%';
        }
        if (isset($searchData['st']) && !empty($searchData['st'])) {
            $this->request->data['Search']['staff_type'] = $searchData['st'];
            $conditions["AppointmentStaff.staff_type"] = $searchData['st'];
        }
        if (isset($searchData['s']) && !empty($searchData['s'])) {
            $this->request->data['Search']['status'] = $searchData['s'];
            $conditions["AppointmentStaff.status"] = $searchData['s'];
        }


        $id_list = $this->AppointmentStaff->find("all",
            array(
                "conditions" => array(
                    "AppointmentStaff.thinapp_id" => $login['User']['thinapp_id'],
                    $conditions
                ),
                'fields' => array('MAX(AppointmentStaff.id) as id'),
                "contain" => false,
                'group' => array('AppointmentStaff.mobile')

            )
        );
        

        $ids = array();
        if (!empty($id_list)) {
            foreach ($id_list as $key => $id) {
                $ids[] = $id[0]['id'];
            }
        }


        $this->paginate = array(
            "conditions" => array(
                "AppointmentStaff.id" => $ids),
            'contain' => array('AppointmentCategory', 'DepartmentCategory'),
            'limit' => 20,
            'order' => array('AppointmentStaff.id' => 'desc')
        );
        $data = $this->paginate('AppointmentStaff');


        $this->set('staff', $data);
    }

    public function change_doctor_status()
    {
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $response = array();
            $pat_id = base64_decode($this->request->data['i']);
            $status = $this->request->data['s'];
            $status = ($status == 'ACTIVE') ? 'INACTIVE' : 'ACTIVE';

            if($status == "ACTIVE")
            {
                $login = $this->Session->read('Auth.User');
                $thinappID = $login['User']['thinapp_id'];

                $staffType = $this->AppointmentStaff->find("first",array("conditions"=>array("id" => $pat_id),"fields"=>array("staff_type"),"contain"=>false));

                if($staffType["AppointmentStaff"]["staff_type"] == 'DOCTOR')
                {
                    $docCount = $this->AppointmentStaff->find("count",array("conditions"=>array("thinapp_id"=>$thinappID,"status"=>"ACTIVE","staff_type"=>"DOCTOR"),"contain"=>false));
                    $allowedCount = $this->Thinapp->find("first",array("fields"=>array("allowed_doctor_count"),"conditions"=>array("id"=>$thinappID),"contain"=>false));
                if($docCount >= $allowedCount['Thinapp']['allowed_doctor_count'])
                {
                    $response['status'] = 0;
                    $response['message'] = "You have opted ".$allowedCount['Thinapp']['allowed_doctor_count']." doctor's package,Kindly inactive existing doctor to add new";
                    echo json_encode($response, true);

                    exit();
                }
                }

            }

            $return = $this->AppointmentStaff->updateAll(array("AppointmentStaff.status" => "'$status'"), array("AppointmentStaff.id" => $pat_id));
            if ($return) {
                $response['status'] = 1;
                $response['message'] = "Admit status change successfully.";
                $response['label'] = $status;
                Custom::delete_doctor_cache($pat_id);
            } else {
                $response['status'] = 0;
                $response['message'] = "Sorry could not changed admit status";
            }
            $response = json_encode($response, true);
            echo $response;
            exit();
        }
    }

    public function change_doctor_password()
    {
        $this->autoRender = false;
        $login = $this->Session->read('Auth.User');
        if ($this->request->is('ajax')) {
            $response = array();
            $pat_id = base64_decode($this->request->data['i']);
            $password = $this->request->data['p'];
            $type = isset($this->request->data['type']) ? $this->request->data['type'] : 'doctor';
            if (!empty($password)) {
                $return = false;
                $password = md5($password);
                $user_password = true;
                if (@$login['User']['role_id'] == 5 && @$login['AppointmentStaff']['id'] == $pat_id) {
                    $user_password = $this->User->updateAll(array("User.password" => "'$password'"), array("User.id" => $login['User']['id']));
                }
                $return = $this->AppointmentStaff->updateAll(array("AppointmentStaff.password" => "'$password'"), array("AppointmentStaff.id" => $pat_id));

                if ($return && $user_password) {
                    $response['status'] = 1;
                    $response['message'] = "Password update successfully.";
					Custom::delete_doctor_cache($pat_id);
                    if ($type == 'doctor') {
                        
                    } else if ($type == 'lab') {
                        $file_name = Custom::encrypt_decrypt('encrypt', "lab_$pat_id");
                        WebservicesFunction::deleteJson(array($file_name), 'login_lab_pharmacy');
                    }


                } else {
                    $response['status'] = 0;
                    $response['message'] = "Sorry could not changed admit status";
                }
            } else {
                $response['status'] = 0;
                $response['message'] = "Please enter password";
            }

            $response = json_encode($response, true);
            echo $response;
            exit();
        }
    }

    public function change_lab_password()
    {
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $response = array();
            $pat_id = base64_decode($this->request->data['i']);
            $password = $this->request->data['p'];
            $type = $this->request->data['type'];
            if (!empty($password)) {
                $return = false;
                $password = md5($password);
                $return = $this->LabPharmacyUser->updateAll(array("LabPharmacyUser.password" => "'$password'"), array("LabPharmacyUser.id" => $pat_id));
                if ($return) {
                    $response['status'] = 1;
                    $response['message'] = "Password update successfully.";

                    if ($type == 'doctor') {
                        Custom::delete_doctor_cache($pat_id);
                    } else if ($type == 'lab') {
                        $file_name = Custom::encrypt_decrypt('encrypt', "lab_$pat_id");
                        WebservicesFunction::deleteJson(array($file_name), 'login_lab_pharmacy');
                    }


                } else {
                    $response['status'] = 0;
                    $response['message'] = "Sorry could not changed admit status";
                }
            } else {
                $response['status'] = 0;
                $response['message'] = "Please enter password";
            }

            $response = json_encode($response, true);
            echo $response;
            exit();
        }
    }
    public function change_dental_supplier_password()
    {
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $response = array();
            $pat_id = base64_decode($this->request->data['i']);
            $password = $this->request->data['p'];
            $type = $this->request->data['type'];
            if (!empty($password)) {
                $return = false;
                $password = md5($password);
                $return = $this->DentalSupplier->updateAll(array("DentalSupplier.password" => "'$password'"), array("DentalSupplier.id" => $pat_id));
                if ($return) {
                    $response['status'] = 1;
                    $response['message'] = "Password update successfully.";
                    $file_name = Custom::encrypt_decrypt('encrypt', "dental_supplier_$pat_id");
                    WebservicesFunction::deleteJson(array($file_name), 'login_dental_supplier');


                } else {
                    $response['status'] = 0;
                    $response['message'] = "Sorry could not changed admit status";
                }
            } else {
                $response['status'] = 0;
                $response['message'] = "Please enter password";
            }

            $response = json_encode($response, true);
            echo $response;
            exit();
        }
    }

   public function add_doctor()
    {
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User');
        if ($this->request->is(array('post', 'put'))) {
            if($this->request->data['AppointmentStaff']['staff_type'] == 'DOCTOR')
            {
                $isAllowAddDoctor = Custom::is_allowed_add_doc($login['User']['thinapp_id']);
                if($isAllowAddDoctor > 0)
                {
                    $this->Session->setFlash(__("You have opted $isAllowAddDoctor doctor's package,Kindly inactive existing doctor to add new"), 'default', array(), 'error');
                    $this->redirect(array('controller' => 'app_admin', 'action' => 'doctor'));
                    return true;
                }
                $this->request->data['AppointmentStaff']['edit_appointment_payment'] ="NO";
                //$this->request->data['AppointmentStaff']['allow_refund_payment'] ="NO";
            }
            $datasource = $this->AppointmentStaff->getDataSource();

            $staff_mobile = Custom::create_mobile_number($this->request->data['AppointmentStaff']['mobile']);

            $register_staff = Custom::get_mobile_register_staff($staff_mobile,$login['User']['thinapp_id']);
            if(empty($register_staff)){
                $this->request->data['AppointmentStaff']['thinapp_id'] = $thin_app_id =$login['User']['thinapp_id'];
                $this->AppointmentStaff->set($this->request->data['AppointmentStaff']);
                $experience = $this->request->data['AppointmentStaff']['year'] . "." . $this->request->data['AppointmentStaff']['month'];
                $this->request->data['AppointmentStaff']['experience'] = $experience;
                if ($this->AppointmentStaff->validates()) {
                    $datasource->begin();
                    if (!empty($this->request->data['AppointmentStaff']['dob'])) {
                        $date = DateTime::createFromFormat('d-m-Y', $this->request->data['AppointmentStaff']['dob']);
                        $this->request->data['AppointmentStaff']['dob'] = $date->format('Y-m-d');
                    } else {
                        $this->request->data['AppointmentStaff']['dob'] = "0000-00-00";

                    }
                    $this->request->data['AppointmentStaff']['mobile'] = $staff_mobile;
                    $this->request->data['AppointmentStaff']['password'] = md5(substr($this->request->data['AppointmentStaff']['mobile'], -10));
                    $staff_name = $this->request->data['AppointmentStaff']['name'];
                    $user_id = Custom::create_user($thin_app_id, $staff_mobile,$staff_name);


                    $this->request->data['AppointmentStaff']['user_id'] = $user_id;
                    $this->request->data['AppointmentStaff']['thinapp_id'] = $login['User']['thinapp_id'];
                    if ($this->AppointmentStaff->save($this->request->data['AppointmentStaff'])) {
                        $working_days = $this->AppointmentDayTime->find('all', array(
                            "conditions" => array(
                                "AppointmentDayTime.status" => "ACTIVE"
                            ),
                            'contain' => false
                        ));

                        $app_staff_id = $this->AppointmentStaff->getLastInsertId();
                        $staff_hours = array();
                        foreach ($working_days as $key => $days) {
                            $staff_hours[$key]['thinapp_id'] = $login['User']['thinapp_id'];;
                            $staff_hours[$key]['user_id'] = $user_id;
                            $staff_hours[$key]['appointment_staff_id'] = $app_staff_id;
                            $staff_hours[$key]['appointment_day_time_id'] = $days['AppointmentDayTime']['id'];
                            $staff_hours[$key]['time_from'] = APPOINTMENT_WORKING_START_TIME;
                            $staff_hours[$key]['time_to'] = APPOINTMENT_WORKING_END_TIME;
                        }
                        if ($this->AppointmentStaffHour->saveAll($staff_hours)) {
                            $datasource->commit();
                            Custom::delete_hospital_cache($app_staff_id);
                            $this->Session->setFlash(__('Profile update successfully.'), 'default', array(), 'success');
                            $this->redirect(array('controller' => 'app_admin', 'action' => 'doctor'));

                        } else {
                            $datasource->rollback();
                            $this->Session->setFlash(__('Sorry profile could not update.'), 'default', array(), 'error');
                        }

                    } else {
                        $datasource->rollback();
                        $this->Session->setFlash(__('Sorry profile could not update.'), 'default', array(), 'error');
                    }
                }

            }else{
                $status = $register_staff['status'];
                $staff_type = strtolower($register_staff['staff_type']);
                $message = "This mobile number already register as $staff_type. ";
                if($status=='INACTIVE'){
                    $message .= "You can active this mobile number from doctor list";
                }
                $this->Session->setFlash(__($message), 'default', array(), 'warning');
            }


        }


    }

    public function doctor_profile($doctor_id = null, $redirect = 'no')
    {
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User');
    	$thin_app_id = $login['User']['thinapp_id'];
        $id = base64_decode($doctor_id);
        $redirect = base64_decode($redirect);
        if ($this->request->is(array('post', 'put'))) {
            $this->request->data['AppointmentStaff']['id'] = $id;


            $this->AppointmentStaff->set($this->request->data['AppointmentStaff']);
            $experience = $this->request->data['AppointmentStaff']['year'] . "." . $this->request->data['AppointmentStaff']['month'];
            $this->request->data['AppointmentStaff']['experience'] = $experience;
            if (!empty($this->request->data['AppointmentStaff']['dob'])) {
                $date = DateTime::createFromFormat('d-m-Y', $this->request->data['AppointmentStaff']['dob']);
                $this->request->data['AppointmentStaff']['dob'] = $date->format('Y-m-d');
            }

            if($this->request->data['AppointmentStaff']['staff_type'] == 'DOCTOR')
            {
                $this->request->data['AppointmentStaff']['edit_appointment_payment'] ="NO";
                //$this->request->data['AppointmentStaff']['allow_refund_payment'] ="NO";
            }

            if ($this->AppointmentStaff->validates()) {
                $this->request->data['AppointmentStaff']['mobile'] = Custom::create_mobile_number($this->request->data['AppointmentStaff']['mobile']);
            	$this->request->data['AppointmentStaff']['user_id'] = Custom::create_user($thin_app_id, $this->request->data['AppointmentStaff']['mobile'], $this->request->data['AppointmentStaff']['name']);
                if ($this->AppointmentStaff->save($this->request->data['AppointmentStaff'])) {
                    $this->Session->setFlash(__('Profile update successfully.'), 'default', array(), 'success');
                    Custom::delete_doctor_cache($id);
                    if ($redirect == 'YES') {
                        $this->redirect(array('controller' => 'app_admin', 'action' => 'doctor'));
                    } else {
                        $this->redirect(array('controller' => 'app_admin', 'action' => 'doctor_profile', base64_encode($id)));
                    }

                } else {
                    $this->Session->setFlash(__('Sorry profile could not update.'), 'default', array(), 'error');
                }
            }
        } else {
            $this->request->data = $this->AppointmentStaff->find("first", array(
                "conditions" => array(
                    "AppointmentStaff.id" => $id,
                ),
                'contain' => false
            ));


        }
    
    	$query = "SELECT * FROM consent_templates WHERE doctor_id = $id AND  consent_for IN('ONLINE_APPOINTMENT','OFFLINE_APPOINTMENT') AND STATUS != 'DELETED' AND thinapp_id = $thin_app_id LIMIT 2";
        $connection = ConnectionUtil::getConnection();
        $service_message_list = $connection->query($query);
        $consent_data = array();
        if ($service_message_list->num_rows) {
            $list = mysqli_fetch_all($service_message_list, MYSQL_ASSOC);
            foreach ($list as $value){
                $consent_data[$value['consent_for']] = $value;
            }
        }
        $doctorList = Custom::get_all_doctor_list($thin_app_id);
        $this->set(compact('consent_data','id','doctorList'));


    }

	public function save_appointment_consent($doctor_id = null)
    {
          if ($this->request->is(array('post', 'put'))) {
            $doctor_id = base64_decode($doctor_id);
              $login = $this->Session->read('Auth.User');
              $thin_app_id = $login['User']['thinapp_id'];
              $user_id = $login['User']['id'];
              $data = $this->request->data['Consent'];
              $connection= ConnectionUtil::getConnection();
              $connection->autocommit(false);
              $created = Custom::created();
              $result_array =array();
              if(empty($data['online_id'])){
                  if(!empty($data['online_text'])){
                      $consent_for= 'ONLINE_APPOINTMENT';
                      $sql = "INSERT INTO consent_templates (thinapp_id, doctor_id, user_id, consent_title, consent_message, consent_for, created, modified) VALUES (?,?,?,?,?,?,?,?)";
                      $stmt = $connection->prepare($sql);
                      $stmt->bind_param('ssssssss', $thin_app_id, $doctor_id, $user_id, $data['online_title'],$data['online_text'],$consent_for, $created, $created);
                      $result_array[] = $stmt->execute();
                  }

              }else{
                  $sql = "update consent_templates set consent_title = ? ,consent_message =?, status=? , modified=?  where id = ?";
                  $stmt = $connection->prepare($sql);
                  $created = Custom::created();
                  $stmt->bind_param('sssss', $data['online_title'],$data['online_text'],$data['online_status'], $created, $data['online_id']);
                  $result_array[] = $stmt->execute();
              }

              if(empty($data['offline_id'])){
                  if(!empty($data['offline_text'])) {
                      $consent_for = 'OFFLINE_APPOINTMENT';
                      $sql = "INSERT INTO consent_templates (thinapp_id, doctor_id, user_id, consent_title, consent_message, consent_for, created, modified) VALUES (?,?,?,?,?,?,?,?)";
                      $stmt = $connection->prepare($sql);
                      $stmt->bind_param('ssssssss', $thin_app_id, $doctor_id, $user_id, $data['offline_title'], $data['offline_text'], $consent_for, $created, $created);
                      $result_array[] = $stmt->execute();
                  }
              }else{
                  $sql = "update consent_templates set consent_title = ? ,consent_message =?, status=? , modified=?  where id = ?";
                  $stmt = $connection->prepare($sql);
                  $created = Custom::created();
                  $stmt->bind_param('sssss', $data['offline_title'],$data['offline_text'],$data['offline_status'], $created, $data['offline_id']);
                  $result_array[] = $stmt->execute();
              }
              if(!in_array(false,$result_array)){
                  $connection->commit();
                  $this->Session->setFlash(__('Consent update successfully.'), 'default', array(), 'success');
                  $this->redirect(array('controller' => 'app_admin', 'action' => 'doctor_profile', base64_encode($doctor_id)));
              }else{
                  $connection->rollback();
                  $this->Session->setFlash(__('Sorry profile could not update.'), 'default', array(), 'error');
                  $this->redirect(array('controller' => 'app_admin', 'action' => 'doctor_profile', base64_encode($doctor_id)));

              }
            
        }else{
              $this->redirect(array('controller' => 'app_admin', 'action' => 'doctor'));
          }
    }

    public function upload_doctor_image()
    {
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            if (isset($this->request->data['AppointmentStaff'])) {
                $data = $this->request->data['AppointmentStaff']['file'];
                $file_type = $this->request->data['AppointmentStaff']['file']['type'];
                $response = array();
                if (isset($data['tmp_name']) && !empty($data['tmp_name'])) {
                    $mimeAarray = array('image/png', 'image/jpeg', 'image/jpeg', 'image/jpeg', 'image/gif', 'image/bmp');
                    if (in_array($file_type, $mimeAarray)) {

                        if ($url = $this->Custom->uploadFileToAws($data)) {
                            $response["status"] = 1;
                            $response["message"] = "File uploaded successfully.";
                            $response["url"] = $url;
                        } else {
                            $response["status"] = 0;
                            $response["message"] = "Sorry file could not upload";
                        }
                    } else {
                        $response["status"] = 0;
                        $response["message"] = "Please upload image file.";
                    }

                } else {
                    $response["status"] = 0;
                    $response["message"] = "Please upload file.";
                }
            } else {
                $response["status"] = 0;
                $response["message"] = "Sorry file could not post.";
            }
            return json_encode($response);
        } else {
            exit();
        }
    }


    public function patient_history($patient_type, $patient_id)
    {
        //echo base64_encode(981);die;
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User');
        $patient_id = base64_decode($patient_id);
        if ($patient_type == 'CU') {
            $query = "select * from (select 'Registration' as label, ac.dob,  ac.first_name as patient_name, ac.uhid, DATE_FORMAT(ac.created,'%d %M, %Y %H:%i') as date,  ac.gender, ac.age, ac.parents_name, ac.profile_photo, '' AS purpose, '' as amount, ac.created from appointment_customers as ac  where ac.id = $patient_id UNION ALL select 'Appointment' as label,  ac.dob, ac.first_name as patient_name, ac.uhid, DATE_FORMAT(acss.created,'%d %M, %Y %H:%i')	as date, ac.gender, ac.age, ac.parents_name, ac.profile_photo, acss.reason_of_appointment AS purpose, '' as amount, acss.created from appointment_customers as ac right join appointment_customer_staff_services as acss on acss.appointment_customer_id = ac.id where ac.id = $patient_id UNION ALL select 'Billing' as label, ac.dob,  ac.first_name as patient_name, ac.uhid, DATE_FORMAT(mpo.created,'%d %M, %Y %H:%i')	as date, ac.gender, ac.age, ac.parents_name, ac.profile_photo, '' AS purpose, mpo.total_amount as amount, mpo.created from appointment_customers as ac right join medical_product_orders as mpo on mpo.appointment_customer_id = ac.id where ac.id = $patient_id UNION ALL select 'Lab Report' as label,  ac.dob,  ac.first_name as patient_name, ac.uhid, DATE_FORMAT(df.created,'%d %M, %Y %H:%i')	as date, ac.gender, ac.age, ac.parents_name, ac.profile_photo, d_f.file_path AS purpose, '' as amount, d_f.created from  appointment_customers as ac right join drive_folders as df on df.folder_add_from_number = ac.mobile and ac.thinapp_id = df.thinapp_id join drive_files as d_f on d_f.drive_folder_id = df.id where ac.id = $patient_id) as final order by final.created asc";

        } else {
            $query = "select * from (select 'Registration' as label, ac.dob,  ac.child_name as patient_name, ac.uhid, DATE_FORMAT(ac.created,'%d %M, %Y %H:%i') as date,  ac.gender, ac.parents_name, ac.image as profile_photo, '' AS purpose, '' as amount, ac.created from childrens as ac  where ac.id = $patient_id UNION ALL select 'Appointment' as label,  ac.dob, ac.child_name as patient_name, ac.uhid, DATE_FORMAT(acss.created,'%d %M, %Y %H:%i')	as date, ac.gender, ac.parents_name, ac.image as profile_photo, acss.reason_of_appointment AS purpose, '' as amount, acss.created from childrens as ac right join appointment_customer_staff_services as acss on acss.appointment_customer_id = ac.id where ac.id = $patient_id  UNION ALL select 'Billing' as label, ac.dob,  ac.child_name as patient_name, ac.uhid, DATE_FORMAT(mpo.created,'%d %M, %Y %H:%i')	as date, ac.gender, ac.parents_name, ac.image as profile_photo, '' AS purpose, mpo.total_amount as amount, mpo.created from childrens as ac right join medical_product_orders as mpo on mpo.children_id = ac.id where ac.id = $patient_id UNION ALL select 'Lab Report' as label,  ac.dob,  ac.child_name as patient_name, ac.uhid, DATE_FORMAT(df.created,'%d %M, %Y %H:%i')	as date, ac.gender, ac.parents_name, ac.image as profile_photo, d_f.file_path AS purpose, '' as amount, d_f.created from  childrens as ac right join drive_folders as df on df.child_number = ac.child_number and ac.thinapp_id = df.thinapp_id join drive_files as d_f on d_f.drive_folder_id = df.id where ac.id = $patient_id UNION ALL select 'Vaccination' as label,  ac.dob,  ac.child_name as patient_name, ac.uhid, DATE_FORMAT(cv.vac_done_date,'%d %M, %Y %H:%i')	as date, ac.gender, ac.parents_name, ac.image as profile_photo, GROUP_CONCAT(' ',CONCAT_WS(' ',amv.vac_name,amv.vac_dose_name)) AS purpose, '' as amount, cv.modified from  childrens as ac join child_vaccinations as cv on ac.id = cv.children_id and cv.status = 'DONE' join app_master_vaccinations as amv on cv.app_master_vaccination_id = amv.id where ac.id = $patient_id group by cv.vac_done_date ) as final order by final.created asc";
        }
        $connection = ConnectionUtil::getConnection();
        $service_message_list = $connection->query($query);
        $data = array();
        if ($service_message_list->num_rows) {
            $data = mysqli_fetch_all($service_message_list, MYSQL_ASSOC);

        }
        $this->set(compact('data'));

    }


    public function search_opd()
    {
        $reqData = $this->request->query;
        $pram = array();
        if (!empty($reqData['name'])) {
            $pram['n'] = $reqData['name'];
        }

        if (!empty($reqData['mobile'])) {
            $pram['m'] = $reqData['mobile'];
        }

        if (!empty($reqData['from_date'])) {
            $pram['fd'] = $reqData['from_date'];
        }
        if (!empty($reqData['to_date'])) {
            $pram['td'] = $reqData['to_date'];
        }
        if (!empty($reqData['uhid'])) {
            $pram['u'] = $reqData['uhid'];
        }

        $this->redirect(
            array(
                "controller" => "app_admin",
                "action" => "opd",
                "?" => $pram,
            )
        );
    }

    public function opd()
    {
        $this->layout = 'app_admin_home';

        $login = $this->Session->read('Auth.User');

        $searchData = $this->request->query;


        $conditions["AppointmentCustomerStaffService.thinapp_id"] = $login['User']['thinapp_id'];
        $conditions["AppointmentCustomerStaffService.status <>"] = array('CANCELED', 'DELETED');


        if (isset($searchData['n']) && !empty($searchData['n']) && isset($searchData['m']) && !empty($searchData['m'])) {

            $this->request->data['Search']['name'] = $searchData['n'];
            $this->request->data['Search']['mobile'] = $searchData['m'];
            $conditions['AND'] = array(array(
                'OR' => array(
                    'AppointmentCustomer.first_name like' => "%" . $searchData['n'] . "%",
                    'Children.child_name like' => "%" . $searchData['n'] . "%"
                )
            ),
                array(
                    'OR' => array(
                        'AppointmentCustomer.mobile like' => "%" . $searchData['m'] . "%",
                        'Children.mobile like' => "%" . $searchData['m'] . "%"
                    )
                )

            );


        } else {


            if (isset($searchData['n']) && !empty($searchData['n'])) {
                $this->request->data['Search']['name'] = $searchData['n'];
                $conditions['OR'] = array(
                    'AppointmentCustomer.first_name like' => "%" . $searchData['n'] . "%",
                    'Children.child_name like' => "%" . $searchData['n'] . "%"
                );

            }

            if (isset($searchData['m']) && !empty($searchData['m'])) {
                $this->request->data['Search']['mobile'] = $searchData['m'];
                $conditions['OR'] = array(
                    'AppointmentCustomer.mobile like' => "%" . $searchData['m'] . "%",
                    'Children.mobile like' => "%" . $searchData['m'] . "%"
                );
            }
        }

        if (isset($searchData['u']) && !empty($searchData['u'])) {
            $this->request->data['Search']['uhid'] = $searchData['u'];
            $conditions['OR'] = array(
                'AppointmentCustomer.uhid like' => "%" . $searchData['u'] . "%",
                'Children.uhid like' => "%" . $searchData['u'] . "%"
            );
        }


        if (isset($searchData['fd']) && !empty($searchData['fd']) && isset($searchData['td']) && !empty($searchData['td'])) {

            $this->request->data['Search']['from_date'] = $searchData['fd'];
            $this->request->data['Search']['to_date'] = $searchData['td'];

            $from_date = DateTime::createFromFormat('d/m/Y', $searchData['fd']);
            $conditions["Date(AppointmentCustomerStaffService.created) >="] = $from_date->format('Y-m-d');

            $to_date = DateTime::createFromFormat('d/m/Y', $searchData['td']);
            $conditions["Date(AppointmentCustomerStaffService.created) <="] = $to_date->format('Y-m-d');

        } else {

            if (count($searchData) > 1) {
                if (isset($searchData['fd']) && !empty($searchData['fd']) && isset($searchData['td']) && !empty($searchData['td'])) {
                    $this->request->data['Search']['from_date'] = date('d/m/Y');
                    $this->request->data['Search']['to_date'] = date('d/m/Y');
                    $conditions["Date(AppointmentCustomerStaffService.created) >="] = date('Y-m-d');
                    $conditions["Date(AppointmentCustomerStaffService.created) <="] = date('Y-m-d');
                }
            } else {
                $this->request->data['Search']['from_date'] = date('d/m/Y');
                $this->request->data['Search']['to_date'] = date('d/m/Y');
                $conditions["Date(AppointmentCustomerStaffService.created) >="] = date('Y-m-d');
                $conditions["Date(AppointmentCustomerStaffService.created) <="] = date('Y-m-d');
            }


        }


        $opd_list = $this->AppointmentCustomerStaffService->find('all', array(
                'contain' => array('AppointmentStaff', 'AppointmentCustomer', 'Children', 'CustomerAdmitDetail' => array('HospitalDischarge'), 'ChildrenAdmitDetail' => array('HospitalDischarge')),
                'conditions' => $conditions,
                'order' => 'AppointmentCustomerStaffService.appointment_datetime DESC',
                'fields' => array(
                    'AppointmentCustomerStaffService.id', 'AppointmentStaff.name', 'AppointmentCustomerStaffService.queue_number', 'AppointmentCustomerStaffService.amount', 'AppointmentCustomerStaffService.status', 'AppointmentCustomerStaffService.created',
                    'AppointmentCustomer.id', 'AppointmentCustomer.uhid', 'AppointmentCustomer.mobile', 'AppointmentCustomer.first_name', 'AppointmentCustomer.created',
                    'Children.id', 'Children.uhid', 'Children.mobile', 'Children.child_name', 'Children.created',
                    'CustomerAdmitDetail.*', 'ChildrenAdmitDetail.*'
                ))
        );
        //pr($opd_list);die;

        $login1 = $this->Session->read('Auth.User');
        $reportTitle = $login1['Thinapp']['name'].' ('.$this->request->data['Search']['from_date'].' - '.$this->request->data['Search']['to_date'].')';
        $this->set(compact('reportTitle','opd_list'));

    }

    public function admit_patient($patient_type, $patient_id = null, $appointment_id = null)
    {
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User');

        $reason = $notes = $refer_by = $refer_mobile = '';

        if (!empty($appointment_id)) {

            $post = $this->AppointmentCustomerStaffService->find("first", array(
                "conditions" => array(
                    "AppointmentCustomerStaffService.id" => base64_decode($appointment_id),
                ),
                'contain' => false
            ));
            $reason = @$post['AppointmentCustomerStaffService']['reason_of_appointment'];
            $notes = @$post['AppointmentCustomerStaffService']['notes'];
            $refer_by = @$post['AppointmentCustomerStaffService']['referred_by'];
            $refer_mobile = @$post['AppointmentCustomerStaffService']['referred_by_mobile'];
        }
        if ($patient_type == "CU") {
            $object = 'AppointmentCustomer';
            $post = $this->AppointmentCustomer->find("first", array(
                "conditions" => array(
                    "AppointmentCustomer.id" => base64_decode($patient_id),
                ),
                'contain' => false
            ));

            $conceive_date =$post['AppointmentCustomer']['conceive_date'];
            $expected_date =$post['AppointmentCustomer']['expected_date'];
            if(!empty($conceive_date) && $conceive_date != '0000-00-00'){
                $post['AppointmentCustomer']['conceive_date'] = date('d/m/Y',strtotime($conceive_date));
            }else{
                $post['AppointmentCustomer']['conceive_date'] = '';
            }
            if(!empty($expected_date)  && $expected_date != '0000-00-00' ){
                $post['AppointmentCustomer']['expected_date'] = date('d/m/Y',strtotime($expected_date));
            }else{
                $post['AppointmentCustomer']['expected_date'] = '';
            }


            $patient_name = $post['AppointmentCustomer']['first_name'];
        } else {
            $object = 'Children';
            $post = $this->Children->find("first", array(
                "conditions" => array(
                    "Children.id" => base64_decode($patient_id),
                ),
                'contain' => false
            ));
            $patient_name = $post['Children']['child_name'];
        }


        if ($this->request->is(array('post', 'put'))) {


            $datasource = $this->HospitalIpd->getDataSource();
            try {
                $datasource->begin();

                $post_data = $this->request->data['HospitalIpd'];
                if ($patient_type == "CU") {
                    $patient_type = "CUSTOMER";

                    $this->request->data['AppointmentCustomer']['id'] = base64_decode($patient_id);
                    $this->request->data['AppointmentCustomer']['first_name'] = $post_data['name'];
                    $this->request->data['AppointmentCustomer']['gender'] = $post_data['gender'];
                    $this->request->data['AppointmentCustomer']['age'] = $post_data['age'];
                    $this->request->data['AppointmentCustomer']['blood_group'] = $post_data['blood_group'];
                    $this->request->data['AppointmentCustomer']['uhid'] = $post_data['uhid'];

                    if (!empty($post_data['dob'])) {
                        $date = DateTime::createFromFormat('d/m/Y', $post_data['dob']);
                        $this->request->data['AppointmentCustomer']['dob'] = $date->format('Y-m-d');
                    }
                    if (!empty($post_data['conceive_date'])) {
                        $date = DateTime::createFromFormat('d/m/Y', $post_data['conceive_date']);
                        $this->request->data['AppointmentCustomer']['conceive_date'] = $date->format('Y-m-d');
                    }
                    if (!empty($post_data['expected_date'])) {
                        $date = DateTime::createFromFormat('d/m/Y', $post_data['expected_date']);
                        $this->request->data['AppointmentCustomer']['expected_date'] = $date->format('Y-m-d');
                    }

                    /*$this->request->data['AppointmentCustomer']['country_id'] = @$post_data['country_id'];
                    $this->request->data['AppointmentCustomer']['state_id'] = @$post_data['state_id'];
                    $this->request->data['AppointmentCustomer']['city_id'] = @$post_data['city_id'];*/


                    $this->request->data['AppointmentCustomer']['country_id'] = isset($post_data['country_id'][0])?$post_data['country_id'][0]:0;
                    $this->request->data['AppointmentCustomer']['state_id'] = isset($post_data['state_id'][0])?$post_data['state_id'][0]:0;

                    if(isset($post_data['city_id'][0]) && is_numeric($post_data['city_id'][0]))
                    {
                        $cityData = $this->Cities->findById($post_data['city_id'][0],array("contain"=>false));
                        $this->request->data['AppointmentCustomer']['city_name'] = ucwords(strtolower(trim($cityData['Cities']['name'])));
                        $this->request->data['AppointmentCustomer']['city_id'] = $cityData['Cities']['id'];
                    }
                    else if(isset($post_data['city_id'][0]) && !empty($post_data['city_id'][0]))
                    {
                        $this->request->data['AppointmentCustomer']['city_id'] = 0;
                        $this->request->data['AppointmentCustomer']['city_name'] = ucwords(strtolower(trim($post_data['city_id'][0])));
                    }
                    else
                    {
                        $this->request->data['AppointmentCustomer']['city_id'] = 0;
                        $this->request->data['AppointmentCustomer']['city_name'] = "";
                    }


                } else {
                    $patient_type = "CHILDREN";

                    $this->request->data['Children']['id'] = base64_decode($patient_id);
                    $this->request->data['Children']['child_name'] = $post_data['name'];
                    /*$this->request->data['Children']['country_id'] = @$post_data['country_id'];
                    $this->request->data['Children']['state_id'] = @$post_data['state_id'];
                    $this->request->data['Children']['city_id'] = @$post_data['city_id'];*/

                    $this->request->data['Children']['country_id'] = isset($post_data['country_id'][0])?$post_data['country_id'][0]:0;
                    $this->request->data['Children']['state_id'] = isset($post_data['state_id'][0])?$post_data['state_id'][0]:0;

                    if(isset($post_data['city_id'][0]) && is_numeric($post_data['city_id'][0]))
                    {
                        $cityData = $this->Cities->findById($post_data['city_id'][0],array("contain"=>false));
                        $this->request->data['Children']['city_name'] = ucwords(strtolower(trim($cityData['Cities']['name'])));
                        $this->request->data['Children']['city_id'] = $cityData['Cities']['id'];

                    }
                    else if(isset($post_data['city_id'][0]) && !empty($post_data['city_id'][0]))
                    {
                        $this->request->data['Children']['city_id'] = 0;
                        $this->request->data['Children']['city_name'] = ucwords(strtolower(trim($post_data['city_id'][0])));
                    }
                    else
                    {
                        $this->request->data['Children']['city_id'] = 0;
                        $this->request->data['Children']['city_name'] = "";
                    }


                }

                $this->request->data['HospitalIpd']['appointment_customer_staff_service_id'] = !empty($appointment_id) ? base64_decode($appointment_id) : 0;

                $this->request->data['HospitalIpd']['patient_type'] = $patient_type;
                $this->request->data['HospitalIpd']['patient_id'] = base64_decode($patient_id);
                $this->request->data['HospitalIpd']['thinapp_id'] = $login['User']['thinapp_id'];
                $date = DateTime::createFromFormat('d/m/Y h:i A', $post_data['admit_date']);
                $admitDate = $date->format('Y-m-d H:i');
                $this->request->data['HospitalIpd']['admit_date'] = $admitDate;
                if (!empty($this->request->data['HospitalIpd']['referred_by_mobile'])) {
                    $this->request->data['HospitalIpd']['referred_by_mobile'] = Custom::create_mobile_number($this->request->data['HospitalIpd']['referred_by_mobile']);
                }
                $this->HospitalIpd->set($this->request->data['HospitalIpd']);
                if ($this->HospitalIpd->validates()) {
                    if ($this->HospitalIpd->saveAssociated($this->request->data, array('atomic' => false))) {

                        $ipdID = $this->HospitalIpd->getLastInsertId();
                        $dataToSaveToInIpdbedHistory = array();
                        $dataToSaveToInIpdbedHistory['thinapp_id'] = $login['User']['thinapp_id'];
                        $dataToSaveToInIpdbedHistory['patient_type'] = $patient_type;
                        $dataToSaveToInIpdbedHistory['patient_id'] = base64_decode($patient_id);;
                        $dataToSaveToInIpdbedHistory['hospital_ipd_id'] = $ipdID;
                        $dataToSaveToInIpdbedHistory['hospital_service_category_id'] = $this->request->data['HospitalIpd']['hospital_service_category_id'];
                        $dataToSaveToInIpdbedHistory['hospital_service_id'] = $this->request->data['HospitalIpd']['hospital_service_id'];
                        $dataToSaveToInIpdbedHistory['from_date'] = $admitDate;
                        $this->IpdBedHistory->save($dataToSaveToInIpdbedHistory);


                        if (!empty($this->request->data['HospitalIpd']['conceive_date'])) {
                            try {
                                $from_date = DateTime::createFromFormat('d/m/Y', $this->request->data['HospitalIpd']['conceive_date']);
                                $conceive_date = $from_date->format('Y-m-d');
                                $expected_date = '';
                                if (!empty($this->request->data['HospitalIpd']['expected_date'])) {
                                    try {
                                        $from_date = DateTime::createFromFormat('d/m/Y', $this->request->data['HospitalIpd']['expected_date']);
                                        $expected_date = $from_date->format('Y-m-d');
                                    } catch (Exception $e) {

                                    }
                                }
                                $conceive_data = array(
                                    'thinapp_id' => $login['User']['thinapp_id'],
                                    'appointment_customer_id' => base64_decode($patient_id),
                                    'doctor_id' => $this->request->data['HospitalIpd']['appointment_staff_id'],
                                    'conceive_date' => $conceive_date,
                                    'expected_date' => $expected_date,
                                    'appointment_id' => $this->request->data['HospitalIpd']['appointment_customer_staff_service_id'],
                                );
                                $result = $this->PregnancySemester->saveAll($conceive_data);
                            } catch (Exception $e) {

                            }
                        }


                        $datasource->commit();
                        $this->Session->setFlash(__('Patient admit successfully.'), 'default', array(), 'success');
                        $this->redirect(array('controller' => 'app_admin', 'action' => 'ipd'));
                    } else {
                        $this->Session->setFlash(__('Sorry member could not admit.'), 'default', array(), 'error');
                    }
                }
            } catch (Exception $e) {
                    echo $e->getMessage();die;
            }

        }


        if (!$this->request->data) {
            $this->request->data = $post;
            $this->request->data['HospitalIpd']['reason_for_appointment'] = $reason;
            $this->request->data['HospitalIpd']['remark'] = $notes;
            $this->request->data['HospitalIpd']['referred_by_name'] = $refer_by;
            $this->request->data['HospitalIpd']['referred_by_mobile'] = $refer_mobile;
        }

        //pr($post);die;
        $this->set(compact('post', 'object', 'patient_name', 'patient_type'));

    }


    public function search_ipd()
    {
        $reqData = $this->request->query;
        $pram = array();
        if (!empty($reqData['name'])) {
            $pram['n'] = $reqData['name'];
        }
        if (!empty($reqData['list_type'])) {
            $pram['lt'] = $reqData['list_type'];
        }

        if (!empty($reqData['mobile'])) {
            $pram['m'] = $reqData['mobile'];
        }

        if (!empty($reqData['from_date'])) {
            $pram['fd'] = $reqData['from_date'];
        }
        if (!empty($reqData['to_date'])) {
            $pram['td'] = $reqData['to_date'];
        }
        if (!empty($reqData['uhid'])) {
            $pram['u'] = $reqData['uhid'];
        }
        if (!empty($reqData['ipd_unique_id'])) {
            $pram['iui'] = $reqData['ipd_unique_id'];
        }
        if (!empty($reqData['consultant'])) {
            $pram['co'] = $reqData['consultant'];
        }

        $this->redirect(
            array(
                "controller" => "app_admin",
                "action" => "ipd",
                "?" => $pram,
            )
        );
    }

    public function ipd()
    {
        $this->layout = 'app_admin_home';

        $login = $this->Session->read('Auth.User');

        $searchData = $this->request->query;


        $conditions["HospitalIpd.thinapp_id"] = $login['User']['thinapp_id'];
        $conditions["HospitalIpd.admit_status"] = 'ADMIT';
        $conditions["HospitalIpd.status"] = 'ACTIVE';
        if (isset($searchData['lt']) && !empty($searchData['lt'])) {
            $list_type = $searchData['lt'];
            if ($list_type == 'a') {
                $conditions["HospitalIpd.admit_status"] = 'ADMIT';
            } else if ($list_type == 'td') {
                $conditions["HospitalIpd.to_discharge_date <>"] = '0000-00-00';
            } else if ($list_type == 'd') {
                $conditions["HospitalIpd.admit_status"] = 'DISCHARGE';
            }
            $this->request->data['Search']['list_type'] = $searchData['lt'];

        }


        if (isset($searchData['n']) && !empty($searchData['n']) && isset($searchData['m']) && !empty($searchData['m'])) {

            $this->request->data['Search']['name'] = $searchData['n'];
            $this->request->data['Search']['mobile'] = $searchData['m'];
            $conditions['AND'] = array(array(
                'OR' => array(
                    'AppointmentCustomer.first_name like' => "%" . $searchData['n'] . "%",
                    'Children.child_name like' => "%" . $searchData['n'] . "%"
                )
            ),
                array(
                    'OR' => array(
                        'AppointmentCustomer.mobile like' => "%" . $searchData['m'] . "%",
                        'Children.mobile like' => "%" . $searchData['m'] . "%"
                    )
                )

            );


        } else {


            if (isset($searchData['n']) && !empty($searchData['n'])) {
                $this->request->data['Search']['name'] = $searchData['n'];
                $conditions['OR'] = array(
                    'AppointmentCustomer.first_name like' => "%" . $searchData['n'] . "%",
                    'Children.child_name like' => "%" . $searchData['n'] . "%"
                );

            }

            if (isset($searchData['m']) && !empty($searchData['m'])) {
                $this->request->data['Search']['mobile'] = $searchData['m'];
                $conditions['OR'] = array(
                    'AppointmentCustomer.mobile like' => "%" . $searchData['m'] . "%",
                    'Children.mobile like' => "%" . $searchData['m'] . "%"
                );
            }
        }

        if (isset($searchData['u']) && !empty($searchData['u'])) {
            $this->request->data['Search']['uhid'] = $searchData['u'];
            $conditions['OR'] = array(
                'AppointmentCustomer.uhid like' => "%" . $searchData['u'] . "%",
                'Children.uhid like' => "%" . $searchData['u'] . "%"
            );
        }
        if (isset($searchData['iui']) && !empty($searchData['iui'])) {
            $this->request->data['Search']['ipd_unique_id'] = $searchData['iui'];
            $conditions['HospitalIpd.ipd_unique_id like'] = "%" . $searchData['iui'] . "%";
        }

        if (isset($searchData['co']) && !empty($searchData['co'])) {
            $this->request->data['Search']['consultant'] = $searchData['co'];
            $conditions['HospitalIpd.appointment_staff_id'] = $searchData['co'];
        }


        if (isset($searchData['fd']) && !empty($searchData['fd']) && isset($searchData['td']) && !empty($searchData['td'])) {
            $this->request->data['Search']['from_date'] = $searchData['fd'];
            $this->request->data['Search']['to_date'] = $searchData['td'];
            $from_date = DateTime::createFromFormat('d/m/Y', $searchData['fd']);
            $to_date = DateTime::createFromFormat('d/m/Y', $searchData['td']);
            if($conditions["HospitalIpd.admit_status"]=='DISCHARGE'){
                $conditions["Date(HospitalDischarge.discharge_date) >="] = $from_date->format('Y-m-d');
                $conditions["Date(HospitalDischarge.discharge_date) <="] = $to_date->format('Y-m-d');
            }else if($conditions["HospitalIpd.admit_status"]=='ADMIT'){
                $conditions["Date(HospitalIpd.admit_date) >="] = $from_date->format('Y-m-d');
                $conditions["Date(HospitalIpd.admit_date) <="] = $to_date->format('Y-m-d');
            }else{
                $conditions["Date(HospitalIpd.to_discharge_date) >="] = $from_date->format('Y-m-d');
                $conditions["Date(HospitalIpd.to_discharge_date) <="] = $to_date->format('Y-m-d');
            }
        }else{
            

        }

        $ipd_list = $this->HospitalIpd->find('all', array(
            'contain' => array('HospitalServiceCategory', 'AppointmentStaff', 'AppointmentCustomer', 'Children', 'HospitalDischarge'),
            'conditions' => $conditions,
            'order' => 'HospitalIpd.id DESC'

        ));
        //pr($ipd_list);die;




        $login1 = $this->Session->read('Auth.User');
        $reportTitle = $login1['Thinapp']['name'].' ('.@$this->request->data['Search']['from_date'].' - '.@$this->request->data['Search']['to_date'].')';

        $this->set(compact('ipd_list','reportTitle'));

    }


    public function search_emergency()
    {
        $reqData = $this->request->query;
        $pram = array();
        if (!empty($reqData['name'])) {
            $pram['n'] = $reqData['name'];
        }

        if (!empty($reqData['mobile'])) {
            $pram['m'] = $reqData['mobile'];
        }

        if (!empty($reqData['from_date'])) {
            $pram['fd'] = $reqData['from_date'];
        }
        if (!empty($reqData['to_date'])) {
            $pram['td'] = $reqData['to_date'];
        }
        if (!empty($reqData['uhid'])) {
            $pram['u'] = $reqData['uhid'];
        }

        $this->redirect(
            array(
                "controller" => "app_admin",
                "action" => "emergency",
                "?" => $pram,
            )
        );
    }

    public function emergency()
    {
        $this->layout = 'app_admin_home';

        $login = $this->Session->read('Auth.User');

        $searchData = $this->request->query;


        $conditions["HospitalEmergency.thinapp_id"] = $login['User']['thinapp_id'];
        $conditions["HospitalEmergency.status"] = 'ACTIVE';


        if (isset($searchData['n']) && !empty($searchData['n']) && isset($searchData['m']) && !empty($searchData['m'])) {

            $this->request->data['Search']['name'] = $searchData['n'];
            $this->request->data['Search']['mobile'] = $searchData['m'];
            $conditions['AND'] = array(array(
                'OR' => array(
                    'AppointmentCustomer.first_name like' => "%" . $searchData['n'] . "%",
                    'Children.child_name like' => "%" . $searchData['n'] . "%"
                )
            ),
                array(
                    'OR' => array(
                        'AppointmentCustomer.mobile like' => "%" . $searchData['m'] . "%",
                        'Children.mobile like' => "%" . $searchData['m'] . "%"
                    )
                )

            );


        } else {


            if (isset($searchData['n']) && !empty($searchData['n'])) {
                $this->request->data['Search']['name'] = $searchData['n'];
                $conditions['OR'] = array(
                    'AppointmentCustomer.first_name like' => "%" . $searchData['n'] . "%",
                    'Children.child_name like' => "%" . $searchData['n'] . "%"
                );

            }

            if (isset($searchData['m']) && !empty($searchData['m'])) {
                $this->request->data['Search']['mobile'] = $searchData['m'];
                $conditions['OR'] = array(
                    'AppointmentCustomer.mobile like' => "%" . $searchData['m'] . "%",
                    'Children.mobile like' => "%" . $searchData['m'] . "%"
                );
            }
        }

        if (isset($searchData['u']) && !empty($searchData['u'])) {
            $this->request->data['Search']['uhid'] = $searchData['u'];
            $conditions['OR'] = array(
                'AppointmentCustomer.uhid like' => "%" . $searchData['u'] . "%",
                'Children.uhid like' => "%" . $searchData['u'] . "%"
            );
        }


        if (isset($searchData['fd']) && !empty($searchData['fd']) && isset($searchData['td']) && !empty($searchData['td'])) {

            $this->request->data['Search']['from_date'] = $searchData['fd'];
            $this->request->data['Search']['to_date'] = $searchData['td'];

            $from_date = DateTime::createFromFormat('d/m/Y', $searchData['fd']);
            $conditions["Date(HospitalEmergency.created) >="] = $from_date->format('Y-m-d');

            $to_date = DateTime::createFromFormat('d/m/Y', $searchData['td']);
            $conditions["Date(HospitalEmergency.created) <="] = $to_date->format('Y-m-d');

        } else {


            if (count($searchData) > 1) {
                if (isset($searchData['fd']) && !empty($searchData['fd']) && isset($searchData['td']) && !empty($searchData['td'])) {
                    $this->request->data['Search']['from_date'] = date('d/m/Y');
                    $this->request->data['Search']['to_date'] = date('d/m/Y');
                    $conditions["Date(HospitalEmergency.created) >="] = date('Y-m-d');
                    $conditions["Date(HospitalEmergency.created) <="] = date('Y-m-d');
                }
            } else {
                $this->request->data['Search']['from_date'] = date('d/m/Y');
                $this->request->data['Search']['to_date'] = date('d/m/Y');
                $conditions["Date(HospitalEmergency.created) >="] = date('Y-m-d');
                $conditions["Date(HospitalEmergency.created) <="] = date('Y-m-d');
            }


        }


        $opd_list = $this->HospitalEmergency->find('all', array(
                'contain' => array('AppointmentStaff', 'AppointmentCustomer', 'Children', 'CustomerAdmitDetail' => array('HospitalDischarge'), 'ChildrenAdmitDetail' => array('HospitalDischarge')),
                'conditions' => $conditions,
                'order' => 'HospitalEmergency.id DESC',
                'group' => array('HospitalEmergency.id'),
                'fields' => array(
                    'HospitalEmergency.id', 'HospitalEmergency.admit_date', 'AppointmentStaff.name', 'HospitalEmergency.status', 'HospitalEmergency.created',
                    'AppointmentCustomer.id', 'AppointmentCustomer.uhid', 'AppointmentCustomer.mobile', 'AppointmentCustomer.first_name', 'AppointmentCustomer.created',
                    'Children.id', 'Children.uhid', 'Children.mobile', 'Children.child_name', 'Children.created',
                    'CustomerAdmitDetail.*', 'ChildrenAdmitDetail.*'
                ))
        );





        $login1 = $this->Session->read('Auth.User');
        $reportTitle = $login1['Thinapp']['name'].' ('.$this->request->data['Search']['from_date'].' - '.$this->request->data['Search']['to_date'].')';
        //echo "<pre>";
        //print_r($opd_list);die;
        $this->set(compact('reportTitle','opd_list'));

    }


    public function discharge_patient($ipd_id, $discharge_id = null)
    {
        $param_string = $ipd_id."/".$discharge_id;
    	$this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User');
        $ipdRow = $ipd_id;
        $ipd_id = base64_decode($ipd_id);

        $ipd_data = $this->HospitalIpd->find("first", array(
            "conditions" => array(
                "HospitalIpd.id" => $ipd_id
            ),
            'contain' => array('AppointmentStaff','HospitalServiceCategory')
        ));
        if (!empty($ipd_data)) {

            $patient_type = $ipd_data['HospitalIpd']['patient_type'];
            $patient_id = $ipd_data['HospitalIpd']['patient_id'];


            $post = $discharge = $this->HospitalDischarge->find("first", array(
                "conditions" => array(
                    "HospitalDischarge.id" => base64_decode($discharge_id),
                ),
                'contain' => array('AppointmentStaff', 'AppointmentCustomer', 'Children', 'Thinapp')
            ));
            $patient_name = @trim($post['Children']['child_name'] . $post['AppointmentCustomer']['first_name']);
            $object = ($patient_type == "CUSTOMER") ? 'AppointmentCustomer' : "Children";


            if (empty($post)) {
                if ($patient_type == "CUSTOMER") {
                    $object = 'AppointmentCustomer';
                    $post = $this->AppointmentCustomer->find("first", array(
                        "conditions" => array(
                            "AppointmentCustomer.id" => $patient_id,
                        ),
                        'contain' => array('Thinapp')
                    ));
                    $patient_name = $post['AppointmentCustomer']['first_name'];
                } else {
                    $object = 'Children';
                    $post = $this->Children->find("first", array(
                        "conditions" => array(
                            "Children.id" => $patient_id,
                        ),
                        'contain' => array('Thinapp')
                    ));
                    $patient_name = $post['Children']['child_name'];
                }
            }

            if ($this->request->is(array('post', 'put'))) {

                $this->request->data['HospitalIpd']['id'] = $ipd_data['HospitalIpd']['id'];
                $this->request->data['HospitalIpd']['admit_status'] = 'DISCHARGE';
                $this->request->data['HospitalDischarge']['patient_type'] = $patient_type;
                $this->request->data['HospitalDischarge']['patient_id'] = $patient_id;
                $this->request->data['HospitalDischarge']['thinapp_id'] = $ipd_data['HospitalIpd']['thinapp_id'];

                try {
                    $dischargeDate = date('Y-m-d H:i:s');
                    if (!empty($this->request->data['HospitalDischarge']['discharge_date'])) {
                        $date = DateTime::createFromFormat('d/m/Y h:i A', $this->request->data['HospitalDischarge']['discharge_date']);
                        $dischargeDate = $date->format('Y-m-d H:i:s');
                        $this->request->data['HospitalDischarge']['discharge_date'] = $dischargeDate;
                    }

                    if (!empty($this->request->data['HospitalDischarge']['surgery_date'])) {
                        $date = DateTime::createFromFormat('d/m/Y h:i A', $this->request->data['HospitalDischarge']['surgery_date']);
                        $this->request->data['HospitalDischarge']['surgery_date'] = $date->format('Y-m-d H:i:s');
                    }else{
                        $this->request->data['HospitalDischarge']['surgery_date'] = '';
                    }

                } catch (Exception $e) {

                }

                if (!empty($discharge)) {
                    $this->request->data['HospitalDischarge']['id'] = $discharge['HospitalDischarge']['id'];
                }
                $this->HospitalDischarge->set($this->request->data['HospitalDischarge']);

                if ($this->HospitalDischarge->validates()) {
                    if ($this->HospitalDischarge->saveAll($this->request->data)) {



                        if($discharge_id == null)
                        {
                            $dischargeID = $this->HospitalDischarge->getLastInsertId();
                            $IpdBedHistoryData = $this->IpdBedHistory->find("first",array("conditions"=>array("IpdBedHistory.hospital_ipd_id"=>$ipd_id),"contain"=>false,"order"=>"IpdBedHistory.id DESC"));
                            if(!empty($IpdBedHistoryData))
                            {
                                $dataToSaveInBedHistory = array(
                                    'id' => $IpdBedHistoryData['IpdBedHistory']['id'],
                                    'to_date' => $dischargeDate,
                                    'occupancy' => "UNOCCUPIED",
                                    'hospital_discharge_id' => $dischargeID,
                                );
                                $this->IpdBedHistory->save($dataToSaveInBedHistory);
                            }

                        }
                        else
                        {
                            $dischargeID = base64_decode($discharge_id);
                            $dataToSaveInBedHistory = array(
                                'IpdBedHistory.to_date' => "'".$dischargeDate."'",
                                'IpdBedHistory.occupancy' => "'UNOCCUPIED'",
                            );
                            $this->IpdBedHistory->updateAll($dataToSaveInBedHistory, array('IpdBedHistory.hospital_discharge_id' => $dischargeID));
                        }


                        $this->Session->setFlash(__('Patient discharge successfully.'), 'default', array(), 'success');
                        $this->redirect(array('controller' => 'app_admin', 'action' => "discharge_patient/$param_string"));
                    } else {
                        $this->Session->setFlash(__('Sorry member could not discharge.'), 'default', array(), 'error');
                    }
                }
            }
            if (!$this->request->data) {
                $this->request->data = $post;

            }
            $ipd_id = $ipdRow;
            $this->set(compact('post', 'object', 'patient_name', 'patient_type', 'ipd_data', 'ipd_id', 'discharge_id'));

        } else {
            exit();
        }

    }


    public function add_ipd_patient()
    {

        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User');
        if ($this->request->is(array('post', 'put'))) {
            $datasource = $this->AppointmentCustomer->getDataSource();
            try {

                $this->request->data['AppointmentCustomer']['thinapp_id'] = $login['User']['thinapp_id'];
                $user_data = Custom::get_user_by_mobile($login['User']['thinapp_id'], $this->request->data['AppointmentCustomer']['mobile']);
                $this->request->data['AppointmentCustomer']['user_id'] = !empty($user_data) ? $user_data['id'] : 0;
                $this->request->data['AppointmentCustomer']['customer_created_by'] = $login['User']['id'];

                $post_data = $this->request->data['AppointmentCustomer'];
                $this->request->data['AppointmentCustomer']['country_id'] = isset($post_data['country_id'][0])?$post_data['country_id'][0]:0;
                $this->request->data['AppointmentCustomer']['state_id'] = isset($post_data['state_id'][0])?$post_data['state_id'][0]:0;

                if(isset($post_data['city_id'][0]) && is_numeric($post_data['city_id'][0]))
                {
                    $cityData = $this->Cities->findById($post_data['city_id'][0],array("contain"=>false));
                    $this->request->data['AppointmentCustomer']['city_name'] = ucwords(strtolower(trim($cityData['Cities']['name'])));
                    $this->request->data['AppointmentCustomer']['city_id'] = $cityData['Cities']['id'];
                }
                else if(isset($post_data['city_id'][0]) && !empty($post_data['city_id'][0]))
                {
                    $this->request->data['AppointmentCustomer']['city_id'] = 0;
                    $this->request->data['AppointmentCustomer']['city_name'] = ucwords(strtolower(trim($post_data['city_id'][0])));
                }
                else
                {
                    $this->request->data['AppointmentCustomer']['city_id'] = 0;
                    $this->request->data['AppointmentCustomer']['city_name'] = "";
                }

                if(empty($this->request->data['AppointmentCustomer']['gender']))
                {
                    $this->request->data['AppointmentCustomer']['gender'] = '';
                }

                if (!empty($this->request->data['AppointmentCustomer']['dob'])) {
                    $date = DateTime::createFromFormat('d/m/Y', $this->request->data['AppointmentCustomer']['dob']);
                    $this->request->data['AppointmentCustomer']['dob'] = $date->format('Y-m-d');
                }
                if (!empty($post_data['conceive_date'])) {
                    $date = DateTime::createFromFormat('d/m/Y', $post_data['conceive_date']);
                    $this->request->data['AppointmentCustomer']['conceive_date'] = $date->format('Y-m-d');
                }
                if (!empty($post_data['expected_date'])) {
                    $date = DateTime::createFromFormat('d/m/Y', $post_data['expected_date']);
                    $this->request->data['AppointmentCustomer']['expected_date'] = $date->format('Y-m-d');
                }
                if (!empty($this->request->data['AppointmentCustomer']['conceive_date'])) {
                    $from_date = DateTime::createFromFormat('d/m/Y', $this->request->data['AppointmentCustomer']['conceive_date']);
                    $this->request->data['AppointmentCustomer']['conceive_date'] = $from_date->format('Y-m-d');

                }
                $this->request->data['AppointmentCustomer']['mobile'] = Custom::create_mobile_number($this->request->data['AppointmentCustomer']['mobile']);
                $this->AppointmentCustomer->set($this->request->data['AppointmentCustomer']);
                $patient_data = Custom::search_customer_name($login['User']['thinapp_id'],$this->request->data['AppointmentCustomer']['mobile'],$this->request->data['AppointmentCustomer']['first_name']);
                if(!empty($patient_data)){
                    $this->request->data['AppointmentCustomer']['id'] = $patient_id = $patient_data['id'];
                }else{
                    $patient_id = 0;
                }
                $already_admin = false;
                if($patient_id > 0){
                    $already_admit_data =  $this->HospitalIpd->find("first", array(
                        "conditions" => array(
                            "HospitalIpd.patient_type" => 'CUSTOMER',
                            "HospitalIpd.patient_id" => $patient_id,
                            "HospitalIpd.status" => 'ACTIVE',
                            "HospitalIpd.admit_status" => 'ADMIT'
                        ),
                        'contain' => false
                    ));
                    if(!empty($already_admit_data)){
                        $already_admin = true;
                    }
                }

                if($already_admin===false){

                    $datasource->begin();
                    if ($this->AppointmentCustomer->save($this->request->data['AppointmentCustomer'])) {
                        if(empty($patient_data)){
                            $patient_id = $this->AppointmentCustomer->getLastInsertId();
                        }
                        $this->request->data['HospitalIpd']['thinapp_id'] = $login['User']['thinapp_id'];
                        if ($this->HospitalIpd->save($this->request->data)) {

                            $ipdID = $this->HospitalIpd->getLastInsertId();
                            $this->request->data['HospitalIpd']['patient_type'] = 'CUSTOMER';
                            $this->request->data['HospitalIpd']['patient_id'] = $patient_id;
                            $date = DateTime::createFromFormat('d/m/Y h:i A', $this->request->data['HospitalIpd']['admit_date']);
                            $admitDate = $date->format('Y-m-d H:i');;
                            $this->request->data['HospitalIpd']['admit_date'] = $admitDate;


                            if (!empty($this->request->data['HospitalIpd']['referred_by_mobile'])) {
                                $this->request->data['HospitalIpd']['referred_by_mobile'] = Custom::create_mobile_number($this->request->data['HospitalIpd']['referred_by_mobile']);
                            }

                            $this->HospitalIpd->set($this->request->data['HospitalIpd']);

                            if ($this->HospitalIpd->validates()) {
                                if ($this->HospitalIpd->save($this->request->data)) {

                                    $dataToSaveToInIpdbedHistory = array();
                                    $dataToSaveToInIpdbedHistory['thinapp_id'] = $login['User']['thinapp_id'];
                                    $dataToSaveToInIpdbedHistory['patient_type'] = 'CUSTOMER';
                                    $dataToSaveToInIpdbedHistory['patient_id'] = $patient_id;
                                    $dataToSaveToInIpdbedHistory['hospital_ipd_id'] = $ipdID;
                                    $dataToSaveToInIpdbedHistory['hospital_service_category_id'] = $this->request->data['HospitalIpd']['hospital_service_category_id'];
                                    $dataToSaveToInIpdbedHistory['hospital_service_id'] = $this->request->data['HospitalIpd']['hospital_service_id'];
                                    $dataToSaveToInIpdbedHistory['from_date'] = $admitDate;
                                    $this->IpdBedHistory->save($dataToSaveToInIpdbedHistory);


                                    $pregnancy_data = $this->request->data['PregnancySemester'];
                                    if ($this->request->data['AppointmentCustomer']['gender'] == 'FEMALE' && !empty($pregnancy_data['conceive_date'])) {
                                        try {
                                            $from_date = DateTime::createFromFormat('d/m/Y', $pregnancy_data['conceive_date']);
                                            $conceive_date = $from_date->format('Y-m-d');
                                            $expected_date = '';

                                            if (!empty($pregnancy_data['expected_date'])) {
                                                try {
                                                    $from_date = DateTime::createFromFormat('d/m/Y', $pregnancy_data['expected_date']);
                                                    $expected_date = $from_date->format('Y-m-d');
                                                } catch (Exception $e) {

                                                }
                                            }
                                            $conceive_data['PregnancySemester'] = array(
                                                'thinapp_id' => $login['User']['thinapp_id'],
                                                'appointment_customer_id' => $patient_id,
                                                'doctor_id' => $this->request->data['HospitalIpd']['appointment_staff_id'],
                                                'conceive_date' => $conceive_date,
                                                'expected_date' => $expected_date,
                                                'appointment_id' => 0,
                                            );
                                            $result = $this->PregnancySemester->save($conceive_data);
                                        } catch (Exception $e) {

                                        }
                                    }
                                    $datasource->commit();
                                    Custom::create_and_share_folder($login['User']['thinapp_id'], $this->request->data['AppointmentCustomer']['mobile'], $this->request->data['AppointmentCustomer']['first_name'], 'CUSTOMER', $patient_id);

                                    $this->Session->setFlash(__('Patient admit successfully.'), 'default', array(), 'success');
                                    $this->redirect(array('controller' => 'app_admin', 'action' => 'ipd'));
                                } else {
                                    $datasource->rollback();
                                    $this->Session->setFlash(__('Sorry member could not admit.'), 'default', array(), 'error');
                                }
                            }


                        } else {
                            $datasource->rollback();
                            $this->Session->setFlash(__('Sorry member could not admit.'), 'default', array(), 'error');
                        }
                    } else {
                        $datasource->rollback();
                        $this->Session->setFlash(__('Sorry member could not admit.'), 'default', array(), 'error');
                    }
                }else{
                    $this->Session->setFlash(__('This patient already admit.'), 'default', array(), 'error');
                }

            } catch (Exception $e) {

                $datasource->rollback();
                echo $e->getMessage();;die;
            }


        }

        /*$this->set(compact('post'));*/
    }

    public function get_ward_history(){
        $this->layout = 'ajax';
        if ($this->request->is('ajax')) {
            $ipd_id = base64_decode($this->request->data['ipd_id']);
            $connection = ConnectionUtil::getConnection();
            $query = "SELECT `ipd_bed_history`.`occupancy`,`ipd_bed_history`.`from_date`,`ipd_bed_history`.`to_date`,`hospital_service_categories`.`name` AS `ward_name`,`medical_products`.`name` AS `bed_name`  FROM `ipd_bed_history` LEFT JOIN hospital_service_categories ON (`hospital_service_categories`.`id` = `ipd_bed_history`.`hospital_service_category_id`) LEFT JOIN `medical_products` ON (`medical_products`.`id` = `ipd_bed_history`.`hospital_service_id`) WHERE `ipd_bed_history`.`hospital_ipd_id` = '".$ipd_id."' ORDER BY `ipd_bed_history`.`id` DESC";
            $list = $connection->query($query);

            $dataToSend = mysqli_fetch_all($list,MYSQLI_ASSOC);

            $this->set(compact('dataToSend'));
            $this->render('get_ward_history', 'ajax');

        } else {
            exit();
        }
    }

    public function get_update_ward(){
        $this->layout = 'ajax';
        if ($this->request->is('ajax')) {
            $ipd_id = base64_decode($this->request->data['ipd_id']);
            $this->set(compact('ipd_id'));
            $this->render('get_update_ward', 'ajax');

        } else {
            exit();
        }
    }

    public function update_ward(){
        $this->layout = false;
        $login = $this->Session->read('Auth.User');
        if ($this->request->is('ajax')) {
            $response=array("message"=>"IPD id is empty!","status"=>0);
            if(empty($this->request->data['ipd_id']))
            {
                $response=array("message"=>"IPD id is empty!","status"=>0);
            }
            else if(empty($this->request->data['hospital_service_category_id']))
            {
                $response=array("message"=>"Please select ward!","status"=>0);
            }
            else if(empty($this->request->data['hospital_service_id']))
            {
                $response=array("message"=>"Please select bed!","status"=>0);
            }
            else if(empty($this->request->data['admit_date']))
            {
                $response=array("message"=>"Please select date!","status"=>0);
            }
            else
            {
                $ipdID = $this->request->data['ipd_id'];
                $date = DateTime::createFromFormat('d/m/Y h:i A', $this->request->data['admit_date']);
                $admit_date = $date->format('Y-m-d H:i:s');
                $dataToUpdate=array("");
                $dataToSaveInBedHistory = array(
                    'IpdBedHistory.to_date' => "'".$admit_date."'",
                    'IpdBedHistory.occupancy' => "'UNOCCUPIED'",
                );
                $this->IpdBedHistory->updateAll($dataToSaveInBedHistory, array('IpdBedHistory.hospital_ipd_id' => $ipdID,'IpdBedHistory.occupancy'=>'OCCUPIED' ));

                $data = $this->HospitalIpd->findById($ipdID,array("contain"=>false));
                $dataToSave = array(
                    "hospital_ipd_id" => $ipdID,
                    "from_date"=>$admit_date,
                    "hospital_service_category_id"=>$this->request->data['hospital_service_category_id'],
                    "hospital_service_id"=>$this->request->data['hospital_service_id'],
                    "thinapp_id" => $login['User']['thinapp_id'],
                    "patient_id"=>$data['HospitalIpd']['patient_id'],
                    "patient_type"=>$data['HospitalIpd']['patient_type'],
                );
                if($this->IpdBedHistory->save($dataToSave))
                {
                    $data['HospitalIpd']['hospital_service_category_id'] = $this->request->data['hospital_service_category_id'];
                    $data['HospitalIpd']['hospital_service_id'] = $this->request->data['hospital_service_id'];
                    $this->HospitalIpd->saveAll($data);
                    $catData = $this->HospitalServiceCategory->findById($this->request->data['hospital_service_category_id'],array("contain"=>false));
                    $catName = $catData['HospitalServiceCategory']['name'];
                    $response=array("message"=>"Saved","status"=>1,"name"=>$catName);
                }
            }
            echo json_encode($response,true); die;
        } else {
            exit();
        }
    }


    public function edit_ipd_patient($ipd_id = null)
    {
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User');


        $post = $this->HospitalIpd->find("first", array(
            "conditions" => array(
                "HospitalIpd.id" => base64_decode($ipd_id),
            ),
            'contain' => array('AppointmentCustomer', 'PregnancySemester')
        ));



        if (!empty($post)) {
            if ($this->request->is(array('post', 'put'))) {


                $datasource = $this->AppointmentCustomer->getDataSource();
                try {
                    $datasource->begin();
                    $user_data = Custom::get_user_by_mobile($login['User']['thinapp_id'], $this->request->data['AppointmentCustomer']['mobile']);

                    $this->request->data['AppointmentCustomer']['id'] = $post['HospitalIpd']['patient_id'];
                    $this->request->data['AppointmentCustomer']['user_id'] = !empty($user_data) ? $user_data['id'] : 0;

                    $post_data = $this->request->data['AppointmentCustomer'];
                    $this->request->data['AppointmentCustomer']['country_id'] = isset($post_data['country_id'][0])?$post_data['country_id'][0]:0;
                    $this->request->data['AppointmentCustomer']['state_id'] = isset($post_data['state_id'][0])?$post_data['state_id'][0]:0;

                    if(isset($post_data['city_id'][0]) && is_numeric($post_data['city_id'][0]))
                    {
                        $cityData = $this->Cities->findById($post_data['city_id'][0],array("contain"=>false));
                        $this->request->data['AppointmentCustomer']['city_name'] = ucwords(strtolower(trim($cityData['Cities']['name'])));
                        $this->request->data['AppointmentCustomer']['city_id'] = $cityData['Cities']['id'];
                    }
                    else if(isset($post_data['city_id'][0]) && !empty($post_data['city_id'][0]))
                    {
                        $this->request->data['AppointmentCustomer']['city_id'] = 0;
                        $this->request->data['AppointmentCustomer']['city_name'] = ucwords(strtolower(trim($post_data['city_id'][0])));
                    }
                    else
                    {
                        $this->request->data['AppointmentCustomer']['city_id'] = 0;
                        $this->request->data['AppointmentCustomer']['city_name'] = "";
                    }


                    $this->AppointmentCustomer->set($this->request->data['AppointmentCustomer']);


                    if (!empty($this->request->data['AppointmentCustomer']['dob'])) {
                        $date = DateTime::createFromFormat('d/m/Y', $this->request->data['AppointmentCustomer']['dob']);
                        $this->request->data['AppointmentCustomer']['dob'] = $date->format('Y-m-d');

                    }
                    if (!empty($post_data['conceive_date'])) {
                        $date = DateTime::createFromFormat('d/m/Y', $post_data['conceive_date']);
                        $this->request->data['AppointmentCustomer']['conceive_date'] = $date->format('Y-m-d');
                    }
                    if (!empty($post_data['expected_date'])) {
                        $date = DateTime::createFromFormat('d/m/Y', $post_data['expected_date']);
                        $this->request->data['AppointmentCustomer']['expected_date'] = $date->format('Y-m-d');
                    }
                    $this->request->data['AppointmentCustomer']['mobile'] = Custom::create_mobile_number($this->request->data['AppointmentCustomer']['mobile']);
                    if ($this->AppointmentCustomer->validates()) {


                        if ($this->AppointmentCustomer->save($this->request->data['AppointmentCustomer'])) {

                            $this->request->data['HospitalIpd']['id'] = base64_decode($ipd_id);

                            if(isset($this->request->data['HospitalIpd']['admit_date']))
                            {
                                $date = DateTime::createFromFormat('d/m/Y h:i A', $this->request->data['HospitalIpd']['admit_date']);
                                $admitDate = $date->format('Y-m-d H:i');
                                $this->request->data['HospitalIpd']['admit_date'] = $admitDate;

                                $IpdBedHistoryData = $this->IpdBedHistory->find("first",array('conditions'=>array('IpdBedHistory.hospital_ipd_id' => base64_decode($ipd_id)),"contain"=>false));
                                if(!empty($IpdBedHistoryData))
                                {
                                    $dataToSaveInBedHistory = array(
                                        'id' => $IpdBedHistoryData['IpdBedHistory']['id'],
                                        'from_date' => $admitDate,
                                        'hospital_service_category_id' => $this->request->data['HospitalIpd']['hospital_service_category_id'],
                                        'hospital_service_id' => $this->request->data['HospitalIpd']['hospital_service_id'],
                                    );
                                    $this->IpdBedHistory->save($dataToSaveInBedHistory);
                                }

                            }


                            $this->HospitalIpd->set($this->request->data['HospitalIpd']);
                            if ($this->HospitalIpd->validates()) {
                                if ($this->HospitalIpd->save($this->request->data)) {
                                    $pregnancy_data = $this->request->data['PregnancySemester'];
                                    if ($this->request->data['AppointmentCustomer']['gender'] == 'FEMALE') {
                                        $conceive_date = $expected_date = '';
                                        if (!empty($pregnancy_data['conceive_date'])) {
                                            try {
                                                $from_date = DateTime::createFromFormat('d/m/Y', $pregnancy_data['conceive_date']);
                                                $conceive_date = $from_date->format('Y-m-d');
                                                $expected_date = '';
                                                if (!empty($pregnancy_data['expected_date'])) {
                                                    try {
                                                        $from_date = DateTime::createFromFormat('d/m/Y', $pregnancy_data['expected_date']);
                                                        $expected_date = $from_date->format('Y-m-d');
                                                    } catch (Exception $e) {

                                                    }
                                                }

                                                    $conceive_data['PregnancySemester'] = array(
                                                        'id' => $post['PregnancySemester']['id'],
                                                        'doctor_id' => $this->request->data['HospitalIpd']['appointment_staff_id'],
                                                        'conceive_date' => $conceive_date,
                                                        'expected_date' => $expected_date,
                                                    );
                                                    $result = $this->PregnancySemester->save($conceive_data);

                                            } catch (Exception $e) {

                                            }
                                        } else {
                                            if (!empty($post['PregnancySemester']['id'])) {
                                                if (!empty($pregnancy_data['expected_date'])) {
                                                    try {
                                                        $from_date = DateTime::createFromFormat('d/m/Y', $pregnancy_data['expected_date']);
                                                        $expected_date = $from_date->format('Y-m-d');
                                                    } catch (Exception $e) {

                                                    }
                                                }

                                                $conceive_data['PregnancySemester'] = array(
                                                    'id' => $post['PregnancySemester']['id'],
                                                    'doctor_id' => $this->request->data['HospitalIpd']['appointment_staff_id'],
                                                    'conceive_date' => $conceive_date,
                                                    'expected_date' => $expected_date,
                                                );
                                                $result = $this->PregnancySemester->save($conceive_data);
                                            }
                                        }


                                    }




                                    $datasource->commit();
                                    $this->Session->setFlash(__('Patient edit successfully.'), 'default', array(), 'success');
                                    $this->redirect(array('controller' => 'app_admin', 'action' => 'ipd'));
                                } else {
                                    $datasource->rollback();
                                    $this->Session->setFlash(__('Sorry member could not edit.'), 'default', array(), 'error');
                                }
                            }

                        } else {
                            $datasource->rollback();
                            $this->Session->setFlash(__('Sorry member could not admit.'), 'default', array(), 'error');

                        }

                    }
                } catch (Exception $e) {
                    $datasource->rollback();
                }


            }
            if (!$this->request->data) {
                $this->request->data = $post;
            }

            $this->set(compact('post','ipd_id'));
        } else {
            exit();
        }
    }

    public function add_emergency_patient()
    {
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User');
        if ($this->request->is(array('post', 'put'))) {
            $datasource = $this->AppointmentCustomer->getDataSource();
            try {
                $datasource->begin();
                $this->request->data['AppointmentCustomer']['thinapp_id'] = $login['User']['thinapp_id'];
                $user_data = Custom::get_user_by_mobile($login['User']['thinapp_id'], $this->request->data['AppointmentCustomer']['mobile']);
                $this->request->data['AppointmentCustomer']['user_id'] = !empty($user_data) ? $user_data['id'] : 0;
                $this->request->data['AppointmentCustomer']['customer_created_by'] = $login['User']['id'];

                try{
                    if (!empty($this->request->data['AppointmentCustomer']['dob'])) {
                        $date = DateTime::createFromFormat('d/m/Y', $this->request->data['AppointmentCustomer']['dob']);
                        $this->request->data['AppointmentCustomer']['dob'] = $date->format('Y-m-d');
                    }
                    if (!empty($post_data['conceive_date'])) {
                        $date = DateTime::createFromFormat('d/m/Y', $post_data['conceive_date']);
                        $this->request->data['AppointmentCustomer']['conceive_date'] = $date->format('Y-m-d');
                    }
                    if (!empty($post_data['expected_date'])) {
                        $date = DateTime::createFromFormat('d/m/Y', $post_data['expected_date']);
                        $this->request->data['AppointmentCustomer']['expected_date'] = $date->format('Y-m-d');
                    }
                }catch(Exception $e){

                }



                $this->AppointmentCustomer->set($this->request->data['AppointmentCustomer']);
                if ($this->AppointmentCustomer->validates()) {
                    if ($this->AppointmentCustomer->save($this->request->data['AppointmentCustomer'])) {
                        $patient_id = $this->AppointmentCustomer->getLastInsertId();
                        $this->request->data['HospitalEmergency']['appointment_customer_id'] = $patient_id;
                        $this->request->data['HospitalEmergency']['thinapp_id'] = $login['User']['thinapp_id'];

                        $date = DateTime::createFromFormat('d/m/Y h:i A', $this->request->data['HospitalEmergency']['admit_date']);
                        $this->request->data['HospitalEmergency']['admit_date'] = $date->format('Y-m-d H:i:s');
                        if (!empty($this->request->data['HospitalEmergency']['referred_by_mobile'])) {
                            $this->request->data['HospitalEmergency']['referred_by_mobile'] = Custom::create_mobile_number($this->request->data['HospitalEmergency']['referred_by_mobile']);
                        }

                        $this->HospitalEmergency->set($this->request->data['HospitalEmergency']);
                        if ($this->HospitalEmergency->validates()) {
                            if ($this->HospitalEmergency->save($this->request->data['HospitalEmergency'])) {


                                $pregnancy_data = $this->request->data['PregnancySemester'];
                                if ($this->request->data['AppointmentCustomer']['gender'] == 'FEMALE' && !empty($pregnancy_data['conceive_date'])) {
                                    try {
                                        $from_date = DateTime::createFromFormat('d/m/Y', $pregnancy_data['conceive_date']);
                                        $conceive_date = $from_date->format('Y-m-d');
                                        $expected_date = '';

                                        if (!empty($pregnancy_data['expected_date'])) {
                                            try {
                                                $from_date = DateTime::createFromFormat('d/m/Y', $pregnancy_data['expected_date']);
                                                $expected_date = $from_date->format('Y-m-d');
                                            } catch (Exception $e) {

                                            }
                                        }
                                        $conceive_data['PregnancySemester'] = array(
                                            'thinapp_id' => $login['User']['thinapp_id'],
                                            'appointment_customer_id' => $patient_id,
                                            'doctor_id' => $this->request->data['HospitalEmergency']['appointment_staff_id'],
                                            'conceive_date' => $conceive_date,
                                            'expected_date' => $expected_date,
                                            'appointment_id' => 0,
                                        );
                                        $result = $this->PregnancySemester->save($conceive_data);
                                    } catch (Exception $e) {

                                    }
                                }

                                Custom::create_and_share_folder($login['User']['thinapp_id'], $this->request->data['AppointmentCustomer']['mobile'], $this->request->data['AppointmentCustomer']['first_name'], 'CUSTOMER', $patient_id);
                                $datasource->commit();
                                $this->Session->setFlash(__('Patient added successfully.'), 'default', array(), 'success');
                                $this->redirect(array('controller' => 'app_admin', 'action' => 'list_hospital_emergency'));
                            } else {
                                $datasource->rollback();
                                $this->Session->setFlash(__('Sorry patient could not be added.'), 'default', array(), 'error');
                            }
                        }
                    } else {
                        $datasource->rollback();
                        $this->Session->setFlash(__('Sorry patient could not be added.'), 'default', array(), 'error');
                    }
                }

            } catch (Exception $e) {
                $datasource->rollback();
            }
        }

        $this->set(compact('post'));

    }

    public function edit_emergency_patient($emg_id = null)
    {
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User');
        $post = $this->HospitalEmergency->find("first", array(
            "conditions" => array(
                "HospitalEmergency.id" => base64_decode($emg_id),
            ),
            'contain' => array('AppointmentCustomer', 'PregnancySemester')
        ));
        if ($post) {
            if ($this->request->is(array('post', 'put'))) {
                $datasource = $this->AppointmentCustomer->getDataSource();
                try {
                    $datasource->begin();
                    $this->request->data['AppointmentCustomer']['id'] = $post['HospitalEmergency']['appointment_customer_id'];
                    $user_data = Custom::get_user_by_mobile($login['User']['thinapp_id'], $this->request->data['AppointmentCustomer']['mobile']);
                    $this->request->data['AppointmentCustomer']['user_id'] = !empty($user_data) ? $user_data['id'] : 0;
                    try{
                        if (!empty($this->request->data['AppointmentCustomer']['dob'])) {
                            $date = DateTime::createFromFormat('d/m/Y', $this->request->data['AppointmentCustomer']['dob']);
                            $this->request->data['AppointmentCustomer']['dob'] = $date->format('Y-m-d');
                        }
                        if (!empty($post_data['conceive_date'])) {
                            $date = DateTime::createFromFormat('d/m/Y', $post_data['conceive_date']);
                            $this->request->data['AppointmentCustomer']['conceive_date'] = $date->format('Y-m-d');
                        }
                        if (!empty($post_data['expected_date'])) {
                            $date = DateTime::createFromFormat('d/m/Y', $post_data['expected_date']);
                            $this->request->data['AppointmentCustomer']['expected_date'] = $date->format('Y-m-d');
                        }

                        $post_data = $this->request->data['AppointmentCustomer'];
                        $this->request->data['AppointmentCustomer']['country_id'] = isset($post_data['country_id'][0])?$post_data['country_id'][0]:0;
                        $this->request->data['AppointmentCustomer']['state_id'] = isset($post_data['state_id'][0])?$post_data['state_id'][0]:0;

                        if(isset($post_data['city_id'][0]) && is_numeric($post_data['city_id'][0]))
                        {
                            $cityData = $this->Cities->findById($post_data['city_id'][0],array("contain"=>false));
                            $this->request->data['AppointmentCustomer']['city_name'] = ucwords(strtolower(trim($cityData['Cities']['name'])));
                            $this->request->data['AppointmentCustomer']['city_id'] = $cityData['Cities']['id'];
                        }
                        else if(isset($post_data['city_id'][0]) && !empty($post_data['city_id'][0]))
                        {
                            $this->request->data['AppointmentCustomer']['city_id'] = 0;
                            $this->request->data['AppointmentCustomer']['city_name'] = ucwords(strtolower(trim($post_data['city_id'][0])));
                        }
                        else
                        {
                            $this->request->data['AppointmentCustomer']['city_id'] = 0;
                            $this->request->data['AppointmentCustomer']['city_name'] = "";
                        }

                    }catch(Exception $e){

                    }

                    $this->AppointmentCustomer->set($this->request->data['AppointmentCustomer']);
                    if ($this->AppointmentCustomer->validates()) {
                        if ($this->AppointmentCustomer->save($this->request->data['AppointmentCustomer'])) {
                            $this->request->data['HospitalEmergency']['id'] = base64_decode($emg_id);
                            $date = DateTime::createFromFormat('d/m/Y h:i A', $this->request->data['HospitalEmergency']['admit_date']);
                            $this->request->data['HospitalEmergency']['admit_date'] = $date->format('Y-m-d H:i:s');

                            $this->HospitalEmergency->set($this->request->data['HospitalEmergency']);
                            if ($this->HospitalEmergency->validates()) {
                                if ($this->HospitalEmergency->save($this->request->data['HospitalEmergency'])) {

                                    $pregnancy_data = $this->request->data['PregnancySemester'];
                                    if ($this->request->data['AppointmentCustomer']['gender'] == 'FEMALE') {
                                        $conceive_date = $expected_date = '';
                                        if (!empty($pregnancy_data['conceive_date'])) {
                                            try {
                                                $from_date = DateTime::createFromFormat('d/m/Y', $pregnancy_data['conceive_date']);
                                                $conceive_date = $from_date->format('Y-m-d');
                                                $expected_date = '';
                                                if (!empty($pregnancy_data['expected_date'])) {
                                                    try {
                                                        $from_date = DateTime::createFromFormat('d/m/Y', $pregnancy_data['expected_date']);
                                                        $expected_date = $from_date->format('Y-m-d');
                                                    } catch (Exception $e) {

                                                    }
                                                }
                                                if (empty($post['PregnancySemester']['id'])) {
                                                    $conceive_data['PregnancySemester'] = array(
                                                        'thinapp_id' => $login['User']['thinapp_id'],
                                                        'appointment_customer_id' => $post['AppointmentCustomer']['id'],
                                                        'doctor_id' => $this->request->data['HospitalEmergency']['appointment_staff_id'],
                                                        'conceive_date' => $conceive_date,
                                                        'expected_date' => $expected_date,
                                                        'appointment_id' => 0,
                                                    );
                                                    $result = $this->PregnancySemester->save($conceive_data);
                                                } else {
                                                    $conceive_data['PregnancySemester'] = array(
                                                        'id' => $post['PregnancySemester']['id'],
                                                        'doctor_id' => $this->request->data['HospitalEmergency']['appointment_staff_id'],
                                                        'conceive_date' => $conceive_date,
                                                        'expected_date' => $expected_date,
                                                    );
                                                    $result = $this->PregnancySemester->save($conceive_data);
                                                }
                                            } catch (Exception $e) {

                                            }
                                        } else {
                                            if (!empty($post['PregnancySemester']['id'])) {
                                                if (!empty($pregnancy_data['expected_date'])) {
                                                    try {
                                                        $from_date = DateTime::createFromFormat('d/m/Y', $pregnancy_data['expected_date']);
                                                        $expected_date = $from_date->format('Y-m-d');
                                                    } catch (Exception $e) {

                                                    }
                                                }

                                                $conceive_data['PregnancySemester'] = array(
                                                    'id' => $post['PregnancySemester']['id'],
                                                    'doctor_id' => $this->request->data['HospitalEmergency']['appointment_staff_id'],
                                                    'conceive_date' => $conceive_date,
                                                    'expected_date' => $expected_date,
                                                );
                                                $result = $this->PregnancySemester->save($conceive_data);
                                            }
                                        }


                                    }

                                    $datasource->commit();
                                    $this->Session->setFlash(__('Patient edited successfully.'), 'default', array(), 'success');
                                    $this->redirect(array('controller' => 'app_admin', 'action' => 'list_hospital_emergency'));
                                } else {
                                    $datasource->rollback();
                                    $this->Session->setFlash(__('Sorry patient could not be edited.'), 'default', array(), 'error');
                                }
                            }
                        } else {
                            $datasource->rollback();
                            $this->Session->setFlash(__('Sorry patient could not be edited.'), 'default', array(), 'error');
                        }
                    }

                } catch (Exception $e) {
                    $datasource->rollback();
                }
            }

            if (!$this->request->data) {
                $this->request->data = $post;
            }
            $this->set(compact('post'));
        } else {
            exit();
        }


    }


    public function search_lab_patient()
    {
        $reqData = $this->request->query;
        $pram = array();
        if (!empty($reqData['name'])) {
            $pram['n'] = $reqData['name'];
        }
        if (!empty($reqData['doctor'])) {
            $pram['d'] = $reqData['doctor'];
        }

        if (!empty($reqData['mobile'])) {
            $pram['m'] = $reqData['mobile'];
        }

        if (!empty($reqData['from_date'])) {
            $pram['fd'] = $reqData['from_date'];
        }
        if (!empty($reqData['to_date'])) {
            $pram['td'] = $reqData['to_date'];
        }
        if (!empty($reqData['uhid'])) {
            $pram['u'] = $reqData['uhid'];
        }

        $this->redirect(
            array(
                "controller" => "app_admin",
                "action" => "lab_patient",
                "?" => $pram,
            )
        );
    }

    public function lab_patient()
    {
        $this->layout = 'app_admin_home';

        $login = $this->Session->read('Auth.User');

        $searchData = $this->request->query;


        $conditions["AppointmentCustomerStaffService.thinapp_id"] = $login['User']['thinapp_id'];
        $conditions["AppointmentCustomerStaffService.status <>"] = array('CANCELED', 'DELETED');


        if (isset($searchData['n']) && !empty($searchData['n']) && isset($searchData['m']) && !empty($searchData['m'])) {

            $this->request->data['Search']['name'] = $searchData['n'];
            $this->request->data['Search']['mobile'] = $searchData['m'];
            $conditions['AND'] = array(array(
                'OR' => array(
                    'AppointmentCustomer.first_name like' => "%" . $searchData['n'] . "%",
                    'Children.child_name like' => "%" . $searchData['n'] . "%"
                )
            ),
                array(
                    'OR' => array(
                        'AppointmentCustomer.mobile like' => "%" . $searchData['m'] . "%",
                        'Children.mobile like' => "%" . $searchData['m'] . "%"
                    )
                )

            );


        } else {


            if (isset($searchData['n']) && !empty($searchData['n'])) {
                $this->request->data['Search']['name'] = $searchData['n'];
                $conditions['OR'] = array(
                    'AppointmentCustomer.first_name like' => "%" . $searchData['n'] . "%",
                    'Children.child_name like' => "%" . $searchData['n'] . "%"
                );

            }

            if (isset($searchData['m']) && !empty($searchData['m'])) {
                $this->request->data['Search']['mobile'] = $searchData['m'];
                $conditions['OR'] = array(
                    'AppointmentCustomer.mobile like' => "%" . $searchData['m'] . "%",
                    'Children.mobile like' => "%" . $searchData['m'] . "%"
                );
            }
        }

        if (isset($searchData['u']) && !empty($searchData['u'])) {
            $this->request->data['Search']['uhid'] = $searchData['u'];
            $conditions['OR'] = array(
                'AppointmentCustomer.uhid like' => "%" . $searchData['u'] . "%",
                'Children.uhid like' => "%" . $searchData['u'] . "%"
            );
        }

        if (isset($searchData['d']) && !empty($searchData['d'])) {
            $this->request->data['Search']['doctor'] = $searchData['d'];
            $conditions["AppointmentCustomerStaffService.appointment_staff_id"] = $searchData['d'];

        }


        if (isset($searchData['fd']) && !empty($searchData['fd']) && isset($searchData['td']) && !empty($searchData['td'])) {

            $this->request->data['Search']['from_date'] = $searchData['fd'];
            $this->request->data['Search']['to_date'] = $searchData['td'];

            $from_date = DateTime::createFromFormat('d/m/Y', $searchData['fd']);
            $conditions["Date(AppointmentCustomerStaffService.created) >="] = $from_date->format('Y-m-d');

            $to_date = DateTime::createFromFormat('d/m/Y', $searchData['td']);
            $conditions["Date(AppointmentCustomerStaffService.created) <="] = $to_date->format('Y-m-d');

        } else {

            if (count($searchData) > 1) {
                if (isset($searchData['fd']) && !empty($searchData['fd']) && isset($searchData['td']) && !empty($searchData['td'])) {
                    $this->request->data['Search']['from_date'] = date('d/m/Y');
                    $this->request->data['Search']['to_date'] = date('d/m/Y');
                    $conditions["Date(AppointmentCustomerStaffService.created) >="] = date('Y-m-d');
                    $conditions["Date(AppointmentCustomerStaffService.created) <="] = date('Y-m-d');
                }
            } else {
                $this->request->data['Search']['from_date'] = date('d/m/Y');
                $this->request->data['Search']['to_date'] = date('d/m/Y');
                $conditions["Date(AppointmentCustomerStaffService.created) >="] = date('Y-m-d');
                $conditions["Date(AppointmentCustomerStaffService.created) <="] = date('Y-m-d');
            }


        }


        $opd_list = $this->AppointmentCustomerStaffService->find('all', array(
            'contain' => array('AppointmentStaff', 'AppointmentCustomer' => array('DriveFolder'), 'Children' => array('DriveFolder')),
            'conditions' => $conditions,
            'order' => 'AppointmentCustomerStaffService.id DESC',
            'fields' => array('AppointmentCustomerStaffService.id', 'AppointmentStaff.name', 'AppointmentCustomerStaffService.queue_number', 'AppointmentCustomerStaffService.amount', 'AppointmentCustomerStaffService.status', 'AppointmentCustomerStaffService.appointment_datetime',
                'AppointmentCustomer.*', 'Children.*'
            )
        ));

        $login1 = $this->Session->read('Auth.User');
        $reportTitle = $login1['Thinapp']['name'].' ('.$this->request->data['Search']['from_date'].' - '.$this->request->data['Search']['to_date'].')';

        $this->set(compact('reportTitle','opd_list'));

    }


    public function search_hospital_emergency()
    {
        $reqData = $this->request->query;
        $pram = array();
        if (!empty($reqData['name'])) {
            $pram['n'] = $reqData['name'];
        }

        if (!empty($reqData['mobile'])) {
            $pram['m'] = $reqData['mobile'];
        }

        if (!empty($reqData['from_date'])) {
            $pram['fd'] = $reqData['from_date'];
        }
        if (!empty($reqData['to_date'])) {
            $pram['td'] = $reqData['to_date'];
        }
        if (!empty($reqData['uhid'])) {
            $pram['u'] = $reqData['uhid'];
        }

        $this->redirect(
            array(
                "controller" => "app_admin",
                "action" => "list_hospital_emergency",
                "?" => $pram,
            )
        );
    }

    public function list_hospital_emergency()
    {

        $this->layout = 'app_admin_home';

        $login = $this->Session->read('Auth.User');

        $searchData = $this->request->query;


        $conditions["HospitalEmergency.thinapp_id"] = $login['User']['thinapp_id'];
        $conditions["HospitalEmergency.status"] = 'ACTIVE';


        if (isset($searchData['n']) && !empty($searchData['n']) && isset($searchData['m']) && !empty($searchData['m'])) {

            $this->request->data['Search']['name'] = $searchData['n'];
            $this->request->data['Search']['mobile'] = $searchData['m'];
            $conditions['AND'] = array(array(
                'OR' => array(
                    'AppointmentCustomer.first_name like' => "%" . $searchData['n'] . "%",
                    'Children.child_name like' => "%" . $searchData['n'] . "%"
                )
            ),
                array(
                    'OR' => array(
                        'AppointmentCustomer.mobile like' => "%" . $searchData['m'] . "%",
                        'Children.mobile like' => "%" . $searchData['m'] . "%"
                    )
                )

            );


        } else {


            if (isset($searchData['n']) && !empty($searchData['n'])) {
                $this->request->data['Search']['name'] = $searchData['n'];
                $conditions['OR'] = array(
                    'AppointmentCustomer.first_name like' => "%" . $searchData['n'] . "%",
                    'Children.child_name like' => "%" . $searchData['n'] . "%"
                );

            }

            if (isset($searchData['m']) && !empty($searchData['m'])) {
                $this->request->data['Search']['mobile'] = $searchData['m'];
                $conditions['OR'] = array(
                    'AppointmentCustomer.mobile like' => "%" . $searchData['m'] . "%",
                    'Children.mobile like' => "%" . $searchData['m'] . "%"
                );
            }
        }

        if (isset($searchData['u']) && !empty($searchData['u'])) {
            $this->request->data['Search']['uhid'] = $searchData['u'];
            $conditions['OR'] = array(
                'AppointmentCustomer.uhid like' => "%" . $searchData['u'] . "%",
                'Children.uhid like' => "%" . $searchData['u'] . "%"
            );
        }


        if (isset($searchData['fd']) && !empty($searchData['fd']) && isset($searchData['td']) && !empty($searchData['td'])) {

            $this->request->data['Search']['from_date'] = $searchData['fd'];
            $this->request->data['Search']['to_date'] = $searchData['td'];

            $from_date = DateTime::createFromFormat('d/m/Y', $searchData['fd']);
            $conditions["Date(HospitalEmergency.created) >="] = $from_date->format('Y-m-d');

            $to_date = DateTime::createFromFormat('d/m/Y', $searchData['td']);
            $conditions["Date(HospitalEmergency.created) <="] = $to_date->format('Y-m-d');

        } else {


            if (count($searchData) > 1) {
                if (isset($searchData['fd']) && !empty($searchData['fd']) && isset($searchData['td']) && !empty($searchData['td'])) {
                    $this->request->data['Search']['from_date'] = date('d/m/Y');
                    $this->request->data['Search']['to_date'] = date('d/m/Y');
                    $conditions["Date(HospitalEmergency.created) >="] = date('Y-m-d');
                    $conditions["Date(HospitalEmergency.created) <="] = date('Y-m-d');
                }
            } else {
                $this->request->data['Search']['from_date'] = date('d/m/Y');
                $this->request->data['Search']['to_date'] = date('d/m/Y');
                $conditions["Date(HospitalEmergency.created) >="] = date('Y-m-d');
                $conditions["Date(HospitalEmergency.created) <="] = date('Y-m-d');
            }


        }


        $opd_list = $this->HospitalEmergency->find('all', array(
                'contain' => array('AppointmentStaff', 'AppointmentCustomer', 'Children', 'CustomerAdmitDetail' => array('HospitalDischarge'), 'ChildrenAdmitDetail' => array('HospitalDischarge')),
                'conditions' => $conditions,
                'order' => 'HospitalEmergency.id DESC',
                'group' => array('HospitalEmergency.id'),
                'fields' => array(
                    'HospitalEmergency.id', 'HospitalEmergency.admit_date', 'AppointmentStaff.name', 'HospitalEmergency.status', 'HospitalEmergency.created',
                    'AppointmentCustomer.id', 'AppointmentCustomer.uhid', 'AppointmentCustomer.mobile', 'AppointmentCustomer.first_name', 'AppointmentCustomer.created',
                    'Children.id', 'Children.uhid', 'Children.mobile', 'Children.child_name', 'Children.created',
                    'CustomerAdmitDetail.*', 'ChildrenAdmitDetail.*'
                ))
        );
        //echo "<pre>";
        //print_r($opd_list);die;


        $login1 = $this->Session->read('Auth.User');
        $reportTitle = $login1['Thinapp']['name'].' ('.$this->request->data['Search']['from_date'].' - '.$this->request->data['Search']['to_date'].')';

        $this->set(compact('opd_list','reportTitle'));
    }

    public function search_ipd_all()
    {
        $reqData = $this->request->query;
        $pram = array();
        if (!empty($reqData['name'])) {
            $pram['n'] = $reqData['name'];
        }
        if (!empty($reqData['uhid'])) {
            $pram['uh'] = $reqData['uhid'];
        }
        if (!empty($reqData['mobile'])) {
            $pram['m'] = $reqData['mobile'];
        }

        if (!empty($reqData['from_date'])) {
            $pram['fd'] = $reqData['from_date'];
        }

        if (!empty($reqData['to_date'])) {
            $pram['td'] = @$reqData['to_date'];
        }
        if (!empty($reqData['address'])) {
            $pram['a'] = $reqData['address'];
        }
        if (!empty($reqData['search_for'])) {
            $pram['sf'] = $reqData['search_for'];
        }
        $this->redirect(
            array(
                "controller" => "app_admin",
                "action" => "ipd_all",
                "?" => $pram,
            )
        );
    }

    public function ipd_all($total_record = 0)
    {
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User.User');
        $login1 = $this->Session->read('Auth.User');
        $role = $login1['USER_ROLE'];
        $thin_app_id = $login['thinapp_id'];
        $searchData = $this->request->query;
        $cus_condition = " ac.thinapp_id =$thin_app_id and ac.status = 'ACTIVE'";
        $child_condition = " c.thinapp_id =$thin_app_id and c.status = 'ACTIVE'";


        if (isset($searchData['n']) && !empty($searchData['n'])) {
            $this->request->data['Search']['name'] = $searchData['n'];
            $cus_condition .= " and ac.first_name LIKE '%" . $searchData['n'] . "%' ";
            $child_condition .= " and c.child_name LIKE '%" . $searchData['n'] . "%' ";

        }

        if (isset($searchData['uh']) && !empty($searchData['uh'])) {
            $this->request->data['Search']['uhid'] = $searchData['uh'];
            $cus_condition .= " and ac.uhid LIKE '%" . $searchData['uh'] . "%' ";
            $child_condition .= " and c.uhid LIKE '%" . $searchData['uh'] . "%' ";

        }

        if (isset($searchData['sf']) && !empty($searchData['sf'])) {

            $this->request->data['Search']['search_for'] = $searchData['sf'];
            if ($searchData['sf'] != 'ALL') {
                if ($searchData['sf'] == 'YES') {
                    $cus_condition .= " and hi.admit_status ='ADMIT' ";
                    $child_condition .= " and hi.admit_status ='ADMIT' ";
                } else {
                    $cus_condition .= " and hi.admit_status IS NULL ";
                    $child_condition .= " and hi.admit_status IS NULL ";
                }
            }
        }


        if (isset($searchData['m']) && !empty($searchData['m'])) {
            $this->request->data['Search']['mobile'] = $searchData['m'];
            $cus_condition .= " and ac.mobile LIKE '%" . $searchData['m'] . "%' ";
            $child_condition .= " and c.mobile LIKE '%" . $searchData['m'] . "%' ";

        }

        if (isset($searchData['a']) && !empty($searchData['a'])) {
            $this->request->data['Search']['address'] = $searchData['a'];

            $cus_condition .= " and ac.addess LIKE '%" . $searchData['a'] . "%' ";
            $child_condition .= " and c.address LIKE '%" . $searchData['a'] . "%' ";

        }


        if (empty($searchData['start'])) {
            $cnt_query = "select sum(final.total) as total_record from (select count(ac.id) as total from appointment_customers as ac left join hospital_ipd as hi on ac.id = hi.patient_id and hi.patient_type = 'CUSTOMER' where $cus_condition UNION ALL select count(c.id) as total from childrens as c left join hospital_ipd as hi on c.id = hi.patient_id and hi.patient_type = 'CHILDREN' where $child_condition) as final";
            $connection = ConnectionUtil::getConnection();
            $count_data = $connection->query($cnt_query);
            if ($count_data->num_rows) {
                $count_data = mysqli_fetch_assoc($count_data);
                $total_record = $count_data['total_record'];
            }
        }
        $page_number = 1;
        $limit = " limit 0, 10";
        if (!empty($searchData['length']) && isset($searchData['start'])) {
            $limit = $searchData['length'];
            $offset = $searchData['start'];
            $page_number = 2;
            $limit = " limit $offset, $limit";
        }


        $query = "select * from (select ac.dob, hi.admit_date, ac.address, hi.admit_status, ac.gender, ac.age, ac.first_name as patient_name, ac.uhid, ac.id as patient_id, 'CUSTOMER' AS patient_type,ac.created, ac.mobile from appointment_customers as ac left join hospital_ipd as hi on ac.id = hi.patient_id and hi.patient_type = 'CUSTOMER' where $cus_condition UNION ALL select c.dob, hi.admit_date, c.address, hi.admit_status, c.gender, '' as age, c.child_name as pateint_name, c.uhid, c.id as patient_id, 'CHILDREN' AS patient_type, c.created, c.mobile from childrens as c left join hospital_ipd as hi on c.id = hi.patient_id and hi.patient_type = 'CHILDREN' where $child_condition) as final order by final.created asc $limit";
        $connection = ConnectionUtil::getConnection();
        $list = $connection->query($query);
        $data_list = array();
        if ($list->num_rows) {
            $list = mysqli_fetch_all($list, MYSQLI_ASSOC);
            if ($page_number == 1) {
                foreach ($list as $key => $value) {
                    $data_list[$key] = $value;
                    $data_list[$key]['age'] = !empty($data_list[$key]['age'])?Custom::create_age_array($data_list[$key]['age'],true):Custom::get_age_from_dob($data_list[$key]['dob']);
                    $data_list[$key]['action_btn'] = Custom::createLinkButton($value['patient_id'], $value['patient_type'], $value['uhid'], $value['admit_status'], $role);;
                }
            } else {
                foreach ($list as $key => $value) {
                    $data_list['data'][$key][0] = $key + 1;
                    $data_list['data'][$key][1] = $value['patient_name'];
                    $data_list['data'][$key][2] = $value['uhid'];

                    $age = "";
                    if(!empty($value['age'])){
                        $age = Custom::create_age_array($value['age'],true);
                    }else if(!empty($value['dob']) && $value['dob'] !='0000-00-00'){
                        $age = Custom::get_age_from_dob($value['dob']);
                    }
                    $data_list['data'][$key][3] = $age;

                    $data_list['data'][$key][4] = $value['gender'];
                    $data_list['data'][$key][5] = $value['address'];
                    $data_list['data'][$key][6] = $value['mobile'];
                    $data_list['data'][$key][7] = date('d-m-Y',strtotime($value['created']));
                    $data_list['data'][$key][8] = ($value['admit_status'] == 'ADMIT') ? 'Admitted' : 'Not Admitted';
                    $data_list['data'][$key][9] = '<div class="dropdown"><button class="btn btn-default btn-xs dropdown-toggle" type="button" data-toggle="dropdown">Option<span class="caret"></span></button><ul class="dropdown-menu pull-right option_btn_panel">'. Custom::createLinkButton($value['patient_id'], $value['patient_type'], $value['uhid'], $value['admit_status'], $role).'</ul></div>';
                }
                $this->autoRender = false;
                $data_list['draw'] = @$searchData['draw'];
                $data_list['recordsTotal'] = $total_record;
                $data_list['recordsFiltered'] = $total_record;


                return json_encode($data_list, JSON_UNESCAPED_SLASHES);
            }
        }

        $login1 = $this->Session->read('Auth.User');
        $reportTitle = $login1['Thinapp']['name'].' ('.date('d/m/Y').')';
        $this->set(compact('data_list', 'total_record','reportTitle'));

    }


    public function update_to_discharge_date()
    {
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            if (isset($this->request->data)) {
                $id = base64_decode($this->request->data['id']);
                $date = $this->request->data['date'];
                $date = DateTime::createFromFormat('d/m/Y', $date);
                $date = $date->format('Y-m-d');

                $date = date('Y-m-d', strtotime($date));
                $response = array();
                $this->HospitalIpd->id = $id;

                if ($this->HospitalIpd->saveField('to_discharge_date', $date)) {
                    $response["status"] = 1;
                    $response["message"] = "To discharge date added successfully.";

                } else {
                    $response["status"] = 0;
                    $response["message"] = "Sorry date could not added";
                }
            } else {
                $response["status"] = 0;
                $response["message"] = "Sorry date could not added.";
            }
            return json_encode($response);
        } else {
            exit();
        }
    }


    public function search_ipd_all_emergency()
    {
        $reqData = $this->request->query;
        $pram = array();
        if (!empty($reqData['name'])) {
            $pram['n'] = $reqData['name'];
        }
        if (!empty($reqData['uhid'])) {
            $pram['uh'] = $reqData['uhid'];
        }
        if (!empty($reqData['mobile'])) {
            $pram['m'] = $reqData['mobile'];
        }

        if (!empty($reqData['from_date'])) {
            $pram['fd'] = $reqData['from_date'];
        }

        if (!empty($reqData['to_date'])) {
            $pram['td'] = @$reqData['to_date'];
        }
        if (!empty($reqData['address'])) {
            $pram['a'] = $reqData['address'];
        }
        if (!empty($reqData['search_for'])) {
            $pram['sf'] = $reqData['search_for'];
        }
        $this->redirect(
            array(
                "controller" => "app_admin",
                "action" => "ipd_all_emergency",
                "?" => $pram,
            )
        );
    }

    public function ipd_all_emergency()
    {
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User.User');
        $thinapp_id = $login['thinapp_id'];
        $cus_condition['AppointmentCustomer.thinapp_id'] = $thinapp_id;
        $cus_condition['AppointmentCustomer.status'] = 'ACTIVE';
        $searchData = $this->request->query;


        $child_condition['Children.status'] = 'ACTIVE';
        $child_condition['Children.thinapp_id'] = $thinapp_id;


        if (isset($searchData['n']) && !empty($searchData['n'])) {
            $this->request->data['Search']['name'] = $searchData['n'];
            $cus_condition["AppointmentCustomer.first_name LIKE"] = '%' . $searchData['n'] . '%';
            $child_condition["Children.child_name LIKE"] = '%' . $searchData['n'] . '%';
        }

        if (isset($searchData['uh']) && !empty($searchData['uh'])) {
            $this->request->data['Search']['uhid'] = $searchData['uh'];
            $cus_condition["AppointmentCustomer.uhid like "] = "%" . $searchData['uh'] . "%";
            $child_condition["Children.uhid like"] = "%" . $searchData['uh'] . "%";
        }

        if (isset($searchData['sf']) && !empty($searchData['sf'])) {

            $this->request->data['Search']['search_for'] = $searchData['sf'];
            if ($searchData['sf'] != 'ALL') {
                $cus_condition["AppointmentCustomer.is_admit"] = $searchData['sf'];
                $child_condition["Children.is_admit"] = $searchData['sf'];
            }
        }


        if (isset($searchData['m']) && !empty($searchData['m'])) {
            $this->request->data['Search']['mobile'] = $searchData['m'];
            $cus_condition["AppointmentCustomer.mobile like"] = '%' . $searchData['m'] . '%';
            $child_condition["Children.mobile like"] = '%' . $searchData['m'] . '%';
        }


        $this->request->data['Search']['from_date'] = date('d/m/Y');
        $this->request->data['Search']['to_date'] = date('d/m/Y');


        if (isset($searchData['fd']) && !empty($searchData['fd']) && isset($searchData['td']) && !empty($searchData['td'])) {

            $this->request->data['Search']['from_date'] = $searchData['fd'];
            $this->request->data['Search']['to_date'] = $searchData['td'];

            $from_date = DateTime::createFromFormat('d/m/Y', $searchData['fd']);
            $cus_condition["Date(AppointmentCustomer.created) >="] = $from_date->format('Y-m-d');
            $child_condition["Date(Children.created) >="] = $from_date->format('Y-m-d');

            $to_date = DateTime::createFromFormat('d/m/Y', $searchData['td']);
            $cus_condition["Date(AppointmentCustomer.created) <="] = $to_date->format('Y-m-d');
            $child_condition["Date(Children.created) <="] = $to_date->format('Y-m-d');

        } else {
            $cus_condition["Date(AppointmentCustomer.created)"] = date('Y-m-d');
            $child_condition["Date(Children.created)"] = date('Y-m-d');

        }


        if (isset($searchData['a']) && !empty($searchData['a'])) {
            $this->request->data['Search']['address'] = $searchData['a'];
            $cus_condition["AppointmentCustomer.address like"] = '%' . $searchData['a'] . '%';
            $child_condition["Children.address like"] = '%' . $searchData['a'] . '%';
        }


        $patientData = $this->AppointmentCustomer->find('all', array('conditions' => $cus_condition, 'contain' => array('CustomerAdmitDetail', 'MedicalProductOrder'), 'recursive' => 2));


        $childData = $this->Children->find('all', array('conditions' => $child_condition, 'contain' => array('ChildrenAdmitDetail', 'MedicalProductOrder')));
        $data = array_merge($patientData, $childData);


        usort($data, function ($a, $b) {
            $ad = isset($a['AppointmentCustomer']['created']) ? new DateTime($a['AppointmentCustomer']['created']) : new DateTime($a['Children']['created']);
            $bd = isset($b['AppointmentCustomer']['created']) ? new DateTime($b['AppointmentCustomer']['created']) : new DateTime($b['Children']['created']);
            if ($ad == $bd) {
                return -1;
            }
            return $ad < $bd ? -1 : 1;
        });

        //pr($data);die;



        $login1 = $this->Session->read('Auth.User');
        $reportTitle = $login1['Thinapp']['name'].' ('.$this->request->data['Search']['from_date'].' - '.$this->request->data['Search']['to_date'].')';
        $this->set(compact('data','reportTitle'));


    }


    public function search_opd_emergency()
    {
        $reqData = $this->request->query;
        $pram = array();
        if (!empty($reqData['name'])) {
            $pram['n'] = $reqData['name'];
        }

        if (!empty($reqData['mobile'])) {
            $pram['m'] = $reqData['mobile'];
        }

        if (!empty($reqData['from_date'])) {
            $pram['fd'] = $reqData['from_date'];
        }
        if (!empty($reqData['to_date'])) {
            $pram['td'] = $reqData['to_date'];
        }
        if (!empty($reqData['uhid'])) {
            $pram['u'] = $reqData['uhid'];
        }

        $this->redirect(
            array(
                "controller" => "app_admin",
                "action" => "opd_emergency",
                "?" => $pram,
            )
        );
    }


    public function opd_emergency()
    {
        $this->layout = 'app_admin_home';

        $login = $this->Session->read('Auth.User');

        $searchData = $this->request->query;


        $conditions["AppointmentCustomerStaffService.thinapp_id"] = $login['User']['thinapp_id'];
        $conditions["AppointmentCustomerStaffService.status <>"] = array('CANCELED', 'DELETED');


        if (isset($searchData['n']) && !empty($searchData['n']) && isset($searchData['m']) && !empty($searchData['m'])) {

            $this->request->data['Search']['name'] = $searchData['n'];
            $this->request->data['Search']['mobile'] = $searchData['m'];
            $conditions['AND'] = array(array(
                'OR' => array(
                    'AppointmentCustomer.first_name like' => "%" . $searchData['n'] . "%",
                    'Children.child_name like' => "%" . $searchData['n'] . "%"
                )
            ),
                array(
                    'OR' => array(
                        'AppointmentCustomer.mobile like' => "%" . $searchData['m'] . "%",
                        'Children.mobile like' => "%" . $searchData['m'] . "%"
                    )
                )

            );


        } else {


            if (isset($searchData['n']) && !empty($searchData['n'])) {
                $this->request->data['Search']['name'] = $searchData['n'];
                $conditions['OR'] = array(
                    'AppointmentCustomer.first_name like' => "%" . $searchData['n'] . "%",
                    'Children.child_name like' => "%" . $searchData['n'] . "%"
                );

            }

            if (isset($searchData['m']) && !empty($searchData['m'])) {
                $this->request->data['Search']['mobile'] = $searchData['m'];
                $conditions['OR'] = array(
                    'AppointmentCustomer.mobile like' => "%" . $searchData['m'] . "%",
                    'Children.mobile like' => "%" . $searchData['m'] . "%"
                );
            }
        }

        if (isset($searchData['u']) && !empty($searchData['u'])) {
            $this->request->data['Search']['uhid'] = $searchData['u'];
            $conditions['OR'] = array(
                'AppointmentCustomer.uhid like' => "%" . $searchData['u'] . "%",
                'Children.uhid like' => "%" . $searchData['u'] . "%"
            );
        }


        if (isset($searchData['fd']) && !empty($searchData['fd']) && isset($searchData['td']) && !empty($searchData['td'])) {

            $this->request->data['Search']['from_date'] = $searchData['fd'];
            $this->request->data['Search']['to_date'] = $searchData['td'];

            $from_date = DateTime::createFromFormat('d/m/Y', $searchData['fd']);
            $conditions["Date(AppointmentCustomerStaffService.created) >="] = $from_date->format('Y-m-d');

            $to_date = DateTime::createFromFormat('d/m/Y', $searchData['td']);
            $conditions["Date(AppointmentCustomerStaffService.created) <="] = $to_date->format('Y-m-d');

        } else {

            if (count($searchData) > 1) {
                if (isset($searchData['fd']) && !empty($searchData['fd']) && isset($searchData['td']) && !empty($searchData['td'])) {
                    $this->request->data['Search']['from_date'] = date('d/m/Y');
                    $this->request->data['Search']['to_date'] = date('d/m/Y');
                    $conditions["Date(AppointmentCustomerStaffService.created) >="] = date('Y-m-d');
                    $conditions["Date(AppointmentCustomerStaffService.created) <="] = date('Y-m-d');
                }
            } else {
                $this->request->data['Search']['from_date'] = date('d/m/Y');
                $this->request->data['Search']['to_date'] = date('d/m/Y');
                $conditions["Date(AppointmentCustomerStaffService.created) >="] = date('Y-m-d');
                $conditions["Date(AppointmentCustomerStaffService.created) <="] = date('Y-m-d');
            }


        }


        $opd_list = $this->AppointmentCustomerStaffService->find('all', array(
                'contain' => array('AppointmentStaff', 'AppointmentCustomer', 'Children', 'CustomerAdmitDetail' => array('HospitalDischarge'), 'ChildrenAdmitDetail' => array('HospitalDischarge')),
                'conditions' => $conditions,
                'order' => 'AppointmentCustomerStaffService.appointment_datetime DESC',
                'fields' => array(
                    'AppointmentCustomerStaffService.id', 'AppointmentStaff.name', 'AppointmentCustomerStaffService.queue_number', 'AppointmentCustomerStaffService.amount', 'AppointmentCustomerStaffService.status', 'AppointmentCustomerStaffService.created',
                    'AppointmentCustomer.id', 'AppointmentCustomer.uhid', 'AppointmentCustomer.mobile', 'AppointmentCustomer.first_name', 'AppointmentCustomer.created',
                    'Children.id', 'Children.uhid', 'Children.mobile', 'Children.child_name', 'Children.created',
                    'CustomerAdmitDetail.*', 'ChildrenAdmitDetail.*'
                ))
        );
        //pr($opd_list);die;



        $login1 = $this->Session->read('Auth.User');
        $reportTitle = $login1['Thinapp']['name'].' ('.$this->request->data['Search']['from_date'].' - '.$this->request->data['Search']['to_date'].')';

        $this->set(compact('reportTitle','opd_list'));

    }


    public function register_emergency_patient($patient_type, $patient_id = null)
    {
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User');

        if ($patient_type == "CU") {
            $object = 'AppointmentCustomer';
            $post = $this->AppointmentCustomer->find("first", array(
                "conditions" => array(
                    "AppointmentCustomer.id" => base64_decode($patient_id),
                ),
                'contain' => false
            ));

            $patient_name = $post['AppointmentCustomer']['first_name'];
        } else {
            $object = 'Children';
            $post = $this->Children->find("first", array(
                "conditions" => array(
                    "Children.id" => base64_decode($patient_id),
                ),
                'contain' => false
            ));
            $patient_name = $post['Children']['child_name'];
        }


        if ($this->request->is(array('post', 'put'))) {

            $post_data = $this->request->data['HospitalEmergency'];
            if ($patient_type == "CU") {
                $patient_type = "CUSTOMER";
                $this->request->data['AppointmentCustomer']['id'] = base64_decode($patient_id);
                $this->request->data['AppointmentCustomer']['first_name'] = $post_data['name'];
                $this->request->data['AppointmentCustomer']['gender'] = $post_data['gender'];
                $this->request->data['AppointmentCustomer']['age'] = $post_data['age'];

                if (!empty($post_data['dob'])) {
                    $date = DateTime::createFromFormat('d/m/Y', $post_data['dob']);
                    $this->request->data['AppointmentCustomer']['dob'] = $date->format('Y-m-d');

                }

                $this->request->data['AppointmentCustomer']['country_id'] = isset($post_data['country_id'][0])?$post_data['country_id'][0]:0;
                $this->request->data['AppointmentCustomer']['state_id'] = isset($post_data['state_id'][0])?$post_data['state_id'][0]:0;

                if(isset($post_data['city_id'][0]) && is_numeric($post_data['city_id'][0]))
                {
                    $cityData = $this->Cities->findById($post_data['city_id'][0],array("contain"=>false));
                    $this->request->data['AppointmentCustomer']['city_name'] = ucwords(strtolower(trim($cityData['Cities']['name'])));
                    $this->request->data['AppointmentCustomer']['city_id'] = $cityData['Cities']['id'];
                }
                else if(isset($post_data['city_id'][0]) && !empty($post_data['city_id'][0]))
                {
                    $this->request->data['AppointmentCustomer']['city_id'] = 0;
                    $this->request->data['AppointmentCustomer']['city_name'] = ucwords(strtolower(trim($post_data['city_id'][0])));
                }
                else
                {
                    $this->request->data['AppointmentCustomer']['city_id'] = 0;
                    $this->request->data['AppointmentCustomer']['city_name'] = "";
                }


                /*$this->request->data['AppointmentCustomer']['country_id'] = @$post_data['country_id'];
                $this->request->data['AppointmentCustomer']['state_id'] = @$post_data['state_id'];
                $this->request->data['AppointmentCustomer']['city_id'] = @$post_data['city_id']; */

            } else {
                $patient_type = "CHILDREN";
                $this->request->data['Children']['id'] = base64_decode($patient_id);
                $this->request->data['Children']['child_name'] = $post_data['name'];
                /*$this->request->data['Children']['country_id'] = @$post_data['country_id'];
                $this->request->data['Children']['state_id'] = @$post_data['state_id'];
                $this->request->data['Children']['city_id'] = @$post_data['city_id']; */

                $this->request->data['Children']['country_id'] = isset($post_data['country_id'][0])?$post_data['country_id'][0]:0;
                $this->request->data['Children']['state_id'] = isset($post_data['state_id'][0])?$post_data['state_id'][0]:0;

                if(isset($post_data['city_id'][0]) && is_numeric($post_data['city_id'][0]))
                {
                    $cityData = $this->Cities->findById($post_data['city_id'][0],array("contain"=>false));
                    $this->request->data['Children']['city_name'] = ucwords(strtolower(trim($cityData['Cities']['name'])));
                    $this->request->data['Children']['city_id'] = $cityData['Cities']['id'];
                }
                else if(isset($post_data['city_id'][0]) && !empty($post_data['city_id'][0]))
                {
                    $this->request->data['Children']['city_id'] = 0;
                    $this->request->data['Children']['city_name'] = ucwords(strtolower(trim($post_data['city_id'][0])));
                }
                else
                {
                    $this->request->data['Children']['city_id'] = 0;
                    $this->request->data['Children']['city_name'] = "";
                }

            }

            $this->request->data['HospitalEmergency']['patient_type'] = $patient_type;

            if ($patient_type == "CUSTOMER") {
                $this->request->data['HospitalEmergency']['appointment_customer_id'] = base64_decode($patient_id);
            } else {
                $this->request->data['HospitalEmergency']['children_id'] = base64_decode($patient_id);
            }


            $this->request->data['HospitalEmergency']['thinapp_id'] = $login['User']['thinapp_id'];

            if (!empty($post_data['admit_date'])) {
                $date = DateTime::createFromFormat('d/m/Y h:i A', $post_data['admit_date']);
                $this->request->data['HospitalEmergency']['admit_date'] = $date->format('Y-m-d H:i');

            }

            if (!empty($this->request->data['HospitalEmergency']['referred_by_mobile'])) {
                $this->request->data['HospitalEmergency']['referred_by_mobile'] = Custom::create_mobile_number($this->request->data['HospitalEmergency']['referred_by_mobile']);
            }

            $this->HospitalIpd->set($this->request->data['HospitalEmergency']);

            if ($this->HospitalEmergency->validates()) {
                if ($this->HospitalEmergency->saveAll($this->request->data)) {
                    $this->Session->setFlash(__('Patient registered successfully.'), 'default', array(), 'success');
                    $this->redirect(array('controller' => 'app_admin', 'action' => 'list_hospital_emergency'));
                } else {
                    $this->Session->setFlash(__('Sorry member could not registered.'), 'default', array(), 'error');
                }
            }


        }


        if (!$this->request->data) {
            $this->request->data = $post;
        }

        //pr($post);die;
        $this->set(compact('post', 'object', 'patient_name', 'patient_type'));

    }


    public function get_hospital_service_list()
    {
        $this->autoRender = false;
        $response = "";
        $login = $this->Session->read('Auth.User');
        $thin_app_id = $login['Thinapp']['id'];
        if ($this->request->is('ajax')) {
            $ward_id = $this->request->data['ward_id'];


            $condition['MedicalProduct.hospital_service_category_id'] = $ward_id;
            $condition['MedicalProduct.status'] = 'ACTIVE';
            $booked_bed_room = $this->IpdBedHistory->find('list', array('conditions' => array('IpdBedHistory.occupancy' => 'OCCUPIED', 'HospitalIpd.status' => 'ACTIVE', 'IpdBedHistory.thinapp_id' => $thin_app_id), 'fields' => array('IpdBedHistory.id', 'IpdBedHistory.hospital_service_id'),"contain"=>array("HospitalIpd")));;

            if(!empty($booked_bed_room)){
                foreach($booked_bed_room as $key => $value)
                    if(empty($value))
                        unset($booked_bed_room[$key]);
                if(!empty($booked_bed_room)){
                    $condition['MedicalProduct.id !='] = $booked_bed_room;
                }

            }
            $response_arr = $this->MedicalProduct->find('list', array('conditions' => $condition, 'order' => array('MedicalProduct.name' => 'ASC')));;
            if (!empty($response_arr)) {
                foreach ($response_arr as $key => $name) {
                    $response .= "<option value='" . $key . "'>" . $name . "</option>";
                }
            }
        }
        return $response;
    }

    public function billing_setting()
    {

    }

    public function get_ipd_bed_status()
    {
        $this->layout = false;
        if ($this->request->is(array('ajax'))) {
            $login = $this->Session->read('Auth.User');
            $thin_app_id = $login['Thinapp']['id'];
            $query = "SELECT * FROM `medical_products` LEFT JOIN `ipd_bed_history` ON (`ipd_bed_history`.`hospital_service_id` = `medical_products`.`id` AND `ipd_bed_history`.`occupancy` = 'OCCUPIED' AND `ipd_bed_history`.`status` = 'ACTIVE') LEFT JOIN `hospital_service_categories` ON (`hospital_service_categories`.`id` = `medical_products`.`hospital_service_category_id`) LEFT JOIN `hospital_ipd` ON (`ipd_bed_history`.`hospital_ipd_id` = `hospital_ipd`.`id` AND `hospital_ipd`.`status` = 'ACTIVE') WHERE `hospital_service_categories`.`hospital_service_category_type_id` IN ('3','4') AND `medical_products`.`thinapp_id` = '" . $thin_app_id . "' AND `medical_products`.`status` = 'ACTIVE' ORDER BY `hospital_service_categories`.`id`";
            $dataToShow = $this->MedicalProduct->query($query);
            $this->set(compact('dataToShow'));
            $this->render('get_ipd_bed_status', 'ajax');

        }

    }


    public function search_get_appointment_without_token_list()
    {
        $reqData = $this->request->query;
        $pram = array();
        if (!empty($reqData['name'])) {
            $pram['n'] = $reqData['name'];
        }
        if (!empty($reqData['appointment_staff_id'])) {
            $pram['a'] = $reqData['appointment_staff_id'];
        }

        if (!empty($reqData['mobile'])) {
            $pram['m'] = $reqData['mobile'];
        }

        if (!empty($reqData['from_date'])) {
            $pram['fd'] = $reqData['from_date'];
        }
        if (!empty($reqData['to_date'])) {
            $pram['td'] = $reqData['to_date'];
        }
        if (!empty($reqData['uhid'])) {
            $pram['u'] = $reqData['uhid'];
        }

        $this->redirect(
            array(
                "controller" => "app_admin",
                "action" => "get_appointment_without_token_list",
                "?" => $pram,
            )
        );
    }

    public function get_appointment_without_token_list()
    {

        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User');


        $searchData = $this->request->query;


        $conditions["AppointmentWithoutToken.thinapp_id"] = $login['User']['thinapp_id'];


        if (isset($searchData['n']) && !empty($searchData['n'])) {
            $this->request->data['Search']['name'] = $searchData['n'];
            $conditions['AppointmentCustomer.first_name like'] = "%" . $searchData['n'] . "%";
        }

        if (isset($searchData['a']) && !empty($searchData['a'])) {
            $this->request->data['Search']['appointment_staff_id'] = $searchData['a'];
            $conditions['AppointmentWithoutToken.appointment_staff_id'] = $searchData['a'];
        }

        if (isset($searchData['m']) && !empty($searchData['m'])) {
            $this->request->data['Search']['mobile'] = $searchData['m'];
            $conditions['AppointmentWithoutToken.mobile LIKE'] = "%" . $searchData['m'] . "%";
        }

        if (isset($searchData['fd']) && !empty($searchData['fd'])) {
            $this->request->data['Search']['from_date'] = $searchData['fd'];

            $from_date = DateTime::createFromFormat('d/m/Y', $searchData['fd']);
            $conditions["Date(AppointmentWithoutToken.appointment_datetime) >="] = $from_date->format('Y-m-d');

        }

        if (isset($searchData['td']) && !empty($searchData['td'])) {
            $this->request->data['Search']['to_date'] = $searchData['td'];
            $to_date = DateTime::createFromFormat('d/m/Y', $searchData['td']);
            $conditions["Date(AppointmentWithoutToken.appointment_datetime) <="] = $to_date->format('Y-m-d');
        }

        if (isset($searchData['u']) && !empty($searchData['u'])) {
            $this->request->data['Search']['uhid'] = $searchData['u'];
            $conditions['AppointmentCustomer.uhid'] = $searchData['u'];
        }

        //pr($conditions); die;


        $appointment_list = $this->AppointmentWithoutToken->find('all', array(
                'contain' => array('AppointmentStaff', 'AppointmentCustomer'),
                'conditions' => $conditions,
                'order' => 'AppointmentWithoutToken.id DESC',
            )
        );

        $login1 = $this->Session->read('Auth.User');

        $reportTitle = $login1['Thinapp']['name'].' ('.$searchData['fd'].' - '.$searchData['td'].')';

        $this->set(compact('reportTitle','appointment_list'));
        //pr($appointment_list); die;

    }


    public function search_all_appointment_without_token()
    {
        $reqData = $this->request->query;
        $pram = array();
        if (!empty($reqData['name'])) {
            $pram['n'] = $reqData['name'];
        }
        if (!empty($reqData['uhid'])) {
            $pram['uh'] = $reqData['uhid'];
        }
        if (!empty($reqData['mobile'])) {
            $pram['m'] = $reqData['mobile'];
        }

        if (!empty($reqData['from_date'])) {
            $pram['fd'] = $reqData['from_date'];
        }

        if (!empty($reqData['to_date'])) {
            $pram['td'] = @$reqData['to_date'];
        }
        if (!empty($reqData['address'])) {
            $pram['a'] = $reqData['address'];
        }
        if (!empty($reqData['search_for'])) {
            $pram['sf'] = $reqData['search_for'];
        }
        $this->redirect(
            array(
                "controller" => "app_admin",
                "action" => "all_appointment_without_token",
                "?" => $pram,
            )
        );
    }

    public function all_appointment_without_token()
    {
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User.User');
        $thinapp_id = $login['thinapp_id'];
        $cus_condition['AppointmentCustomer.thinapp_id'] = $thinapp_id;
        $cus_condition['AppointmentCustomer.status'] = 'ACTIVE';
        $searchData = $this->request->query;


        if (isset($searchData['n']) && !empty($searchData['n'])) {
            $this->request->data['Search']['name'] = $searchData['n'];
            $cus_condition["AppointmentCustomer.first_name LIKE"] = '%' . $searchData['n'] . '%';

        }

        if (isset($searchData['uh']) && !empty($searchData['uh'])) {
            $this->request->data['Search']['uhid'] = $searchData['uh'];
            $cus_condition["AppointmentCustomer.uhid like "] = "%" . $searchData['uh'] . "%";

        }

        if (isset($searchData['sf']) && !empty($searchData['sf'])) {

            $this->request->data['Search']['search_for'] = $searchData['sf'];
            if ($searchData['sf'] != 'ALL') {
                $cus_condition["AppointmentCustomer.is_admit"] = $searchData['sf'];

            }
        }


        if (isset($searchData['m']) && !empty($searchData['m'])) {
            $this->request->data['Search']['mobile'] = $searchData['m'];
            $cus_condition["AppointmentCustomer.mobile like"] = '%' . $searchData['m'] . '%';

        }


        $this->request->data['Search']['from_date'] = date('d/m/Y');
        $this->request->data['Search']['to_date'] = date('d/m/Y');


        if (isset($searchData['fd']) && !empty($searchData['fd']) && isset($searchData['td']) && !empty($searchData['td'])) {

            $this->request->data['Search']['from_date'] = $searchData['fd'];
            $this->request->data['Search']['to_date'] = $searchData['td'];

            $from_date = DateTime::createFromFormat('d/m/Y', $searchData['fd']);
            $cus_condition["Date(AppointmentCustomer.created) >="] = $from_date->format('Y-m-d');


            $to_date = DateTime::createFromFormat('d/m/Y', $searchData['td']);
            $cus_condition["Date(AppointmentCustomer.created) <="] = $to_date->format('Y-m-d');


        } else {
            $cus_condition["Date(AppointmentCustomer.created)"] = date('Y-m-d');


        }


        if (isset($searchData['a']) && !empty($searchData['a'])) {
            $this->request->data['Search']['address'] = $searchData['a'];
            $cus_condition["AppointmentCustomer.address like"] = '%' . $searchData['a'] . '%';

        }


        $patientData = $this->AppointmentCustomer->find('all', array('conditions' => $cus_condition, 'contain' => array('CustomerAdmitDetail', 'MedicalProductOrder'), 'recursive' => 2));


        $childData = array();
        $data = array_merge($patientData, $childData);


        usort($data, function ($a, $b) {
            $ad = new DateTime($a['AppointmentCustomer']['created']);
            $bd = new DateTime($b['AppointmentCustomer']['created']);
            if ($ad == $bd) {
                return -1;
            }
            return $ad < $bd ? -1 : 1;
        });

        //pr($data);die;

        
        $login1 = $this->Session->read('Auth.User');
        $reportTitle = $login1['Thinapp']['name'].' ('.$this->request->data['Search']['from_date'].' - '.$this->request->data['Search']['to_date'].')';
        $this->set(compact('data','reportTitle'));


    }

    public function add_appointment_without_token()
    {

        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User');
        if ($this->request->is(array('post', 'put'))) {
            $datasource = $this->AppointmentCustomer->getDataSource();
            try {
                $datasource->begin();

                $mobile = Custom::create_mobile_number($this->request->data['AppointmentCustomer']['mobile']);
                $this->request->data['AppointmentCustomer']['mobile'] = $mobile;
                $this->request->data['AppointmentCustomer']['thinapp_id'] = $login['User']['thinapp_id'];
                $user_data = Custom::get_user_by_mobile($login['User']['thinapp_id'], $mobile);
                $this->request->data['AppointmentCustomer']['user_id'] = !empty($user_data) ? $user_data['id'] : 0;
                $this->request->data['AppointmentCustomer']['customer_created_by'] = $login['User']['id'];
                if (!empty($this->request->data['AppointmentCustomer']['dob'])) {
                    $date = DateTime::createFromFormat('d/m/Y', $this->request->data['AppointmentCustomer']['dob']);
                    $this->request->data['AppointmentCustomer']['dob'] = $date->format('Y-m-d');
                }
                $this->AppointmentCustomer->set($this->request->data['AppointmentCustomer']);
                if ($this->AppointmentCustomer->validates()) {
                    if ($this->AppointmentCustomer->save($this->request->data['AppointmentCustomer'])) {
                        $patient_id = $this->AppointmentCustomer->getLastInsertId();

                        $this->request->data['AppointmentWithoutToken']['appointment_customer_id'] = $patient_id;
                        $this->request->data['AppointmentWithoutToken']['thinapp_id'] = $login['User']['thinapp_id'];
                        $this->request->data['AppointmentWithoutToken']['mobile'] = $mobile;
                        $appointmentDatetime = $this->request->data['AppointmentWithoutToken']['appointment_datetime'];
                        $date = DateTime::createFromFormat('d/m/Y', $appointmentDatetime);
                        $this->request->data['AppointmentWithoutToken']['appointment_datetime'] = $date->format('Y-m-d');

                        $this->AppointmentWithoutToken->set($this->request->data['AppointmentWithoutToken']);
                        if ($this->AppointmentWithoutToken->validates()) {
                            if ($this->AppointmentWithoutToken->save($this->request->data['AppointmentWithoutToken'])) {
                                Custom::create_and_share_folder($login['User']['thinapp_id'], $mobile, $this->request->data['AppointmentCustomer']['first_name'], 'CUSTOMER', $patient_id);
                                $datasource->commit();
                                $this->Session->setFlash(__('Patient added successfully.'), 'default', array(), 'success');
                                $this->redirect(array('controller' => 'app_admin', 'action' => 'get_appointment_without_token_list'));
                            } else {

                                $this->request->data['AppointmentWithoutToken']['appointment_datetime'] = $appointmentDatetime;

                                $datasource->rollback();
                                $this->Session->setFlash(__('Sorry patient could not be added.'), 'default', array(), 'error');
                            }
                        }
                    } else {
                        $datasource->rollback();
                        $this->Session->setFlash(__('Sorry patient could not be added.'), 'default', array(), 'error');
                    }

                } else {
                    $datasource->rollback();
                    $this->Session->setFlash(__('Sorry patient could not be added.'), 'default', array(), 'error');
                    //$this->redirect(array('controller' => 'app_admin', 'action' => 'add_appointment_without_token'));
                }

            } catch (Exception $e) {
                $datasource->rollback();
            }
        }
    }

    public function book_appointment_without_token($patientID)
    {


        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User');
        if ($this->request->is(array('post', 'put'))) {
            $datasource = $this->AppointmentWithoutToken->getDataSource();
            try {

                $datasource->begin();
                $patient_id = base64_decode($patientID);

                $this->request->data['AppointmentWithoutToken']['appointment_customer_id'] = $patient_id;
                $this->request->data['AppointmentWithoutToken']['thinapp_id'] = $login['User']['thinapp_id'];
                $customer = $this->AppointmentCustomer->find('first', array('fields' => array('mobile'), 'conditions' => array('AppointmentCustomer.id' => $patient_id), 'contain' => false));
                $this->request->data['AppointmentWithoutToken']['mobile'] = $customer['AppointmentCustomer']['mobile'];
                $appointmentDatetime = $this->request->data['AppointmentWithoutToken']['appointment_datetime'];
                $date = DateTime::createFromFormat('d/m/Y', $appointmentDatetime);
                $this->request->data['AppointmentWithoutToken']['appointment_datetime'] = $date->format('Y-m-d');


                $this->AppointmentWithoutToken->set($this->request->data['AppointmentWithoutToken']);
                if ($this->AppointmentWithoutToken->validates()) {
                    if ($this->AppointmentWithoutToken->save($this->request->data['AppointmentWithoutToken'])) {
                        $datasource->commit();
                        $this->Session->setFlash(__('Booked successfully.'), 'default', array(), 'success');
                        $this->redirect(array('controller' => 'app_admin', 'action' => 'get_appointment_without_token_list'));
                    } else {

                        $this->request->data['AppointmentWithoutToken']['appointment_datetime'] = $appointmentDatetime;

                        $datasource->rollback();
                        $this->Session->setFlash(__('Sorry could not be Booked.'), 'default', array(), 'error');
                    }
                }


            } catch (Exception $e) {
                $datasource->rollback();
            }
        }
    }


    public function update_billing_title()
    {
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User');
        $thinappID = $login['User']['thinapp_id'];


        $labID = 0;
        $loginLab = $this->Session->read('Auth.User');
        $roleLab = $loginLab['USER_ROLE'];
        if ($roleLab == "LAB" || $roleLab == 'PHARMACY') {
            $labID = $loginLab['LabPharmacyUser']['id'];


            if ($this->request->is(array('post', 'put'))) {
                $datasource = $this->LabPharmacyUser->getDataSource();
                try {
                    $datasource->begin();
                    $this->request->data['Thinapp']['id'] = $labID;
                    if ($this->LabPharmacyUser->save($this->request->data['Thinapp'])) {
                        $datasource->commit();
                        $this->Session->setFlash(__('Updated successfully.'), 'default', array(), 'success');
                    } else {
                        $datasource->rollback();
                        $this->Session->setFlash(__('Sorry could not be updated.'), 'default', array(), 'error');
                    }
                } catch (Exception $e) {
                    $datasource->rollback();
                }
            } else {
                //echo $labID;
                $thinappData = $this->LabPharmacyUser->find('first', array(
                    'fields' => array('receipt_header_title', 'receipt_footer_title'),
                    'conditions' => array(
                        'LabPharmacyUser.id' => $labID
                    ),
                    'contain' => false
                ));
                //pr($thinappData);
                $thinappData['Thinapp'] = $thinappData['LabPharmacyUser'];
                //pr($thinappData); die;
                $this->request->data = $thinappData;
            }


        } else {
            if ($this->request->is(array('post', 'put'))) {
                $datasource = $this->Thinapp->getDataSource();
                try {
                    $datasource->begin();
                    $this->request->data['Thinapp']['id'] = $thinappID;
                    if ($this->Thinapp->save($this->request->data['Thinapp'])) {
                        $datasource->commit();
                        $this->Session->setFlash(__('Updated successfully.'), 'default', array(), 'success');
                        $this->redirect(array('controller' => 'app_admin', 'action' => 'update_billing_title'));
                    } else {
                        $datasource->rollback();
                        $this->Session->setFlash(__('Sorry patient could not be added.'), 'default', array(), 'error');
                    }
                } catch (Exception $e) {
                    $datasource->rollback();
                }
            } else {
                $thinappData = $this->Thinapp->find('first', array(
                    'conditions' => array(
                        'Thinapp.id' => $thinappID
                    ),
                    'contain' => false
                ));
                $this->request->data = $thinappData;
            }
        }
    }

    public function deposit_amount_modal()
    {
        $this->layout = 'ajax';
        if ($this->request->is('ajax')) {
            $login = $this->Session->read('Auth.User.User');
            $ipd_id = base64_decode($this->request->data['ipd_id']);
            $this->loadModel('HospitalDepositAmount'); //or you cande load it in beforeFilter()
            $this->loadModel('HospitalIpd'); //or you cande load it in beforeFilter()

            $ipd_data = $this->HospitalIpd->findById($ipd_id);

            $patient_name = @$ipd_data['AppointmentCustomer']['first_name'] . $ipd_data['Children']['child_name'];
            $ipd_unique_id = @$ipd_data['HospitalIpd']['ipd_unique_id'];

            $data_list = $this->HospitalDepositAmount->find('all', array(
                    'fields'=>array('HospitalPaymentTypeDetail.*','HospitalPaymentType.*','MedicalProductOrder.*','HospitalDepositAmount.*'),
                    'joins' => array(
                        array('table' => 'hospital_payment_type_details',
                            'alias' => 'HospitalPaymentTypeDetail',
                            'type' => 'LEFT',
                            'conditions' => array(
                                'MedicalProductOrder.id = HospitalPaymentTypeDetail.medical_product_order_id'
                            )
                        )
                    ),
                    'contain' => array('HospitalPaymentType', 'MedicalProductOrder'),
                    'conditions' => array(
                        'HospitalDepositAmount.hospital_ipd_id' => $ipd_id,
                        'HospitalDepositAmount.status'=>'ACTIVE',
                    	'MedicalProductOrder.status'=>'ACTIVE'
                    ),
                    'order' => 'HospitalDepositAmount.id DESC',
            		'group' => 'HospitalDepositAmount.id'
            		
                )
            );

            $userExpenseData =array();
            $query = "select mpo.id, GROUP_CONCAT(mp.name) name, mpo.bill_id, mpo.total_amount, mpo.payment_description, mpo.payment_status, mpo.created, mpo.refund_amount, mpo.is_refunded from medical_product_orders as mpo join medical_product_order_details as mpod on mpo.id = mpod.medical_product_order_id join medical_products as mp on mp.id=mpod.medical_product_id where mpo.hospital_ipd_id =$ipd_id and mpo.status='ACTIVE' and mpo.is_expense = 'Y' and mpo.is_advance ='N' and mpo.is_opd = 'N' group by mpo.id order by mpo.created desc";
            $connection = ConnectionUtil::getConnection();
            $list = $connection->query($query);
            if ($list->num_rows) {
                $userExpenseData = mysqli_fetch_all($list, MYSQLI_ASSOC);
            }



            $balance = $discount = $tds = 0;
            foreach ($data_list as $key => $value) {
                $balance += $value['HospitalDepositAmount']['amount'];
                $discount += $value['HospitalDepositAmount']['discount'];
                $tds += $value['HospitalDepositAmount']['tds'];

            }


            $ipd_id = base64_encode($ipd_id);
            $this->set(compact('deposit', 'expense', 'userExpenseData', 'data_list', 'patient_name', 'balance', 'ipd_unique_id', 'ipd_id', 'discount', 'tds'));
            $this->render('deposit_amount_modal', 'ajax');


        } else {
            exit();
        }

    }

    public function add_deposit_amount($ipd_id = null)
    {

        $this->layout = 'ajax';
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $login = $this->Session->read('Auth.User.User');


            $params = array();
            parse_str($this->request->data, $params);
            $allData = $params;
            $this->request->data = $params['data'];
            $ipd_id = base64_decode($ipd_id);
            $ipd_data = $this->HospitalIpd->findById($ipd_id, array('contain' => false));

            $data = $this->request->data['HospitalDepositAmount'];
            if (!empty($data['hda'])) {
                $data['id'] = base64_decode($data['hda']);
            } else {

            }
            $data['thinapp_id'] = $login['thinapp_id'];
            $data['patient_id'] = $ipd_data['HospitalIpd']['patient_id'];
            $data['patient_type'] = $ipd_data['HospitalIpd']['patient_type'];
            $data['hospital_ipd_id'] = $ipd_data['HospitalIpd']['id'];
            $data['discount'] = !empty($data['discount']) ? $data['discount'] : 0;
            $data['tds'] = !empty($data['tds']) ? $data['tds'] : 0;
            $response = array();
            if ($this->HospitalDepositAmount->save($data)) {

                if (isset($data['id'])) {
                    $last_insert_id = $data['id'];
                    $medicalData = $this->MedicalProductOrder->find('first', array('conditions' => array('MedicalProductOrder.hospital_deposit_amount_id' => $last_insert_id), 'contain' => false));
                    if (!empty($medicalData['MedicalProductOrder']['id'])) {
                        $orderData['id'] = $medicalData['MedicalProductOrder']['id'];
                        $orderData['modified_by_user_id'] = $login['id'];
                    } else {
                        $orderData['created_by_user_id'] = $login['id'];
                    }
                } else {
                    $last_insert_id = $this->HospitalDepositAmount->getLastInsertId();
                    $orderData['created_by_user_id'] = $login['id'];
                }

                if ($data['patient_type'] == 'CUSTOMER') {
                    $orderData['appointment_customer_id'] = $data['patient_id'];
                } else {
                    $orderData['children_id'] = $data['patient_id'];
                }
                $orderData['hospital_deposit_amount_id'] = $last_insert_id;
                $orderData['hospital_ipd_id'] = $ipd_data['HospitalIpd']['id'];
                $orderData['appointment_address_id'] = $ipd_data['HospitalIpd']['appointment_address_id'];
                $orderData['receipt_type'] = "'IPD_ADVANCE'";
                $orderData['is_advance'] = 'Y';
                $orderData['is_opd'] = 'N';
                $orderData['hospital_payment_type_id'] = $data['hospital_payment_type_id'];
                if ($data['hospital_payment_type_id'] > 0) {
                    $paymentTypeName = $this->HospitalPaymentType->findById($data['hospital_payment_type_id'], array('contain' => false));
                    $paymentTypeName = $paymentTypeName['HospitalPaymentType']['name'];
                } else {
                    $paymentTypeName = 'CASH';
                }
                $orderData['payment_type_name'] = $paymentTypeName;
                $orderData['appointment_staff_id'] = $ipd_data['HospitalIpd']['appointment_staff_id'];
                $orderData['thinapp_id'] = $login['thinapp_id'];
                $orderData['total_amount'] = (($data['amount'] + $data['tds']) - $data['discount']);

                $this->MedicalProductOrder->save($orderData);
                if (isset($orderData['id'])) {
                    $orderID = $orderData['id'];
                    $medicalProductOrderId = base64_encode($orderData['id']);

                    $paymentTypeData = $this->HospitalPaymentTypeDetail->find("first",array(
                        "conditions"=>array("HospitalPaymentTypeDetail.medical_product_order_id"=>$orderID),
                        "contain"=>false
                    ));

                } else {
                    $paymentTypeData = array();
                    $orderID = $this->MedicalProductOrder->getLastInsertId();
                    $medicalProductOrderId = base64_encode($this->MedicalProductOrder->getLastInsertId());
                }


                $remark = isset($allData["remark"])?$allData["remark"]:"";
                $mobile_no = isset($allData["mobile_no"])?$allData["mobile_no"]:"";
                $txn_no = isset($allData["txn_no"])?$allData["txn_no"]:"";
                $beneficiary_name = isset($allData["beneficiary_name"])?$allData["beneficiary_name"]:"";
                $bank_account = isset($allData["bank_account"])?$allData["bank_account"]:"";
                $transaction_id = isset($allData["transaction_id"])?$allData["transaction_id"]:"";
                $valid_upto = isset($allData["valid_upto"])?$allData["valid_upto"]:"";
                $holder_name = isset($allData["holder_name"])?$allData["holder_name"]:"";
                $card_no = isset($allData["card_no"])?$allData["card_no"]:"";

                $paymentDetailData = array(
                    "thinapp_id"=>$login['thinapp_id'],
                    "medical_product_order_id"=>$orderID,
                    "hospital_payment_type_id"=>!empty($data['hospital_payment_type_id'])?$data['hospital_payment_type_id']:0,
                    "remark"=>$remark,
                    "mobile_no"=>$mobile_no,
                    "txn_no"=>$txn_no,
                    "beneficiary_name"=>$beneficiary_name,
                    "bank_account"=>$bank_account,
                    "transaction_id"=>$transaction_id,
                    "valid_upto"=>$valid_upto,
                    "holder_name"=>$holder_name,
                    "card_no"=>$card_no,
                );

                if(isset($paymentTypeData['HospitalPaymentTypeDetail']['id'])){
                    $paymentDetailData["id"] = $login['thinapp_id'];
                    }

                $this->HospitalPaymentTypeDetail->save($paymentDetailData);
            	$connection = ConnectionUtil::getConnection();
                $settlement_update = Custom::updateSettlmentHistory($connection,base64_decode($medicalProductOrderId),$login['thinapp_id']);



                $response["orderID"] = $medicalProductOrderId;
                $response["status"] = 1;
                $response["message"] = "Amount added successfully";
                if (!empty($data['id'])) {
                    $response["message"] = "Amount edited successfully";
                }
            } else {
                $response["status"] = 0;
                $response["message"] = "Sorry amount could not add.";
                if (!empty($data['id'])) {
                    $response["message"] = "Sorry amount could not edit.";
                }
            }
            echo json_encode($response);
        } else {
            exit();
        }


    }

    public function delete_deposit_amount()
    {

        $this->layout = 'ajax';
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $login = $this->Session->read('Auth.User.User');
            $id = base64_decode($this->request->data['ipd_id']);
            $response = array();

            if ($this->HospitalDepositAmount->updateAll(array('HospitalDepositAmount.status' => "'INACTIVE'"), array('HospitalDepositAmount.id' => $id))) {
                $this->MedicalProductOrder->updateAll(array('MedicalProductOrder.status' => "'INACTIVE'", 'MedicalProductOrder.modified_by_user_id' => $login['id']), array('MedicalProductOrder.hospital_deposit_amount_id' => $id));
                $response["status"] = 1;
                $response["message"] = "Amount refund successfully";
            } else {
                $response["status"] = 0;
                $response["message"] = "Sorry amount could not refund.";
            }
            echo json_encode($response);
        } else {
            exit();
        }


    }

    public function search_appointment_customer_without_token()
    {
        $this->layout = 'ajax';
        if ($this->request->is('ajax')) {

            $login = $this->Session->read('Auth.User.User');
            $thin_app_id = $login['thinapp_id'];
            $appointmentMobiles = $this->AppointmentCustomer->find('list', array('fields' => array('AppointmentCustomer.mobile'), 'conditions' => array('thinapp_id' => $thin_app_id), 'group' => 'AppointmentCustomer.mobile'));
            $this->set(array('appointmentMobiles' => $appointmentMobiles));
            $this->render('search_appointment_customer_without_token', 'ajax');
        } else {
            exit();
        }

    }


    public function load_search_customer_list_without_token()
    {
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $login = $this->Session->read('Auth.User.User');
            $mobile = ($this->request->data['mobile']);
            $thin_app_id = $login['thinapp_id'];
            $customer_list = Custom::get_search_customer_list($mobile, $thin_app_id);
            $this->set(compact('customer_list'));
            $this->render('load_search_customer_list_without_token', 'ajax');
        } else {
            exit();
        }

    }

    public function load_search_customer_list_uhid_without_token()
    {
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $login = $this->Session->read('Auth.User.User');
            $UHID = ($this->request->data['UHID']);
            $thin_app_id = $login['thinapp_id'];
            $customer_list = Custom::get_search_customer_list_uhid($UHID, $thin_app_id);
            $this->set(compact('customer_list'));
            $this->render('load_search_customer_list_uhid_without_token', 'ajax');
        } else {
            exit();
        }

    }

    public function get_book_new_appointment_without_token()
    {
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            //pr($this->request->data); die;
            $post = array();
            $login = $this->Session->read('Auth.User.User');
            $post['app_key'] = APP_KEY;
            $post['thin_app_id'] = $login['thinapp_id'];
            $post['user_id'] = $login['id'];
            $post['role_id'] = $login['role_id'];
            $post['mobile'] = "+91" . $this->request->data['mobile'];

            $post['user_type'] = ($this->request->data['user_type']);
            $post['children_id'] = ($this->request->data['customer_id']);
            $post['customer_id'] = ($this->request->data['customer_id']);
            $post['customer_name'] = isset($this->request->data['first_name']) ? $this->request->data['first_name'] : "";
            $post['type'] = isset($this->request->data['type']) ? $this->request->data['type'] : "";
            $post['customer_mobile'] = $this->request->data['mobile'];
            $post['gender'] = isset($this->request->data['gender']) ? $this->request->data['gender'] : "";
            $post['parents_name'] = isset($this->request->data['parents_name']) ? $this->request->data['parents_name'] : "";
            $post['payment_type'] = "CASH";
            $post['transaction_id'] = "";
            $post['appointment_user_role'] = Custom::get_appointment_role($login['mobile'], $login['thinapp_id'], $login['role_id']);
            if ($post['type'] != 'NEW') {
                if ($post['user_type'] == 'CHILDREN') {
                    $data = $this->Children->find('first', array('conditions' => array('Children.id' => $post['customer_id'])));
                } else {
                    $data = $this->AppointmentCustomer->find('first', array('conditions' => array('AppointmentCustomer.id' => $post['customer_id'])));
                }
                $this->request->data = $data;
            }

            $datalistUser = $this->AppointmentCustomer->find('list', array('fields' => array('first_name'), 'conditions' => array('AppointmentCustomer.thinapp_id' => $login['thinapp_id']), 'order' => 'rand()', 'limit' => 3000));
            $datalistAddress = $this->AppointmentCustomer->find('list', array('fields' => array('address'), 'condition' => array('thinapp_id' => $login['thinapp_id']), 'order' => 'rand()', 'group' => array('address'), 'limit' => 500, 'contain' => false));
            $this->set(array('post' => $post, 'datalistUser' => $datalistUser, 'datalistAddress' => $datalistAddress));
            $this->render('get_book_new_appointment_without_token', 'ajax');

        }
    }


    public function web_book_appointment_without_token()
    {
        $this->autoRender = false;
        if ($this->request->is('ajax')) {

            $messageData = array();

            if (isset($this->request->data['Children'])) {
                $this->request->data['Children']['postData'] = json_decode($this->request->data['Children']['postData'], true);
                $data = $this->request->data['Children'];
                if (isset($data['id'])) {
                    $login = $this->Session->read('Auth.User.User');
                    $dataToSave['app_key'] = APP_KEY;
                    $dataToSave['thin_app_id'] = $login['thinapp_id'];
                    $dataToSave['app_key'] = $data['postData']['app_key'];
                    $dataToSave['user_id'] = $data['postData']['user_id'];
                    $dataToSave['mobile'] = Custom::create_mobile_number($data['postData']['mobile']);
                    $dataToSave['patient_type'] = 'CHILDREN';
                    $dataToSave['patient_id'] = $data['id'];
                    $dataToSave['patient_name'] = $data['child_name'];
                    $dataToSave['blood_group'] = $data['blood_group'];
                    $dataToSave['patient_mobile'] = Custom::create_mobile_number($data['parents_mobile']);
                    $date = DateTime::createFromFormat('d/m/Y', $data['dob']);
                    $dataToSave['dob'] = $date->format('Y-m-d');
                    $dataToSave['gender'] = $data['gender'];
                    $dataToSave['address'] = $data['patient_address'];
                    $dataToSave['parents_name'] = $data['parents_name'];
                    $dataToSave['relation_prefix'] = $data['relation_prefix'];
                    $dataToSave['height'] = isset($data['height']) ? $data['height'] : "";
                    $dataToSave['weight'] = isset($data['weight']) ? $data['weight'] : "";
                    $dataToSave['head_circumference'] = isset($data['head_circumference']) ? $data['head_circumference'] : "";

                    $result = WebservicesFunction::web_update_general_info($dataToSave);
                    if ($result['status'] == 1) {
                        $patientID = $data['id'];


                        $dataToSaveAppointment = array();
                        $dataToSaveAppointment['AppointmentCustomerStaffService']['children_id'] = $patientID;
                        $dataToSaveAppointment['AppointmentCustomerStaffService']['thinapp_id'] = $login['thinapp_id'];
                        $dataToSaveAppointment['AppointmentCustomerStaffService']['created_by_user_id'] = $login['id'];
                        $dataToSaveAppointment['AppointmentCustomerStaffService']['appointment_booked_from'] = 'WEB';
                        $dataToSaveAppointment['AppointmentCustomerStaffService']['appointment_address_id'] = $data['appointment_address_id'];
                        $dataToSaveAppointment['AppointmentCustomerStaffService']['appointment_staff_id'] = $data['appointment_staff_id'];
                        $dataToSaveAppointment['AppointmentCustomerStaffService']['booking_payment_type'] = "CASH";
                        $dataToSaveAppointment['AppointmentCustomerStaffService']['appointment_service_id'] = $data['appointment_service_id'];
                        $dataToSaveAppointment['AppointmentCustomerStaffService']['booking_date'] = date("Y-m-d");
                        $dataToSaveAppointment['AppointmentCustomerStaffService']['appointment_datetime'] = date("Y-m-d H:i");
                        $dataToSaveAppointment['AppointmentCustomerStaffService']['slot_time'] = date("h:i A");
                        $dataToSaveAppointment['AppointmentCustomerStaffService']['appointment_day_time_id'] = date('N');

                        $dataToSaveAppointment['AppointmentCustomerStaffService']['booked_by'] = Custom::get_appointment_role($login['mobile'], $login['thinapp_id'], $login['role_id']);
                        $dataToSaveAppointment['AppointmentCustomerStaffService']['has_token'] = "NO";
                        $dataToSaveAppointment['AppointmentCustomerStaffService']['reason_of_appointment'] = $data['reason_of_appointment'];;
                        $dataToSaveAppointment['AppointmentCustomerStaffService']['notes'] = $data['notes'];
                        $dataToSaveAppointment['AppointmentCustomerStaffService']['referred_by'] = $data['referred_by'];;
                        $dataToSaveAppointment['AppointmentCustomerStaffService']['referred_by_mobile'] = $data['referred_by_mobile'];

                        if ($this->AppointmentCustomerStaffService->save($dataToSaveAppointment)) {
                            $last_inser_id = $this->AppointmentCustomerStaffService->getLastInsertId();
                            $appointment_data = WebservicesFunction::get_appointment_all_data_id($last_inser_id);

                            $last_inser_id = base64_encode($last_inser_id);
                            echo json_encode(array("status" => 1, "appointmentID" => $last_inser_id, "message" => "Appointment booked successfully!"));
                            $queue_number = $appointment_data['queue_number'];
                            $lbl_date = date('d-m-Y', strtotime($appointment_data['appointment_datetime']));
                            $lbl_time = date('h:i A', strtotime($appointment_data['appointment_datetime']));
                            $message = "Appointment booked for " . Custom::get_string_first_name($appointment_data['cus_name']) . ". Time:$lbl_time, Date: $lbl_date.";
                            $messageData['sms'][] = array(
                                'message' => $message,
                                'mobile' => $dataToSave['mobile']
                            );
                        } else {
                            echo json_encode(array("status" => 1, "message" => "Sorry, Appointment couldn't be booked!"));
                        }


                    } else {
                        echo json_encode($result);
                    }


                } else {
                    $login = $this->Session->read('Auth.User.User');
                    $dataToSave['app_key'] = APP_KEY;
                    $dataToSave['thin_app_id'] = $login['thinapp_id'];
                    $dataToSave['app_key'] = $data['postData']['app_key'];
                    $dataToSave['user_id'] = $data['postData']['user_id'];
                    $dataToSave['mobile'] = Custom::create_mobile_number($data['postData']['mobile']);
                    $dataToSave['patient_type'] = 'CHILDREN';
                    $dataToSave['patient_name'] = $data['child_name'];
                    $dataToSave['patient_mobile'] = Custom::create_mobile_number($data['parents_mobile']);
                    $dataToSave['blood_group'] = $data['blood_group'];
                    $date = DateTime::createFromFormat('d/m/Y', $data['dob']);
                    $dataToSave['dob'] = $date->format('Y-m-d');
                    $dataToSave['gender'] = $data['gender'];
                    $dataToSave['patient_address'] = $data['patient_address'];
                    $dataToSave['parents_name'] = $data['parents_name'];
                    $dataToSave['relation_prefix'] = $data['relation_prefix'];
                    $dataToSave['height'] = isset($data['height']) ? $data['height'] : "";
                    $dataToSave['weight'] = isset($data['weight']) ? $data['weight'] : "";
                    $dataToSave['head_circumference'] = isset($data['head_circumference']) ? $data['head_circumference'] : "";

                    $result = WebservicesFunction::web_add_patient($dataToSave);

                    if ($result['status'] == 1) {
                        $patientID = $result['patient_id'];


                        $dataToSaveAppointment = array();
                        $dataToSaveAppointment['AppointmentCustomerStaffService']['children_id'] = $patientID;
                        $dataToSaveAppointment['AppointmentCustomerStaffService']['thinapp_id'] = $login['thinapp_id'];
                        $dataToSaveAppointment['AppointmentCustomerStaffService']['created_by_user_id'] = $login['id'];
                        $dataToSaveAppointment['AppointmentCustomerStaffService']['appointment_booked_from'] = 'WEB';

                        $dataToSaveAppointment['AppointmentCustomerStaffService']['appointment_address_id'] = $data['appointment_address_id'];
                        $dataToSaveAppointment['AppointmentCustomerStaffService']['appointment_staff_id'] = $data['appointment_staff_id'];

                        $appointmentServiceData = $this->AppointmentStaffService->find('first', array("fields" => array("AppointmentStaffService.appointment_service_id"), "conditions" => array("AppointmentStaffService.appointment_staff_id" => $data['appointment_staff_id'], "AppointmentStaffService.status" => "ACTIVE")));

                        $dataToSaveAppointment['AppointmentCustomerStaffService']['appointment_service_id'] = $appointmentServiceData['AppointmentStaffService']['appointment_service_id'];
                        $dataToSaveAppointment['AppointmentCustomerStaffService']['booking_date'] = date("Y-m-d");
                        $dataToSaveAppointment['AppointmentCustomerStaffService']['appointment_datetime'] = date("Y-m-d H:i");
                        $dataToSaveAppointment['AppointmentCustomerStaffService']['slot_time'] = date("h:i A");
                        $dataToSaveAppointment['AppointmentCustomerStaffService']['appointment_day_time_id'] = date('N');

                        $dataToSaveAppointment['AppointmentCustomerStaffService']['booked_by'] = Custom::get_appointment_role($login['mobile'], $login['thinapp_id'], $login['role_id']);
                        $dataToSaveAppointment['AppointmentCustomerStaffService']['has_token'] = "NO";
                        $dataToSaveAppointment['AppointmentCustomerStaffService']['reason_of_appointment'] = $data['reason_of_appointment'];;
                        $dataToSaveAppointment['AppointmentCustomerStaffService']['notes'] = $data['notes'];
                        $dataToSaveAppointment['AppointmentCustomerStaffService']['referred_by'] = $data['referred_by'];;
                        $dataToSaveAppointment['AppointmentCustomerStaffService']['referred_by_mobile'] = $data['referred_by_mobile'];

                        if ($this->AppointmentCustomerStaffService->save($dataToSaveAppointment)) {
                            $last_inser_id = $this->AppointmentCustomerStaffService->getLastInsertId();
                            $appointment_data = WebservicesFunction::get_appointment_all_data_id($last_inser_id);
                            $last_inser_id = base64_encode($last_inser_id);
                            echo json_encode(array("status" => 1, "appointmentID" => $last_inser_id, "message" => "Appointment booked successfully!"));
                            $queue_number = $appointment_data['queue_number'];
                            $lbl_date = date('d-m-Y', strtotime($appointment_data['appointment_datetime']));
                            $lbl_time = date('h:i A', strtotime($appointment_data['appointment_datetime']));
                            $message = "Appointment booked for " . Custom::get_string_first_name($appointment_data['cus_name']) . ". Time:$lbl_time, Date: $lbl_date.";
                            $messageData['sms'][] = array(
                                'message' => $message,
                                'mobile' => $dataToSave['mobile']
                            );
                        } else {
                            echo json_encode(array("status" => 1, "message" => "Sorry, Appointment couldn't be booked!"));
                        }


                    } else {
                        echo json_encode($result);
                    }
                }
            } else {
                $this->request->data['AppointmentCustomer']['postData'] = json_decode($this->request->data['AppointmentCustomer']['postData'], true);
                $data = $this->request->data['AppointmentCustomer'];
                if (isset($data['id'])) {

                    $login = $this->Session->read('Auth.User.User');
                    $dataToSave['app_key'] = APP_KEY;
                    $dataToSave['patient_id'] = $data['id'];
                    $dataToSave['thin_app_id'] = $login['thinapp_id'];
                    $dataToSave['user_id'] = $data['postData']['user_id'];

                    if ($data['postData']['mobile'] == $data['mobile']) {
                        $dataToSave['mobile'] = Custom::create_mobile_number($data['postData']['mobile']);
                    } else {
                        $dataToSave['mobile'] = Custom::create_mobile_number($data['mobile']);
                    }

                    $dataToSave['patient_type'] = 'CUSTOMER';
                    $dataToSave['patient_name'] = $data['first_name'];

                    if ($data['postData']['mobile'] == $data['mobile']) {
                        $dataToSave['patient_mobile'] = Custom::create_mobile_number($data['postData']['mobile']);
                    } else {
                        $dataToSave['patient_mobile'] = Custom::create_mobile_number($data['mobile']);
                    }

                    if ($data['dob'] != '') {
                        $date = DateTime::createFromFormat('d/m/Y', $data['dob']);
                        $dataToSave['dob'] = $date->format('Y-m-d');
                    } else {
                        $dataToSave['dob'] = '';
                    }

                    $dataToSave['gender'] = $data['gender'];
                    $dataToSave['address'] = $data['address'];
                    $dataToSave['email'] = $data['email'];
                    $dataToSave['age'] = $data['age'];
                    $dataToSave['patient_name'] = $data['first_name'];
                    $dataToSave['parents_name'] = $data['parents_name'];
                    $dataToSave['relation_prefix'] = $data['relation_prefix'];
                    $dataToSave['height'] = isset($data['height']) ? $data['height'] : "";
                    $dataToSave['weight'] = isset($data['weight']) ? $data['weight'] : "";
                    $dataToSave['head_circumference'] = isset($data['head_circumference']) ? $data['head_circumference'] : "";

                    $dataToSave['marital_status'] = $data['marital_status'];
                    $dataToSave['blood_group'] = $data['blood_group'];

                    //marital_status
                    //blood_group
                    //reason_of_appointment
                    //notes

                    $result = WebservicesFunction::web_update_general_info($dataToSave);

                    if ($result['status'] == 1) {
                        $patientID = $data['id'];


                        $dataToSaveAppointment = array();
                        $dataToSaveAppointment['AppointmentCustomerStaffService']['appointment_customer_id'] = $patientID;
                        $dataToSaveAppointment['AppointmentCustomerStaffService']['thinapp_id'] = $login['thinapp_id'];
                        $dataToSaveAppointment['AppointmentCustomerStaffService']['created_by_user_id'] = $login['id'];
                        $dataToSaveAppointment['AppointmentCustomerStaffService']['appointment_booked_from'] = 'WEB';
                        $dataToSaveAppointment['AppointmentCustomerStaffService']['appointment_address_id'] = $data['appointment_address_id'];
                        $dataToSaveAppointment['AppointmentCustomerStaffService']['appointment_staff_id'] = $data['appointment_staff_id'];

                        $appointmentServiceData = $this->AppointmentStaffService->find('first', array("fields" => array("AppointmentStaffService.appointment_service_id"), "conditions" => array("AppointmentStaffService.appointment_staff_id" => $data['appointment_staff_id'], "AppointmentStaffService.status" => "ACTIVE")));

                        $dataToSaveAppointment['AppointmentCustomerStaffService']['appointment_service_id'] = $appointmentServiceData['AppointmentStaffService']['appointment_service_id'];
                        $dataToSaveAppointment['AppointmentCustomerStaffService']['booking_date'] = date("Y-m-d");
                        $dataToSaveAppointment['AppointmentCustomerStaffService']['appointment_datetime'] = date("Y-m-d H:i");
                        $dataToSaveAppointment['AppointmentCustomerStaffService']['slot_time'] = date("h:i A");
                        $dataToSaveAppointment['AppointmentCustomerStaffService']['booked_by'] = Custom::get_appointment_role($login['mobile'], $login['thinapp_id'], $login['role_id']);
                        $dataToSaveAppointment['AppointmentCustomerStaffService']['has_token'] = "NO";
                        $dataToSaveAppointment['AppointmentCustomerStaffService']['reason_of_appointment'] = $data['reason_of_appointment'];;
                        $dataToSaveAppointment['AppointmentCustomerStaffService']['notes'] = $data['notes'];
                        $dataToSaveAppointment['AppointmentCustomerStaffService']['referred_by'] = $data['referred_by'];;
                        $dataToSaveAppointment['AppointmentCustomerStaffService']['referred_by_mobile'] = $data['referred_by_mobile'];

                        if ($this->AppointmentCustomerStaffService->save($dataToSaveAppointment)) {
                            $last_inser_id = $this->AppointmentCustomerStaffService->getLastInsertId();
                            $appointment_data = WebservicesFunction::get_appointment_all_data_id($last_inser_id);
                            $last_inser_id = base64_encode($last_inser_id);
                            echo json_encode(array("status" => 1, "appointmentID" => $last_inser_id, "message" => "Appointment booked successfully!"));
                            $queue_number = $appointment_data['queue_number'];
                            $lbl_date = date('d-m-Y', strtotime($appointment_data['appointment_datetime']));
                            $lbl_time = date('h:i A', strtotime($appointment_data['appointment_datetime']));
                            $message = "Appointment booked for " . Custom::get_string_first_name($appointment_data['cus_name']) . ". Time:$lbl_time, Date: $lbl_date.";
                            $messageData['sms'][] = array(
                                'message' => $message,
                                'mobile' => $dataToSave['mobile']
                            );
                        } else {
                            echo json_encode(array("status" => 1, "message" => "Sorry, Appointment couldn't be booked!"));
                        }


                    } else {
                        echo json_encode($result);
                    }


                } else {


                    $login = $this->Session->read('Auth.User.User');
                    $dataToSave['app_key'] = APP_KEY;
                    $dataToSave['thin_app_id'] = $login['thinapp_id'];
                    $dataToSave['app_key'] = $data['postData']['app_key'];
                    $dataToSave['user_id'] = $data['postData']['user_id'];
                    $dataToSave['mobile'] = Custom::create_mobile_number($data['postData']['mobile']);
                    $dataToSave['patient_type'] = 'CUSTOMER';
                    $dataToSave['patient_name'] = $data['first_name'];
                    $dataToSave['patient_mobile'] = Custom::create_mobile_number($data['postData']['mobile']);
                    if ($data['dob'] != '') {
                        $date = DateTime::createFromFormat('d/m/Y', $data['dob']);
                        $dataToSave['dob'] = $date->format('Y-m-d');
                    } else {
                        $dataToSave['dob'] = '';
                    }
                    $dataToSave['gender'] = $data['gender'];
                    $dataToSave['age'] = $data['age'];
                    $dataToSave['patient_address'] = $data['address'];
                    $dataToSave['email'] = $data['email'];
                    $dataToSave['parents_name'] = $data['parents_name'];
                    $dataToSave['relation_prefix'] = $data['relation_prefix'];
                    $dataToSave['height'] = isset($data['height']) ? $data['height'] : "";
                    $dataToSave['weight'] = isset($data['weight']) ? $data['weight'] : "";
                    $dataToSave['head_circumference'] = isset($data['head_circumference']) ? $data['head_circumference'] : "";
                    $dataToSave['marital_status'] = $data['marital_status'];
                    $dataToSave['blood_group'] = $data['blood_group'];


                    //marital_status
                    //blood_group
                    //reason_of_appointment
                    //notes

                    $result = WebservicesFunction::web_add_patient($dataToSave);
                    if ($result['status'] == 1) {
                        $patientID = $result['result']['customer_id'];


                        $dataToSaveAppointment = array();
                        $dataToSaveAppointment['AppointmentCustomerStaffService']['appointment_customer_id'] = $patientID;
                        $dataToSaveAppointment['AppointmentCustomerStaffService']['thinapp_id'] = $login['thinapp_id'];
                        $dataToSaveAppointment['AppointmentCustomerStaffService']['created_by_user_id'] = $login['id'];
                        $dataToSaveAppointment['AppointmentCustomerStaffService']['appointment_booked_from'] = 'WEB';
                        $dataToSaveAppointment['AppointmentCustomerStaffService']['appointment_address_id'] = $data['appointment_address_id'];
                        $dataToSaveAppointment['AppointmentCustomerStaffService']['appointment_staff_id'] = $data['appointment_staff_id'];

                        $appointmentServiceData = $this->AppointmentStaffService->find('first', array("fields" => array("AppointmentStaffService.appointment_service_id"), "conditions" => array("AppointmentStaffService.appointment_staff_id" => $data['appointment_staff_id'], "AppointmentStaffService.status" => "ACTIVE")));

                        $dataToSaveAppointment['AppointmentCustomerStaffService']['appointment_service_id'] = $appointmentServiceData['AppointmentStaffService']['appointment_service_id'];
                        $dataToSaveAppointment['AppointmentCustomerStaffService']['booking_date'] = date("Y-m-d");
                        $dataToSaveAppointment['AppointmentCustomerStaffService']['appointment_datetime'] = date("Y-m-d H:i");
                        $dataToSaveAppointment['AppointmentCustomerStaffService']['slot_time'] = date("h:i A");
                        $dataToSaveAppointment['AppointmentCustomerStaffService']['booked_by'] = Custom::get_appointment_role($login['mobile'], $login['thinapp_id'], $login['role_id']);
                        $dataToSaveAppointment['AppointmentCustomerStaffService']['has_token'] = "NO";
                        $dataToSaveAppointment['AppointmentCustomerStaffService']['reason_of_appointment'] = $data['reason_of_appointment'];;
                        $dataToSaveAppointment['AppointmentCustomerStaffService']['notes'] = $data['notes'];
                        $dataToSaveAppointment['AppointmentCustomerStaffService']['referred_by'] = $data['referred_by'];;
                        $dataToSaveAppointment['AppointmentCustomerStaffService']['referred_by_mobile'] = $data['referred_by_mobile'];

                        if ($this->AppointmentCustomerStaffService->save($dataToSaveAppointment)) {
                            $last_inser_id = $this->AppointmentCustomerStaffService->getLastInsertId();
                            $appointment_data = WebservicesFunction::get_appointment_all_data_id($last_inser_id);
                            $last_inser_id = base64_encode($last_inser_id);
                            echo json_encode(array("status" => 1, "appointmentID" => $last_inser_id, "message" => "Appointment booked successfully!"));
                            $queue_number = $appointment_data['queue_number'];
                            $lbl_date = date('d-m-Y', strtotime($appointment_data['appointment_datetime']));
                            $lbl_time = date('h:i A', strtotime($appointment_data['appointment_datetime']));
                            $message = "Appointment booked for " . Custom::get_string_first_name($appointment_data['cus_name']) . ". Time:$lbl_time, Date: $lbl_date.";
                            $messageData['sms'][] = array(
                                'message' => $message,
                                'mobile' => $dataToSave['mobile']
                            );
                        } else {
                            echo json_encode(array("status" => 1, "message" => "Sorry, Appointment couldn't be booked!"));
                        }


                    } else {
                        echo json_encode($result);
                    }


                }

            }


            if (isset($messageData['sms'])) {
                foreach ($messageData['sms'] as $key => $value) {
                    $message = $value['message'];
                    $mobile = $value['mobile'];
                    Custom::send_single_sms($mobile, $message, $login['thinapp_id']);

                }
            }


        }
        exit();
    }


    public function search_list_refund()
    {
        $reqData = $this->request->query;
        $pram = array();
        if (!empty($reqData['from_date'])) {
            $pram['fd'] = $reqData['from_date'];
        }
        if (!empty($reqData['to_date'])) {
            $pram['td'] = $reqData['to_date'];
        }

        if (!empty($reqData['name'])) {
            $pram['n'] = $reqData['name'];
        }
        if (!empty($reqData['doctor_id'])) {
            $pram['d'] = $reqData['doctor_id'];
        }
        $this->redirect(
            array(
                "controller" => "app_admin",
                "action" => "list_refund",
                "?" => $pram,
            )
        );
    }


    public function list_refund()
    {

        $login = $this->Session->read('Auth.User.User');
        $thinappID = $login['thinapp_id'];


        $conditions = array("AppointmentCustomerStaffService.thinapp_id" => $login['thinapp_id']);
        $conditions["AppointmentCustomerStaffService.status"] = "REFUND";
        $conditions["AppointmentCustomerStaffService.delete_status !="] = "DELETED";

        $searchData = $this->request->query;

        if (isset($searchData['p']) && !empty($searchData['p'])) {
            $this->request->data['Search']['payment'] = $searchData['p'];
            if ($searchData['p'] != 'ALL') {
                $conditions["AppointmentCustomerStaffService.booking_payment_type"] = $searchData['p'];
            }
        }

        if (isset($searchData['d']) && !empty($searchData['d'])) {
            $this->request->data['Search']['doctor_id'] = $searchData['d'];
            if ($searchData['d'] != 'ALL') {
                $conditions["AppointmentCustomerStaffService.appointment_staff_id"] = $searchData['d'];
            }
        }

        if (isset($searchData['n']) && !empty($searchData['n'])) {
            $this->request->data['Search']['name'] = $searchData['n'];

            $conditions['OR'] = array(
                "AppointmentCustomer.first_name like" => '%' . $searchData['n'] . '%',
                "Children.child_name like" => '%' . $searchData['n'] . '%'

            );


        }

        if ((isset($searchData['fd']) && !empty($searchData['fd'])) || (isset($searchData['td']) && !empty($searchData['td']))) {
            $fd = DateTime::createFromFormat('d/m/Y', $searchData['fd']);
            $fd = $fd->format('Y-m-d');
            $this->request->data['Search']['from_date'] = $searchData['fd'];
            $conditions["DATE(MedicalProductOrder.refund_date_time) >="] = $fd;

            $td = DateTime::createFromFormat('d/m/Y', $searchData['td']);
            $td = $td->format('Y-m-d');
            $this->request->data['Search']['to_date'] = $searchData['td'];
            $conditions["DATE(MedicalProductOrder.refund_date_time) <="] = $td;


        } else {
            $this->request->data['Search']['from_date'] = date("d/m/Y");
            $this->request->data['Search']['to_date'] = date("d/m/Y");
            $conditions["DATE(MedicalProductOrder.refund_date_time)"] = date("Y-m-d");

        }


        $appointmentData = $this->AppointmentCustomerStaffService->find("all", array(
            'fields' => array("MedicalProductOrder.total_amount","MedicalProductOrder.refund_amount", "AppointmentCustomer.*", "Children.*", "AppointmentStaff.*", "AppointmentCustomerStaffService.*", "(SELECT `refund_user`.`username` FROM `users` AS `refund_user` WHERE `refund_user`.`id` = `AppointmentCustomerStaffService`.`refund_by_user_id` LIMIT 1) AS refund_username", "(SELECT `refund_staff`.`name` FROM `appointment_staffs` AS `refund_staff` WHERE `refund_staff`.`id` = `AppointmentCustomerStaffService`.`refund_by_user_id` LIMIT 1) AS refund_staff_name"),
            "conditions" => $conditions,
            "contain" => array("AppointmentCustomer", "Children", "AppointmentStaff",'MedicalProductOrder')
        ));



        $login1 = $this->Session->read('Auth.User');
        $reportTitle = $login1['Thinapp']['name'].' ('.$this->request->data['Search']['from_date'].' - '.$this->request->data['Search']['to_date'].')';

        $this->set(array('appointmentData' => $appointmentData,'reportTitle' => $reportTitle));
    }

    /*
	Web Prescription Functionality
	Author : Manmohan Yadav
	Start
	*/
    public function web_prescription()
    {
        $this->layout = 'app_admin_web_prescription';
    }

    /*
	End
	*/

    public function add_hospital_ipd_receipt($patientUHID = null, $ipdID = null)
    {
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User.User');
        $thinappID = $login['thinapp_id'];
        if ($patientUHID != null) {
            $patientUHID = base64_decode($patientUHID);
            $patientData = $this->HospitalIpd->find("first", array("conditions" => array("AppointmentCustomer.uhid" => $patientUHID, "AppointmentCustomer.thinapp_id" => $thinappID), "contain" => array('AppointmentCustomer','Children')));
            $doctor_id = $patientData['HospitalIpd']['appointment_staff_id'];

            $hospitalPaymentType = $this->HospitalPaymentType->find("list", array("conditions" => array("HospitalPaymentType.thinapp_id" => $thinappID)));
            $this->set(compact('doctor_id','patientData', 'hospitalPaymentType', 'ipdID'));
        }

    }

   public function web_add_hospital_ipd_receipt()
    {

        $this->layout = false;
        $this->autoRender = false;
        if ($this->request->is(array('ajax'))) {

            $datasource = $this->MedicalProductOrder->getDataSource();
            $login = $this->Session->read('Auth.User.User');
            $thinappID = $login['thinapp_id'];
            $mainTotalAmount = 0;
            try {
                $datasource->begin();
                $data = $this->request->data;


                $patientUHID = $data['customerUHID'];
                $ipdID = $data['hospital_ipd_id'];

                $ipdData = $this->HospitalIpd->find("first", array("conditions" => array("HospitalIpd.id" => $ipdID), 'contain' => array('AppointmentCustomer', 'Children')));

                if(isset($data['AppointmentCustomerStaffService']['doctor']) && $data['AppointmentCustomerStaffService']['doctor'] > 0)
                {
                    $appointmentStaffID = $data['AppointmentCustomerStaffService']['doctor'];
                }
                else
                {
                    $appointmentStaffID = isset($ipdData['HospitalIpd']['appointment_staff_id']) ? $ipdData['HospitalIpd']['appointment_staff_id'] : 0;
                }


                $appointmentAddressID = isset($ipdData['HospitalIpd']['appointment_address_id']) ? $ipdData['HospitalIpd']['appointment_address_id'] : 0;
                if (!empty($ipdData['AppointmentCustomer']['id'])) {
                    $patientData['AppointmentCustomer'] = $ipdData['AppointmentCustomer'];
                } else {
                    $patientData['Children'] = $ipdData['Children'];
                }


                $dataTOSaveOrderDetail = array();
                $totalAmountToSave = 0;


                $dataToSaveInOrder = array();

                $dataToSaveInOrder['thinapp_id'] = $thinappID;
                $dataToSaveInOrder['appointment_customer_id'] = isset($patientData['AppointmentCustomer']) ? $patientData['AppointmentCustomer']['id'] : 0;
                $dataToSaveInOrder['children_id'] = isset($patientData['Children']) ? $patientData['Children']['id'] : 0;
                $dataToSaveInOrder['is_opd'] = "N";

                //Custom::UpdateChildPatientDetail($dataToSaveInOrder['appointment_customer_id'],$dataToSaveInOrder['children_id'],$data);

                //$payment_type_id = isset($data['AppointmentCustomerStaffService']['hospital_payment_type_id'])?$data['AppointmentCustomerStaffService']['hospital_payment_type_id']:0;
                //$payment_type_id = empty($payment_type_id)?0:$payment_type_id;
                $payment_description = $data['AppointmentCustomerStaffService']['payment_description'];
                //$payment_type_name = $data['AppointmentCustomerStaffService']['payment_type_name'];
                //$dataToSaveInOrder['hospital_payment_type_id'] = $payment_type_id;
                //$dataToSaveInOrder['payment_type_name'] = $payment_type_name;
                $dataToSaveInOrder['payment_description'] = $payment_description;
                if ($data['AppointmentCustomerStaffService']['payment_status'] == 1) {
                    $dataToSaveInOrder['payment_status'] = "PAID";
                    $dataToSaveInOrder['is_amount_received_ipd_exp'] = "Y";
                } else {
                    $dataToSaveInOrder['payment_status'] = "PENDING";
                    $dataToSaveInOrder['is_amount_received_ipd_exp'] = "N";
                }


                $dataToSaveInOrder['appointment_staff_id'] = $appointmentStaffID;
                $dataToSaveInOrder['appointment_address_id'] = $appointmentAddressID;
                $dataToSaveInOrder['created_by_user_id'] = $login['id'];
                $dataToSaveInOrder['hospital_ipd_id'] = $ipdID;
                $dataToSaveInOrder['is_expense'] = 'Y';
                $dataToSaveInOrder['hospital_payment_type_id'] = $data['AppointmentCustomerStaffService']['hospital_payment_type_id'];
                $dataToSaveInOrder['payment_type_name'] = $data['AppointmentCustomerStaffService']['payment_type_name'];

                if (isset($data['receipt_date'])) {
                    $date = DateTime::createFromFormat('d/m/Y', $data['receipt_date']);
                    $date1 = $date->format('Y-m-d');
                    $dataToSaveInOrder['created'] = $date1 . ' ' . date('H:i:s');
                }


                $date = date("Y-m-d");


                $query = "SELECT CONCAT(DATE_FORMAT('".date('Y-m-d')."','%y%m'),(COUNT(`medical_product_orders`.`id`) + 1)) AS `unique_id` FROM medical_product_orders WHERE MONTH(medical_product_orders.created) = '".date('m')."' AND YEAR(medical_product_orders.created) = '".date('Y')."' AND `medical_product_orders`.`thinapp_id` = '".$thinappID."' LIMIT 1";

                $uniqueID = $this->MedicalProductOrder->query($query);
                $uniqueID = isset($uniqueID[0][0]['unique_id'])?$uniqueID[0][0]['unique_id']:date('ym').'1';
                $dataToSaveInOrder['bill_id'] = $uniqueID;

                if ($this->MedicalProductOrder->save($dataToSaveInOrder)) {
                    $orderID = $this->MedicalProductOrder->getInsertID();

                    $counter = 0;


                    foreach ($data['productID'] AS $key => $val) {
                        $productData = $this->MedicalProduct->find('first', array('conditions' => array('MedicalProduct.id' => $val), 'recursive' => 2));

                        $dataTOSaveOrderDetail[$counter]['medical_product_id'] = $val;
                        $dataTOSaveOrderDetail[$counter]['medical_product_order_id'] = $orderID;
                        $dataTOSaveOrderDetail[$counter]['thinapp_id'] = $thinappID;
                        $dataTOSaveOrderDetail[$counter]['children_id'] = isset($patientData['Children']) ? $patientData['Children']['id'] : 0;
                        $dataTOSaveOrderDetail[$counter]['appointment_customer_id'] = isset($patientData['AppointmentCustomer']) ? $patientData['AppointmentCustomer']['id'] : 0;


                        $dataTOSaveOrderDetail[$counter]['medical_product_quantity_id'] = ($data['medical_product_quantity_id'][$key] != '') ? $data['medical_product_quantity_id'][$key] : 0;


                        if ($data['medical_product_quantity_id'][$key] != '') {

                            $qtyToSell = $data['quantity'][$key];
                            $totalQuanityAvavilable = $this->MedicalProductQuantity->findById($data['medical_product_quantity_id'][$key], array('contain' => false));
                            $remainingQty = ($totalQuanityAvavilable['MedicalProductQuantity']['quantity'] - $totalQuanityAvavilable['MedicalProductQuantity']['sold']);

                            if (($remainingQty >= $qtyToSell) || ($totalQuanityAvavilable['MedicalProductQuantity']['quantity'] == 0)) {


                                $dataTOSaveOrderDetail[$counter]['quantity'] = $data['quantity'][$key];
                                $dataTOSaveOrderDetail[$counter]['days'] = $data['days'][$key];
                                $dataTOSaveOrderDetail[$counter]['discount_type'] = $data['discountType'][$key];
                                $dataTOSaveOrderDetail[$counter]['discount_value'] = $data['discount'][$key];
                                $dataTOSaveOrderDetail[$counter]['product_price'] = $data['price'][$key];

                                $product_amount = $data['price'][$key] * $data['quantity'][$key];
                                $dataTOSaveOrderDetail[$counter]['amount'] = $product_amount;

                                $dataTOSaveOrderDetail[$counter]['tax_value'] = $data['tax_value'][$key];

                                $dataTOSaveOrderDetail[$counter]['tax_type'] = $data['tax_type'][$key];

                                $discount_amount = $data['discount'][$key];
                                if ($data['discountType'][$key] == "PERCENTAGE") {
                                    $discount_amount = (($product_amount) * $data['discount'][$key]) / 100;
                                }
                                $total_amount = ($product_amount) - $discount_amount;
                                $tax_amount = ($total_amount * $data['tax_value'][$key]) / 100;
                                $total_amount = $total_amount + $tax_amount;
                                $total_amount = $total_amount * $data['days'][$key];

                                $dataTOSaveOrderDetail[$counter]['tax_amount'] = $tax_amount;
                                $dataTOSaveOrderDetail[$counter]['discount_amount'] = $discount_amount;
                                $tmp = explode('.', $total_amount);
                                if (count($tmp) == 2) {
                                    $total_amount = $tmp[0] . '.' . substr($tmp[1], 0, 2);
                                }
                                $mainTotalAmount += (float)$total_amount;

                                $dataTOSaveOrderDetail[$counter]['total_amount'] = $total_amount;


                                $this->MedicalProductQuantity->query("UPDATE `medical_product_quantities` SET `sold` = (`sold`+" . $qtyToSell . ") WHERE `id` = '" . $data['medical_product_quantity_id'][$key] . "'");
                            } else {


                                $proID = $totalQuanityAvavilable['MedicalProductQuantity']['medical_product_id'];
                                $qtyData = $this->MedicalProductQuantity->find('all', array('fields' => array('MedicalProductQuantity.*', '(MedicalProductQuantity.quantity - MedicalProductQuantity.sold) AS rem_qty'), 'conditions' => array('MedicalProductQuantity.medical_product_id' => $proID, 'DATE(MedicalProductQuantity.expiry_date) >=' => date('Y-m-d'), 'MedicalProductQuantity.status' => 'ACTIVE', 'MedicalProductQuantity.id <>' => $data['medical_product_quantity_id'][$key]), 'order' => array('MedicalProductQuantity.expiry_date' => 'ASC'), 'group' => array('MedicalProductQuantity.id HAVING rem_qty > 0'), 'contain' => false));

                                if (empty($qtyData)) {


                                    $dataTOSaveOrderDetail[$counter]['quantity'] = $data['quantity'][$key];
                                    $dataTOSaveOrderDetail[$counter]['days'] = $data['days'][$key];
                                    $dataTOSaveOrderDetail[$counter]['discount_type'] = $data['discountType'][$key];
                                    $dataTOSaveOrderDetail[$counter]['discount_value'] = $data['discount'][$key];
                                    $dataTOSaveOrderDetail[$counter]['product_price'] = $data['price'][$key];

                                    $product_amount = $data['price'][$key] * $data['quantity'][$key];
                                    $dataTOSaveOrderDetail[$counter]['amount'] = $product_amount;

                                    $dataTOSaveOrderDetail[$counter]['tax_value'] = $data['tax_value'][$key];

                                    $dataTOSaveOrderDetail[$counter]['tax_type'] = $data['tax_type'][$key];

                                    $discount_amount = $data['discount'][$key];
                                    if ($data['discountType'][$key] == "PERCENTAGE") {
                                        $discount_amount = (($product_amount) * $data['discount'][$key]) / 100;
                                    }
                                    $total_amount = ($product_amount) - $discount_amount;
                                    $tax_amount = ($total_amount * $data['tax_value'][$key]) / 100;
                                    $total_amount = $total_amount + $tax_amount;
                                    $total_amount = $total_amount * $data['days'][$key];

                                    $dataTOSaveOrderDetail[$counter]['tax_amount'] = $tax_amount;
                                    $dataTOSaveOrderDetail[$counter]['discount_amount'] = $discount_amount;
                                    $tmp = explode('.', $total_amount);
                                    if (count($tmp) == 2) {
                                        $total_amount = $tmp[0] . '.' . substr($tmp[1], 0, 2);
                                    }
                                    $mainTotalAmount += (float)$total_amount;

                                    $dataTOSaveOrderDetail[$counter]['total_amount'] = $total_amount;


                                    $this->MedicalProductQuantity->query("UPDATE `medical_product_quantities` SET `sold` = (`sold`+" . $qtyToSell . ") WHERE `id` = '" . $data['medical_product_quantity_id'][$key] . "'");


                                } else {

                                    if ($remainingQty > 0) {

                                        $dataTOSaveOrderDetail[$counter]['quantity'] = $remainingQty;
                                        $dataTOSaveOrderDetail[$counter]['days'] = $data['days'][$key];
                                        $dataTOSaveOrderDetail[$counter]['discount_type'] = $data['discountType'][$key];
                                        $dataTOSaveOrderDetail[$counter]['discount_value'] = $data['discount'][$key];

                                        $dataTOSaveOrderDetail[$counter]['product_price'] = $data['price'][$key];
                                        $product_amount = $data['price'][$key] * $remainingQty;


                                        $dataTOSaveOrderDetail[$counter]['amount'] = $product_amount;

                                        $dataTOSaveOrderDetail[$counter]['tax_value'] = $data['tax_value'][$key];

                                        $dataTOSaveOrderDetail[$counter]['tax_type'] = $data['tax_type'][$key];

                                        $discount_amount = $data['discount'][$key];
                                        if ($data['discountType'][$key] == "PERCENTAGE") {
                                            $discount_amount = (($product_amount) * $data['discount'][$key]) / 100;
                                        }
                                        $total_amount = ($product_amount) - $discount_amount;
                                        $tax_amount = ($total_amount * $data['tax_value'][$key]) / 100;
                                        $total_amount = $total_amount + $tax_amount;
                                        $total_amount = $total_amount * $data['days'][$key];

                                        $dataTOSaveOrderDetail[$counter]['tax_amount'] = $tax_amount;
                                        $dataTOSaveOrderDetail[$counter]['discount_amount'] = $discount_amount;
                                        $tmp = explode('.', $total_amount);
                                        if (count($tmp) == 2) {
                                            $total_amount = $tmp[0] . '.' . substr($tmp[1], 0, 2);
                                        }
                                        $mainTotalAmount += (float)$total_amount;

                                        $dataTOSaveOrderDetail[$counter]['total_amount'] = $total_amount;


                                        $this->MedicalProductQuantity->query("UPDATE `medical_product_quantities` SET `sold` = (`sold`+" . $remainingQty . ") WHERE `id` = '" . $data['medical_product_quantity_id'][$key] . "'");
                                        $qtyToSell = $qtyToSell - $remainingQty;
                                    }


                                    $leastExpInsertkey = -1;

                                    $a = 0;

                                    foreach ($qtyData AS $proVal) {
                                        $counter++;

                                        $remainingQty = (int)$proVal[0]['rem_qty'];

                                        if ($remainingQty >= $qtyToSell) {

                                            $dataTOSaveOrderDetail[$counter]['medical_product_id'] = $val;
                                            $dataTOSaveOrderDetail[$counter]['medical_product_order_id'] = $orderID;
                                            $dataTOSaveOrderDetail[$counter]['thinapp_id'] = $thinappID;
                                            $dataTOSaveOrderDetail[$counter]['children_id'] = isset($patientData['Children']) ? $patientData['Children']['id'] : 0;
                                            $dataTOSaveOrderDetail[$counter]['appointment_customer_id'] = isset($patientData['AppointmentCustomer']) ? $patientData['AppointmentCustomer']['id'] : 0;


                                            $dataTOSaveOrderDetail[$counter]['lab_pharmacy_user_id'] = $labID;
                                            $dataTOSaveOrderDetail[$counter]['lab_pharmacy_type'] = $labPharmacyType;
                                            $dataTOSaveOrderDetail[$counter]['lab_pharmacy_is_inhouse'] = $labPharmacyIsInhouse;

                                            $dataTOSaveOrderDetail[$counter]['medical_product_quantity_id'] = $proVal['MedicalProductQuantity']['id'];


                                            $dataTOSaveOrderDetail[$counter]['quantity'] = $qtyToSell;
                                            $dataTOSaveOrderDetail[$counter]['days'] = $data['days'][$key];
                                            $dataTOSaveOrderDetail[$counter]['discount_type'] = $data['discountType'][$key];
                                            $dataTOSaveOrderDetail[$counter]['discount_value'] = $data['discount'][$key];


                                            if ($productData['MedicalProduct']['is_price_editable'] == 1) {
                                                $dataTOSaveOrderDetail[$counter]['product_price'] = $data['price'][$key];
                                                $product_amount = $data['price'][$key] * $qtyToSell;
                                            } else {
                                                $dataTOSaveOrderDetail[$counter]['product_price'] = $proVal['MedicalProductQuantity']['mrp'];
                                                $product_amount = $proVal['MedicalProductQuantity']['mrp'] * $qtyToSell;
                                            }


                                            $dataTOSaveOrderDetail[$counter]['amount'] = $product_amount;

                                            $dataTOSaveOrderDetail[$counter]['tax_value'] = $data['tax_value'][$key];

                                            $dataTOSaveOrderDetail[$counter]['tax_type'] = $data['tax_type'][$key];

                                            $discount_amount = $data['discount'][$key];
                                            if ($data['discountType'][$key] == "PERCENTAGE") {
                                                $discount_amount = (($product_amount) * $data['discount'][$key]) / 100;
                                            }
                                            $total_amount = ($product_amount) - $discount_amount;
                                            $tax_amount = ($total_amount * $data['tax_value'][$key]) / 100;
                                            $total_amount = $total_amount + $tax_amount;
                                            $total_amount = $total_amount * $data['days'][$key];

                                            $dataTOSaveOrderDetail[$counter]['tax_amount'] = $tax_amount;
                                            $dataTOSaveOrderDetail[$counter]['discount_amount'] = $discount_amount;
                                            $tmp = explode('.', $total_amount);
                                            if (count($tmp) == 2) {
                                                $total_amount = $tmp[0] . '.' . substr($tmp[1], 0, 2);
                                            }
                                            $mainTotalAmount += (float)$total_amount;

                                            $dataTOSaveOrderDetail[$counter]['total_amount'] = $total_amount;


                                            $this->MedicalProductQuantity->query("UPDATE `medical_product_quantities` SET `sold` = (`sold`+" . $qtyToSell . ") WHERE `id` = '" . $proVal['MedicalProductQuantity']['id'] . "'");
                                            $qtyToSell = $qtyToSell - $remainingQty;
                                            if ($a == 0) {
                                                $leastExpInsertkey = -1;
                                            }
                                            break;
                                        } else {

                                            $dataTOSaveOrderDetail[$counter]['medical_product_id'] = $val;
                                            $dataTOSaveOrderDetail[$counter]['medical_product_order_id'] = $orderID;
                                            $dataTOSaveOrderDetail[$counter]['thinapp_id'] = $thinappID;
                                            $dataTOSaveOrderDetail[$counter]['children_id'] = isset($patientData['Children']) ? $patientData['Children']['id'] : 0;
                                            $dataTOSaveOrderDetail[$counter]['appointment_customer_id'] = isset($patientData['AppointmentCustomer']) ? $patientData['AppointmentCustomer']['id'] : 0;


                                            $dataTOSaveOrderDetail[$counter]['lab_pharmacy_user_id'] = $labID;
                                            $dataTOSaveOrderDetail[$counter]['lab_pharmacy_type'] = $labPharmacyType;
                                            $dataTOSaveOrderDetail[$counter]['lab_pharmacy_is_inhouse'] = $labPharmacyIsInhouse;

                                            $dataTOSaveOrderDetail[$counter]['medical_product_quantity_id'] = $proVal['MedicalProductQuantity']['id'];


                                            $dataTOSaveOrderDetail[$counter]['quantity'] = $remainingQty;
                                            $dataTOSaveOrderDetail[$counter]['days'] = $data['days'][$key];
                                            $dataTOSaveOrderDetail[$counter]['discount_type'] = $data['discountType'][$key];
                                            $dataTOSaveOrderDetail[$counter]['discount_value'] = $data['discount'][$key];


                                            if ($productData['MedicalProduct']['is_price_editable'] == 1) {
                                                $dataTOSaveOrderDetail[$counter]['product_price'] = $data['price'][$key];
                                                $product_amount = $data['price'][$key] * $remainingQty;
                                            } else {
                                                $dataTOSaveOrderDetail[$counter]['product_price'] = $proVal['MedicalProductQuantity']['mrp'];
                                                $product_amount = $proVal['MedicalProductQuantity']['mrp'] * $remainingQty;
                                            }


                                            $dataTOSaveOrderDetail[$counter]['amount'] = $product_amount;

                                            $dataTOSaveOrderDetail[$counter]['tax_value'] = $data['tax_value'][$key];

                                            $dataTOSaveOrderDetail[$counter]['tax_type'] = $data['tax_type'][$key];

                                            $discount_amount = $data['discount'][$key];
                                            if ($data['discountType'][$key] == "PERCENTAGE") {
                                                $discount_amount = (($product_amount) * $data['discount'][$key]) / 100;
                                            }
                                            $total_amount = ($product_amount) - $discount_amount;
                                            $tax_amount = ($total_amount * $data['tax_value'][$key]) / 100;
                                            $total_amount = $total_amount + $tax_amount;
                                            $total_amount = $total_amount * $data['days'][$key];

                                            $dataTOSaveOrderDetail[$counter]['tax_amount'] = $tax_amount;
                                            $dataTOSaveOrderDetail[$counter]['discount_amount'] = $discount_amount;
                                            $tmp = explode('.', $total_amount);
                                            if (count($tmp) == 2) {
                                                $total_amount = $tmp[0] . '.' . substr($tmp[1], 0, 2);
                                            }
                                            $mainTotalAmount += (float)$total_amount;

                                            $dataTOSaveOrderDetail[$counter]['total_amount'] = $total_amount;


                                            $this->MedicalProductQuantity->query("UPDATE `medical_product_quantities` SET `sold` = (`sold`+" . $remainingQty . ") WHERE `id` = '" . $proVal['MedicalProductQuantity']['id'] . "'");
                                            if ($a == 0) {

                                                $leastExpInsertkey = $counter;
                                            }
                                            $qtyToSell = $qtyToSell - $remainingQty;

                                        }


                                        $a++;
                                    }


                                    if ($leastExpInsertkey != -1 && $qtyToSell > 0) {


                                        $dataTOSaveOrderDetail[$leastExpInsertkey]['quantity'] = $dataTOSaveOrderDetail[$leastExpInsertkey]['quantity'] + $qtyToSell;
                                        $dataTOSaveOrderDetail[$leastExpInsertkey]['days'] = $data['days'][$key];
                                        $dataTOSaveOrderDetail[$leastExpInsertkey]['discount_type'] = $data['discountType'][$key];
                                        $dataTOSaveOrderDetail[$leastExpInsertkey]['discount_value'] = $data['discount'][$key];

                                        $product_amount = $dataTOSaveOrderDetail[$leastExpInsertkey]['product_price'] * $dataTOSaveOrderDetail[$leastExpInsertkey]['quantity'];

                                        $dataTOSaveOrderDetail[$leastExpInsertkey]['amount'] = $product_amount;

                                        $dataTOSaveOrderDetail[$leastExpInsertkey]['tax_value'] = $data['tax_value'][$key];

                                        $dataTOSaveOrderDetail[$leastExpInsertkey]['tax_type'] = $data['tax_type'][$key];

                                        $discount_amount = $data['discount'][$key];
                                        if ($data['discountType'][$key] == "PERCENTAGE") {
                                            $discount_amount = (($product_amount) * $data['discount'][$key]) / 100;
                                        }
                                        $total_amount = ($product_amount) - $discount_amount;
                                        $tax_amount = ($total_amount * $data['tax_value'][$key]) / 100;
                                        $total_amount = $total_amount + $tax_amount;
                                        $total_amount = $total_amount * $data['days'][$key];

                                        $dataTOSaveOrderDetail[$leastExpInsertkey]['tax_amount'] = $tax_amount;
                                        $dataTOSaveOrderDetail[$leastExpInsertkey]['discount_amount'] = $discount_amount;
                                        $tmp = explode('.', $total_amount);
                                        if (count($tmp) == 2) {
                                            $total_amount = $tmp[0] . '.' . substr($tmp[1], 0, 2);
                                        }
                                        $mainTotalAmount += (float)$total_amount;

                                        $dataTOSaveOrderDetail[$leastExpInsertkey]['total_amount'] = $total_amount;

                                        $this->MedicalProductQuantity->query("UPDATE `medical_product_quantities` SET `sold` = (`sold`+" . $qtyToSell . ") WHERE `id` = '" . $dataTOSaveOrderDetail[$leastExpInsertkey]['medical_product_quantity_id'] . "'");

                                    }


                                }

                            }
                        } else {
                            $dataTOSaveOrderDetail[$counter]['quantity'] = $data['quantity'][$key];
                            $dataTOSaveOrderDetail[$counter]['days'] = $data['days'][$key];
                            $dataTOSaveOrderDetail[$counter]['discount_type'] = $data['discountType'][$key];
                            $dataTOSaveOrderDetail[$counter]['discount_value'] = $data['discount'][$key];
                            $dataTOSaveOrderDetail[$counter]['product_price'] = $data['price'][$key];

                            $product_amount = $data['price'][$key] * $data['quantity'][$key];
                            $dataTOSaveOrderDetail[$counter]['amount'] = $product_amount;

                            $dataTOSaveOrderDetail[$counter]['tax_value'] = $data['tax_value'][$key];

                            $dataTOSaveOrderDetail[$counter]['tax_type'] = $data['tax_type'][$key];

                            $discount_amount = $data['discount'][$key];
                            if ($data['discountType'][$key] == "PERCENTAGE") {
                                $discount_amount = (($product_amount) * $data['discount'][$key]) / 100;
                            }
                            $total_amount = ($product_amount) - $discount_amount;
                            $tax_amount = ($total_amount * $data['tax_value'][$key]) / 100;
                            $total_amount = $total_amount + $tax_amount;
                            $total_amount = $total_amount * $data['days'][$key];

                            $dataTOSaveOrderDetail[$counter]['tax_amount'] = $tax_amount;
                            $dataTOSaveOrderDetail[$counter]['discount_amount'] = $discount_amount;
                            $tmp = explode('.', $total_amount);
                            if (count($tmp) == 2) {
                                $total_amount = $tmp[0] . '.' . substr($tmp[1], 0, 2);
                            }
                            $mainTotalAmount += (float)$total_amount;

                            $dataTOSaveOrderDetail[$counter]['total_amount'] = $total_amount;
                        }

                        $counter++;
                    }
                    foreach($dataTOSaveOrderDetail AS $key => $list){
                        if(isset($list['quantity']))
                        {
                            if($list['quantity'] < 1)
                            {
                                unset($dataTOSaveOrderDetail[$key]);
                            }
                        }
                        else
                        {
                            unset($dataTOSaveOrderDetail[$key]);
                        }
                    }

                    $orderUpdate['MedicalProductOrder']['id'] = $orderID;
                    $orderUpdate['MedicalProductOrder']['total_amount'] = $mainTotalAmount;

                    if ($this->MedicalProductOrder->save($orderUpdate) && $this->MedicalProductOrderDetail->saveAll($dataTOSaveOrderDetail)) {



                        $remark = isset($data["remark"])?$data["remark"]:"";
                        $mobile_no = isset($data["mobile_no"])?$data["mobile_no"]:"";
                        $txn_no = isset($data["txn_no"])?$data["txn_no"]:"";
                        $beneficiary_name = isset($data["beneficiary_name"])?$data["beneficiary_name"]:"";
                        $bank_account = isset($data["bank_account"])?$data["bank_account"]:"";
                        $transaction_id = isset($data["transaction_id"])?$data["transaction_id"]:"";
                        $valid_upto = isset($data["valid_upto"])?$data["valid_upto"]:"";
                        $holder_name = isset($data["holder_name"])?$data["holder_name"]:"";
                        $card_no = isset($data["card_no"])?$data["card_no"]:"";

                        $paymentDetailData = array(
                            "thinapp_id"=>$thinappID,
                            "medical_product_order_id"=>$orderID,
                            "hospital_payment_type_id"=>!empty($data['AppointmentCustomerStaffService']['hospital_payment_type_id'])?$data['AppointmentCustomerStaffService']['hospital_payment_type_id']:0,
                            "remark"=>$remark,
                            "mobile_no"=>$mobile_no,
                            "txn_no"=>$txn_no,
                            "beneficiary_name"=>$beneficiary_name,
                            "bank_account"=>$bank_account,
                            "transaction_id"=>$transaction_id,
                            "valid_upto"=>$valid_upto,
                            "holder_name"=>$holder_name,
                            "card_no"=>$card_no,
                        );
                        $this->HospitalPaymentTypeDetail->save($paymentDetailData);

                        $datasource->commit();
                        $dataToSend['receipt_id'] = $orderID;
                        $dataToSend['status'] = 1;
                        $dataToSend['message'] = "Successfully paid!";

                    } else {
                        $datasource->rollback();
                        $dataToSend['status'] = 0;
                        $dataToSend['message'] = "Something went wrong!";
                    }


                } else {
                    $datasource->rollback();
                    $dataToSend['status'] = 0;
                    $dataToSend['message'] = "Something went wrong!";
                }


            } catch (Exception $e) {
                $datasource->rollback();
                $dataToSend['status'] = 0;
                $dataToSend['message'] = "Something went wrong!";
            }
            echo json_encode($dataToSend);
        }
        die;
    }

    public function pay_all_expense()
    {
        $this->layout = false;
        $login = $this->Session->read('Auth.User');
        $thin_app_id = $login['User']['thinapp_id'];
        $user_id = $login['User']['id'];
        $appointment_staff_id = isset($login['AppointmentStaff']['id']) ? $login['AppointmentStaff']['id'] : 0;
        $data = $this->request->data;
        $ipd_id = base64_decode($data['ipd_id']);
        $payment_type = $data['pay_via'];
        $payment_type_id = !empty($data['pay_via_id']) ? $data['pay_via_id'] : 0;
        $settlement_amount = $data['sa'];
        $total_deposit = $data['td'];
        $total_refund = $data['tr'];
        $payable_amount = $data['pa'];
        $total_expense = $data['te'];
        $remark = $data['remark'];
        $response = array();
        $datasource = $this->HospitalIpdSettlement->getDataSource();
        try {
            $datasource->begin();
            $settlement['thinapp_id'] = $thin_app_id;
            $settlement['total_deposit'] = $total_deposit;
            $settlement['total_expense'] = $total_expense;
            $settlement['total_refund'] = $total_refund;
            $settlement['total_rebate_amount'] = 0;
            $settlement['payment_status'] = ($total_refund > 0) ? "REFUND" : "RECEIVED";
            if($settlement['payment_status'] == "RECEIVED"){
                $settlement['total_rebate_amount'] = $payable_amount - $settlement_amount;
            }
            $settlement['payable_amount'] = $payable_amount;
            $settlement['settlement_amount'] = $settlement_amount;
            $settlement['appointment_staff_id'] = $appointment_staff_id;
            $settlement['remark'] = $remark;
            $settlement['created_by'] = $user_id;
            $settlement['hospital_ipd_id'] = $ipd_id;


            if ($this->HospitalIpdSettlement->save($settlement)) {



                $settlement_id = $this->HospitalIpdSettlement->getLastInsertId();
                /* medical product order update data */
                $product['modified_by_user_id'] = $user_id;
                $product['hospital_ipd_settlement_id'] = $settlement_id;
                $product['payment_status'] = "'PAID'";
                $product['payment_adjust_by_settlement'] = "'Y'";



                $pro_con['MedicalProductOrder.hospital_ipd_id'] = $ipd_id;
                $pro_con['MedicalProductOrder.status'] = "ACTIVE";
                $pro_con['MedicalProductOrder.payment_status'] = "PENDING";
                $pro_con['MedicalProductOrder.is_opd'] = "N";
                $pro_con['MedicalProductOrder.is_advance'] = "N";

                /* advance deposit update data */
                $advance['hospital_ipd_settlement_id'] = $settlement_id;
                $adv_con['HospitalDepositAmount.hospital_ipd_id'] = $ipd_id;
                $adv_con['HospitalDepositAmount.status'] = "ACTIVE";
                /* advance deposti update date end */


                /* add settlement receipt start */
                $ipd_data = $this->HospitalIpd->findById($ipd_id)['HospitalIpd'];

                $receipt['hospital_ipd_id'] = $ipd_id;
                $receipt['hospital_ipd_settlement_id'] = $settlement_id;
                $receipt['appointment_staff_id'] = $appointment_staff_id;
                if ($ipd_data['patient_type'] == "CUSTOMER") {
                    $receipt['appointment_customer_id'] = $ipd_data['patient_id'];
                } else if ($ipd_data['patient_type'] == "CHILDREN") {
                    $receipt['children_id'] = $ipd_data['patient_id'];
                }
                $receipt['appointment_address_id'] = @$ipd_data['appointment_address_id'];
                $receipt['thinapp_id'] = $thin_app_id;

                if($settlement['payment_status'] == "REFUND"){
                    $receipt['total_amount'] = 0;
                    $receipt['refund_amount'] = $settlement_amount;
                    $receipt['refund_payment_type_id'] = $payment_type_id;
                    $receipt['is_refunded'] = "YES";
                    $receipt['refund_date_time'] = Custom::created();
                    $receipt['refund_by_user_id'] = $user_id;
                }else{
                    $receipt['total_amount'] = $settlement_amount;
                    $receipt['hospital_payment_type_id'] = $payment_type_id;
                }
                $receipt['payment_type_name'] = $payment_type;
                $receipt['payment_status'] = "PAID";
                $receipt['is_opd'] = "N";
                $receipt['is_settlement'] = "Y";
                $receipt['created_by_user_id'] = $user_id;

                /* add settlement receipt end */


                /* update ipd settlemen id start */

                $ipd['hospital_ipd_settlement_id'] = $settlement_id;
                $ipd['id'] = $ipd_id;

                /* update ipd settlemen id end */

                if ($this->HospitalIpd->save($ipd) && $this->MedicalProductOrder->updateAll($product, $pro_con) && $this->MedicalProductOrder->saveAll($receipt) && $this->HospitalDepositAmount->updateAll($advance, $adv_con)) {
                    $receipt_id = base64_encode($this->MedicalProductOrder->getLastInsertId());
                    $datasource->commit();
                    $response['status'] = 1;
                    $response['message'] = "Settlement done Successfully!";
                    $response['data']['receipt'] = $receipt_id;
                } else {
                    $datasource->rollback();
                    $response['status'] = 0;
                    $response['message'] = "Sorry, settlement could not done";
                }
            }
        } catch (Exception $e) {
            $datasource->rollback();
            $response['status'] = 0;
            $response['message'] = "Sorry, settlement could not done";
        }

        echo json_encode($response);
        die;
    }


    public function load_doctor_list_new_appointment()
    {
        $this->layout = 'ajax';
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $login = $this->Session->read('Auth.User.User');
            $date = DateTime::createFromFormat('m/d/Y', $this->request->data['date']);

            $list = Custom::get_doctor_list_new_appointment($login['thinapp_id'], $date->format('Y-m-d'));
            $option = '';;
            if (!empty($list)) {
                foreach ($list as $key => $val) {
                    $option .= "<option value='" . $val['doctor_id'] . "'>" . $val['doctor_name'] . "</option>";
                }
            }
            return $option;
        } else {
            exit();
        }

    }

    public function load_doctor_service_new_appointment()
    {
        $this->layout = 'ajax';
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $login = $this->Session->read('Auth.User.User');
            $doctor_id = base64_decode($this->request->data['doctor']);
            $date = DateTime::createFromFormat('m/d/Y', $this->request->data['date']);

            $list = Custom::get_doctor_service_new_appointment($login['thinapp_id'], $doctor_id, $date->format('Y-m-d'));
            $option = '';;
            if (!empty($list)) {
                foreach ($list as $key => $val) {
                    $option .= "<option value='" . $val['service_id'] . "'>" . $val['service_name'] . "</option>";
                }
            }
            return $option;
        } else {
            exit();
        }

    }

    public function load_doctor_address_new_appointment()
    {
        $this->layout = 'ajax';
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $login = $this->Session->read('Auth.User.User');
            $doctor_id = base64_decode($this->request->data['doctor']);
            $service_id = base64_decode($this->request->data['service']);
            $date = DateTime::createFromFormat('m/d/Y', $this->request->data['date']);
            $list = Custom::get_doctor_address_new_appointment($login['thinapp_id'], $doctor_id, $service_id, $date->format('Y-m-d'));
            $option = '';;
            if (!empty($list)) {
                foreach ($list as $key => $val) {
                    $option .= "<option value='" . $val['address_id'] . "'>" . $val['address'] . "</option>";
                }
            }
            return $option;
        } else {
            exit();
        }

    }


    public function upload_department_image()
    {
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            if (isset($this->request->data['AppointmentCategory'])) {
                $data = $this->request->data['AppointmentCategory']['file'];
                $file_type = $this->request->data['AppointmentCategory']['file']['type'];
                $response = array();
                if (isset($data['tmp_name']) && !empty($data['tmp_name'])) {
                    $mimeAarray = array('image/png', 'image/jpeg', 'image/jpeg', 'image/jpeg', 'image/gif', 'image/bmp');
                    if (in_array($file_type, $mimeAarray)) {

                        if ($url = $this->Custom->uploadFileToAws($data)) {
                            $response["status"] = 1;
                            $response["message"] = "File uploaded successfully.";
                            $response["url"] = $url;
                        } else {
                            $response["status"] = 0;
                            $response["message"] = "Sorry file could not upload";
                        }
                    } else {
                        $response["status"] = 0;
                        $response["message"] = "Please upload image file.";
                    }

                } else {
                    $response["status"] = 0;
                    $response["message"] = "Please upload file.";
                }
            } else {
                $response["status"] = 0;
                $response["message"] = "Sorry file could not post.";
            }
            return json_encode($response);
        } else {
            exit();
        }
    }

    public function search_hospital_department()
    {
        $reqData = $this->request->query;
        $pram = array();
        if (!empty($reqData['name'])) {
            $pram['n'] = $reqData['name'];
        }


        $this->redirect(
            array(
                "controller" => "app_admin",
                "action" => "hospital_department_list",
                "?" => $pram,
            )
        );
    }

    public function hospital_department_list()
    {
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User.User');
        $conditions = array();
        $searchData = $this->request->query;

        if (isset($searchData['n']) && !empty($searchData['n'])) {
            $this->request->data['Search']['name'] = $searchData['n'];
            $conditions["AppointmentCategory.name LIKE"] = '%' . $searchData['n'] . '%';
        }


        $data = $this->AppointmentCategory->find('all', array(
            "conditions" => array(
                "AppointmentCategory.thinapp_id" => $login['thinapp_id'],
                "AppointmentCategory.status" => 'ACTIVE',
                $conditions
            ),
            'contain' => false,
            'order' => array('AppointmentCategory.id' => 'desc')

        ));

        $login1 = $this->Session->read('Auth.User');
        $reportTitle = $login1['Thinapp']['name'].' ('.date('d/m/Y').')';

        $this->set(compact('reportTitle','data'));


    }

    public function add_hospital_department()
    {
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User.User');

        if ($this->request->is(array('post', 'put'))) {
            $data = $this->request->data['AppointmentCategory'];
            $data['thinapp_id'] = $login['thinapp_id'];
            $data['name'] = trim($data['name']);
            $this->AppointmentCategory->set($data);
            if ($this->AppointmentCategory->validates()) {
                if ($this->AppointmentCategory->save($data)) {
                	Custom::delete_hospital_cache($login['thinapp_id']);
                    $this->Session->setFlash('Department added successfully!', 'default', array(), 'success');
                    $this->redirect(array('controller' => 'app_admin', 'action' => 'hospital_department_list'));
                } else {
                    $this->Session->setFlash("Sorry, Couldn't add tax rate!", 'default', array(), 'error');
                }
            }
        }

    }

    public function edit_hospital_department($id = null, $delete = false)
    {
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User.User');

        $id = base64_decode($id);
        if ($this->request->is(array('post', 'put'))) {
            $data = $this->request->data['AppointmentCategory'];
            $data['id'] = $id;
            $data['thinapp_id'] = $login['thinapp_id'];
            $data['name'] = trim($data['name']);
            $this->AppointmentCategory->set($data);
            if ($this->AppointmentCategory->validates()) {
                if ($this->AppointmentCategory->save($data)) {
                	Custom::delete_hospital_cache($login['thinapp_id']);
                    $this->Session->setFlash('Department edited successfully!', 'default', array(), 'success');
                    $this->redirect(array('controller' => 'app_admin', 'action' => 'hospital_department_list'));
                } else {
                    $this->Session->setFlash("Sorry, Couldn't edit department!", 'default', array(), 'error');
                }
            }
        } else {
            $this->request->data = $this->AppointmentCategory->findById($id);

        }


    }

    public function delete_hospital_department($id = null)
    {
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User.User');
        $id = base64_decode($id);
        $cat_data = $this->AppointmentCategory->findById($id);
        if (!empty($cat_data)) {
            $data['id'] = $id;
            $data['status'] = 'INACTIVE';
            if ($this->AppointmentCategory->save($data)) {
            	Custom::delete_hospital_cache($login['thinapp_id']);
                $this->Session->setFlash('Department deleted successfully!', 'default', array(), 'success');
                $this->redirect(array('controller' => 'app_admin', 'action' => 'hospital_department_list'));
            } else {
                $this->Session->setFlash("Sorry, Couldn't delete department!", 'default', array(), 'error');
            }
        }
        exit();
    }

    public function generate_forgot_otp()
    {
        $this->autoRender = false;
        if ($this->request->is('ajax') || true) {

            $role_type = isset($this->request->data['r']) ? $this->request->data['r'] : '';
            $mobile = isset($this->request->data['m']) ? Custom::create_mobile_number($this->request->data['m']) : '';
            $thin_app_id = isset($this->request->data['t']) ? $this->request->data['t'] : 0;
            $response = array();
            if (empty($thin_app_id)) {
                $response['status'] = 0;
                $response['message'] = "Please select organization";
            } else if (empty($mobile)) {
                $response['status'] = 0;
                $response['message'] = "Please enter valid mobile number";
            } else if (empty($role_type)) {
                $response['status'] = 0;
                $response['message'] = "Please select role";
            } else {

                $verification_code = Custom::getRandomString(4);
                $option = array(
                    'username' => $mobile,
                    'mobile' => $mobile,
                    'verification' => $verification_code,
                    'thinapp_id' => $thin_app_id
                );
                $status = false;
                $last_id = 0;
                if ($role_type == "ADMIN") {
                    $user_data = $this->User->find('first', array('contain' => false, 'conditions' => array('User.mobile' => $mobile, 'User.thinapp_id' => $thin_app_id, 'User.role_id' => 5)));
                    $last_id = @$user_data['User']['id'];
                    if ($this->User->updateAll(array('User.verification_code' => "$verification_code"), array('User.id' => $last_id))) {
                        if (Custom::send_otp($option)) {
                            $status = true;
                        }
                    }
                } else if ($role_type == "DOCTOR" || $role_type == "RECEPTIONIST") {

                    $user_data = $this->AppointmentStaff->find('first', array('contain' => false, 'conditions' => array('AppointmentStaff.status' => "ACTIVE", 'AppointmentStaff.mobile' => "$mobile", 'AppointmentStaff.thinapp_id' => $thin_app_id, 'AppointmentStaff.staff_type' => "$role_type")));
                    $last_id = @$user_data['AppointmentStaff']['id'];
                    if ($this->AppointmentStaff->updateAll(array('AppointmentStaff.otp' => "$verification_code"), array('AppointmentStaff.id' => $last_id))) {
                        if (Custom::send_otp($option)) {
                            $status = true;
                        }
                    }
                } else if ($role_type == "LAB" || $role_type == "PHARMACY") {
                    $user_data = $this->LabPharmacyUser->find('first', array('contain' => false, 'conditions' => array('LabPharmacyUser.status' => "ACTIVE", 'LabPharmacyUser.mobile' => "$mobile", 'LabPharmacyUser.thinapp_id' => $thin_app_id, 'LabPharmacyUser.role_type' => "$role_type")));
                    $last_id = @$user_data['LabPharmacyUser']['id'];
                    if ($this->LabPharmacyUser->updateAll(array('LabPharmacyUser.verification_code' => "$verification_code"), array('LabPharmacyUser.id' => $last_id))) {
                        if (Custom::send_otp($option)) {
                            $status = true;
                        }
                    }
                }

                if ($status === true) {
                    $response['status'] = 1;
                    $response['message'] = "OTP send successfully";
                    $response['last'] = $last_id;
                    $response['role'] = $role_type;
                } else {
                    $response['status'] = 0;
                    $response['message'] = "Sorry OTP could not send";
                }


            }
            return json_encode($response);
        } else {
            exit();
        }

    }

    public function update_password()
    {
        $this->autoRender = false;
        if ($this->request->is('ajax') || true) {


            $otp = isset($this->request->data['o']) ? $this->request->data['o'] : 0;
            $id = isset($this->request->data['l']) ? $this->request->data['l'] : 0;
            $role_type = isset($this->request->data['r']) ? $this->request->data['r'] : '';
            $password = isset($this->request->data['p']) ? $this->request->data['p'] : 0;
            $response = array();
            if (empty($id)) {
                $response['status'] = 0;
                $response['message'] = "Please enter valid data";
            } else if (empty($role_type)) {
                $response['status'] = 0;
                $response['message'] = "Please select role";
            } else if (empty($otp)) {
                $response['status'] = 0;
                $response['message'] = "Please enter valid otp";
            } else if (empty($password)) {
                $response['status'] = 0;
                $response['message'] = "Please enter password";
            } else {

                $password = md5($password);
                $status = false;
                $invalid_otp = true;
                if ($role_type == "ADMIN") {
                    $data = $this->User->findById($id, array('contain' => false));
                    if ($data['User']['verification_code'] == $otp) {
                        $invalid_otp = false;
                        $update = $this->User->updateAll(array('User.password' => "'" . $password . "'"), array('User.id' => $id));
                        if ($update) {
                            $status = true;
                        }
                    }

                } else if ($role_type == "DOCTOR" || $role_type == "RECEPTIONIST") {
                    $data = $this->AppointmentStaff->findById($id, array('contain' => false));
                    if ($data['AppointmentStaff']['otp'] == $otp) {
                        $invalid_otp = false;
                        $update = $this->AppointmentStaff->updateAll(array('AppointmentStaff.password' => "'" . $password . "'"), array('AppointmentStaff.id' => $id));
                        if ($update) {
                            $status = true;
                            Custom::delete_doctor_cache($id);
                        }
                    }
                } else if ($role_type == "LAB" || $role_type == "PHARMACY") {
                    $data = $this->LabPharmacyUser->findById($id, array('contain' => false));
                    if ($data['LabPharmacyUser']['verification_code'] == $otp) {
                        $invalid_otp = false;
                        $update = $this->LabPharmacyUser->updateAll(array('LabPharmacyUser.password' => "'" . $password . "'"), array('LabPharmacyUser.id' => $id));
                        if ($update) {
                            $status = true;
                            $file_name = Custom::encrypt_decrypt('encrypt', "lab_$id");
                            WebservicesFunction::deleteJson(array($file_name), 'login_lab_pharmacy');
                        }
                    }
                }

                if ($status === true && $invalid_otp === false) {
                    $response['status'] = 1;
                    $response['message'] = "Password changed successfully";
                    $this->Session->setFlash('Password changed successfully!', 'default', array(), 'success');

                } else {
                    $response['status'] = 0;
                    $lbl = ($invalid_otp === true) ? "OTP" : "password";
                    $response['message'] = "Please enter valid $lbl";
                }


            }
            return json_encode($response);
        } else {
            exit();
        }

    }

    public function appointment_skip()
    {
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $appointment_id = base64_decode($this->request->data['id']);
            $post = array();
            $login = $this->Session->read('Auth.User.User');
            $post['app_key'] = APP_KEY;
            $post['user_id'] = $login['id'];
            $post['thin_app_id'] = $login['thinapp_id'];
            $post['mobile'] = $login['mobile'];
            $post['appointment_id'] = $appointment_id;
            $result = json_decode(WebServicesFunction_2_3::appointment_skip($post, true), true);
            if ($result['status'] == 1) {
                $data = $result['data'];
                unset($result['data']);
                Custom::sendResponse($result);
                Custom::send_process_to_background();
                $token_array = Custom::get_upcoming_appointment_user_token($data['thinapp_id'], $data['appointment_staff_id'], $data['appointment_address_id'], $data['id']);
                if (!empty($token_array)) {
                    $option = array(
                        'thinapp_id' => $data['thinapp_id'],
                        'staff_id' => 0,
                        'customer_id' => 0,
                        'service_id' => 0,
                        'channel_id' => 0,
                        'role' => "CUSTOMER",
                        'flag' => 'APPOINTMENT_TRACKER',
                        'title' => "New Tracker Request",
                        'message' => "Your tracker message",
                        'description' => "Your tracker message",
                        'chat_reference' => '',
                        'module_type' => 'APPOINTMENT_TRACKER',
                        'module_type_id' => 0,
                        'firebase_reference' => ""
                    );
                    Custom::send_notification_via_token($option, $token_array, $data['thinapp_id']);

                }
                $result = Custom::manage_emergency_tracker_cache($appointment_id,"DELETE");
                Custom::update_tracker_time_difference($appointment_id);
                Custom::send_web_tracker_notification($login['thinapp_id']);
            } else {
                Custom::sendResponse($result);
            }

        } else {
            exit();
        }

    }


    public function search_get_billing_stats()
    {
        $reqData = $this->request->data['Search'];
        $pram = array();

        if (!empty($reqData['rt'])) {
            $pram['rt'] = $reqData['rt'];
        }
        if (!empty($reqData['from_date'])) {
            $pram['f'] = $reqData['from_date'];
        }
        if (!empty($reqData['to_date'])) {
            $pram['t'] = $reqData['to_date'];
        }
        if (!empty($reqData['type'])) {
            $pram['ty'] = $reqData['type'];
        }
        if (!empty($reqData['module'])) {
            $pram['m'] = $reqData['module'];
        }


        if (!empty($reqData['address'])) {
            $pram['a'] = $reqData['address'];
        }
        if (!empty($reqData['doctor'])) {
            $pram['d'] = $reqData['doctor'];
        }
        if (!empty($reqData['product'])) {
            $pram['p'] = $reqData['product'];
        }

        if (!empty($reqData['name'])) {
            $pram['n'] = $reqData['name'];
        }
        if (!empty($reqData['uhid'])) {
            $pram['u'] = $reqData['uhid'];
        }
        if (!empty($reqData['refer'])) {
            $pram['r'] = $reqData['refer'];
        }

        if (!empty($reqData['biller'])) {
            $pram['b'] = $reqData['biller'];
        }
        if (!empty($reqData['payment_status'])) {
            $pram['ps'] = $reqData['payment_status'];
        }
        if (!empty($reqData['service'])) {
            $pram['s'] = $reqData['service'];
        }

        if (!empty($reqData['category'])) {
            $pram['c'] = $reqData['category'];
        }

        $this->redirect(
            array(
                "controller" => "app_admin",
                "action" => "get_billing_stats",
                "?" => $pram,
            )
        );
    }


   
	public function get_billing_stats_back()
    {

        $this->layout = "app_admin_home";
        $login = $this->Session->read('Auth.User.User');
        $login_data = $this->Session->read('Auth.User');
        $thinappID = $login['thinapp_id'];
        $today = date("Y-m-d");
        $searchData = $this->request->query;
        $report_type = 'date';
        if (isset($searchData['rt'])) {
            $report_type = $searchData['rt'];
        }

        $condition = "";

        if ($report_type == 'date') {

            if($login_data['USER_ROLE'] == 'RECEPTIONIST'){
                $app_data = Custom::get_doctor_by_id($login_data['AppointmentStaff']['id']);
                if($app_data['allow_date_wise_report']=='NO'){
                    $this->redirect(array('controller' => 'app_admin', 'action' => 'dashboard', 'admin' => false));
                }
            }

            $condition .= "  MedicalProductOrder.thinapp_id = $thinappID and MedicalProductOrder.payment_status='PAID' and MedicalProductOrder.status='ACTIVE'";
            if ($login_data['USER_ROLE'] == "LAB" || $login_data['USER_ROLE'] == "PHARMACY") {
                $condition .= " AND MedicalProductOrder.lab_pharmacy_user_id = " . $login_data['LabPharmacyUser']['id'];
            } else if ($login_data['USER_ROLE'] == "DOCTOR" || $login_data['USER_ROLE'] == "RECEPTIONIST") {
                $condition .= " AND MedicalProductOrder.created_by_user_id = " . $login_data['User']['id'];
            }

            if (isset($searchData['f']) || isset($searchData['t'])) {
                if (!empty($searchData['f'])) {
                    $this->request->data['Search']['from_date'] = $searchData['f'];
                    $date = $from_date= DateTime::createFromFormat('d/m/Y', $searchData['f'])->format('Y-m-d');
                    $condition .= " and DATE(MedicalProductOrder.created) >='$date' ";
                }
                if (!empty($searchData['t'])) {
                    $this->request->data['Search']['to_date'] = $searchData['t'];
                    $date = $to_date = DateTime::createFromFormat('d/m/Y', $searchData['t'])->format('Y-m-d');
                    $condition .= " and DATE(MedicalProductOrder.created) <='$date' ";
                }
            } else {
                $conditionOrder['DATE(MedicalProductOrder.created)'] = $today;
                $this->request->data['Search']['to_date'] = date("d/m/Y");
                $this->request->data['Search']['from_date'] = date("d/m/Y");
                $today = $from_date = $to_date = date('Y-m-d');
                $condition .= " and DATE(MedicalProductOrder.created) between '$today' and '$today' ";
            }


            $group_by = "DATE_FORMAT(MedicalProductOrder.created,'%d-%m-%Y')";
            $select = "DATE_FORMAT(MedicalProductOrder.created,'%d-%m-%Y')";
            if (isset($searchData['ty']) || !empty($searchData['ty'])) {
                $this->request->data['Search']['type'] = $type = $searchData['ty'];
                if ($type == "YEAR") {
                    $group_by = "DATE_FORMAT(MedicalProductOrder.created,'%Y')";
                    $select = "DATE_FORMAT(MedicalProductOrder.created,'%Y')";

                } else if ($type == "MONTH") {
                    $group_by = "CONCAT(DATE_FORMAT(MedicalProductOrder.created,'%Y'),'-',DATE_FORMAT(MedicalProductOrder.created,'%m'))";
                    $select = "CONCAT(DATE_FORMAT(MedicalProductOrder.created,'%Y'),'-',DATE_FORMAT(MedicalProductOrder.created,'%m'))";
                }
            }

            if (isset($searchData['s']) || !empty($searchData['s'])) {
                $this->request->data['Search']['service']  = $searchData['s'];
                $condition .= " and  MedicalProductOrderDetail.medical_product_id = ". $searchData['s'];
            }
        
        	if (isset($searchData['d']) || !empty($searchData['d'])) {
                $this->request->data['Search']['doctor']  = $searchData['d'];
                $condition .= " and  MedicalProductOrderDetail.appointment_staff_id = ". $searchData['d'];
            }

            if (isset($searchData['m']) || !empty($searchData['m'])) {
                $this->request->data['Search']['module'] = $category = $searchData['m'];
                if ($category == "OPD") {
                    $condition .= " and  MedicalProductOrder.is_opd = 'Y'";
                } else if ($category == "IPD") {
                    $condition .= " and  ( MedicalProductOrder.is_advance = 'Y' OR MedicalProductOrder.is_settlement = 'Y' OR MedicalProductOrder.is_expense = 'Y' )";
                } else if ($category == "LAB") {
                    $condition .= " AND  MedicalProductOrder.lab_pharmacy_type = 'LAB' AND MedicalProductOrder.lab_pharmacy_user_id > 0 ";
                } else if ($category == "PHARMACY") {
                    $condition .= " AND  MedicalProductOrder.lab_pharmacy_type = 'PHARMACY' AND MedicalProductOrder.lab_pharmacy_user_id > 0 ";
                } else if ($category == "OTHER") {
                    $condition .= " and  MedicalProductOrder.is_opd = 'N' AND MedicalProductOrder.is_advance = 'N' AND  MedicalProductOrder.is_settlement = 'N' AND MedicalProductOrder.is_expense = 'N' ";
                }
            }

            if (isset($searchData['c']) || !empty($searchData['c'])) {
                $this->request->data['Search']['category']  = $searchData['c'];
                $condition .= " and  HospitalServiceCategory.id = ". $searchData['c'];
            }

            /*$query = "select $select as title, SUM(CASE WHEN MedicalProductOrder.is_advance ='Y' AND HospitalDepositAmount.status='ACTIVE' THEN HospitalDepositAmount.amount WHEN MedicalProductOrder.is_advance ='Y' AND HospitalDepositAmount.status='INACTIVE' THEN -HospitalDepositAmount.amount  WHEN MedicalProductOrder.is_settlement ='Y' AND HospitalIpdSettlement.payment_status='RECEIVED' THEN HospitalIpdSettlement.settlement_amount WHEN MedicalProductOrder.is_settlement ='Y' AND HospitalIpdSettlement.payment_status='REFUND' THEN -HospitalIpdSettlement.settlement_amount ELSE MedicalProductOrder.total_amount END )  as total from medical_product_orders as MedicalProductOrder left join medical_product_order_details as MedicalProductOrderDetail on MedicalProductOrderDetail.medical_product_order_id = MedicalProductOrder.id and MedicalProductOrderDetail.id = (select max(mpod.id) from medical_product_order_details as mpod where mpod.medical_product_order_id = MedicalProductOrder.id ) left join medical_products as MedicalProduct on MedicalProduct.id= MedicalProductOrderDetail.medical_product_id left join hospital_service_categories as HospitalServiceCategory on HospitalServiceCategory.id = MedicalProduct.hospital_service_category_id left join appointment_customers as AppointmentCustomer on AppointmentCustomer.id = MedicalProductOrder.appointment_customer_id  left join childrens as Children on Children.id=MedicalProductOrder.children_id  left join users as User on User.id = MedicalProductOrder.created_by_user_id left join appointment_staffs as AppointmentStaff on AppointmentStaff.user_id = MedicalProductOrder.created_by_user_id and AppointmentStaff.thinapp_id = MedicalProductOrder.thinapp_id and AppointmentStaff.status='ACTIVE' left join lab_pharmacy_users as LabPharmacyUser on LabPharmacyUser.id =MedicalProductOrder.lab_pharmacy_user_id left join hospital_ipd_settlements as HospitalIpdSettlement on HospitalIpdSettlement.id = MedicalProductOrder.hospital_ipd_settlement_id  left join hospital_deposit_amounts as HospitalDepositAmount on HospitalDepositAmount.id = MedicalProductOrder.hospital_deposit_amount_id  where  $condition group by $group_by";
            $connection = ConnectionUtil::getConnection();
            $service_message_list = $connection->query($query);
            $list = array();
            if ($service_message_list->num_rows) {
                $list = mysqli_fetch_all($service_message_list, MYSQLI_ASSOC);
            }

            $this->set(compact('list'));*/
        
        	 $date_range = Custom::createDateRange($from_date,$to_date,'Y-m-d');
            $list =$payment_type_name= array();
            $all_condition = $condition;
       		$connection = ConnectionUtil::getConnection();
            foreach($date_range as $key =>$date_selected){
                 $condition = $all_condition." and MedicalProductOrder.payment_adjust_by_settlement = 'N' and  DATE(MedicalProductOrder.created) = '".$date_selected."'";
                $refund_query = "(SELECT IFNULL(SUM(MedicalProductOrder1.refund_amount),0) from medical_product_orders as MedicalProductOrder1 where MedicalProductOrder1.thinapp_id = $thinappID and MedicalProductOrder1.payment_status='PAID' and MedicalProductOrder1.is_refunded='YES' and MedicalProductOrder1.status='ACTIVE' and DATE(MedicalProductOrder1.created) between '$from_date' and '$to_date' and DATE(MedicalProductOrder1.created) = '$date_selected' and MedicalProductOrder1.hospital_payment_type_id = result.hospital_payment_type_id)";
                $query = "SELECT (sum(result.amount) - $refund_query ) amount ,result.payment_type_name FROM (SELECT MedicalProductOrder.hospital_payment_type_id, SUM(MedicalProductOrder.total_amount) as amount, MedicalProductOrder.payment_type_name from medical_product_orders as MedicalProductOrder LEFT JOIN hospital_payment_types AS HospitalPaymentType ON MedicalProductOrder.hospital_payment_type_id = HospitalPaymentType.id left join medical_product_order_details as MedicalProductOrderDetail on MedicalProductOrderDetail.medical_product_order_id = MedicalProductOrder.id and MedicalProductOrderDetail.id = (select max(mpod.id) from medical_product_order_details as mpod where mpod.medical_product_order_id = MedicalProductOrder.id ) left join medical_products as MedicalProduct on MedicalProduct.id= MedicalProductOrderDetail.medical_product_id left join hospital_service_categories as HospitalServiceCategory on HospitalServiceCategory.id = MedicalProduct.hospital_service_category_id left join appointment_customers as AppointmentCustomer on AppointmentCustomer.id = MedicalProductOrder.appointment_customer_id left join childrens as Children on Children.id=MedicalProductOrder.children_id left join users as User on User.id = MedicalProductOrder.created_by_user_id left join appointment_staffs as AppointmentStaff on AppointmentStaff.user_id = MedicalProductOrder.created_by_user_id and AppointmentStaff.thinapp_id = MedicalProductOrder.thinapp_id and AppointmentStaff.status='ACTIVE' left join lab_pharmacy_users as LabPharmacyUser on LabPharmacyUser.id =MedicalProductOrder.lab_pharmacy_user_id left join hospital_ipd_settlements as HospitalIpdSettlement on HospitalIpdSettlement.id = MedicalProductOrder.hospital_ipd_settlement_id left join hospital_deposit_amounts as HospitalDepositAmount on HospitalDepositAmount.id = MedicalProductOrder.hospital_deposit_amount_id where $condition  group by MedicalProductOrder.id, MedicalProductOrder.hospital_payment_type_id) AS result group by result.payment_type_name";
                
                
                
                $service_message_list = $connection->query($query);
                $list[$key]['title'] =$date_selected ;
                $list[$key]['total'] =0;
                $list[$key]['sub_amount'] =array(); ;
                if ($service_message_list->num_rows) {
                    $all_payments= mysqli_fetch_all($service_message_list, MYSQLI_ASSOC);
                    $total_amount = 0;
                    foreach ($all_payments as $type => $value){
                        $list[$key]['sub_amount'][$value['payment_type_name']]= $value;
                        $total_amount += $value['amount'];
                    }
                    $list[$key]['total'] =$total_amount ;
                    $payment_type_name = array_values(array_unique(array_merge($payment_type_name,array_column($all_payments,'payment_type_name'))));
                }
            }
            $this->set(compact('list','payment_type_name'));

        } else if ($report_type == 'address') {

            if($login_data['USER_ROLE'] == 'RECEPTIONIST'){
                $app_data = Custom::get_doctor_by_id($login_data['AppointmentStaff']['id']);
                if($app_data['allow_product_wise_report']=='NO'){
                    $this->redirect(array('controller' => 'app_admin', 'action' => 'dashboard', 'admin' => false));
                }
            }



            $condition .= " mpod.thinapp_id = $thinappID and mpo.payment_status='PAID' and mpo.status='ACTIVE'";
            if ($login_data['USER_ROLE'] == "LAB" || $login_data['USER_ROLE'] == "PHARMACY") {
                $condition .= "AND mpo.lab_pharmacy_user_id = " . $login_data['LabPharmacyUser']['id'];
            } else if ($login_data['USER_ROLE'] == "DOCTOR" || $login_data['USER_ROLE'] == "RECEPTIONIST") {
                $condition .= " AND mpo.created_by_user_id = " . $login_data['User']['id'];
            }

            if (isset($searchData['f']) || isset($searchData['t'])) {
                if (!empty($searchData['f'])) {
                    $this->request->data['Search']['from_date'] = $searchData['f'];
                    $date = DateTime::createFromFormat('d/m/Y', $searchData['f'])->format('Y-m-d');
                    $condition .= " and DATE(mpod.created) >='$date' ";
                }
                if (!empty($searchData['t'])) {
                    $this->request->data['Search']['to_date'] = $searchData['t'];
                    $date = DateTime::createFromFormat('d/m/Y', $searchData['t'])->format('Y-m-d');
                    $condition .= " and DATE(mpod.created) <='$date' ";
                }
            } else {
                $conditionOrder['DATE(MedicalProductOrder.created)'] = $today;
                $this->request->data['Search']['to_date'] = date("d/m/Y");
                $this->request->data['Search']['from_date'] = date("d/m/Y");
                $today = date('Y-m-d');
                $condition .= " and DATE(mpod.created) between '$today' and '$today' ";
            }

            if (isset($searchData['a']) || !empty($searchData['a'])) {
                $this->request->data['Search']['address'] = $searchData['a'];
                $condition .= " and mpo.appointment_address_id = " . $searchData['a'];
            }

            if (isset($searchData['d']) || !empty($searchData['d'])) {
                $this->request->data['Search']['doctor'] = $searchData['d'];
                $condition .= " and mpo.appointment_staff_id = " . $searchData['d'];
            }
            if (isset($searchData['p']) || !empty($searchData['p'])) {
                $this->request->data['Search']['product'] = $searchData['p'];
                $condition .= " and mpod.medical_product_id = " . $searchData['p'];
            }

            if (isset($searchData['b']) || !empty($searchData['b'])) {
                $this->request->data['Search']['biller'] = $searchData['b'];
                $tmp = explode("#", $searchData['b']);
                if ($tmp[1] == "LAB" || $tmp[1] == "PHARMACY") {
                    $condition .= " and mpo.lab_pharmacy_user_id = " . $tmp[0];
                } else {
                    $condition .= " and mpo.created_by_user_id = " . $tmp[0];
                }
            }

            $query = "select sum(mpod.total_amount) as total , mp.name as product_name, aa.address from medical_product_order_details as mpod join medical_products as mp on mp.id = mpod.medical_product_id join medical_product_orders as mpo on mpo.id = mpod.medical_product_order_id left join hospital_ipd as hi on hi.id = mpo.hospital_ipd_id left join appointment_customer_staff_services as acss on acss.id = mpo.appointment_customer_staff_service_id  left join appointment_addresses as aa on ( aa.id= mpo.appointment_address_id ) OR ( acss.appointment_address_id = aa.id ) OR (aa.id = hi.appointment_address_id) where  $condition  group by CONCAT(mp.id,IFNULL(aa.id,''))  order by aa.address asc, mp.name asc";
            $connection = ConnectionUtil::getConnection();
            $service_message_list = $connection->query($query);
            $tmp = $list = array();
            if ($service_message_list->num_rows) {
                $tmp = mysqli_fetch_all($service_message_list, MYSQLI_ASSOC);
                foreach ($tmp as $key => $value) {
                    $address = $value['address'];
                    unset($value['address']);
                    $list[$address][] = $value;
                }
            }

            $this->set(compact('list'));
        } else if ($report_type == 'refer') {

            $condition .= " acss.thinapp_id =$thinappID and acss.delete_status !='DELETED' and (acss.referred_by !='' OR acss.referred_by_mobile!='' )  ";


            if (isset($searchData['f']) || isset($searchData['t'])) {
                if (!empty($searchData['f'])) {
                    $this->request->data['Search']['from_date'] = $searchData['f'];
                    $date = DateTime::createFromFormat('d/m/Y', $searchData['f'])->format('Y-m-d');
                    $condition .= " and DATE(acss.created) >='$date' ";
                }
                if (!empty($searchData['t'])) {
                    $this->request->data['Search']['to_date'] = $searchData['t'];
                    $date = DateTime::createFromFormat('d/m/Y', $searchData['t'])->format('Y-m-d');
                    $condition .= " and DATE(acss.created) <='$date' ";
                }
            } else {
                $conditionOrder['DATE(MedicalProductOrder.created)'] = $today;
                $this->request->data['Search']['to_date'] = date("d/m/Y");
                $this->request->data['Search']['from_date'] = date("d/m/Y");
                $today = date('Y-m-d');
                $condition .= " and DATE(acss.created) between '$today' and '$today' ";
            }

            if (isset($searchData['a']) || !empty($searchData['a'])) {
                $this->request->data['Search']['address'] = $searchData['a'];
                $condition .= " and acss.appointment_address_id = " . $searchData['a'];
            }


            if (isset($searchData['n']) || !empty($searchData['n'])) {
                $this->request->data['Search']['name'] = $name = $searchData['n'];
                $condition .= " and ( ac.first_name like '%$name%' OR c.child_name like '%$name%') ";
            }
            if (isset($searchData['u']) || !empty($searchData['u'])) {
                $this->request->data['Search']['uhid'] = $uhid = $searchData['u'];
                $condition .= " and ( ac.uhid like '%$uhid%' OR c.uhid like '%$uhid%') ";
            }
            if (isset($searchData['r']) || !empty($searchData['r'])) {
                $this->request->data['Search']['refer'] = $uhid = $searchData['r'];
                $condition .= " and acss.referred_by like '%$uhid%' ";
            }

            $query = "select acss.created, IFNULL(ac.mobile, c.mobile) as patient_mobile, IFNULL(ac.first_name, c.child_name) as patient_name, IFNULL(ac.uhid,c.uhid) as uhid, acss.referred_by_mobile, acss.referred_by from appointment_customer_staff_services as acss left join appointment_customers as ac on ac.id = acss.appointment_customer_id left join childrens as c on c.id= acss.children_id where $condition order by acss.created desc";
            $connection = ConnectionUtil::getConnection();
            $service_message_list = $connection->query($query);
            $list = array();
            if ($service_message_list->num_rows) {
                $list = mysqli_fetch_all($service_message_list, MYSQLI_ASSOC);
            }
            $this->set(compact('list'));


        }else if ($report_type == 'due_amount') {

            $condition .= " pda.thinapp_id =$thinappID AND pda.status='ACTIVE' and pda.settlement_by_order_id = 0 ";


            if (isset($searchData['f']) || isset($searchData['t'])) {
                if (!empty($searchData['f'])) {
                    $this->request->data['Search']['from_date'] = $searchData['f'];
                    $date = DateTime::createFromFormat('d/m/Y', $searchData['f'])->format('Y-m-d');
                    $condition .= " and DATE(pda.created) >='$date' ";
                }
                if (!empty($searchData['t'])) {
                    $this->request->data['Search']['to_date'] = $searchData['t'];
                    $date = DateTime::createFromFormat('d/m/Y', $searchData['t'])->format('Y-m-d');
                    $condition .= " and DATE(pda.created) <='$date' ";
                }
            } else {

                $this->request->data['Search']['to_date'] = date("d/m/Y");
                $this->request->data['Search']['from_date'] = date("d/m/Y");
                $today = date('Y-m-d');
                $condition .= " and DATE(pda.created) between '$today' and '$today' ";
            }




            if (isset($searchData['n']) || !empty($searchData['n'])) {
                $this->request->data['Search']['name'] = $name = $searchData['n'];
                $condition .= " and ( ac.first_name like '%$name%' OR c.child_name like '%$name%') ";
            }

            if (isset($searchData['ps']) || !empty($searchData['ps'])) {
                $this->request->data['Search']['payment_status'] = $payment_status = $searchData['ps'];
                $condition .= " and pda.payment_status ='$payment_status' ";
            }

            if (isset($searchData['u']) || !empty($searchData['u'])) {
                $this->request->data['Search']['uhid'] = $uhid = $searchData['u'];
                $condition .= " and ( ac.uhid like '%$uhid%' OR c.uhid like '%$uhid%') ";
            }


            $query = "select mpo.id as order_id, pda.id, pda.created, IFNULL(ac.mobile, c.mobile) as patient_mobile, IFNULL(ac.first_name, c.child_name) as patient_name, IFNULL(ac.uhid,c.uhid) as uhid, pda.amount, pda.payment_status from patient_due_amounts as pda left join appointment_customers as ac on ac.id = pda.appointment_customer_id left join childrens as c on c.id= pda.children_id left join medical_product_orders as mpo on mpo.id = pda.direct_billing_order_id where $condition order by pda.created desc";
            $connection = ConnectionUtil::getConnection();
            $service_message_list = $connection->query($query);
            $list = array();
            if ($service_message_list->num_rows) {
                $list = mysqli_fetch_all($service_message_list, MYSQLI_ASSOC);
            }
            $this->set(compact('list'));
        }


        $login1 = $this->Session->read('Auth.User');
        $reportTitle = $login1['Thinapp']['name'].' ('.$this->request->data['Search']['to_date'].' - '.$this->request->data['Search']['from_date'].')';


        $this->set(compact('reportTitle','report_type'));

    }

    public function ipd_load_all_receipt()
    {
        $this->layout = 'ajax';
        if ($this->request->is('ajax')) {
            $ipd_id = base64_decode($this->request->data['ipd_id']);
            $receipt_for = ($this->request->data['receipt_for']);
            $expense = $patient = $deposit = array();
            $connection = ConnectionUtil::getConnection();
            $query = "select hi.admit_status, hsc.name as ward_name, t.logo, his.created as settlement_date, hi.hospital_ipd_settlement_id,  his.total_deposit, his.total_expense, his.total_refund, his.remark, his.payable_amount, his.settlement_amount, his.payment_status, IF(t.receipt_header_title !='',t.receipt_header_title,t.name) as app_name, IFNULL(ac.parents_name,c.parents_name) as parents_name, hi.admit_date, IFNULL(ac.first_name,c.child_name) as patient_name, ifnull(ac.uhid,c.uhid) as uhid, ifnull(ac.mobile,c.mobile) as patient_mobile, ifnull(ac.gender,c.gender) as gender, ifnull(ac.age,'') as age, hi.ipd_unique_id  from hospital_ipd as hi left join hospital_ipd_settlements as his on his.id= hi.hospital_ipd_settlement_id join thinapps as t on t.id = hi.thinapp_id left join appointment_customers as ac on ac.id= hi.patient_id and hi.patient_type ='CUSTOMER' left join childrens as c on c.id = hi.patient_id and hi.patient_type ='CHILDREN' LEFT JOIN hospital_service_categories  AS hsc ON hsc.id = hi.hospital_service_category_id where hi.id = $ipd_id";
            $list = $connection->query($query);
            if ($list->num_rows) {
                $patient = mysqli_fetch_assoc($list);
                if ($receipt_for == "settlement" || $receipt_for ==  'expense') {
                    $query = "select mpo.id as order_id, mpo.bill_id,  mpod.product_price, mp.name, mpo.payment_status, mpod.tax_type,mpod.amount, mpod.quantity,mpod.tax_amount,mpod.total_amount,mpod.discount_amount,mpo.created, mpod.discount_type, mpod.discount_value from medical_product_orders as mpo join medical_product_order_details as mpod on mpo.id = mpod.medical_product_order_id join medical_products as mp on mp.id=mpod.medical_product_id where mpo.hospital_ipd_id =$ipd_id and mpo.status='ACTIVE' and mpo.is_expense = 'Y' and mpo.total_amount > 0  order by mpo.created desc";
                    $list = $connection->query($query);
                    if ($list->num_rows) {
                        $expense = mysqli_fetch_all($list, MYSQLI_ASSOC);
                    }
                }
                if ($receipt_for == "settlement" || $receipt_for == 'deposit') {
                    $query = "select mpo.id as order_id,'deposit' AS `type`, hda.amount,hda.discount, hda.tds, hda.created, IFNULL(hpt.name,'Cash') as payment_via from hospital_deposit_amounts as hda left join medical_product_orders as mpo on hda.id = mpo.hospital_deposit_amount_id left join hospital_payment_types as hpt on  hda.hospital_payment_type_id = hpt.id  where hda.hospital_ipd_id =$ipd_id and hda.status ='ACTIVE' and mpo.status ='ACTIVE' order by hda.id asc";
                    $list = $connection->query($query);
                    $deposit = array();
                    if ($list->num_rows) {
                        $deposit = mysqli_fetch_all($list, MYSQLI_ASSOC);
                    }

                    $depositExp = "select mpo.id as order_id,'expance' AS `type`, mpo.bill_id, mpo.payment_type_name,  mpod.product_price, mp.name, mpo.payment_status, mpod.tax_type,mpod.amount, mpod.quantity,mpod.tax_amount,mpod.total_amount,mpod.discount_amount,mpod.created, mpod.discount_type, mpod.discount_value from medical_product_orders as mpo join medical_product_order_details as mpod on mpo.id = mpod.medical_product_order_id join medical_products as mp on mp.id=mpod.medical_product_id where mpo.hospital_ipd_id =$ipd_id and mpo.status='ACTIVE' and mpo.is_expense = 'Y' and mpo.is_amount_received_ipd_exp = 'Y' and mpo.total_amount > 0  order by mpo.created desc";
                    $listExp = $connection->query($depositExp);
                    $depositExpData = array();
                    if ($listExp->num_rows) {
                        $depositExpData = mysqli_fetch_all($listExp, MYSQLI_ASSOC);
                        $depositData = $deposit;
                        $data1 = array_merge($depositData, $depositExpData);
                        usort($data1, function ($a, $b) {
                            $a1 = new DateTime($a['created']);
                            $b1 = new DateTime($b['created']);
                            if ($a1 > $b1) {
                                return 1;
                            }
                            else
                            {
                                return -1;
                            }
                        });
                        $deposit = $data1;

                    }

                    //pr($deposit); die;

                }
            }

            $ipd_id = base64_encode($ipd_id);
            $this->set(compact('expense', 'patient', 'deposit', 'receipt_for', 'ipd_id'));
            $this->render('ipd_load_all_receipt', 'ajax');

        } else {
            exit();
        }

    }

	public function get_billing_stats()
    {

        $this->layout = "app_admin_home";
        $login = $this->Session->read('Auth.User.User');
        $login_data = $this->Session->read('Auth.User');
        $thinappID = $login['thinapp_id'];
        $today = date("Y-m-d");
        $searchData = $this->request->query;
        $report_type = 'date';
        if (isset($searchData['rt'])) {
            $report_type = $searchData['rt'];
        }

        $condition = "";

        if ($report_type == 'date') {

            if($login_data['USER_ROLE'] == 'RECEPTIONIST'){
                $app_data = Custom::get_doctor_by_id($login_data['AppointmentStaff']['id']);
                if($app_data['allow_date_wise_report']=='NO'){
                    $this->redirect(array('controller' => 'app_admin', 'action' => 'dashboard', 'admin' => false));
                }
            }

            $condition .= "  MedicalProductOrder.thinapp_id = $thinappID and MedicalProductOrder.payment_status='PAID' and MedicalProductOrder.status='ACTIVE'";
            if ($login_data['USER_ROLE'] == "LAB" || $login_data['USER_ROLE'] == "PHARMACY") {
                $condition .= " AND MedicalProductOrder.lab_pharmacy_user_id = " . $login_data['LabPharmacyUser']['id'];
            } else if ($login_data['USER_ROLE'] == "DOCTOR" || $login_data['USER_ROLE'] == "RECEPTIONIST") {
                $condition .= " AND MedicalProductOrder.created_by_user_id = " . $login_data['User']['id'];
            }

            if (isset($searchData['f']) || isset($searchData['t'])) {
                if (!empty($searchData['f'])) {
                    $this->request->data['Search']['from_date'] = $searchData['f'];
                    $date = $from_date= DateTime::createFromFormat('d/m/Y', $searchData['f'])->format('Y-m-d');
                    $condition .= " and DATE(MedicalProductOrder.created) >='$date' ";
                }
                if (!empty($searchData['t'])) {
                    $this->request->data['Search']['to_date'] = $searchData['t'];
                    $date = $to_date = DateTime::createFromFormat('d/m/Y', $searchData['t'])->format('Y-m-d');
                    $condition .= " and DATE(MedicalProductOrder.created) <='$date' ";
                }
            } else {
                $conditionOrder['DATE(MedicalProductOrder.created)'] = $today;
                $this->request->data['Search']['to_date'] = date("d/m/Y");
                $this->request->data['Search']['from_date'] = date("d/m/Y");
                $today = $from_date = $to_date = date('Y-m-d');
                $condition .= " and DATE(MedicalProductOrder.created) between '$today' and '$today' ";
            }


            $group_by = "DATE_FORMAT(MedicalProductOrder.created,'%d-%m-%Y')";
            $select = "DATE_FORMAT(MedicalProductOrder.created,'%d-%m-%Y')";
            if (isset($searchData['ty']) || !empty($searchData['ty'])) {
                $this->request->data['Search']['type'] = $type = $searchData['ty'];
                if ($type == "YEAR") {
                    $group_by = "DATE_FORMAT(MedicalProductOrder.created,'%Y')";
                    $select = "DATE_FORMAT(MedicalProductOrder.created,'%Y')";

                } else if ($type == "MONTH") {
                    $group_by = "CONCAT(DATE_FORMAT(MedicalProductOrder.created,'%Y'),'-',DATE_FORMAT(MedicalProductOrder.created,'%m'))";
                    $select = "CONCAT(DATE_FORMAT(MedicalProductOrder.created,'%Y'),'-',DATE_FORMAT(MedicalProductOrder.created,'%m'))";
                }
            }

            if (isset($searchData['s']) || !empty($searchData['s'])) {
                $this->request->data['Search']['service']  = $searchData['s'];
                $condition .= " and  MedicalProductOrderDetail.medical_product_id = ". $searchData['s'];
            }

            if (isset($searchData['d']) || !empty($searchData['d'])) {
                $this->request->data['Search']['doctor']  = $searchData['d'];
                $condition .= " and  MedicalProductOrderDetail.appointment_staff_id = ". $searchData['d'];
            }

            if (isset($searchData['m']) || !empty($searchData['m'])) {
                $this->request->data['Search']['module'] = $category = $searchData['m'];
                if ($category == "OPD") {
                    $condition .= " and  MedicalProductOrder.is_opd = 'Y'";
                } else if ($category == "IPD") {
                    $condition .= " and  ( MedicalProductOrder.is_advance = 'Y' OR MedicalProductOrder.is_settlement = 'Y' OR MedicalProductOrder.is_expense = 'Y' )";
                } else if ($category == "LAB") {
                    $condition .= " AND  MedicalProductOrder.lab_pharmacy_type = 'LAB' AND MedicalProductOrder.lab_pharmacy_user_id > 0 ";
                } else if ($category == "PHARMACY") {
                    $condition .= " AND  MedicalProductOrder.lab_pharmacy_type = 'PHARMACY' AND MedicalProductOrder.lab_pharmacy_user_id > 0 ";
                } else if ($category == "OTHER") {
                    $condition .= " and  MedicalProductOrder.is_opd = 'N' AND MedicalProductOrder.is_advance = 'N' AND  MedicalProductOrder.is_settlement = 'N' AND MedicalProductOrder.is_expense = 'N' ";
                }
            }

            if (isset($searchData['c']) || !empty($searchData['c'])) {
                $this->request->data['Search']['category']  = $searchData['c'];
                $condition .= " and  HospitalServiceCategory.id = ". $searchData['c'];
            }



            $date_range = Custom::createDateRange($from_date,$to_date,'Y-m-d');
            $list =$payment_type_name= array();
            $all_condition = $condition;
            $connection = ConnectionUtil::getConnection();
            foreach($date_range as $key =>$date_selected){
                $condition = $all_condition." and MedicalProductOrder.payment_adjust_by_settlement = 'N' and  DATE(MedicalProductOrder.created) = '".$date_selected."'";

                $query = "select sum(final.amount) as amount ,final.payment_type_name from ( ";
                $refund_query = "(SELECT IFNULL(SUM(MedicalProductOrder1.refund_amount),0) from medical_product_orders as MedicalProductOrder1 where MedicalProductOrder1.thinapp_id = $thinappID and MedicalProductOrder1.payment_status='PAID' and MedicalProductOrder1.is_refunded='YES' and MedicalProductOrder1.status='ACTIVE' and DATE(MedicalProductOrder1.created) between '$from_date' and '$to_date' and DATE(MedicalProductOrder1.created) = '$date_selected' and MedicalProductOrder1.hospital_payment_type_id = result.hospital_payment_type_id)";
                $query .= "SELECT (sum(result.amount)) amount ,result.payment_type_name FROM (SELECT MedicalProductOrder.hospital_payment_type_id, SUM(MedicalProductOrder.total_amount) as amount, MedicalProductOrder.payment_type_name from medical_product_orders as MedicalProductOrder LEFT JOIN hospital_payment_types AS HospitalPaymentType ON MedicalProductOrder.hospital_payment_type_id = HospitalPaymentType.id left join medical_product_order_details as MedicalProductOrderDetail on MedicalProductOrderDetail.medical_product_order_id = MedicalProductOrder.id and MedicalProductOrderDetail.id = (select max(mpod.id) from medical_product_order_details as mpod where mpod.medical_product_order_id = MedicalProductOrder.id ) left join medical_products as MedicalProduct on MedicalProduct.id= MedicalProductOrderDetail.medical_product_id left join hospital_service_categories as HospitalServiceCategory on HospitalServiceCategory.id = MedicalProduct.hospital_service_category_id left join appointment_customers as AppointmentCustomer on AppointmentCustomer.id = MedicalProductOrder.appointment_customer_id left join childrens as Children on Children.id=MedicalProductOrder.children_id left join users as User on User.id = MedicalProductOrder.created_by_user_id left join appointment_staffs as AppointmentStaff on AppointmentStaff.user_id = MedicalProductOrder.created_by_user_id and AppointmentStaff.thinapp_id = MedicalProductOrder.thinapp_id and AppointmentStaff.status='ACTIVE' left join lab_pharmacy_users as LabPharmacyUser on LabPharmacyUser.id =MedicalProductOrder.lab_pharmacy_user_id left join hospital_ipd_settlements as HospitalIpdSettlement on HospitalIpdSettlement.id = MedicalProductOrder.hospital_ipd_settlement_id left join hospital_deposit_amounts as HospitalDepositAmount on HospitalDepositAmount.id = MedicalProductOrder.hospital_deposit_amount_id where $condition  group by MedicalProductOrder.id, MedicalProductOrder.hospital_payment_type_id) AS result group by result.payment_type_name";
                $query .= " UNION ALL ";
                $refund_query_archive = "(SELECT IFNULL(SUM(MedicalProductOrder1.refund_amount),0) from medical_product_orders_archive as MedicalProductOrder1 where MedicalProductOrder1.thinapp_id = $thinappID and MedicalProductOrder1.payment_status='PAID' and MedicalProductOrder1.is_refunded='YES' and MedicalProductOrder1.status='ACTIVE' and DATE(MedicalProductOrder1.created) between '$from_date' and '$to_date' and DATE(MedicalProductOrder1.created) = '$date_selected' and MedicalProductOrder1.hospital_payment_type_id = result.hospital_payment_type_id)";
                $query .= "SELECT (sum(result.amount)) amount ,result.payment_type_name FROM (SELECT MedicalProductOrder.hospital_payment_type_id, SUM(MedicalProductOrder.total_amount) as amount, MedicalProductOrder.payment_type_name from medical_product_orders_archive as MedicalProductOrder LEFT JOIN hospital_payment_types AS HospitalPaymentType ON MedicalProductOrder.hospital_payment_type_id = HospitalPaymentType.id left join medical_product_order_details_archive as MedicalProductOrderDetail on MedicalProductOrderDetail.medical_product_order_id = MedicalProductOrder.id and MedicalProductOrderDetail.id = (select max(mpod.id) from medical_product_order_details_archive as mpod where mpod.medical_product_order_id = MedicalProductOrder.id ) left join medical_products as MedicalProduct on MedicalProduct.id= MedicalProductOrderDetail.medical_product_id left join hospital_service_categories as HospitalServiceCategory on HospitalServiceCategory.id = MedicalProduct.hospital_service_category_id left join appointment_customers as AppointmentCustomer on AppointmentCustomer.id = MedicalProductOrder.appointment_customer_id left join childrens as Children on Children.id=MedicalProductOrder.children_id left join users as User on User.id = MedicalProductOrder.created_by_user_id left join appointment_staffs as AppointmentStaff on AppointmentStaff.user_id = MedicalProductOrder.created_by_user_id and AppointmentStaff.thinapp_id = MedicalProductOrder.thinapp_id and AppointmentStaff.status='ACTIVE' left join lab_pharmacy_users as LabPharmacyUser on LabPharmacyUser.id =MedicalProductOrder.lab_pharmacy_user_id left join hospital_ipd_settlements as HospitalIpdSettlement on HospitalIpdSettlement.id = MedicalProductOrder.hospital_ipd_settlement_id left join hospital_deposit_amounts as HospitalDepositAmount on HospitalDepositAmount.id = MedicalProductOrder.hospital_deposit_amount_id where $condition  group by MedicalProductOrder.id, MedicalProductOrder.hospital_payment_type_id) AS result group by result.payment_type_name";
                $query .= " ) AS final group by final.payment_type_name ";
			

            	if($thinappID==494){
                	
                }
            
                $service_message_list = $connection->query($query);
                $list[$key]['title'] =$date_selected ;
                $list[$key]['total'] =0;
                $list[$key]['sub_amount'] =array(); ;
                if ($service_message_list->num_rows) {
                    $all_payments= mysqli_fetch_all($service_message_list, MYSQLI_ASSOC);
                    $total_amount = 0;
                    foreach ($all_payments as $type => $value){
                        $list[$key]['sub_amount'][$value['payment_type_name']]= $value;
                        $total_amount += $value['amount'];
                    }
                    $list[$key]['total'] =$total_amount ;
                    $payment_type_name = array_values(array_unique(array_merge($payment_type_name,array_column($all_payments,'payment_type_name'))));
                }
            }
            $this->set(compact('list','payment_type_name'));

        } else if ($report_type == 'address') {

            if($login_data['USER_ROLE'] == 'RECEPTIONIST'){
                $app_data = Custom::get_doctor_by_id($login_data['AppointmentStaff']['id']);
                if($app_data['allow_product_wise_report']=='NO'){
                    $this->redirect(array('controller' => 'app_admin', 'action' => 'dashboard', 'admin' => false));
                }
            }



            $condition .= " mpod.thinapp_id = $thinappID and mpo.payment_status='PAID' and mpo.status='ACTIVE'";
            if ($login_data['USER_ROLE'] == "LAB" || $login_data['USER_ROLE'] == "PHARMACY") {
                $condition .= "AND mpo.lab_pharmacy_user_id = " . $login_data['LabPharmacyUser']['id'];
            } else if ($login_data['USER_ROLE'] == "DOCTOR" || $login_data['USER_ROLE'] == "RECEPTIONIST") {
                $condition .= " AND mpo.created_by_user_id = " . $login_data['User']['id'];
            }

            if (isset($searchData['f']) || isset($searchData['t'])) {
                if (!empty($searchData['f'])) {
                    $this->request->data['Search']['from_date'] = $searchData['f'];
                    $date = DateTime::createFromFormat('d/m/Y', $searchData['f'])->format('Y-m-d');
                    $condition .= " and DATE(mpod.created) >='$date' ";
                }
                if (!empty($searchData['t'])) {
                    $this->request->data['Search']['to_date'] = $searchData['t'];
                    $date = DateTime::createFromFormat('d/m/Y', $searchData['t'])->format('Y-m-d');
                    $condition .= " and DATE(mpod.created) <='$date' ";
                }
            } else {
                $conditionOrder['DATE(MedicalProductOrder.created)'] = $today;
                $this->request->data['Search']['to_date'] = date("d/m/Y");
                $this->request->data['Search']['from_date'] = date("d/m/Y");
                $today = date('Y-m-d');
                $condition .= " and DATE(mpod.created) between '$today' and '$today' ";
            }

            if (isset($searchData['a']) || !empty($searchData['a'])) {
                $this->request->data['Search']['address'] = $searchData['a'];
                $condition .= " and mpo.appointment_address_id = " . $searchData['a'];
            }

            if (isset($searchData['d']) || !empty($searchData['d'])) {
                $this->request->data['Search']['doctor'] = $searchData['d'];
                $condition .= " and mpo.appointment_staff_id = " . $searchData['d'];
            }
            if (isset($searchData['p']) || !empty($searchData['p'])) {
                $this->request->data['Search']['product'] = $searchData['p'];
                $condition .= " and mpod.medical_product_id = " . $searchData['p'];
            }

            if (isset($searchData['b']) || !empty($searchData['b'])) {
                $this->request->data['Search']['biller'] = $searchData['b'];
                $tmp = explode("#", $searchData['b']);
                if ($tmp[1] == "LAB" || $tmp[1] == "PHARMACY") {
                    $condition .= " and mpo.lab_pharmacy_user_id = " . $tmp[0];
                } else {
                    $condition .= " and mpo.created_by_user_id = " . $tmp[0];
                }
            }

            $query = "select sum(final.total) as total , final.product_name, final.address from ( ";
            $query .= "select mp.id, aa.id as address_id, sum(mpod.total_amount) as total , mp.name as product_name, aa.address from medical_product_order_details as mpod join medical_products as mp on mp.id = mpod.medical_product_id join medical_product_orders as mpo on mpo.id = mpod.medical_product_order_id left join hospital_ipd as hi on hi.id = mpo.hospital_ipd_id left join appointment_customer_staff_services as acss on acss.id = mpo.appointment_customer_staff_service_id  left join appointment_addresses as aa on ( aa.id= mpo.appointment_address_id ) OR ( acss.appointment_address_id = aa.id ) OR (aa.id = hi.appointment_address_id) where  $condition  group by CONCAT(mp.id,IFNULL(aa.id,''))  ";
            $query .= " UNION ALL ";
            $query .= "select mp.id, aa.id as address_id, sum(mpod.total_amount) as total , mp.name as product_name, aa.address from medical_product_order_details_archive as mpod join medical_products as mp on mp.id = mpod.medical_product_id join medical_product_orders_archive as mpo on mpo.id = mpod.medical_product_order_id left join hospital_ipd as hi on hi.id = mpo.hospital_ipd_id left join appointment_customer_staff_services_archive as acss on acss.id = mpo.appointment_customer_staff_service_id  left join appointment_addresses as aa on ( aa.id= mpo.appointment_address_id ) OR ( acss.appointment_address_id = aa.id ) OR (aa.id = hi.appointment_address_id) where  $condition  group by CONCAT(mp.id,IFNULL(aa.id,''))  ";
            $query .= " ) AS final group by CONCAT(final.id,IFNULL(final.address_id,'')) order by final.address asc, final.product_name asc";

        
            $connection = ConnectionUtil::getConnection();
            $service_message_list = $connection->query($query);
            $tmp = $list = array();
            if ($service_message_list->num_rows) {
                $tmp = mysqli_fetch_all($service_message_list, MYSQLI_ASSOC);
                foreach ($tmp as $key => $value) {
                    $address = $value['address'];
                    unset($value['address']);
                    $list[$address][] = $value;
                }
            }

            $this->set(compact('list'));
        } else if ($report_type == 'refer') {

            $condition .= " acss.thinapp_id =$thinappID and acss.delete_status !='DELETED' and (acss.referred_by !='' OR acss.referred_by_mobile!='' )  ";


            if (isset($searchData['f']) || isset($searchData['t'])) {
                if (!empty($searchData['f'])) {
                    $this->request->data['Search']['from_date'] = $searchData['f'];
                    $date = DateTime::createFromFormat('d/m/Y', $searchData['f'])->format('Y-m-d');
                    $condition .= " and DATE(acss.created) >='$date' ";
                }
                if (!empty($searchData['t'])) {
                    $this->request->data['Search']['to_date'] = $searchData['t'];
                    $date = DateTime::createFromFormat('d/m/Y', $searchData['t'])->format('Y-m-d');
                    $condition .= " and DATE(acss.created) <='$date' ";
                }
            } else {
                $conditionOrder['DATE(MedicalProductOrder.created)'] = $today;
                $this->request->data['Search']['to_date'] = date("d/m/Y");
                $this->request->data['Search']['from_date'] = date("d/m/Y");
                $today = date('Y-m-d');
                $condition .= " and DATE(acss.created) between '$today' and '$today' ";
            }

            if (isset($searchData['a']) || !empty($searchData['a'])) {
                $this->request->data['Search']['address'] = $searchData['a'];
                $condition .= " and acss.appointment_address_id = " . $searchData['a'];
            }


            if (isset($searchData['n']) || !empty($searchData['n'])) {
                $this->request->data['Search']['name'] = $name = $searchData['n'];
                $condition .= " and ( ac.first_name like '%$name%' OR c.child_name like '%$name%') ";
            }
            if (isset($searchData['u']) || !empty($searchData['u'])) {
                $this->request->data['Search']['uhid'] = $uhid = $searchData['u'];
                $condition .= " and ( ac.uhid like '%$uhid%' OR c.uhid like '%$uhid%') ";
            }
            if (isset($searchData['r']) || !empty($searchData['r'])) {
                $this->request->data['Search']['refer'] = $uhid = $searchData['r'];
                $condition .= " and acss.referred_by like '%$uhid%' ";
            }

              $query = "select final.created, final.patient_mobile, final.patient_name, final.uhid, final.referred_by_mobile, final.referred_by from ( ";
            $query .= "select acss.created, IFNULL(ac.mobile, c.mobile) as patient_mobile, IFNULL(ac.first_name, c.child_name) as patient_name, IFNULL(ac.uhid,c.uhid) as uhid, acss.referred_by_mobile, acss.referred_by from appointment_customer_staff_services as acss left join appointment_customers as ac on ac.id = acss.appointment_customer_id left join childrens as c on c.id= acss.children_id where $condition order by acss.created desc";
            $query .= "UNION ALL";
            $query .= "select acss.created, IFNULL(ac.mobile, c.mobile) as patient_mobile, IFNULL(ac.first_name, c.child_name) as patient_name, IFNULL(ac.uhid,c.uhid) as uhid, acss.referred_by_mobile, acss.referred_by from appointment_customer_staff_services_archive as acss left join appointment_customers as ac on ac.id = acss.appointment_customer_id left join childrens as c on c.id= acss.children_id where $condition order by acss.created desc";
            $query .= " ) AS final order by final.created desc";
            $connection = ConnectionUtil::getConnection();
            $service_message_list = $connection->query($query);
            $list = array();
            if ($service_message_list->num_rows) {
                $list = mysqli_fetch_all($service_message_list, MYSQLI_ASSOC);
            }
            $this->set(compact('list'));


        }else if ($report_type == 'due_amount') {

            $condition .= " pda.thinapp_id =$thinappID AND pda.status='ACTIVE' and pda.settlement_by_order_id = 0 ";


            if (isset($searchData['f']) || isset($searchData['t'])) {
                if (!empty($searchData['f'])) {
                    $this->request->data['Search']['from_date'] = $searchData['f'];
                    $date = DateTime::createFromFormat('d/m/Y', $searchData['f'])->format('Y-m-d');
                    $condition .= " and DATE(pda.created) >='$date' ";
                }
                if (!empty($searchData['t'])) {
                    $this->request->data['Search']['to_date'] = $searchData['t'];
                    $date = DateTime::createFromFormat('d/m/Y', $searchData['t'])->format('Y-m-d');
                    $condition .= " and DATE(pda.created) <='$date' ";
                }
            } else {

                $this->request->data['Search']['to_date'] = date("d/m/Y");
                $this->request->data['Search']['from_date'] = date("d/m/Y");
                $today = date('Y-m-d');
                $condition .= " and DATE(pda.created) between '$today' and '$today' ";
            }




            if (isset($searchData['n']) || !empty($searchData['n'])) {
                $this->request->data['Search']['name'] = $name = $searchData['n'];
                $condition .= " and ( ac.first_name like '%$name%' OR c.child_name like '%$name%') ";
            }

            if (isset($searchData['ps']) || !empty($searchData['ps'])) {
                $this->request->data['Search']['payment_status'] = $payment_status = $searchData['ps'];
                $condition .= " and pda.payment_status ='$payment_status' ";
            }

            if (isset($searchData['u']) || !empty($searchData['u'])) {
                $this->request->data['Search']['uhid'] = $uhid = $searchData['u'];
                $condition .= " and ( ac.uhid like '%$uhid%' OR c.uhid like '%$uhid%') ";
            }


           $query = "select final.order_id, final.id, final.created, final.patient_mobile, final.patient_name, final.uhid, final.amount, final.payment_status from ( ";
            $query = "select mpo.id as order_id, pda.id, pda.created, IFNULL(ac.mobile, c.mobile) as patient_mobile, IFNULL(ac.first_name, c.child_name) as patient_name, IFNULL(ac.uhid,c.uhid) as uhid, pda.amount, pda.payment_status from patient_due_amounts as pda left join appointment_customers as ac on ac.id = pda.appointment_customer_id left join childrens as c on c.id= pda.children_id left join medical_product_orders as mpo on mpo.id = pda.direct_billing_order_id where $condition order by pda.created desc";
            $query = " UNION ALL ";
            $query = "select mpo.id as order_id, pda.id, pda.created, IFNULL(ac.mobile, c.mobile) as patient_mobile, IFNULL(ac.first_name, c.child_name) as patient_name, IFNULL(ac.uhid,c.uhid) as uhid, pda.amount, pda.payment_status from patient_due_amounts as pda left join appointment_customers as ac on ac.id = pda.appointment_customer_id left join childrens as c on c.id= pda.children_id left join medical_product_orders_archive as mpo on mpo.id = pda.direct_billing_order_id where $condition order by pda.created desc";
            $query = " ) AS final order by final.created desc";
        
            $connection = ConnectionUtil::getConnection();
            $service_message_list = $connection->query($query);
            $list = array();
            if ($service_message_list->num_rows) {
                $list = mysqli_fetch_all($service_message_list, MYSQLI_ASSOC);
            }
            $this->set(compact('list'));
        }


        $login1 = $this->Session->read('Auth.User');
        $reportTitle = $login1['Thinapp']['name'].' ('.$this->request->data['Search']['to_date'].' - '.$this->request->data['Search']['from_date'].')';


        $this->set(compact('reportTitle','report_type'));
        $this->render('get_billing_stats');

    }

    public function print_invoice_non_opd_settlement($orderID)
    {
        $this->layout = false;

        $orderID = base64_decode($orderID);
        if ($orderID) {

            $orderDetails = $this->MedicalProductOrder->find('first', array(
                'conditions' => array('MedicalProductOrder.id' => $orderID),
                'contain' => array('AppointmentCustomer', 'Children', 'AppointmentStaff', 'Thinapp', 'HospitalIpdSettlement'),
                'fields' => array("(SELECT CONCAT(DATE_FORMAT(`MedicalProductOrder`.`created`,'%d%m%y'),COUNT(`id`)) FROM `medical_product_orders` AS `order` WHERE  DATE(`order`.`created`) = DATE(`MedicalProductOrder`.`created`) AND `order`.`id` <= `MedicalProductOrder`.`id` AND `order`.`thinapp_id` = `MedicalProductOrder`.`thinapp_id` AND `order`.`is_expense` = 'N') AS `unique_id`", 'HospitalIpdSettlement.settlement_amount', 'HospitalIpdSettlement.payment_status', 'HospitalIpd.ipd_unique_id', 'MedicalProductOrder.*', 'AppointmentCustomer.*', 'Children.*', 'AppointmentStaff.name', 'Thinapp.receipt_header_title', 'Thinapp.name', 'Thinapp.logo'),
                'joins' => array(
                    array('table' => 'hospital_ipd',
                        'alias' => 'HospitalIpd',
                        'type' => 'LEFT',
                        'conditions' => array('HospitalIpd.id = MedicalProductOrder.hospital_ipd_id')
                    ))

            ));

            $ipdUniqueId = @$orderDetails['HospitalIpd']['ipd_unique_id'];
            $createdBy = @$orderDetails['AppointmentStaff']['name'];

            if (isset($orderDetails['Children']['id']) && $orderDetails['Children']['id'] != 0) {
                $age = Custom::dob_elapsed_string($orderDetails['Children']['dob'], false, false);
                $UHID = $orderDetails['Children']['uhid'];
            } else {
                $dob = $orderDetails['AppointmentCustomer']['dob'];
                if (!empty($dob) && $dob != '1970-01-01' && $dob != '0000-00-00') {
                    $age = Custom::dob_elapsed_string($dob, false, false);
                } else {
                    $age = $orderDetails['AppointmentCustomer']['age'];
                }

                $UHID = $orderDetails['AppointmentCustomer']['uhid'];
            }


            $this->set(array('ipdUniqueId' => $ipdUniqueId, 'createdBy' => $createdBy, 'age' => $age, 'UHID' => $UHID, 'orderDetails' => $orderDetails));

        }
    }

    public function add_package_receipt()
    {
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User.User');
        $thinappID = $login['thinapp_id'];
        $loginLab = $this->Session->read('Auth.User');
        $roleLab = $loginLab['USER_ROLE'];
        $condition1 = array("MedicalProduct.thinapp_id" => $thinappID, "MedicalProduct.status" => "ACTIVE", "MedicalProduct.is_package" => 1);
        $condition2 = array('HospitalPaymentType.status' => 'ACTIVE', "HospitalPaymentType.thinapp_id" => $thinappID);
        $condition2['OR'] = array('HospitalPaymentType.lab_pharmacy_user_id' => 0, "(HospitalPaymentType.lab_pharmacy_type = 'LAB' AND HospitalPaymentType.lab_pharmacy_is_inhouse = 'YES')",);
        $medicalProductData = $this->MedicalProduct->find("all", array("conditions" => $condition1, 'recursive' => 2));
        $hospitalPaymentType = $this->HospitalPaymentType->find("list", array("conditions" => $condition2));
        $this->set(compact('medicalProductData', 'hospitalPaymentType'));
    }

    public function get_previous_package_list()
    {

        $this->layout = 'ajax';
        if ($this->request->is('ajax')) {

            $login = $this->Session->read('Auth.User.User');
            $thinappID = $login['thinapp_id'];
            $uhid = $this->request->data['uhid'];
            $appointmentAddressID = $this->request->data['appointmentAddressID'];
            $appointmentStaffID = $this->request->data['appointmentStaffID'];


            $appointmentCustomerID = $childrenID = 0;
            $auto_patient_type = base64_decode($this->request->data['auto_patient_type']);

            if (!empty($auto_patient_type)) {
                $tmp = explode('-', $auto_patient_type);
                if ($tmp[0] == "CUSTOMER") {
                    $appointmentCustomerID = $tmp[1];
                } else if ($tmp[0] == "CHILDREN") {
                    $childrenID = $tmp[1];
                }
            }

            $dataToShow = $this->MedicalPackageDetail->find('all', array('conditions' => array('MedicalPackageDetail.appointment_customer_id' => $appointmentCustomerID, 'MedicalPackageDetail.children_id' => $childrenID, 'MedicalPackageDetail.appointment_staff_id' => $appointmentStaffID, 'MedicalPackageDetail.appointment_address_id' => $appointmentAddressID), 'contain' => array('AppointmentStaff')));

            $this->set(compact('dataToShow'));
            $this->render('get_previous_package_list', 'ajax');

        } else {
            exit();
        }

    }

    public function add_more_package()
    {
        $this->layout = 'ajax';
        if ($this->request->is('ajax')) {

            $login = $this->Session->read('Auth.User.User');
            $thinappID = $login['thinapp_id'];

            $dataToShow = $this->MedicalProduct->find('all', array('fields' => array('id', 'name', 'price', 'is_price_editable'), 'conditions' => array('MedicalProduct.thinapp_id' => $thinappID, 'MedicalProduct.status' => 'ACTIVE', 'MedicalProduct.is_package' => 'Y',), 'contain' => false));


            $tag = array();

            foreach ($dataToShow AS $key => $val) {
                $tag[] = array('id' => $val['MedicalProduct']['id'], 'name' => $val['MedicalProduct']['name'], 'price' => $val['MedicalProduct']['price'], 'is_price_editable' => $val['MedicalProduct']['is_price_editable']);
            }


            $this->set(compact('dataToShow', 'tag'));
            $this->render('add_more_package', 'ajax');

        } else {
            exit();
        }
    }

    public function add_patient_to_package()
    {
        $this->layout = false;
        $this->autoRender = false;
        if ($this->request->is(array('ajax'))) {

            $datasource = $this->MedicalPackageDetail->getDataSource();
            $login = $this->Session->read('Auth.User.User');
            $thinappID = $login['thinapp_id'];

            $labID = 0;
            $labPharmacyType = 'NONE';
            $labPharmacyIsInhouse = 'NONE';


            $data['lab_pharmacy_user_id'] = $labID;
            $data['lab_pharmacy_type'] = $labPharmacyType;
            $data['lab_pharmacy_is_inhouse'] = $labPharmacyIsInhouse;


            try {
                $datasource->begin();
                $data = $this->request->data;


                $patientUHID = $data['uhid_input'];

                $appointmentStaffID = isset($data['appointment_staff_id']) ? $data['appointment_staff_id'] : 0;
                $appointmentAddressID = isset($data['appointment_address_id']) ? $data['appointment_address_id'] : 0;


                $patientData = $this->AppointmentCustomer->find("first", array("conditions" => array("uhid" => $patientUHID, "thinapp_id" => $thinappID), "contain" => false));
                if (!isset($patientData['AppointmentCustomer']['id'])) {
                    $patientData = $this->Children->find("first", array("conditions" => array("uhid" => $patientUHID, "thinapp_id" => $thinappID), "contain" => false));
                }


                $totalAmountToSave = 0;
                $medicalProductID = $data['packageID'][0];


                $dataToSaveInPackageDetail = array();

                $dataToSaveInPackageDetail['thinapp_id'] = $thinappID;
                $dataToSaveInPackageDetail['appointment_customer_id'] = isset($patientData['AppointmentCustomer']) ? $patientData['AppointmentCustomer']['id'] : 0;
                $dataToSaveInPackageDetail['children_id'] = isset($patientData['Children']) ? $patientData['Children']['id'] : 0;
                Custom::UpdateChildPatientDetail($dataToSaveInPackageDetail['appointment_customer_id'], $dataToSaveInPackageDetail['children_id'], $data);
                $medicalProductData = $this->MedicalProduct->find('first', array('conditions' => array('MedicalProduct.id' => $medicalProductID), 'contain' => false));
                if ($medicalProductData['MedicalProduct']['is_price_editable'] == 1) {
                    $productPrice = $data['package_price'];
                } else {
                    $productPrice = $medicalProductData['MedicalProduct']['price'];
                }

                $discountValue = 0;
                $discountType = 'PERCENTAGE';
                $discountAmount = 0;

                if ($data['package_discount'] > 0) {
                    $discountValue = $data['package_discount'];
                    $discountType = $data['package_discount_type'];
                    if ($discountType == 'PERCENTAGE') {
                        $discountAmount = (($discountValue / 100) * $productPrice);
                    } else {
                        $discountAmount = $discountValue;
                    }
                }
                $totalAmount = $productPrice - $discountAmount;

                $dataToSaveInPackageDetail['medical_product_id'] = $medicalProductData['MedicalProduct']['id'];
                $dataToSaveInPackageDetail['appointment_staff_id'] = $data['appointment_staff_id'];
                $dataToSaveInPackageDetail['appointment_address_id'] = $data['appointment_address_id'];
                $dataToSaveInPackageDetail['service'] = $medicalProductData['MedicalProduct']['name'];
                $dataToSaveInPackageDetail['product_price'] = $productPrice;
                $dataToSaveInPackageDetail['quantity'] = 1;
                $dataToSaveInPackageDetail['discount_type'] = $discountType;
                $dataToSaveInPackageDetail['discount_value'] = $discountValue;
                $dataToSaveInPackageDetail['discount_amount'] = $discountAmount;
                $dataToSaveInPackageDetail['total_amount'] = $totalAmount;
                $dataToSaveInPackageDetail['total_received_amount'] = 0;
                $dataToSaveInPackageDetail['total_outstanding_amount'] = $totalAmount;
                $dataToSaveInPackageDetail['created_by_user_id'] = $login['id'];

                if ($this->MedicalPackageDetail->save($dataToSaveInPackageDetail)) {
                    $datasource->commit();
                    $dataToSend['status'] = 1;
                    $dataToSend['message'] = "Added successfully!";
                } else {
                    $dataToSend['status'] = 0;
                    $dataToSend['message'] = "Something went wrong!";
                }


            } catch (Exception $e) {
                $datasource->rollback();
                $dataToSend['status'] = 0;
                $dataToSend['message'] = "Something went wrong!";
            }
            echo json_encode($dataToSend);
        }
    }

    public function close_package()
    {
        $this->layout = false;
        if ($this->request->is('ajax')) {

            $login = $this->Session->read('Auth.User.User');
            $thinappID = $login['thinapp_id'];
            $packageID = $this->request->data['packageID'];
            $dataToSave = array('id' => $packageID, 'is_open' => 'N', 'modified_by_user_id' => $login['id']);
            if ($this->MedicalPackageDetail->save($dataToSave)) {
                $dataToSend['status'] = 1;
                $dataToSend['message'] = "Updated successfully!";
            } else {
                $dataToSend['status'] = 0;
                $dataToSend['message'] = "Something went wrong!";
            }
            echo json_encode($dataToSend);
            die;
        }
    }

    public function get_add_package_receipt()
    {
        $this->layout = 'ajax';
        if ($this->request->is('ajax')) {

            $login = $this->Session->read('Auth.User.User');
            $thinappID = $login['thinapp_id'];
            $packageID = $this->request->data['packageID'];

            $packageData = $this->MedicalPackageDetail->find('first', array('conditions' => array('MedicalPackageDetail.id' => $packageID), 'contain' => array('MedicalProduct' => array('HospitalTaxRate'))));
            $this->set(compact('packageData'));
            $this->render('get_add_package_receipt', 'ajax');
        }
    }

    public function add_package_receipt_ajax()
    {

        $this->layout = false;
        $this->autoRender = false;
        if ($this->request->is(array('ajax'))) {

            $datasource = $this->MedicalProductOrder->getDataSource();
            $login = $this->Session->read('Auth.User.User');
            $thinappID = $login['thinapp_id'];

            $labID = 0;
            $labPharmacyType = 'NONE';
            $labPharmacyIsInhouse = 'NONE';
            $loginLab = $this->Session->read('Auth.User');
            $roleLab = $loginLab['USER_ROLE'];
            if ($roleLab == "LAB" || $roleLab == 'PHARMACY') {
                $labID = $loginLab['LabPharmacyUser']['id'];
                $labPharmacyType = $roleLab;
                $labPharmacyIsInhouse = $loginLab['LabPharmacyUser']['is_inhouse'];
            }

            $data['lab_pharmacy_user_id'] = $labID;
            $data['lab_pharmacy_type'] = $labPharmacyType;
            $data['lab_pharmacy_is_inhouse'] = $labPharmacyIsInhouse;


            try {
                $datasource->begin();
                $data = $this->request->data;


                $patientUHID = $data['uhid_input'];

                $appointmentStaffID = isset($data['appointment_staff_id']) ? $data['appointment_staff_id'] : 0;
                $appointmentAddressID = isset($data['appointment_address_id']) ? $data['appointment_address_id'] : 0;


                $auto_patient_type = base64_decode($data['auto_patient_type']);
                $patientData = array();
                if (!empty($auto_patient_type)) {
                    $tmp = explode('-', $auto_patient_type);
                    if ($tmp[0] == "CUSTOMER") {
                        $patient_id = $tmp[1];
                        $patientData = $this->AppointmentCustomer->find("first", array("conditions" => array("id" => $patient_id), "contain" => false));
                    } else if ($tmp[0] == "CHILDREN") {
                        $patient_id = $tmp[1];
                        $patientData = $this->Children->find("first", array("conditions" => array("id" => $patient_id), "contain" => false));
                    }
                }

                $dataTOSaveOrderDetail = array();
                $totalAmountToSave = 0;


                $dataToSaveInOrder = array();

                $dataToSaveInOrder['thinapp_id'] = $thinappID;
                $dataToSaveInOrder['appointment_customer_id'] = isset($patientData['AppointmentCustomer']) ? $patientData['AppointmentCustomer']['id'] : 0;
                $dataToSaveInOrder['children_id'] = isset($patientData['Children']) ? $patientData['Children']['id'] : 0;
                $dataToSaveInOrder['is_opd'] = "N";

                Custom::UpdateChildPatientDetail($dataToSaveInOrder['appointment_customer_id'], $dataToSaveInOrder['children_id'], $data);

                $payment_type_id = $data['hospital_payment_type_id'];
                $payment_type_id = empty($payment_type_id) ? 0 : $payment_type_id;
                $payment_description = $data['payment_description'];
                $payment_type_name = $data['payment_type_name'];
                $dataToSaveInOrder['hospital_payment_type_id'] = $payment_type_id;
                $dataToSaveInOrder['payment_type_name'] = $payment_type_name;
                $dataToSaveInOrder['payment_description'] = $payment_description;

                $dataToSaveInOrder['appointment_staff_id'] = $appointmentStaffID;
                $dataToSaveInOrder['appointment_address_id'] = $appointmentAddressID;
                $dataToSaveInOrder['created_by_user_id'] = $login['id'];

                if (isset($data['receipt_date'])) {
                    $date = DateTime::createFromFormat('d/m/Y', $data['receipt_date']);
                    $date1 = $date->format('Y-m-d');
                    $dataToSaveInOrder['created'] = $date1 . ' ' . date('H:i:s');
                }


                $dataToSaveInOrder['lab_pharmacy_user_id'] = $labID;
                $dataToSaveInOrder['lab_pharmacy_type'] = $labPharmacyType;
                $dataToSaveInOrder['lab_pharmacy_is_inhouse'] = $labPharmacyIsInhouse;

                $dataToSaveInOrder['medical_package_detail_id'] = $data['packageDetailID'];
                $dataToSaveInOrder['is_package'] = 'Y';

                $reffered_by_name = isset($data['reffered_by_name']) ? $data['reffered_by_name'] : "";
                $reffered_by_mobile = isset($data['reffered_by_mobile']) ? $data['reffered_by_mobile'] : "";

                $dataToSaveInOrder['reffered_by_name'] = $reffered_by_name;
                $dataToSaveInOrder['reffered_by_mobile'] = Custom::create_mobile_number($reffered_by_mobile);


                if ($this->MedicalProductOrder->save($dataToSaveInOrder)) {
                    $orderID = $this->MedicalProductOrder->getInsertID();
                    $medicalPackageDetails = $this->MedicalPackageDetail->find('first', array('conditions' => array('MedicalPackageDetail.id' => $data['packageDetailID']), 'contain' => array('MedicalProduct' => array('HospitalTaxRate'))));
                    $dataToSaveInOrderDetail = array();
                    $dataToSaveInOrderDetail['medical_product_order_id'] = $orderID;
                    $dataToSaveInOrderDetail['medical_product_id'] = $medicalPackageDetails['MedicalPackageDetail']['medical_product_id'];
                    $dataToSaveInOrderDetail['service'] = $medicalPackageDetails['MedicalPackageDetail']['service'];
                    $dataToSaveInOrderDetail['appointment_staff_id'] = $appointmentStaffID;
                    $dataToSaveInOrderDetail['appointment_customer_id'] = $dataToSaveInOrder['appointment_customer_id'];
                    $dataToSaveInOrderDetail['children_id'] = $dataToSaveInOrder['children_id'];
                    $dataToSaveInOrderDetail['thinapp_id'] = $thinappID;
                    $dataToSaveInOrderDetail['product_price'] = $medicalPackageDetails['MedicalPackageDetail']['total_amount'];
                    $dataToSaveInOrderDetail['quantity'] = 1;
                    $dataToSaveInOrderDetail['discount_type'] = 'PERCENTAGE';

                    $amt = $data['amount'];
                    $taxAmt = 0;
                    $taxValue = isset($medicalPackageDetails['MedicalProduct']['HospitalTaxRate']['rate']) ? $medicalPackageDetails['MedicalProduct']['HospitalTaxRate']['rate'] : 0;
                    if ($taxValue > 0) {
                        $taxAmt = (($taxValue / 100) * $amt);
                    }
                    $totalAmt = $taxAmt + $amt;

                    $dataToSaveInOrderDetail['amount'] = $amt;
                    $dataToSaveInOrderDetail['tax_type'] = isset($medicalPackageDetails['MedicalProduct']['HospitalTaxRate']['name']) ? $medicalPackageDetails['MedicalProduct']['HospitalTaxRate']['name'] : 'No Tax';
                    $dataToSaveInOrderDetail['tax_value'] = $taxValue;
                    $dataToSaveInOrderDetail['tax_amount'] = $taxAmt;

                    $dataToSaveInOrderDetail['discount_value'] = 0;
                    $dataToSaveInOrderDetail['discount_amount'] = 0;
                    $dataToSaveInOrderDetail['total_amount'] = $totalAmt;


                    $dataToSaveInMedicalPackageDetail = array();

                    $orderUpdate['MedicalProductOrder']['total_received_amount'] = $dataToSaveInMedicalPackageDetail['total_received_amount'] = $medicalPackageDetails['MedicalPackageDetail']['total_received_amount'] + $amt;
                    $orderUpdate['MedicalProductOrder']['total_outstanding_amount'] = $dataToSaveInMedicalPackageDetail['total_outstanding_amount'] = $medicalPackageDetails['MedicalPackageDetail']['total_outstanding_amount'] - $amt;
                    $dataToSaveInMedicalPackageDetail['id'] = $medicalPackageDetails['MedicalPackageDetail']['id'];


                    $orderUpdate['MedicalProductOrder']['id'] = $orderID;
                    $orderUpdate['MedicalProductOrder']['total_amount'] = $totalAmt;

                    if ($this->MedicalProductOrder->save($orderUpdate) && $this->MedicalProductOrderDetail->saveAll($dataToSaveInOrderDetail) && $this->MedicalPackageDetail->save($dataToSaveInMedicalPackageDetail)) {

                        $datasource->commit();
                        $dataToSend['receipt_id'] = $orderID;
                        $dataToSend['status'] = 1;
                        $dataToSend['message'] = "Successfully paid!";

                    } else {
                        $datasource->rollback();
                        $dataToSend['status'] = 0;
                        $dataToSend['message'] = "Something went wrong!";
                    }


                } else {
                    $datasource->rollback();
                    $dataToSend['status'] = 0;
                    $dataToSend['message'] = "Something went wrong!";
                }


            } catch (Exception $e) {
                $datasource->rollback();
                $dataToSend['status'] = 0;
                $dataToSend['message'] = "Something went wrong!";
            }
            echo json_encode($dataToSend);
        }
    }

    /*public function sethi_upload_patient(){
		$this->layout = false;
		$login = $this->Session->read('Auth.User.User');
		$thinappID = $login['thinapp_id'];
        $connection = ConnectionUtil::getConnection();
		if(isset($_FILES['csv_file']))
		{
		//$data_array = file($_FILES['csv_file']['tmp_name']);
		//print_r($data_array);
		$file = fopen($_FILES['csv_file']['tmp_name'],"r");
            $dataTOSave = array();
            $key = 0;
			while(($data_array = fgetcsv($file,50000))  !== FALSE)
			{
                $uhid = $data_array[0];
                if (strpos($uhid, '201810') !== false) {
                    $created = explode("/",$data_array[3]);
                    $created = date("Y-m-d H:i:s",strtotime($created[2].'-'.$created[0].'-'.$created[1]));
                    $firstName = $data_array[4];
                    $parentName = $data_array[5];
                    $gender = strtoupper($data_array[6]);
                    $age = explode(",",$data_array[7]);
                    $age = $age[0].'Year '.$age[1].'Month '.$age[2].'Day';
                    $chunk = array();
                    $chunk['uhid'] = $uhid;
                    $chunk['thinapp_id'] = $thinappID;
                    $chunk['customer_created_by'] = $login['id'];
                    $chunk['country_code'] = '+91';
                    $chunk['mobile'] = "+919999999999";
                    $chunk['first_name'] = $firstName;
                    $chunk['gender'] = (($gender == 'MALE') || ($gender == 'FEMALE'))?$gender:'MALE';
                    $chunk['user_id'] = 0;
                    $chunk['age'] = $age;
                    $chunk['relation_prefix'] = 'S/O';
                    $chunk['parents_name'] = $parentName;
                    $chunk['created'] = $created;
                    $dataTOSave[$key] = $chunk;
                    $key++;
                }
			}
            foreach($dataTOSave as $data)
            {
                $sql = "INSERT INTO `appointment_customers` (uhid,thinapp_id,customer_created_by,country_code,mobile,first_name,gender,user_id,age,relation_prefix,parents_name,created,modified) VALUES ('".$data['uhid']."','".$data['thinapp_id']."','".$data['customer_created_by']."','".$data['country_code']."','".$data['mobile']."','".$data['first_name']."','".$data['gender']."','".$data['user_id']."','".$data['age']."','".$data['relation_prefix']."','".$data['parents_name']."','".$data['created']."','".$data['created']."')";
                if($connection->query($sql))
                {
                    $patient_id = $connection->insert_id;
                    Custom::create_and_share_folder($thinappID, $data['mobile'], $data['first_name'],'CUSTOMER',$patient_id);
                }
            }
		}
	}*/

    public function send_sms()
    {

        $login = $this->Session->read('Auth.User.User');
        $thin_app_id = $login['thinapp_id'];
        $send_sms = false;
        if ($this->request->is('ajax') && !empty($this->request->data)) {
            $this->autoRender = false;
            $data = $this->request->data;
            $mobile_numbers = $response = array();
            $message = $data['message'];
            if (!empty($message)) {
                if (@!empty($_FILES['file']['tmp_name'])) {
                    $data_array = file($_FILES['file']['tmp_name']);
                    foreach ($data_array as $key => $value) {
                        $tmp = Custom::create_mobile_number(trim($value));
                        if ($tmp) $mobile_numbers[] = $tmp;
                    }
                }
                if (!empty($data['numbers'])) {
                    $number_list = explode(',', $data['numbers']);
                    foreach ($number_list as $key => $value) {
                        $tmp = Custom::create_mobile_number(trim($value));
                        if ($tmp) $mobile_numbers[] = $tmp;
                    }
                }
                if (@strtoupper($data['all_patient']) == 'YES') {
                    $query = "SELECT DISTINCT(final.mobile) FROM( (SELECT mobile FROM appointment_customers WHERE thinapp_id = $thin_app_id AND status= 1 ) UNION ALL (SELECT mobile FROM childrens WHERE thinapp_id = $thin_app_id AND status= 1) UNION ALL (SELECT mobile FROM users WHERE thinapp_id = $thin_app_id AND status= 1 AND role_id = 1)) AS final ";
                    $connection = ConnectionUtil::getConnection();
                    $service_message_list = $connection->query($query);
                    if ($service_message_list->num_rows) {
                        $tmp = array_column(mysqli_fetch_all($service_message_list, MYSQLI_ASSOC), 'mobile');
                        $mobile_numbers = array_merge($mobile_numbers, $tmp);
                    }
                }
                $mobile_numbers = array_unique($mobile_numbers);
                $total_mobile = count($mobile_numbers);
                if ($total_mobile > 0) {
                    $total_sms = Custom::get_total_sms_thinapp($thin_app_id, 'T');
                    $credit = Custom::smsStringWordCount($message, 'CREDIT');
                    $total_sms_con = $total_mobile * $credit;
                    if ( $total_sms < $total_sms_con ) {
                        $response['status'] = 0;
                        $response['message'] = "<b style='font-size:18px;'>$total_sms</b> SMS is not sufficient to send sms for total patient : <b style='font-size:18px;'>$total_mobile</b>\nPlease recharge SMS.";
                    } else {
                        $response['status'] = 1;
                        $response['message'] = "Sms sent successfully";
                        $send_sms = true;
                    }
                } else {
                    $response['status'] = 0;
                    $response['message'] = "Please enter mobile number";
                }
            } else {
                $response['status'] = 0;
                $response['message'] = "Please enter message";
            }

            Custom::sendResponse($response);
            Custom::send_process_to_background();
            if ($send_sms === true) {
                Custom::SendBulkSmsToNumbers($mobile_numbers, $message, $thin_app_id,false,false);
            }

        }
    }

    public function add_patient_before_receipt()
    {
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $login = $this->Session->read('Auth.User.User');
            $connection = ConnectionUtil::getConnection();

            $data = $this->request->data['AppointmentCustomer'];


            $dataToSave['app_key'] = APP_KEY;
            $dataToSave['thin_app_id'] = $login['thinapp_id'];
            $dataToSave['mobile'] = $data['mobile'];
            $dataToSave['patient_type'] = 'CUSTOMER';
            $dataToSave['patient_name'] = $data['first_name'];
            $dataToSave['patient_mobile'] = Custom::create_mobile_number($data['mobile']);
            $dataToSave['mobile'] = $dataToSave['patient_mobile'];
            $dataToSave['user_id'] = $login['id'];

            if ($data['dob'] != '') {
                $date = DateTime::createFromFormat('d/m/Y', $data['dob']);
                $dataToSave['dob'] = $date->format('Y-m-d');
            } else {
                $dataToSave['dob'] = '';
            }
            $dataToSave['gender'] = $data['gender'];
            $dataToSave['age'] = $data['age'];
            $dataToSave['patient_address'] = $data['address'];
            $dataToSave['email'] = $data['email'];
            $dataToSave['parents_name'] = $data['parents_name'];
            $dataToSave['relation_prefix'] = $data['relation_prefix'];
            $dataToSave['marital_status'] = $data['marital_status'];
            $dataToSave['blood_group'] = $data['blood_group'];
            $dataToSave['country_id'] = isset($data['country_id'][0])?$data['country_id'][0]:0;
            $dataToSave['state_id'] = isset($data['state_id'][0])?$data['state_id'][0]:0;

            if(isset($data['city_id'][0]) && is_numeric($data['city_id'][0]))
            {
                $cityData = $this->Cities->findById($data['city_id'][0],array("contain"=>false));
                $dataToSave['city_name'] = ucwords(strtolower(trim($cityData['Cities']['name'])));
                $dataToSave['city_id'] = $cityData['Cities']['id'];
            }
            else if(isset($data['city_id'][0]) && !empty($data['city_id'][0]))
            {
                $dataToSave['city_id'] = 0;
                $dataToSave['city_name'] = ucwords(strtolower(trim($data['city_id'][0])));
            }
            else
            {
                $dataToSave['city_id'] = 0;
                $dataToSave['city_name'] = "";
            }


            $dataToSave['blood_group'] = $data['blood_group'];
            $dataToSave['blood_group'] = $data['blood_group'];


            $result = WebservicesFunction::web_add_patient($dataToSave);

            if ($result['status'] == 1) {
                $patientID = $result['result']['customer_id'];
                $patientData = $this->AppointmentCustomer->find("first", array("conditions" => array("AppointmentCustomer.id" => $patientID), "contain" => false));
                $patientData = $patientData['AppointmentCustomer'];
                $dataToSend['status'] = 1;
                $dataToSend['data'] = $patientData;
            } else {
                $dataToSend['status'] = 0;
                $dataToSend['message'] = "Could not add appointment!";
            }

            echo json_encode($dataToSend, true);
        }
        exit();
    }

    public function search_lab_patient_inhouse()
    {
        $reqData = $this->request->query;
        $pram = array();
        if (!empty($reqData['search'])) {
            $pram['s'] = $reqData['search'];
        }
        if (!empty($reqData['from_date'])) {
            $pram['f'] = $reqData['from_date'];
        }
        if (!empty($reqData['to_date'])) {
            $pram['t'] = $reqData['to_date'];
        }
        if (!empty($reqData['status_new'])) {
            $pram['n'] = $reqData['status_new'];
        }
        if (!empty($reqData['checked-in'])) {
            $pram['ci'] = $reqData['checked-in'];
        }
        if (!empty($reqData['status_billing'])) {
            $pram['b'] = $reqData['status_billing'];
        }
        if (!empty($reqData['status_closed'])) {
            $pram['c'] = $reqData['status_closed'];
        }

        $this->redirect(
            array(
                "controller" => "app_admin",
                "action" => "lab_patient_inhouse",
                "?" => $pram,
            )
        );
    }

    public function lab_patient_inhouse()
    {

        $this->layout = "app_admin_home";
        $login = $this->Session->read('Auth.User');
        //pr($login); die;
        $thinappID = $login['User']['thinapp_id'];

        $thin_app_id = $thinappID;
        $app_key = APP_KEY;
        $user_id = $login['User']['id'];
        $role_id = $login['User']['role_id'];
        $mobile = $login['User']['mobile'];
        $lab_pharmacy_user_id = $login['LabPharmacyUser']['id'];
        $request_from = 'LAB';
        $role_type = $login['LabPharmacyUser']['role_type'];
        $search = '';
        $doctorID = 0;
        $status_new = "";
        $status_billing = "";
        $checkedIN = "";
        $status_closed = "";
        $from_date = "";
        $to_date = "";


        $searchData = $this->request->query;

        if (isset($searchData['s']) && !empty($searchData['s'])) {
            $this->request->data['Search']['search'] = $searchData['s'];
            $search = $searchData['s'];
        }

        if (isset($searchData['f']) && !empty($searchData['f'])) {
            $this->request->data['Search']['from_date'] = $searchData['f'];
            $from_date = DateTime::createFromFormat('d/m/Y', $searchData['f']);
            $from_date = $from_date->format('Y-m-d');
        }



        if (isset($searchData['t']) && !empty($searchData['t'])) {
            $this->request->data['Search']['to_date'] = $searchData['t'];
            $to_date = $searchData['t'];
            $to_date = DateTime::createFromFormat('d/m/Y', $searchData['t']);
            $to_date = $to_date->format('Y-m-d');
        }

        if (isset($searchData['n']) && !empty($searchData['n'])) {
            $this->request->data['Search']['status_new'] = $searchData['n'];
            $status_new = 'NEW';
        }

        if (isset($searchData['b']) && !empty($searchData['b'])) {
            $this->request->data['Search']['status_billing'] = $searchData['b'];
            $status_billing = 'BILLING';
        }

        if (isset($searchData['ci']) && !empty($searchData['ci'])) {
            $this->request->data['Search']['checked-in'] = $searchData['ci'];
            $checkedIN = 'CHECKED-IN';
        }

        if (isset($searchData['c']) && !empty($searchData['c'])) {
            $this->request->data['Search']['status_closed'] = $searchData['c'];
            $status_closed = 'CLOSED';
        }


        $dataToSend = array(
            'thin_app_id' => $thin_app_id,
            'app_key' => $app_key,
            'user_id' => $user_id,
            'role_id' => $role_id,
            'mobile' => $mobile,
            'lab_pharmacy_user_id' => $lab_pharmacy_user_id,
            'request_from' => $request_from,
            'role_type' => $role_type,
            'search' => $search,
            'offset' => 0,
            'doctor_id' => $doctorID,
            'status_new' => $status_new,
            'checked-in' => $checkedIN,
            'status_closed' => $status_closed,
            'status_billing' => $status_billing,
            'from_date' => $from_date,
            'to_date' => $to_date
        );
        
        //print_r($dataToSend); die;

        $data = WebServicesFunction_2_3::lab_get_patient_upload_record_list($dataToSend);

        $login1 = $this->Session->read('Auth.User');
        $reportTitle = $login1['Thinapp']['name'].' ('.$this->request->data['Search']['from_date'].' - '.$this->request->data['Search']['to_date'].')';

        $this->set(array('dataToSend' => $data,'reportTitle' => $reportTitle));
    }

    public function lab_update_traker_token()
    {
        $this->layout = 'ajax';
        if ($this->request->is('ajax')) {
            $appointmentID = ($this->request->data['appointmentID']);


            $login = $this->Session->read('Auth.User');
            $thinappID = $login['User']['thinapp_id'];


            $thin_app_id = $thinappID;
            $app_key = APP_KEY;
            $user_id = $login['User']['id'];
            $mobile = $login['User']['mobile'];
            $lab_user_id = $login['User']['mobile'];
            $role_type = $login['LabPharmacyUser']['role_type'];
            $appointment_customer_staff_service_id = $appointmentID;
            $lab_user_id = $login['LabPharmacyUser']['id'];
            $dataToSend = array(
                'thin_app_id' => $thin_app_id,
                'app_key' => $app_key,
                'user_id' => $user_id,
                'mobile' => $mobile,
                'role_type' => $role_type,
                'lab_user_id' => $lab_user_id,
                'appointment_customer_staff_service_id' => $appointment_customer_staff_service_id
            );
            $data = WebServicesFunction_2_3::lab_update_traker_token($dataToSend);
            echo json_encode($data);
            die;
        }
    }

    public function lab_update_file_status()
    {
        $this->layout = 'ajax';
        if ($this->request->is('ajax')) {
            $appointmentID = ($this->request->data['appointmentID']);
            $file_status = ($this->request->data['file_status']);

            $appointmentStaffID = ($this->request->data['appointmentStaffID']);
            $appointmentCustomerID = ($this->request->data['appointmentCustomerID']);
            $childrenID = ($this->request->data['childrenID']);


            $login = $this->Session->read('Auth.User');
            $thinappID = $login['User']['thinapp_id'];


            $thin_app_id = $thinappID;
            $app_key = APP_KEY;
            $user_id = $login['User']['id'];
            $mobile = $login['User']['mobile'];
            $lab_user_id = $login['LabPharmacyUser']['id'];
            $type = 'from_lab';
            $appointmentCustomerStaffServiceID = $appointmentID;

            $appointmentStaffID = $appointmentStaffID;
            $appointmentCustomerID = $appointmentCustomerID;
            $childrenID = $childrenID;

            $file_id = $appointmentID;
            $status = $file_status;
            $role_type = $login['LabPharmacyUser']['role_type'];


            $dataToSend = array(
                'thin_app_id' => $thin_app_id,
                'app_key' => $app_key,
                'user_id' => $user_id,
                'mobile' => $mobile,
                'lab_user_id' => $lab_user_id,
                'type' => $type,
                'appointment_customer_staff_service_id' => $appointmentCustomerStaffServiceID,
                'appointment_staff_id' => $appointmentStaffID,
                'appointment_customer_id' => $appointmentCustomerID,
                'children_id' => $childrenID,
                'file_id' => $file_id,
                'status' => $status,
                'role_type' => $role_type
            );
            $data = WebServicesFunction_2_3::lab_update_file_status($dataToSend);
            echo json_encode($data);
            die;

        }
    }

    public function lab_patient_outhouse()
    {

        $this->layout = "app_admin_home";
        $login = $this->Session->read('Auth.User');
        //pr($login); die;
        $thinappID = $login['User']['thinapp_id'];

        $thin_app_id = $thinappID;
        $app_key = APP_KEY;
        $user_id = $login['User']['id'];
        $role_id = $login['User']['role_id'];
        $mobile = $login['User']['mobile'];
        $lab_pharmacy_user_id = $login['LabPharmacyUser']['id'];
        $request_from = 'LAB';
        $role_type = $login['LabPharmacyUser']['role_type'];
        $search = '';
        $status_new = "";
        $doctorID = 0;
        $status_in_progress = "";
        $status_closed = "";
        $from_date = "";
        $to_date = "";


        $searchData = $this->request->query;

        if (isset($searchData['s']) && !empty($searchData['s'])) {
            $this->request->data['Search']['search'] = $searchData['s'];
            $search = $searchData['s'];
        }

        if (isset($searchData['f']) && !empty($searchData['f'])) {
            $this->request->data['Search']['from_date'] = $searchData['f'];
            $from_date = DateTime::createFromFormat('d/m/Y', $searchData['f']);
            $from_date = $from_date->format('Y-m-d');
        }

        if (isset($searchData['t']) && !empty($searchData['t'])) {
            $this->request->data['Search']['to_date'] = $searchData['t'];
            $to_date = $searchData['t'];
            $to_date = DateTime::createFromFormat('d/m/Y', $searchData['t']);
            $to_date = $to_date->format('Y-m-d');
        }

        if (isset($searchData['n']) && !empty($searchData['n'])) {
            $this->request->data['Search']['status_new'] = $searchData['n'];
            $status_new = 'Y';
        }

        if (isset($searchData['i']) && !empty($searchData['i'])) {
            $this->request->data['Search']['status_in_progress'] = $searchData['i'];
            $status_in_progress = 'Y';
        }

        if (isset($searchData['c']) && !empty($searchData['c'])) {
            $this->request->data['Search']['status_closed'] = $searchData['c'];
            $status_closed = 'Y';
        }


        $dataToSend = array(
            'thin_app_id' => $thin_app_id,
            'app_key' => $app_key,
            'user_id' => $user_id,
            'role_id' => $role_id,
            'mobile' => $mobile,
            'lab_pharmacy_user_id' => $lab_pharmacy_user_id,
            'request_from' => $request_from,
            'role_type' => $role_type,
            'search' => $search,
            'offset' => 0,
            'status_new' => $status_new,
            'doctor_id' => $doctorID,
            'status_in_progress' => $status_in_progress,
            'status_closed' => $status_closed,
            'from_date' => $from_date,
            'to_date' => $to_date
        );

        $data = WebServicesFunction_2_3::lab_get_patient_upload_record_list($dataToSend);
        $this->set(array('dataToSend' => $data));
    }

    public function get_patient_history($thinappID, $uhid)
    {

        $this->layout = false;
        if (!empty($thinappID) && !empty($uhid)) {
            $thinappID = base64_decode($thinappID);
            $uhid = base64_decode($uhid);
            $data = WebservicesFunction::get_patient_history($thinappID, $uhid);
            //pr($data); die;
            if ($data['status'] == 1) {
                $dataToSend = $data['data'];
                $patientDetail = $data['patientDetail'];
            } else {
                $dataToSend = array();
                $patientDetail = array();
            }
        } else {
            $dataToSend = array();
            $patientDetail = array();
        }
        $this->set(array('dataToSend' => $dataToSend, 'patientDetail' => $patientDetail));

    }

    public function get_show_drive_file_modal()
    {
        $this->layout = 'ajax';
        if ($this->request->is('ajax')) {
            $fileID = ($this->request->data['fileID']);
            $file = $this->DriveFile->findById($fileID, array('contain' => false));
            $this->set(compact('file'));
            $this->render('get_show_drive_file_modal', 'ajax');
        } else {
            exit();
        }
    }

    public function create_data_list()
    {
        $this->layout = 'ajax';
        $this->autoRender = false;
        $login = $this->Session->read('Auth.User.User');
        $thin_app_id = $login['thinapp_id'];
        $list = array();

        if ($list = Custom::get_patient_data_mobile_list($thin_app_id)) {
            WebservicesFunction::createJson('data_user_mobile_list_' . $thin_app_id, json_encode(array_column($list, 'mobile')), 'CREATE', 'data_list');
        }

        if ($list = Custom::get_patient_data_name_list($thin_app_id)) {
            WebservicesFunction::createJson('data_user_name_list_' . $thin_app_id, json_encode(array_column($list, 'first_name')), 'CREATE', 'data_list');
        }
        if ($list = Custom::get_patient_data_address_list($thin_app_id)) {
            WebservicesFunction::createJson('data_user_address_list_' . $thin_app_id, json_encode(array_column($list, 'address')), 'CREATE', 'data_list');
        }
        return true;
    }


    public function search_hos_ser()
    {
        $reqData = $this->request->query;
        $pram = array();
        if (!empty($reqData['name'])) {
            $pram['n'] = $reqData['name'];
        }
        if (!empty($reqData['category'])) {
            $pram['c'] = $reqData['category'];
        }

        $this->redirect(
            array(
                "controller" => "app_admin",
                "action" => "hospital_service",
                "?" => $pram,
            )
        );
    }

    public function hospital_service()
    {
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User.User');
        $conditions = array();
        $searchData = $this->request->query;

        if (isset($searchData['n']) && !empty($searchData['n'])) {
            $this->request->data['Search']['name'] = $searchData['n'];
            $conditions["MedicalProduct.name LIKE"] = '%' . $searchData['n'] . '%';
        }

        if (isset($searchData['c']) && !empty($searchData['c'])) {
            $this->request->data['Search']['category'] = $searchData['c'];
            $conditions["MedicalProduct.hospital_service_category_id"] = $searchData['c'];
        }

        $loginLab = $this->Session->read('Auth.User');
        $roleLab = $loginLab['USER_ROLE'];
        if ($roleLab == "LAB" || $roleLab == 'PHARMACY') {

            $isInhouse = $loginLab['LabPharmacyUser']['is_inhouse'];
            if($isInhouse == 'YES')
            {
                $conditions['MedicalProduct.lab_pharmacy_user_id'] = array($loginLab['LabPharmacyUser']['id'],'0');
            }
            else
            {
                $conditions['MedicalProduct.lab_pharmacy_user_id'] = $loginLab['LabPharmacyUser']['id'];
            }


        } else {
            $conditions['OR'] = array('MedicalProduct.lab_pharmacy_user_id' => 0, "(MedicalProduct.lab_pharmacy_type = 'LAB' AND MedicalProduct.lab_pharmacy_is_inhouse = 'YES')",);
        }


        $conditions['MedicalProduct.module_type'] = 'PHARMACY';
        $conditions['MedicalProduct.is_billable'] = 1;

        $data = $this->MedicalProduct->find('all', array(
            "conditions" => array(
                "MedicalProduct.thinapp_id" => $login['thinapp_id'],
                $conditions
            ),
            'contain' => array("MedicalProductQuantity", "HospitalServiceCategory" => array('HospitalTaxRate')),
            'order' => array("MedicalProduct.id" => 'DESC')
        ));

        $login1 = $this->Session->read('Auth.User');
        $reportTitle = $login1['Thinapp']['name'].' ('.date('d/m/Y').')';

        $this->set(compact('reportTitle','data'));


    }

    public function add_hospital_service()
    {

        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User.User');
        $labID = 0;
        $labPharmacyType = 'NONE';
        $labPharmacyIsInhouse = 'NONE';
        $loginLab = $this->Session->read('Auth.User');
        $roleLab = $loginLab['USER_ROLE'];

        if ($roleLab == "LAB" || $roleLab == 'PHARMACY') {
            $labID = $loginLab['LabPharmacyUser']['id'];
            $labPharmacyType = $roleLab;
            $labPharmacyIsInhouse = $loginLab['LabPharmacyUser']['is_inhouse'];
        }

        if (!$this->Session->read('Tab')) {
            $this->Session->write('Tab', "add");
        }

        $medicineForm = Custom::get_medicine_form_list();

        if ($this->request->is(array('post', 'put'))) {

            $data = $this->request->data['MedicalProduct'];
            $service_name = $amount = array();
            $key_array = $header_array = $result = array();
            $new = $duplicate = 0;
            $data['module_type'] = 'PHARMACY';
            $data['is_billable'] = 1;
            $data['is_package'] = 0;

            if (isset($data['file']['tmp_name']) && !empty($data['file']['tmp_name'])) {
                $this->Session->write('Tab', "file");
                $type = $data['file']['type'];
                $thin_app_id = $login['thinapp_id'];
                $invalid_header = false;
                $hospital_service_category_id = $data['hospital_service_category_id'];
                $is_price_editable = $data['is_price_editable'];
                $is_package = isset($data['is_package']) ? $data['is_package'] : 0;
                $module_type = $data['module_type'];
                $is_billable = $data['is_billable'];

                $exist_service = Custom::get_service_name_by_category($thin_app_id, $hospital_service_category_id);
                if ($type == "application/vnd.ms-excel") {
                    $data_array = file($data['file']['tmp_name']);
                    $connection = ConnectionUtil::getConnection();
                    $connection->autocommit(false);
                    foreach ($data_array as $key => $value) {
                        if ($key == 0) {
                            $header_array = explode(",", $value);
                            foreach ($header_array as $ser_key => $title) {
                                $title = strtoupper(trim($title));
                                if ($title == 'SERVICE NAME') {
                                    $key_array['service_name'] = $ser_key;
                                } else if ($title == 'QUANTITY') {
                                    $key_array['quantity'] = $ser_key;
                                } else if ($title == 'EXPIRY DATE') {
                                    $key_array['expiry_date'] = $ser_key;
                                } else if ($title == 'MEDICINE FORM') {
                                    $key_array['medicine_form'] = $ser_key;
                                } else if ($title == 'PURCHASE PRICE') {
                                    $key_array['purchase_price'] = $ser_key;
                                } else if ($title == 'MRP') {
                                    $key_array['mrp'] = $ser_key;
                                } else if ($title == 'BATCH') {
                                    $key_array['batch'] = $ser_key;
                                }

                            }
                        } else {
                            if (count($header_array) == count($key_array)) {
                                $tmp_array = explode(",", $value);
                                $service_name = @trim($tmp_array[$key_array['service_name']]);;
                                $amount = 0;
                                $medicine_form = @trim($tmp_array[$key_array['medicine_form']]);

                                $quantity = ($tmp_array[$key_array['quantity']] > 0) ? @trim($tmp_array[$key_array['quantity']]) : 0;

                                $purchase_price = @trim($tmp_array[$key_array['purchase_price']]);
                                $mrp = @trim($tmp_array[$key_array['mrp']]);
                                $batch = @trim($tmp_array[$key_array['batch']]);

                                $expiry_date = @trim($tmp_array[$key_array['expiry_date']]);
                                if (!in_array(strtoupper($service_name), $exist_service) && !empty($mrp)) {
                                    $created = Custom::created();

                                    if ($is_package == 1) {
                                        $price = $mrp;
                                    } else {
                                        $price = 0;
                                    }

                                    $query = "INSERT INTO medical_products (module_type,is_billable,price,medicine_form,lab_pharmacy_is_inhouse,lab_pharmacy_type,lab_pharmacy_user_id,thinapp_id, name, is_price_editable, is_package, hospital_service_category_id, created, modified) values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                                    $stmt = $connection->prepare($query);
                                    $stmt->bind_param('ssssssssssssss', $module_type, $is_billable, $price, $medicine_form, $labPharmacyIsInhouse, $labPharmacyType, $labID, $thin_app_id, $service_name, $is_price_editable, $is_package, $hospital_service_category_id, $created, $created);
                                    if ($tmp = $stmt->execute()) {


                                        $result[] = $tmp;
                                        $productID = $stmt->insert_id;

                                        $date1 = '';
                                        if (!empty($expiry_date)) {
                                            $expiry_date = str_replace("-", "/", $expiry_date);
                                            $date = DateTime::createFromFormat('d/m/Y', $expiry_date);
                                            $date1 = $date->format('Y-m-d');
                                        } else {
                                            $expiry_date = '0000-00-00';
                                        }

                                        if ($is_package != 1) {

                                            $sql = "INSERT INTO `medical_product_quantities` (`batch`,`purchase_price`,`mrp`,`medical_product_id`,`thinapp_id`,`expiry_date`,`quantity`,`created`,`modified`) VALUES ('" . $batch . "','" . $purchase_price . "','" . $mrp . "','" . $productID . "','" . $thin_app_id . "','" . $date1 . "','" . $quantity . "','" . $created . "','" . $created . "')";
                                            $connection->query($sql);
                                        }


                                    } else {

                                        $result[] = $tmp;

                                    }

                                    $new++;
                                } else {
                                    $duplicate++;
                                }
                            } else {
                                $invalid_header = true;
                                $this->Session->setFlash(__('Template format mismatch'), 'default', array(), 'error');
                                break;
                            }
                        }
                    }

                    if ($invalid_header === false) {
                        if (!empty($result) && !in_array(false, $result)) {
                            $connection->commit();
                        	 $file_name = "medical_product_".$login['thinapp_id'];
                            WebservicesFunction::deleteJson(array($file_name),"medical_product"); 
                            $this->Session->setFlash(__("$new product/service added successfully"), 'default', array(), 'success');
                            if (!empty($duplicate)) {
                                $this->Session->setFlash(__("Total $duplicate product/service duplicate found"), 'default', array(), 'warning');
                            }
                            $this->redirect(array('controller' => 'app_admin', 'action' => 'add_hospital_service'));

                        } else if (!empty($duplicate)) {
                            $this->Session->setFlash(__("Product/service already added"), 'default', array(), 'warning');
                            $this->redirect(array('controller' => 'app_admin', 'action' => 'add_hospital_service'));
                        } else {
                            $connection->rollback();
                            $this->Session->setFlash(__('Sorry, product/service could not upload'), 'default', array(), 'error');
                        }
                    }


                } else {
                    $this->Session->setFlash(__('Invalid file type.'), 'default', array(), 'error');
                }
            } else {

                $this->Session->write('Tab', "add");
                $data['thinapp_id'] = $login['thinapp_id'];
                $data['name'] = trim($data['name']);
                $data['lab_pharmacy_user_id'] = $labID;
                $data['lab_pharmacy_type'] = $labPharmacyType;
                $data['lab_pharmacy_is_inhouse'] = $labPharmacyIsInhouse;
                if ($data['is_package'] == 1) {
                    $data['price'] = $data['mrp'];
                }

                if (!empty($data['mrp'])) {

                    $this->MedicalProduct->set($data);
                    if ($this->MedicalProduct->validates()) {
                        if ($this->MedicalProduct->save($data)) {

                            $dataToSaveInProductQuantity = array();
                            $dataToSaveInProductQuantity['thinapp_id'] = $login['thinapp_id'];
                            $dataToSaveInProductQuantity['quantity'] = ($data['quantity'] > 0) ? $data['quantity'] : 0;
                            $dataToSaveInProductQuantity['purchase_price'] = $data['purchase_price'];
                            $dataToSaveInProductQuantity['mrp'] = $data['mrp'];
                            $dataToSaveInProductQuantity['batch'] = $data['batch'];

                            if (!empty($data['expiry_date'])) {
                                $data['expiry_date'] = str_replace("-", "/", $data['expiry_date']);
                                $date = DateTime::createFromFormat('d/m/Y', $data['expiry_date']);
                                $date1 = $date->format('Y-m-d');
                                $dataToSaveInProductQuantity['expiry_date'] = $date1;
                            } else {
                                $dataToSaveInProductQuantity['expiry_date'] = "0000-00-00";
                            }

                            if ($data['is_package'] != 1) {
                                $medicalProductID = $this->MedicalProduct->getLastInsertId();
                                $dataToSaveInProductQuantity['medical_product_id'] = $medicalProductID;
                                $this->MedicalProductQuantity->save($dataToSaveInProductQuantity);
                            }

                        	 $file_name = "medical_product_".$login['thinapp_id'];
                            WebservicesFunction::deleteJson(array($file_name),"medical_product"); 
                        
                            $this->Session->setFlash('Service/Product added successfully!', 'default', array(), 'success');
                            $this->redirect(array('controller' => 'app_admin', 'action' => 'add_hospital_service'));
                        } else {
                            $this->Session->setFlash("Sorry, Couldn't add service/product!", 'default', array(), 'error');
                        }

                    }

                } else {

                    $this->Session->setFlash("Sorry, Couldn't add service/product! MRP is empty.", 'default', array(), 'error');

                }

            }

        }

        $this->set(array("tab" => $this->Session->read('Tab'), 'medicineForm' => $medicineForm));

    }

    public function edit_hospital_service($id = null)
    {
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User.User');

        $id = base64_decode($id);
        if ($this->request->is(array('post', 'put'))) {
            $data = $this->request->data['MedicalProduct'];
            $data['id'] = $id;
            $data['thinapp_id'] = $login['thinapp_id'];
            $data['name'] = trim($data['name']);

            $this->MedicalProduct->set($data);
            if ($this->MedicalProduct->validates()) {
                if ($this->MedicalProduct->save($data)) {
                	$file_name = "medical_product_".$login['thinapp_id'];
                    WebservicesFunction::deleteJson(array($file_name),"medical_product");
                    $this->Session->setFlash('Service/Product edited successfully!', 'default', array(), 'success');
                    $this->redirect(array('controller' => 'app_admin', 'action' => 'hospital_service'));
                } else {
                    $this->Session->setFlash("Sorry, Couldn't edit service/product!", 'default', array(), 'error');
                }
            }
        } else {
            $dataToSend = $this->MedicalProduct->findById($id);
            $this->request->data = $dataToSend;
            $medicineForm = Custom::get_medicine_form_list();
            $hasQuantity = false;
            if (!empty($dataToSend['MedicalProductQuantity'])) {
                $hasQuantity = true;
            }
            $this->set(array('medicineForm' => $medicineForm, 'hasQuantity' => $hasQuantity));
        }
    }

    public function list_hospital_service_inventory($medicalProductID = null)
    {
        if (!empty($medicalProductID)) {
            $this->layout = "app_admin_home";
            $login = $this->Session->read('Auth.User.User');
            $thinappID = $login['thinapp_id'];
            $medicalProductID = base64_decode($medicalProductID);
            $medicalProData = $this->MedicalProduct->findById($medicalProductID, array('contain' => false));
            $inventoryData = $this->MedicalProductQuantity->find('all', array('conditions' => array('MedicalProductQuantity.medical_product_id' => $medicalProductID, 'MedicalProductQuantity.thinapp_id' => $thinappID,), 'order' => array('id DESC'), 'contain' => false));
            $login1 = $this->Session->read('Auth.User');
            $reportTitle = $login1['Thinapp']['name'].' ('.date("d/m/Y").')';

            $this->set(compact('reportTitle','inventoryData', 'medicalProductID', 'medicalProData'));

        } else {
            $this->redirect(array("controller" => "app_admin", "action" => "hospital_service"));
        }
    }

    public function edit_product_quantity($productQuantityID = null, $productID = null)
    {
        if (!empty($productQuantityID)) {
            $this->layout = "app_admin_home";
            $login = $this->Session->read('Auth.User.User');
            $thinappID = $login['thinapp_id'];
            $productQuantityID = base64_decode($productQuantityID);


            if ($this->request->is(array('post', 'put'))) {
                $data = $this->request->data['MedicalProductQuantity'];
                if (!empty($data['expiry_date'])) {
                    $date = DateTime::createFromFormat('d/m/Y', $data['expiry_date']);
                    $data['expiry_date'] = $date->format('Y-m-d');
                } else {
                    $data['expiry_date'] = '0000-00-00';
                }
                $data['quantity'] = ($data['quantity'] > 0) ? $data['quantity'] : 0;
                $data['id'] = $productQuantityID;
                $this->MedicalProductQuantity->set($data);
                if ($this->MedicalProductQuantity->validates()) {
                    if ($this->MedicalProductQuantity->save($data)) {
                        $this->Session->setFlash('Edited successfully!', 'default', array(), 'success');
                        $this->redirect(array('controller' => 'app_admin', 'action' => 'list_hospital_service_inventory', $productID));
                    } else {
                        $this->Session->setFlash("Sorry, Couldn't edit!", 'default', array(), 'error');
                    }
                }
            } else {

                $this->request->data = $this->MedicalProductQuantity->findById($productQuantityID, array('contain' => false));

            }


            $medicalProData = $this->MedicalProduct->findById(base64_decode($productID), array('contain' => false));

            $this->set(compact('medicalProData'));

        } else {
            $this->redirect(array("controller" => "app_admin", "action" => "hospital_service"));
        }
    }

    public function add_product_quantity($productID = null)
    {
        if ($productID != '') {
            $login = $this->Session->read('Auth.User.User');
            $thinappID = $login['thinapp_id'];
            $productID = base64_decode($productID);
            $data = $this->MedicalProduct->findById($productID, array('contain' => false));
            if (isset($data['MedicalProduct']['thinapp_id']) && ($data['MedicalProduct']['thinapp_id'] == $thinappID)) {
                if ($this->request->is(array('post', 'put'))) {
                    $data = $this->request->data['MedicalProductQuantity'];
                    if (!empty($data['expiry_date'])) {
                        $date = DateTime::createFromFormat('d/m/Y', $data['expiry_date']);
                        $data['expiry_date'] = $date->format('Y-m-d');
                    } else {
                        $data['expiry_date'] = '0000-00-00';
                    }
                    $data['medical_product_id'] = $productID;
                    $data['thinapp_id'] = $thinappID;
                    $data['quantity'] = ($data['quantity'] > 0) ? $data['quantity'] : 0;
                    $this->MedicalProductQuantity->set($data);
                    if ($this->MedicalProductQuantity->validates()) {
                        if ($this->MedicalProductQuantity->save($data)) {
                            $this->Session->setFlash('Saved successfully!', 'default', array(), 'success');
                            $this->redirect(array('controller' => 'app_admin', 'action' => 'list_hospital_service_inventory', base64_encode($productID)));
                        } else {
                            $this->Session->setFlash("Sorry, Couldn't save!", 'default', array(), 'error');
                        }
                    }
                }
                $medicalProData = $this->MedicalProduct->findById($productID, array('contain' => false));
                $this->set(compact('medicalProData'));
            } else {
                $this->redirect(array("controller" => "app_admin", "action" => "hospital_service"));
            }
        } else {
            $this->redirect(array("controller" => "app_admin", "action" => "hospital_service"));
        }
    }


    public function search_inventory_report()
    {

        $reqData = $this->request->data;
        $pram = array();
        $query = $this->request->query;
        if (!empty($query['medical_product_id'])) {
            $pram['mid'] = $query['medical_product_id'][0];
        }

        if (!empty($query['expiry_from'])) {
            $pram['ef'] = $query['expiry_from'];
        }
        if (!empty($query['expiry_to'])) {
            $pram['et'] = $query['expiry_to'];
        }

        $this->redirect(
            array(
                "controller" => "app_admin",
                "action" => "get_inventory_report",
                "?" => $pram,
            )
        );

    }

    public function get_inventory_report()
    {
        $login = $this->Session->read('Auth.User.User');
        $thinappID = $login['thinapp_id'];


        $loginLab = $_SESSION['Auth']['User'];
        $roleLab = $loginLab['USER_ROLE'];

        $condition['OR'][] = array('MedicalProductQuantity.thinapp_id' => $thinappID);
        $condition1['MedicalProduct.is_billable'] = 1;
        $condition1['MedicalProduct.module_type'] = 'PHARMACY';
        $condition1['OR'][] = array('MedicalProduct.thinapp_id' => $thinappID);

        if ($roleLab == "LAB" || $roleLab == 'PHARMACY') {
            $isInhouse = $loginLab['LabPharmacyUser']['is_inhouse'];
            if($isInhouse == 'YES')
            {

                $condition['MedicalProduct.lab_pharmacy_user_id'] = $condition1['MedicalProduct.lab_pharmacy_user_id'] = array(
                    '0',
                    $loginLab['LabPharmacyUser']['id'],
                );
            }
            else
            {
                $condition['MedicalProduct.lab_pharmacy_user_id'] = $loginLab['LabPharmacyUser']['id'];
                $condition1['MedicalProduct.lab_pharmacy_user_id'] = $loginLab['LabPharmacyUser']['id'];
            }



        } else {
            $condition['OR'][] = $condition1['OR'][] = array('AND' => array(
                'MedicalProduct.lab_pharmacy_type' => array('LAB'),
                'MedicalProduct.lab_pharmacy_is_inhouse' => 'YES',
            ));


        }

        $condition['MedicalProduct.is_billable'] = 1;
        $condition['MedicalProduct.module_type'] = 'PHARMACY';


        $searchData = $this->request->query;
        $conditions = array();
        if (isset($searchData['mid']) && !empty($searchData['mid'])) {
            $this->request->data['Search']['medical_product_id'] = $searchData['mid'];
            $condition["MedicalProductQuantity.medical_product_id"] = $searchData['mid'];
        }

        if (isset($searchData['ef']) && !empty($searchData['ef'])) {
            $this->request->data['Search']['expiry_from'] = $searchData['ef'];
            $date = DateTime::createFromFormat('d/m/Y', $searchData['ef']);
            $date1 = $date->format('Y-m-d');
            $condition["MedicalProductQuantity.expiry_date >="] = $date1;
        }
        if (isset($searchData['et']) && !empty($searchData['et'])) {
            $this->request->data['Search']['expiry_to'] = $searchData['et'];
            $date = DateTime::createFromFormat('d/m/Y', $searchData['et']);
            $date1 = $date->format('Y-m-d');
            $condition["MedicalProductQuantity.expiry_date <="] = $date1;
        }


        $productList = array();
        $productListRow = $this->MedicalProduct->find('all', array( 'fields' => array('MedicalProduct.id', 'MedicalProduct.name'), 'conditions' => $condition1, 'contain' => false, 'order' => array( 'MedicalProduct.name' => 'ASC' ) ) );
        foreach($productListRow AS $list)
        {
            $productList[] = array_map('utf8_encode',$list['MedicalProduct']);
        }
        //pr($condition);
        $data = $this->MedicalProductQuantity->find('all', array("fields"=>array('MedicalProductQuantity.*','MedicalProduct.*','COUNT(MedicalProductQuantity.id) AS total'),'conditions' => $condition,'order' => array( 'MedicalProductQuantity.id DESC' ),'group'=>'MedicalProduct.id' ));





        $login1 = $this->Session->read('Auth.User');
        $reportTitle = $login1['Thinapp']['name'].' ('.$this->request->data['Search']['expiry_from'].' - '.$this->request->data['Search']['expiry_to'].')';

        $this->set(array('reportTitle'=>$reportTitle,'dataToSend' => $data, 'productList' => $productList));
    }


    public function search_hos_ser_lab()
    {
        $reqData = $this->request->query;
        $pram = array();
        if (!empty($reqData['name'])) {
            $pram['n'] = $reqData['name'];
        }
        if (!empty($reqData['category'])) {
            $pram['c'] = $reqData['category'];
        }

        $this->redirect(
            array(
                "controller" => "app_admin",
                "action" => "hospital_service_lab",
                "?" => $pram,
            )
        );
    }

    public function hospital_service_lab()
    {
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User.User');
        $conditions = array();
        $searchData = $this->request->query;

        if (isset($searchData['n']) && !empty($searchData['n'])) {
            $this->request->data['Search']['name'] = $searchData['n'];
            $conditions["MedicalProduct.name LIKE"] = '%' . $searchData['n'] . '%';
        }

        if (isset($searchData['c']) && !empty($searchData['c'])) {
            $this->request->data['Search']['category'] = $searchData['c'];
            $conditions["MedicalProduct.hospital_service_category_id"] = $searchData['c'];
        }

        $loginLab = $this->Session->read('Auth.User');
        $roleLab = $loginLab['USER_ROLE'];
        if ($roleLab == "LAB" || $roleLab == 'PHARMACY') {
            $isInhouse = $loginLab['LabPharmacyUser']['is_inhouse'];
            if($isInhouse == 'YES')
            {

                $conditions['MedicalProduct.lab_pharmacy_user_id'] = array(
                    '0',
                    $loginLab['LabPharmacyUser']['id'],
                );
            }
            else
            {
                $conditions['MedicalProduct.lab_pharmacy_user_id'] = $loginLab['LabPharmacyUser']['id'];
            }


        } else {
            $conditions['OR'] = array('MedicalProduct.lab_pharmacy_user_id' => 0, "(MedicalProduct.lab_pharmacy_type = 'LAB' AND MedicalProduct.lab_pharmacy_is_inhouse = 'YES')",);
        }


        $conditions['MedicalProduct.module_type'] = 'LAB';
        $conditions['MedicalProduct.is_billable'] = 1;

        $data = $this->MedicalProduct->find('all', array(
            "conditions" => array(
                "MedicalProduct.thinapp_id" => $login['thinapp_id'],
                $conditions
            ),
            'contain' => array("MedicalProductQuantity", "HospitalServiceCategory" => array('HospitalTaxRate')),
            'order' => array("MedicalProduct.id" => 'DESC')
        ));

        $login1 = $this->Session->read('Auth.User');
        $reportTitle = $login1['Thinapp']['name'].' ('.date('d/m/Y').')';

        $this->set(compact('reportTitle','data'));


    }

    public function add_hospital_service_lab()
    {

        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User.User');
        $labID = 0;
        $labPharmacyType = 'NONE';
        $labPharmacyIsInhouse = 'NONE';
        $loginLab = $this->Session->read('Auth.User');
        $roleLab = $loginLab['USER_ROLE'];

        if ($roleLab == "LAB" || $roleLab == 'PHARMACY') {
            $labID = $loginLab['LabPharmacyUser']['id'];
            $labPharmacyType = $roleLab;
            $labPharmacyIsInhouse = $loginLab['LabPharmacyUser']['is_inhouse'];
        }

        if (!$this->Session->read('Tab')) {
            $this->Session->write('Tab', "add");
        }

        $medicineForm = Custom::get_medicine_form_list();

        if ($this->request->is(array('post', 'put'))) {

            $data = $this->request->data['MedicalProduct'];
            $service_name = $amount = array();
            $key_array = $header_array = $result = array();
            $new = $duplicate = 0;
            $data['module_type'] = 'LAB';
            $data['is_billable'] = 1;
            $data['is_package'] = 0;

            if (isset($data['file']['tmp_name']) && !empty($data['file']['tmp_name'])) {
                $this->Session->write('Tab', "file");
                $type = $data['file']['type'];
                $thin_app_id = $login['thinapp_id'];
                $invalid_header = false;
                $hospital_service_category_id = $data['hospital_service_category_id'];
                $is_price_editable = $data['is_price_editable'];
                $is_package = isset($data['is_package']) ? $data['is_package'] : 0;
                $module_type = $data['module_type'];
                $is_billable = $data['is_billable'];

                $exist_service = Custom::get_service_name_by_category($thin_app_id, $hospital_service_category_id);
                if ($type == "application/vnd.ms-excel") {
                   // $data_array = file($data['file']['tmp_name']);
                    $file_data = fopen($data['file']['tmp_name'], 'r');
                    //$header = fgetcsv($file_data);

                    $connection = ConnectionUtil::getConnection();
                    $connection->autocommit(false);
                    $key=0;
                    while($value = fgetcsv($file_data)){
                        if ($key == 0) {

                            foreach ($value as $ser_key => $title) {
                                $title = strtoupper(strtolower(trim($title)));
                                if ($title == 'SERVICE NAME') {
                                    $key_array['service_name'] = $ser_key;
                                } else if ($title == 'QUANTITY') {
                                    $key_array['quantity'] = $ser_key;
                                } else if ($title == 'EXPIRY DATE') {
                                    $key_array['expiry_date'] = $ser_key;
                                } else if ($title == 'MEDICINE FORM') {
                                    $key_array['medicine_form'] = $ser_key;
                                } else if ($title == 'PURCHASE PRICE') {
                                    $key_array['purchase_price'] = $ser_key;
                                } else if ($title == 'MRP') {
                                    $key_array['mrp'] = $ser_key;
                                } else if ($title == 'BATCH') {
                                    $key_array['batch'] = $ser_key;
                                }

                            }
                        } else {
                            $tmp_array =$value;
                            if (count($tmp_array) == count($key_array)) {

                                $service_name = @trim($tmp_array[$key_array['service_name']]);;
                                $amount = 0;
                                $medicine_form = @trim($tmp_array[$key_array['medicine_form']]);

                                $quantity = ($tmp_array[$key_array['quantity']] > 0) ? @trim($tmp_array[$key_array['quantity']]) : 0;

                                $purchase_price = @trim($tmp_array[$key_array['purchase_price']]);
                                $mrp = @trim($tmp_array[$key_array['mrp']]);
                                $batch = @trim($tmp_array[$key_array['batch']]);

                                $expiry_date = @trim($tmp_array[$key_array['expiry_date']]);
                                if (!in_array(strtoupper($service_name), $exist_service) && !empty($mrp)) {
                                    $created = Custom::created();

                                    if ($is_package == 1) {
                                        $price = $mrp;
                                    } else {
                                        $price = 0;
                                    }

                                    $query = "INSERT INTO medical_products (module_type,is_billable,price,medicine_form,lab_pharmacy_is_inhouse,lab_pharmacy_type,lab_pharmacy_user_id,thinapp_id, name, is_price_editable, is_package, hospital_service_category_id, created, modified) values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                                    $stmt = $connection->prepare($query);
                                    $stmt->bind_param('ssssssssssssss', $module_type, $is_billable, $price, $medicine_form, $labPharmacyIsInhouse, $labPharmacyType, $labID, $thin_app_id, $service_name, $is_price_editable, $is_package, $hospital_service_category_id, $created, $created);
                                    if ($tmp = $stmt->execute()) {


                                        $result[] = $tmp;
                                        $productID = $stmt->insert_id;

                                        $date1 = '';
                                        if (!empty($expiry_date)) {
                                            $expiry_date = str_replace("-", "/", $expiry_date);
                                            $date = DateTime::createFromFormat('d/m/Y', $expiry_date);
                                            $date1 = $date->format('Y-m-d');
                                        } else {
                                            $expiry_date = '0000-00-00';
                                        }

                                        if ($is_package != 1) {

                                            $sql = "INSERT INTO `medical_product_quantities` (`batch`,`purchase_price`,`mrp`,`medical_product_id`,`thinapp_id`,`expiry_date`,`quantity`,`created`,`modified`) VALUES ('" . $batch . "','" . $purchase_price . "','" . $mrp . "','" . $productID . "','" . $thin_app_id . "','" . $date1 . "','" . $quantity . "','" . $created . "','" . $created . "')";
                                            $connection->query($sql);
                                        }


                                    } else {

                                        $result[] = $tmp;

                                    }

                                    $new++;
                                } else {
                                    $duplicate++;
                                }
                            } else {
                                $invalid_header = true;
                                $this->Session->setFlash(__('Template format mismatch'), 'default', array(), 'error');
                                break;
                            }
                        }
                        $key++;
                    }

                    if ($invalid_header === false) {
                        if (!empty($result) && !in_array(false, $result)) {
                            $connection->commit();
                            $this->Session->setFlash(__("$new product/service added successfully"), 'default', array(), 'success');
                            if (!empty($duplicate)) {
                                $this->Session->setFlash(__("Total $duplicate product/service duplicate found"), 'default', array(), 'warning');
                            }
                            $this->redirect(array('controller' => 'app_admin', 'action' => 'add_hospital_service_lab'));

                        } else if (!empty($duplicate)) {
                            $this->Session->setFlash(__("Product/service already added"), 'default', array(), 'warning');
                            $this->redirect(array('controller' => 'app_admin', 'action' => 'add_hospital_service_lab'));
                        } else {
                            $connection->rollback();
                            $this->Session->setFlash(__('Sorry, product/service could not upload'), 'default', array(), 'error');
                        }
                    }


                } else {
                    $this->Session->setFlash(__('Invalid file type.'), 'default', array(), 'error');
                }
            } else {

                $this->Session->write('Tab', "add");
                $data['thinapp_id'] = $login['thinapp_id'];
                $data['name'] = trim($data['name']);
                $data['lab_pharmacy_user_id'] = $labID;
                $data['lab_pharmacy_type'] = $labPharmacyType;
                $data['lab_pharmacy_is_inhouse'] = $labPharmacyIsInhouse;
                if ($data['is_package'] == 1) {
                    $data['price'] = $data['mrp'];
                }

                if (!empty($data['mrp'])) {

                    $this->MedicalProduct->set($data);
                    if ($this->MedicalProduct->validates()) {
                        if ($this->MedicalProduct->save($data)) {

                            $dataToSaveInProductQuantity = array();
                            $dataToSaveInProductQuantity['thinapp_id'] = $login['thinapp_id'];
                            $dataToSaveInProductQuantity['quantity'] = ($data['quantity'] > 0) ? $data['quantity'] : 0;
                            $dataToSaveInProductQuantity['purchase_price'] = $data['purchase_price'];
                            $dataToSaveInProductQuantity['mrp'] = $data['mrp'];
                            $dataToSaveInProductQuantity['batch'] = $data['batch'];

                            if (!empty($data['expiry_date'])) {
                                $data['expiry_date'] = str_replace("-", "/", $data['expiry_date']);
                                $date = DateTime::createFromFormat('d/m/Y', $data['expiry_date']);
                                $date1 = $date->format('Y-m-d');
                                $dataToSaveInProductQuantity['expiry_date'] = $date1;
                            } else {
                                $dataToSaveInProductQuantity['expiry_date'] = "0000-00-00";
                            }

                            if ($data['is_package'] != 1) {
                                $medicalProductID = $this->MedicalProduct->getLastInsertId();
                                $dataToSaveInProductQuantity['medical_product_id'] = $medicalProductID;
                                $this->MedicalProductQuantity->save($dataToSaveInProductQuantity);
                            }

                            $this->Session->setFlash('Service/Product added successfully!', 'default', array(), 'success');
                            $this->redirect(array('controller' => 'app_admin', 'action' => 'add_hospital_service_lab'));
                        } else {
                            $this->Session->setFlash("Sorry, Couldn't add service/product!", 'default', array(), 'error');
                        }

                    }

                } else {

                    $this->Session->setFlash("Sorry, Couldn't add service/product! MRP is empty.", 'default', array(), 'error');

                }

            }

        }

        $this->set(array("tab" => $this->Session->read('Tab'), 'medicineForm' => $medicineForm));

    }

    public function edit_hospital_service_lab($id = null)
    {
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User.User');

        $id = base64_decode($id);
        if ($this->request->is(array('post', 'put'))) {
            $data = $this->request->data['MedicalProduct'];
            $data['id'] = $id;
            $data['thinapp_id'] = $login['thinapp_id'];
            $data['name'] = trim($data['name']);

            $this->MedicalProduct->set($data);
            if ($this->MedicalProduct->validates()) {
                if ($this->MedicalProduct->save($data)) {
                    $this->Session->setFlash('Service/Product edited successfully!', 'default', array(), 'success');
                    $this->redirect(array('controller' => 'app_admin', 'action' => 'hospital_service_lab'));
                } else {
                    $this->Session->setFlash("Sorry, Couldn't edit service/product!", 'default', array(), 'error');
                }
            }
        } else {
            $dataToSend = $this->MedicalProduct->findById($id);
            $this->request->data = $dataToSend;
            $medicineForm = Custom::get_medicine_form_list();
            $hasQuantity = false;
            if (!empty($dataToSend['MedicalProductQuantity'])) {
                $hasQuantity = true;
            }
            $this->set(array('medicineForm' => $medicineForm, 'hasQuantity' => $hasQuantity));
        }
    }

    public function list_hospital_service_inventory_lab($medicalProductID = null)
    {
        if (!empty($medicalProductID)) {
            $this->layout = "app_admin_home";
            $login = $this->Session->read('Auth.User.User');
            $thinappID = $login['thinapp_id'];
            $medicalProductID = base64_decode($medicalProductID);
            $medicalProData = $this->MedicalProduct->findById($medicalProductID, array('contain' => false));

            $inventoryData = $this->MedicalProductQuantity->find('all', array('conditions' => array('MedicalProductQuantity.medical_product_id' => $medicalProductID, 'MedicalProductQuantity.thinapp_id' => $thinappID,), 'order' => array('id DESC'), 'contain' => false));
            $login1 = $this->Session->read('Auth.User');
            $reportTitle = $login1['Thinapp']['name'].' ('.date('d/m/Y').')';
            $this->set(compact('reportTitle','inventoryData', 'medicalProductID', 'medicalProData'));

        } else {
            $this->redirect(array("controller" => "app_admin", "action" => "hospital_service_lab"));
        }
    }

    public function edit_product_quantity_lab($productQuantityID = null, $productID = null)
    {
        if (!empty($productQuantityID)) {
            $this->layout = "app_admin_home";
            $login = $this->Session->read('Auth.User.User');
            $thinappID = $login['thinapp_id'];
            $productQuantityID = base64_decode($productQuantityID);


            if ($this->request->is(array('post', 'put'))) {
                $data = $this->request->data['MedicalProductQuantity'];
                if (!empty($data['expiry_date'])) {
                    $date = DateTime::createFromFormat('d/m/Y', $data['expiry_date']);
                    $data['expiry_date'] = $date->format('Y-m-d');
                } else {
                    $data['expiry_date'] = '0000-00-00';
                }
                $data['quantity'] = ($data['quantity'] > 0) ? $data['quantity'] : 0;
                $data['id'] = $productQuantityID;
                $this->MedicalProductQuantity->set($data);
                if ($this->MedicalProductQuantity->validates()) {
                    if ($this->MedicalProductQuantity->save($data)) {
                        $this->Session->setFlash('Edited successfully!', 'default', array(), 'success');
                        $this->redirect(array('controller' => 'app_admin', 'action' => 'list_hospital_service_inventory_lab', $productID));
                    } else {
                        $this->Session->setFlash("Sorry, Couldn't edit!", 'default', array(), 'error');
                    }
                }
            } else {

                $this->request->data = $this->MedicalProductQuantity->findById($productQuantityID, array('contain' => false));

            }


            $medicalProData = $this->MedicalProduct->findById(base64_decode($productID), array('contain' => false));

            $this->set(compact('medicalProData'));

        } else {
            $this->redirect(array("controller" => "app_admin", "action" => "hospital_service_lab"));
        }
    }

    public function add_product_quantity_lab($productID = null)
    {
        if ($productID != '') {
            $login = $this->Session->read('Auth.User.User');
            $thinappID = $login['thinapp_id'];
            $productID = base64_decode($productID);
            $data = $this->MedicalProduct->findById($productID, array('contain' => false));
            if (isset($data['MedicalProduct']['thinapp_id']) && ($data['MedicalProduct']['thinapp_id'] == $thinappID)) {
                if ($this->request->is(array('post', 'put'))) {
                    $data = $this->request->data['MedicalProductQuantity'];
                    if (!empty($data['expiry_date'])) {
                        $date = DateTime::createFromFormat('d/m/Y', $data['expiry_date']);
                        $data['expiry_date'] = $date->format('Y-m-d');
                    } else {
                        $data['expiry_date'] = '0000-00-00';
                    }
                    $data['medical_product_id'] = $productID;
                    $data['thinapp_id'] = $thinappID;
                    $data['quantity'] = ($data['quantity'] > 0) ? $data['quantity'] : 0;
                    $this->MedicalProductQuantity->set($data);
                    if ($this->MedicalProductQuantity->validates()) {
                        if ($this->MedicalProductQuantity->save($data)) {
                            $this->Session->setFlash('Saved successfully!', 'default', array(), 'success');
                            $this->redirect(array('controller' => 'app_admin', 'action' => 'list_hospital_service_inventory_lab', base64_encode($productID)));
                        } else {
                            $this->Session->setFlash("Sorry, Couldn't save!", 'default', array(), 'error');
                        }
                    }
                }
                $medicalProData = $this->MedicalProduct->findById($productID, array('contain' => false));
                $this->set(compact('medicalProData'));
            } else {
                $this->redirect(array("controller" => "app_admin", "action" => "hospital_service_lab"));
            }
        } else {
            $this->redirect(array("controller" => "app_admin", "action" => "hospital_service_lab"));
        }
    }

    public function search_inventory_report_lab()
    {

        $reqData = $this->request->data;
        $pram = array();
        $query = $this->request->query;
        if (!empty($query['medical_product_id'])) {
            $pram['mid'] = $query['medical_product_id'];
        }

        if (!empty($query['expiry_from'])) {
            $pram['ef'] = $query['expiry_from'];
        }
        if (!empty($query['expiry_to'])) {
            $pram['et'] = $query['expiry_to'];
        }

        $this->redirect(
            array(
                "controller" => "app_admin",
                "action" => "get_inventory_report_lab",
                "?" => $pram,
            )
        );

    }

    public function get_inventory_report_lab()
    {
        $login = $this->Session->read('Auth.User.User');
        $thinappID = $login['thinapp_id'];


        $loginLab = $_SESSION['Auth']['User'];

        $roleLab = $loginLab['USER_ROLE'];
        $condition['OR'][] = array('MedicalProductQuantity.thinapp_id' => $thinappID);
        $condition1['MedicalProduct.is_billable'] = 1;
        $condition1['MedicalProduct.module_type'] = 'LAB';
        $condition1['OR'][] = array('MedicalProduct.thinapp_id' => $thinappID);

        if ($roleLab == "LAB" || $roleLab == 'PHARMACY') {
            $isInhouse = $loginLab['LabPharmacyUser']['is_inhouse'];
            if($isInhouse == 'YES')
            {

                $condition['MedicalProduct.lab_pharmacy_user_id'] = $condition1['MedicalProduct.lab_pharmacy_user_id'] = array(
                    '0',
                    $loginLab['LabPharmacyUser']['id'],
                );
            }
            else
            {
                $condition['MedicalProduct.lab_pharmacy_user_id'] = $loginLab['LabPharmacyUser']['id'];
                $condition1['MedicalProduct.lab_pharmacy_user_id'] = $loginLab['LabPharmacyUser']['id'];
            }


        } else {
            $condition['OR'][] = $condition1['OR'][] = array('AND' => array(
                'MedicalProduct.lab_pharmacy_type' => 'LAB',
                'MedicalProduct.lab_pharmacy_is_inhouse' => 'YES',
            ));


        }

        $condition['MedicalProduct.is_billable'] = 1;
        $condition['MedicalProduct.module_type'] = 'LAB';


        $searchData = $this->request->query;
        $conditions = array();
        if (isset($searchData['mid']) && !empty($searchData['mid'])) {
            $this->request->data['Search']['medical_product_id'] = $searchData['mid'];
            $condition["MedicalProductQuantity.medical_product_id"] = $searchData['mid'];
        }

        if (isset($searchData['ef']) && !empty($searchData['ef'])) {
            $this->request->data['Search']['expiry_from'] = $searchData['ef'];
            $date = DateTime::createFromFormat('d/m/Y', $searchData['ef']);
            $date1 = $date->format('Y-m-d');
            $condition["MedicalProductQuantity.expiry_date >="] = $date1;
        }
        if (isset($searchData['et']) && !empty($searchData['et'])) {
            $this->request->data['Search']['expiry_to'] = $searchData['et'];
            $date = DateTime::createFromFormat('d/m/Y', $searchData['et']);
            $date1 = $date->format('Y-m-d');
            $condition["MedicalProductQuantity.expiry_date <="] = $date1;
        }



        $productList = $this->MedicalProduct->find('list', array('conditions' => $condition1, 'order' => array('MedicalProduct.name' => 'ASC')));
        $data = $this->MedicalProductQuantity->find('all', array("fields"=>array('MedicalProductQuantity.*','MedicalProduct.*','COUNT(MedicalProductQuantity.id) AS total'),'conditions' => $condition,'order' => array( 'MedicalProductQuantity.id DESC' ),'group'=>'MedicalProduct.id' ));




        $login1 = $this->Session->read('Auth.User');
        $reportTitle = $login1['Thinapp']['name'].' ('.$this->request->data['Search']['expiry_from'].' - '.$this->request->data['Search']['expiry_to'].')';



        $this->set(array('reportTitle'=>$reportTitle,'dataToSend' => $data, 'productList' => $productList));
    }





    public function search_hos_ser_service()
    {
        $reqData = $this->request->query;
        $pram = array();
        if (!empty($reqData['name'])) {
            $pram['n'] = $reqData['name'];
        }
        if (!empty($reqData['category'])) {
            $pram['c'] = $reqData['category'];
        }

        $this->redirect(
            array(
                "controller" => "app_admin",
                "action" => "hospital_service_service",
                "?" => $pram,
            )
        );
    }

    public function hospital_service_service()
    {
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User.User');
        $conditions = array();
        $searchData = $this->request->query;

        if (isset($searchData['n']) && !empty($searchData['n'])) {
            $this->request->data['Search']['name'] = $searchData['n'];
            $conditions["MedicalProduct.name LIKE"] = '%' . $searchData['n'] . '%';
        }

        if (isset($searchData['c']) && !empty($searchData['c'])) {
            $this->request->data['Search']['category'] = $searchData['c'];
            $conditions["MedicalProduct.hospital_service_category_id"] = $searchData['c'];
        }

        $loginLab = $this->Session->read('Auth.User');
        $roleLab = $loginLab['USER_ROLE'];

        if ($roleLab == "LAB" || $roleLab == 'PHARMACY') {
            $isInhouse = $loginLab['LabPharmacyUser']['is_inhouse'];

            if($isInhouse == 'YES')
            {
                $conditions['MedicalProduct.lab_pharmacy_user_id'] = array(
                    '0',
                    $loginLab['LabPharmacyUser']['id'],
                );
            }
            else
            {
                $conditions['MedicalProduct.lab_pharmacy_user_id'] = $loginLab['LabPharmacyUser']['id'];
            }



        } else {
            $conditions['OR'] = array('MedicalProduct.lab_pharmacy_user_id' => 0, "(MedicalProduct.lab_pharmacy_type = 'LAB' AND MedicalProduct.lab_pharmacy_is_inhouse = 'YES')",);
        }


        $conditions['MedicalProduct.module_type'] = 'SERVICE';
        $conditions['MedicalProduct.is_billable'] = 1;


        $data = $this->MedicalProduct->find('all', array(
            "conditions" => array(
                "MedicalProduct.thinapp_id" => $login['thinapp_id'],
                $conditions
            ),
            'contain' => array("MedicalProductQuantity", "HospitalServiceCategory" => array('HospitalTaxRate')),
            'order' => array("MedicalProduct.id" => 'DESC')
        ));

        $login1 = $this->Session->read('Auth.User');
        $reportTitle = $login1['Thinapp']['name'].' ('.date('d/m/Y').')';

        $this->set(compact('data','reportTitle'));


    }

    public function add_hospital_service_service()
    {

        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User.User');
        $labID = 0;
        $labPharmacyType = 'NONE';
        $labPharmacyIsInhouse = 'NONE';
        $loginLab = $this->Session->read('Auth.User');
        $roleLab = $loginLab['USER_ROLE'];

        if ($roleLab == "LAB" || $roleLab == 'PHARMACY') {
            $labID = $loginLab['LabPharmacyUser']['id'];
            $labPharmacyType = $roleLab;
            $labPharmacyIsInhouse = $loginLab['LabPharmacyUser']['is_inhouse'];
        }

        if (!$this->Session->read('Tab')) {
            $this->Session->write('Tab', "add");
        }

        $medicineForm = Custom::get_medicine_form_list();

        if ($this->request->is(array('post', 'put'))) {

            $data = $this->request->data['MedicalProduct'];
            $service_name = $amount = array();
            $key_array = $header_array = $result = array();
            $new = $duplicate = 0;
            $data['module_type'] = 'SERVICE';
            $data['is_billable'] = 1;

            if (isset($data['file']['tmp_name']) && !empty($data['file']['tmp_name'])) {
                $this->Session->write('Tab', "file");
                $type = $data['file']['type'];
                $thin_app_id = $login['thinapp_id'];
                $invalid_header = false;
                $hospital_service_category_id = $data['hospital_service_category_id'];
                $is_price_editable = $data['is_price_editable'];
                $is_package = isset($data['is_package']) ? $data['is_package'] : 0;
                $module_type = $data['module_type'];
                $is_billable = $data['is_billable'];
                $exist_service = Custom::get_service_name_by_category($thin_app_id, $hospital_service_category_id);
                if ($type == "application/vnd.ms-excel") {
                    $data_array = file($data['file']['tmp_name']);
                    $connection = ConnectionUtil::getConnection();
                    $connection->autocommit(false);
                    foreach ($data_array as $key => $value) {
                        if ($key == 0) {
                            $header_array = explode(",", $value);
                            foreach ($header_array as $ser_key => $title) {
                                $title = strtoupper(trim($title));
                                if ($title == 'SERVICE NAME') {
                                    $key_array['service_name'] = $ser_key;
                                } else if ($title == 'QUANTITY') {
                                    $key_array['quantity'] = $ser_key;
                                } else if ($title == 'EXPIRY DATE') {
                                    $key_array['expiry_date'] = $ser_key;
                                } else if ($title == 'MEDICINE FORM') {
                                    $key_array['medicine_form'] = $ser_key;
                                } else if ($title == 'PURCHASE PRICE') {
                                    $key_array['purchase_price'] = $ser_key;
                                } else if ($title == 'MRP') {
                                    $key_array['mrp'] = $ser_key;
                                } else if ($title == 'BATCH') {
                                    $key_array['batch'] = $ser_key;
                                }

                            }
                        } else {
                            if (count($header_array) == count($key_array)) {
                                $tmp_array = explode(",", $value);
                                $service_name = @trim($tmp_array[$key_array['service_name']]);;
                                $amount = 0;
                                $medicine_form = @trim($tmp_array[$key_array['medicine_form']]);

                                $quantity = ($tmp_array[$key_array['quantity']] > 0) ? @trim($tmp_array[$key_array['quantity']]) : 0;

                                $purchase_price = @trim($tmp_array[$key_array['purchase_price']]);
                                $mrp = @trim($tmp_array[$key_array['mrp']]);
                                $batch = @trim($tmp_array[$key_array['batch']]);

                                $expiry_date = @trim($tmp_array[$key_array['expiry_date']]);
                                if (!in_array(strtoupper($service_name), $exist_service) && !empty($mrp)) {
                                    $created = Custom::created();

                                    if ($is_package == 1) {
                                        $price = $mrp;
                                    } else {
                                        $price = 0;
                                    }

                                    $query = "INSERT INTO medical_products (module_type,is_billable,price,medicine_form,lab_pharmacy_is_inhouse,lab_pharmacy_type,lab_pharmacy_user_id,thinapp_id, name, is_price_editable, is_package, hospital_service_category_id, created, modified) values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                                    $stmt = $connection->prepare($query);
                                    $stmt->bind_param('ssssssssssssss', $module_type, $is_billable, $price, $medicine_form, $labPharmacyIsInhouse, $labPharmacyType, $labID, $thin_app_id, $service_name, $is_price_editable, $is_package, $hospital_service_category_id, $created, $created);
                                    if ($tmp = $stmt->execute()) {


                                        $result[] = $tmp;
                                        $productID = $stmt->insert_id;

                                        $date1 = '';
                                        if (!empty($expiry_date)) {
                                            $expiry_date = str_replace("-", "/", $expiry_date);
                                            $date = DateTime::createFromFormat('d/m/Y', $expiry_date);
                                            $date1 = $date->format('Y-m-d');
                                        } else {
                                            $expiry_date = '0000-00-00';
                                        }

                                        if ($is_package != 1) {

                                            $sql = "INSERT INTO `medical_product_quantities` (`batch`,`purchase_price`,`mrp`,`medical_product_id`,`thinapp_id`,`expiry_date`,`quantity`,`created`,`modified`) VALUES ('" . $batch . "','" . $purchase_price . "','" . $mrp . "','" . $productID . "','" . $thin_app_id . "','" . $date1 . "','" . $quantity . "','" . $created . "','" . $created . "')";
                                            $connection->query($sql);
                                        }


                                    } else {

                                        $result[] = $tmp;

                                    }

                                    $new++;
                                } else {
                                    $duplicate++;
                                }
                            } else {
                                $invalid_header = true;
                                $this->Session->setFlash(__('Template format mismatch'), 'default', array(), 'error');
                                break;
                            }
                        }
                    }

                    if ($invalid_header === false) {
                        if (!empty($result) && !in_array(false, $result)) {
                            $connection->commit();
                        	$file_name = "medical_product_".$thin_app_id;
                            WebservicesFunction::deleteJson(array($file_name),"medical_product"); 
                        
                            $this->Session->setFlash(__("$new product/service added successfully"), 'default', array(), 'success');
                            if (!empty($duplicate)) {
                                $this->Session->setFlash(__("Total $duplicate product/service duplicate found"), 'default', array(), 'warning');
                            }
                            $this->redirect(array('controller' => 'app_admin', 'action' => 'add_hospital_service_service'));

                        } else if (!empty($duplicate)) {
                            $this->Session->setFlash(__("Product/service already added"), 'default', array(), 'warning');
                            $this->redirect(array('controller' => 'app_admin', 'action' => 'add_hospital_service_service'));
                        } else {
                            $connection->rollback();
                            $this->Session->setFlash(__('Sorry, product/service could not upload'), 'default', array(), 'error');
                        }
                    }


                } else {
                    $this->Session->setFlash(__('Invalid file type.'), 'default', array(), 'error');
                }
            } else {

                $this->Session->write('Tab', "add");
                $data['thinapp_id'] = $login['thinapp_id'];
                $data['name'] = trim($data['name']);
                $data['lab_pharmacy_user_id'] = $labID;
                $data['lab_pharmacy_type'] = $labPharmacyType;
                $data['lab_pharmacy_is_inhouse'] = $labPharmacyIsInhouse;

                /*if ($data['is_package'] == 1) {*/
                    $data['price'] = $data['mrp'];
                /*}*/

                if (!empty($data['mrp'])) {

                    $this->MedicalProduct->set($data);
                    if ($this->MedicalProduct->validates()) {
                        if ($this->MedicalProduct->save($data)) {

                            $dataToSaveInProductQuantity = array();
                            $dataToSaveInProductQuantity['thinapp_id'] = $login['thinapp_id'];
                            $dataToSaveInProductQuantity['quantity'] = ($data['quantity'] > 0) ? $data['quantity'] : 0;
                            $dataToSaveInProductQuantity['purchase_price'] = $data['purchase_price'];
                            $dataToSaveInProductQuantity['mrp'] = $data['mrp'];
                            $dataToSaveInProductQuantity['batch'] = $data['batch'];

                            if (!empty($data['expiry_date'])) {
                                $data['expiry_date'] = str_replace("-", "/", $data['expiry_date']);
                                $date = DateTime::createFromFormat('d/m/Y', $data['expiry_date']);
                                $date1 = $date->format('Y-m-d');
                                $dataToSaveInProductQuantity['expiry_date'] = $date1;
                            } else {
                                $dataToSaveInProductQuantity['expiry_date'] = "0000-00-00";
                            }

                            if ($data['is_package'] != 1) {
                                $medicalProductID = $this->MedicalProduct->getLastInsertId();
                                $dataToSaveInProductQuantity['medical_product_id'] = $medicalProductID;
                                $this->MedicalProductQuantity->save($dataToSaveInProductQuantity);
                            }

                        	$file_name = "medical_product_".$thin_app_id;
                            WebservicesFunction::deleteJson(array($file_name),"medical_product"); 
                        
                            $this->Session->setFlash('Service/Product added successfully!', 'default', array(), 'success');
                            $this->redirect(array('controller' => 'app_admin', 'action' => 'add_hospital_service_service'));
                        } else {
                            $this->Session->setFlash("Sorry, Couldn't add service/product!", 'default', array(), 'error');
                        }

                    }

                } else {

                    $this->Session->setFlash("Sorry, Couldn't add service/product! MRP is empty.", 'default', array(), 'error');

                }

            }

        }

        $this->set(array("tab" => $this->Session->read('Tab'), 'medicineForm' => $medicineForm));

    }

    public function edit_hospital_service_service($id = null)
    {
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User.User');

        $id = base64_decode($id);
        if ($this->request->is(array('post', 'put'))) {
            $data = $this->request->data['MedicalProduct'];
            $data['id'] = $id;
            $data['thinapp_id'] =$thin_app_id= $login['thinapp_id'];
            $data['name'] = trim($data['name']);

            $this->MedicalProduct->set($data);
            if ($this->MedicalProduct->validates()) {
                if ($this->MedicalProduct->save($data)) {
                
                	$file_name = "medical_product_".$thin_app_id;
                    WebservicesFunction::deleteJson(array($file_name),"medical_product"); 
                
                
                    $this->Session->setFlash('Service/Product edited successfully!', 'default', array(), 'success');
                    $this->redirect(array('controller' => 'app_admin', 'action' => 'hospital_service_service'));
                } else {
                    $this->Session->setFlash("Sorry, Couldn't edit service/product!", 'default', array(), 'error');
                }
            }
        } else {
            $dataToSend = $this->MedicalProduct->findById($id);
            $this->request->data = $dataToSend;
            $medicineForm = Custom::get_medicine_form_list();
            $hasQuantity = false;
            if (!empty($dataToSend['MedicalProductQuantity'])) {
                $hasQuantity = true;
                /*if(!$dataToSend['MedicalProduct']['price'])
                {
                    $dataToSend['MedicalProduct']['price'] = $dataToSend['MedicalProductQuantity'][0]['mrp'];
                }*/

            }
            $this->set(array('medicineForm' => $medicineForm, 'hasQuantity' => $hasQuantity));
        }
    }

    public function list_hospital_service_inventory_service($medicalProductID = null)
    {
        if (!empty($medicalProductID)) {
            $this->layout = "app_admin_home";
            $login = $this->Session->read('Auth.User.User');
            $thinappID = $login['thinapp_id'];
            $medicalProductID = base64_decode($medicalProductID);
            $medicalProData = $this->MedicalProduct->findById($medicalProductID, array('contain' => false));
            $inventoryData = $this->MedicalProductQuantity->find('all', array('conditions' => array('MedicalProductQuantity.medical_product_id' => $medicalProductID, 'MedicalProductQuantity.thinapp_id' => $thinappID,), 'order' => array('id DESC'), 'contain' => false));
            $login1 = $this->Session->read('Auth.User');
            $reportTitle = $login1['Thinapp']['name'].' ('.date('d/m/Y').')';
            $this->set(compact('reportTitle','inventoryData', 'medicalProductID', 'medicalProData'));

        } else {
            $this->redirect(array("controller" => "app_admin", "action" => "hospital_service_service"));
        }
    }

    public function edit_product_quantity_service($productQuantityID = null, $productID = null)
    {
        if (!empty($productQuantityID)) {
            $this->layout = "app_admin_home";
            $login = $this->Session->read('Auth.User.User');
            $thinappID = $login['thinapp_id'];
            $productQuantityID = base64_decode($productQuantityID);


            if ($this->request->is(array('post', 'put'))) {
                $data = $this->request->data['MedicalProductQuantity'];
                if (!empty($data['expiry_date'])) {
                    $date = DateTime::createFromFormat('d/m/Y', $data['expiry_date']);
                    $data['expiry_date'] = $date->format('Y-m-d');
                } else {
                    $data['expiry_date'] = '0000-00-00';
                }
                $data['quantity'] = ($data['quantity'] > 0) ? $data['quantity'] : 0;
                $data['id'] = $productQuantityID;
                $this->MedicalProductQuantity->set($data);
                if ($this->MedicalProductQuantity->validates()) {
                    if ($this->MedicalProductQuantity->save($data)) {
                        $this->Session->setFlash('Edited successfully!', 'default', array(), 'success');
                        $this->redirect(array('controller' => 'app_admin', 'action' => 'list_hospital_service_inventory_service', $productID));
                    } else {
                        $this->Session->setFlash("Sorry, Couldn't edit!", 'default', array(), 'error');
                    }
                }
            } else {

                $this->request->data = $this->MedicalProductQuantity->findById($productQuantityID, array('contain' => false));

            }


            $medicalProData = $this->MedicalProduct->findById(base64_decode($productID), array('contain' => false));

            $this->set(compact('medicalProData'));

        } else {
            $this->redirect(array("controller" => "app_admin", "action" => "hospital_service_service"));
        }
    }

    public function add_product_quantity_service($productID = null)
    {
        if ($productID != '') {
            $login = $this->Session->read('Auth.User.User');
            $thinappID = $login['thinapp_id'];
            $productID = base64_decode($productID);
            $data = $this->MedicalProduct->findById($productID, array('contain' => false));
            if (isset($data['MedicalProduct']['thinapp_id']) && ($data['MedicalProduct']['thinapp_id'] == $thinappID)) {
                if ($this->request->is(array('post', 'put'))) {
                    $data = $this->request->data['MedicalProductQuantity'];
                    if (!empty($data['expiry_date'])) {
                        $date = DateTime::createFromFormat('d/m/Y', $data['expiry_date']);
                        $data['expiry_date'] = $date->format('Y-m-d');
                    } else {
                        $data['expiry_date'] = '0000-00-00';
                    }
                    $data['medical_product_id'] = $productID;
                    $data['thinapp_id'] = $thinappID;
                    $data['quantity'] = ($data['quantity'] > 0) ? $data['quantity'] : 0;
                    $this->MedicalProductQuantity->set($data);
                    if ($this->MedicalProductQuantity->validates()) {
                        if ($this->MedicalProductQuantity->save($data)) {
                            $this->Session->setFlash('Saved successfully!', 'default', array(), 'success');
                            $this->redirect(array('controller' => 'app_admin', 'action' => 'list_hospital_service_inventory_service', base64_encode($productID)));
                        } else {
                            $this->Session->setFlash("Sorry, Couldn't save!", 'default', array(), 'error');
                        }
                    }
                }
                $medicalProData = $this->MedicalProduct->findById($productID, array('contain' => false));
                $this->set(compact('medicalProData'));
            } else {
                $this->redirect(array("controller" => "app_admin", "action" => "hospital_service_service"));
            }
        } else {
            $this->redirect(array("controller" => "app_admin", "action" => "hospital_service_service"));
        }
    }

    public function search_inventory_report_service()
    {

        $reqData = $this->request->data;
        $pram = array();
        $query = $this->request->query;
        if (!empty($query['medical_product_id'])) {
            $pram['mid'] = $query['medical_product_id'];
        }

        if (!empty($query['expiry_from'])) {
            $pram['ef'] = $query['expiry_from'];
        }
        if (!empty($query['expiry_to'])) {
            $pram['et'] = $query['expiry_to'];
        }

        $this->redirect(
            array(
                "controller" => "app_admin",
                "action" => "get_inventory_report_service",
                "?" => $pram,
            )
        );

    }

    public function get_inventory_report_service()
    {
        $login = $this->Session->read('Auth.User.User');
        $thinappID = $login['thinapp_id'];


        $loginLab = $_SESSION['Auth']['User'];
        $roleLab = $loginLab['USER_ROLE'];

        $condition['OR'][] = array('MedicalProductQuantity.thinapp_id' => $thinappID);
        $condition1['OR'][] = array('MedicalProduct.thinapp_id' => $thinappID);

        $condition['MedicalProduct.module_type'] = 'SERVICE';
        $condition['MedicalProduct.is_billable'] = 1;

        $condition1['MedicalProduct.module_type'] = 'SERVICE';
        $condition1['MedicalProduct.is_billable'] = 1;


        if ($roleLab == "LAB" || $roleLab == 'PHARMACY') {
            $isInhouse = $loginLab['LabPharmacyUser']['is_inhouse'];
            if($isInhouse == 'YES')
            {

                $condition['MedicalProduct.lab_pharmacy_user_id'] = $condition1['MedicalProduct.lab_pharmacy_user_id'] = array(
                    '0',
                    $loginLab['LabPharmacyUser']['id'],
                );
            }
            else
            {
                $condition['MedicalProduct.lab_pharmacy_user_id'] = $loginLab['LabPharmacyUser']['id'];
                $condition1['MedicalProduct.lab_pharmacy_user_id'] = $loginLab['LabPharmacyUser']['id'];
            }


        } else {
            $condition['OR'][] = $condition1['OR'][] = array('AND' => array(
                'MedicalProduct.lab_pharmacy_type' => 'LAB',
                'MedicalProduct.lab_pharmacy_is_inhouse' => 'YES',
            ));


        }


        $searchData = $this->request->query;
        $conditions = array();
        if (isset($searchData['mid']) && !empty($searchData['mid'])) {
            $this->request->data['Search']['medical_product_id'] = $searchData['mid'];
            $condition["MedicalProductQuantity.medical_product_id"] = $searchData['mid'];
        }

        if (isset($searchData['ef']) && !empty($searchData['ef'])) {
            $this->request->data['Search']['expiry_from'] = $searchData['ef'];
            $date = DateTime::createFromFormat('d/m/Y', $searchData['ef']);
            $date1 = $date->format('Y-m-d');
            $condition["MedicalProductQuantity.expiry_date >="] = $date1;
        }



        if (isset($searchData['et']) && !empty($searchData['et'])) {
            $this->request->data['Search']['expiry_to'] = $searchData['et'];
            $date = DateTime::createFromFormat('d/m/Y', $searchData['et']);
            $date1 = $date->format('Y-m-d');
            $condition["MedicalProductQuantity.expiry_date <="] = $date1;
        }

        $productList = $this->MedicalProduct->find('list', array('conditions' => $condition1, 'order' => array('MedicalProduct.name' => 'ASC')));
        $data = $this->MedicalProductQuantity->find('all', array("fields"=>array('MedicalProductQuantity.*','MedicalProduct.*','COUNT(MedicalProductQuantity.id) AS total'),'conditions' => $condition,'order' => array( 'MedicalProductQuantity.id DESC' ),'group'=>'MedicalProduct.id' ));





        $login1 = $this->Session->read('Auth.User');
        $reportTitle = $login1['Thinapp']['name'].' ('.$this->request->data['Search']['expiry_from'].' - '.$this->request->data['Search']['expiry_to'].')';


        $this->set(array('reportTitle'=>$reportTitle,'dataToSend' => $data, 'productList' => $productList));
    }

    public function search_hos_ser_hospital()
    {
        $reqData = $this->request->query;
        $pram = array();
        if (!empty($reqData['name'])) {
            $pram['n'] = $reqData['name'];
        }
        if (!empty($reqData['category'])) {
            $pram['c'] = $reqData['category'];
        }

        $this->redirect(
            array(
                "controller" => "app_admin",
                "action" => "hospital_service_hospital",
                "?" => $pram,
            )
        );
    }

    public function hospital_service_hospital()
    {
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User.User');
        $conditions = array();
        $searchData = $this->request->query;

        if (isset($searchData['n']) && !empty($searchData['n'])) {
            $this->request->data['Search']['name'] = $searchData['n'];
            $conditions["MedicalProduct.name LIKE"] = '%' . $searchData['n'] . '%';
        }

        if (isset($searchData['c']) && !empty($searchData['c'])) {
            $this->request->data['Search']['category'] = $searchData['c'];
            $conditions["MedicalProduct.hospital_service_category_id"] = $searchData['c'];
        }

        $loginLab = $this->Session->read('Auth.User');
        $roleLab = $loginLab['USER_ROLE'];

        if ($roleLab == "LAB" || $roleLab == 'PHARMACY') {
            $isInhouse = $loginLab['LabPharmacyUser']['is_inhouse'];
            if($isInhouse == 'YES')
            {
                $conditions['MedicalProduct.lab_pharmacy_user_id'] = array(
                    '0',
                    $loginLab['LabPharmacyUser']['id'],
                );
            }
            else
            {
                $conditions['MedicalProduct.lab_pharmacy_user_id'] = $loginLab['LabPharmacyUser']['id'];
            }

        } else {
            $conditions['OR'] = array('MedicalProduct.lab_pharmacy_user_id' => 0, "(MedicalProduct.lab_pharmacy_type = 'LAB' AND MedicalProduct.lab_pharmacy_is_inhouse = 'YES')",);
        }

        $conditions['MedicalProduct.is_billable'] = 0;


        $data = $this->MedicalProduct->find('all', array(
            "conditions" => array(
                "MedicalProduct.thinapp_id" => $login['thinapp_id'],
                $conditions
            ),
            'contain' => array("MedicalProductQuantity", "HospitalServiceCategory" => array('HospitalTaxRate')),
            'order' => array("MedicalProduct.id" => 'DESC')
        ));

        $login1 = $this->Session->read('Auth.User');
        $reportTitle = $login1['Thinapp']['name'].' ('.date('d/m/Y').')';

        $this->set(compact('data','reportTitle'));


    }

    public function add_hospital_service_hospital()
    {

        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User.User');
        $labID = 0;
        $labPharmacyType = 'NONE';
        $labPharmacyIsInhouse = 'NONE';
        $loginLab = $this->Session->read('Auth.User');
        $roleLab = $loginLab['USER_ROLE'];

        if ($roleLab == "LAB" || $roleLab == 'PHARMACY') {
            $labID = $loginLab['LabPharmacyUser']['id'];
            $labPharmacyType = $roleLab;
            $labPharmacyIsInhouse = $loginLab['LabPharmacyUser']['is_inhouse'];
        }

        if (!$this->Session->read('Tab')) {
            $this->Session->write('Tab', "add");
        }

        $medicineForm = Custom::get_medicine_form_list();

        if ($this->request->is(array('post', 'put'))) {

            $data = $this->request->data['MedicalProduct'];
            $service_name = $amount = array();
            $key_array = $header_array = $result = array();
            $new = $duplicate = 0;
            //$data['module_type'] = 'SERVICE';
            $data['is_billable'] = 0;
            $data['is_package'] = 0;
            $data['is_price_editable'] = 0;
            if (isset($data['file']['tmp_name']) && !empty($data['file']['tmp_name'])) {
                $this->Session->write('Tab', "file");
                $type = $data['file']['type'];
                $thin_app_id = $login['thinapp_id'];
                $invalid_header = false;
                $hospital_service_category_id = $data['hospital_service_category_id'];
                $is_price_editable = $data['is_price_editable'];
                $is_package = isset($data['is_package']) ? $data['is_package'] : 0;
                $module_type = $data['module_type'];
                $is_billable = $data['is_billable'];
                $exist_service = Custom::get_service_name_by_category($thin_app_id, $hospital_service_category_id);
                if ($type == "application/vnd.ms-excel") {
                    $data_array = file($data['file']['tmp_name']);
                    $connection = ConnectionUtil::getConnection();
                    $connection->autocommit(false);
                    foreach ($data_array as $key => $value) {
                        if ($key == 0) {
                            $header_array = explode(",", $value);
                            foreach ($header_array as $ser_key => $title) {
                                $title = strtoupper(trim($title));
                                if ($title == 'SERVICE NAME') {
                                    $key_array['service_name'] = $ser_key;
                                } else if ($title == 'QUANTITY') {
                                    $key_array['quantity'] = $ser_key;
                                } else if ($title == 'EXPIRY DATE') {
                                    $key_array['expiry_date'] = $ser_key;
                                } else if ($title == 'MEDICINE FORM') {
                                    $key_array['medicine_form'] = $ser_key;
                                } else if ($title == 'PURCHASE PRICE') {
                                    $key_array['purchase_price'] = $ser_key;
                                } else if ($title == 'MRP') {
                                    $key_array['mrp'] = $ser_key;
                                } else if ($title == 'BATCH') {
                                    $key_array['batch'] = $ser_key;
                                }

                            }
                        } else {
                            if (count($header_array) == count($key_array)) {
                                $tmp_array = explode(",", $value);
                                $service_name = @trim($tmp_array[$key_array['service_name']]);;
                                $amount = 0;
                                $medicine_form = @trim($tmp_array[$key_array['medicine_form']]);

                                $quantity = ($tmp_array[$key_array['quantity']] > 0) ? @trim($tmp_array[$key_array['quantity']]) : 0;

                                $purchase_price = @trim($tmp_array[$key_array['purchase_price']]);
                                $mrp = @trim($tmp_array[$key_array['mrp']]);
                                $batch = @trim($tmp_array[$key_array['batch']]);

                                $expiry_date = @trim($tmp_array[$key_array['expiry_date']]);
                                if (!in_array(strtoupper($service_name), $exist_service) && !empty($mrp)) {
                                    $created = Custom::created();

                                    if ($is_package == 1) {
                                        $price = $mrp;
                                    } else {
                                        $price = 0;
                                    }

                                    $query = "INSERT INTO medical_products (module_type,is_billable,price,medicine_form,lab_pharmacy_is_inhouse,lab_pharmacy_type,lab_pharmacy_user_id,thinapp_id, name, is_price_editable, is_package, hospital_service_category_id, created, modified) values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                                    $stmt = $connection->prepare($query);
                                    $stmt->bind_param('ssssssssssssss', $module_type, $is_billable, $price, $medicine_form, $labPharmacyIsInhouse, $labPharmacyType, $labID, $thin_app_id, $service_name, $is_price_editable, $is_package, $hospital_service_category_id, $created, $created);
                                    if ($tmp = $stmt->execute()) {


                                        $result[] = $tmp;
                                        $productID = $stmt->insert_id;

                                        $date1 = '';
                                        if (!empty($expiry_date)) {
                                            $expiry_date = str_replace("-", "/", $expiry_date);
                                            $date = DateTime::createFromFormat('d/m/Y', $expiry_date);
                                            $date1 = $date->format('Y-m-d');
                                        } else {
                                            $expiry_date = '0000-00-00';
                                        }

                                        if ($is_package != 1) {

                                            $sql = "INSERT INTO `medical_product_quantities` (`batch`,`purchase_price`,`mrp`,`medical_product_id`,`thinapp_id`,`expiry_date`,`quantity`,`created`,`modified`) VALUES ('" . $batch . "','" . $purchase_price . "','" . $mrp . "','" . $productID . "','" . $thin_app_id . "','" . $date1 . "','" . $quantity . "','" . $created . "','" . $created . "')";
                                            $connection->query($sql);
                                        }


                                    } else {

                                        $result[] = $tmp;

                                    }

                                    $new++;
                                } else {
                                    $duplicate++;
                                }
                            } else {
                                $invalid_header = true;
                                $this->Session->setFlash(__('Template format mismatch'), 'default', array(), 'error');
                                break;
                            }
                        }
                    }

                    if ($invalid_header === false) {
                        if (!empty($result) && !in_array(false, $result)) {
                            $connection->commit();
                            $this->Session->setFlash(__("$new product/service added successfully"), 'default', array(), 'success');
                            if (!empty($duplicate)) {
                                $this->Session->setFlash(__("Total $duplicate product/service duplicate found"), 'default', array(), 'warning');
                            }
                            $this->redirect(array('controller' => 'app_admin', 'action' => 'add_hospital_service_hospital'));

                        } else if (!empty($duplicate)) {
                            $this->Session->setFlash(__("Product/service already added"), 'default', array(), 'warning');
                            $this->redirect(array('controller' => 'app_admin', 'action' => 'add_hospital_service_hospital'));
                        } else {
                            $connection->rollback();
                            $this->Session->setFlash(__('Sorry, product/service could not upload'), 'default', array(), 'error');
                        }
                    }


                } else {
                    $this->Session->setFlash(__('Invalid file type.'), 'default', array(), 'error');
                }
            } else {

                $this->Session->write('Tab', "add");
                $data['thinapp_id'] = $login['thinapp_id'];
                $data['name'] = trim($data['name']);
                $data['lab_pharmacy_user_id'] = $labID;
                $data['lab_pharmacy_type'] = $labPharmacyType;
                $data['lab_pharmacy_is_inhouse'] = $labPharmacyIsInhouse;
                if ($data['is_package'] == 1) {
                    $data['price'] = $data['mrp'];
                }

                if (!empty($data['mrp'])) {

                    $this->MedicalProduct->set($data);
                    if ($this->MedicalProduct->validates()) {
                        if ($this->MedicalProduct->save($data)) {

                            $dataToSaveInProductQuantity = array();
                            $dataToSaveInProductQuantity['thinapp_id'] = $login['thinapp_id'];
                            $dataToSaveInProductQuantity['quantity'] = ($data['quantity'] > 0) ? $data['quantity'] : 0;
                            $dataToSaveInProductQuantity['purchase_price'] = $data['purchase_price'];
                            $dataToSaveInProductQuantity['mrp'] = $data['mrp'];
                            $dataToSaveInProductQuantity['batch'] = $data['batch'];

                            if (!empty($data['expiry_date'])) {
                                $data['expiry_date'] = str_replace("-", "/", $data['expiry_date']);
                                $date = DateTime::createFromFormat('d/m/Y', $data['expiry_date']);
                                $date1 = $date->format('Y-m-d');
                                $dataToSaveInProductQuantity['expiry_date'] = $date1;
                            } else {
                                $dataToSaveInProductQuantity['expiry_date'] = "0000-00-00";
                            }

                            if ($data['is_package'] != 1) {
                                $medicalProductID = $this->MedicalProduct->getLastInsertId();
                                $dataToSaveInProductQuantity['medical_product_id'] = $medicalProductID;
                                $this->MedicalProductQuantity->save($dataToSaveInProductQuantity);
                            }

                            $this->Session->setFlash('Service/Product added successfully!', 'default', array(), 'success');
                            $this->redirect(array('controller' => 'app_admin', 'action' => 'add_hospital_service_hospital'));
                        } else {
                            $this->Session->setFlash("Sorry, Couldn't add service/product!", 'default', array(), 'error');
                        }

                    }

                } else {

                    $this->Session->setFlash("Sorry, Couldn't add service/product! MRP is empty.", 'default', array(), 'error');

                }

            }

        }

        $this->set(array("tab" => $this->Session->read('Tab'), 'medicineForm' => $medicineForm));

    }

    public function edit_hospital_service_hospital($id = null)
    {
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User.User');

        $id = base64_decode($id);
        if ($this->request->is(array('post', 'put'))) {
            $data = $this->request->data['MedicalProduct'];
            $data['id'] = $id;
            $data['thinapp_id'] = $login['thinapp_id'];
            $data['name'] = trim($data['name']);

            $this->MedicalProduct->set($data);
            if ($this->MedicalProduct->validates()) {
                if ($this->MedicalProduct->save($data)) {
                    $this->Session->setFlash('Service/Product edited successfully!', 'default', array(), 'success');
                    $this->redirect(array('controller' => 'app_admin', 'action' => 'hospital_service_hospital'));
                } else {
                    $this->Session->setFlash("Sorry, Couldn't edit service/product!", 'default', array(), 'error');
                }
            }
        } else {
            $dataToSend = $this->MedicalProduct->findById($id);
            $this->request->data = $dataToSend;
            $medicineForm = Custom::get_medicine_form_list();
            $hasQuantity = false;
            if (!empty($dataToSend['MedicalProductQuantity'])) {
                $hasQuantity = true;
            }
            $this->set(array('medicineForm' => $medicineForm, 'hasQuantity' => $hasQuantity));
        }
    }

    public function list_hospital_service_inventory_hospital($medicalProductID = null)
    {
        if (!empty($medicalProductID)) {
            $this->layout = "app_admin_home";
            $login = $this->Session->read('Auth.User.User');
            $thinappID = $login['thinapp_id'];
            $medicalProductID = base64_decode($medicalProductID);
            $medicalProData = $this->MedicalProduct->findById($medicalProductID, array('contain' => false));
            $inventoryData = $this->MedicalProductQuantity->find('all', array('conditions' => array('MedicalProductQuantity.medical_product_id' => $medicalProductID, 'MedicalProductQuantity.thinapp_id' => $thinappID,), 'order' => array('id DESC'), 'contain' => false));
            $login1 = $this->Session->read('Auth.User');
            $reportTitle = $login1['Thinapp']['name'].' ('.date('d/m/Y').')';
            $this->set(compact('reportTitle','inventoryData', 'medicalProductID', 'medicalProData'));

        } else {
            $this->redirect(array("controller" => "app_admin", "action" => "hospital_service_hospital"));
        }
    }

    public function edit_product_quantity_hospital($productQuantityID = null, $productID = null)
    {
        if (!empty($productQuantityID)) {
            $this->layout = "app_admin_home";
            $login = $this->Session->read('Auth.User.User');
            $thinappID = $login['thinapp_id'];
            $productQuantityID = base64_decode($productQuantityID);


            if ($this->request->is(array('post', 'put'))) {
                $data = $this->request->data['MedicalProductQuantity'];
                if (!empty($data['expiry_date'])) {
                    $date = DateTime::createFromFormat('d/m/Y', $data['expiry_date']);
                    $data['expiry_date'] = $date->format('Y-m-d');
                } else {
                    $data['expiry_date'] = '0000-00-00';
                }
                $data['quantity'] = ($data['quantity'] > 0) ? $data['quantity'] : 0;
                $data['id'] = $productQuantityID;
                $this->MedicalProductQuantity->set($data);
                if ($this->MedicalProductQuantity->validates()) {
                    if ($this->MedicalProductQuantity->save($data)) {
                        $this->Session->setFlash('Edited successfully!', 'default', array(), 'success');
                        $this->redirect(array('controller' => 'app_admin', 'action' => 'list_hospital_service_inventory_hospital', $productID));
                    } else {
                        $this->Session->setFlash("Sorry, Couldn't edit!", 'default', array(), 'error');
                    }
                }
            } else {

                $this->request->data = $this->MedicalProductQuantity->findById($productQuantityID, array('contain' => false));

            }


            $medicalProData = $this->MedicalProduct->findById(base64_decode($productID), array('contain' => false));

            $this->set(compact('medicalProData'));

        } else {
            $this->redirect(array("controller" => "app_admin", "action" => "hospital_service_hospital"));
        }
    }

    public function add_product_quantity_hospital($productID = null)
    {
        if ($productID != '') {
            $login = $this->Session->read('Auth.User.User');
            $thinappID = $login['thinapp_id'];
            $productID = base64_decode($productID);
            $data = $this->MedicalProduct->findById($productID, array('contain' => false));
            if (isset($data['MedicalProduct']['thinapp_id']) && ($data['MedicalProduct']['thinapp_id'] == $thinappID)) {
                if ($this->request->is(array('post', 'put'))) {
                    $data = $this->request->data['MedicalProductQuantity'];
                    if (!empty($data['expiry_date'])) {
                        $date = DateTime::createFromFormat('d/m/Y', $data['expiry_date']);
                        $data['expiry_date'] = $date->format('Y-m-d');
                    } else {
                        $data['expiry_date'] = '0000-00-00';
                    }
                    $data['medical_product_id'] = $productID;
                    $data['thinapp_id'] = $thinappID;
                    $data['quantity'] = ($data['quantity'] > 0) ? $data['quantity'] : 0;
                    $this->MedicalProductQuantity->set($data);
                    if ($this->MedicalProductQuantity->validates()) {
                        if ($this->MedicalProductQuantity->save($data)) {
                            $this->Session->setFlash('Saved successfully!', 'default', array(), 'success');
                            $this->redirect(array('controller' => 'app_admin', 'action' => 'list_hospital_service_inventory_hospital', base64_encode($productID)));
                        } else {
                            $this->Session->setFlash("Sorry, Couldn't save!", 'default', array(), 'error');
                        }
                    }
                }
                $medicalProData = $this->MedicalProduct->findById($productID, array('contain' => false));
                $this->set(compact('medicalProData'));
            } else {
                $this->redirect(array("controller" => "app_admin", "action" => "hospital_service_hospital"));
            }
        } else {
            $this->redirect(array("controller" => "app_admin", "action" => "hospital_service_hospital"));
        }
    }

    public function search_inventory_report_hospital()
    {

        $reqData = $this->request->data;
        $pram = array();
        $query = $this->request->query;
        if (!empty($query['medical_product_id'])) {
            $pram['mid'] = $query['medical_product_id'];
        }

        if (!empty($query['expiry_from'])) {
            $pram['ef'] = $query['expiry_from'];
        }
        if (!empty($query['expiry_to'])) {
            $pram['et'] = $query['expiry_to'];
        }

        $this->redirect(
            array(
                "controller" => "app_admin",
                "action" => "get_inventory_report_hospital",
                "?" => $pram,
            )
        );

    }

    public function get_inventory_report_hospital()
    {
        $login = $this->Session->read('Auth.User.User');
        $thinappID = $login['thinapp_id'];


        $loginLab = $_SESSION['Auth']['User'];
        $roleLab = $loginLab['USER_ROLE'];

        $condition['OR'][] = array('MedicalProductQuantity.thinapp_id' => $thinappID);
        $condition1['OR'][] = array('MedicalProduct.thinapp_id' => $thinappID);

        $condition['MedicalProduct.is_billable'] = 0;

        $condition1['MedicalProduct.is_billable'] = 0;


        if ($roleLab == "LAB" || $roleLab == 'PHARMACY') {
            $isInhouse = $loginLab['LabPharmacyUser']['is_inhouse'];
            if($isInhouse == 'YES')
            {

                $condition['MedicalProduct.lab_pharmacy_user_id'] = $condition1['MedicalProduct.lab_pharmacy_user_id'] = array(
                    '0',
                    $loginLab['LabPharmacyUser']['id'],
                );
            }
            else
            {
                $condition['MedicalProduct.lab_pharmacy_user_id'] = $loginLab['LabPharmacyUser']['id'];
                $condition1['MedicalProduct.lab_pharmacy_user_id'] = $loginLab['LabPharmacyUser']['id'];
            }


        } else {
            $condition['OR'][] = $condition1['OR'][] = array('AND' => array(
                'MedicalProduct.lab_pharmacy_type' => 'LAB',
                'MedicalProduct.lab_pharmacy_is_inhouse' => 'YES',
            ));


        }


        $searchData = $this->request->query;
        $conditions = array();
        if (isset($searchData['mid']) && !empty($searchData['mid'])) {
            $this->request->data['Search']['medical_product_id'] = $searchData['mid'];
            $condition["MedicalProductQuantity.medical_product_id"] = $searchData['mid'];
        }

        if (isset($searchData['ef']) && !empty($searchData['ef'])) {
            $this->request->data['Search']['expiry_from'] = $searchData['ef'];
            $date = DateTime::createFromFormat('d/m/Y', $searchData['ef']);
            $date1 = $date->format('Y-m-d');
            $condition["MedicalProductQuantity.expiry_date >="] = $date1;
        }

        if (isset($searchData['et']) && !empty($searchData['et'])) {
            $this->request->data['Search']['expiry_to'] = $searchData['et'];
            $date = DateTime::createFromFormat('d/m/Y', $searchData['et']);
            $date1 = $date->format('Y-m-d');
            $condition["MedicalProductQuantity.expiry_date <="] = $date1;
        }

        $productList = $this->MedicalProduct->find('list', array('conditions' => $condition1, 'order' => array('MedicalProduct.name' => 'ASC')));
        $data = $this->MedicalProductQuantity->find('all', array("fields"=>array('MedicalProductQuantity.*','MedicalProduct.*','COUNT(MedicalProductQuantity.id) AS total'),'conditions' => $condition,'order' => array( 'MedicalProductQuantity.id DESC' ),'group'=>'MedicalProduct.id' ));

        $login1 = $this->Session->read('Auth.User');
        $reportTitle = $login1['Thinapp']['name'].' ('.$this->request->data['Search']['expiry_from'].' - '.$this->request->data['Search']['expiry_to'].')';

        $this->set(array('reportTitle'=>$reportTitle,'dataToSend' => $data, 'productList' => $productList));
    }

    public function get_medical_product_dead_list()
    {
        $this->layout = 'ajax';
        if ($this->request->is('ajax')) {
            $qtyID = $this->request->data['qty_id'];
            $medicalProductDeadList = $this->MedicalProductQuantityDead->find('all', array('conditions' => array('MedicalProductQuantityDead.medical_product_quantity_id' => $qtyID)));
            $this->set(compact('medicalProductDeadList', 'qtyID'));
            $this->render('get_medical_product_dead_list', 'ajax');
        }

    }

    public function get_medical_product_qty_list(){
        $this->layout = 'ajax';
        if ($this->request->is('ajax')) {
            $qtyID = $this->request->data['qtyID'];
            $proID = $this->request->data['proID'];
            $type = $this->request->data['type'];
            $condition = array('MedicalProduct.id'=>$proID,'MedicalProductQuantity.id <>'=>$qtyID);
            $data = $this->MedicalProductQuantity->find('all', array('conditions' => $condition,'order' => array( 'MedicalProductQuantity.id DESC' ) ));
            $this->set(compact('data','type'));
            $this->render('get_medical_product_qty_list', 'ajax');
        }
    }

    public function add_medical_product_dead_quantity()
    {
        $this->layout = false;
        if ($this->request->is('ajax')) {
            $data = $this->request->data;
            $dataToSave = array('dead_quantity' => $data['dead_quantity'], 'comment' => $data['comment'], 'medical_product_quantity_id' => $data['qty_id']);
            if ($this->MedicalProductQuantityDead->save($dataToSave)) {
                $this->MedicalProductQuantity->query("UPDATE `medical_product_quantities` SET `dead` = (`dead` + '" . $data['dead_quantity'] . "') WHERE `id` = '" . $data['qty_id'] . "'");
                $dataToSend = array('status' => 1, 'message' => 'Successfully saved.');
            } else {
                $dataToSend = array('status' => 0, 'message' => 'Oops! Something went wrong.');
            }
            echo json_encode($dataToSend);
            die;
        }
    }

    public function edit_medical_product_dead_quantity()
    {
        $this->layout = false;
        if ($this->request->is('ajax')) {
            $data = $this->request->data;
            $dataToSave = array('dead_quantity' => $data['dead_quantity_edit'], 'comment' => $data['comment_edit'], 'id' => $data['dead_id']);
            $oldData = $this->MedicalProductQuantityDead->findById($data['dead_id'], array('contain' => false));
            if ($this->MedicalProductQuantityDead->save($dataToSave)) {

                if ($data['dead_quantity_edit'] > $oldData['MedicalProductQuantityDead']['dead_quantity']) {
                    $addString = '+ ' . $data['dead_quantity_edit'] - $oldData['MedicalProductQuantityDead']['dead_quantity'];
                } else {
                    $addString = '- ' . $oldData['MedicalProductQuantityDead']['dead_quantity'] - $data['dead_quantity_edit'];
                }

                $this->MedicalProductQuantity->query("UPDATE `medical_product_quantities` SET `dead` = (`dead` '" . $addString . "') WHERE `id` = '" . $oldData['MedicalProductQuantityDead']['medical_product_quantity_id'] . "'");

                $dataToSend = array('status' => 1, 'message' => 'Successfully saved.');
            } else {
                $dataToSend = array('status' => 0, 'message' => 'Oops! Something went wrong.');
            }
            echo json_encode($dataToSend);
            die;
        }
    }

    public function add_admin_book_appointment()
    {
        $this->layout = 'ajax';
        if ($this->request->is('ajax')) {
            $this->render('add_admin_book_appointment', 'ajax');
        }
    }

    public function save_billing_report_table_header()
    {
        $this->autoRender = false;
        $login = $this->Session->read('Auth.User');
        $thin_app_id = $login['User']['thinapp_id'];
        if ($this->request->is('ajax')) {
            $columns = json_encode($this->request->data['columns']);
            $connection = ConnectionUtil::getConnection();
            $sql = "UPDATE  thinapps SET  billing_report_table_column = ?, modified = ? where id = ?";
            $stmt_df = $connection->prepare($sql);
            $created = Custom::created();
            $stmt_df->bind_param('sss', $columns, $created, $thin_app_id);
            if($stmt_df->execute()){
                WebservicesFunction::deleteJson(array("billing_report_$thin_app_id"),"billing_report");
                return true;
            }

        }
        return false;
    }

    public function send_blog_post()
    {
        $this->layout = 'ajax';
        $login = $this->Session->read('Auth.User.User');
        $thin_app_id = $login['thinapp_id'];

        if ($this->request->is('ajax')) {
            $title = "Add Blog";
            $message_id = @$this->request->data['data_id'];
            if(!empty($message_id)){
                $title = "Edit Blog";
                $message_data = Custom::get_message_by_id(base64_decode($message_id));
            }else{
                $message_id = 0;
            }
            $this->set(compact('title','message_data','message_id'));
            $this->render('send_blog_post', 'ajax');

        }else{
            exit();
        }

    }

    public function delete_blog_post()
    {
        $this->layout = 'ajax';
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $message_id = @$this->request->data['data_id'];
            if(!empty($message_id)){
                $message_id = base64_decode($message_id);
                $query = "update messages set status =?, modified =? where id = ?";
                $connection = ConnectionUtil::getConnection();
                $stmt = $connection->prepare($query);
                $status = "N";
                $created = Custom::created();
                $stmt->bind_param('sss', $status, $created, $message_id);

                $status = "INACTIVE";
                $query = "update channel_messages set status =?, modified =? where message_id = ?";
                $cm_stmt = $connection->prepare($query);
                $cm_stmt->bind_param('sss', $status, $created, $message_id);
                if ($stmt->execute() && $cm_stmt->execute()) {
                    $response['status'] = 1;
                    $response['message'] = "Post deleted successfully";
                }else {
                    $response['status'] = 0;
                    $response['message'] = "Sorry post could not delete";
                }
            }else{
                $response['status'] = 0;
                $response['message'] = "Invalid post";
            }
            echo json_encode($response);
        }else{
            exit();
        }

    }


/*************CREATED BY VISHWAJEET START************/
    public function add_dental_supplier(){
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User.User');


        if ($this->request->is(array('post', 'put'))) {
            $dataToSave = $this->request->data;
            $dataToSave['DentalSupplier']['thinapp_id'] = $login['thinapp_id'];
            $dataToSave['DentalSupplier']['mobile'] = Custom::create_mobile_number($dataToSave['DentalSupplier']['mobile']);
            $dataToSave['DentalSupplier']['whatsapp_mobile'] = Custom::create_mobile_number($dataToSave['DentalSupplier']['whatsapp_mobile']);
            $dataToSave['DentalSupplier']['password'] = md5(substr($dataToSave['DentalSupplier']['mobile'], -10));

            $user_data = Custom::get_user_by_mobile($login['thinapp_id'], $dataToSave['DentalSupplier']['mobile']);
            if(!$user_data)
            {
                $dataToSaveInUser = array('role_id'=>1,'username'=>'Supplier','mobile'=>$dataToSave['DentalSupplier']['mobile'],'thinapp_id'=>$login['thinapp_id']);
                $this->User->saveAll($dataToSaveInUser);
                $userID = $this->User->getLastInsertId();
                $dataToSave['DentalSupplier']['user_id'] = $userID;
            }
            else
            {
                $dataToSave['DentalSupplier']['user_id'] = $user_data['id'];
            }


            //$user_role_id = 1;
            //$sql = "INSERT INTO users (role_id, username, mobile, thinapp_id, created, modified) VALUES (?, ?, ?, ?, ?, ?)";


            if ($this->DentalSupplier->saveAll($dataToSave)) {
                $this->Session->setFlash(__('Added successfully.'), 'default', array(), 'success');
                $this->redirect(array('controller' => 'app_admin', 'action' => 'list_dental_supplier'));
            } else {
                $this->Session->setFlash(__('Sorry, Could not be added.'), 'default', array(), 'error');
            }

        }


    }

    public function list_dental_supplier() {
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User.User');
        $thinappID = $login['thinapp_id'];
        $dentalSupplierData = $this->DentalSupplier->find('all',array('conditions'=>array("thinapp_id"=>$thinappID),'contain'=>false));
        $login1 = $this->Session->read('Auth.User');
        $reportTitle = $login1['Thinapp']['name'].' ('.date('d/m/Y').')';
        $this->set(array('reportTitle'=>$reportTitle,'dentalSupplierData'=>$dentalSupplierData));
    }

    public function get_edit_dental_supplier(){
        $this->layout = 'ajax';
        if ($this->request->is('ajax')) {
            $supplierID = $this->request->data['supplierID'];
            $dataToSend = array();
            $dentalSupplierData = $this->DentalSupplier->findById($supplierID,array('contain'=>false));

            if(!empty($dentalSupplierData))
            {
                $dataToSend = array('status'=>1,'data'=>$dentalSupplierData);
            }
            else
            {
                $dataToSend = array('status'=>0,'message'=>'Something went wrong on server!');
            }
            echo json_encode($dataToSend); die;
        }
    }

    public function edit_dental_supplier(){
        $this->layout = 'ajax';
        if ($this->request->is('ajax')) {
            $supplierData = $this->request->data;
            $dataToSend = array();
            //$supplierData['mobile'] = Custom::create_mobile_number($supplierData['mobile']);
            $supplierData['whatsapp_mobile'] = Custom::create_mobile_number($supplierData['whatsapp_mobile']);

            if($this->DentalSupplier->save($supplierData))
            {
                $dataToSend = array('status'=>1,'message'=>'Saved!');
            }
            else
            {
                $dataToSend = array('status'=>0,'message'=>'Something went wrong on server!');
            }
            echo json_encode($dataToSend); die;
        }
    }

    public function dental_supplier_order_setting(){
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User.User');
        $thinappID = $login['thinapp_id'];

        $teethShade = $this->TeethShade->find('all',array('conditions'=>array("thinapp_id"=>$thinappID,"status"=>"ACTIVE"),"contain"=>false));
        $teethAttachment = $this->TeethAttachment->find('all',array('conditions'=>array("thinapp_id"=>$thinappID,"status"=>"ACTIVE"),"contain"=>false));
        $teethTextCategory = $this->TeethTextCategory->find('all',array('conditions'=>array("thinapp_id"=>$thinappID,"status"=>"ACTIVE"),"contain"=>false));
        $teethTextSubCategory = $this->TeethTextSubCategory->find('all',array('conditions'=>array("thinapp_id"=>$thinappID,"status"=>"ACTIVE"),"contain"=>false));
        $teethImageCategory = $this->TeethImageCategory->find('all',array('conditions'=>array("thinapp_id"=>$thinappID,"status"=>"ACTIVE"),"contain"=>false));
        $teethImageSubCategory = $this->TeethImageSubCategory->find('all',array('conditions'=>array("thinapp_id"=>$thinappID,"status"=>"ACTIVE"),"contain"=>false));
        $this->set(array('teethShade'=>$teethShade,'teethAttachment'=>$teethAttachment,'teethTextCategory'=>$teethTextCategory,'teethTextSubCategory'=>$teethTextSubCategory,'teethImageCategory'=>$teethImageCategory,'teethImageSubCategory'=>$teethImageSubCategory));
    }

    public function update_dental_supplier_setting()
    {
        $this->layout = 'ajax';
        if ($this->request->is('ajax')) {
            $datasource = $this->TeethShade->getDataSource();
            $datasource->begin();
            try {
                $dataToSave = $this->request->data;
                //pr($dataToSave); die;
                $login = $this->Session->read('Auth.User.User');
                $thinappID = $login['thinapp_id'];

                $this->TeethShade->updateAll(array('TeethShade.status' => "'" . "INACTIVE" . "'"), array('TeethShade.thinapp_id' => $thinappID));
                $this->TeethAttachment->updateAll(array('TeethAttachment.status' => "'" . "INACTIVE" . "'"), array('TeethAttachment.thinapp_id' => $thinappID));
                $this->TeethTextCategory->updateAll(array('TeethTextCategory.status' => "'" . "INACTIVE" . "'"), array('TeethTextCategory.thinapp_id' => $thinappID));
                $this->TeethTextSubCategory->updateAll(array('TeethTextSubCategory.status' => "'" . "INACTIVE" . "'"), array('TeethTextSubCategory.thinapp_id' => $thinappID));
                $this->TeethImageCategory->updateAll(array('TeethImageCategory.status' => "'" . "INACTIVE" . "'"), array('TeethImageCategory.thinapp_id' => $thinappID));
                $this->TeethImageCategory->updateAll(array('TeethImageCategory.status' => "'" . "INACTIVE" . "'"), array('TeethImageCategory.thinapp_id' => $thinappID));

                $dataToSaveTeethShade = array();
                foreach($dataToSave['TeethShade'] AS $teethShade){
                    $dataToSaveTeethShade[] = array('thinapp_id'=>$thinappID,'shade'=>$teethShade);
                }
                $this->TeethShade->saveAll($dataToSaveTeethShade);

                $dataToSaveTeethAttachment = array();
                foreach($dataToSave['TeethAttachment'] AS $teethAttachment){
                    $dataToSaveTeethAttachment[] = array('thinapp_id'=>$thinappID,'name'=>$teethAttachment);
                }
                $this->TeethAttachment->saveAll($dataToSaveTeethAttachment);


                foreach($dataToSave['teethTextCategory'] AS $key => $teethTextCategory){
                    $dataToSaveTeethTextCategory = array('thinapp_id'=>$thinappID,'name'=>$teethTextCategory);
                    $this->TeethTextCategory->saveAll($dataToSaveTeethTextCategory);
                    $last_inser_id = $this->TeethTextCategory->getLastInsertId();
                    $dataToSaveTextSubcategory = array();
                    foreach($dataToSave['teethTextSubcategory'][$key] AS $teethTextSubcategory){
                        $dataToSaveTextSubcategory[] = array('thinapp_id'=>$thinappID,'name'=>$teethTextSubcategory,'teeth_text_category_id'=>$last_inser_id);
                    }
                    $this->TeethTextSubCategory->saveAll($dataToSaveTextSubcategory);
                }

                foreach($dataToSave['teethImageCategory'] AS $key1 => $teethImageCategory){
                    $dataToSaveTeethImageCategory = array('thinapp_id'=>$thinappID,'name'=>$teethImageCategory);
                    $this->TeethImageCategory->saveAll($dataToSaveTeethImageCategory);
                    $last_inser_id = $this->TeethImageCategory->getLastInsertId();
                    $dataToSaveImageSubcategory = array();
                    foreach($dataToSave['teethImageSubcategory'][$key1] AS $key2 => $teethImageSubcategory){
                        $fileArr = $_FILES['teethImageSubcategoryFile'];
                        $fileToUpload = array(
                            'name'=>$fileArr['name'][$key1][$key2],
                            'type'=>$fileArr['type'][$key1][$key2],
                            'tmp_name'=>$fileArr['tmp_name'][$key1][$key2],
                            'error'=>$fileArr['error'][$key1][$key2],
                            'size'=>$fileArr['size'][$key1][$key2]
                        );
                        if ($url = $this->Custom->uploadFileToAws($fileToUpload)) {
                            $dataToSaveImageSubcategory[] = array('thinapp_id'=>$thinappID,'image_url'=>$url,'name'=>$teethImageSubcategory,'teeth_image_category_id'=>$last_inser_id);
                        }
                        else
                        {
                            throw new Exception("Couldn't Upload Image!");
                        }

                    }
                    $this->TeethImageSubCategory->saveAll($dataToSaveImageSubcategory);
                }

                $datasource->commit();

                $dataToSend = array('status'=>1,'message'=>"Saved successfully!");


            } catch (Exception $e) {
                $datasource->rollback();
                $dataToSend = array('status'=>0,'message'=>$e->getMessage());
            }
            echo json_encode($dataToSend); die;
        }
    }

    public function dental_add_supplier_order(){
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User.User');

        $thinappID = $login['thinapp_id'];


        /*if ($this->request->is(array('post', 'put'))) {
            $dataToSave = $this->request->data;
            pr($_FILES);
            pr($dataToSave); die;
        }*/

        $dentalSupplier = $this->DentalSupplier->find('list',array('conditions'=>array("thinapp_id"=>$thinappID,"status"=>"ACTIVE"),"contain"=>false));
        $teethShade = $this->TeethShade->find('all',array('conditions'=>array("thinapp_id"=>$thinappID,"status"=>"ACTIVE"),"contain"=>false));
        $teethAttachment = $this->TeethAttachment->find('all',array('conditions'=>array("thinapp_id"=>$thinappID,"status"=>"ACTIVE"),"contain"=>false));
        $teethTextCategory = $this->TeethTextCategory->find('all',array('conditions'=>array("TeethTextCategory.thinapp_id"=>$thinappID,"TeethTextCategory.status"=>"ACTIVE"),"contain"=>array('TeethTextSubCategory')));
        $teethImageCategory = $this->TeethImageCategory->find('all',array('conditions'=>array("TeethImageCategory.thinapp_id"=>$thinappID,"TeethImageCategory.status"=>"ACTIVE"),"contain"=>array('TeethImageSubCategory')));
        $teethNumber = $this->TeethNumber->find('all',array('conditions'=>array(/*"thinapp_id"=>$thinappID,*/"status"=>"ACTIVE"),"contain"=>false,"order"=>"id DESC"));
        $teethNumberFormated = array('UPPER_RIGHT'=>array(),'UPPER_LEFT'=>array(),'LOWER_LEFT'=>array(),'LOWER_RIGHT'=>array());

        foreach($teethNumber AS $numData){
            if($numData['TeethNumber']['type'] == 'UPPER_RIGHT')
            {
                $teethNumberFormated['UPPER_RIGHT'][] = $numData;
            }
            else if($numData['TeethNumber']['type'] == 'UPPER_LEFT')
            {
                $teethNumberFormated['UPPER_LEFT'][] = $numData;
            }
            else if($numData['TeethNumber']['type'] == 'LOWER_RIGHT')
            {
                $teethNumberFormated['LOWER_RIGHT'][] = $numData;
            }
            else if($numData['TeethNumber']['type'] == 'LOWER_LEFT')
            {
                $teethNumberFormated['LOWER_LEFT'][] = $numData;
            }
        }

        usort($teethNumberFormated['UPPER_RIGHT'], function ($a, $b) {
            return $a['TeethNumber']['number'] < $b['TeethNumber']['number'] ? -1 : 1;
        });
        usort($teethNumberFormated['UPPER_LEFT'], function ($a, $b) {
            return $a['TeethNumber']['number'] < $b['TeethNumber']['number'] ? -1 : 1;
        });
        usort($teethNumberFormated['LOWER_RIGHT'], function ($a, $b) {
            return $a['TeethNumber']['number'] < $b['TeethNumber']['number'] ? -1 : 1;
        });
        usort($teethNumberFormated['LOWER_LEFT'], function ($a, $b) {
            return $a['TeethNumber']['number'] < $b['TeethNumber']['number'] ? -1 : 1;
        });



        $this->set(array('dentalSupplier'=>$dentalSupplier,'teethNumberFormated'=>$teethNumberFormated,'teethShade'=>$teethShade,'teethAttachment'=>$teethAttachment,'teethTextCategory'=>$teethTextCategory,'teethImageCategory'=>$teethImageCategory));
    }

    /*public function add_supplier_order()
    {
        $this->layout = 'ajax';
        if ($this->request->is('ajax')) {
            $datasource = $this->TeethOrder->getDataSource();
            $datasource->begin();
            try {
                $dataToSave = $this->request->data;
                //pr($dataToSave); die;
                $login = $this->Session->read('Auth.User.User');

                $thinappID = $login['thinapp_id'];

                $login1 = $this->Session->read('Auth.User');
                $thinappName = $login1['Thinapp']['name'];

                $date = DateTime::createFromFormat('d/m/Y', $dataToSave['date']);
                $date = $date->format('Y-m-d');

                $expectedDeliveryDate = DateTime::createFromFormat('d/m/Y', $dataToSave['expected_delivery_date']);
                $expectedDeliveryDate = $expectedDeliveryDate->format('Y-m-d');

                $attachmentUrl = "";
                if ( !empty($_FILES['attachment_url']) ) {
                    if($url = $this->Custom->uploadFileToAws($_FILES['attachment_url']))
                    {
                        $attachmentUrl = $url;
                    }
                    else
                    {
                        throw new Exception("Couldn't Upload Image!");
                    }
                }
                $countOrder = $this->TeethOrder->find('count',array('thinapp_id'=>$thinappID,'MONTH(TeethOrder.created)'=>date('m'),'YEAR(TeethOrder.created)'=>date('Y'),));
                $dataToSaveInTeethOrder = array(
                    'thinapp_id'=>$thinappID,
                    'order_number'=>date('Ym').($countOrder+1),
                    'patient_name'=>$dataToSave['patient_name'],
                    'dental_supplier_id'=>$dataToSave['dental_supplier_id'],
                    'gender'=>$dataToSave['gender'],
                    'age'=>$dataToSave['age'],
                    'sent'=> implode(",",$dataToSave['sent']),
                    'date'=>$date,
                    'expected_delivery_date'=>$expectedDeliveryDate,
                    'mt'=>$dataToSave['mt'],
                    'bt'=>$dataToSave['bt'],
                    'coping_trial'=>$dataToSave['coping_trial'],
                    'finish'=>$dataToSave['finish'],
                    'instructions'=>$dataToSave['instructions'],
                    'attachment_url'=>$attachmentUrl
                );

                $this->TeethOrder->saveAll($dataToSaveInTeethOrder);
                $orderID = $this->TeethOrder->getLastInsertId();

                $dataToSaveInTeethNumberOrder = array();
                foreach($dataToSave['teeth_number'] AS $teethNumberID)
                {
                    $numberData = $this->TeethNumber->findById($teethNumberID,array('contain'=>false));
                    $dataToSaveInTeethNumberOrder[] = array(
                        "thinapp_id"=>$thinappID,
                        "teeth_order_id"=>$orderID,
                        "teeth_number_id"=>$numberData['TeethNumber']['id'],
                        "number"=>$numberData['TeethNumber']['number'],
                        "type"=>$numberData['TeethNumber']['type'],
                    );
                }
                $this->TeethNumberOrder->saveAll($dataToSaveInTeethNumberOrder);

                $dataToSaveTeethTextCategoryOrder = array();
                foreach($dataToSave['teeth_text_sub_category'] AS $teethSubCategoryID)
                {
                    $teethTextSubCategoryData = $this->TeethTextSubCategory->find('first',array('conditions'=>array('TeethTextSubCategory.id'=>$teethSubCategoryID),'contain'=>array('TeethTextCategory')));

                    $dataToSaveTeethTextCategoryOrder[] = array(
                        "thinapp_id"=>$thinappID,
                        "teeth_order_id"=>$orderID,
                        "teeth_text_category_id"=>$teethTextSubCategoryData['TeethTextCategory']['id'],
                        "teeth_text_sub_category_id"=>$teethTextSubCategoryData['TeethTextSubCategory']['id'],
                        "teeth_text_category_name"=>$teethTextSubCategoryData['TeethTextCategory']['name'],
                        "teeth_text_sub_category_name"=>$teethTextSubCategoryData['TeethTextSubCategory']['name'],
                    );

                }
                $this->TeethTextCategoryOrder->saveAll($dataToSaveTeethTextCategoryOrder);

                $dataToSaveTeethImageCategoryOrder = array();
                foreach($dataToSave['teeth_image_sub_category'] AS $teethSubCategoryID)
                {
                    $teethImageSubCategoryData = $this->TeethImageSubCategory->find('first',array('conditions'=>array('TeethImageSubCategory.id'=>$teethSubCategoryID),'contain'=>array('TeethImageCategory')));

                    $dataToSaveTeethImageCategoryOrder[] = array(
                        "thinapp_id"=>$thinappID,
                        "teeth_order_id"=>$orderID,
                        "teeth_image_category_id"=>$teethImageSubCategoryData['TeethImageCategory']['id'],
                        "teeth_image_sub_category_id"=>$teethImageSubCategoryData['TeethImageSubCategory']['id'],
                        "teeth_image_category_name"=>$teethImageSubCategoryData['TeethImageCategory']['name'],
                        "teeth_image_sub_category_name"=>$teethImageSubCategoryData['TeethImageSubCategory']['name'],
                        "image_url"=>$teethImageSubCategoryData['TeethImageSubCategory']['image_url']
                    );

                }
                $this->TeethImageCategoryOrder->saveAll($dataToSaveTeethImageCategoryOrder);


                $dataToSaveInTeethShade = array();
                foreach($dataToSave['teeth_shades'] AS $teethShadeID)
                {
                    $shadeData = $this->TeethShade->findById($teethShadeID,array('contain'=>false));
                    $dataToSaveInTeethShade[] = array(
                        "thinapp_id"=>$thinappID,
                        "teeth_order_id"=>$orderID,
                        "teeth_shade_id"=>$shadeData['TeethShade']['id'],
                        "shade"=>$shadeData['TeethShade']['shade'],
                    );
                }
                $this->TeethShadeOrder->saveAll($dataToSaveInTeethShade);

                $dataToSaveInTeethAttachment = array();
                foreach($dataToSave['teeth_attachments'] AS $teethAttachmentID)
                {
                    $teethAttachmentData = $this->TeethAttachment->findById($teethAttachmentID,array('contain'=>false));
                    $dataToSaveInTeethAttachment[] = array(
                        "thinapp_id"=>$thinappID,
                        "teeth_order_id"=>$orderID,
                        "teeth_attachment_id"=>$teethAttachmentData['TeethAttachment']['id'],
                        "name"=>$teethAttachmentData['TeethAttachment']['name'],
                    );
                }
                $this->TeethAttachmentOrder->saveAll($dataToSaveInTeethAttachment);

                $supplierData = $this->DentalSuplier->find("first",array("conditions"=>array("DentalSuplier.id"=>$dataToSave['dental_supplier_id']),"contain"=>false));

                foreach($dataToSave['sent'] AS $sent)
                {
                    if($sent == 'SMS')
                    {
                        $message = "New order received from ".$thinappName;
                        $mobile = $supplierData["DentalSuplier"]["mobile"];
                        if (Custom::get_total_sms_thinapp($thinapp_id, 'T') > 1)
                        {
                            Custom::send_single_sms($mobile, $message, $thinapp_id, $app_name = true, $send_app_download_link = false);
                        }
                    }

                    if($sent == 'EMAIL')
                    {
                        $message = "New order received from ".$thinappName;
                        $mobile = $supplierData["DentalSuplier"]["mobile"];


                        $body = "Hello ".$supplierData['DentalSuplier']['name'].", \n\n New order received from ".$thinappName.": <br>";
                        $subject = "New order received from ".$thinappName;
                        $to = $supplierData['DentalSuplier']['email'];
                        $from = "info@mengage.in";
                        $name = $thinappName;
                        $this->Custom->sendEmail($to,$from,$subject,$body,$name);



                    }

                }


                $datasource->commit();

                $dataToSend = array('status'=>1,'message'=>"Saved successfully!");


            } catch (Exception $e) {
                $datasource->rollback();
                $dataToSend = array('status'=>0,'message'=>$e->getMessage());
            }
            echo json_encode($dataToSend); die;
        }
    }*/

    public function list_dental_supplier_order(){
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User.User');
        $thinappID = $login['thinapp_id'];

        $orderList = $this->TeethOrder->find("all",array("conditions"=>array("TeethOrder.thinapp_id"=>$thinappID),"order"=>"TeethOrder.id DESC","contain"=>array("DentalSupplier")));
        $login1 = $this->Session->read('Auth.User');
        $reportTitle = $login1['Thinapp']['name'].' ('.date('d/m/Y').')';
        $this->set(array('reportTitle'=>$reportTitle,'orderList'=>$orderList));
    }

    public function update_dental_order_status(){
        $this->layout = 'ajax';
        if ($this->request->is('ajax')) {
            $login = $this->Session->read('Auth.User.User');
            $thinappID = $login['thinapp_id'];
            $dataToSave = $this->request->data;
            $orderID = $dataToSave['orderID'];
            $status = $dataToSave['status'];
            if($status == 'ACTIVE')
            {
                $statusToUpdate = 'INACTIVE';
            }
            else
            {
                $statusToUpdate = 'ACTIVE';
            }
            if($this->TeethOrder->updateAll(array('TeethOrder.status'=>"'".$statusToUpdate."'"),array('TeethOrder.id'=>$orderID,'TeethOrder.thinapp_id'=>$thinappID,)))
            {
                $dataToSend = array('status'=>1,'message'=>$statusToUpdate);
            }
            else
            {
                $dataToSend = array('status'=>0,'message'=>'Something went wrong!');
            }

            echo json_encode($dataToSend); die;
        }
    }

    public function update_dental_order_delivery_status(){
        $this->layout = 'ajax';
        if ($this->request->is('ajax')) {
            $login = $this->Session->read('Auth.User.User');
            $thinappID = $login['thinapp_id'];
            $dataToSave = $this->request->data;
            $orderID = $dataToSave['orderID'];
            $status = $dataToSave['status'];

            if($this->TeethOrder->updateAll(array('TeethOrder.order_status'=>"'".$status."'"),array('TeethOrder.id'=>$orderID,'TeethOrder.thinapp_id'=>$thinappID,)))
            {
                $dataToSend = array('status'=>1,'message'=>"Successfully updated!");
            }
            else
            {
                $dataToSend = array('status'=>0,'message'=>'Something went wrong!');
            }

            echo json_encode($dataToSend); die;
        }
    }

    public function dental_supplier_order(){
        $login = $this->Session->read('Auth.User');
        $thinappID = $login['User']['thinapp_id'];
        $supplierID = $login['DentalSupplier']['id'];

        $orderList = $this->TeethOrder->find('all',array('conditions'=>array('TeethOrder.status'=>'ACTIVE','TeethOrder.thinapp_id'=>$thinappID,'TeethOrder.dental_supplier_id'=>$supplierID,),'contain'=>false));
        $login1 = $this->Session->read('Auth.User');
        $reportTitle = $login1['Thinapp']['name'].' ('.date('d/m/Y').')';
        $this->set(array('reportTitle'=>$reportTitle,'orderList'=>$orderList));
    }

    public function get_dental_order_status_history(){
        $this->layout = 'ajax';
        if ($this->request->is('ajax')) {
            $login = $this->Session->read('Auth.User');
            $thinappID = $login['User']['thinapp_id'];
            $dataToSave = $this->request->data;
            $orderID = $dataToSave['orderID'];
            $statusHistory = $this->TeethOrderStatusSupplire->find('all',array('conditions'=>array("TeethOrderStatusSupplire.teeth_order_id"=>$orderID,"TeethOrderStatusSupplire.thinapp_id"=>$thinappID,),'order'=>'TeethOrderStatusSupplire.id ASC','contain'=>false));
            $this->set(array('statusHistory'=>$statusHistory,'orderID'=>$orderID,'hasForm'=>'YES'));
            $this->render('update_dental_order_status_supplier', 'ajax');
        }
    }

    public function get_dental_order_status_history_admin(){
        $this->layout = 'ajax';
        if ($this->request->is('ajax')) {
            $login = $this->Session->read('Auth.User');
            $thinappID = $login['User']['thinapp_id'];
            $dataToSave = $this->request->data;
            $orderID = $dataToSave['orderID'];
            $statusHistory = $this->TeethOrderStatusSupplire->find('all',array('conditions'=>array("TeethOrderStatusSupplire.teeth_order_id"=>$orderID,"TeethOrderStatusSupplire.thinapp_id"=>$thinappID,),'order'=>'TeethOrderStatusSupplire.id ASC','contain'=>false));
            $this->set(array('statusHistory'=>$statusHistory,'orderID'=>$orderID,'hasForm'=>'NO'));
            $this->render('update_dental_order_status_supplier', 'ajax');
        }
    }

    public function update_dental_order_status_history(){
        $this->layout = 'ajax';
        if ($this->request->is('ajax')) {
            $login = $this->Session->read('Auth.User');
            $thinappID = $login['User']['thinapp_id'];
            $dataToSave = $this->request->data;
            $orderID = $dataToSave['orderID'];
            $status = $dataToSave['status'];
            $comment = $dataToSave['comment'];
            $dataToSaveInHistory = array('thinapp_id'=>$thinappID,'teeth_order_id'=>$orderID,'status'=>$status,'comment'=>$comment,);
            $this->TeethOrderStatusSupplire->saveAll($dataToSaveInHistory);
            $this->TeethOrder->updateAll(array('TeethOrder.status_from_supplire'=>"'".$status."'",),array('TeethOrder.id'=>$orderID,'TeethOrder.thinapp_id'=>$thinappID,));
            $dataToSend = array('status'=>1,'message'=>'Successfull!');
            echo json_encode($dataToSend); die;
        }
    }

    public function get_dental_order_details($orderID = null){
        $this->layout = false;
        if($orderID != "")
        {
            $orderID = base64_decode($orderID);
            $login = $this->Session->read('Auth.User');
            $thinappID = $login['User']['thinapp_id'];
            $orderData = $this->TeethOrder->find("first",array("conditions"=>array("TeethOrder.thinapp_id"=>$thinappID,"TeethOrder.id"=>$orderID,)));


            $teethNumber = $this->TeethNumber->find('all',array('conditions'=>array(/*"thinapp_id"=>$thinappID,*/"status"=>"ACTIVE"),"contain"=>false,"order"=>"id DESC"));
            $teethNumberFormated = array('UPPER_RIGHT'=>array(),'UPPER_LEFT'=>array(),'LOWER_LEFT'=>array(),'LOWER_RIGHT'=>array());

            foreach($teethNumber AS $numData){
                if($numData['TeethNumber']['type'] == 'UPPER_RIGHT')
                {
                    $teethNumberFormated['UPPER_RIGHT'][] = $numData;
                }
                else if($numData['TeethNumber']['type'] == 'UPPER_LEFT')
                {
                    $teethNumberFormated['UPPER_LEFT'][] = $numData;
                }
                else if($numData['TeethNumber']['type'] == 'LOWER_RIGHT')
                {
                    $teethNumberFormated['LOWER_RIGHT'][] = $numData;
                }
                else if($numData['TeethNumber']['type'] == 'LOWER_LEFT')
                {
                    $teethNumberFormated['LOWER_LEFT'][] = $numData;
                }
            }

            usort($teethNumberFormated['UPPER_RIGHT'], function ($a, $b) {
                return $a['TeethNumber']['number'] < $b['TeethNumber']['number'] ? 1 : -1;
            });
            usort($teethNumberFormated['UPPER_LEFT'], function ($a, $b) {
                return $a['TeethNumber']['number'] < $b['TeethNumber']['number'] ? -1 : 1;
            });
            usort($teethNumberFormated['LOWER_RIGHT'], function ($a, $b) {
                return $a['TeethNumber']['number'] < $b['TeethNumber']['number'] ? 1 : -1;
            });
            usort($teethNumberFormated['LOWER_LEFT'], function ($a, $b) {
                return $a['TeethNumber']['number'] < $b['TeethNumber']['number'] ? -1 : 1;
            });


            $this->set(array('teethNumberFormated'=>$teethNumberFormated,'orderData'=>$orderData));
        }
        else
        {
            die("No data available at the moment!");
        }
    }


/*************CREATED BY VISHWAJEET END************/


    /*************CREATED BY VISHWAJEET START************/

    public function supplier_order_setting(){
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User.User');
        $thinappID = $login['thinapp_id'];

        $formDetail = $this->SupplierOrderForm->find('all',array("conditions"=>array("SupplierOrderForm.status"=>"ACTIVE","SupplierOrderForm.thinapp_id"=>$thinappID),"contain"=>array("SupplierTextTextareaField","SupplierTitleField"=>array("SupplierCheckboxRadioField"),"SupplierAttachmentField"),"order"=>"sort_no ASC"));



        $teethNumber = $this->SupplierTeethNumber->find('all',array('conditions'=>array("status"=>"ACTIVE"),"contain"=>false,"order"=>"id DESC"));
        $teethNumberFormated = array('UPPER_RIGHT'=>array(),'UPPER_LEFT'=>array(),'LOWER_LEFT'=>array(),'LOWER_RIGHT'=>array());
        foreach($teethNumber AS $numData){
            if($numData['SupplierTeethNumber']['type'] == 'UPPER_RIGHT')
            {
                $teethNumberFormated['UPPER_RIGHT'][] = $numData;
            }
            else if($numData['SupplierTeethNumber']['type'] == 'UPPER_LEFT')
            {
                $teethNumberFormated['UPPER_LEFT'][] = $numData;
            }
            else if($numData['SupplierTeethNumber']['type'] == 'LOWER_RIGHT')
            {
                $teethNumberFormated['LOWER_RIGHT'][] = $numData;
            }
            else if($numData['SupplierTeethNumber']['type'] == 'LOWER_LEFT')
            {
                $teethNumberFormated['LOWER_LEFT'][] = $numData;
            }
        }
        usort($teethNumberFormated['UPPER_RIGHT'], function ($a, $b) {
            return $a['SupplierTeethNumber']['number'] < $b['SupplierTeethNumber']['number'] ? -1 : 1;
        });
        usort($teethNumberFormated['UPPER_LEFT'], function ($a, $b) {
            return $a['SupplierTeethNumber']['number'] < $b['SupplierTeethNumber']['number'] ? -1 : 1;
        });
        usort($teethNumberFormated['LOWER_RIGHT'], function ($a, $b) {
            return $a['SupplierTeethNumber']['number'] < $b['SupplierTeethNumber']['number'] ? -1 : 1;
        });
        usort($teethNumberFormated['LOWER_LEFT'], function ($a, $b) {
            return $a['SupplierTeethNumber']['number'] < $b['SupplierTeethNumber']['number'] ? -1 : 1;
        });

        $this->set(array('teethNumberFormated'=>$teethNumberFormated,'formDetail'=>$formDetail));
    }

    public function update_supplier_setting()
    {
        $this->layout = 'ajax';
        $login = $this->Session->read('Auth.User.User');
        $thinappID = $login['thinapp_id'];
        if ($this->request->is('ajax')) {
            try {

                $dataToSave = $this->request->data;
                $ul1 = $dataToSave['ul1'];
                $ul2 = $dataToSave['ul2'];
                $field = $dataToSave['field'];


                $left = array_slice($field,0,$ul1);
                $right = array_slice($field,$ul1,$ul2);
                $fieldData = array();

                if(sizeof($left) >= sizeof($right))
                {
                    foreach($left AS $key8 => $list)
                    {
                        $fieldData[] = $left[$key8];
                        if(isset($right[$key8]))
                        {
                            $fieldData[] = $right[$key8];
                        }
                    }
                }
                else
                {
                    foreach($right AS $key8 => $list)
                    {
                        if(isset($left[$key8]))
                        {
                            $fieldData[] = $left[$key8];
                        }
                        $fieldData[] = $right[$key8];
                    }
                }
                $dataToSave['field'] = $fieldData;

                $datasource = $this->SupplierTextTextareaField->getDataSource();
                $datasource->begin();


                $this->SupplierOrderForm->updateAll(array('SupplierOrderForm.status' => "'" . "INACTIVE" . "'"), array('SupplierOrderForm.thinapp_id' => $thinappID));
                $this->SupplierTextTextareaField->updateAll(array('SupplierTextTextareaField.status' => "'" . "INACTIVE" . "'"), array('SupplierTextTextareaField.thinapp_id' => $thinappID));
                $this->SupplierTitleField->updateAll(array('SupplierTitleField.status' => "'" . "INACTIVE" . "'"), array('SupplierTitleField.thinapp_id' => $thinappID));
                $this->SupplierCheckboxRadioField->updateAll(array('SupplierCheckboxRadioField.status' => "'" . "INACTIVE" . "'"), array('SupplierCheckboxRadioField.thinapp_id' => $thinappID));
                $this->SupplierAttachmentField->updateAll(array('SupplierAttachmentField.status' => "'" . "INACTIVE" . "'"), array('SupplierAttachmentField.thinapp_id' => $thinappID));


                foreach($dataToSave['field'] AS $sortOrder => $field){
                    $dataToSaveField = array();
                    $dataToSaveInDetail = array();
                    $fieldType = key($field);
                    if($fieldType == 'text')
                    {
                        $dataToSaveField['thinapp_id'] = $thinappID;
                        $dataToSaveField['type'] = 'TEXT';
                        $dataToSaveField['status'] = 'ACTIVE';
                        $dataToSaveField['name'] = $field[$fieldType];
                        if($this->SupplierTextTextareaField->saveAll($dataToSaveField))
                        {
                            $insertID = $this->SupplierTextTextareaField->getLastInsertId();
                            $dataToSaveInDetail['thinapp_id'] = $thinappID;
                            $dataToSaveInDetail['is_supplier_teeth_number'] = 'NO';
                            $dataToSaveInDetail['supplier_text_textarea_field_id'] = $insertID;
                            $dataToSaveInDetail['sort_no'] = $sortOrder;
                            $this->SupplierOrderForm->saveAll($dataToSaveInDetail);
                        }
                    }
                    else if($fieldType == 'textarea')
                    {
                        $dataToSaveField['thinapp_id'] = $thinappID;
                        $dataToSaveField['type'] = 'TEXTAREA';
                        $dataToSaveField['status'] = 'ACTIVE';
                        $dataToSaveField['name'] = $field[$fieldType];
                        if($this->SupplierTextTextareaField->saveAll($dataToSaveField))
                        {
                            $insertID = $this->SupplierTextTextareaField->getLastInsertId();
                            $dataToSaveInDetail['thinapp_id'] = $thinappID;
                            $dataToSaveInDetail['is_supplier_teeth_number'] = 'NO';
                            $dataToSaveInDetail['supplier_text_textarea_field_id'] = $insertID;
                            $dataToSaveInDetail['sort_no'] = $sortOrder;
                            $this->SupplierOrderForm->saveAll($dataToSaveInDetail);
                        }
                    }
                    else if($fieldType == 'attachment')
                    {
                        $dataToSaveField['thinapp_id'] = $thinappID;
                        $dataToSaveField['status'] = 'ACTIVE';
                        $dataToSaveField['name'] = $field[$fieldType];
                        if($this->SupplierAttachmentField->saveAll($dataToSaveField))
                        {
                            $insertID = $this->SupplierAttachmentField->getLastInsertId();
                            $dataToSaveInDetail['thinapp_id'] = $thinappID;
                            $dataToSaveInDetail['is_supplier_teeth_number'] = 'NO';
                            $dataToSaveInDetail['supplier_attachment_field_id'] = $insertID;
                            $dataToSaveInDetail['sort_no'] = $sortOrder;
                            $this->SupplierOrderForm->saveAll($dataToSaveInDetail);
                        }
                    }
                    else if($fieldType == 'checkbox_title')
                    {
                        $optionKey = key($field[$fieldType]);
                        $dataToSaveField['thinapp_id'] = $thinappID;
                        $dataToSaveField['status'] = 'ACTIVE';
                        $dataToSaveField['type'] = 'CHECKBOX';
                        $dataToSaveField['name'] = $field[$fieldType][$optionKey];
                        if($this->SupplierTitleField->saveAll($dataToSaveField))
                        {
                            $insertID = $this->SupplierTitleField->getLastInsertId();
                            $checkboxOptions = $dataToSave['option']['checkbox_option'][$optionKey];

                            foreach($checkboxOptions AS $key => $option){
                                $dataToSaveOption['thinapp_id'] = $thinappID;
                                $dataToSaveOption['supplier_title_field_id'] = $insertID;
                                $dataToSaveOption['name'] = $option;
                                $dataToSaveOption['image_url'] = '';
                                $dataToSaveOption['type'] = "CHECKBOX";
                                $this->SupplierCheckboxRadioField->saveAll($dataToSaveOption);
                            }

                            $dataToSaveInDetail['thinapp_id'] = $thinappID;
                            $dataToSaveInDetail['is_supplier_teeth_number'] = 'NO';
                            $dataToSaveInDetail['supplier_title_field_id'] = $insertID;
                            $dataToSaveInDetail['sort_no'] = $sortOrder;
                            $this->SupplierOrderForm->saveAll($dataToSaveInDetail);

                        }

                    }
                    else if($fieldType == 'radio_title'){

                        $optionKey = key($field[$fieldType]);
                        $dataToSaveField['thinapp_id'] = $thinappID;
                        $dataToSaveField['status'] = 'ACTIVE';
                        $dataToSaveField['type'] = 'RADIO';
                        $dataToSaveField['name'] = $field[$fieldType][$optionKey];
                        if($this->SupplierTitleField->saveAll($dataToSaveField))
                        {
                            $insertID = $this->SupplierTitleField->getLastInsertId();
                            $checkboxOptions = $dataToSave['option']['radio_option'][$optionKey];

                            foreach($checkboxOptions AS $key => $option){
                                $dataToSaveOption['thinapp_id'] = $thinappID;
                                $dataToSaveOption['supplier_title_field_id'] = $insertID;
                                $dataToSaveOption['name'] = $option;
                                $dataToSaveOption['image_url'] = '';
                                $dataToSaveOption['type'] = "RADIO";
                                $this->SupplierCheckboxRadioField->saveAll($dataToSaveOption);
                            }

                            $dataToSaveInDetail['thinapp_id'] = $thinappID;
                            $dataToSaveInDetail['is_supplier_teeth_number'] = 'NO';
                            $dataToSaveInDetail['supplier_title_field_id'] = $insertID;
                            $dataToSaveInDetail['sort_no'] = $sortOrder;
                            $this->SupplierOrderForm->saveAll($dataToSaveInDetail);

                        }

                    }
                    else if($fieldType == 'teeth_num')
                    {
                            $dataToSaveInDetail['thinapp_id'] = $thinappID;
                            $dataToSaveInDetail['is_supplier_teeth_number'] = 'YES';
                            $dataToSaveInDetail['sort_no'] = $sortOrder;
                            $this->SupplierOrderForm->saveAll($dataToSaveInDetail);
                    }
                }
                $datasource->commit();
                $dataToSend = array('status'=>1,'message'=>"Saved Successfully!");

            } catch (Exception $e) {
                $datasource->rollback();
                $dataToSend = array('status'=>0,'message'=>$e->getMessage());
            }
        }
        echo json_encode($dataToSend);
        die;
    }

    public function add_supplier(){
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User.User');


        if ($this->request->is(array('post', 'put'))) {
            $dataToSave = $this->request->data;

            $name = $dataToSave['Supplier']['name'];
            $mobile = Custom::create_mobile_number($dataToSave['Supplier']['mobile']);
            $dataToSaveSuplier['Supplier']['password'] = md5(substr($dataToSave['Supplier']['mobile'], -10));

            $supplierData = $this->Supplier->find('first',array('conditions'=>array('mobile'=>$mobile),'contain'=>false));

            if(empty($supplierData))
            {
                $dataToSaveSuplier['Supplier']['name'] = $dataToSave['Supplier']['name'];
                $dataToSaveSuplier['Supplier']['mobile'] = Custom::create_mobile_number($dataToSave['Supplier']['mobile']);
                $dataToSaveSuplier['Supplier']['password'] = md5(substr($dataToSave['Supplier']['mobile'], -10));
                $this->Supplier->saveAll($dataToSaveSuplier);
                $supplierID = $this->Supplier->getLastInsertId();
            }
            else
            {
                $supplierID = $supplierData['Supplier']['id'];
            }

            $dataToSaveHospitalSupplier['thinapp_id'] = $login['thinapp_id'];
            $dataToSaveHospitalSupplier['supplier_id'] = $supplierID;
            $dataToSaveHospitalSupplier['name'] = $dataToSave['Supplier']['name'];
            $dataToSaveHospitalSupplier['mobile'] = $mobile;
            $dataToSaveHospitalSupplier['tel'] = $dataToSave['Supplier']['tel'];
            $dataToSaveHospitalSupplier['whatsapp_mobile'] = $dataToSave['Supplier']['whatsapp_mobile'];
            $dataToSaveHospitalSupplier['email'] = $dataToSave['Supplier']['email'];
            $dataToSaveHospitalSupplier['address'] = $dataToSave['Supplier']['address'];
            $dataToSaveHospitalSupplier['type'] = 'DENTAL';



            if ($this->SupplierHospital->saveAll($dataToSaveHospitalSupplier)) {



                if (Custom::get_total_sms_thinapp($login['thinapp_id'], 'T') > 1)
                {
                    $login1 = $this->Session->read('Auth.User');
                    $thinappName = $login1['Thinapp']['name'];
                    $message = "Hello ".$dataToSave['Supplier']['name'].", \n\nYou are added as a supplier by ".$thinappName.".Click on link to check placed orders by doctor.\n".SITE_PATH."supplier";
                    Custom::send_single_sms($mobile, $message, $login['thinapp_id'], $app_name = false, $send_app_download_link = false);
                }
                if(!empty($dataToSave['Supplier']['email']))
                {
                    $body = "Hello ".$dataToSave['Supplier']['name'].", \n\n You are added as a supplier by ".$thinappName.".Click on the <a href='".SITE_PATH."supplier'>link</a> to check placed orders by doctor.";
                    $subject = "You are added as a supplier by ".$thinappName;
                    $to = $dataToSave['Supplier']['email'];
                    $from = "info@mengage.in";
                    $name = $thinappName;
                    $this->Custom->sendEmail($to,$from,$subject,$body,$name);
                }

                $this->Session->setFlash(__('Added successfully.'), 'default', array(), 'success');
                $this->redirect(array('controller' => 'app_admin', 'action' => 'list_supplier'));
            } else {
                $this->Session->setFlash(__('Sorry, Could not be added.'), 'default', array(), 'error');
            }

        }


    }

    public function list_supplier() {
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User.User');
        $thinappID = $login['thinapp_id'];
        $supplierData = $this->SupplierHospital->find('all',array('conditions'=>array("thinapp_id"=>$thinappID),'contain'=>false));
        $login1 = $this->Session->read('Auth.User');
        $reportTitle = $login1['Thinapp']['name'].' ('.date('d/m/Y').')';
        $this->set(array('supplierData'=>$supplierData,'reportTitle'=>$reportTitle));
    }

    public function get_edit_supplier(){
        $this->layout = 'ajax';
        if ($this->request->is('ajax')) {
            $supplierID = $this->request->data['supplierID'];
            $dataToSend = array();
            $dentalSupplierData = $this->SupplierHospital->findById($supplierID,array('contain'=>false));

            if(!empty($dentalSupplierData))
            {
                $dataToSend = array('status'=>1,'data'=>$dentalSupplierData);
            }
            else
            {
                $dataToSend = array('status'=>0,'message'=>'Something went wrong on server!');
            }
            echo json_encode($dataToSend); die;
        }
    }

    public function edit_supplier(){
        $this->layout = 'ajax';
        if ($this->request->is('ajax')) {
            $supplierData = $this->request->data;
            $dataToSend = array();
            //$supplierData['mobile'] = Custom::create_mobile_number($supplierData['mobile']);
            $supplierData['whatsapp_mobile'] = Custom::create_mobile_number($supplierData['whatsapp_mobile']);

            if($this->SupplierHospital->save($supplierData))
            {
                $dataToSend = array('status'=>1,'message'=>'Saved!');
            }
            else
            {
                $dataToSend = array('status'=>0,'message'=>'Something went wrong on server!');
            }
            echo json_encode($dataToSend); die;
        }
    }

    public function add_supplier_order(){
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User.User');

        $thinappID = $login['thinapp_id'];

        $supplierHospital = $this->SupplierHospital->find('list',array('conditions'=>array("thinapp_id"=>$thinappID,"status"=>"ACTIVE"),"contain"=>false));
        $formDetail = $this->SupplierOrderForm->find('all',array("conditions"=>array("SupplierOrderForm.status"=>"ACTIVE","SupplierOrderForm.thinapp_id"=>$thinappID),"contain"=>array("SupplierTextTextareaField","SupplierTitleField"=>array("SupplierCheckboxRadioField"),"SupplierAttachmentField"),"order"=>"sort_no ASC"));



        $teethNumber = $this->SupplierTeethNumber->find('all',array('conditions'=>array(/*"thinapp_id"=>$thinappID,*/"status"=>"ACTIVE"),"contain"=>false,"order"=>"id DESC"));
        $teethNumberFormated = array('UPPER_RIGHT'=>array(),'UPPER_LEFT'=>array(),'LOWER_LEFT'=>array(),'LOWER_RIGHT'=>array());

        foreach($teethNumber AS $numData){
            if($numData['SupplierTeethNumber']['type'] == 'UPPER_RIGHT')
            {
                $teethNumberFormated['UPPER_RIGHT'][] = $numData;
            }
            else if($numData['SupplierTeethNumber']['type'] == 'UPPER_LEFT')
            {
                $teethNumberFormated['UPPER_LEFT'][] = $numData;
            }
            else if($numData['SupplierTeethNumber']['type'] == 'LOWER_RIGHT')
            {
                $teethNumberFormated['LOWER_RIGHT'][] = $numData;
            }
            else if($numData['SupplierTeethNumber']['type'] == 'LOWER_LEFT')
            {
                $teethNumberFormated['LOWER_LEFT'][] = $numData;
            }
        }

        usort($teethNumberFormated['UPPER_RIGHT'], function ($a, $b) {
            return $a['SupplierTeethNumber']['number'] < $b['SupplierTeethNumber']['number'] ? -1 : 1;
        });
        usort($teethNumberFormated['UPPER_LEFT'], function ($a, $b) {
            return $a['SupplierTeethNumber']['number'] < $b['SupplierTeethNumber']['number'] ? -1 : 1;
        });
        usort($teethNumberFormated['LOWER_RIGHT'], function ($a, $b) {
            return $a['SupplierTeethNumber']['number'] < $b['SupplierTeethNumber']['number'] ? -1 : 1;
        });
        usort($teethNumberFormated['LOWER_LEFT'], function ($a, $b) {
            return $a['SupplierTeethNumber']['number'] < $b['SupplierTeethNumber']['number'] ? -1 : 1;
        });



        $this->set(array('supplierHospital'=>$supplierHospital,'teethNumberFormated'=>$teethNumberFormated,'formDetail'=>$formDetail));
    }

    public function save_supplier_order(){
        $this->layout = 'ajax';
        if ($this->request->is('ajax')) {
            $datasource = $this->SupplierOrder->getDataSource();
            $datasource->begin();
            try {
                $dataToSave = $this->request->data;
                $login = $this->Session->read('Auth.User.User');
                $thinappID = $login['thinapp_id'];

                $countOrder = $this->SupplierOrder->find('count',array('thinapp_id'=>$thinappID,'MONTH(TeethOrder.created)'=>date('m'),'YEAR(TeethOrder.created)'=>date('Y'),));
                $supplierHospitalID = $dataToSave['supplier_hospital_id'];
                $supplierHospitalData = $this->SupplierHospital->findById($supplierHospitalID,array('contain'=>false));
                $supplierMobile = $supplierHospitalData['SupplierHospital']['mobile'];
                $supplierData = $this->Supplier->find('first',array("conditions"=>array("Supplier.mobile"=>$supplierMobile),"contain"=>false));
                $supplierID = $supplierData['Supplier']['id'];

                $date = DateTime::createFromFormat('d/m/Y', $dataToSave['date']);
                $date = $date->format('Y-m-d');

                $expectedDeliveryDate = DateTime::createFromFormat('d/m/Y', $dataToSave['expected_delivery_date']);
                $expectedDeliveryDate = $expectedDeliveryDate->format('Y-m-d');

                $dataToSaveInOrder = array(
                    'thinapp_id'=>$thinappID,
                    'order_no'=>date('Ym').($countOrder+1),
                    'supplier_hospital_id'=>$dataToSave['supplier_hospital_id'],
                    'supplier_id' => $supplierID,
                    'patient_name' => $dataToSave['patient_name'],
                    'gender' => $dataToSave['gender'],
                    'age' => $dataToSave['age'],
                    'sent_by' => implode(',',$dataToSave['sent']),
                    'date' => $date,
                    'expected_delivery_date' => $expectedDeliveryDate,
                );

                $this->SupplierOrder->saveAll($dataToSaveInOrder);
                $supplierOrderID = $this->SupplierOrder->getLastInsertId();

                foreach($dataToSave['sort'] AS $sortOrder => $field)
                {
                    $fieldType = key($field);
                    if($fieldType == "text_textarea")
                    {
                        $supplierTextTextareaFieldID = key($field['text_textarea']);
                        $textField = $this->SupplierTextTextareaField->findById($supplierTextTextareaFieldID,array("contain"=>false));
                        $dataToSaveInOrderDetail = array(
                            "thinapp_id" => $thinappID,
                            "supplier_order_id" =>$supplierOrderID,
                            "title"=>$textField["SupplierTextTextareaField"]["name"],
                            "is_supplier_text_textarea"=>"YES",
                            "sort_no"=>$sortOrder
                        );
                        $this->SupplierOrderDetail->saveAll($dataToSaveInOrderDetail);
                        $supplierOrderDetailID = $this->SupplierOrderDetail->getLastInsertId();
                        $dataToSaveTextDetail = array(
                            "thinapp_id" => $thinappID,
                            "supplier_order_id" => $supplierOrderID,
                            "supplier_order_detail_id" => $supplierOrderDetailID,
                            "supplier_text_textarea_field_id" => $supplierTextTextareaFieldID,
                            "name" => $textField["SupplierTextTextareaField"]["name"],
                            "response" => $field['text_textarea'][$supplierTextTextareaFieldID],
                        );
                        $this->SupplierTextTextareaFieldOrder->saveAll($dataToSaveTextDetail);
                    }
                    else if($fieldType == "title_field_id")
                    {
                        $supplierTitleFieldID = key($field['title_field_id']);
                        $titleFieldData = $this->SupplierTitleField->findById($supplierTitleFieldID,array("contain"=>false));
                        $dataToSaveInOrderDetail = array(
                            "thinapp_id" => $thinappID,
                            "supplier_order_id" =>$supplierOrderID,
                            "title"=>$titleFieldData["SupplierTitleField"]["name"],
                            "is_supplier_checkbox_radio"=>"YES",
                            "sort_no"=>$sortOrder
                        );
                        $this->SupplierOrderDetail->saveAll($dataToSaveInOrderDetail);
                        $supplierOrderDetailID = $this->SupplierOrderDetail->getLastInsertId();

                        foreach($field['title_field_id'][$supplierTitleFieldID] AS $supplierCheckboxRadioFieldID)
                        {
                            $supplierCheckboxRadioFieldData = $this->SupplierCheckboxRadioField->findById($supplierCheckboxRadioFieldID);
                            $dataToSaveInFieldDetail = array(
                                'thinapp_id'=>$thinappID,
                                'supplier_order_id'=>$supplierOrderID,
                                'supplier_title_field_id'=>$supplierTitleFieldID,
                                'supplier_order_detail_id'=>$supplierOrderDetailID,
                                'supplier_title_name'=>$titleFieldData["SupplierTitleField"]["name"],
                                'supplier_checkbox_radio_field_id'=>$supplierCheckboxRadioFieldID,
                                'supplier_checkbox_radio_name'=>$supplierCheckboxRadioFieldData['SupplierCheckboxRadioField']['name'],
                                'type'=>$supplierCheckboxRadioFieldData['SupplierCheckboxRadioField']['type']
                            );
                            $this->SupplierCheckboxRadioOrder->saveAll($dataToSaveInFieldDetail);
                        }
                    }
                    else if($fieldType == "teeth_number")
                    {
                        $dataToSaveInOrderDetail = array(
                            "thinapp_id" => $thinappID,
                            "supplier_order_id" =>$supplierOrderID,
                            "is_supplier_teeth_number"=>"YES",
                            "sort_no"=>$sortOrder
                        );
                        $this->SupplierOrderDetail->saveAll($dataToSaveInOrderDetail);
                        $supplierOrderDetailID = $this->SupplierOrderDetail->getLastInsertId();

                        foreach($field['teeth_number'] AS $teethID){
                            $teethData = $this->SupplierTeethNumber->findById($teethID,array("contain"=>false));
                            $dataToSaveInTeethNumberOrder=array(
                                "thinapp_id"=>$thinappID,
                                "supplier_order_id"=>$supplierOrderID,
                                "supplier_teeth_number_id"=>$teethID,
                                "supplier_order_detail_id"=>$supplierOrderDetailID,
                                "number"=>$teethData['SupplierTeethNumber']['number'],
                                "type"=>$teethData['SupplierTeethNumber']['type'],
                            );
                            $this->SupplierTeethNumberOrder->saveAll($dataToSaveInTeethNumberOrder);
                        }
                    }

                }


                if(!empty($_FILES))
                {
                    $filesToSave = array();
                    $files = $_FILES['sort'];
                    foreach($files['name'] AS $sortKey => $file){

                        $attachmentFieldId = key($file['attachment']);

                        if(!empty($file['attachment'][$attachmentFieldId]))
                        {
                            $filesToSave[$sortKey][$attachmentFieldId] = array(
                                "name" =>$file['attachment'][$attachmentFieldId],
                                "type" =>$files['type'][$sortKey]['attachment'][$attachmentFieldId],
                                "tmp_name" =>$files['tmp_name'][$sortKey]['attachment'][$attachmentFieldId],
                                "error" =>$files['error'][$sortKey]['attachment'][$attachmentFieldId],
                                "size" =>$files['size'][$sortKey]['attachment'][$attachmentFieldId],
                            );
                        }


                    }

                    foreach($filesToSave AS $sortOrder => $fileWithID)
                    {
                        $attachmentID = key($fileWithID);
                        $fileToUpload = $fileWithID[$attachmentID];

                        $dataToSaveInOrderDetail = array(
                            "thinapp_id" => $thinappID,
                            "supplier_order_id" =>$supplierOrderID,
                            "is_supplier_attachment"=>"YES",
                            "sort_no"=>$sortOrder
                        );
                        $this->SupplierOrderDetail->saveAll($dataToSaveInOrderDetail);
                        $supplierOrderDetailID = $this->SupplierOrderDetail->getLastInsertId();

                        $attachmentFieldData = $this->SupplierAttachmentField->findById($attachmentID,array("contain"=>false));

                        if($url = $this->Custom->uploadFileToAws($fileToUpload))
                        {
                            $attachmentUrl = $url;
                        }
                        else
                        {
                            throw new Exception("Couldn't Upload Image!");
                        }

                        $dataToSaveInAttachmentOrder = array(
                            'thinapp_id'=>$thinappID,
                            'supplier_order_id' =>$supplierOrderID,
                            'supplier_order_detail_id'=>$supplierOrderDetailID,
                            'supplier_attachment_field_id'=>$attachmentID,
                            'name'=>$attachmentFieldData['SupplierAttachmentField']['name'],
                            'url'=>$attachmentUrl
                        );

                        $this->SupplierAttachmentOrder->saveAll($dataToSaveInAttachmentOrder);


                    }

                }
                $datasource->commit();
                $dataToSend = array('status' => 1, 'message' => "Saved Successfully!");



                foreach($dataToSave['sent'] AS $sent)
                {

                    $login1 = $this->Session->read('Auth.User');
                    $thinappName = $login1['Thinapp']['name'];

                    if($sent == 'SMS')
                    {
                        $message = "Hello ".$supplierHospitalData['SupplierHospital']['name'].",New order has been placed by ".$thinappName.".Click on link to see placed order.Link: ".SITE_PATH."supplier/".base64_encode($supplierOrderID);
                        $mobile = $supplierHospitalData["SupplierHospital"]["mobile"];
                        if (Custom::get_total_sms_thinapp($thinappID, 'T') > 1)
                        {
                            Custom::send_single_sms($mobile, $message, $thinappID, $app_name = true, $send_app_download_link = false);
                        }
                    }

                    if($sent == 'EMAIL')
                    {

                        $body = "Hello ".$supplierHospitalData['SupplierHospital']['name'].", \n\n New order has been placed by ".$thinappName."\n Click on <a href='".SITE_PATH."supplier/get_order_details/".base64_encode($supplierOrderID)."'>Link</a> to see placed order.";
                        $subject = "New order has been placed by ".$thinappName;
                        $to = $supplierHospitalData['SupplierHospital']['email'];
                        $from = "info@mengage.in";
                        $name = $thinappName;
                        $this->Custom->sendEmail($to,$from,$subject,$body,$name);



                    }

                }


            } catch (Exception $e) {
                $datasource->rollback();
                $dataToSend = array('status' => 0, 'message' => $e->getMessage());
            }
            echo json_encode($dataToSend);
            die;
        }
    }

    public function list_supplier_order(){
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User.User');
        $thinappID = $login['thinapp_id'];

        $orderList = $this->SupplierOrder->find("all",array("conditions"=>array("SupplierOrder.thinapp_id"=>$thinappID),"order"=>"SupplierOrder.id DESC","contain"=>array("SupplierHospital")));
        $login1 = $this->Session->read('Auth.User');
        $reportTitle = $login1['Thinapp']['name'].' ('.date('d/m/Y').')';
        $this->set(array('reportTitle'=>$reportTitle,'orderList'=>$orderList));
    }

    public function update_order_status(){
        $this->layout = 'ajax';
        if ($this->request->is('ajax')) {
            $login = $this->Session->read('Auth.User.User');
            $thinappID = $login['thinapp_id'];
            $dataToSave = $this->request->data;
            $orderID = $dataToSave['orderID'];
            $status = $dataToSave['status'];
            if($status == 'ACTIVE')
            {
                $statusToUpdate = 'INACTIVE';
            }
            else
            {
                $statusToUpdate = 'ACTIVE';
            }
            if($this->SupplierOrder->updateAll(array('SupplierOrder.status'=>"'".$statusToUpdate."'"),array('SupplierOrder.id'=>$orderID,'SupplierOrder.thinapp_id'=>$thinappID,)))
            {
                $dataToSend = array('status'=>1,'message'=>$statusToUpdate);
            }
            else
            {
                $dataToSend = array('status'=>0,'message'=>'Something went wrong!');
            }

            echo json_encode($dataToSend); die;
        }
    }

    public function update_order_delivery_status(){
        $this->layout = 'ajax';
        if ($this->request->is('ajax')) {
            $login = $this->Session->read('Auth.User.User');
            $thinappID = $login['thinapp_id'];
            $dataToSave = $this->request->data;
            $orderID = $dataToSave['orderID'];
            $status = $dataToSave['status'];

            if($this->SupplierOrder->updateAll(array('SupplierOrder.order_status'=>"'".$status."'"),array('SupplierOrder.id'=>$orderID,'SupplierOrder.thinapp_id'=>$thinappID,)))
            {
                $dataToSend = array('status'=>1,'message'=>"Successfully updated!");
            }
            else
            {
                $dataToSend = array('status'=>0,'message'=>'Something went wrong!');
            }

            echo json_encode($dataToSend); die;
        }
    }

    public function get_order_status_history_admin(){
        $this->layout = 'ajax';
        if ($this->request->is('ajax')) {
            $login = $this->Session->read('Auth.User');
            $thinappID = $login['User']['thinapp_id'];
            $dataToSave = $this->request->data;

            $orderID = $dataToSave['orderID'];
            $statusHistory = $this->SupplireOrderStatus->find('all',array('conditions'=>array("SupplireOrderStatus.supplier_order_id"=>$orderID,"SupplireOrderStatus.thinapp_id"=>$thinappID,),'order'=>'SupplireOrderStatus.id ASC','contain'=>false));
            $this->set(array('statusHistory'=>$statusHistory,'orderID'=>$orderID,'hasForm'=>'NO'));
            $this->render('update_order_status_supplier', 'ajax');
        }
    }

    public function update_order_status_history(){
        $this->layout = 'ajax';
        if ($this->request->is('ajax')) {
            $login = $this->Session->read('Auth.User');
            $thinappID = $login['User']['thinapp_id'];
            $dataToSave = $this->request->data;
            $orderID = $dataToSave['orderID'];
            $status = $dataToSave['status'];
            $comment = $dataToSave['comment'];
            $dataToSaveInHistory = array('thinapp_id'=>$thinappID,'supplier_order_id'=>$orderID,'status'=>$status,'comment'=>$comment,);
            $this->SupplireOrderStatus->saveAll($dataToSaveInHistory);
            $this->SupplierOrder->updateAll(array('SupplierOrder.status_from_supplire'=>"'".$status."'",),array('SupplierOrder.id'=>$orderID,'SupplierOrder.thinapp_id'=>$thinappID,));
            $dataToSend = array('status'=>1,'message'=>'Successfull!');
            echo json_encode($dataToSend); die;
        }
    }

    public function get_order_details($orderID = null){
        $this->layout = false;
        if($orderID != "")
        {
            $orderID = base64_decode($orderID);
            $orderData = $this->SupplierOrder->find("first",array("conditions"=>array("SupplierOrder.id"=>$orderID,),"contain"=>array("Thinapp","SupplierHospital","SupplierOrderDetail"=>array("SupplierAttachmentOrder","SupplierCheckboxRadioOrder","SupplierTeethNumberOrder","SupplierTextTextareaFieldOrder"))));


            $teethNumber = $this->SupplierTeethNumber->find('all',array('conditions'=>array(/*"thinapp_id"=>$thinappID,*/"status"=>"ACTIVE"),"contain"=>false,"order"=>"id DESC"));
            $teethNumberFormated = array('UPPER_RIGHT'=>array(),'UPPER_LEFT'=>array(),'LOWER_LEFT'=>array(),'LOWER_RIGHT'=>array());

            foreach($teethNumber AS $numData){
                if($numData['SupplierTeethNumber']['type'] == 'UPPER_RIGHT')
                {
                    $teethNumberFormated['UPPER_RIGHT'][] = $numData;
                }
                else if($numData['SupplierTeethNumber']['type'] == 'UPPER_LEFT')
                {
                    $teethNumberFormated['UPPER_LEFT'][] = $numData;
                }
                else if($numData['SupplierTeethNumber']['type'] == 'LOWER_RIGHT')
                {
                    $teethNumberFormated['LOWER_RIGHT'][] = $numData;
                }
                else if($numData['SupplierTeethNumber']['type'] == 'LOWER_LEFT')
                {
                    $teethNumberFormated['LOWER_LEFT'][] = $numData;
                }
            }

            usort($teethNumberFormated['UPPER_RIGHT'], function ($a, $b) {
                return $a['SupplierTeethNumber']['number'] < $b['SupplierTeethNumber']['number'] ? 1 : -1;
            });
            usort($teethNumberFormated['UPPER_LEFT'], function ($a, $b) {
                return $a['SupplierTeethNumber']['number'] < $b['SupplierTeethNumber']['number'] ? -1 : 1;
            });
            usort($teethNumberFormated['LOWER_RIGHT'], function ($a, $b) {
                return $a['SupplierTeethNumber']['number'] < $b['SupplierTeethNumber']['number'] ? 1 : -1;
            });
            usort($teethNumberFormated['LOWER_LEFT'], function ($a, $b) {
                return $a['SupplierTeethNumber']['number'] < $b['SupplierTeethNumber']['number'] ? -1 : 1;
            });


            $this->set(array('teethNumberFormated'=>$teethNumberFormated,'orderData'=>$orderData));
        }
        else
        {
            die("No data available at the moment!");
        }
    }




    /*************CREATED BY VISHWAJEET END************/


    public function delete_receipt()
    {
        $this->layout = 'ajax';
        $this->autoRender = false;
        $login = $this->Session->read('Auth.User');

        if ($this->request->is('ajax')) {
            $receipt_id = @$this->request->data['ri'];
            if(!empty($receipt_id)){
                $receipt_id = base64_decode($receipt_id);
                $delete_by= $login['User']['id'];
                $query = "update medical_product_orders set delete_by_user_id =?, status =?, modified =? where id = ?";
                $connection = ConnectionUtil::getConnection();
                $stmt = $connection->prepare($query);
                $status = "INACTIVE";
                $created = Custom::created();
                $stmt->bind_param('ssss', $delete_by, $status, $created, $receipt_id);
                if ($stmt->execute()) {
                    $response['status'] = 1;
                    $response['message'] = "Receipt deleted successfully";
                }else {
                    $response['status'] = 0;
                    $response['message'] = "Sorry receipt could not delete";
                }
            }else{
                $response['status'] = 0;
                $response['message'] = "Invalid receipt";
            }
            echo json_encode($response);
        }else{
            exit();
        }

    }

    public function update_doctor_pre_setting()
    {
        $this->layout = 'ajax';
        $this->autoRender = false;
        $login = $this->Session->read('Auth.User');

        if ($this->request->is('ajax')) {
            $doctor_id = @$this->request->data['di'];
            $barcode = @$this->request->data['barcode'];
            if(!empty($doctor_id) && !empty($barcode)){
                $doctor_id = base64_decode($doctor_id);
                $delete_by= $login['User']['id'];
                $query = "update appointment_staffs set barcode_on_prescription=?, modified =? where id = ?";
                $connection = ConnectionUtil::getConnection();
                $stmt = $connection->prepare($query);
                $created = Custom::created();
                $stmt->bind_param('sss', $barcode, $created, $doctor_id);
                if ($stmt->execute()) {
                    $response['status'] = 1;
                    $response['message'] = "Setting Update successfully";
                }else {
                    $response['status'] = 0;
                    $response['message'] = "Sorry setting could not update";
                }
            }else{
                $response['status'] = 0;
                $response['message'] = "Invalid receipt";
            }
            echo json_encode($response);
        }else{
            exit();
        }

    }

    public function refund_amount()
    {
         $this->layout = false;
        $this->autoRender = false;
        if ($this->request->is(array('ajax'))) {
            $order_id = base64_decode($this->request->data['id']);
            $orderDetails = $this->MedicalProductOrder->find('first', array('conditions' => array('MedicalProductOrder.id' => $order_id),'contain' => array('AppointmentCustomerStaffService','MedicalProductOrderDetail' => array('MedicalProduct'))));
            $appointment_id = $orderDetails['AppointmentCustomerStaffService']['id'];
            $thin_app_id = $orderDetails['AppointmentCustomerStaffService']['thinapp_id'];
            $cash_free_data = Custom::getCashFreeOnlineAmount($appointment_id,$thin_app_id);

            $this->set(compact('orderDetails','cash_free_data'));
            $this->render('refund_amount', 'ajax');
        }
    }

    public function get_due_amount()
    {
        $this->layout = false;
        $this->autoRender = false;
        $patient_id = base64_decode($this->request->data['pi']);
        $patient_type = $this->request->data['pt'];
        echo Custom::get_patient_due_amount($patient_id,$patient_type);
    }


    public function change_referrer_status()
    {
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $login = $this->Session->read('Auth.User.User');
            $response = array();
            $status = ($this->request->data['status']);
            $data['Thinapp']['id'] = $login['thinapp_id'];
            $data['Thinapp']['show_referrer_on_receipt'] = $status;
            if ($save = $this->Thinapp->save($data)) {
                $login = $this->Session->read('Auth');
                $login['User']['Thinapp']['show_referrer_on_receipt'] =$status;
                $this->Session->write('Auth',$login);
                $response['status'] = 1;
                $response['message'] = 'Setting changed successfully';
            } else {
                $response['status'] = 0;
                $response['message'] = 'Sorry, setting could not changed.';
            }
            echo json_encode($response);
        }
    }

    public function get_add_appointment_payment($appointment_id=null){
        $this->layout = 'ajax';
        if ($this->request->is('ajax')) {
            $login = $this->Session->read('Auth.User');
            $thinappID = $login['User']['thinapp_id'];
            $return = true;
            if(empty($appointment_id)){
                $appointment_id = base64_decode($this->request->data['ai']);
                $return = false;
            }
            $appointment_data = Custom::get_appointment_custom_data($appointment_id);
            $patient_id = $appointment_data['patient_id'];
            $patient_type = $appointment_data['patient_type'];
            $due_amount = Custom::get_patient_due_amount($patient_id,$patient_type);
            $showOpdRow = $appointment_data['show_opd_row'];
            $bookingConvenienceFeeDetail = Custom::get_booking_convenience_fee_details($appointment_id);
            $this->set(compact('bookingConvenienceFeeDetail','showOpdRow','appointment_id','due_amount','appointment_data'));




            if($return === true){
                return $this->render('get_add_appointment_payment', 'ajax');
            }else{
                $this->render('get_add_appointment_payment', 'ajax');
            }

        }
    }

    public function pay_due_appointment(){
        $this->layout = false;
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $login = $this->Session->read('Auth.User');
            $id = base64_decode($this->request->data['id']);
            $data = Custom::get_patient_due_amount_data_by_id($id);
            if(!empty($data)){
                $connection =ConnectionUtil::getConnection();
                $connection->autocommit(false);
                $created = Custom::created();
                $patient_due_amount_id = $data['id'];
                $thin_app_id = $data['thinapp_id'];
                $created_by_user_id = $login['User']['id'];
                $amount = $data['amount'];
                $children_id = $data['children_id'];
                $appointment_customer_id = $data['appointment_customer_id'];
                $is_opd = 'N';
                $sql = "INSERT INTO medical_product_orders (thinapp_id, appointment_customer_id, children_id, patient_due_amount_id, total_amount, is_opd, created_by_user_id, created, modified) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)";
                $stmt_order = $connection->prepare($sql);
                $stmt_order->bind_param('sssssssss',  $thin_app_id, $appointment_customer_id, $children_id, $patient_due_amount_id, $amount, $is_opd, $created_by_user_id, $created, $created);
                if ($stmt_order->execute()) {
                    $medical_product_order_id =  $stmt_order->insert_id;
                    $sql = "INSERT INTO medical_product_order_details (medical_product_order_id, thinapp_id, appointment_customer_id, children_id, amount, total_amount, created, modified) VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
                    $stmt_order_detail = $connection->prepare($sql);
                    $stmt_order_detail->bind_param('ssssssss',  $medical_product_order_id, $thin_app_id, $appointment_customer_id, $children_id, $amount, $amount, $created, $created);
                    if ($stmt_order_detail->execute()) {

                        $payment_status = "PAID";
                        $query = "update patient_due_amounts set direct_billing_order_id=?, payment_status=?, modified =? where id = ?";
                        $stmt_due_amount = $connection->prepare($query);
                        $created = Custom::created();
                        $stmt_due_amount->bind_param('ssss', $medical_product_order_id, $payment_status, $created, $patient_due_amount_id);
                        if ($stmt_due_amount->execute()) {
                            $connection->commit();
                            $response['status'] = 1;
                            $response['message'] = 'Amount paid successfully';
                            $response['order_id'] = base64_encode($medical_product_order_id);
                        }else{
                            $connection->rollback();
                            $response['status'] = 0;
                            $response['message'] = 'Sorry, this amount could not paid';
                        }

                    }else{
                        $connection->rollback();
                        $response['status'] = 0;
                        $response['message'] = 'Sorry, this amount could not paid';
                    }

                }else{
                    $response['status'] = 0;
                    $response['message'] = 'Sorry, this amount could not paid';
                }
            }else{
                $response['status'] = 0;
                $response['message'] = 'Invalid data';
            }



        }
        echo json_encode($response);
    }


    public function refund_due_appointment(){
        $this->layout = false;
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $login = $this->Session->read('Auth.User');
            $id = base64_decode($this->request->data['id']);
            $data = Custom::get_patient_due_amount_data_by_id($id);
            if(!empty($data)){
                $connection =ConnectionUtil::getConnection();
                $connection->autocommit(false);

                $query = "update medical_product_orders set status=?, modified =? where id = ?";
                $stmt_order = $connection->prepare($query);
                $created = Custom::created();
                $stmt_order->bind_param('sss', $payment_status, $created, $data['direct_billing_order_id']);

                $payment_status = "DUE";
                $direct_billing_order_id = 0;
                $modified_by_user_id= $login['User']['id'];
                $query = "update patient_due_amounts set modified_by_user_id =?, direct_billing_order_id =?, payment_status=?, modified =? where id = ?";
                $stmt_due_amount = $connection->prepare($query);
                $created = Custom::created();
                $stmt_due_amount->bind_param('sssss', $modified_by_user_id, $direct_billing_order_id, $payment_status, $created, $data['id']);

                if ($stmt_order->execute() && $stmt_due_amount->execute()) {
                    $connection->commit();
                    $response['status'] = 1;
                    $response['message'] = 'Amount refund successfully';

                }else{
                    $connection->rollback();
                    $response['status'] = 0;
                    $response['message'] = 'Sorry, this amount could not refund';
                }
            }else{
                $response['status'] = 0;
                $response['message'] = 'Invalid data';
            }



        }
        echo json_encode($response);
    }


    public function search_get_bed_occupancy(){
        $reqData = $this->request->query;
        $pram = array();
        if (!empty($reqData['search_by'])) {
            $pram['sb'] = $reqData['search_by'];
        }

        if (!empty($reqData['search_type'])) {
            $pram['st'] = $reqData['search_type'];
        }

        if (!empty($reqData['start_date'])) {
            $pram['sd'] = $reqData['start_date'];
        }
        if (!empty($reqData['end_date'])) {
            $pram['ed'] = $reqData['end_date'];
        }

        $this->redirect(
            array(
                "controller" => "app_admin",
                "action" => "get_bed_occupancy",
                "?" => $pram,
            )
        );
    }


    public function get_bed_occupancy(){
        $login = $this->Session->read('Auth.User');
        $thinappID = $login['User']['thinapp_id'];

        $startDate = date("Y-m-d");
        $endDate = date("Y-m-d");
        $type = 'DAY';
        $search_by = '';

        $this->request->data['Search']['start_date'] = date("d/m/Y");
        $this->request->data['Search']['end_date'] = date("d/m/Y");

        $searchData = $this->request->query;

        if (isset($searchData['sb']) && !empty($searchData['sb']) && ($searchData['sb'] != 'HOSPITAL')) {
            $search_by = " AND `hospital_ipd`.`hospital_service_category_id` = '".$searchData['sb']."'";
        }
        if (isset($searchData['sb']) && !empty($searchData['sb'])) {
            $this->request->data['Search']['search_by'] = $searchData['sb'];
        }
        if (isset($searchData['st']) && !empty($searchData['st'])) {

            $this->request->data['Search']['search_type'] = $searchData['st'];
            $type = $searchData['st'];
        }
        if (isset($searchData['sd']) && !empty($searchData['sd'])) {

            $this->request->data['Search']['start_date'] = $searchData['sd'];
            $startDate = DateTime::createFromFormat('d/m/Y', $searchData['sd']);
            $startDate = $startDate->format('Y-m-d');
        }
        if (isset($searchData['ed']) && !empty($searchData['ed'])) {

            $this->request->data['Search']['end_date'] = $searchData['ed'];
            $endDate = DateTime::createFromFormat('d/m/Y', $searchData['ed']);
            $endDate = $endDate->format('Y-m-d');
        }



            if($type == 'MONTH')
            {
                $startDate = date("Y-m", strtotime($startDate)).'-01';
                $endDate = date('Y-m-t', strtotime($endDate));
            }

            $sql = "SELECT `ipd_bed_history`.`id`,if(`ipd_bed_history`.`to_date` IS NULL, '".$endDate."',DATE(`ipd_bed_history`.`to_date`)) AS `date_of_discharge`, DATE(`ipd_bed_history`.`from_date`) AS `admit_date`,`hospital_service_categories`.`name`,`hospital_service_categories`.`id` AS category_id
            FROM `ipd_bed_history` 
            LEFT JOIN `hospital_service_categories` ON (`hospital_service_categories`.`id` = `ipd_bed_history`.`hospital_service_category_id`)
            WHERE `ipd_bed_history`.`thinapp_id` = '".$thinappID."'
            AND `ipd_bed_history`.`status` = 'ACTIVE'
            AND (
            ( DATE(`ipd_bed_history`.`from_date`) BETWEEN '".$startDate."' AND '".$endDate."' )
            OR 
            ( DATE(`ipd_bed_history`.`to_date`) BETWEEN '".$startDate."' AND '".$endDate."' )
            OR 
            ( DATE(`ipd_bed_history`.`from_date`) <= '".$startDate."' AND DATE(`ipd_bed_history`.`to_date`) >= '".$endDate."' )
            OR 
            ( DATE(`ipd_bed_history`.`from_date`) <= '".$startDate."' AND DATE(`ipd_bed_history`.`to_date`) = '0000-00-00' )
            OR 
            ( DATE(`ipd_bed_history`.`from_date`) <= '".$startDate."' AND DATE(`ipd_bed_history`.`to_date`) IS NULL )
            )".$search_by;
            $connection =ConnectionUtil::getConnection();
            $sqlRS = $connection->query($sql);
            $data = mysqli_fetch_all($sqlRS,MYSQLI_ASSOC);

            $endDate = date('Y-m-d', strtotime($endDate.'+1 day'));
            $begin = new DateTime($startDate);
            $end = new DateTime($endDate);
            $daterange = new DatePeriod($begin, new DateInterval('P1D'), $end);
            $interval = array();
            foreach($daterange as $date){
                $interval[] = $date->format("Y-m-d");
            }



        $rawData = array();
        $dataToCalculate = array();




        foreach($interval AS $date){
            foreach($data AS $chunk)
            {
                if($chunk['admit_date'] <= $date && $chunk['date_of_discharge'] >= $date)
                {
                    if($type == 'DAY')
                    {
                        $rawData[$date.$chunk['category_id']] = isset($rawData[$date.$chunk['category_id']])?$rawData[$date.$chunk['category_id']]+1:1;
                        $dataToCalculate[$date][$chunk['category_id']] = array('total'=>$rawData[$date.$chunk['category_id']],'name'=>$chunk['name'] );
                    }
                    else
                    {
                        $date1 = date('Y-m',strtotime($date));
                        $rawData[$date1.$chunk['category_id']] = isset($rawData[$date1.$chunk['category_id']])?$rawData[$date1.$chunk['category_id']]+1:1;
                        $dataToCalculate[$date1][$chunk['category_id']] = array('total'=>$rawData[$date1.$chunk['category_id']],'name'=>$chunk['name'] );
                    }

                }
            }
        }



        $sql1 = "SELECT `hospital_service_category_id`,COUNT(`id`) AS total FROM `medical_products` WHERE `thinapp_id` = '".$thinappID."' GROUP BY `hospital_service_category_id`";
        $sql1RS = $connection->query($sql1);
        $data1 = mysqli_fetch_all($sql1RS,MYSQLI_ASSOC);
        $total = array();
        foreach($data1 AS $list){
            $total[$list['hospital_service_category_id']] = $list['total'];
        }
        if($type == 'MONTH') {
            $dataToCalculateRow = $dataToCalculate;
            $dataToCalculate = array();
            foreach($dataToCalculateRow AS $date => $list){
                foreach($list AS $key => $arr){
                    $dataToCalculate[$date][$key] = array(
                        'total' => $arr['total']/date('t',strtotime($date.'-15')),
                        'name' => $arr['name']
                    );
                }
            }
        }

        $catList = $this->HospitalServiceCategory->find("list",array("conditions"=>array("`HospitalServiceCategory`.`hospital_service_category_type_id` IN ('3','4')","`HospitalServiceCategory`.`thinapp_id`"=>$thinappID),"contain"=>false));

        $login1 = $this->Session->read('Auth.User');
        $reportTitle = $login1['Thinapp']['name'].' ('.$this->request->data['Search']['start_date'].' - '.$this->request->data['Search']['end_date'].')';

        $this->set(compact('reportTitle','dataToCalculate','total','type','catList'));
    }

    public function get_add_category_modal(){
        $this->layout = false;
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $this->render('get_add_category_modal', 'ajax');
        }
    }

    public function add_hospital_service_category_ajax()
    {
        $this->layout = false;
        $login = $this->Session->read('Auth.User.User');

        if ($this->request->is('ajax', 'put')) {
            $data = $this->request->data['HospitalServiceCategory'];
            $data['thinapp_id'] = $login['thinapp_id'];
            $data['name'] = trim($data['name']);

            $labID = 0;
            $labPharmacyType = 'NONE';
            $labPharmacyIsInhouse = 'NONE';
            $loginLab = $this->Session->read('Auth.User');
            $roleLab = $loginLab['USER_ROLE'];
            if ($roleLab == "LAB" || $roleLab == 'PHARMACY') {
                $labID = $loginLab['LabPharmacyUser']['id'];
                $labPharmacyType = $roleLab;
                $labPharmacyIsInhouse = $loginLab['LabPharmacyUser']['is_inhouse'];
            }
            $data['lab_pharmacy_user_id'] = $labID;
            $data['lab_pharmacy_type'] = $labPharmacyType;
            $data['lab_pharmacy_is_inhouse'] = $labPharmacyIsInhouse;

            $this->HospitalServiceCategory->set($data);
            if ($this->HospitalServiceCategory->validates()) {
                if ($this->HospitalServiceCategory->save($data)) {
                    echo json_encode(array("status"=>1,"message"=>"Success!"));
                } else {
                    echo json_encode(array("status"=>0,"message"=>"Sorry, Couldn't add service category!"));
                }
            } else {
                echo json_encode(array("status"=>0,"message"=>"Sorry, Couldn't add service category!"));
            }
        }
        die();

    }

    public function get_add_hospital_service_modal(){
        $this->layout = false;
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $medicineForm = Custom::get_medicine_form_list();
            $this->set(array( 'medicineForm' => $medicineForm));
            $this->render('get_add_hospital_service_modal', 'ajax');
        }
    }

    public function add_hospital_service_ajax(){
        $this->layout = false;
        $login = $this->Session->read('Auth.User.User');
        $labID = 0;
        $labPharmacyType = 'NONE';
        $labPharmacyIsInhouse = 'NONE';
        $loginLab = $this->Session->read('Auth.User');
        $roleLab = $loginLab['USER_ROLE'];

        if ($roleLab == "LAB" || $roleLab == 'PHARMACY') {
            $labID = $loginLab['LabPharmacyUser']['id'];
            $labPharmacyType = $roleLab;
            $labPharmacyIsInhouse = $loginLab['LabPharmacyUser']['is_inhouse'];
        }

        if (!$this->Session->read('Tab')) {
            $this->Session->write('Tab', "add");
        }

        $medicineForm = Custom::get_medicine_form_list();

        if ($this->request->is('ajax')) {

            $data = $this->request->data['MedicalProduct'];
            $service_name = $amount = array();
            $key_array = $header_array = $result = array();
            $new = $duplicate = 0;
            $data['module_type'] = 'PHARMACY';
            $data['is_billable'] = 1;
            $data['is_package'] = 0;



                $this->Session->write('Tab', "add");
                $data['thinapp_id'] = $login['thinapp_id'];
                $data['name'] = trim($data['name']);
                $data['lab_pharmacy_user_id'] = $labID;
                $data['lab_pharmacy_type'] = $labPharmacyType;
                $data['lab_pharmacy_is_inhouse'] = $labPharmacyIsInhouse;
                if ($data['is_package'] == 1) {
                    $data['price'] = $data['mrp'];
                }

                if (!empty($data['mrp'])) {

                    $this->MedicalProduct->set($data);
                    if ($this->MedicalProduct->validates()) {
                        if ($this->MedicalProduct->save($data)) {

                            $dataToSaveInProductQuantity = array();
                            $dataToSaveInProductQuantity['thinapp_id'] = $login['thinapp_id'];
                            $dataToSaveInProductQuantity['quantity'] = ($data['quantity'] > 0) ? $data['quantity'] : 0;
                            $dataToSaveInProductQuantity['purchase_price'] = $data['purchase_price'];
                            $dataToSaveInProductQuantity['mrp'] = $data['mrp'];
                            $dataToSaveInProductQuantity['batch'] = $data['batch'];

                            if (!empty($data['expiry_date'])) {
                                $data['expiry_date'] = str_replace("-", "/", $data['expiry_date']);
                                $date = DateTime::createFromFormat('d/m/Y', $data['expiry_date']);
                                $date1 = $date->format('Y-m-d');
                                $dataToSaveInProductQuantity['expiry_date'] = $date1;
                            } else {
                                $dataToSaveInProductQuantity['expiry_date'] = "0000-00-00";
                            }

                            if ($data['is_package'] != 1) {
                                $medicalProductID = $this->MedicalProduct->getLastInsertId();
                                $dataToSaveInProductQuantity['medical_product_id'] = $medicalProductID;
                                $this->MedicalProductQuantity->save($dataToSaveInProductQuantity);
                            }

                            echo json_encode(array("status"=>1,"message"=>"Success!"));
                        } else {
                            echo json_encode(array("status"=>0,"message"=>"Sorry, Couldn't add service/product!"));
                        }

                    } else {
                        echo json_encode(array("status"=>0,"message"=>"Sorry, Couldn't add service/product!"));
                    }

                } else {

                    echo json_encode(array("status"=>0,"message"=>"Sorry, Couldn't add service/product! MRP is empty."));

                }


        }
        die();
    }

    public function get_add_hospital_service_lab_modal(){
        $this->layout = false;
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $medicineForm = Custom::get_medicine_form_list();
            $this->set(array( 'medicineForm' => $medicineForm));
            $this->render('get_add_hospital_service_lab_modal', 'ajax');
        }
    }

    public function add_hospital_service_lab_ajax(){
        $this->layout = false;
        $login = $this->Session->read('Auth.User.User');
        $labID = 0;
        $labPharmacyType = 'NONE';
        $labPharmacyIsInhouse = 'NONE';
        $loginLab = $this->Session->read('Auth.User');
        $roleLab = $loginLab['USER_ROLE'];

        if ($roleLab == "LAB" || $roleLab == 'PHARMACY') {
            $labID = $loginLab['LabPharmacyUser']['id'];
            $labPharmacyType = $roleLab;
            $labPharmacyIsInhouse = $loginLab['LabPharmacyUser']['is_inhouse'];
        }

        $medicineForm = Custom::get_medicine_form_list();

        if ($this->request->is('ajax')) {

            $data = $this->request->data['MedicalProduct'];
            $service_name = $amount = array();
            $key_array = $header_array = $result = array();
            $new = $duplicate = 0;
            $data['module_type'] = 'LAB';
            $data['is_billable'] = 1;
            $data['is_package'] = 0;



                $this->Session->write('Tab', "add");
                $data['thinapp_id'] = $login['thinapp_id'];
                $data['name'] = trim($data['name']);
                $data['lab_pharmacy_user_id'] = $labID;
                $data['lab_pharmacy_type'] = $labPharmacyType;
                $data['lab_pharmacy_is_inhouse'] = $labPharmacyIsInhouse;
                if ($data['is_package'] == 1) {
                    $data['price'] = $data['mrp'];
                }

                if (!empty($data['mrp'])) {

                    $this->MedicalProduct->set($data);
                    if ($this->MedicalProduct->validates()) {
                        if ($this->MedicalProduct->save($data)) {

                            $dataToSaveInProductQuantity = array();
                            $dataToSaveInProductQuantity['thinapp_id'] = $login['thinapp_id'];
                            $dataToSaveInProductQuantity['quantity'] = ($data['quantity'] > 0) ? $data['quantity'] : 0;
                            $dataToSaveInProductQuantity['purchase_price'] = $data['purchase_price'];
                            $dataToSaveInProductQuantity['mrp'] = $data['mrp'];
                            $dataToSaveInProductQuantity['batch'] = $data['batch'];

                            if (!empty($data['expiry_date'])) {
                                $data['expiry_date'] = str_replace("-", "/", $data['expiry_date']);
                                $date = DateTime::createFromFormat('d/m/Y', $data['expiry_date']);
                                $date1 = $date->format('Y-m-d');
                                $dataToSaveInProductQuantity['expiry_date'] = $date1;
                            } else {
                                $dataToSaveInProductQuantity['expiry_date'] = "0000-00-00";
                            }

                            if ($data['is_package'] != 1) {
                                $medicalProductID = $this->MedicalProduct->getLastInsertId();
                                $dataToSaveInProductQuantity['medical_product_id'] = $medicalProductID;
                                $this->MedicalProductQuantity->save($dataToSaveInProductQuantity);
                            }

                            echo json_encode(array("status"=>1,"message"=>"Success!"));
                        } else {
                            echo json_encode(array("status"=>0,"message"=>"Sorry, Couldn't add service/product!"));
                        }

                    } else {
                        echo json_encode(array("status"=>0,"message"=>"Sorry, Couldn't add service/product!"));
                    }

                } else {
                    echo json_encode(array("status"=>0,"message"=>"Sorry, Couldn't add service/product! MRP is empty."));
                }

        }

        die();
    }

    public function get_add_hospital_service_service_modal(){
        $this->layout = false;
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $medicineForm = Custom::get_medicine_form_list();
            $this->set(array( 'medicineForm' => $medicineForm));
            $this->render('get_add_hospital_service_service_modal', 'ajax');
        }
    }

    public function add_hospital_service_service_ajax()
    {

        $this->layout = false;
        $login = $this->Session->read('Auth.User.User');
        $labID = 0;
        $labPharmacyType = 'NONE';
        $labPharmacyIsInhouse = 'NONE';
        $loginLab = $this->Session->read('Auth.User');
        $roleLab = $loginLab['USER_ROLE'];

        if ($roleLab == "LAB" || $roleLab == 'PHARMACY') {
            $labID = $loginLab['LabPharmacyUser']['id'];
            $labPharmacyType = $roleLab;
            $labPharmacyIsInhouse = $loginLab['LabPharmacyUser']['is_inhouse'];
        }

        if (!$this->Session->read('Tab')) {
            $this->Session->write('Tab', "add");
        }

        $medicineForm = Custom::get_medicine_form_list();

        if ($this->request->is('ajax')) {

            $data = $this->request->data['MedicalProduct'];
            $service_name = $amount = array();
            $key_array = $header_array = $result = array();
            $new = $duplicate = 0;
            $data['module_type'] = 'SERVICE';
            $data['is_billable'] = 1;



                $this->Session->write('Tab', "add");
                $data['thinapp_id'] = $login['thinapp_id'];
                $data['name'] = trim($data['name']);
                $data['lab_pharmacy_user_id'] = $labID;
                $data['lab_pharmacy_type'] = $labPharmacyType;
                $data['lab_pharmacy_is_inhouse'] = $labPharmacyIsInhouse;

                if ($data['is_package'] == 1) {
                    $data['price'] = $data['mrp'];
                }

                if (!empty($data['mrp'])) {

                    $this->MedicalProduct->set($data);
                    if ($this->MedicalProduct->validates()) {
                        if ($this->MedicalProduct->save($data)) {

                            $dataToSaveInProductQuantity = array();
                            $dataToSaveInProductQuantity['thinapp_id'] = $login['thinapp_id'];
                            $dataToSaveInProductQuantity['quantity'] = ($data['quantity'] > 0) ? $data['quantity'] : 0;
                            $dataToSaveInProductQuantity['purchase_price'] = $data['purchase_price'];
                            $dataToSaveInProductQuantity['mrp'] = $data['mrp'];
                            $dataToSaveInProductQuantity['batch'] = $data['batch'];

                            if (!empty($data['expiry_date'])) {
                                $data['expiry_date'] = str_replace("-", "/", $data['expiry_date']);
                                $date = DateTime::createFromFormat('d/m/Y', $data['expiry_date']);
                                $date1 = $date->format('Y-m-d');
                                $dataToSaveInProductQuantity['expiry_date'] = $date1;
                            } else {
                                $dataToSaveInProductQuantity['expiry_date'] = "0000-00-00";
                            }

                            if ($data['is_package'] != 1) {
                                $medicalProductID = $this->MedicalProduct->getLastInsertId();
                                $dataToSaveInProductQuantity['medical_product_id'] = $medicalProductID;
                                $this->MedicalProductQuantity->save($dataToSaveInProductQuantity);
                            }

                            echo json_encode(array("status"=>1,"message"=>"Service/Product added successfully!"));
                        } else {
                            echo json_encode(array("status"=>0,"message"=>"Sorry, Couldn't add service/product!"));
                        }

                    }
                    else
                    {
                        echo json_encode(array("status"=>0,"message"=>"Sorry, Couldn't add service/product!"));
                    }

                } else {

                    echo json_encode(array("status"=>0,"message"=>"Sorry, Couldn't add service/product! MRP is empty."));

                }



        }

        die;

    }


    public function search_get_commision_report()
    {
        $reqData = $this->request->data['Search'];
        $pram = array();
        if (!empty($reqData['receipt_category'])) {
            $pram['rc'] = $reqData['receipt_category'];
        }
        if (!empty($reqData['category'])) {
            $pram['c'] = $reqData['category'];
        }
        if (!empty($reqData['from_date'])) {
            $pram['f'] = $reqData['from_date'];
        }
        if (!empty($reqData['to_date'])) {
            $pram['t'] = $reqData['to_date'];
        }
        if (!empty($reqData['service'])) {
            $pram['s'] = $reqData['service'];
        }
        if (!empty($reqData['payment'])) {
            $pram['p'] = $reqData['payment'];
        }
        if (!empty($reqData['uhid'])) {
            $pram['u'] = $reqData['uhid'];
        }

        if (!empty($reqData['name'])) {
            $pram['n'] = $reqData['name'];
        }

        if (!empty($reqData['biller'])) {
            $pram['b'] = $reqData['biller'];
        }

        if (!empty($reqData['doctor'])) {
            $pram['d'] = $reqData['doctor'];
        }

        $this->redirect(
            array(
                "controller" => "app_admin",
                "action" => "get_commision_report",
                "?" => $pram,
            )
        );
    }

    public function get_commision_report(){
        $this->layout = "app_admin_home";


        $login = $this->Session->read('Auth.User.User');
        $login1 = $this->Session->read('Auth.User');
        $thinappID = $login['thinapp_id'];
        $today = date("Y-m-d");

        $condition = " MedicalProductOrder.thinapp_id = $thinappID and MedicalProductOrder.payment_status ='PAID' and MedicalProductOrder.status ='ACTIVE' ";
        $custom_filter = " AND MedicalProductOrder.payment_adjust_by_settlement = 'N'";

        if ($login1['USER_ROLE'] == "LAB" || $login1['USER_ROLE'] == "PHARMACY") {
            $condition .= " and  MedicalProductOrder.lab_pharmacy_user_id =" . $login1['LabPharmacyUser']['id'];
        } elseif ($login1['USER_ROLE'] != 'ADMIN') {
            $condition .= " and  MedicalProductOrder.created_by_user_id =" . $login['id'];;
        }

        $searchData = $this->request->query;

        if (isset($searchData['f']) && !empty($searchData['f']) && !empty($searchData['t']) && isset($searchData['t'])) {


            $this->request->data['Search']['from_date'] = $searchData['f'];
            $from_date = DateTime::createFromFormat('d/m/Y', $searchData['f'])->format('Y-m-d');
            $this->request->data['Search']['to_date'] = $searchData['t'];
            $to_date = DateTime::createFromFormat('d/m/Y', $searchData['t'])->format('Y-m-d');
            $condition .= " and  DATE(MedicalProductOrder.created) BETWEEN '$from_date' and '$to_date'";

        } else {
            $today = date("d/m/Y");
            $search_today = date("Y-m-d");
            $this->request->data['Search']['to_date'] = $this->request->data['Search']['from_date'] = $today;
            $condition .= " and  DATE(MedicalProductOrder.created) BETWEEN '$search_today' and '$search_today'";

        }


        $custom_field = " MedicalProductOrder.total_amount ";
        $max_query = " and MedicalProductOrderDetail.id = (select max(mpod.id) from medical_product_order_details as mpod where mpod.medical_product_order_id = MedicalProductOrder.id ) ";
        if (isset($searchData['rc'])) {
            $category = $searchData['rc'];
            $this->request->data['Search']['receipt_category'] = $category;
            if ($category == "OPD") {
                $condition .= " and  MedicalProductOrder.is_opd = 'Y'";
            } else if ($category == "IPD") {
                $condition .= " and  ( MedicalProductOrder.is_advance = 'Y' OR MedicalProductOrder.is_settlement = 'Y' OR  MedicalProductOrder.is_expense = 'Y' )";
            } else if ($category == "LAB") {
                $condition .= " AND  MedicalProductOrder.lab_pharmacy_type = 'LAB' AND MedicalProductOrder.lab_pharmacy_user_id > 0 ";
            } else if ($category == "PHARMACY") {
                $condition .= " AND  MedicalProductOrder.lab_pharmacy_type = 'PHARMACY' AND MedicalProductOrder.lab_pharmacy_user_id > 0 ";
            } else if ($category == "PACKAGE") {
                $condition .= " and  MedicalProductOrder.is_package = 'Y'";
            } else if ($category == "OTHER") {
                $condition .= " and  MedicalProductOrder.patient_due_amount_id = 0 and MedicalProductOrder.is_opd = 'N' AND MedicalProductOrder.is_advance = 'N' AND  MedicalProductOrder.is_settlement = 'N' AND MedicalProductOrder.is_expense = 'N' ";
            }else if ($category == "DUE_AMOUNT") {
                $condition .= " and  MedicalProductOrder.patient_due_amount_id > 0 ";
            }

        }
        if (isset($searchData['c'])) {
            $category = $searchData['c'];
            $this->request->data['Search']['category'] = $category;
            $condition .= " and  MedicalProduct.hospital_service_category_id = $category";
            $custom_field = " MedicalProductOrderDetail.total_amount ";
            $max_query = $custom_filter = "";


        }

        if (isset($searchData['b'])) {
            $biller = $searchData['b'];
            $this->request->data['Search']['biller'] = $biller;
            $tmp = explode("#", $biller);
            if ($tmp[1] == "LAB" || $tmp[1] == "PHARMACY") {
                $condition .= " and  MedicalProductOrder.lab_pharmacy_user_id =" . $tmp[0];
            } else {
                $condition .= " and  MedicalProductOrder.created_by_user_id =" . $tmp[0];
            }

        }
        if (isset($searchData['d'])) {
            $doctor = $searchData['d'];
            $this->request->data['Search']['doctor'] = $doctor;
            $condition .= " and  MedicalProductOrder.appointment_staff_id = $doctor";

        }

        if (isset($searchData['s'])) {
            $service = $searchData['s'];
            $this->request->data['Search']['service'] = $service;
            $condition .= "  and MedicalProductOrderDetail.medical_product_id = $service";
            $custom_field = "MedicalProductOrderDetail.total_amount";
            $custom_filter = "";


        }

        if (isset($searchData['u'])) {
            $uhid = $searchData['u'];
            $this->request->data['Search']['uhid'] = $uhid;
            $condition .= " and  ( AppointmentCustomer.uhid like '%$uhid%' OR Children.uhid like '%$uhid%') ";

        }

        if (isset($searchData['n'])) {
            $name = $searchData['n'];
            $this->request->data['Search']['name'] = $name;
            $condition .= " and ( AppointmentCustomer.first_name like '%$name%' OR Children.child_name like '%$name%' ) ";
        }


        if (isset($searchData['p'])) {
            $paymentType = $searchData['p'];
            $this->request->data['Search']['payment'] = $paymentType;
            if ($paymentType != '-1' && $paymentType == "PAY_BY_USER") {
                $condition .= "  and MedicalProductOrder.created_by_user_id = 0";
            } else if ($paymentType == '-1') {
                $condition .= "  and ( ( MedicalProductOrder.hospital_payment_type_id = 0 ) OR ( MedicalProductOrder.refund_payment_type_id = 0 and MedicalProductOrder.is_refunded = 'YES') ) and MedicalProductOrder.created_by_user_id != 0";
            } else {
                $condition .= "  and ( ( MedicalProductOrder.hospital_payment_type_id = $paymentType ) OR ( MedicalProductOrder.refund_payment_type_id = $paymentType and MedicalProductOrder.is_refunded = 'YES') ) ";
            }

        }


        /*============Billing Summary By Receptionist==============*/


        $orderDetails = array();
        $query = "select MedicalProductOrder.patient_due_amount_id,  MedicalProductOrder.total_amount AS total_paid, AppointmentCustomer.conceive_date, AppointmentCustomer.expected_date, AppointmentCustomerStaffService.refund_reason, MedicalProductOrder.refund_amount, MedicalProductOrder.commission as commission_rate,MedicalProductOrder.commission_amount as commission_amount, Doctor.name as doctor_name, DoctorDepartment.name as doctor_department, MedicalProductOrder.is_package, MedicalProductOrder.lab_pharmacy_user_id, MedicalProductOrder.lab_pharmacy_type, HospitalIpdSettlement.payable_amount, GROUP_CONCAT( CONCAT( MedicalProduct.name, ' #', MedicalProductOrderDetail.total_amount, 'RS')) as service_name, (SELECT CONCAT(DATE_FORMAT(`MedicalProductOrder`.`created`,'%d%m%y'),COUNT(`id`)) FROM `medical_product_orders` AS `order` WHERE  DATE(`order`.`created`) = DATE(`MedicalProductOrder`.`created`) AND `order`.`id` <= `MedicalProductOrder`.`id` AND `order`.`thinapp_id` = `MedicalProductOrder`.`thinapp_id` AND `order`.`is_expense` = 'N') AS `unique_id`, HospitalDepositAmount.status as advance_status, MedicalProductOrder.id, MedicalProductOrder.appointment_customer_staff_service_id, HospitalIpdSettlement.payment_status as settlement_payment_status, MedicalProductOrder.is_opd, MedicalProductOrder.is_advance, MedicalProductOrder.is_settlement,MedicalProductOrder.is_expense,   MedicalProductOrder.id, IFNULL(AppointmentCustomer.first_name,Children.child_name) as patient_name, IFNULL(AppointmentCustomer.mobile,Children.mobile) as patient_mobile, IFNULL(AppointmentCustomer.address,Children.address) as patient_address, IFNULL(AppointmentCustomer.uhid,Children.uhid) as uhid, DATE_FORMAT(MedicalProductOrder.created,'%d/%m/%Y %h:%i %p') as date, IFNULL(HospitalPaymentType.name,'Cash') as payment_type_name,  MedicalProductOrder.payment_description, MedicalProductOrder.payment_status, IF(MedicalProductOrder.is_advance='Y',HospitalDepositAmount.remark, AppointmentCustomerStaffService.notes) AS notes, AppointmentCustomerStaffService.reason_of_appointment, SUM(CASE WHEN MedicalProductOrder.is_settlement='Y' THEN  HospitalIpdSettlement.settlement_amount  WHEN MedicalProductOrder.is_advance='Y'  THEN ( HospitalDepositAmount.amount + HospitalDepositAmount.discount ) ELSE IFNULL(MedicalProductOrderDetail.total_amount,MedicalProductOrder.total_amount) END) AS total_amount, SUM(IFNULL(MedicalProductOrderDetail.tax_amount,0)) as total_tax,IFNULL(IFNULL(IFNULL(LabPharmacyUser.lab_name,LabPharmacyUser.lab_name),IFNULL(AppointmentStaff.name,User.username)),'')  as biller  from medical_product_orders as MedicalProductOrder left join hospital_payment_types as HospitalPaymentType on HospitalPaymentType.id = MedicalProductOrder.hospital_payment_type_id left join medical_product_order_details as MedicalProductOrderDetail on MedicalProductOrderDetail.medical_product_order_id = MedicalProductOrder.id  left join medical_products as MedicalProduct on MedicalProduct.id= MedicalProductOrderDetail.medical_product_id  left join appointment_customers as AppointmentCustomer on AppointmentCustomer.id = MedicalProductOrder.appointment_customer_id  left join childrens as Children on Children.id=MedicalProductOrder.children_id  left join users as User on User.id = MedicalProductOrder.created_by_user_id left join appointment_staffs as AppointmentStaff on AppointmentStaff.user_id = MedicalProductOrder.created_by_user_id and AppointmentStaff.thinapp_id = MedicalProductOrder.thinapp_id and AppointmentStaff.status='ACTIVE' left join lab_pharmacy_users as LabPharmacyUser on LabPharmacyUser.id =MedicalProductOrder.lab_pharmacy_user_id left join hospital_deposit_amounts as HospitalDepositAmount on HospitalDepositAmount.id = MedicalProductOrder.hospital_deposit_amount_id  left join hospital_ipd_settlements as HospitalIpdSettlement on HospitalIpdSettlement.id = MedicalProductOrder.hospital_ipd_settlement_id and MedicalProductOrder.is_expense = 'N'  left join appointment_customer_staff_services as AppointmentCustomerStaffService on AppointmentCustomerStaffService.id = MedicalProductOrder.appointment_customer_staff_service_id left join appointment_staffs as Doctor on Doctor.id = MedicalProductOrder.appointment_staff_id left join appointment_categories  as DoctorDepartment on DoctorDepartment.id = Doctor.appointment_category_id WHERE $condition $custom_filter  group by MedicalProductOrder.id order by MedicalProductOrder.created desc";
        $connection = ConnectionUtil::getConnection();
        $user_collection = $connection->query($query);
        if ($user_collection->num_rows) {
            $orderDetails = mysqli_fetch_all($user_collection, MYSQLI_ASSOC);
        }

        $login1 = $this->Session->read('Auth.User');
        $reportTitle = $login1['Thinapp']['name'].' ('.$this->request->data['Search']['from_date'].' - '.$this->request->data['Search']['to_date'].')';
        $this->set(array( 'reportTitle' => $reportTitle, 'orderDetails' => $orderDetails));
    }

    /*public function get_commision_report(){
        $this->layout = "app_admin_home";


        $login = $this->Session->read('Auth.User.User');
        $login1 = $this->Session->read('Auth.User');
        $thinappID = $login['thinapp_id'];
        $today = date("Y-m-d");

        $condition = " MedicalProductOrder.thinapp_id = $thinappID and MedicalProductOrder.payment_status ='PAID' and MedicalProductOrder.status ='ACTIVE' ";
        $custom_filter = " AND MedicalProductOrder.payment_adjust_by_settlement = 'N'";

        if ($login1['USER_ROLE'] == "LAB" || $login1['USER_ROLE'] == "PHARMACY") {
            $condition .= " and  MedicalProductOrder.lab_pharmacy_user_id =" . $login1['LabPharmacyUser']['id'];
        } elseif ($login1['USER_ROLE'] != 'ADMIN') {
            $condition .= " and  MedicalProductOrder.created_by_user_id =" . $login['id'];;
        }

        $searchData = $this->request->query;

        if (isset($searchData['f']) && !empty($searchData['f']) && !empty($searchData['t']) && isset($searchData['t'])) {


            $this->request->data['Search']['from_date'] = $searchData['f'];
            $from_date = DateTime::createFromFormat('d/m/Y', $searchData['f'])->format('Y-m-d');
            $this->request->data['Search']['to_date'] = $searchData['t'];
            $to_date = DateTime::createFromFormat('d/m/Y', $searchData['t'])->format('Y-m-d');
            $condition .= " and  DATE(MedicalProductOrder.created) BETWEEN '$from_date' and '$to_date'";

        } else {
            $today = date("d/m/Y");
            $search_today = date("Y-m-d");
            $this->request->data['Search']['to_date'] = $this->request->data['Search']['from_date'] = $today;
            $condition .= " and  DATE(MedicalProductOrder.created) BETWEEN '$search_today' and '$search_today'";

        }


        $custom_field = " MedicalProductOrder.total_amount ";
        $max_query = " and MedicalProductOrderDetail.id = (select max(mpod.id) from medical_product_order_details as mpod where mpod.medical_product_order_id = MedicalProductOrder.id ) ";
        if (isset($searchData['rc'])) {
            $category = $searchData['rc'];
            $this->request->data['Search']['receipt_category'] = $category;
            if ($category == "OPD") {
                $condition .= " and  MedicalProductOrder.is_opd = 'Y'";
            } else if ($category == "IPD") {
                $condition .= " and  ( MedicalProductOrder.is_advance = 'Y' OR MedicalProductOrder.is_settlement = 'Y' OR  MedicalProductOrder.is_expense = 'Y' )";
            } else if ($category == "LAB") {
                $condition .= " AND  MedicalProductOrder.lab_pharmacy_type = 'LAB' AND MedicalProductOrder.lab_pharmacy_user_id > 0 ";
            } else if ($category == "PHARMACY") {
                $condition .= " AND  MedicalProductOrder.lab_pharmacy_type = 'PHARMACY' AND MedicalProductOrder.lab_pharmacy_user_id > 0 ";
            } else if ($category == "PACKAGE") {
                $condition .= " and  MedicalProductOrder.is_package = 'Y'";
            } else if ($category == "OTHER") {
                $condition .= " and  MedicalProductOrder.patient_due_amount_id = 0 and MedicalProductOrder.is_opd = 'N' AND MedicalProductOrder.is_advance = 'N' AND  MedicalProductOrder.is_settlement = 'N' AND MedicalProductOrder.is_expense = 'N' ";
            }else if ($category == "DUE_AMOUNT") {
                $condition .= " and  MedicalProductOrder.patient_due_amount_id > 0 ";
            }

        }
        if (isset($searchData['c'])) {
            $category = $searchData['c'];
            $this->request->data['Search']['category'] = $category;
            $condition .= " and  MedicalProduct.hospital_service_category_id = $category";
            $custom_field = " MedicalProductOrderDetail.total_amount ";
            $max_query = $custom_filter = "";


        }

        if (isset($searchData['b'])) {
            $biller = $searchData['b'];
            $this->request->data['Search']['biller'] = $biller;
            $tmp = explode("#", $biller);
            if ($tmp[1] == "LAB" || $tmp[1] == "PHARMACY") {
                $condition .= " and  MedicalProductOrder.lab_pharmacy_user_id =" . $tmp[0];
            } else {
                $condition .= " and  MedicalProductOrder.created_by_user_id =" . $tmp[0];
            }

        }
        if (isset($searchData['d'])) {
            $doctor = $searchData['d'];
            $this->request->data['Search']['doctor'] = $doctor;
            $condition .= " and  MedicalProductOrder.appointment_staff_id = $doctor";

        }

        if (isset($searchData['s'])) {
            $service = $searchData['s'];
            $this->request->data['Search']['service'] = $service;
            $condition .= "  and MedicalProductOrderDetail.medical_product_id = $service";
            $custom_field = "MedicalProductOrderDetail.total_amount";
            $custom_filter = "";


        }

        if (isset($searchData['u'])) {
            $uhid = $searchData['u'];
            $this->request->data['Search']['uhid'] = $uhid;
            $condition .= " and  ( AppointmentCustomer.uhid like '%$uhid%' OR Children.uhid like '%$uhid%') ";

        }

        if (isset($searchData['n'])) {
            $name = $searchData['n'];
            $this->request->data['Search']['name'] = $name;
            $condition .= " and ( AppointmentCustomer.first_name like '%$name%' OR Children.child_name like '%$name%' ) ";
        }


       if (isset($searchData['p'])) {
            $paymentType = $searchData['p'];
            $this->request->data['Search']['payment'] = $paymentType;
            if ($paymentType != '-1' && $paymentType == "PAY_BY_USER") {
                $condition .= "  and MedicalProductOrder.created_by_user_id = 0";
            } else if ($paymentType == '-1') {
                $condition .= "  and ( ( MedicalProductOrder.hospital_payment_type_id = 0 ) OR ( MedicalProductOrder.refund_payment_type_id = 0 and MedicalProductOrder.is_refunded = 'YES') ) and MedicalProductOrder.created_by_user_id != 0";
            } else {
                $condition .= "  and ( ( MedicalProductOrder.hospital_payment_type_id = $paymentType ) OR ( MedicalProductOrder.refund_payment_type_id = $paymentType and MedicalProductOrder.is_refunded = 'YES') ) ";
             }

        }




        $orderDetails = array();
        $query = "select
        MedicalProductOrder.patient_due_amount_id,
        MedicalProductOrderDetail.total_amount AS total_paid,
        AppointmentCustomer.conceive_date,
        AppointmentCustomer.expected_date,
        AppointmentCustomerStaffService.refund_reason,
        MedicalProductOrder.refund_amount,
        MedicalProductOrderDetail.commission as commission_rate,
        MedicalProductOrderDetail.commission_amount as commission_amount,
        Doctor.name as doctor_name,
        DoctorDepartment.name as doctor_department,
        MedicalProductOrder.is_package,
        MedicalProductOrder.lab_pharmacy_user_id,
        MedicalProductOrder.lab_pharmacy_type,
        HospitalIpdSettlement.payable_amount,
        GROUP_CONCAT( CONCAT( MedicalProduct.name, ' #', MedicalProductOrderDetail.total_amount, 'RS')) as service_name,
        (SELECT CONCAT(DATE_FORMAT(`MedicalProductOrder`.`created`,'%d%m%y'),COUNT(`id`)) FROM `medical_product_orders` AS `order` WHERE  DATE(`order`.`created`) = DATE(`MedicalProductOrder`.`created`) AND `order`.`id` <= `MedicalProductOrder`.`id` AND `order`.`thinapp_id` = `MedicalProductOrder`.`thinapp_id` AND `order`.`is_expense` = 'N') AS `unique_id`,
        HospitalDepositAmount.status as advance_status,
        MedicalProductOrder.id,
        MedicalProductOrder.appointment_customer_staff_service_id,
        HospitalIpdSettlement.payment_status as settlement_payment_status,
        MedicalProductOrder.is_opd,
        MedicalProductOrder.is_advance,
        MedicalProductOrder.is_settlement,
        MedicalProductOrder.is_expense,
        MedicalProductOrder.id,
        IFNULL(AppointmentCustomer.first_name,Children.child_name) as patient_name,
        IFNULL(AppointmentCustomer.mobile,Children.mobile) as patient_mobile,
        IFNULL(AppointmentCustomer.address,Children.address) as patient_address,
        IFNULL(AppointmentCustomer.uhid,Children.uhid) as uhid,
        DATE_FORMAT(MedicalProductOrder.created,'%d/%m/%Y %h:%i %p') as date,
        IFNULL(HospitalPaymentType.name,'Cash') as payment_type_name,
        MedicalProductOrder.payment_description,
        MedicalProductOrder.payment_status,
        IF(MedicalProductOrder.is_advance='Y',HospitalDepositAmount.remark, AppointmentCustomerStaffService.notes) AS notes,
        AppointmentCustomerStaffService.reason_of_appointment,
        SUM(CASE WHEN MedicalProductOrder.is_settlement='Y' THEN  HospitalIpdSettlement.settlement_amount  WHEN MedicalProductOrder.is_advance='Y'  THEN ( HospitalDepositAmount.amount + HospitalDepositAmount.discount ) ELSE IFNULL(MedicalProductOrderDetail.total_amount,MedicalProductOrder.total_amount) END) AS total_amount,
        SUM(IFNULL(MedicalProductOrderDetail.tax_amount,0)) as total_tax,
        IFNULL(IFNULL(IFNULL(LabPharmacyUser.lab_name,LabPharmacyUser.lab_name),
        IFNULL(AppointmentStaff.name,User.username)),'')  as biller
        from medical_product_orders as MedicalProductOrder
        left join hospital_payment_types as HospitalPaymentType on HospitalPaymentType.id = MedicalProductOrder.hospital_payment_type_id
        left join medical_product_order_details as MedicalProductOrderDetail on MedicalProductOrderDetail.medical_product_order_id = MedicalProductOrder.id
        left join medical_products as MedicalProduct on MedicalProduct.id= MedicalProductOrderDetail.medical_product_id
        left join appointment_customers as AppointmentCustomer on AppointmentCustomer.id = MedicalProductOrder.appointment_customer_id
        left join childrens as Children on Children.id=MedicalProductOrder.children_id
        left join users as User on User.id = MedicalProductOrder.created_by_user_id
        left join appointment_staffs as AppointmentStaff on AppointmentStaff.user_id = MedicalProductOrder.created_by_user_id and AppointmentStaff.thinapp_id = MedicalProductOrder.thinapp_id and AppointmentStaff.status='ACTIVE'
        left join lab_pharmacy_users as LabPharmacyUser on LabPharmacyUser.id =MedicalProductOrder.lab_pharmacy_user_id
        left join hospital_deposit_amounts as HospitalDepositAmount on HospitalDepositAmount.id = MedicalProductOrder.hospital_deposit_amount_id
        left join hospital_ipd_settlements as HospitalIpdSettlement on HospitalIpdSettlement.id = MedicalProductOrder.hospital_ipd_settlement_id and MedicalProductOrder.is_expense = 'N'
        left join appointment_customer_staff_services as AppointmentCustomerStaffService on AppointmentCustomerStaffService.id = MedicalProductOrder.appointment_customer_staff_service_id
        left join appointment_staffs as Doctor on Doctor.id = MedicalProductOrder.appointment_staff_id
        left join appointment_categories as DoctorDepartment on DoctorDepartment.id = Doctor.appointment_category_id
        WHERE $condition $custom_filter
        group by MedicalProductOrderDetail.id
        order by MedicalProductOrder.created desc";
        $connection = ConnectionUtil::getConnection();
        $user_collection = $connection->query($query);
        if ($user_collection->num_rows) {
            $orderDetails = mysqli_fetch_all($user_collection, MYSQLI_ASSOC);
        }


        $this->set(array( 'orderDetails' => $orderDetails));
    } */


    public function get_app_medical_product_list(){
        $this->layout = 'ajax';
        if ($this->request->is('ajax')) {
            $login = $this->Session->read('Auth.User');
            $thinappID = $login['User']['thinapp_id'];
            $medicalProductList = Custom::get_app_medical_product_list($thinappID);
            echo json_encode($medicalProductList, true); die;
        }

    }


    public function delete_admit_patient()
    {
        $this->layout = 'ajax';
        $this->autoRender = false;
        $login = $this->Session->read('Auth.User');

        if ($this->request->is('ajax')) {
            $ipd_id = @($this->request->data['ipd_id']);

            if(!empty($ipd_id)){
                $ipd_id = base64_decode($ipd_id);
                $delete_by= $login['User']['id'];
                $status = 'INACTIVE';
                $query = "update hospital_ipd set status=?, delete_by_user_id=?,  modified =? where id = ?";
                $connection = ConnectionUtil::getConnection();
                $stmt = $connection->prepare($query);
                $created = Custom::created();
                $stmt->bind_param('ssss', $status, $delete_by, $created, $ipd_id);
                if ($stmt->execute()) {
                    $query1 = "UPDATE `ipd_bed_history` SET `status` = 'INACTIVE' WHERE `hospital_ipd_id` = '".$ipd_id."'";
                    $connection->query($query1);
                    $response['status'] = 1;
                    $response['message'] = "Admin patient delete successfully";
                }else {
                    $response['status'] = 0;
                    $response['message'] = "Sorry admint patient could not delete";
                }
            }else{
                $response['status'] = 0;
                $response['message'] = "Invalid receipt";
            }
            echo json_encode($response);
        }else{
            exit();
        }

    }



    public function add_new_patient()
    {
        $this->autoRender = false;
        $login = $this->Session->read('Auth.User.User');
        $thin_app_id = $login['thinapp_id'];
        if ($this->request->is('ajax')) {
            $this->set(compact(''));
            $this->render('add_new_patient', 'ajax');
        }
    }

    public function lab_more_patient(){
        $this->autoRender = false;
        $login = $this->Session->read('Auth.User.User');
        $thin_app_id = $login['thinapp_id'];
        if ($this->request->is('ajax')) {
            $search = isset($this->request->data['search'])?$this->request->data['search']:"";

            $condition = array();
            if(!empty($search))
            {
                $condition["OR"] = array("AppointmentCustomer.first_name LIKE"=>"%".$search."%", "AppointmentCustomer.mobile LIKE"=>"%".$search."%");
            }
            $condition["AppointmentCustomer.thinapp_id"] = $thin_app_id;

            $dataToSend1 = $this->AppointmentCustomer->find("all",
                array(
                    "fields"=>array("AppointmentCustomer.first_name","DriveFolder.id","AppointmentCustomer.mobile","AppointmentCustomer.gender","AppointmentCustomer.uhid","AppointmentCustomer.email",),
                    'joins' => array(
                        array(
                            'table' => 'drive_folders',
                            'alias' => 'DriveFolder',
                            'type' => 'left',
                            'conditions' => array(
                                'DriveFolder.appointment_customer_id = AppointmentCustomer.id',
                                'DriveFolder.thinapp_id = AppointmentCustomer.thinapp_id',
                            )
                        )
                    ),
                    "conditions"=>$condition,
                    "contain"=>false,
                    "order"=>"AppointmentCustomer.id DESC",
                    "limit"=>200
                )
            );
            $dataToSend = array();
            $connection = ConnectionUtil::getConnection();

            foreach($dataToSend1 AS $list){
                if(isset($list['DriveFolder']['id']))
                {
                    $folderID = $list['DriveFolder']['id'];
                    $sql = $connection->query("SELECT `id`,`file_type`,`file_path` FROM `drive_files` WHERE `drive_folder_id` = '" . $folderID . "' and status ='ACTIVE' order by modified desc");
                    $fileList = mysqli_fetch_all($sql, MYSQLI_ASSOC);
                    $list['file_list'] = $fileList;
                }
                $dataToSend[] = $list;
            }
            $login1 = $this->Session->read('Auth.User');
            $reportTitle = $login1['Thinapp']['name'].' ('.date('d/m/Y').')';

            $this->set(array( 'reportTitle'=>$reportTitle,'dataToSend' => $dataToSend,'search'=>$search));

            $this->render('lab_more_patient', 'ajax');
        }
    }

    public function send_followup_reminder(){
        //die("here");
        $this->layout = false;
        $login = $this->Session->read('Auth.User.User');

        if ($this->request->is('ajax', 'put')) {
            $data['follow_up_id'] = base64_decode($this->request->data['id']);
            $data['thin_app_id'] = $login['thinapp_id'];
            $data['app_key'] = "APP_KEY";
            $data['user_id'] = $login['id'];
            WebServicesFunction_2_3::send_follow_up_alert($data);

        }
        die();

    }

    public function block_slot_modal()
    {
        $this->layout = 'ajax';
        if ($this->request->is('ajax')) {
            $this->render('block_slot_modal', 'ajax');
        }
    }


    public function get_folder_doc_data(){

   $url = 'http://goyalhospital.org/doc/8890315087/?C=M;O=D';
   $html = file_get_contents($url);

   $count = preg_match_all('/<a href="([^"]+)">[^<]*<\/a>/i', $html, $files);
   for ($i = 0; $i < $count; ++$i) {
       $file = $files[1][$i];
       if(preg_match('/^([-\.\w]+)$/', $file) > 0)
       {
           echo "File: " . $file . "<br />\n";
       }

   }
   //var_dump($files);
   die;

    }

    public function get_tarcker_input_dash(){



    }

    public function speech_message(){
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User.User');
        $thinappID = $login['thinapp_id'];
        $speechData = $this->SpeechMessage->find('all',array('conditions'=>array("thinapp_id"=>array($thinappID,0)),'contain'=>false));
        $login1 = $this->Session->read('Auth.User');
        $reportTitle = $login1['Thinapp']['name'].' ('.date('d/m/Y').')';
        $this->set(array('reportTitle'=>$reportTitle,'speechData'=>$speechData));
    }

    public function update_speech_message_status(){
        $this->layout = 'ajax';
        $this->autoRender = false;
        $login = $this->Session->read('Auth.User');

        if ($this->request->is('ajax')) {
            $speechID = @$this->request->data['ID'];
            $status = @$this->request->data['status'];
            if(!empty($speechID) && !empty($status)){
                $statusToUpdate = ($status == 'ACTIVE')?"INACTIVE":"ACTIVE";

                $saved = $this->SpeechMessage->updateAll(array("SpeechMessage.status" => "'$statusToUpdate'"), array("SpeechMessage.id" => $speechID));
                if($saved)
                {
                    $response['status'] = 1;
                    $response['message'] = "Saved!";
                }
                else
                {
                    $response['status'] = 0;
                    $response['message'] = "Could not save!";
                }

            }else{
                $response['status'] = 0;
                $response['message'] = "Invalid request";
            }
            echo json_encode($response);
        }else{
            exit();
        }
    }

    public function update_speech_message_play_status(){
        $this->layout = 'ajax';
        $this->autoRender = false;
        $login = $this->Session->read('Auth.User');
        $thinappID = $login['User']['thinapp_id'];
        if ($this->request->is('ajax')) {
            $speechID = @$this->request->data['ID'];
            echo WebservicesFunction::update_speech_message_play_status(array("speech_id"=>$speechID,"thin_app_id"=>$thinappID));
        }else{
            exit();
        }
    }

    public function update_speech_message(){
        $this->layout = 'ajax';
        $this->autoRender = false;
        $login = $this->Session->read('Auth.User');
        $thinappID = $login['User']['thinapp_id'];
        if ($this->request->is('ajax')) {
            $speechID = @$this->request->data['id'];
            $message = @$this->request->data['message'];
            $response = array();
            $dataToSave = array("message"=>$message,"thinapp_id"=>$thinappID);
            if(!empty($speechID))
            {
                $dataToSave["id"] = $speechID;
            }

            if($this->SpeechMessage->save($dataToSave)){
                $response['status'] = 1;
                $response['message'] = "Saved!";
            }else{
                $response['status'] = 0;
                $response['message'] = "Invalid request";
            }
            echo json_encode($response);
        }else{
            exit();
        }
    }

    public function media_message(){
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User.User');
        $thinappID = $login['thinapp_id'];
        $mediaData = $this->MediaMessage->find('all',array('conditions'=>array("thinapp_id"=>array($thinappID,0)),'contain'=>false));
        $login1 = $this->Session->read('Auth.User');
        $reportTitle = $login1['Thinapp']['name'].' ('.date('d/m/Y').')';
        $this->set(array('reportTitle'=>$reportTitle,'mediaData'=>$mediaData));
    }


    public function update_media_message_status(){
        $this->layout = 'ajax';
        $this->autoRender = false;
        $login = $this->Session->read('Auth.User');

        if ($this->request->is('ajax')) {
            $speechID = @$this->request->data['ID'];
            $status = @$this->request->data['status'];
            if(!empty($speechID) && !empty($status)){
                $statusToUpdate = ($status == 'ACTIVE')?"INACTIVE":"ACTIVE";

                $saved = $this->MediaMessage->updateAll(array("MediaMessage.status" => "'$statusToUpdate'"), array("MediaMessage.id" => $speechID));
                if($saved)
                {
                    $response['status'] = 1;
                    $response['message'] = "Saved!";
                }
                else
                {
                    $response['status'] = 0;
                    $response['message'] = "Could not save!";
                }

            }else{
                $response['status'] = 0;
                $response['message'] = "Invalid request";
            }
            echo json_encode($response);
        }else{
            exit();
        }
    }
    
    public function update_media_message(){




        $this->layout = 'ajax';
        $this->autoRender = false;
        $login = $this->Session->read('Auth.User');
        $thinappID = $login['User']['thinapp_id'];
        $response = array();
        if ($this->request->is('ajax')) {
            $mediaID = @$this->request->data['id'];

            $data = $_FILES['media'];
            $url = false;
            $localFileType = $_POST['local_file_type'];
            if($localFileType == 'YOUTUBE')
            {
                $duration = ($_POST['duration'] != '' && $_POST['duration'] != 0)?$_POST['duration']:0;
                $youtubeVideo = $_POST['youtube-video'];
                if($youtubeVideo == '')
                {
                    $response["status"] = 0;
                    $response["message"] = "Youtube embeded video url is blank.";
                }
                else
                {
                    $dataToSave = array("media_url"=>$youtubeVideo,"media_type"=>$localFileType,"duration" => $duration,"thinapp_id"=>$thinappID);
                    if(!empty($mediaID))
                    {
                        $dataToSave["id"] = $mediaID;
                    }

                    if($this->MediaMessage->save($dataToSave)){
                        $response['status'] = 1;
                        $response['message'] = "Saved!";
                    }else{
                        $response['status'] = 0;
                        $response['message'] = "Invalid request";
                    }
                }


            }
            else if (isset($data['tmp_name']) && !empty($data['tmp_name'])) {
                $mimeImgAarray = array('image/png', 'image/jpeg', 'image/jpeg', 'image/jpeg', 'image/gif', 'image/bmp');
                $mimeVidAarray = array('video/mp4', 'image/ogg', 'image/wmp');
                $file_type = $data['type'];
                if (in_array($file_type, $mimeImgAarray)) {
                    $mediaType = "IMAGE";
                } else if (in_array($file_type, $mimeVidAarray)) {
                    $mediaType = "VIDEO";
                }



                if($localFileType == $mediaType){
                    $url = $this->Custom->uploadFileToAws($data);
                    if($url)
                    {
                        $dataToSave = array("media_url"=>$url,"media_type"=>$mediaType,"duration" => 0,"thinapp_id"=>$thinappID);
                        if(!empty($mediaID))
                        {
                            $dataToSave["id"] = $mediaID;
                        }

                        if($this->MediaMessage->save($dataToSave)){
                            $response['status'] = 1;
                            $response['message'] = "Saved!";
                        }else{
                            $response['status'] = 0;
                            $response['message'] = "Invalid request";
                        }
                    }
                    else
                    {
                        $response['status'] = 0;
                        $response['message'] = "Something went wrong.";
                    }


                }
                else
                {
                    $response['status'] = 0;
                    $response['message'] = "Please upload $localFileType.";
                }
            }
            else
            {
                $response["status"] = 0;
                $response["message"] = "Please upload file.";
            }


            echo json_encode($response);
        }else{
            exit();
        }



    }

    public function update_media_message_sort_order(){
        $this->layout = 'ajax';
        $this->autoRender = false;
        $login = $this->Session->read('Auth.User');
        if ($this->request->is('ajax')) {
            $speechID = @$this->request->data['ID'];
            $sortOrder = @$this->request->data['sortOrder'];
            $sortOrder = !empty($sortOrder)?$sortOrder:0;
            if(!empty($speechID) && !empty($sortOrder)){

                $saved = $this->MediaMessage->updateAll(array("MediaMessage.sort_order" => "'$sortOrder'"), array("MediaMessage.id" => $speechID));
                if($saved)
                {
                    $response['status'] = 1;
                    $response['message'] = "Saved!";
                }
                else
                {
                    $response['status'] = 0;
                    $response['message'] = "Could not save!";
                }

            }else{
                $response['status'] = 0;
                $response['message'] = "Invalid request";
            }
            echo json_encode($response);
        }else{
            exit();
        }
    }


    public function assign_appointment_doctor(){
        $this->layout = 'ajax';
        $this->autoRender = false;
        $login = $this->Session->read('Auth.User');
        if ($this->request->is('ajax')) {
            $appointment_id = @base64_decode($this->request->data['ai']);
            $doctor_id = $block_doctor_id= @base64_decode($this->request->data['di']);
            $last_doctor_id = @base64_decode($this->request->data['last_di']);
        	$assign_from = @($this->request->data['af']);
            if(!empty($appointment_id) && !empty($doctor_id)){
                $save_appointment = $this->AppointmentCustomerStaffService->updateAll(array("AppointmentCustomerStaffService.appointment_staff_id" => $doctor_id,"AppointmentCustomerStaffService.last_assign_doctor_id" => $last_doctor_id), array("AppointmentCustomerStaffService.id" => $appointment_id));
                $order = $this->MedicalProductOrder->updateAll(array("MedicalProductOrder.appointment_staff_id" => $doctor_id), array("MedicalProductOrder.appointment_customer_staff_service_id" => $appointment_id));
                $order_detail = $this->MedicalProductOrderDetail->updateAll(array("MedicalProductOrderDetail.appointment_staff_id" => $doctor_id), array("MedicalProductOrderDetail.appointment_customer_staff_service_id" => $appointment_id));
                if ($save_appointment && $order && $order_detail) {
                    $response['status'] = 1;
                    $response['message'] = "Doctor assign successfully";
                		
                	if($assign_from=='DTI'){
                        $appointment_data = Custom::get_appointment_by_id($appointment_id);
                        $admin_data = Custom::get_thinapp_admin_data($appointment_data['thinapp_id']);
                        $user_id = $admin_data['id'];

                        $address_id = $appointment_data['appointment_address_id'];
                        $service_id =  $appointment_data['appointment_service_id'];
                        $thin_app_id =  $appointment_data['thinapp_id'];
                    	$doctor_id =$last_doctor_id;
                        $date= date('Y-m-d');
                        $message = "";
                        $connection  = ConnectionUtil::getConnection();
                        $address_condition = "";
                        $new_appointment="YES";
                        $is_date_blocked = "NO";
                        $created = Custom::created();
                        if (!Custom::check_app_enable_permission($thin_app_id, 'NEW_QUICK_APPOINTMENT')) {
                            $address_condition = " and address_id = $address_id";
                            $new_appointment="NO";
                        }
                        $query = "select id, slot from  appointment_bloked_slots  where thinapp_id = $thin_app_id and new_appointment = '$new_appointment' and doctor_id = $doctor_id $address_condition and book_date = '$date' limit 1";
                        $subscriber = $connection->query($query);
                        if (!$subscriber->num_rows) {
                            $slot_string = '"'.$appointment_data['slot_time'].'"';
                            $sql = "INSERT INTO appointment_bloked_slots (created_by_user_id, new_appointment, service_id, is_date_blocked, thinapp_id, doctor_id, address_id, book_date, slot, message, created, modified) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                            $stmt_sub = $connection->prepare($sql);
                            $stmt_sub->bind_param('ssssssssssss', $user_id, $new_appointment, $service_id, $is_date_blocked, $thin_app_id, $doctor_id, $address_id, $date, $slot_string, $message, $created, $created);
                            $res = $stmt_sub->execute();
                        } else {
                            $block_data = mysqli_fetch_assoc($subscriber);
                        	$slot_string= str_replace('"','',$block_data['slot']);
                            $slot_string = explode(",",$slot_string);
                       		$slot_string[] = $appointment_data['slot_time'];
                            $slot_string = implode(",",$slot_string);
                        	$slot_string = '"'.$slot_string.'"';
                        
                            $blocked_id = $block_data['id'];
                            $sql = "UPDATE  appointment_bloked_slots set modify_by_user_id=?,  slot=?, address_id =?, service_id =?, is_date_blocked =?, message = ?,  modified = ? where id = ?";
                            $stmt_sub = $connection->prepare($sql);
                            $stmt_sub->bind_param('ssssssss', $user_id, $slot_string, $address_id, $service_id, $is_date_blocked, $message, $created, $blocked_id);
                            $res = $stmt_sub->execute();
                        }
                    }
                	
                } else {
                    $response['status'] = 0;
                    $response['message'] = "Doctor could not assign";
                }
            }else{
                $response['status'] = 0;
                $response['message'] = "Invalid request";
            }
            echo json_encode($response);die;
        }else{
            exit();
        }
    }


    public function check_in_appointment()
    {
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $appointment_id = base64_decode($this->request->data['id']);
            $post = array();
            $login = $this->Session->read('Auth.User.User');
            $post['app_key'] = APP_KEY;
            $post['user_id'] = $login['id'];
            $post['thin_app_id'] = $login['thinapp_id'];
            $post['appointment_id'] = $appointment_id;
            $post['mobile'] = $login['mobile'];
            $appointment_data = Custom::get_appointment_by_id($appointment_id);
            $post['doctor_id'] = $appointment_data['appointment_staff_id'];
            $post['appointment_user_role'] = $this->Session->read('Auth.User')['USER_ROLE'];
            if(strtotime($appointment_data['appointment_datetime']) < strtotime(date('Y-m-d H:i'))){
                $post['check_in_type'] = 'LATE_CHECKIN';
                $result  = json_decode(WebServicesFunction_2_3::check_in_patient($post,true),true);
                if($result['status']==1){
                    WebservicesFunction::check_in_appointment($post);
                }else{
                    echo json_encode($result);
                }
            }else{
                WebservicesFunction::check_in_appointment($post);
            }
        } else {
            exit();
        }

    }


    public function update_appointment_slot_color(){
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $type = $this->request->data['type'];
            $colorCode = $this->request->data['color_code'];
            $login = $this->Session->read('Auth.User.User');
            $thinappID = $login['thinapp_id'];
            $post = array();

            $findData = $this->AppointmentSlotColor->find(
                "first",
                array(
                    "conditions"=>array(
                        "AppointmentSlotColor.thinapp_id" => $thinappID,
                        "AppointmentSlotColor.type" => $type
                    )
                )
            );
            if(!empty($findData)) {
                $dataToSave = array(
                    "id" => $findData['AppointmentSlotColor']['id'],
                    "color_code" => $colorCode
                );
            }
            else
            {
                $dataToSave = array(
                    "id" => $findData['AppointmentSlotColor']['id'],
                    "color_code" => $colorCode,
                    "type" => $type,
                    "thinapp_id" => $thinappID
                );
            }

            if($this->AppointmentSlotColor->save($dataToSave))
            {
            	 $file_name = "color_code_$thinappID";
                WebservicesFunction::deleteJson(array($file_name),'thinapp');
                $response = array("status"=>1,"message"=>"Success!");
            }
            else
            {
                $response = array("status"=>0,"message"=>"Failed!");
            }
            echo json_encode($response);die;
        } else {
            exit();
        }
    }


    public function update_default_product(){
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $productID = $this->request->data['productID'];
            $isDefault = $this->request->data['isDefault'];
            $dataToSave = array(
                "id" => $productID,
                "is_default" => $isDefault
            );



            if($this->MedicalProduct->save($dataToSave))
            {
                $response = array("status"=>1,"message"=>"Success!");
            }
            else
            {
                $response = array("status"=>0,"message"=>"Failed!");
            }
            echo json_encode($response);die;
        } else {
            exit();
        }
    }

    public function update_show_opd_row_status(){
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $status = $this->request->data['status'];

            $login = $this->Session->read('Auth.User.User');
            $thinappID = $login['thinapp_id'];


            if($this->Thinapp->updateAll(array("Thinapp.show_opd_row" => "'".$status."'"),array("Thinapp.id" => $thinappID)))
            {
                $response = array("status"=>1,"message"=>"Success!");
            }
            else
            {
                $response = array("status"=>0,"message"=>"Failed!");
            }

            echo json_encode($response);die;
        } else {
            exit();
        }
    }

    public function update_patient_hospital_uhid($data= null){
        $this->layout = 'ajax';
        $this->autoRender = false;
        $return = false;
        if(!empty($data)){
            $return = true;
            $this->request->data= $data;
        }
        $login = $this->Session->read('Auth.User.User');
        $thin_app_id = $login['thinapp_id'];
        $patient_id = @base64_decode($this->request->data['pi']);
        $uhid = @$this->request->data['uhid'];
        if(!empty($patient_id)){
            $saved = $this->AppointmentCustomer->updateAll(array("AppointmentCustomer.third_party_uhid" => "'$uhid'"), array("AppointmentCustomer.id" => $patient_id));
            if ($saved) {
                $response['status'] = 1;
                $response['message'] = "Saved!";
                $file_name = "update_patient_uhid_".$thin_app_id;
                $data_list = json_decode(WebservicesFunction::readJson($file_name,"NOT_TO_DELETE_CACHE"), true);
                if (empty($data_list) ||  $data_list['date'] != date('Y-m-d')){
                    $save_data['date']=date('Y-m-d');
                    $save_data['patient_ids'][]=$patient_id;
                }else{
                    $save_data['date']=date('Y-m-d');
                    $patient_ids = $data_list['patient_ids'];
                    $patient_ids[] = $patient_id;
                    $save_data['patient_ids']=$patient_ids;
                }
                WebservicesFunction::createJson($file_name, json_encode($save_data), "CREATE","NOT_TO_DELETE_CACHE");

            } else {
                $response['status'] = 0;
                $response['message'] = "Could not save!";
            }
        }else{
            $response['status'] = 0;
            $response['message'] = "Invalid request";
        }
        if($return===true){
            return json_encode($response);
        }else{
            echo json_encode($response);die;
        }



    }

    public function book_new_appointment_tmp()
    {
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $post = array();
            $login = $this->Session->read('Auth.User.User');
            $post['app_key'] = APP_KEY;
            $post['thin_app_id'] = $login['thinapp_id'];
            $post['user_id'] = $login['id'];
            $post['role_id'] = $login['role_id'];
            $customer_mobile = Custom::create_mobile_number($this->request->data['mobile']);
            $customer_name = $this->request->data['name'];
            $customer_data =Custom::search_customer_name($login['thinapp_id'],$customer_mobile,$customer_name);
            if(empty($customer_data)){
                $save_customer['app_key'] = APP_KEY;
                $save_customer['thin_app_id'] = $login['thinapp_id'];
                $save_customer['user_id'] = $login['id'];
                $save_customer['first_name'] =$customer_name;
                $save_customer['mobile'] = $customer_mobile;
                $save_customer['country_code'] = "+91";
                $save_customer['third_party_uhid'] = ($this->request->data['uhid']);
                $result = json_decode(WebservicesFunction::appointment_add_customer($save_customer),true);
                if ($result['status'] == 1) {
                    $customer_id = $result['customer_id'];
                }
            }else{
                $save_customer['id'] = $customer_data['id'];
                $save_customer['third_party_uhid'] = ($this->request->data['uhid']);
                $this->AppointmentCustomer->saveAll($save_customer);
                $customer_id = $customer_data['id'];
            }
            if(!empty($customer_id)){
                $post['mobile'] =$login['mobile'];
                $post['booking_date'] = date('Y-m-d');
                $post['slot_time'] = $this->request->data['slot'];
                $post['doctor_id'] = ($this->request->data['doctor']);
                $post['user_type'] = "CUSTOMER";
                $post['children_id'] = 0;
                $post['customer_name'] = $customer_name;
                $post['customer_mobile'] = $customer_mobile;
                $post['address_id'] = ($this->request->data['address']);
                $post['service_id'] = ($this->request->data['service']);
                $post['third_party_uhid'] = ($this->request->data['uhid']);
                $post['queue_number'] = ($this->request->data['queue']);
                $data_type = ($this->request->data['dt']);
                if($data_type == "ADD_MORE_TOKEN"){
                    $post['appointment_type'] = "ADD_MORE_TOKEN";
                    $post['custom_token'] = "YES";
                }


                $post['customer_id'] = $customer_id;
                $post['isAddMore'] = "NO";
                $post['payment_type'] = "CASH";
                $post['transaction_id'] = "";
                $post['appointment_user_role'] = Custom::get_appointment_role($login['mobile'], $login['thinapp_id'], $login['role_id']);
                $result = WebservicesFunction::check_appointment_validity($post, true);
                if ($result['status'] == 1) {
                    $response =  json_decode(WebservicesFunction::add_new_appointment($post, true, 'ROBOT'),true);
                    if($response['status']==1 && $response['data']['flag']=='PAID'){
                        $status = 'CONFIRM';
                        $payment_status = 'SUCCESS';
                        $appointment_id = $response['data']['appointment_id'];
                        $connection = ConnectionUtil::getConnection();
                        $amount = $this->request->data['amount'];
                        $receitpID = Custom::addZeroOPDReceipt($appointment_id, 0, $customer_id, $post['address_id'], $login['thinapp_id'], $post['doctor_id'],$amount);
                        $sql1 = "UPDATE appointment_customer_staff_services set medical_product_order_id =?, status =?, payment_status =? where id =?";
                        $stmt_sub1 = $connection->prepare($sql1);
                        $stmt_sub1->bind_param('ssss', $receitpID, $status, $payment_status, $appointment_id);
                        if($stmt_sub1->execute()){

                        }
                        
                    }
                    Custom::sendResponse($response);
                    Custom::send_process_to_background();
                    Custom::send_book_appointment_notification($response['notification_data']);


                } else {
                     Custom::sendResponse($result);
                }
            }else{
                $result['status'] = 0;
                $result['message'] = "Invalid Customer";
            }
        }
        exit();
    }

    public function update_payment_uhid()
    {
        $this->layout = 'ajax';
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $login = $this->Session->read('Auth.User.User');
            $thin_app_id = $login['thinapp_id'];
            $patient_id = @base64_decode($this->request->data['pi']);
            $appointment_id = @base64_decode($this->request->data['ai']);
            $uhid = @$this->request->data['uhid'];
            if (!empty($patient_id) && !empty($appointment_id)) {
                $login = $this->Session->read('Auth.User.User');
                $post['app_key'] = APP_KEY;
                $post['user_id'] = $login['id'];
                $post['thin_app_id'] = $login['thinapp_id'];
                $post['appointment_id'] = $appointment_id;
                $post['status'] = "SUCCESS";
                $payment_result = json_decode(WebservicesFunction::update_appointment_payment_status($post, true), true);
                $post['pi'] = base64_encode($patient_id);
                $post['uhid'] = $uhid;
                $uhid_result = json_decode($this->update_patient_hospital_uhid($post), true);
                if ($payment_result['status'] == 1) {
                    $response['status'] = 1;
                    $response['message'] = "Saved!";
                } else {
                    $response['status'] = 0;
                    $response['message'] = "Could not save!";
                }
            } else {
                $response['status'] = 0;
                $response['message'] = "Invalid request";
            }
            echo json_encode($response);
            die;
        }
    }

    public function get_all_appointment_list_by_filter($filter,$date=null){


        $login = $this->Session->read('Auth.User.User');
        $thin_app_id = $login['thinapp_id'];
         $date = empty($date)?date('Y-m-d'):$date;
        $appointment_list =array();
        if($filter=="SUCCESS"){
            $condition = " AND acss.appointment_booked_from != 'ROBOT' and acss.payment_status ='SUCCESS'";
        }else if($filter=="PENDING"){
            $condition = " and acss.payment_status ='PENDING'";
        }
        $query = "SELECT  acss.id as appointment_id, ac.uhid, acss.has_token, acss.emergency_appointment, acss.queue_number,  IF(acss.payment_status='SUCCESS',IFNULL(hpt.NAME,'Cash'),'') AS payment_via, acss.payment_status, acss.id, IFNULL(mpo.total_amount,acss.amount) AS amount, ac.mobile as patient_mobile,  ac.id as patient_id, staff.name AS doctor_name, department.name AS doctor_department, ac.title, ac.first_name AS patient_name, ac.age as patient_age, ac.uhid as patient_uhid, ac.gender,ac.third_party_uhid as hospital_uhid, country.name AS country_name, state.NAME AS state_name, IFNULL(city.name,ac.city_name) AS city_name FROM appointment_customer_staff_services AS acss join thinapps as t on t.id= acss.thinapp_id LEFT JOIN appointment_staffs AS staff ON staff.id= acss.appointment_staff_id LEFT JOIN appointment_categories AS department ON department.id= staff.appointment_category_id LEFT JOIN appointment_customers AS ac ON ac.id= acss.appointment_customer_id LEFT JOIN countries AS country ON country.id = ac.country_id LEFT JOIN states AS state ON state.id = ac.state_id LEFT JOIN cities AS city ON city.id= ac.city_id LEFT JOIN medical_product_orders AS mpo ON mpo.id = acss.medical_product_order_id LEFT JOIN hospital_payment_types AS hpt ON hpt.id = mpo.hospital_payment_type_id WHERE DATE(acss.appointment_datetime) = '$date' AND acss.thinapp_id = $thin_app_id and acss.appointment_customer_id > 0 and acss.status !='CANCELED'  $condition ORDER BY acss.id desc";
        $connection = ConnectionUtil::getConnection();
        $list = $connection->query($query);
        if ($list->num_rows) {
            $appointment_list  = mysqli_fetch_all($list,MYSQL_ASSOC);
        }
        $this->set(array('appointment_list'=>$appointment_list));
    }

    public function send_to_lab()
    {
                $this->autoRender = false;
                if ($this->request->is('ajax')) {
                    $appointment_id = base64_decode($this->request->data['id']);
                    $post = array();
                    $login = $this->Session->read('Auth.User.User');
                    $post['app_key'] = APP_KEY;
                    $post['user_id'] = $login['id'];
                    $post['thin_app_id'] = $login['thinapp_id'];
                    $post['mobile'] = $login['mobile'];
                    $post['appointment_id'] = $appointment_id;
                    WebServicesFunction_2_3::send_to_lab($post);
                } else {
                    exit();
                }

    }

    public function get_doctor_upcoming_token_list()
    {
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $login = $this->Session->read('Auth.User.User');
            $thin_app_id = $login['thinapp_id'];
            $doctor_id = base64_decode($this->request->data['di']);;
            $list = Custom::getDoctorWebTrackerDataUpcomingList(array($doctor_id),$thin_app_id,9999);
            $return = array();
            if(!empty($list[$doctor_id])){
                $return[] = array('patient_name'=>$list[$doctor_id]['current_patient'],'emergency_appointment'=>$list[$doctor_id]['emergency_appointment'],'show_after_queue'=>$list[$doctor_id]['show_after_queue'],'token'=>$list[$doctor_id]['current_token'],'status'=>'CURRENT');
                if(!empty($list[$doctor_id]['upcoming'])){
                    foreach($list[$doctor_id]['upcoming'] as $key => $data){
                        $return[] = array('patient_name'=>$data['patient_name'],'emergency_appointment'=>$data['emergency_appointment'],'show_after_queue'=>$data['show_after_queue'],'token'=>$data['queue_number'],'status'=>$data['patient_queue_type']);
                    }
                }
            }
            $response['status'] = 0;
            $response['message'] = 'List not found';
            if(!empty($response)){
                $response['status'] = 1;
                $response['message'] = 'List found';
                $response['list'] = $return;
            }

            return json_encode($response);
        } else {
            exit();
        }

    }

    public function check_in_patient()
    {
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $auto_assign_token = @($this->request->data['aat']);
            $queue_number = @($this->request->data['qn']);
            $check_in_type = @strtoupper($this->request->data['ct']);
            $queue_after = @($this->request->data['qa']);
            $doctor_id = base64_decode($this->request->data['di']);
            $appointment_id = base64_decode($this->request->data['ai']);
            $current_token = ($this->request->data['ctoken']);
            $appointment_data = Custom::get_appointment_by_id($appointment_id);
            if(!empty($appointment_data)){

                $post = array();
                $login = $this->Session->read('Auth.User.User');
                $post['app_key'] = APP_KEY;
                $post['user_id'] = $login['id'];
                $post['thin_app_id'] = $login['thinapp_id'];
                $post['mobile'] = $login['mobile'];
                $post['appointment_id'] = $appointment_id;
                $this->AppointmentCustomerStaffService->set('id', $appointment_id);
                $this->AppointmentCustomerStaffService->set('patient_queue_checked_in', "YES");
                $this->AppointmentCustomerStaffService->set('patient_queue_type', strtoupper($check_in_type));
                $this->AppointmentCustomerStaffService->set('show_after_queue', $queue_number);
                $this->AppointmentCustomerStaffService->set('skip_tracker', "NO");
                $this->AppointmentCustomerStaffService->set('queue_assign_type', 2);
                $this->AppointmentCustomerStaffService->set('queue_check_in_datetime', date('Y-m-d H:i:s'));
                $this->AppointmentCustomerStaffService->set('check_in_datetime', date('Y-m-d H:i:s'));
                if($auto_assign_token==0 && !empty($queue_after)){
                    $check_date_after = Custom::is_token_is_alive(date('Y-m-d'), $appointment_data['appointment_staff_id'], $appointment_data['appointment_service_id'], $appointment_data['appointment_address_id'],$queue_after,$queue_number);
                    if(DateTime::createFromFormat('Y-m-d H:i:s', $check_date_after) !== FALSE){
                        $this->AppointmentCustomerStaffService->set('queue_check_in_datetime', $check_date_after);
                    }
                    $this->AppointmentCustomerStaffService->set('show_after_queue', $queue_after);
                }
                if($auto_assign_token==1){
                    $this->AppointmentCustomerStaffService->set('queue_assign_type', 1);
                    $show_after_queue =Custom::get_auto_assign_token($appointment_data['appointment_staff_id'],$login['thinapp_id'],$check_in_type);
                    $this->AppointmentCustomerStaffService->set('show_after_queue', $show_after_queue);
                    if(strtoupper($check_in_type)=="EARLY_CHECKIN"){
                        $first_datetime_data = Custom::get_first_checking_datetime_after_token_data(date('Y-m-d'), $appointment_data['appointment_staff_id'], $appointment_data['appointment_service_id'], $appointment_data['appointment_address_id'],$show_after_queue);
                        if(!empty($first_datetime_data)){
                            $this->AppointmentCustomerStaffService->set('queue_check_in_datetime', $first_datetime_data['less_date']);
                        }
                    }
                }
                if ($this->AppointmentCustomerStaffService->save()){
                    $response['status'] = 1;
                    $response['message'] = "Check In successfully";
                    Custom::sendResponse($response);
                    Custom::send_process_to_background();
                    $result = Custom::manage_emergency_tracker_cache($appointment_id,"DELETE");
                    Custom::update_tracker_time_difference($appointment_id);
                    Custom::send_web_tracker_notification($login['thinapp_id']);
                } else {
                    $response['status'] = 0;
                    $response['message'] = "Unble to checkin";
                    Custom::sendResponse($response);
                }
            }else{
                $response['status'] = 0;
                $response['message'] = "Invalid Data";
                Custom::sendResponse($response);
            }


        } exit();

    }


    public function search_booking_convenience_report(){
        $reqData = $this->request->data['Search'];
        $pram = array();

        if (!empty($reqData['from_date'])) {
            $pram['f'] = $reqData['from_date'];
        }
        if (!empty($reqData['to_date'])) {
            $pram['t'] = $reqData['to_date'];
        }
        if (!empty($reqData['appointment_booked_from'])) {
            $pram['a'] = $reqData['appointment_booked_from'];
        }
        if (!empty($reqData['account_type'])) {
            $pram['at'] = $reqData['account_type'];
        }


        $this->redirect(
            array(
                "controller" => "app_admin",
                "action" => "booking_convenience_report",
                "?" => $pram,
            )
        );
    }


    public function booking_convenience_report(){

        $this->layout = "app_admin_home";

        $login = $this->Session->read('Auth.User.User');
        $thinappID = $login['thinapp_id'];
        $today = date("Y-m-d");

        $login1 = $this->Session->read('Auth.User');
        $condition = " AND `appointment_customer_staff_services`.`status` != 'REFUNDED' AND `booking_convenience_fee_details`.`thinapp_id` = '".$thinappID."'";


        if ($login1['USER_ROLE'] != 'ADMIN') {

            $condition .= " and  booking_convenience_fee_details.created_by_user_id =" . $login['id'];

        }

        $searchData = $this->request->query;

        if (isset($searchData['f']) && !empty($searchData['f']) && !empty($searchData['t']) && isset($searchData['t'])) {


            $this->request->data['Search']['from_date'] = $searchData['f'];
            $from_date = DateTime::createFromFormat('d/m/Y', $searchData['f'])->format('Y-m-d');
            $this->request->data['Search']['to_date'] = $searchData['t'];
            $to_date = DateTime::createFromFormat('d/m/Y', $searchData['t'])->format('Y-m-d');
            $condition .= " and  DATE(booking_convenience_fee_details.created) BETWEEN '$from_date' and '$to_date'";

        } else {
            $today = date("d/m/Y");
            $search_today = date("Y-m-d");
            $this->request->data['Search']['to_date'] = $this->request->data['Search']['from_date'] = $today;
            $condition .= " and  DATE(booking_convenience_fee_details.created) BETWEEN '$search_today' and '$search_today'";

        }

        if (isset($searchData['a'])) {
            $this->request->data['Search']['appointment_booked_from'] = $searchData['a'];
            $condition .= " and  appointment_customer_staff_services.appointment_booked_from = '".$searchData['a']."'";
        }

        if (isset($searchData['at'])) {
            $this->request->data['Search']['account_type'] = $searchData['at'];
            $condition .= " and  booking_convenience_fee_details.payment_account = '".$searchData['at']."'";
        }



        $recSql = "SELECT IFNULL(appointment_staffs.name,users.username) as username, SUM(`booking_convenience_fee_details`.`amount`) AS `total_amount` FROM `booking_convenience_fee_details`  LEFT JOIN `appointment_customer_staff_services` ON (`appointment_customer_staff_services`.`id` = `booking_convenience_fee_details`.`appointment_customer_staff_service_id`) LEFT JOIN `users` ON (`users`.`id` = `booking_convenience_fee_details`.`created_by_user_id`) LEFT JOIN appointment_staffs ON (appointment_staffs.user_id = booking_convenience_fee_details.created_by_user_id AND appointment_staffs.status = 'ACTIVE' AND appointment_staffs.user_id > 0) WHERE `booking_convenience_fee_details`.`status` = 'ACTIVE' AND `booking_convenience_fee_details`.`payment_account` = 'CLINIC' AND `booking_convenience_fee_details`.`created_by_user_id` > 0 ".$condition." GROUP BY `booking_convenience_fee_details`.`created_by_user_id`";

        $connection = ConnectionUtil::getConnection();
        $recRS = $connection->query($recSql);
        $recData  = mysqli_fetch_all($recRS,MYSQL_ASSOC);

        $allSql = "SELECT  appointment_customer_staff_services.consulting_type, bco.convence_for, SUM(tcl.call_charges) AS call_charges, `booking_convenience_fee_details`.*, IFNULL(appointment_staffs.name,users.username) as username, IFNULL(`childrens`.`child_name`,`appointment_customers`.`first_name`) as customer_name,`appointment_customer_staff_services`.`appointment_booked_from`,`appointment_customer_staff_services`.`queue_number`,`appointment_customer_staff_services`.`appointment_datetime` FROM `booking_convenience_fee_details` left join booking_convenience_orders as bco on bco.id = booking_convenience_fee_details.booking_convenience_order_id left join telemedicine_call_logs as tcl on tcl.appointment_customer_staff_service_id = booking_convenience_fee_details.appointment_customer_staff_service_id  LEFT JOIN `users` ON (`users`.`id` = `booking_convenience_fee_details`.`created_by_user_id`) LEFT JOIN appointment_staffs ON (appointment_staffs.user_id = booking_convenience_fee_details.created_by_user_id AND appointment_staffs.status = 'ACTIVE' AND appointment_staffs.user_id > 0) LEFT JOIN `appointment_customers` ON (`appointment_customers`.`id` = `booking_convenience_fee_details`.`appointment_customer_id`) LEFT JOIN `childrens` ON (`childrens`.`id` = `booking_convenience_fee_details`.`children_id`) LEFT JOIN `appointment_customer_staff_services` ON (`appointment_customer_staff_services`.`id` = `booking_convenience_fee_details`.`appointment_customer_staff_service_id`) WHERE `booking_convenience_fee_details`.`status` = 'ACTIVE' ".$condition." GROUP BY `booking_convenience_fee_details`.`id` ORDER BY `booking_convenience_fee_details`.`id` DESC";
        


        $allRS = $connection->query($allSql);
        $allData  = mysqli_fetch_all($allRS,MYSQL_ASSOC);

        $reportTitle = $login1['Thinapp']['name'].' ('.date('d/m/Y').')';

        $this->set(array('allData'=>$allData,'recData'=>$recData,'reportTitle'=>$reportTitle));



    }




    public function sms_template()
    {
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User');
        $templateData = $this->AppSmsTemplate->find("first", array("conditions" => array("AppSmsTemplate.thinapp_id" =>  $login['User']['thinapp_id'])));
        if ($this->request->is(array('post', 'put'))) {
            $this->request->data['AppSmsTemplate']['thinapp_id'] = $login['User']['thinapp_id'];
            if(!empty($templateData)){
                $this->request->data['AppSmsTemplate']['id'] = $templateData['AppSmsTemplate']['id'];
            }
            $this->AppSmsTemplate->set($this->request->data['AppSmsTemplate']);
            if ($this->AppSmsTemplate->save($this->request->data['AppSmsTemplate'])) {
                $this->Session->setFlash(__('Template save successfully.'), 'default', array(), 'success');
                $this->redirect(array('controller' => 'app_admin', 'action' => 'sms_template', 'admin' => false));
            } else {
                $this->Session->setFlash(__('Soory template not save.'), 'default', array(), 'error');
            }
        }else{
            $this->request->data = $templateData;
        }
    }

 public function get_discharge_eye_template($ipd_id, $discharge_id = null)
    {
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User');
        $ipdIDBase = $ipd_id;
        $dischargeIDBase = $discharge_id;
        $ipd_id = base64_decode($ipd_id);

        $ipd_data = $this->HospitalIpd->find("first", array(
            "conditions" => array(
                "HospitalIpd.id" => $ipd_id
            ),
            'contain' => array('AppointmentStaff','HospitalServiceCategory')
        ));
        if (!empty($ipd_data)) {

            $patient_type = $ipd_data['HospitalIpd']['patient_type'];
            $patient_id = $ipd_data['HospitalIpd']['patient_id'];


            $post = $discharge = $this->HospitalDischarge->find("first", array(
                "conditions" => array(
                    "HospitalDischarge.id" => base64_decode($discharge_id),
                ),
                'contain' => array('AppointmentStaff', 'AppointmentCustomer', 'Children', 'Thinapp')
            ));
            $patient_name = @trim($post['Children']['child_name'] . $post['AppointmentCustomer']['first_name']);
            $object = ($patient_type == "CUSTOMER") ? 'AppointmentCustomer' : "Children";


            if (empty($post)) {
                if ($patient_type == "CUSTOMER") {
                    $object = 'AppointmentCustomer';
                    $post = $this->AppointmentCustomer->find("first", array(
                        "conditions" => array(
                            "AppointmentCustomer.id" => $patient_id,
                        ),
                        'contain' => array('Thinapp')
                    ));
                    $patient_name = $post['AppointmentCustomer']['first_name'];
                } else {
                    $object = 'Children';
                    $post = $this->Children->find("first", array(
                        "conditions" => array(
                            "Children.id" => $patient_id,
                        ),
                        'contain' => array('Thinapp')
                    ));
                    $patient_name = $post['Children']['child_name'];
                }
            }

            if ($this->request->is(array('post', 'put'))) {

                $this->request->data['HospitalIpd']['id'] = $ipd_data['HospitalIpd']['id'];
                $this->request->data['HospitalIpd']['admit_status'] = 'DISCHARGE';
                $this->request->data['HospitalDischarge']['patient_type'] = $patient_type;
                $this->request->data['HospitalDischarge']['patient_id'] = $patient_id;
                $this->request->data['HospitalDischarge']['thinapp_id'] = $ipd_data['HospitalIpd']['thinapp_id'];

                try {
                    $dischargeDate = date('Y-m-d H:i:s');
                    if (!empty($this->request->data['HospitalDischarge']['discharge_date'])) {
                        $date = DateTime::createFromFormat('d/m/Y h:i A', $this->request->data['HospitalDischarge']['discharge_date']);
                        $dischargeDate = $date->format('Y-m-d H:i:s');
                        $this->request->data['HospitalDischarge']['discharge_date'] = $dischargeDate;
                    }

                    if (!empty($this->request->data['HospitalDischarge']['surgery_date'])) {
                        $date = DateTime::createFromFormat('d/m/Y h:i A', $this->request->data['HospitalDischarge']['surgery_date']);
                        $this->request->data['HospitalDischarge']['surgery_date'] = $date->format('Y-m-d H:i:s');
                    }else{
                        $this->request->data['HospitalDischarge']['surgery_date'] = '';
                    }

                } catch (Exception $e) {

                }

                if (!empty($discharge)) {
                    $this->request->data['HospitalDischarge']['id'] = $discharge['HospitalDischarge']['id'];
                }
                $this->HospitalDischarge->set($this->request->data['HospitalDischarge']);

                if ($this->HospitalDischarge->validates()) {
                    if ($this->HospitalDischarge->saveAll($this->request->data)) {



                        if($discharge_id == null)
                        {
                            $dischargeID = $this->HospitalDischarge->getLastInsertId();
                            $IpdBedHistoryData = $this->IpdBedHistory->find("first",array("conditions"=>array("IpdBedHistory.hospital_ipd_id"=>$ipd_id),"contain"=>false,"order"=>"IpdBedHistory.id DESC"));
                            if(!empty($IpdBedHistoryData))
                            {
                                $dataToSaveInBedHistory = array(
                                    'id' => $IpdBedHistoryData['IpdBedHistory']['id'],
                                    'to_date' => $dischargeDate,
                                    'occupancy' => "UNOCCUPIED",
                                    'hospital_discharge_id' => $dischargeID,
                                );
                                $this->IpdBedHistory->save($dataToSaveInBedHistory);
                            }

                        }
                        else
                        {
                            $dischargeID = base64_decode($discharge_id);
                            $dataToSaveInBedHistory = array(
                                'IpdBedHistory.to_date' => "'".$dischargeDate."'",
                                'IpdBedHistory.occupancy' => "'UNOCCUPIED'",
                            );
                            $this->IpdBedHistory->updateAll($dataToSaveInBedHistory, array('IpdBedHistory.hospital_discharge_id' => $dischargeID));
                        }


                        $this->Session->setFlash(__('Patient discharge successfully.'), 'default', array(), 'success');
                        $this->redirect(array('controller' => 'app_admin', 'action' => 'ipd'));
                    } else {
                        $this->Session->setFlash(__('Sorry member could not discharge.'), 'default', array(), 'error');
                    }
                }
            }
            if (!$this->request->data) {
                $this->request->data = $post;

            }

            $templateList = $this->HospitalDischargeTemplate->find('list',array('conditions'=>array('HospitalDischargeTemplate.status'=>'ACTIVE','HospitalDischargeTemplate.thinapp_id'=>$login['User']['thinapp_id'])));
            $ipd_id = $ipdIDBase;
            $discharge_id = $dischargeIDBase;
            $templateID = '';
            $this->set(compact('templateID','templateList', 'post', 'object', 'patient_name', 'patient_type', 'ipd_data', 'ipd_id', 'discharge_id'));

        } else {
            exit();
        }

    }

    public function list_discharge_eye_template(){

        $login = $this->Session->read('Auth.User.User');
        $thinappID = $login['thinapp_id'];

        $list = $this->HospitalDischargeTemplate->find('all',array(
                'conditions'=>array('HospitalDischargeTemplate.thinapp_id'=>$thinappID)
            )
        );

        $this->set(array('dataList'=>$list));

    }

    public function add_discharge_eye_template(){


            $login = $this->Session->read('Auth.User');
            if ($this->request->is(array('post', 'put'))) {


                $this->request->data['HospitalDischargeTemplate']['thinapp_id'] = $login['User']['thinapp_id'];
                $dataToSave = $this->request->data['HospitalDischargeTemplate'];


                if ($this->HospitalDischargeTemplate->save($dataToSave)) {


                        $this->Session->setFlash(__('template add successfully.'), 'default', array(), 'success');
                        $this->redirect(array('controller' => 'app_admin', 'action' => 'list_discharge_eye_template'));



                }
                else
                {
                    $this->Session->setFlash(__('Sorry template could not add.'), 'default', array(), 'error');
                }

            }



    }
    
    public function edit_discharge_eye_template($templateID = null){
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User.User');

        $id = base64_decode($templateID);
        if ($this->request->is(array('post', 'put'))) {
            $data = $this->request->data['HospitalDischargeTemplate'];
            $data['id'] = $id;
            $data['thinapp_id'] = $login['thinapp_id'];
            $data['name'] = trim($data['name']);

                if ($this->HospitalDischargeTemplate->save($data)) {
                    $this->Session->setFlash('Template edited successfully!', 'default', array(), 'success');
                    $this->redirect(array('controller' => 'app_admin', 'action' => 'list_discharge_eye_template'));
                } else {
                    $this->Session->setFlash("Sorry, Couldn't edit template", 'default', array(), 'error');
                }
        }
        else
            {
            $dataToSend = $this->HospitalDischargeTemplate->findById($id);
            $this->request->data = $dataToSend;
        }
    }

    public function discharge_by_template($templateID = null,$ipd_id, $discharge_id = null){


        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User');
        $ipdIDBase = $ipd_id;
        $dischargeIDBase = $discharge_id;
        $ipd_id = base64_decode($ipd_id);
        $templateID = base64_decode($templateID);

        $ipd_data = $this->HospitalIpd->find("first", array(
            "conditions" => array(
                "HospitalIpd.id" => $ipd_id
            ),
            'contain' => array('AppointmentStaff','HospitalServiceCategory')
        ));
        if (!empty($ipd_data)) {

            $patient_type = $ipd_data['HospitalIpd']['patient_type'];
            $patient_id = $ipd_data['HospitalIpd']['patient_id'];


            $post = $discharge = $this->HospitalDischarge->find("first", array(
                "conditions" => array(
                    "HospitalDischarge.id" => base64_decode($discharge_id),
                ),
                'contain' => array('AppointmentStaff', 'AppointmentCustomer', 'Children', 'Thinapp')
            ));
            $patient_name = @trim($post['Children']['child_name'] . $post['AppointmentCustomer']['first_name']);
            $object = ($patient_type == "CUSTOMER") ? 'AppointmentCustomer' : "Children";


            if (empty($post)) {
                if ($patient_type == "CUSTOMER") {
                    $object = 'AppointmentCustomer';
                    $post = $this->AppointmentCustomer->find("first", array(
                        "conditions" => array(
                            "AppointmentCustomer.id" => $patient_id,
                        ),
                        'contain' => array('Thinapp')
                    ));
                    $patient_name = $post['AppointmentCustomer']['first_name'];
                } else {
                    $object = 'Children';
                    $post = $this->Children->find("first", array(
                        "conditions" => array(
                            "Children.id" => $patient_id,
                        ),
                        'contain' => array('Thinapp')
                    ));
                    $patient_name = $post['Children']['child_name'];
                }
            }

            if ($this->request->is(array('post', 'put'))) {

                $this->request->data['HospitalIpd']['id'] = $ipd_data['HospitalIpd']['id'];
                $this->request->data['HospitalIpd']['admit_status'] = 'DISCHARGE';
                $this->request->data['HospitalDischarge']['patient_type'] = $patient_type;
                $this->request->data['HospitalDischarge']['patient_id'] = $patient_id;
                $this->request->data['HospitalDischarge']['thinapp_id'] = $ipd_data['HospitalIpd']['thinapp_id'];

                try {
                    $dischargeDate = date('Y-m-d H:i:s');
                    if (!empty($this->request->data['HospitalDischarge']['discharge_date'])) {
                        $date = DateTime::createFromFormat('d/m/Y h:i A', $this->request->data['HospitalDischarge']['discharge_date']);
                        $dischargeDate = $date->format('Y-m-d H:i:s');
                        $this->request->data['HospitalDischarge']['discharge_date'] = $dischargeDate;
                    }

                    if (!empty($this->request->data['HospitalDischarge']['surgery_date'])) {
                        $date = DateTime::createFromFormat('d/m/Y h:i A', $this->request->data['HospitalDischarge']['surgery_date']);
                        $this->request->data['HospitalDischarge']['surgery_date'] = $date->format('Y-m-d H:i:s');
                    }else{
                        $this->request->data['HospitalDischarge']['surgery_date'] = '';
                    }

                } catch (Exception $e) {

                }

                if (!empty($discharge)) {
                    $this->request->data['HospitalDischarge']['id'] = $discharge['HospitalDischarge']['id'];
                }
                $this->HospitalDischarge->set($this->request->data['HospitalDischarge']);

                if ($this->HospitalDischarge->validates()) {
                    if ($this->HospitalDischarge->saveAll($this->request->data)) {



                        if($discharge_id == null)
                        {
                            $dischargeID = $this->HospitalDischarge->getLastInsertId();
                            $IpdBedHistoryData = $this->IpdBedHistory->find("first",array("conditions"=>array("IpdBedHistory.hospital_ipd_id"=>$ipd_id),"contain"=>false,"order"=>"IpdBedHistory.id DESC"));
                            if(!empty($IpdBedHistoryData))
                            {
                                $dataToSaveInBedHistory = array(
                                    'id' => $IpdBedHistoryData['IpdBedHistory']['id'],
                                    'to_date' => $dischargeDate,
                                    'occupancy' => "UNOCCUPIED",
                                    'hospital_discharge_id' => $dischargeID,
                                );
                                $this->IpdBedHistory->save($dataToSaveInBedHistory);
                            }

                        }
                        else
                        {
                            $dischargeID = base64_decode($discharge_id);
                            $dataToSaveInBedHistory = array(
                                'IpdBedHistory.to_date' => "'".$dischargeDate."'",
                                'IpdBedHistory.occupancy' => "'UNOCCUPIED'",
                            );
                            $this->IpdBedHistory->updateAll($dataToSaveInBedHistory, array('IpdBedHistory.hospital_discharge_id' => $dischargeID));
                        }


                        $this->Session->setFlash(__('Patient discharge successfully.'), 'default', array(), 'success');
                        $this->redirect(array('controller' => 'app_admin', 'action' => 'ipd'));
                    } else {
                        $this->Session->setFlash(__('Sorry Patient could not discharge.'), 'default', array(), 'error');
                    }
                }
            }
            if (!$this->request->data) {

                if($templateID > 0)
                {
                    $templateData = $this->HospitalDischargeTemplate->findById($templateID);
                    $post['HospitalDischarge']['rohini_id'] = $templateData['HospitalDischargeTemplate']['rohini_id'];
                    $post['HospitalDischarge']['lama'] = $templateData['HospitalDischargeTemplate']['lama'];
                    $post['HospitalDischarge']['death'] = $templateData['HospitalDischargeTemplate']['death'];
                    $post['HospitalDischarge']['mlc'] = $templateData['HospitalDischargeTemplate']['mlc'];
                    $post['HospitalDischarge']['drug_allergies'] = $templateData['HospitalDischargeTemplate']['drug_allergies'];
                    $post['HospitalDischarge']['final_diagnosis'] = $templateData['HospitalDischargeTemplate']['final_diagnosis'];
                    $post['HospitalDischarge']['chief_complaints'] = $templateData['HospitalDischargeTemplate']['chief_complaints'];
                    $post['HospitalDischarge']['patient_history'] = $templateData['HospitalDischargeTemplate']['patient_history'];
                    $post['HospitalDischarge']['clinical_examination'] = $templateData['HospitalDischargeTemplate']['clinical_examination'];
                    $post['HospitalDischarge']['investigation_detail'] = $templateData['HospitalDischargeTemplate']['investigation_detail'];
                    $post['HospitalDischarge']['treatment_given'] = $templateData['HospitalDischargeTemplate']['treatment_given'];
                    $post['HospitalDischarge']['condition_at_discharge'] = $templateData['HospitalDischargeTemplate']['condition_at_discharge'];
                    $post['HospitalDischarge']['discharge_advice'] = $templateData['HospitalDischargeTemplate']['discharge_advice'];
                    $post['HospitalDischarge']['medication'] = $templateData['HospitalDischargeTemplate']['medication'];
                    $post['HospitalDischarge']['follow_up'] = $templateData['HospitalDischargeTemplate']['follow_up'];
                }


                $this->request->data = $post;

            }
            $templateList = $this->HospitalDischargeTemplate->find('list',array('conditions'=>array('HospitalDischargeTemplate.status'=>'ACTIVE','HospitalDischargeTemplate.thinapp_id'=>$login['User']['thinapp_id'])));
            $this->set(compact('templateList','post','templateID', 'object', 'patient_name', 'patient_type', 'ipd_data', 'ipd_id', 'discharge_id'));
            $this->render('get_discharge_eye_template');

        } else {
            exit();
        }

    }

public function search_booking_convenience_order(){
        $reqData = $this->request->data['Search'];
        $pram = array();

        if (!empty($reqData['from_date'])) {
            $pram['f'] = $reqData['from_date'];
        }
        if (!empty($reqData['to_date'])) {
            $pram['t'] = $reqData['to_date'];
        }
        if (!empty($reqData['appointment_booked_from'])) {
            $pram['a'] = $reqData['appointment_booked_from'];
        }
        if (!empty($reqData['status'])) {
            $pram['at'] = $reqData['status'];
        }


        $this->redirect(
            array(
                "controller" => "app_admin",
                "action" => "get_booking_convenience_order",
                "?" => $pram,
            )
        );
    }

    public function get_booking_convenience_order(){


        $this->layout = "app_admin_home";

        $login = $this->Session->read('Auth.User.User');
        $thinappID = $login['thinapp_id'];
        $today = date("Y-m-d");

        $login1 = $this->Session->read('Auth.User');
        $condition = " `booking_convenience_orders`.`thinapp_id` = '".$thinappID."'";


        $searchData = $this->request->query;

        if (isset($searchData['f']) && !empty($searchData['f']) && !empty($searchData['t']) && isset($searchData['t']))     {


            $this->request->data['Search']['from_date'] = $searchData['f'];
            $from_date = DateTime::createFromFormat('d/m/Y', $searchData['f'])->format('Y-m-d');
            $this->request->data['Search']['to_date'] = $searchData['t'];
            $to_date = DateTime::createFromFormat('d/m/Y', $searchData['t'])->format('Y-m-d');
            $condition .= " and  DATE(booking_convenience_orders.created) BETWEEN '$from_date' and '$to_date'";

        } else {
            $today = date("d/m/Y");
            $search_today = date("Y-m-d");
            $this->request->data['Search']['to_date'] = $this->request->data['Search']['from_date'] = $today;
            $condition .= " and  DATE(booking_convenience_orders.created) BETWEEN '$search_today' and '$search_today'";

        }

        if (isset($searchData['a'])) {
            $this->request->data['Search']['appointment_booked_from'] = $searchData['a'];
            $condition .= " and  appointment_customer_staff_services.appointment_booked_from = '".$searchData['a']."'";
        }

        if (isset($searchData['at'])) {
            $this->request->data['Search']['status'] = $searchData['at'];
            $condition .= " and  booking_convenience_orders.status = '".$searchData['at']."'";
        }







        $allSql = "SELECT `booking_convenience_orders`.*, IFNULL(`childrens`.`child_name`,`appointment_customers`.`first_name`) as customer_name,`appointment_customer_staff_services`.`appointment_booked_from`,`appointment_customer_staff_services`.`queue_number`,`appointment_customer_staff_services`.`appointment_datetime` FROM `booking_convenience_orders` LEFT JOIN `appointment_customers` ON (`appointment_customers`.`id` = `booking_convenience_orders`.`appointment_customer_id`) LEFT JOIN `childrens` ON (`childrens`.`id` = `booking_convenience_orders`.`children_id`) LEFT JOIN `appointment_customer_staff_services` ON (`appointment_customer_staff_services`.`id` = `booking_convenience_orders`.`appointment_customer_staff_service_id`) WHERE ".$condition." GROUP BY `booking_convenience_orders`.`id` ORDER BY `booking_convenience_orders`.`id` DESC";
$connection = ConnectionUtil::getConnection();
        $allRS = $connection->query($allSql);
        $allData  = mysqli_fetch_all($allRS,MYSQL_ASSOC);

        $reportTitle = $login1['Thinapp']['name'].' ('.date('d/m/Y').')';

        $this->set(array('allData'=>$allData,'reportTitle'=>$reportTitle));


    }
	
	public function switch_patient_modal()
    {
        $this->layout = false;
        $this->autoRender = false;
        if ($this->request->is(array('ajax'))) {
            $mobile = Custom::create_mobile_number($this->request->data['m']);
            $appointment_id = ($this->request->data['ai']);
            $patient_id = base64_decode($this->request->data['pi']);
            $patient_type = ($this->request->data['pt']);
            $login = $this->Session->read('Auth.User.User');
            $thin_app_id = $login['thinapp_id'];
            $query = "SELECT * FROM (SELECT 'CUSTOMER' AS patient_type, ac.id AS patient_id, ac.first_name AS patient_name, ac.uhid FROM appointment_customers AS ac WHERE ac.thinapp_id = $thin_app_id AND ac.`status`='ACTIVE' AND ( ac.mobile = '$mobile'  OR ac.parents_mobile = '$mobile') UNION ALL SELECT 'CHILDREN' AS patient_type, c.id AS patient_id, c.child_name AS patient_name, c.uhid FROM childrens AS c WHERE c.thinapp_id = $thin_app_id AND c.`status`='ACTIVE' AND (c.mobile = '$mobile' OR c.parents_mobile = '$mobile')) AS final ORDER BY final.patient_name asc";
            
            $connection = ConnectionUtil::getConnection();
            $patient_list=array();
            $list = $connection->query($query);
            if ($list->num_rows) {
                $patient_list  = mysqli_fetch_all($list,MYSQL_ASSOC);
            }
            $this->set(compact('patient_list','patient_id','patient_type','appointment_id'));
            return $this->render('switch_patient_modal', 'ajax');
        }
    }
    public function save_switch()
    {
        $this->layout = false;
        $this->autoRender = false;
        if ($this->request->is(array('ajax'))) {
            $selected = explode("##",base64_decode($this->request->data['selected']));
            $appointment_id = base64_decode($this->request->data['ai']);
            $patient_name = trim($this->request->data['n']);
            $patient_id = $selected[0];
            $patient_type = $selected[1];
            $set_zero = 0;
            $response =array();
            $connection = ConnectionUtil::getConnection();
            $connection->autocommit(false);
            if($patient_type == "CHILDREN"){
                $sql = "UPDATE appointment_customer_staff_services set appointment_patient_name=?, children_id =?, appointment_customer_id =? where id = ?";
            }else{
                $sql = "UPDATE appointment_customer_staff_services set appointment_patient_name=?, appointment_customer_id =?, children_id=? where id = ?";
            }
            $stmt_appointment = $connection->prepare($sql);
            $stmt_appointment->bind_param('ssss',  $patient_name, $patient_id, $set_zero, $appointment_id );
            if($stmt_appointment->execute()){
                $connection->commit();
                $response['status']=1;
                $response['message']="Appointment switched successfully";
            }else{
                $response['status']=0;
                $response['message']="Sorry, appointment could not switched";
            }
            echo json_encode($response);die;
        }
    }

	public function search_telemedicine_report(){
        $reqData = $this->request->data['Search'];
        $pram = array();

        if (!empty($reqData['from_date'])) {
            $pram['f'] = $reqData['from_date'];
        }
        if (!empty($reqData['to_date'])) {
            $pram['t'] = $reqData['to_date'];
        }
        if (!empty($reqData['service_type'])) {
            $pram['st'] = $reqData['service_type'];
        }
        if (!empty($reqData['status'])) {
            $pram['s'] = $reqData['status'];
        }


        $this->redirect(
            array(
                "controller" => "app_admin",
                "action" => "telemedicine_report",
                "?" => $pram,
            )
        );
    }

    public function telemedicine_report(){

        $this->layout = "app_admin_home";

        $login = $this->Session->read('Auth.User.User');
        $thin_app_id = $login['thinapp_id'];

        $login1 = $this->Session->read('Auth.User');
        $condition = " tl.thinapp_id = $thin_app_id AND tl.`status` = 'ACTIVE' AND tl.is_refund = 'NO'";
        $searchData = $this->request->query;

        if (isset($searchData['f']) && !empty($searchData['f']) && !empty($searchData['t']) && isset($searchData['t'])) {
            $this->request->data['Search']['from_date'] = $searchData['f'];
            $from_date = DateTime::createFromFormat('d/m/Y', $searchData['f'])->format('Y-m-d');
            $this->request->data['Search']['to_date'] = $searchData['t'];
            $to_date = DateTime::createFromFormat('d/m/Y', $searchData['t'])->format('Y-m-d');
            $condition .= " and  DATE(tl.created) BETWEEN '$from_date' and '$to_date'";

        } else {
            $today = date("d/m/Y");
            $search_today = date("Y-m-d");
            $this->request->data['Search']['to_date'] = $this->request->data['Search']['from_date'] = $today;
            $condition .= " and  DATE(tl.created) BETWEEN '$search_today' and '$search_today'";
        }

        if (isset($searchData['st'])) {
            $this->request->data['Search']['service_type'] = $searchData['st'];
            $condition .= " and  tl.telemedicine_service_type = '".$searchData['st']."'";
        }

        if (isset($searchData['s'])) {
            $this->request->data['Search']['status'] = $searchData['s'];

            if($searchData['s'] == 'completed'){
                $condition .= " and  tcl.connect_status  = '".$searchData['s']."'";
            }else{
                $condition .= " and  tcl.connect_status  != 'completed'";
            }
            
        }

        $allData=array();
        $query = "SELECT tl.created, tl.telemedicine_service_type, staff.name AS doctor_name, tcl.connect_status, tl.id, IF(tl.consult_for_name='',u.username,tl.consult_for_name) AS name, IF(tl.consult_for_mobile='',u.mobile,tl.consult_for_mobile) as mobile,tcl.duration,tcl.start_time,tcl.end_time,tcl.doctor_share as amount, tcl.call_charges, tl.is_paid  FROM telemedicine_leads AS tl left JOIN appointment_staffs AS staff ON staff.id = tl.appointment_staff_id  left JOIN telemedicine_call_logs AS tcl ON tl.id = tcl.telemedicine_lead_id  AND tcl.`status`='ACTIVE' left JOIN users AS u ON u.id = tl.user_id WHERE $condition order by tl.id desc";


        $connection = ConnectionUtil::getConnection();
         $list = $connection->query($query);
        if ($list->num_rows) {
            $allData  = mysqli_fetch_all($list,MYSQL_ASSOC);
        }
        $reportTitle = $login1['Thinapp']['name'].' ('.date('d/m/Y').')';
        $this->set(array('allData'=>$allData,'reportTitle'=>$reportTitle));
    }

	public function video_call_detail_list()
    {
        if($this->request->is('ajax')) {
            $final_array =array();
            $appointment_id = base64_decode($this->request->data['ai']);
            $login = $this->Session->read('Auth.User.User');
            $thin_app_id = $login['thinapp_id'];
            $connection = ConnectionUtil::getConnection();
            $query = "SELECT  tcl.type, tcl.connect_status, tcl.start_time,tcl.end_time,tcl.duration,tcl.call_charges,tcl.created  FROM telemedicine_call_logs AS tcl WHERE tcl.appointment_customer_staff_service_id = $appointment_id AND thinapp_id =$thin_app_id";
            $list = $connection->query($query);
            $final_array=array();
            if ($list->num_rows) {
                $final_array = mysqli_fetch_all($list,MYSQL_ASSOC);
            }
            $this->set(compact('final_array','thin_app_id'));
        }else{
            exit();
        }
    }

	public function search_list_view_appointment()
    {
        $reqData = $this->request->data['Search'];
        $pram = array();


        if (!empty($reqData['from_date'])) {
            $pram['f'] = $reqData['from_date'];
        }
        if (!empty($reqData['to_date'])) {
            $pram['t'] = $reqData['to_date'];
        }
        if (!empty($reqData['status'])) {
            $pram['s'] = $reqData['status'];
        }

        if (!empty($reqData['consulting_type'])) {
            $pram['ct'] = $reqData['consulting_type'];
        }
        if (!empty($reqData['payment_status'])) {
            $pram['ps'] = $reqData['payment_status'];
        }
        if (!empty($reqData['doctor'])) {
            $pram['d'] = $reqData['doctor'];
        }
        if (!empty($reqData['booked_via'])) {
            $pram['dv'] = $reqData['booked_via'];
        }
        if (!empty($reqData['convince_fee'])) {
            $pram['cf'] = $reqData['convince_fee'];
        }

        if (!empty($reqData['thinapp_id'])) {
            $pram['ti'] = $reqData['thinapp_id'];
        }

        $searchData = $pram;
        if (isset($searchData['ti']) || !empty($searchData['ti'])) {
            $this->request->data['Search']['thinapp_id'] = $thinappID = $searchData['ti'];
        }else{
            $login = $this->Session->read('Auth.User.User');
            $thinappID = $login['thinapp_id'];
        }

        $today = date("Y-m-d");

        $condition = "  acss.thinapp_id = $thinappID and acss.delete_status !='DELETED'";


        if (isset($searchData['f']) || isset($searchData['t'])) {
            if (!empty($searchData['f'])) {
                $this->request->data['Search']['from_date'] = $searchData['f'];
                $date = $from_date = DateTime::createFromFormat('d/m/Y', $searchData['f'])->format('Y-m-d');
                $condition .= " and DATE(acss.appointment_datetime) >='$date' ";
            }
            if (!empty($searchData['t'])) {
                $this->request->data['Search']['to_date'] = $searchData['t'];
                $date = $to_date = DateTime::createFromFormat('d/m/Y', $searchData['t'])->format('Y-m-d');
                $condition .= " and DATE(acss.appointment_datetime) <='$date' ";
            }
        } else {
            $this->request->data['Search']['to_date'] = date("d/m/Y");
            $this->request->data['Search']['from_date'] = date("d/m/Y");
            $today = $from_date = $to_date = date('Y-m-d');
            $condition .= " and DATE(acss.appointment_datetime) between '$today' and '$today' ";
        }


        if (isset($searchData['s']) || !empty($searchData['s'])) {
            $this->request->data['Search']['status'] = $status = $searchData['s'];
            $condition .= " and (acss.status) = '$status' ";
        }

        if (isset($searchData['ct']) || !empty($searchData['ct'])) {
            $this->request->data['Search']['consulting_type'] = $consulting_type = $searchData['ct'];
            $condition .= " and (acss.consulting_type) = '$consulting_type' ";
        }

        if (isset($searchData['ps']) || !empty($searchData['ps'])) {
            $this->request->data['Search']['payment_status'] = $payment_status = $searchData['ps'];
            $condition .= " and (acss.payment_status) = '$payment_status' ";
        }

        if (isset($searchData['d']) || !empty($searchData['d'])) {
            $this->request->data['Search']['doctor'] = $doctor_id = $searchData['d'];
            $condition .= " and (acss.appointment_staff_id) = $doctor_id ";
        }

        if (isset($searchData['bv']) || !empty($searchData['bv'])) {
            $this->request->data['Search']['booked_via'] = $booke_via= $searchData['bv'];
            $condition .= " and (acss.appointment_booked_from) = '$booke_via'";
        }
        if(isset($searchData['cf']) || !empty($searchData['cf'])) {
            $this->request->data['Search']['convince_fee'] = $convince_fee= $searchData['cf'];
            if($convince_fee=='YES'){
                $condition .= " and (acss.is_paid_booking_convenience_fee) = 'YES'";
            }ELSE{
                $condition .= " and (acss.is_paid_booking_convenience_fee) != 'YES'";
            }
        }


        $list = $sms_data = $payment_type_name = array();
       $query = "SELECT * from ( ";
        $query .= "(SELECT bcfd.doctor_online_consulting_fee, bcfd.booking_convenience_fee, acss.appointment_booked_from, acss.status, IFNULL(ac.uhid,c.uhid) as uhid, IFNULL(ac.mobile,c.mobile) AS patient_mobile, IFNULL(mpo.total_amount,acss.amount) AS amount, staff.name AS doctor_name, acss.appointment_datetime, acss.queue_number,acss.has_token,acss.sub_token,acss.emergency_appointment,acss.custom_token,acss.appointment_patient_name, acss.payment_status,acss.booking_payment_type,acss.consulting_type FROM appointment_customer_staff_services AS acss LEFT JOIN booking_convenience_fee_details AS bcfd ON bcfd.appointment_customer_staff_service_id = acss.id AND bcfd.`status`='ACTIVE' JOIN appointment_staffs AS staff ON staff.id= acss.appointment_staff_id  LEFT JOIN appointment_customers AS ac ON ac.id= acss.appointment_customer_id LEFT JOIN childrens AS c ON c.id = acss.children_id LEFT JOIN medical_product_orders AS mpo ON mpo.id = acss.medical_product_order_id WHERE $condition )";
        $query .= " UNION ALL ";
        $query .= "(SELECT bcfd.doctor_online_consulting_fee, bcfd.booking_convenience_fee, acss.appointment_booked_from, acss.status, IFNULL(ac.uhid,c.uhid) as uhid, IFNULL(ac.mobile,c.mobile) AS patient_mobile, IFNULL(mpo.total_amount,acss.amount) AS amount, staff.name AS doctor_name, acss.appointment_datetime, acss.queue_number,acss.has_token,acss.sub_token,acss.emergency_appointment,acss.custom_token,acss.appointment_patient_name, acss.payment_status,acss.booking_payment_type,acss.consulting_type FROM appointment_customer_staff_services_archive AS acss LEFT JOIN booking_convenience_fee_details AS bcfd ON bcfd.appointment_customer_staff_service_id = acss.id AND bcfd.`status`='ACTIVE' JOIN appointment_staffs AS staff ON staff.id= acss.appointment_staff_id  LEFT JOIN appointment_customers AS ac ON ac.id= acss.appointment_customer_id LEFT JOIN childrens AS c ON c.id = acss.children_id LEFT JOIN medical_product_orders_archive AS mpo ON mpo.id = acss.medical_product_order_id WHERE $condition )";
        $query .= " ) as final";

        $connection = ConnectionUtil::getConnection();
        $data_list = $connection->query($query);
        if ($data_list->num_rows) {
            $list = mysqli_fetch_all($data_list, MYSQLI_ASSOC);
        }
        $query = "SELECT sum(final.total_sms) as total_sms, SUM(final.total_otp_message) as total_otp_message, SUM(final.total_vac_message) as total_vac_message, SUM(final.total_cancel_sms) as total_cancel_sms, SUM(final.total_booking_sms) as total_booking_sms from ( ";
        $query .= " ( SELECT count(ssd.thinapp_id) as total_sms, SUM(IF(ssd.message_text LIKE '%one+time+password%',1,0)) as total_otp_message, SUM(IF(ssd.message_text LIKE '%vaccin%',1,0)) as total_vac_message, SUM(IF(ssd.message_text LIKE '%cancel%',1,0)) as total_cancel_sms, SUM(IF((ssd.message_text LIKE '%token+status%' OR ssd.message_text LIKE '%CONFIRMED%'),1,0)) as total_booking_sms FROM sent_sms_details as ssd where DATE(ssd.created) BETWEEN '$from_date' and '$to_date' and ssd.thinapp_id =$thinappID group by ssd.thinapp_id )";
        $query .= " UNION ALL ";
        $query .= " (SELECT count(ssd.thinapp_id) as total_sms, SUM(IF(ssd.message_text LIKE '%one+time+password%',1,0)) as total_otp_message, SUM(IF(ssd.message_text LIKE '%vaccin%',1,0)) as total_vac_message, SUM(IF(ssd.message_text LIKE '%cancel%',1,0)) as total_cancel_sms, SUM(IF((ssd.message_text LIKE '%token+status%' OR ssd.message_text LIKE '%CONFIRMED%'),1,0)) as total_booking_sms FROM sent_sms_details_archive as ssd where DATE(ssd.created) BETWEEN '$from_date' and '$to_date' and ssd.thinapp_id =$thinappID group by ssd.thinapp_id )";
        $query .= " ) as final";
        $connection = ConnectionUtil::getConnection();
        $data_list = $connection->query($query);
        if ($data_list->num_rows) {
            $sms_data = mysqli_fetch_assoc($data_list);
        }
        $this->set(compact('list','sms_data'));

    }


    public function list_view_appointment()
    {

        $this->layout = "app_admin_home";
        $this->request->data['Search']['to_date'] = date("d/m/Y");
        $this->request->data['Search']['from_date'] = date("d/m/Y");
        $today = $from_date = $to_date = date('Y-m-d');
        $this->request->data['Search']['payment_status'] = "SUCCESS";

    }
	
	public function ivr_call_list($ivr_number,$paging_url=null)
    {
        $ivr_number = base64_decode($ivr_number);
        $baseUrl = "https://mengage:aae6a18ce1902085f351aa70196b316a897fa40b@api.exotel.com";
        $this->layout = "app_admin_home";
        $this->request->data['Search']['to_date'] = date("d/m/Y");
        $this->request->data['Search']['from_date'] = date("d/m/Y");
        $param = "To=$ivr_number&SortBy=DateCreated:desc";
        $url = "$baseUrl/v1/Accounts/mengage/Calls.json?".$param;
        if(!empty($paging_url)){
            $url = $baseUrl.base64_decode($paging_url);
        }
        $ch = curl_init(); curl_setopt($ch, CURLOPT_VERBOSE, 1);
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_FAILONERROR, 0);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
        $callData = json_decode(curl_exec($ch),true);
        curl_close($ch);
        $this->set(compact('callData','ivr_number','baseUrl'));

    }
	
	public function search_prescription_list(){
        $reqData = $this->request->data['Search'];
        $pram = array();
        if (!empty($reqData['from_date'])) {
            $pram['f'] = $reqData['from_date'];
        }
        if (!empty($reqData['to_date'])) {
            $pram['t'] = $reqData['to_date'];
        }
        if (!empty($reqData['doctor_id'])) {
            $pram['d'] = $reqData['doctor_id'];
        }
        if (!empty($reqData['patient_mobile'])) {
            $pram['pm'] = $reqData['patient_mobile'];
        }
        if (!empty($reqData['patient_name'])) {
            $pram['pn'] = $reqData['patient_name'];
        }



        $this->redirect(
            array(
                "controller" => "app_admin",
                "action" => "prescription_list",
                "?" => $pram,
            )
        );
    }

    public function prescription_list()
    {
        $this->layout = 'app_admin_home';
        $login = $this->Session->read('Auth.User');
        $thin_app_id =$login['User']['thinapp_id'];
        $searchData = $this->request->query;
        $condition = " dfile.thinapp_id = $thin_app_id AND dfile.file_category_master_id = 6 AND dfile.`status` = 'ACTIVE' AND dfile.listing_type = 'OTHER' ";
        if (isset($searchData['d']) && !empty($searchData['d'])) {
            $this->request->data['Search']['doctor_id'] = $searchData['d'];
            $condition  .= " and staff.id = ".$searchData['d'];
        }
        if (isset($searchData['pm']) && !empty($searchData['pm'])) {
            $this->request->data['Search']['patient_mobile'] = $patient_mobile = $searchData['pm'];
            $condition  .= " AND ( ac.mobile like '%$patient_mobile%' OR c.mobile like '%$patient_mobile%' ) ";
        }
        if (isset($searchData['pn']) && !empty($searchData['pn'])) {
            $this->request->data['Search']['patient_name'] = $patient_name = $searchData['pn'];
            $condition  .= " AND ( ac.first_name like '%$patient_name%' OR c.child_name like '%$patient_name%' ) ";
        }

        if (isset($searchData['f']) || isset($searchData['t'])) {
            if (!empty($searchData['f'])) {
                $this->request->data['Search']['from_date'] = $searchData['f'];
                $date = $from_date = DateTime::createFromFormat('d/m/Y', $searchData['f'])->format('Y-m-d');
                $condition .= " and DATE(dfile.created) >='$date' ";
            }
            if (!empty($searchData['t'])) {
                $this->request->data['Search']['to_date'] = $searchData['t'];
                $date = $to_date = DateTime::createFromFormat('d/m/Y', $searchData['t'])->format('Y-m-d');
                $condition .= " and DATE(dfile.created) <='$date' ";
            }
        } else {
            $this->request->data['Search']['to_date'] = date("d/m/Y");
            $this->request->data['Search']['from_date'] = date("d/m/Y");
            $today = $from_date = $to_date = date('Y-m-d');
            $condition .= " and DATE(dfile.created) between '$today' and '$today' ";
        }

        $list = array();
        $query = "SELECT dfile.id,dfile.file_path,staff.name as doctor_name,IFNULL(ac.first_name,c.child_name) AS patient_name, IFNULL(ac.mobile,c.mobile) AS patient_mobile, dfile.created FROM drive_files AS dfile JOIN drive_folders AS df ON df.id = dfile.drive_folder_id JOIN appointment_staffs AS staff ON staff.id = dfile.doctor_id LEFT JOIN appointment_customers AS ac ON ac.id = df.appointment_customer_id LEFT JOIN childrens AS c ON c.id = df.children_id  WHERE $condition ORDER BY df.id DESC";
        $connection = ConnectionUtil::getConnection();
        $data_list = $connection->query($query);
        if ($data_list->num_rows) {
            $list = mysqli_fetch_all($data_list, MYSQL_ASSOC);
        }
        $this->set(compact('list'));

    }

    public function download_prescription($file,$patient_name){
        $file = base64_decode($file);
        $file_name =explode('.',basename($file));
        $file_name = base64_decode($patient_name).".".end($file_name);

        header('Content-Description: File Transfer');
        header('Content-Type: application/force-download');
        header("Content-Disposition: attachment; filename=\"" . $file_name . "\";");
        header('Content-Transfer-Encoding: binary');
        header('Expires: 0');
        header('Cache-Control: must-revalidate');
        header('Pragma: public');
        header('Content-Length: ' . Custom::getRemoteFileSize($file,'bite'));
        ob_clean();
        flush();
        readfile($file); //showing the path to the server where the file is to be download
        exit;
    }
	
	public function update_ipd()
    {
        $this->layout = 'ajax';
        $this->autoRender = false;
        $login = $this->Session->read('Auth.User');
        if ($this->request->is('ajax')) {
            $ipd_id = base64_decode($this->request->data['id']);
            if(!empty($ipd_id)){

                $date = @$this->request->data['date'];
                $chief_complaint = @$this->request->data['cc'];
                $connection = ConnectionUtil::getConnection();
                $created = Custom::created();
                $flag = $this->request->data['flag'];
                if ($flag ='admit_date' && !empty($date)) {
                    $date = DateTime::createFromFormat('d/m/Y h:i A', $date);
                    $date = $date->format('Y-m-d H:i:s');
                    $query = "update hospital_ipd set admit_date=?, modified =? where id = ?";
                    $stmt = $connection->prepare($query);
                    $stmt->bind_param('sss', $date, $created, $ipd_id);
                }else{
                    $query = "update hospital_ipd set chief_complaint=?, modified =? where id = ?";
                    $stmt = $connection->prepare($query);
                    $stmt->bind_param('sss', $chief_complaint, $created, $ipd_id);
                }
                if ($stmt->execute()) {
                    $response['status'] = 1;
                    $response['message'] = "Data update successfully";
                }else {
                    $response['status'] = 0;
                    $response['message'] = "Sorry data could not update";
                }
            }else{
                $response['status'] = 0;
                $response['message'] = "Invalid Patient";
            }
            echo json_encode($response);
        }else{
            exit();
        }

    }

	public function skip_payment_queue()
    {
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
            $connection = ConnectionUtil::getConnection();
            $appointment_id = base64_decode($this->request->data['id']);
            $sql  = "UPDATE payment_sequence_number SET payment_queue_skipped = ? where appointment_id = ?";
            $stmt = $connection->prepare($sql);
            $status ='YES';
            $stmt->bind_param('ss', $status, $appointment_id);
            if($stmt->execute()) {
                $response['status'] = 1;
                $response['message'] = "success";
            }else{
                $response['status'] = 0;
                $response['message'] = "fail";
            }
            echo json_encode($response);die;
        } else {
            exit();
        }

    }

	public function count_credit(){
        $this->autoRender = false;
        $msg = $this->request->data['msg'];
        return json_encode(Custom::smsStringWordCount($msg,'','ALL'));

    }

	public function doctor_setting($doctor_id_url,$type=''){

        $doctor_id =  base64_decode($doctor_id_url);
        $doctor_data = Custom::get_doctor_by_id($doctor_id);
        $thin_app_id = $doctor_data['thinapp_id'];
        $tab = "hours_tab";
        $hours_list = $address_list = $break_array = $service_list =  array();



        if($type=='address'){
            $tab ='address_tab';
            $query =    $query = "SELECT address.id AS address_id, address.address, asa.id as selected, asa.from_time, asa.to_time FROM appointment_addresses AS address LEFT JOIN appointment_staff_addresses AS asa ON asa.appointment_address_id = address.id AND asa.appointment_staff_id = $doctor_id WHERE address.status = 'ACTIVE' AND address.thinapp_id = $thin_app_id ";
            $connection = ConnectionUtil::getConnection();
            $service_message_list = $connection->query($query);
            if ($service_message_list->num_rows) {
                $address_list = mysqli_fetch_all($service_message_list,MYSQLI_ASSOC);
            }
        }else if($type=='service'){
            $tab ='service_tab';
            $query =    $query = "SELECT ser.*, ass.id AS selected  FROM appointment_services AS ser LEFT JOIN appointment_staff_services AS ass ON ass.appointment_service_id = ser.id AND ass.appointment_staff_id = $doctor_id WHERE ser.thinapp_id = $thin_app_id AND ser.status ='ACTIVE'";
            $connection = ConnectionUtil::getConnection();
            $service_message_list = $connection->query($query);
            if ($service_message_list->num_rows) {
                $service_list = mysqli_fetch_all($service_message_list,MYSQLI_ASSOC);
            }
        }else if($type=='break'){
            $tab ='break_tab';
            $break_array[1] =array('appointment_day_time_id'=>1,'data_list'=>'');
            $break_array[2] =array('appointment_day_time_id'=>2,'data_list'=>'');
            $break_array[3] =array('appointment_day_time_id'=>3,'data_list'=>'');
            $break_array[4] =array('appointment_day_time_id'=>4,'data_list'=>'');
            $break_array[5] =array('appointment_day_time_id'=>5,'data_list'=>'');
            $break_array[6] =array('appointment_day_time_id'=>6,'data_list'=>'');
            $break_array[7] =array('appointment_day_time_id'=>7,'data_list'=>'');

            $query =    $query = "SELECT asbs.appointment_day_time_id, asbs.time_from, asbs.time_to FROM appointment_staff_break_slots AS asbs WHERE asbs.appointment_staff_id = $doctor_id AND asbs.thinapp_id = $thin_app_id AND asbs.status='OPEN'";
            $connection = ConnectionUtil::getConnection();
            $service_message_list = $connection->query($query);
            if ($service_message_list->num_rows) {
                $breaks = mysqli_fetch_all($service_message_list,MYSQLI_ASSOC);
                foreach ($breaks as $key =>$list){
                    $break_array[$list['appointment_day_time_id']]['data_list'][] =$list;
                }

            }
        }else{
            $hours_list = $this->AppointmentStaffHour->find("all", array(
                "conditions" => array(
                    "AppointmentStaffHour.appointment_staff_id" => $doctor_id,
                ),
                'contain' => false
            ));
        }

        if ($this->request->is(array('post', 'put'))) {
            $data_array = $this->request->data;
            $save_array = array();
            if($type=='address'){

                foreach ($data_array['box'] as $address_id => $status){
                    $save_array[] =array('appointment_address_id'=>$address_id, 'thinapp_id'=>$thin_app_id,'appointment_staff_id'=>$doctor_id,'from_time'=>$data_array['from_time'][$address_id],'to_time'=>$data_array['to_time'][$address_id]);
                }

                $datasource = $this->AppointmentStaffAddress->getDataSource();
                try {
                    $datasource->begin();
                    $deleted = $this->AppointmentStaffAddress->deleteAll(array('AppointmentStaffAddress.thinapp_id' => $thin_app_id,'AppointmentStaffAddress.appointment_staff_id' => $doctor_id));
                    if ($deleted && $this->AppointmentStaffAddress->saveAll($save_array)) {
                        $datasource->commit();
                    	 Custom::delete_doctor_cache($doctor_id,$thin_app_id);
                        $this->Session->setFlash(__('Addrss setting update successfully.'), 'default', array(), 'success');
                        $this->redirect("/app_admin/doctor_setting/$doctor_id_url/$type");
                    } else {
                        $this->Session->setFlash(__('Sorry, setting could not update'), 'default', array(), 'error');
                    }
                }catch (Exception $e){
                    $datasource->rollback();
                }


            }else if($type=='break'){

                //pr($data_array);
                foreach ($data_array as $appointment_day_time_id => $inner_list){
                    foreach ($inner_list['from_time'] as $key => $ft){
                        $save_array[] =array(
                            'thinapp_id'=>$thin_app_id,
                            'appointment_staff_id'=>$doctor_id,
                            'user_id'=>$doctor_data['user_id'],
                            'appointment_day_time_id'=>$appointment_day_time_id,
                            'time_from'=>$ft,
                            'time_to'=>$data_array[$appointment_day_time_id]['to_time'][$key]
                        );
                    }

                }


                $datasource = $this->AppointmentStaffBreakSlot->getDataSource();
                try {
                    $datasource->begin();
                    // pr($save_array);die;
                    $deleted = $this->AppointmentStaffBreakSlot->deleteAll(array('AppointmentStaffBreakSlot.thinapp_id' => $thin_app_id,'AppointmentStaffBreakSlot.appointment_staff_id' => $doctor_id));
                    if ($deleted && $this->AppointmentStaffBreakSlot->saveAll($save_array)) {
                        $datasource->commit();
                    	 Custom::delete_doctor_cache($doctor_id,$thin_app_id);
                        $this->Session->setFlash(__('Break setting update successfully.'), 'default', array(), 'success');
                        $this->redirect("/app_admin/doctor_setting/$doctor_id_url/$type");
                    } else {
                        $this->Session->setFlash(__('Sorry, setting could not update'), 'default', array(), 'error');
                    }
                }catch (Exception $e){
                    $datasource->rollback();
                }




            }else if($type=='service'){

                $service_id = $data_array['selected_service'];
                $save_array =array('thinapp_id'=>$thin_app_id,'appointment_service_id'=>$service_id,'appointment_staff_id'=>$doctor_id);
                $datasource = $this->AppointmentStaffService->getDataSource();
                try {
                    $datasource->begin();
                    // pr($save_array);die;
                    $deleted = $this->AppointmentStaffService->deleteAll(array('AppointmentStaffService.thinapp_id' => $thin_app_id,'AppointmentStaffService.appointment_staff_id' => $doctor_id));
                    if ($deleted && $this->AppointmentStaffService->save($save_array)) {
                        $datasource->commit();
                    	 Custom::delete_doctor_cache($doctor_id,$thin_app_id);
                        $this->Session->setFlash(__('Servoce setting update successfully.'), 'default', array(), 'success');
                        $this->redirect("/app_admin/doctor_setting/$doctor_id_url/$type");
                    } else {
                        $this->Session->setFlash(__('Sorry, setting could not update'), 'default', array(), 'error');
                    }
                }catch (Exception $e){
                    $datasource->rollback();
                }




            }else {
                foreach ($data_array['from_time'] as $id => $ft){
                    $save_array[] =array('id'=>$id,'time_from'=>$ft,'time_to'=>$data_array['to_time'][$id],'status'=>$data_array['status'][$id]);
                }
                if ($this->AppointmentStaffHour->saveAll($save_array)) {
                	 Custom::delete_doctor_cache($doctor_id,$thin_app_id);
                    $this->Session->setFlash(__('Hour setting update successfully.'), 'default', array(), 'success');
                    $this->redirect("/app_admin/doctor_setting/$doctor_id_url/$type");
                } else {
                    $this->Session->setFlash(__('Sorry, setting could not update'), 'default', array(), 'error');
                }
            }
        	Custom::delete_doctor_cache($doctor_id,$thin_app_id);

        }
        $this->set(compact('service_list','break_array','address_list','doctor_id_url','tab','hours_list','type'));
    }

	public function today_collection()
    {
        $this->layout = 'ajax';
        if ($this->request->is('ajax')) {
            $login = $this->Session->read('Auth.User.User');
        	$login_data = $this->Session->read('Auth.User');
            $role = $login_data['USER_ROLE'];
            $created_by_user_id = 0;
            
            if ($role != 'ADMIN') {
                $created_by_user_id = ($role == "STAFF" || $role == "DOCTOR" || $role == "RECEPTIONIST") ? $login['id'] : 0;
            }
            $doctor_id = base64_decode($this->request->data['di']);
            $address_id = base64_decode($this->request->data['ai']);
            $booking_date = isset($this->request->data['bd'])?$this->request->data['bd']:date('d/m/Y');
            $date = DateTime::createFromFormat('d/m/Y', $booking_date);
            $searchDate = $date->format('Y-m-d');
            $payment_list = Custom::get_doctor_collection($doctor_id,$searchDate,$searchDate,$address_id,$created_by_user_id);
            $this->set(compact('payment_list','searchDate'));
            $this->render('today_collection', 'ajax');
        } else {
            exit();
        }

    }
}